
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bd80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000049b8  0802c020  0802c020  0003c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  080309d8  080309d8  000409d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08030a00  08030a00  000d8ae0  2**0
                  CONTENTS
  5 .ARM          00000000  08030a00  08030a00  000d8ae0  2**0
                  CONTENTS
  6 .preinit_array 00000000  08030a00  08030a00  000d8ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  08030a00  08030a00  00040a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08030a14  08030a14  00040a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  08030a1c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bb80  2400012c  08030b48  0005012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bcac  08030b48  0005bcac  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000d8ae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00070bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00070df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      000000c2  00000000  00000000  000d8b0e  2**0
                  CONTENTS, READONLY
 17 .ipc_data     0000004c  30000000  30000000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .debug_info   000b1e3c  00000000  00000000  000d8bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00014c73  00000000  00000000  0018aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00004818  00000000  00000000  0019f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000034e4  00000000  00000000  001a3e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00013125  00000000  00000000  001a737c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00055d86  00000000  00000000  001ba4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001b85bf  00000000  00000000  00210227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  00013400  00000000  00000000  003c87e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a5  00000000  00000000  003dbbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802c008 	.word	0x0802c008

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802c008 	.word	0x0802c008

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	; (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000416:	f000 fc1b 	bl	8000c50 <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800041a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000420:	bf00      	nop
 8000422:	4b46      	ldr	r3, [pc, #280]	; (800053c <main+0x12c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800042a:	2b00      	cmp	r3, #0
 800042c:	d004      	beq.n	8000438 <main+0x28>
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	60fa      	str	r2, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	dcf4      	bgt.n	8000422 <main+0x12>
  if ( timeout < 0 )
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b00      	cmp	r3, #0
 800043c:	da01      	bge.n	8000442 <main+0x32>
  {
    Error_Handler();
 800043e:	f000 fc51 	bl	8000ce4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000442:	f010 fcbd 	bl	8010dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000446:	f000 f88b 	bl	8000560 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800044a:	f000 f913 	bl	8000674 <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 800044e:	4b3b      	ldr	r3, [pc, #236]	; (800053c <main+0x12c>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	4a39      	ldr	r2, [pc, #228]	; (800053c <main+0x12c>)
 8000456:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800045a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800045e:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x12c>)
 8000460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 800046c:	2000      	movs	r0, #0
 800046e:	f011 fbef 	bl	8011c50 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 8000472:	2100      	movs	r1, #0
 8000474:	2000      	movs	r0, #0
 8000476:	f011 fc05 	bl	8011c84 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 800047a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000480:	bf00      	nop
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <main+0x12c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800048a:	2b00      	cmp	r3, #0
 800048c:	d104      	bne.n	8000498 <main+0x88>
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	1e5a      	subs	r2, r3, #1
 8000492:	60fa      	str	r2, [r7, #12]
 8000494:	2b00      	cmp	r3, #0
 8000496:	dcf4      	bgt.n	8000482 <main+0x72>
  if ( timeout < 0 )
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da01      	bge.n	80004a2 <main+0x92>
  {
    Error_Handler();
 800049e:	f000 fc21 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80004a2:	4b26      	ldr	r3, [pc, #152]	; (800053c <main+0x12c>)
 80004a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004a8:	4a24      	ldr	r2, [pc, #144]	; (800053c <main+0x12c>)
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80004b2:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x12c>)
 80004b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 faa2 	bl	8000a08 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004c4:	f000 f9ca 	bl	800085c <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004c8:	f000 fa48 	bl	800095c <MX_FMC_Init>
  MX_LTDC_Init();
 80004cc:	f000 f942 	bl	8000754 <MX_LTDC_Init>
  MX_CRC_Init();
 80004d0:	f000 f900 	bl	80006d4 <MX_CRC_Init>
  MX_DMA2D_Init();
 80004d4:	f000 f920 	bl	8000718 <MX_DMA2D_Init>
  MX_TIM4_Init();
 80004d8:	f000 f9ee 	bl	80008b8 <MX_TIM4_Init>
  MX_TouchGFX_Init();
 80004dc:	f001 fa09 	bl	80018f2 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  TIM4->SMCR &= ~TIM_SMCR_SMS;
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <main+0x130>)
 80004e2:	689a      	ldr	r2, [r3, #8]
 80004e4:	4916      	ldr	r1, [pc, #88]	; (8000540 <main+0x130>)
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x134>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	608b      	str	r3, [r1, #8]
  // only need to set the low 3 bits of SMS
  TIM4->SMCR |= 0b011;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0x130>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a13      	ldr	r2, [pc, #76]	; (8000540 <main+0x130>)
 80004f2:	f043 0303 	orr.w	r3, r3, #3
 80004f6:	6093      	str	r3, [r2, #8]

  // set timer channel inputs
  TIM4->CCMR1 |= (0x01 << 0) | (0x01 << 8);
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <main+0x130>)
 80004fa:	699a      	ldr	r2, [r3, #24]
 80004fc:	4910      	ldr	r1, [pc, #64]	; (8000540 <main+0x130>)
 80004fe:	f240 1301 	movw	r3, #257	; 0x101
 8000502:	4313      	orrs	r3, r2
 8000504:	618b      	str	r3, [r1, #24]

  // start/enable timer
  TIM4->CR1 |= TIM_CR1_CEN;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x130>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <main+0x130>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000512:	f00a fc35 	bl	800ad80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <main+0x138>)
 8000518:	2100      	movs	r1, #0
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <main+0x13c>)
 800051c:	f00a fc7a 	bl	800ae14 <osThreadNew>
 8000520:	4603      	mov	r3, r0
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <main+0x140>)
 8000524:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <main+0x144>)
 8000528:	2100      	movs	r1, #0
 800052a:	480b      	ldr	r0, [pc, #44]	; (8000558 <main+0x148>)
 800052c:	f00a fc72 	bl	800ae14 <osThreadNew>
 8000530:	4603      	mov	r3, r0
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <main+0x14c>)
 8000534:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000536:	f00a fc47 	bl	800adc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053a:	e7fe      	b.n	800053a <main+0x12a>
 800053c:	58024400 	.word	0x58024400
 8000540:	40000800 	.word	0x40000800
 8000544:	fffefff8 	.word	0xfffefff8
 8000548:	0802cdc4 	.word	0x0802cdc4
 800054c:	08000c41 	.word	0x08000c41
 8000550:	24000348 	.word	0x24000348
 8000554:	0802cde8 	.word	0x0802cde8
 8000558:	080018ff 	.word	0x080018ff
 800055c:	2400034c 	.word	0x2400034c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b09c      	sub	sp, #112	; 0x70
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056a:	224c      	movs	r2, #76	; 0x4c
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f02a fecf 	bl	802b312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2220      	movs	r2, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f02a fec9 	bl	802b312 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000580:	2004      	movs	r0, #4
 8000582:	f012 fefb 	bl	801337c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <SystemClock_Config+0x108>)
 800058c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058e:	4a36      	ldr	r2, [pc, #216]	; (8000668 <SystemClock_Config+0x108>)
 8000590:	f023 0301 	bic.w	r3, r3, #1
 8000594:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000596:	4b34      	ldr	r3, [pc, #208]	; (8000668 <SystemClock_Config+0x108>)
 8000598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <SystemClock_Config+0x10c>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a31      	ldr	r2, [pc, #196]	; (800066c <SystemClock_Config+0x10c>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <SystemClock_Config+0x10c>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b2c      	ldr	r3, [pc, #176]	; (800066c <SystemClock_Config+0x10c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemClock_Config+0x110>)
 80005ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005cc:	f023 0303 	bic.w	r3, r3, #3
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0x110>)
 80005d2:	f043 0302 	orr.w	r3, r3, #2
 80005d6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ea:	2305      	movs	r3, #5
 80005ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005ee:	2390      	movs	r3, #144	; 0x90
 80005f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005fe:	2308      	movs	r3, #8
 8000600:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000602:	2300      	movs	r3, #0
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060e:	4618      	mov	r0, r3
 8000610:	f013 fdf0 	bl	80141f4 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800061a:	f000 fb63 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	233f      	movs	r3, #63	; 0x3f
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800062a:	2308      	movs	r3, #8
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800062e:	2340      	movs	r3, #64	; 0x40
 8000630:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f014 fa2f 	bl	8014aa8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000650:	f000 fb48 	bl	8000ce4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000654:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000658:	2100      	movs	r1, #0
 800065a:	2000      	movs	r0, #0
 800065c:	f014 fbda 	bl	8014e14 <HAL_RCC_MCOConfig>
}
 8000660:	bf00      	nop
 8000662:	3770      	adds	r7, #112	; 0x70
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58000400 	.word	0x58000400
 800066c:	58024800 	.word	0x58024800
 8000670:	58024400 	.word	0x58024400

08000674 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0b0      	sub	sp, #192	; 0xc0
 8000678:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	22c0      	movs	r2, #192	; 0xc0
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f02a fe46 	bl	802b312 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8000692:	2305      	movs	r3, #5
 8000694:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 800069a:	230a      	movs	r3, #10
 800069c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800069e:	230a      	movs	r3, #10
 80006a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4618      	mov	r0, r3
 80006bc:	f014 fe2c 	bl	8015318 <HAL_RCCEx_PeriphCLKConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006c6:	f000 fb0d 	bl	8000ce4 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	37c0      	adds	r7, #192	; 0xc0
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <MX_CRC_Init+0x3c>)
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <MX_CRC_Init+0x40>)
 80006dc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_CRC_Init+0x3c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <MX_CRC_Init+0x3c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_CRC_Init+0x3c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <MX_CRC_Init+0x3c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_CRC_Init+0x3c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_CRC_Init+0x3c>)
 80006fe:	f010 fd55 	bl	80111ac <HAL_CRC_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000708:	f000 faec 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	24000148 	.word	0x24000148
 8000714:	58024c00 	.word	0x58024c00

08000718 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_DMA2D_Init+0x34>)
 800071e:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <MX_DMA2D_Init+0x38>)
 8000720:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_DMA2D_Init+0x34>)
 8000724:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000728:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_DMA2D_Init+0x34>)
 800072c:	2202      	movs	r2, #2
 800072e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_DMA2D_Init+0x34>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_DMA2D_Init+0x34>)
 8000738:	f010 fe2a 	bl	8011390 <HAL_DMA2D_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 8000742:	f000 facf 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2400016c 	.word	0x2400016c
 8000750:	52001000 	.word	0x52001000

08000754 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 800075a:	f000 fac9 	bl	8000cf0 <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2234      	movs	r2, #52	; 0x34
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f02a fdd4 	bl	802b312 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800076a:	4b3a      	ldr	r3, [pc, #232]	; (8000854 <MX_LTDC_Init+0x100>)
 800076c:	4a3a      	ldr	r2, [pc, #232]	; (8000858 <MX_LTDC_Init+0x104>)
 800076e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <MX_LTDC_Init+0x100>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000776:	4b37      	ldr	r3, [pc, #220]	; (8000854 <MX_LTDC_Init+0x100>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MX_LTDC_Init+0x100>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MX_LTDC_Init+0x100>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <MX_LTDC_Init+0x100>)
 800078a:	2228      	movs	r2, #40	; 0x28
 800078c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_LTDC_Init+0x100>)
 8000790:	2209      	movs	r2, #9
 8000792:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_LTDC_Init+0x100>)
 8000796:	2235      	movs	r2, #53	; 0x35
 8000798:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_LTDC_Init+0x100>)
 800079c:	220b      	movs	r2, #11
 800079e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_LTDC_Init+0x100>)
 80007a2:	f240 2215 	movw	r2, #533	; 0x215
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_LTDC_Init+0x100>)
 80007aa:	f240 121b 	movw	r2, #283	; 0x11b
 80007ae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <MX_LTDC_Init+0x100>)
 80007b2:	f240 2235 	movw	r2, #565	; 0x235
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_LTDC_Init+0x100>)
 80007ba:	f240 121d 	movw	r2, #285	; 0x11d
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_LTDC_Init+0x100>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_LTDC_Init+0x100>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_LTDC_Init+0x100>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007d8:	481e      	ldr	r0, [pc, #120]	; (8000854 <MX_LTDC_Init+0x100>)
 80007da:	f012 f8d3 	bl	8012984 <HAL_LTDC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 80007e4:	f000 fa7e 	bl	8000ce4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80007ec:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80007f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007fa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007fc:	2302      	movs	r3, #2
 80007fe:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000800:	23ff      	movs	r3, #255	; 0xff
 8000802:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800080c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800080e:	2305      	movs	r3, #5
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000818:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800081e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_LTDC_Init+0x100>)
 800083e:	f012 fa29 	bl	8012c94 <HAL_LTDC_ConfigLayer>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 8000848:	f000 fa4c 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3738      	adds	r7, #56	; 0x38
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	240001d4 	.word	0x240001d4
 8000858:	50001000 	.word	0x50001000

0800085c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_QUADSPI_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000868:	2201      	movs	r2, #1
 800086a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_QUADSPI_Init+0x50>)
 800086e:	2201      	movs	r2, #1
 8000870:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000874:	2210      	movs	r2, #16
 8000876:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_QUADSPI_Init+0x50>)
 800087a:	221a      	movs	r2, #26
 800087c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_QUADSPI_Init+0x50>)
 800088e:	2240      	movs	r2, #64	; 0x40
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_QUADSPI_Init+0x50>)
 8000894:	f012 fdcc 	bl	8013430 <HAL_QSPI_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 800089e:	f000 fa21 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_QUADSPI_Init+0x58>)
 80008a4:	f000 fa98 	bl	8000dd8 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2400027c 	.word	0x2400027c
 80008b0:	52005000 	.word	0x52005000
 80008b4:	08000ce5 	.word	0x08000ce5

080008b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_TIM4_Init+0xa0>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_TIM4_Init+0x9c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <MX_TIM4_Init+0x9c>)
 8000900:	f016 f92d 	bl	8016b5e <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800090a:	f000 f9eb 	bl	8000ce4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800090e:	2307      	movs	r3, #7
 8000910:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_TIM4_Init+0x9c>)
 8000922:	f016 fb0a 	bl	8016f3a <HAL_TIM_SlaveConfigSynchro>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800092c:	f000 f9da 	bl	8000ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000930:	2300      	movs	r3, #0
 8000932:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_TIM4_Init+0x9c>)
 800093e:	f016 fd6b 	bl	8017418 <HAL_TIMEx_MasterConfigSynchronization>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f9cc 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	240002c8 	.word	0x240002c8
 8000958:	40000800 	.word	0x40000800

0800095c <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_FMC_Init+0xa0>)
 8000976:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <MX_FMC_Init+0xa4>)
 8000978:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_FMC_Init+0xa0>)
 800097c:	2201      	movs	r2, #1
 800097e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_FMC_Init+0xa0>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_FMC_Init+0xa0>)
 8000988:	2204      	movs	r2, #4
 800098a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_FMC_Init+0xa0>)
 800098e:	2210      	movs	r2, #16
 8000990:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_FMC_Init+0xa0>)
 8000994:	2240      	movs	r2, #64	; 0x40
 8000996:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_FMC_Init+0xa0>)
 800099a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800099e:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_FMC_Init+0xa0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_FMC_Init+0xa0>)
 80009a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ac:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_FMC_Init+0xa0>)
 80009b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_FMC_Init+0xa0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80009c0:	2306      	movs	r3, #6
 80009c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80009c8:	2306      	movs	r3, #6
 80009ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4807      	ldr	r0, [pc, #28]	; (80009fc <MX_FMC_Init+0xa0>)
 80009de:	f016 f809 	bl	80169f4 <HAL_SDRAM_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e8:	f000 f97c 	bl	8000ce4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_FMC_Init+0xa8>)
 80009ee:	f000 fa14 	bl	8000e1a <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000314 	.word	0x24000314
 8000a00:	52004140 	.word	0x52004140
 8000a04:	08000ce5 	.word	0x08000ce5

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b090      	sub	sp, #64	; 0x40
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a1e:	4b81      	ldr	r3, [pc, #516]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a7f      	ldr	r2, [pc, #508]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b7d      	ldr	r3, [pc, #500]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a3c:	4b79      	ldr	r3, [pc, #484]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a78      	ldr	r2, [pc, #480]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b75      	ldr	r3, [pc, #468]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a5a:	4b72      	ldr	r3, [pc, #456]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a70      	ldr	r2, [pc, #448]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a74:	623b      	str	r3, [r7, #32]
 8000a76:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a78:	4b6a      	ldr	r3, [pc, #424]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	4a69      	ldr	r2, [pc, #420]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a80:	f043 0310 	orr.w	r3, r3, #16
 8000a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a88:	4b66      	ldr	r3, [pc, #408]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a96:	4b63      	ldr	r3, [pc, #396]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	4a61      	ldr	r2, [pc, #388]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa6:	4b5f      	ldr	r3, [pc, #380]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b5b      	ldr	r3, [pc, #364]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aba:	4a5a      	ldr	r2, [pc, #360]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac4:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b4c      	ldr	r3, [pc, #304]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	4a4b      	ldr	r2, [pc, #300]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b00:	4b48      	ldr	r3, [pc, #288]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	4b45      	ldr	r3, [pc, #276]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b1e:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b32:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3c:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a34      	ldr	r2, [pc, #208]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_GPIO_Init+0x21c>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2140      	movs	r1, #64	; 0x40
 8000b6c:	482e      	ldr	r0, [pc, #184]	; (8000c28 <MX_GPIO_Init+0x220>)
 8000b6e:	f011 f855 	bl	8011c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b72:	2308      	movs	r3, #8
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	4619      	mov	r1, r3
 8000b84:	4829      	ldr	r0, [pc, #164]	; (8000c2c <MX_GPIO_Init+0x224>)
 8000b86:	f010 fd77 	bl	8011678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_GPIO_Init+0x220>)
 8000ba8:	f010 fd66 	bl	8011678 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000bac:	2308      	movs	r3, #8
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	481c      	ldr	r0, [pc, #112]	; (8000c30 <MX_GPIO_Init+0x228>)
 8000bc0:	f010 fd5a 	bl	8011678 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <MX_GPIO_Init+0x22c>)
 8000bd8:	f010 fd4e 	bl	8011678 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	; (8000c28 <MX_GPIO_Init+0x220>)
 8000bf4:	f010 fd40 	bl	8011678 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_GPIO_Init+0x230>)
 8000c04:	f010 fd38 	bl	8011678 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c12:	4619      	mov	r1, r3
 8000c14:	4809      	ldr	r0, [pc, #36]	; (8000c3c <MX_GPIO_Init+0x234>)
 8000c16:	f010 fd2f 	bl	8011678 <HAL_GPIO_Init>
}
 8000c1a:	bf00      	nop
 8000c1c:	3740      	adds	r7, #64	; 0x40
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	58024400 	.word	0x58024400
 8000c28:	58020000 	.word	0x58020000
 8000c2c:	58022000 	.word	0x58022000
 8000c30:	58021800 	.word	0x58021800
 8000c34:	58022800 	.word	0x58022800
 8000c38:	58021000 	.word	0x58021000
 8000c3c:	58021c00 	.word	0x58021c00

08000c40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f00a f975 	bl	800af38 <osDelay>
 8000c4e:	e7fb      	b.n	8000c48 <StartDefaultTask+0x8>

08000c50 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c62:	f010 fa27 	bl	80110b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000c6e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000c72:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000c74:	2313      	movs	r3, #19
 8000c76:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c80:	2303      	movs	r3, #3
 8000c82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c94:	463b      	mov	r3, r7
 8000c96:	4618      	mov	r0, r3
 8000c98:	f010 fa44 	bl	8011124 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000ca0:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000ca4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000ca6:	231a      	movs	r3, #26
 8000ca8:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f010 fa39 	bl	8011124 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f010 fa16 	bl	80110e4 <HAL_MPU_Enable>

}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd2:	f010 f8b1 	bl	8010e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40001000 	.word	0x40001000

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	e7fe      	b.n	8000cec <Error_Handler+0x8>
	...

08000cf0 <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000cf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000cfc:	4a34      	ldr	r2, [pc, #208]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000d06:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d38:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <initLtdcClocks+0xe0>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <initLtdcClocks+0xe4>)
 8000dba:	f010 fc5d 	bl	8011678 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <initLtdcClocks+0xe4>)
 8000dc4:	f010 ff2a 	bl	8011c1c <HAL_GPIO_WritePin>
}
 8000dc8:	bf00      	nop
 8000dca:	3730      	adds	r7, #48	; 0x30
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020c00 	.word	0x58020c00

08000dd8 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000de0:	2303      	movs	r3, #3
 8000de2:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000de4:	2301      	movs	r3, #1
 8000de6:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000de8:	2340      	movs	r3, #64	; 0x40
 8000dea:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	2000      	movs	r0, #0
 8000df4:	f00e ff9e 	bl	800fd34 <BSP_QSPI_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e02:	2000      	movs	r0, #0
 8000e04:	f00f f870 	bl	800fee8 <BSP_QSPI_EnableMemoryMappedMode>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4798      	blx	r3
   }
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f00f fbce 	bl	80105c4 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f00f fb6f 	bl	801050c <BSP_SDRAM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <initBspSdRam+0x1e>
   {
      error_handler();
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4798      	blx	r3
   }
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x38>)
 8000e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_MspInit+0x38>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_MspInit+0x38>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	210f      	movs	r1, #15
 8000e68:	f06f 0001 	mvn.w	r0, #1
 8000e6c:	f010 f8ec 	bl	8011048 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400

08000e7c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_CRC_MspInit+0x3c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10e      	bne.n	8000eac <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_CRC_MspInit+0x40>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	4a09      	ldr	r2, [pc, #36]	; (8000ebc <HAL_CRC_MspInit+0x40>)
 8000e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_CRC_MspInit+0x40>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	58024c00 	.word	0x58024c00
 8000ebc:	58024400 	.word	0x58024400

08000ec0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_DMA2D_MspInit+0x48>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d116      	bne.n	8000f00 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_DMA2D_MspInit+0x4c>)
 8000ed4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <HAL_DMA2D_MspInit+0x4c>)
 8000eda:	f043 0310 	orr.w	r3, r3, #16
 8000ede:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_DMA2D_MspInit+0x4c>)
 8000ee4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ee8:	f003 0310 	and.w	r3, r3, #16
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2105      	movs	r1, #5
 8000ef4:	205a      	movs	r0, #90	; 0x5a
 8000ef6:	f010 f8a7 	bl	8011048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000efa:	205a      	movs	r0, #90	; 0x5a
 8000efc:	f010 f8be 	bl	801107c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	52001000 	.word	0x52001000
 8000f0c:	58024400 	.word	0x58024400

08000f10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0be      	sub	sp, #248	; 0xf8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0320 	add.w	r3, r7, #32
 8000f2c:	22c0      	movs	r2, #192	; 0xc0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f02a f9ee 	bl	802b312 <memset>
  if(hltdc->Instance==LTDC)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a69      	ldr	r2, [pc, #420]	; (80010e0 <HAL_LTDC_MspInit+0x1d0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	f040 80cb 	bne.w	80010d8 <HAL_LTDC_MspInit+0x1c8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000f52:	23a0      	movs	r3, #160	; 0xa0
 8000f54:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000f5e:	2353      	movs	r3, #83	; 0x53
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f66:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	4618      	mov	r0, r3
 8000f76:	f014 f9cf 	bl	8015318 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000f80:	f7ff feb0 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f84:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000f86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f8a:	4a56      	ldr	r2, [pc, #344]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000f96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a4e      	ldr	r2, [pc, #312]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fc0:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a47      	ldr	r2, [pc, #284]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fde:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a3f      	ldr	r2, [pc, #252]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_LTDC_MspInit+0x1d4>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 800101a:	23fc      	movs	r3, #252	; 0xfc
 800101c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001032:	230e      	movs	r3, #14
 8001034:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001038:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800103c:	4619      	mov	r1, r3
 800103e:	482a      	ldr	r0, [pc, #168]	; (80010e8 <HAL_LTDC_MspInit+0x1d8>)
 8001040:	f010 fb1a 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001044:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2302      	movs	r3, #2
 800105a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800105e:	230e      	movs	r3, #14
 8001060:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001064:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001068:	4619      	mov	r1, r3
 800106a:	4820      	ldr	r0, [pc, #128]	; (80010ec <HAL_LTDC_MspInit+0x1dc>)
 800106c:	f010 fb04 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001070:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001084:	2302      	movs	r3, #2
 8001086:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	230e      	movs	r3, #14
 800108c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001090:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001094:	4619      	mov	r1, r3
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <HAL_LTDC_MspInit+0x1e0>)
 8001098:	f010 faee 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b6:	230e      	movs	r3, #14
 80010b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_LTDC_MspInit+0x1e4>)
 80010c4:	f010 fad8 	bl	8011678 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2058      	movs	r0, #88	; 0x58
 80010ce:	f00f ffbb 	bl	8011048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010d2:	2058      	movs	r0, #88	; 0x58
 80010d4:	f00f ffd2 	bl	801107c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	37f8      	adds	r7, #248	; 0xf8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	50001000 	.word	0x50001000
 80010e4:	58024400 	.word	0x58024400
 80010e8:	58022800 	.word	0x58022800
 80010ec:	58022000 	.word	0x58022000
 80010f0:	58022400 	.word	0x58022400
 80010f4:	58021c00 	.word	0x58021c00

080010f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0be      	sub	sp, #248	; 0xf8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	22c0      	movs	r2, #192	; 0xc0
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f02a f8fa 	bl	802b312 <memset>
  if(hqspi->Instance==QUADSPI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a77      	ldr	r2, [pc, #476]	; (8001300 <HAL_QSPI_MspInit+0x208>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f040 80e7 	bne.w	80012f8 <HAL_QSPI_MspInit+0x200>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800112a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800112e:	f04f 0300 	mov.w	r3, #0
 8001132:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001136:	2300      	movs	r3, #0
 8001138:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f014 f8ea 	bl	8015318 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800114a:	f7ff fdcb 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800114e:	4b6d      	ldr	r3, [pc, #436]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 8001150:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001154:	4a6b      	ldr	r2, [pc, #428]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800115e:	4b69      	ldr	r3, [pc, #420]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 8001160:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800116c:	4b65      	ldr	r3, [pc, #404]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001172:	4a64      	ldr	r2, [pc, #400]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 8001174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001186:	61bb      	str	r3, [r7, #24]
 8001188:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	4a5c      	ldr	r2, [pc, #368]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 8001192:	f043 0320 	orr.w	r3, r3, #32
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a8:	4b56      	ldr	r3, [pc, #344]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	4a55      	ldr	r2, [pc, #340]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b8:	4b52      	ldr	r3, [pc, #328]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	4b4f      	ldr	r3, [pc, #316]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a4d      	ldr	r2, [pc, #308]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <HAL_QSPI_MspInit+0x20c>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80011e4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011fe:	2309      	movs	r3, #9
 8001200:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001204:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001208:	4619      	mov	r1, r3
 800120a:	483f      	ldr	r0, [pc, #252]	; (8001308 <HAL_QSPI_MspInit+0x210>)
 800120c:	f010 fa34 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001228:	230a      	movs	r3, #10
 800122a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001232:	4619      	mov	r1, r3
 8001234:	4834      	ldr	r0, [pc, #208]	; (8001308 <HAL_QSPI_MspInit+0x210>)
 8001236:	f010 fa1f 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 800123a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800123e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001254:	2309      	movs	r3, #9
 8001256:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800125a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800125e:	4619      	mov	r1, r3
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <HAL_QSPI_MspInit+0x214>)
 8001262:	f010 fa09 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001280:	230a      	movs	r3, #10
 8001282:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800128a:	4619      	mov	r1, r3
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <HAL_QSPI_MspInit+0x214>)
 800128e:	f010 f9f3 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001292:	230c      	movs	r3, #12
 8001294:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012aa:	2309      	movs	r3, #9
 80012ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4816      	ldr	r0, [pc, #88]	; (8001310 <HAL_QSPI_MspInit+0x218>)
 80012b8:	f010 f9de 	bl	8011678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d6:	2309      	movs	r3, #9
 80012d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012e0:	4619      	mov	r1, r3
 80012e2:	480c      	ldr	r0, [pc, #48]	; (8001314 <HAL_QSPI_MspInit+0x21c>)
 80012e4:	f010 f9c8 	bl	8011678 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 80012e8:	2200      	movs	r2, #0
 80012ea:	2105      	movs	r1, #5
 80012ec:	205c      	movs	r0, #92	; 0x5c
 80012ee:	f00f feab 	bl	8011048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80012f2:	205c      	movs	r0, #92	; 0x5c
 80012f4:	f00f fec2 	bl	801107c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	37f8      	adds	r7, #248	; 0xf8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	52005000 	.word	0x52005000
 8001304:	58024400 	.word	0x58024400
 8001308:	58021800 	.word	0x58021800
 800130c:	58021400 	.word	0x58021400
 8001310:	58021c00 	.word	0x58021c00
 8001314:	58020c00 	.word	0x58020c00

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_TIM_Base_MspInit+0x88>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d12d      	bne.n	8001396 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 800133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 800134c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_TIM_Base_MspInit+0x8c>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137e:	2301      	movs	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001386:	2302      	movs	r3, #2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_TIM_Base_MspInit+0x90>)
 8001392:	f010 f971 	bl	8011678 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40000800 	.word	0x40000800
 80013a4:	58024400 	.word	0x58024400
 80013a8:	58020400 	.word	0x58020400

080013ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0b8      	sub	sp, #224	; 0xe0
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013c2:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_FMC_MspInit+0x15c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f040 8099 	bne.w	80014fe <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80013cc:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <HAL_FMC_MspInit+0x15c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	22c0      	movs	r2, #192	; 0xc0
 80013d8:	2100      	movs	r1, #0
 80013da:	4618      	mov	r0, r3
 80013dc:	f029 ff99 	bl	802b312 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4618      	mov	r0, r3
 80013f6:	f013 ff8f 	bl	8015318 <HAL_RCCEx_PeriphCLKConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001400:	f7ff fc70 	bl	8000ce4 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001404:	4b41      	ldr	r3, [pc, #260]	; (800150c <HAL_FMC_MspInit+0x160>)
 8001406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800140a:	4a40      	ldr	r2, [pc, #256]	; (800150c <HAL_FMC_MspInit+0x160>)
 800140c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001410:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_FMC_MspInit+0x160>)
 8001416:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800141a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001422:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143c:	230c      	movs	r3, #12
 800143e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001446:	4619      	mov	r1, r3
 8001448:	4831      	ldr	r0, [pc, #196]	; (8001510 <HAL_FMC_MspInit+0x164>)
 800144a:	f010 f915 	bl	8011678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800144e:	f248 1333 	movw	r3, #33075	; 0x8133
 8001452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001472:	4619      	mov	r1, r3
 8001474:	4827      	ldr	r0, [pc, #156]	; (8001514 <HAL_FMC_MspInit+0x168>)
 8001476:	f010 f8ff 	bl	8011678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800147a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800147e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001494:	230c      	movs	r3, #12
 8001496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800149e:	4619      	mov	r1, r3
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <HAL_FMC_MspInit+0x16c>)
 80014a2:	f010 f8e9 	bl	8011678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c0:	230c      	movs	r3, #12
 80014c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <HAL_FMC_MspInit+0x170>)
 80014ce:	f010 f8d3 	bl	8011678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	23e0      	movs	r3, #224	; 0xe0
 80014d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ea:	230c      	movs	r3, #12
 80014ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014f4:	4619      	mov	r1, r3
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <HAL_FMC_MspInit+0x174>)
 80014f8:	f010 f8be 	bl	8011678 <HAL_GPIO_Init>
 80014fc:	e000      	b.n	8001500 <HAL_FMC_MspInit+0x154>
    return;
 80014fe:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001500:	37e0      	adds	r7, #224	; 0xe0
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	24000350 	.word	0x24000350
 800150c:	58024400 	.word	0x58024400
 8001510:	58021000 	.word	0x58021000
 8001514:	58021800 	.word	0x58021800
 8001518:	58020c00 	.word	0x58020c00
 800151c:	58021400 	.word	0x58021400
 8001520:	58021c00 	.word	0x58021c00

08001524 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800152c:	f7ff ff3e 	bl	80013ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_FMC_MspDeInit+0x58>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d123      	bne.n	800158c <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 8001544:	4b12      	ldr	r3, [pc, #72]	; (8001590 <HAL_FMC_MspDeInit+0x58>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_FMC_MspDeInit+0x5c>)
 800154c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_FMC_MspDeInit+0x5c>)
 8001552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001556:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800155a:	f64f 7183 	movw	r1, #65411	; 0xff83
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <HAL_FMC_MspDeInit+0x60>)
 8001560:	f010 fa3a 	bl	80119d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001564:	f248 1133 	movw	r1, #33075	; 0x8133
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <HAL_FMC_MspDeInit+0x64>)
 800156a:	f010 fa35 	bl	80119d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800156e:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_FMC_MspDeInit+0x68>)
 8001574:	f010 fa30 	bl	80119d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001578:	f64f 013f 	movw	r1, #63551	; 0xf83f
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_FMC_MspDeInit+0x6c>)
 800157e:	f010 fa2b 	bl	80119d8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001582:	21e0      	movs	r1, #224	; 0xe0
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <HAL_FMC_MspDeInit+0x70>)
 8001586:	f010 fa27 	bl	80119d8 <HAL_GPIO_DeInit>
 800158a:	e000      	b.n	800158e <HAL_FMC_MspDeInit+0x56>
    return;
 800158c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 800158e:	bd80      	pop	{r7, pc}
 8001590:	24000354 	.word	0x24000354
 8001594:	58024400 	.word	0x58024400
 8001598:	58021000 	.word	0x58021000
 800159c:	58021800 	.word	0x58021800
 80015a0:	58020c00 	.word	0x58020c00
 80015a4:	58021400 	.word	0x58021400
 80015a8:	58021c00 	.word	0x58021c00

080015ac <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80015b4:	f7ff ffc0 	bl	8001538 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b090      	sub	sp, #64	; 0x40
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	d827      	bhi.n	800161e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015ce:	2200      	movs	r2, #0
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	2036      	movs	r0, #54	; 0x36
 80015d4:	f00f fd38 	bl	8011048 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d8:	2036      	movs	r0, #54	; 0x36
 80015da:	f00f fd4f 	bl	801107c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <HAL_InitTick+0xc4>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_InitTick+0xc8>)
 80015e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_InitTick+0xc8>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_InitTick+0xc8>)
 80015f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001602:	f107 0210 	add.w	r2, r7, #16
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f013 fe41 	bl	8015294 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <HAL_InitTick+0x6a>
 800161c:	e001      	b.n	8001622 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e02b      	b.n	800167a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001622:	f013 fe0b 	bl	801523c <HAL_RCC_GetPCLK1Freq>
 8001626:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162a:	f013 fe07 	bl	801523c <HAL_RCC_GetPCLK1Freq>
 800162e:	4603      	mov	r3, r0
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <HAL_InitTick+0xcc>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9b      	lsrs	r3, r3, #18
 800163e:	3b01      	subs	r3, #1
 8001640:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_InitTick+0xd0>)
 8001644:	4a13      	ldr	r2, [pc, #76]	; (8001694 <HAL_InitTick+0xd4>)
 8001646:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_InitTick+0xd0>)
 800164a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800164e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_InitTick+0xd0>)
 8001652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001654:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_InitTick+0xd0>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_InitTick+0xd0>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001662:	480b      	ldr	r0, [pc, #44]	; (8001690 <HAL_InitTick+0xd0>)
 8001664:	f015 fa7b 	bl	8016b5e <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d104      	bne.n	8001678 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800166e:	4808      	ldr	r0, [pc, #32]	; (8001690 <HAL_InitTick+0xd0>)
 8001670:	f015 facc 	bl	8016c0c <HAL_TIM_Base_Start_IT>
 8001674:	4603      	mov	r3, r0
 8001676:	e000      	b.n	800167a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3740      	adds	r7, #64	; 0x40
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000050 	.word	0x24000050
 8001688:	58024400 	.word	0x58024400
 800168c:	431bde83 	.word	0x431bde83
 8001690:	24000358 	.word	0x24000358
 8001694:	40001000 	.word	0x40001000

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM6_DAC_IRQHandler+0x10>)
 80016ca:	f015 fb17 	bl	8016cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	24000358 	.word	0x24000358

080016d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <LTDC_IRQHandler+0x10>)
 80016de:	f011 fa21 	bl	8012b24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	240001d4 	.word	0x240001d4

080016ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA2D_IRQHandler+0x10>)
 80016f2:	f00f feb1 	bl	8011458 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2400016c 	.word	0x2400016c

08001700 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <QUADSPI_IRQHandler+0x10>)
 8001706:	f011 ff07 	bl	8013518 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2400027c 	.word	0x2400027c

08001714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_kill>:

int _kill(int pid, int sig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800172e:	f029 fee9 	bl	802b504 <__errno>
 8001732:	4603      	mov	r3, r0
 8001734:	2216      	movs	r2, #22
 8001736:	601a      	str	r2, [r3, #0]
	return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_exit>:

void _exit (int status)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ffe7 	bl	8001724 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001756:	e7fe      	b.n	8001756 <_exit+0x12>

08001758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e00a      	b.n	8001780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176a:	f3af 8000 	nop.w
 800176e:	4601      	mov	r1, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60ba      	str	r2, [r7, #8]
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf0      	blt.n	800176a <_read+0x12>
	}

return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e009      	b.n	80017b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf1      	blt.n	80017a4 <_write+0x12>
	}
	return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_close>:

int _close(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f2:	605a      	str	r2, [r3, #4]
	return 0;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_isatty>:

int _isatty(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return 1;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f029 fe4e 	bl	802b504 <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	24080000 	.word	0x24080000
 8001894:	00001000 	.word	0x00001000
 8001898:	240003a4 	.word	0x240003a4
 800189c:	2400bcb0 	.word	0x2400bcb0

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a4:	f00c fe5a 	bl	800e55c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018aa:	490d      	ldr	r1, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018ac:	4a0d      	ldr	r2, [pc, #52]	; (80018e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c0:	4c0a      	ldr	r4, [pc, #40]	; (80018ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ce:	f029 fe1f 	bl	802b510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7fe fd9d 	bl	8000410 <main>
  bx  lr
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018e0:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80018e4:	08030a1c 	.word	0x08030a1c
  ldr r2, =_sbss
 80018e8:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80018ec:	2400bcac 	.word	0x2400bcac

080018f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC3_IRQHandler>

080018f2 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80018f6:	f001 fc6b 	bl	80031d0 <touchgfx_init>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}

080018fe <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001906:	f001 fc8d 	bl	8003224 <touchgfx_taskEntry>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    {
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	601a      	str	r2, [r3, #0]
    }
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	0802ce2c 	.word	0x0802ce2c

08001934 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
    }
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffe9 	bl	8001914 <_ZN8touchgfx15TouchControllerD1Ev>
 8001942:	2104      	movs	r1, #4
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f029 fab0 	bl	802aeaa <_ZdlPvj>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 800195c:	f000 faa8 	bl	8001eb0 <_ZN25STM32H745ITouchController4initEv>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fabe 	bl	8001ef8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ffbb 	bl	8001914 <_ZN8touchgfx15TouchControllerD1Ev>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	0802ce14 	.word	0x0802ce14

080019ac <_ZN20STM32TouchControllerD0Ev>:
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_ZN20STM32TouchControllerD1Ev>
 80019ba:	2104      	movs	r1, #4
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f029 fa74 	bl	802aeaa <_ZdlPvj>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d80c      	bhi.n	80019f6 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80019dc:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80019de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e2:	bf00      	nop
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019f5 	.word	0x080019f5
 80019ec:	080019f5 	.word	0x080019f5
 80019f0:	080019f5 	.word	0x080019f5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 80019f4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d80c      	bhi.n	8001a2e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a2d 	.word	0x08001a2d
 8001a20:	08001a2d 	.word	0x08001a2d
 8001a24:	08001a2d 	.word	0x08001a2d
 8001a28:	08001a2d 	.word	0x08001a2d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001a2c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop

08001a3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d80c      	bhi.n	8001a66 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a65 	.word	0x08001a65
 8001a5c:	08001a65 	.word	0x08001a65
 8001a60:	08001a65 	.word	0x08001a65
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001a64:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
    {
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
    }
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	0802e604 	.word	0x0802e604

08001a94 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
    }
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe9 	bl	8001a74 <_ZN8touchgfx3HALD1Ev>
 8001aa2:	217c      	movs	r1, #124	; 0x7c
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f029 fa00 	bl	802aeaa <_ZdlPvj>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	887a      	ldrh	r2, [r7, #2]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d304      	bcc.n	8001b00 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	883a      	ldrh	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d205      	bcs.n	8001b0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001b02:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001b04:	219e      	movs	r1, #158	; 0x9e
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001b08:	f029 f9fe 	bl	802af08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b0c:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	8013      	strh	r3, [r2, #0]
    }
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2400b8c0 	.word	0x2400b8c0
 8001b24:	2400b8c2 	.word	0x2400b8c2
 8001b28:	0802c03c 	.word	0x0802c03c
 8001b2c:	0802c0a0 	.word	0x0802c0a0
 8001b30:	0802c0e4 	.word	0x0802c0e4
 8001b34:	2400b8c6 	.word	0x2400b8c6
 8001b38:	2400b8c8 	.word	0x2400b8c8

08001b3c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4798      	blx	r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e000      	b.n	8001b64 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001b62:	2300      	movs	r3, #0
    }
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f017 fd17 	bl	80195a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	33a4      	adds	r3, #164	; 0xa4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
    }
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001b98:	2300      	movs	r3, #0
    }
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001bc0:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001bc4:	4811      	ldr	r0, [pc, #68]	; (8001c0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001bc6:	f029 f99f 	bl	802af08 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001bea:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	bf14      	ite	ne
 8001bf2:	2301      	movne	r3, #1
 8001bf4:	2300      	moveq	r3, #0
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001bfa:	701a      	strb	r2, [r3, #0]
    }
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	0802c12c 	.word	0x0802c12c
 8001c08:	0802c164 	.word	0x0802c164
 8001c0c:	0802c0e4 	.word	0x0802c0e4
 8001c10:	2400b8ca 	.word	0x2400b8ca
 8001c14:	2400b8cb 	.word	0x2400b8cb

08001c18 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001c20:	2300      	movs	r3, #0
    }
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4798      	blx	r3
        }
    }
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
    }
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d011      	beq.n	8001ccc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d11e      	bne.n	8001cee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001cbc:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001cbe:	4a11      	ldr	r2, [pc, #68]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001cc0:	89bb      	ldrh	r3, [r7, #12]
 8001cc2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001cca:	e010      	b.n	8001cee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001ce0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001ce4:	89fb      	ldrh	r3, [r7, #14]
 8001ce6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
    }
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2400b8c4 	.word	0x2400b8c4
 8001d00:	2400b8c2 	.word	0x2400b8c2
 8001d04:	2400b8c0 	.word	0x2400b8c0

08001d08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f016 fdfd 	bl	8018912 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe9f 	bl	8001a74 <_ZN8touchgfx3HALD1Ev>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	0802d194 	.word	0x0802d194

08001d44 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ffe7 	bl	8001d20 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001d52:	217c      	movs	r1, #124	; 0x7c
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f029 f8a8 	bl	802aeaa <_ZdlPvj>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ffca 	bl	8001d08 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f001 fd3c 	bl	8003804 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001d8c:	bf00      	nop
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fdc8 	bl	8003934 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6839      	ldr	r1, [r7, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f001 fdc7 	bl	8003950 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fdcf 	bl	800397c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	68b9      	ldr	r1, [r7, #8]
 8001dfc:	f001 fe14 	bl	8003a28 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b082      	sub	sp, #8
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fd19 	bl	800384c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f001 fd1d 	bl	800386c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fd1f 	bl	8003888 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fd21 	bl	80038a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <_ZN11TouchGFXHALD1Ev+0x20>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff4f 	bl	8001d20 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	0802ce44 	.word	0x0802ce44

08001e90 <_ZN11TouchGFXHALD0Ev>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffe7 	bl	8001e6c <_ZN11TouchGFXHALD1Ev>
 8001e9e:	217c      	movs	r1, #124	; 0x7c
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f029 f802 	bl	802aeaa <_ZdlPvj>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001eb6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001eba:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001ebc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ec0:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f00e fcfe 	bl	80108d0 <BSP_TS_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001ee4:	4b03      	ldr	r3, [pc, #12]	; (8001ef4 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	e000      	b.n	8001eee <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001eec:	bf00      	nop
}
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	240003a8 	.word	0x240003a8

08001ef8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f083 0301 	eor.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e014      	b.n	8001f3e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001f14:	490d      	ldr	r1, [pc, #52]	; (8001f4c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f16:	2000      	movs	r0, #0
 8001f18:	f00e fd96 	bl	8010a48 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e00a      	b.n	8001f3e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	461a      	mov	r2, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	601a      	str	r2, [r3, #0]
    return true;
 8001f3c:	2301      	movs	r3, #1
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	240003a8 	.word	0x240003a8
 8001f4c:	240003ac 	.word	0x240003ac

08001f50 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f54:	2200      	movs	r2, #0
 8001f56:	2101      	movs	r1, #1
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f009 f808 	bl	800af6e <osSemaphoreNew>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001f62:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f70:	2128      	movs	r1, #40	; 0x28
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f74:	f028 ffc8 	bl	802af08 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f009 f915 	bl	800b1ac <osMessageQueueNew>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f86:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001f92:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001f94:	212c      	movs	r1, #44	; 0x2c
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001f98:	f028 ffb6 	bl	802af08 <__assert_func>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	240003b8 	.word	0x240003b8
 8001fa4:	0802c1b4 	.word	0x0802c1b4
 8001fa8:	0802c200 	.word	0x0802c200
 8001fac:	0802c230 	.word	0x0802c230
 8001fb0:	240003bc 	.word	0x240003bc
 8001fb4:	0802c2c0 	.word	0x0802c2c0

08001fb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f009 f85b 	bl	800b080 <osSemaphoreAcquire>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240003b8 	.word	0x240003b8

08001fd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f009 f8a1 	bl	800b124 <osSemaphoreRelease>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	240003b8 	.word	0x240003b8

08001fec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f009 f842 	bl	800b080 <osSemaphoreAcquire>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	240003b8 	.word	0x240003b8

08002004 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002008:	4b03      	ldr	r3, [pc, #12]	; (8002018 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f009 f889 	bl	800b124 <osSemaphoreRelease>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	240003b8 	.word	0x240003b8

0800201c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	2200      	movs	r2, #0
 8002028:	4903      	ldr	r1, [pc, #12]	; (8002038 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800202a:	f009 f933 	bl	800b294 <osMessageQueuePut>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	240003bc 	.word	0x240003bc
 8002038:	24000004 	.word	0x24000004

0800203c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	1d39      	adds	r1, r7, #4
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	f009 f982 	bl	800b354 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	1d39      	adds	r1, r7, #4
 8002056:	f04f 33ff 	mov.w	r3, #4294967295
 800205a:	2200      	movs	r2, #0
 800205c:	f009 f97a 	bl	800b354 <osMessageQueueGet>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	240003bc 	.word	0x240003bc

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db12      	blt.n	80020e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	88fb      	ldrh	r3, [r7, #6]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	490a      	ldr	r1, [pc, #40]	; (80020ec <__NVIC_DisableIRQ+0x44>)
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	3320      	adds	r3, #32
 80020d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020d4:	f3bf 8f4f 	dsb	sy
}
 80020d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020da:	f3bf 8f6f 	isb	sy
}
 80020de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
        : color(0)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
    {
    }
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
    }
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    {
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
    }
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	0802cf64 	.word	0x0802cf64

08002144 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    }
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ffe9 	bl	8002124 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002152:	2104      	movs	r1, #4
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f028 fea8 	bl	802aeaa <_ZdlPvj>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3344      	adds	r3, #68	; 0x44
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
    }
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    {
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
    }
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	0802eb5c 	.word	0x0802eb5c

080021a0 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    }
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ffe9 	bl	8002180 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80021ae:	210c      	movs	r1, #12
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f028 fe7a 	bl	802aeaa <_ZdlPvj>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	721a      	strb	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	725a      	strb	r2, [r3, #9]
    {
    }
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	0802eb5c 	.word	0x0802eb5c

080021f4 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 80021fc:	2301      	movs	r3, #1
    }
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3328      	adds	r3, #40	; 0x28
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4610      	mov	r0, r2
 800221e:	4798      	blx	r3
    }
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
        return instance;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
    }
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2400b8cc 	.word	0x2400b8cc

08002240 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3314      	adds	r3, #20
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4610      	mov	r0, r2
 8002258:	4798      	blx	r3
    }
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800226a:	f7ff ffdd 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 800226e:	4603      	mov	r3, r0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ffe5 	bl	8002240 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	330c      	adds	r3, #12
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff30 	bl	80020f0 <_ZN8touchgfx9colortypeC1Ev>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	330c      	adds	r3, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4610      	mov	r0, r2
 80022ae:	f7ff ff87 	bl	80021c0 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <_ZN8STM32DMAC1Ev+0x50>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f103 000c 	add.w	r0, r3, #12
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3320      	adds	r3, #32
 80022c2:	2260      	movs	r2, #96	; 0x60
 80022c4:	4619      	mov	r1, r3
 80022c6:	f017 fad5 	bl	8019874 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3320      	adds	r3, #32
 80022ce:	245f      	movs	r4, #95	; 0x5f
 80022d0:	461d      	mov	r5, r3
 80022d2:	e004      	b.n	80022de <_ZN8STM32DMAC1Ev+0x42>
 80022d4:	4628      	mov	r0, r5
 80022d6:	f7ff ffd2 	bl	800227e <_ZN8touchgfx6BlitOpC1Ev>
 80022da:	3520      	adds	r5, #32
 80022dc:	3c01      	subs	r4, #1
 80022de:	2c00      	cmp	r4, #0
 80022e0:	daf8      	bge.n	80022d4 <_ZN8STM32DMAC1Ev+0x38>
{
}
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	0802cf14 	.word	0x0802cf14

080022f0 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <_ZN8STM32DMAD1Ev+0x30>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 80022fe:	205a      	movs	r0, #90	; 0x5a
 8002300:	f7ff fed2 	bl	80020a8 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	330c      	adds	r3, #12
 8002308:	4618      	mov	r0, r3
 800230a:	f000 facb 	bl	80028a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff35 	bl	8002180 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	0802cf14 	.word	0x0802cf14

08002324 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
}
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffdf 	bl	80022f0 <_ZN8STM32DMAD1Ev>
 8002332:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f028 fdb7 	bl	802aeaa <_ZdlPvj>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002352:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002356:	4a11      	ldr	r2, [pc, #68]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002362:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 800237c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <_ZN8STM32DMA10initializeEv+0x54>)
 8002380:	f023 0310 	bic.w	r3, r3, #16
 8002384:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <_ZN8STM32DMA10initializeEv+0x58>)
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <_ZN8STM32DMA10initializeEv+0x5c>)
 800238a:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800238c:	205a      	movs	r0, #90	; 0x5a
 800238e:	f7ff fe6d 	bl	800206c <__NVIC_EnableIRQ>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	58024400 	.word	0x58024400
 80023a0:	2400016c 	.word	0x2400016c
 80023a4:	08002263 	.word	0x08002263

080023a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b0b      	cmp	r3, #11
 80023bc:	d826      	bhi.n	800240c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80023be:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80023c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c4:	08002401 	.word	0x08002401
 80023c8:	080023fb 	.word	0x080023fb
 80023cc:	080023f5 	.word	0x080023f5
 80023d0:	0800240d 	.word	0x0800240d
 80023d4:	0800240d 	.word	0x0800240d
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	0800240d 	.word	0x0800240d
 80023e0:	08002407 	.word	0x08002407
 80023e4:	08002407 	.word	0x08002407
 80023e8:	08002407 	.word	0x08002407
 80023ec:	08002407 	.word	0x08002407
 80023f0:	08002407 	.word	0x08002407
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80023f4:	2300      	movs	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
        break;
 80023f8:	e00e      	b.n	8002418 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 80023fa:	2301      	movs	r3, #1
 80023fc:	60fb      	str	r3, [r7, #12]
        break;
 80023fe:	e00b      	b.n	8002418 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002400:	2302      	movs	r3, #2
 8002402:	60fb      	str	r3, [r7, #12]
        break;
 8002404:	e008      	b.n	8002418 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002406:	2305      	movs	r3, #5
 8002408:	60fb      	str	r3, [r7, #12]
        break;
 800240a:	e005      	b.n	8002418 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800240e:	4a06      	ldr	r2, [pc, #24]	; (8002428 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002410:	2166      	movs	r1, #102	; 0x66
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002414:	f028 fd78 	bl	802af08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002418:	68fb      	ldr	r3, [r7, #12]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	0802c304 	.word	0x0802c304
 8002428:	0802c320 	.word	0x0802c320
 800242c:	0802c36c 	.word	0x0802c36c

08002430 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	2b0a      	cmp	r3, #10
 8002444:	d821      	bhi.n	800248a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	08002485 	.word	0x08002485
 8002450:	0800247f 	.word	0x0800247f
 8002454:	08002479 	.word	0x08002479
 8002458:	0800248b 	.word	0x0800248b
 800245c:	0800248b 	.word	0x0800248b
 8002460:	0800248b 	.word	0x0800248b
 8002464:	0800248b 	.word	0x0800248b
 8002468:	0800247f 	.word	0x0800247f
 800246c:	0800247f 	.word	0x0800247f
 8002470:	0800247f 	.word	0x0800247f
 8002474:	0800247f 	.word	0x0800247f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
        break;
 800247c:	e00b      	b.n	8002496 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800247e:	2301      	movs	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
        break;
 8002482:	e008      	b.n	8002496 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002484:	2302      	movs	r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
        break;
 8002488:	e005      	b.n	8002496 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800248c:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800248e:	2187      	movs	r1, #135	; 0x87
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8002492:	f028 fd39 	bl	802af08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002496:	68fb      	ldr	r3, [r7, #12]
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	0802c304 	.word	0x0802c304
 80024a4:	0802c3fc 	.word	0x0802c3fc
 80024a8:	0802c36c 	.word	0x0802c36c

080024ac <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80024b4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f5b      	ldrb	r3, [r3, #29]
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff67 	bl	80023a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024da:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	7f9b      	ldrb	r3, [r3, #30]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff60 	bl	80023a8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024e8:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	7f9b      	ldrb	r3, [r3, #30]
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff9d 	bl	8002430 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80024f6:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	8b5b      	ldrh	r3, [r3, #26]
 80024fc:	461a      	mov	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	8a9b      	ldrh	r3, [r3, #20]
 8002502:	1ad2      	subs	r2, r2, r3
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	8b5b      	ldrh	r3, [r3, #26]
 800250c:	461a      	mov	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	8a9b      	ldrh	r3, [r3, #20]
 8002512:	1ad2      	subs	r2, r2, r3
 8002514:	4b8e      	ldr	r3, [pc, #568]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002516:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	8b1b      	ldrh	r3, [r3, #24]
 800251c:	461a      	mov	r2, r3
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	8a9b      	ldrh	r3, [r3, #20]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	4b8a      	ldr	r3, [pc, #552]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002526:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002528:	4a89      	ldr	r2, [pc, #548]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	8adb      	ldrh	r3, [r3, #22]
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	8a9b      	ldrh	r3, [r3, #20]
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	4b84      	ldr	r3, [pc, #528]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800253e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	4b82      	ldr	r3, [pc, #520]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002546:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	4b80      	ldr	r3, [pc, #512]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800254e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002558:	d036      	beq.n	80025c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 800255a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255e:	f200 80e2 	bhi.w	8002726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d014      	beq.n	8002592 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8002568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256c:	f200 80db 	bhi.w	8002726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d059      	beq.n	8002628 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 8002574:	2b80      	cmp	r3, #128	; 0x80
 8002576:	f200 80d6 	bhi.w	8002726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	f000 80be 	beq.w	80026fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002580:	2b40      	cmp	r3, #64	; 0x40
 8002582:	f200 80d0 	bhi.w	8002726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d039      	beq.n	80025fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 800258a:	2b20      	cmp	r3, #32
 800258c:	f000 80b6 	beq.w	80026fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 8002590:	e0c9      	b.n	8002726 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7f1b      	ldrb	r3, [r3, #28]
 8002596:	061b      	lsls	r3, r3, #24
 8002598:	4619      	mov	r1, r3
 800259a:	4a6d      	ldr	r2, [pc, #436]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800259c:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800259e:	430b      	orrs	r3, r1
 80025a0:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	4c6a      	ldr	r4, [pc, #424]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fdaf 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 80025ae:	4603      	mov	r3, r0
 80025b0:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025be:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025c0:	4b63      	ldr	r3, [pc, #396]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025c2:	4a65      	ldr	r2, [pc, #404]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025c4:	601a      	str	r2, [r3, #0]
        break;
 80025c6:	e0da      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	7f1b      	ldrb	r3, [r3, #28]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	4619      	mov	r1, r3
 80025d0:	4a5f      	ldr	r2, [pc, #380]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025d2:	4b62      	ldr	r3, [pc, #392]	; (800275c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	4c5c      	ldr	r4, [pc, #368]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd94 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025e8:	4a59      	ldr	r2, [pc, #356]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	4b57      	ldr	r3, [pc, #348]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025f4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80025f6:	4b56      	ldr	r3, [pc, #344]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025f8:	4a57      	ldr	r2, [pc, #348]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025fa:	601a      	str	r2, [r3, #0]
        break;
 80025fc:	e0bf      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	7f1b      	ldrb	r3, [r3, #28]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	461a      	mov	r2, r3
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	4a51      	ldr	r2, [pc, #324]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002612:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b4c      	ldr	r3, [pc, #304]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800261e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002620:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002622:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002624:	601a      	str	r2, [r3, #0]
        break;
 8002626:	e0aa      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1d1a      	adds	r2, r3, #4
 8002636:	4b46      	ldr	r3, [pc, #280]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	7f1b      	ldrb	r3, [r3, #28]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	461a      	mov	r2, r3
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	4a42      	ldr	r2, [pc, #264]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800264e:	4a40      	ldr	r2, [pc, #256]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800265a:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8002666:	2b01      	cmp	r3, #1
 8002668:	d00d      	beq.n	8002686 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 800266a:	e020      	b.n	80026ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800266e:	69da      	ldr	r2, [r3, #28]
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002672:	4013      	ands	r3, r2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	8852      	ldrh	r2, [r2, #2]
 8002678:	3a01      	subs	r2, #1
 800267a:	0212      	lsls	r2, r2, #8
 800267c:	4611      	mov	r1, r2
 800267e:	4a34      	ldr	r2, [pc, #208]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002680:	430b      	orrs	r3, r1
 8002682:	61d3      	str	r3, [r2, #28]
                break;
 8002684:	e01a      	b.n	80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	7f1b      	ldrb	r3, [r3, #28]
 800268a:	2bff      	cmp	r3, #255	; 0xff
 800268c:	d101      	bne.n	8002692 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                  blend = false;
 800268e:	2300      	movs	r3, #0
 8002690:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002692:	4b2f      	ldr	r3, [pc, #188]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	4b32      	ldr	r3, [pc, #200]	; (8002760 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002698:	4013      	ands	r3, r2
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	8852      	ldrh	r2, [r2, #2]
 800269e:	3a01      	subs	r2, #1
 80026a0:	0212      	lsls	r2, r2, #8
 80026a2:	4313      	orrs	r3, r2
 80026a4:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	61d3      	str	r3, [r2, #28]
                break;
 80026ac:	e006      	b.n	80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80026ae:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80026b2:	f240 1111 	movw	r1, #273	; 0x111
 80026b6:	482d      	ldr	r0, [pc, #180]	; (800276c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80026b8:	f028 fc26 	bl	802af08 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80026bc:	4b24      	ldr	r3, [pc, #144]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a23      	ldr	r2, [pc, #140]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80026c8:	bf00      	nop
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f4      	bne.n	80026ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x206>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80026e0:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026e2:	2210      	movs	r2, #16
 80026e4:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80026e6:	7ffb      	ldrb	r3, [r7, #31]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80026ec:	4b18      	ldr	r3, [pc, #96]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80026f0:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 80026f2:	e044      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80026f4:	4b16      	ldr	r3, [pc, #88]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80026f8:	601a      	str	r2, [r3, #0]
      break;
 80026fa:	e040      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	7f1b      	ldrb	r3, [r3, #28]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	461a      	mov	r2, r3
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800270a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270e:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691a      	ldr	r2, [r3, #16]
 800271a:	4b0d      	ldr	r3, [pc, #52]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800271c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002720:	4a0d      	ldr	r2, [pc, #52]	; (8002758 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002722:	601a      	str	r2, [r3, #0]
        break;
 8002724:	e02b      	b.n	800277e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7f1b      	ldrb	r3, [r3, #28]
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	461a      	mov	r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	7f5a      	ldrb	r2, [r3, #29]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7f9b      	ldrb	r3, [r3, #30]
 8002742:	429a      	cmp	r2, r3
 8002744:	d016      	beq.n	8002774 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002746:	4b02      	ldr	r3, [pc, #8]	; (8002750 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002748:	4a09      	ldr	r2, [pc, #36]	; (8002770 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800274a:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 800274c:	e016      	b.n	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800274e:	bf00      	nop
 8002750:	52001000 	.word	0x52001000
 8002754:	0002000a 	.word	0x0002000a
 8002758:	00020201 	.word	0x00020201
 800275c:	00020009 	.word	0x00020009
 8002760:	ffff00ef 	.word	0xffff00ef
 8002764:	0802c448 	.word	0x0802c448
 8002768:	0802c464 	.word	0x0802c464
 800276c:	0802c36c 	.word	0x0802c36c
 8002770:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8002776:	f240 2201 	movw	r2, #513	; 0x201
 800277a:	601a      	str	r2, [r3, #0]
        break;
 800277c:	bf00      	nop
    }
}
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd90      	pop	{r4, r7, pc}
 8002786:	bf00      	nop
 8002788:	52001000 	.word	0x52001000

0800278c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	7f9b      	ldrb	r3, [r3, #30]
 800279a:	4619      	mov	r1, r3
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fe47 	bl	8002430 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80027a2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80027a4:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	8adb      	ldrh	r3, [r3, #22]
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	8a9b      	ldrh	r3, [r3, #20]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	4b36      	ldr	r3, [pc, #216]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b34      	ldr	r3, [pc, #208]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	8b5b      	ldrh	r3, [r3, #26]
 80027c8:	461a      	mov	r2, r3
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	8a9b      	ldrh	r3, [r3, #20]
 80027ce:	1ad2      	subs	r2, r2, r3
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d12e      	bne.n	800283a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	8b5b      	ldrh	r3, [r3, #26]
 80027e0:	461a      	mov	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	8a9b      	ldrh	r3, [r3, #20]
 80027e6:	1ad2      	subs	r2, r2, r3
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027ea:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	8b5b      	ldrh	r3, [r3, #26]
 80027f0:	461a      	mov	r2, r3
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	8a9b      	ldrh	r3, [r3, #20]
 80027f6:	1ad2      	subs	r2, r2, r3
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027fa:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
 8002806:	061b      	lsls	r3, r3, #24
 8002808:	4619      	mov	r1, r3
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 800280e:	430b      	orrs	r3, r1
 8002810:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	4c1f      	ldr	r4, [pc, #124]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc77 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 800281e:	4603      	mov	r3, r0
 8002820:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002828:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002830:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002834:	4a19      	ldr	r2, [pc, #100]	; (800289c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8002836:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002838:	e027      	b.n	800288a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	330c      	adds	r3, #12
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc5e 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 8002850:	4603      	mov	r3, r0
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	330c      	adds	r3, #12
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fc55 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 8002862:	4603      	mov	r3, r0
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800286a:	431c      	orrs	r4, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fc4b 	bl	800210c <_ZNK8touchgfx9colortypecvmEv>
 8002876:	4603      	mov	r3, r0
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002880:	4323      	orrs	r3, r4
 8002882:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002886:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	52001000 	.word	0x52001000
 8002898:	00010009 	.word	0x00010009
 800289c:	00020201 	.word	0x00020201
 80028a0:	00030201 	.word	0x00030201

080028a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fc35 	bl	8002124 <_ZN8touchgfx9DMA_QueueD1Ev>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	0802ebac 	.word	0x0802ebac

080028c8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ffe7 	bl	80028a4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80028d6:	2114      	movs	r1, #20
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f028 fae6 	bl	802aeaa <_ZdlPvj>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	805a      	strh	r2, [r3, #2]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	809a      	strh	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	80da      	strh	r2, [r3, #6]
    {
    }
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
    }
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	2400b928 	.word	0x2400b928

08002938 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    {
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	601a      	str	r2, [r3, #0]
    }
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	0802d180 	.word	0x0802d180

08002958 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
    }
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffe9 	bl	8002938 <_ZN8touchgfx12FontProviderD1Ev>
 8002966:	2104      	movs	r1, #4
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f028 fa9e 	bl	802aeaa <_ZdlPvj>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	611a      	str	r2, [r3, #16]
    {
    }
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	0802d170 	.word	0x0802d170

080029b8 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
    {
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	601a      	str	r2, [r3, #0]
    }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	0802d170 	.word	0x0802d170

080029d8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    }
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ffe9 	bl	80029b8 <_ZN8touchgfx7MVPHeapD1Ev>
 80029e6:	2114      	movs	r1, #20
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f028 fa5e 	bl	802aeaa <_ZdlPvj>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
    {
    }
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
    {
    }
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
    {
    }
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
    {
    }
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
    {
    }
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
    {
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	601a      	str	r2, [r3, #0]
    }
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	0802d148 	.word	0x0802d148

08002a9c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    }
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ffe9 	bl	8002a7c <_ZN8touchgfx15UIEventListenerD1Ev>
 8002aaa:	2104      	movs	r1, #4
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f028 f9fc 	bl	802aeaa <_ZdlPvj>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    {
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
    }
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	0802f1a4 	.word	0x0802f1a4

08002adc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    }
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff ffe9 	bl	8002abc <_ZN8touchgfx3LCDD1Ev>
 8002aea:	2108      	movs	r1, #8
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f028 f9dc 	bl	802aeaa <_ZdlPvj>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002b26:	6810      	ldr	r0, [r2, #0]
 8002b28:	6851      	ldr	r1, [r2, #4]
 8002b2a:	c303      	stmia	r3!, {r0, r1}
    }
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
    {
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
    }
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	0802d130 	.word	0x0802d130

08002b58 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
    }
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffe9 	bl	8002b38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002b66:	2104      	movs	r1, #4
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f028 f99e 	bl	802aeaa <_ZdlPvj>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	739a      	strb	r2, [r3, #14]
        {
        }
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ffd5 	bl	8002b78 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	829a      	strh	r2, [r3, #20]
    {
    }
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002bf2:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
          gestures(),
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	331c      	adds	r3, #28
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ffcc 	bl	8002bbe <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3350      	adds	r3, #80	; 0x50
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fe39 	bl	80028e8 <_ZN8touchgfx4RectC1Ev>
          listener(0),
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
          lastX(0),
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	65da      	str	r2, [r3, #92]	; 0x5c
          lastY(0),
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60
          touchSampleRate(1),
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
          mcuLoadPct(0),
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
          vSyncCnt(0),
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
          vSyncForFrame(1),
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
          vSyncCompensationEnabled(false),
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          clientDirty(false),
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          swapRequested(false),
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          lastTouched(false),
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          updateMCULoad(0),
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	671a      	str	r2, [r3, #112]	; 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
          displayOrientationChangeRequested(false),
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
          useAuxiliaryLCD(false),
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
          useDMAAcceleration(true),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
          lastRenderMethod(HARDWARE)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d04:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002d06:	8b3b      	ldrh	r3, [r7, #24]
 8002d08:	8013      	strh	r3, [r2, #0]
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002d0c:	881a      	ldrh	r2, [r3, #0]
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002d10:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002d14:	8bbb      	ldrh	r3, [r7, #28]
 8002d16:	8013      	strh	r3, [r2, #0]
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002d1e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d26:	8b3a      	ldrh	r2, [r7, #24]
 8002d28:	8bbb      	ldrh	r3, [r7, #28]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	bf34      	ite	cc
 8002d2e:	2301      	movcc	r3, #1
 8002d30:	2300      	movcs	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	0802e604 	.word	0x0802e604
 8002d4c:	2400b8cc 	.word	0x2400b8cc
 8002d50:	2400b8c0 	.word	0x2400b8c0
 8002d54:	2400b8c6 	.word	0x2400b8c6
 8002d58:	2400b8c2 	.word	0x2400b8c2
 8002d5c:	2400b8c8 	.word	0x2400b8c8
 8002d60:	2400b8c4 	.word	0x2400b8c4

08002d64 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff fe81 	bl	8002a7c <_ZN8touchgfx15UIEventListenerD1Ev>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	0802f2b8 	.word	0x0802f2b8

08002d88 <_ZN8touchgfx11ApplicationD0Ev>:
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_ZN8touchgfx11ApplicationD1Ev>
 8002d96:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f028 f885 	bl	802aeaa <_ZdlPvj>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f804 	bl	8002dc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00f      	beq.n	8002df2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4610      	mov	r0, r2
 8002de6:	4798      	blx	r3
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00e      	beq.n	8002e16 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3308      	adds	r3, #8
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	4a05      	ldr	r2, [pc, #20]	; (8002e40 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff97 	bl	8002d64 <_ZN8touchgfx11ApplicationD1Ev>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	0802d0ec 	.word	0x0802d0ec

08002e44 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ffe7 	bl	8002e20 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f028 f827 	bl	802aeaa <_ZdlPvj>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fb09 	bl	8003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ffcb 	bl	8002e20 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	0802d090 	.word	0x0802d090

08002e98 <_ZN23FrontendApplicationBaseD0Ev>:
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ffe1 	bl	8002e68 <_ZN23FrontendApplicationBaseD1Ev>
 8002ea6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f027 fffd 	bl	802aeaa <_ZdlPvj>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	4a05      	ldr	r2, [pc, #20]	; (8002edc <_ZN19FrontendApplicationD1Ev+0x20>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffcb 	bl	8002e68 <_ZN23FrontendApplicationBaseD1Ev>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	0802d04c 	.word	0x0802d04c

08002ee0 <_ZN19FrontendApplicationD0Ev>:
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffe7 	bl	8002ebc <_ZN19FrontendApplicationD1Ev>
 8002eee:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f027 ffd9 	bl	802aeaa <_ZdlPvj>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002f10:	4618      	mov	r0, r3
 8002f12:	f007 fe01 	bl	800ab18 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f018 fd5b 	bl	801b9d4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fb20 	bl	8004578 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	f7ff fd0d 	bl	8002978 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	601a      	str	r2, [r3, #0]
    {

    }
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	0802d038 	.word	0x0802d038

08002f74 <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4801      	ldr	r0, [pc, #4]	; (8002f80 <__tcf_0+0xc>)
 8002f7a:	f000 f95d 	bl	8003238 <_ZN12FrontendHeapD1Ev>
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	240003c0 	.word	0x240003c0

08002f84 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3bf 8f5b 	dmb	ish
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d013      	beq.n	8002fca <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002fa2:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002fa4:	f027 ff83 	bl	802aeae <__cxa_guard_acquire>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002fba:	f000 f867 	bl	800308c <_ZN12FrontendHeapC1Ev>
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002fc0:	f027 ffc0 	bl	802af44 <atexit>
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002fc6:	f027 ff7e 	bl	802aec6 <__cxa_guard_release>
        return instance;
 8002fca:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	240010a8 	.word	0x240010a8
 8002fd4:	240003c0 	.word	0x240003c0
 8002fd8:	08002f75 	.word	0x08002f75

08002fdc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fce3 	bl	80029b8 <_ZN8touchgfx7MVPHeapD1Ev>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	0802d038 	.word	0x0802d038

08003000 <_ZN16FrontendHeapBaseD0Ev>:
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ffe7 	bl	8002fdc <_ZN16FrontendHeapBaseD1Ev>
 800300e:	2114      	movs	r1, #20
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f027 ff4a 	bl	802aeaa <_ZdlPvj>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4618      	mov	r0, r3
 800302c:	f014 fc4a 	bl	80178c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003030:	4a03      	ldr	r2, [pc, #12]	; (8003040 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	0802d004 	.word	0x0802d004

08003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4618      	mov	r0, r3
 8003050:	f014 fc38 	bl	80178c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003054:	4a03      	ldr	r2, [pc, #12]	; (8003064 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0802cfd0 	.word	0x0802cfd0

08003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f014 fc26 	bl	80178c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0802cf9c 	.word	0x0802cf9c

0800308c <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
        app(model, *this)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f103 0114 	add.w	r1, r3, #20
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f603 344c 	addw	r4, r3, #2892	; 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
        app(model, *this)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4623      	mov	r3, r4
 80030b2:	f7ff ff45 	bl	8002f40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80030b6:	4a18      	ldr	r2, [pc, #96]	; (8003118 <_ZN12FrontendHeapC1Ev+0x8c>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3314      	adds	r3, #20
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ffad 	bl	8003020 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	332c      	adds	r3, #44	; 0x2c
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ffba 	bl	8003044 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ffc6 	bl	8003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f603 308c 	addw	r0, r3, #2956	; 0xb8c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4619      	mov	r1, r3
 80030ec:	f007 f86a 	bl	800a1c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f603 43e4 	addw	r3, r3, #3300	; 0xce4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f007 fd00 	bl	800aafc <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7ff ff0d 	bl	8002f26 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}
 8003116:	bf00      	nop
 8003118:	0802cf88 	.word	0x0802cf88

0800311c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	8bbb      	ldrh	r3, [r7, #28]
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	8b3b      	ldrh	r3, [r7, #24]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	f7ff fd53 	bl	8002be4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	601a      	str	r2, [r3, #0]
    }
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	0802d194 	.word	0x0802d194

08003154 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	8bbb      	ldrh	r3, [r7, #28]
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	8b3b      	ldrh	r3, [r7, #24]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	f7ff ffd3 	bl	800311c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003176:	4a04      	ldr	r2, [pc, #16]	; (8003188 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]
    }
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	0802ce44 	.word	0x0802ce44

0800318c <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	0802ce2c 	.word	0x0802ce2c

080031ac <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ffe8 	bl	800318c <_ZN8touchgfx15TouchControllerC1Ev>
 80031bc:	4a03      	ldr	r2, [pc, #12]	; (80031cc <_ZN20STM32TouchControllerC1Ev+0x20>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	0802ce14 	.word	0x0802ce14

080031d0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80031d6:	f000 fd59 	bl	8003c8c <_ZN14BitmapDatabase11getInstanceEv>
 80031da:	4604      	mov	r4, r0
 80031dc:	f000 fd60 	bl	8003ca0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80031e0:	4603      	mov	r3, r0
 80031e2:	4619      	mov	r1, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2300      	movs	r3, #0
 80031ea:	2200      	movs	r2, #0
 80031ec:	4620      	mov	r0, r4
 80031ee:	f01b fe05 	bl	801edfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 80031f2:	4809      	ldr	r0, [pc, #36]	; (8003218 <touchgfx_init+0x48>)
 80031f4:	f7ff fb90 	bl	8002918 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f006 ff2d 	bl	800a058 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80031fe:	4807      	ldr	r0, [pc, #28]	; (800321c <touchgfx_init+0x4c>)
 8003200:	f01b fd3e 	bl	801ec80 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003204:	f7ff febe 	bl	8002f84 <_ZN12FrontendHeap11getInstanceEv>
 8003208:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800320a:	4805      	ldr	r0, [pc, #20]	; (8003220 <touchgfx_init+0x50>)
 800320c:	f7fe fdb6 	bl	8001d7c <_ZN11TouchGFXHAL10initializeEv>
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bd90      	pop	{r4, r7, pc}
 8003218:	24001d48 	.word	0x24001d48
 800321c:	24000008 	.word	0x24000008
 8003220:	24001d4c 	.word	0x24001d4c

08003224 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <touchgfx_taskEntry+0x10>)
 800322a:	f015 fbda 	bl	80189e2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	24001d4c 	.word	0x24001d4c

08003238 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	4a10      	ldr	r2, [pc, #64]	; (8003284 <_ZN12FrontendHeapD1Ev+0x4c>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f603 338c 	addw	r3, r3, #2956	; 0xb8c
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fe35 	bl	8002ebc <_ZN19FrontendApplicationD1Ev>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f603 334c 	addw	r3, r3, #2892	; 0xb4c
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f827 	bl	80032ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	332c      	adds	r3, #44	; 0x2c
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f844 	bl	80032f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3314      	adds	r3, #20
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f863 	bl	8003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff feb1 	bl	8002fdc <_ZN16FrontendHeapBaseD1Ev>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	0802cf88 	.word	0x0802cf88

08003288 <_ZN12FrontendHeapD0Ev>:
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ffd1 	bl	8003238 <_ZN12FrontendHeapD1Ev>
 8003296:	f640 41e8 	movw	r1, #3304	; 0xce8
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f027 fe05 	bl	802aeaa <_ZdlPvj>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4a05      	ldr	r2, [pc, #20]	; (80032cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f014 faff 	bl	80178c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	0802cf9c 	.word	0x0802cf9c

080032d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffe7 	bl	80032ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f027 fde2 	bl	802aeaa <_ZdlPvj>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	4a05      	ldr	r2, [pc, #20]	; (8003310 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4618      	mov	r0, r3
 8003302:	f014 fadd 	bl	80178c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	0802cfd0 	.word	0x0802cfd0

08003314 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ffe7 	bl	80032f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003322:	f44f 6132 	mov.w	r1, #2848	; 0xb20
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f027 fdbf 	bl	802aeaa <_ZdlPvj>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	4a05      	ldr	r2, [pc, #20]	; (8003358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f014 fab9 	bl	80178c0 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0802d004 	.word	0x0802d004

0800335c <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ffe7 	bl	8003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800336a:	2118      	movs	r1, #24
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f027 fd9c 	bl	802aeaa <_ZdlPvj>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4a05      	ldr	r2, [pc, #20]	; (800339c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff fad3 	bl	8002938 <_ZN8touchgfx12FontProviderD1Ev>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	0802d264 	.word	0x0802d264

080033a0 <_ZN23ApplicationFontProviderD0Ev>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ffe7 	bl	800337c <_ZN23ApplicationFontProviderD1Ev>
 80033ae:	2104      	movs	r1, #4
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f027 fd7a 	bl	802aeaa <_ZdlPvj>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fb73 	bl	8002abc <_ZN8touchgfx3LCDD1Ev>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	08030448 	.word	0x08030448

080033e4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ffe7 	bl	80033c0 <_ZN8touchgfx8LCD16bppD1Ev>
 80033f2:	2178      	movs	r1, #120	; 0x78
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f027 fd58 	bl	802aeaa <_ZdlPvj>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_Z41__static_initialization_and_destruction_0ii>:
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af02      	add	r7, sp, #8
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d119      	bne.n	8003448 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341a:	4293      	cmp	r3, r2
 800341c:	d114      	bne.n	8003448 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800341e:	4818      	ldr	r0, [pc, #96]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003420:	f7ff fec4 	bl	80031ac <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8003424:	4817      	ldr	r0, [pc, #92]	; (8003484 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003426:	f7fe ff39 	bl	800229c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 800342a:	4817      	ldr	r0, [pc, #92]	; (8003488 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800342c:	f01e fdae 	bl	8021f8c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003430:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003440:	4910      	ldr	r1, [pc, #64]	; (8003484 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003442:	4812      	ldr	r0, [pc, #72]	; (800348c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003444:	f7ff fe86 	bl	8003154 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003454:	4293      	cmp	r3, r2
 8003456:	d10e      	bne.n	8003476 <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800345a:	f7fe fd07 	bl	8001e6c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003460:	f7ff ff8c 	bl	800337c <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8003464:	4808      	ldr	r0, [pc, #32]	; (8003488 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003466:	f7ff ffab 	bl	80033c0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 800346a:	4806      	ldr	r0, [pc, #24]	; (8003484 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800346c:	f7fe ff40 	bl	80022f0 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8003470:	4803      	ldr	r0, [pc, #12]	; (8003480 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003472:	f7fe fa89 	bl	8001988 <_ZN20STM32TouchControllerD1Ev>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	240010ac 	.word	0x240010ac
 8003484:	240010b0 	.word	0x240010b0
 8003488:	24001cd0 	.word	0x24001cd0
 800348c:	24001d4c 	.word	0x24001d4c
 8003490:	24000008 	.word	0x24000008

08003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff fb47 	bl	8002b38 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	0802d0d4 	.word	0x0802d0d4

080034b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ffe7 	bl	8003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80034c6:	2110      	movs	r1, #16
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f027 fcee 	bl	802aeaa <_ZdlPvj>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 80034e0:	2301      	movs	r3, #1
    }
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80034f6:	2338      	movs	r3, #56	; 0x38
    }
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003510:	887a      	ldrh	r2, [r7, #2]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	3308      	adds	r3, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	4413      	add	r3, r2
    }
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	3308      	adds	r3, #8
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4413      	add	r3, r2
    }
 8003548:	4618      	mov	r0, r3
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800355c:	2301      	movs	r3, #1
    }
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003572:	f640 3318 	movw	r3, #2840	; 0xb18
    }
 8003576:	4618      	mov	r0, r3
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800358e:	887b      	ldrh	r3, [r7, #2]
 8003590:	f640 3218 	movw	r2, #2840	; 0xb18
 8003594:	fb02 f303 	mul.w	r3, r2, r3
 8003598:	3308      	adds	r3, #8
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
    }
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035b6:	887b      	ldrh	r3, [r7, #2]
 80035b8:	f640 3218 	movw	r2, #2840	; 0xb18
 80035bc:	fb02 f303 	mul.w	r3, r2, r3
 80035c0:	3308      	adds	r3, #8
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
    }
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80035da:	2301      	movs	r3, #1
    }
 80035dc:	4618      	mov	r0, r3
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80035f0:	2310      	movs	r3, #16
    }
 80035f2:	4618      	mov	r0, r3
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	460b      	mov	r3, r1
 8003608:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	3308      	adds	r3, #8
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
    }
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800362c:	887b      	ldrh	r3, [r7, #2]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3308      	adds	r3, #8
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
    }
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	1052      	asrs	r2, r2, #1
 8003654:	1899      	adds	r1, r3, r2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	e00a      	b.n	800367e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	1052      	asrs	r2, r2, #1
 8003672:	4413      	add	r3, r2
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	4413      	add	r3, r2
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4608      	mov	r0, r1
 8003680:	4798      	blx	r3
    }
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d010      	beq.n	80036bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d107      	bne.n	80036b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d001      	beq.n	80036bc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80036bc:	2300      	movs	r3, #0
    }
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <_GLOBAL__sub_I_touchgfx_init>:
 80036ca:	b580      	push	{r7, lr}
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036d2:	2001      	movs	r0, #1
 80036d4:	f7ff fe96 	bl	8003404 <_Z41__static_initialization_and_destruction_0ii>
 80036d8:	bd80      	pop	{r7, pc}

080036da <_GLOBAL__sub_D_touchgfx_init>:
 80036da:	b580      	push	{r7, lr}
 80036dc:	af00      	add	r7, sp, #0
 80036de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7ff fe8e 	bl	8003404 <_Z41__static_initialization_and_destruction_0ii>
 80036e8:	bd80      	pop	{r7, pc}

080036ea <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3320      	adds	r3, #32
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
    }
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003714:	3301      	adds	r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <__NVIC_EnableIRQ>:
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373a:	2b00      	cmp	r3, #0
 800373c:	db0b      	blt.n	8003756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	f003 021f 	and.w	r2, r3, #31
 8003744:	4907      	ldr	r1, [pc, #28]	; (8003764 <__NVIC_EnableIRQ+0x38>)
 8003746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800374a:	095b      	lsrs	r3, r3, #5
 800374c:	2001      	movs	r0, #1
 800374e:	fa00 f202 	lsl.w	r2, r0, r2
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	e000e100 	.word	0xe000e100

08003768 <__NVIC_DisableIRQ>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	db12      	blt.n	80037a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	490a      	ldr	r1, [pc, #40]	; (80037ac <__NVIC_DisableIRQ+0x44>)
 8003782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	2001      	movs	r0, #1
 800378a:	fa00 f202 	lsl.w	r2, r0, r2
 800378e:	3320      	adds	r3, #32
 8003790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003794:	f3bf 8f4f 	dsb	sy
}
 8003798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800379a:	f3bf 8f6f 	isb	sy
}
 800379e:	bf00      	nop
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	6039      	str	r1, [r7, #0]
 80037ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db0a      	blt.n	80037da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	490c      	ldr	r1, [pc, #48]	; (80037fc <__NVIC_SetPriority+0x4c>)
 80037ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ce:	0112      	lsls	r2, r2, #4
 80037d0:	b2d2      	uxtb	r2, r2
 80037d2:	440b      	add	r3, r1
 80037d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d8:	e00a      	b.n	80037f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4908      	ldr	r1, [pc, #32]	; (8003800 <__NVIC_SetPriority+0x50>)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	f003 030f 	and.w	r3, r3, #15
 80037e6:	3b04      	subs	r3, #4
 80037e8:	0112      	lsls	r2, r2, #4
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	440b      	add	r3, r1
 80037ee:	761a      	strb	r2, [r3, #24]
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	e000e100 	.word	0xe000e100
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	f015 f8d5 	bl	80189be <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003814:	687d      	ldr	r5, [r7, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3360      	adds	r3, #96	; 0x60
 800381c:	681c      	ldr	r4, [r3, #0]
 800381e:	f018 fa05 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8003822:	4603      	mov	r3, r0
 8003824:	4619      	mov	r1, r3
 8003826:	4628      	mov	r0, r5
 8003828:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3384      	adds	r3, #132	; 0x84
 8003832:	681c      	ldr	r4, [r3, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003838:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800383c:	47a0      	blx	r4
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	bf00      	nop
 8003848:	d0200000 	.word	0xd0200000

0800384c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8003854:	2109      	movs	r1, #9
 8003856:	205a      	movs	r0, #90	; 0x5a
 8003858:	f7ff ffaa 	bl	80037b0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800385c:	2109      	movs	r1, #9
 800385e:	2058      	movs	r0, #88	; 0x58
 8003860:	f7ff ffa6 	bl	80037b0 <__NVIC_SetPriority>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8003874:	205a      	movs	r0, #90	; 0x5a
 8003876:	f7ff ff59 	bl	800372c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800387a:	2058      	movs	r0, #88	; 0x58
 800387c:	f7ff ff56 	bl	800372c <__NVIC_EnableIRQ>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003890:	205a      	movs	r0, #90	; 0x5a
 8003892:	f7ff ff69 	bl	8003768 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8003896:	2058      	movs	r0, #88	; 0x58
 8003898:	f7ff ff66 	bl	8003768 <__NVIC_DisableIRQ>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80038be:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80038d2:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80038d4:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80038d6:	881a      	ldrh	r2, [r3, #0]
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6353      	str	r3, [r2, #52]	; 0x34
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	50001000 	.word	0x50001000
 80038f8:	24001dc8 	.word	0x24001dc8
 80038fc:	24001dca 	.word	0x24001dca

08003900 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	f015 f83e 	bl	801898c <_ZN8touchgfx3HAL10beginFrameEv>
 8003910:	4603      	mov	r3, r0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4618      	mov	r0, r3
 8003926:	f015 f83d 	bl	80189a4 <_ZN8touchgfx3HAL8endFrameEv>

}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	50001084 	.word	0x50001084

08003950 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800395a:	4a06      	ldr	r2, [pc, #24]	; (8003974 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8003962:	2201      	movs	r2, #1
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	50001084 	.word	0x50001084
 8003978:	50001000 	.word	0x50001000

0800397c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6839      	ldr	r1, [r7, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f014 ffc7 	bl	801891e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003990:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d03a      	beq.n	8003a1c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039ae:	f3bf 8f4f 	dsb	sy
}
 80039b2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ba:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	0b5b      	lsrs	r3, r3, #13
 80039c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80039c4:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ce:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80039d8:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80039de:	4911      	ldr	r1, [pc, #68]	; (8003a24 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1ea      	bne.n	80039d0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1e5a      	subs	r2, r3, #1
 80039fe:	613a      	str	r2, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf14      	ite	ne
 8003a04:	2301      	movne	r3, #1
 8003a06:	2300      	moveq	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1db      	bne.n	80039c6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a0e:	f3bf 8f4f 	dsb	sy
}
 8003a12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a14:	f3bf 8f6f 	isb	sy
}
 8003a18:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8003a1a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a1c:	bf00      	nop
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	f015 f8da 	bl	8018bf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003a42:	4603      	mov	r3, r0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d03a      	beq.n	8003ae0 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003a72:	f3bf 8f4f 	dsb	sy
}
 8003a76:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a7e:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	0b5b      	lsrs	r3, r3, #13
 8003a84:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a88:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	08db      	lsrs	r3, r3, #3
 8003a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a92:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a9c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003aa2:	4912      	ldr	r1, [pc, #72]	; (8003aec <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e5a      	subs	r2, r3, #1
 8003aae:	60fa      	str	r2, [r7, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ea      	bne.n	8003a94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1e5a      	subs	r2, r3, #1
 8003ac2:	613a      	str	r2, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1db      	bne.n	8003a8a <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003ad2:	f3bf 8f4f 	dsb	sy
}
 8003ad6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ad8:	f3bf 8f6f 	isb	sy
}
 8003adc:	bf00      	nop
}
 8003ade:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d03a      	beq.n	8003b84 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b16:	f3bf 8f4f 	dsb	sy
}
 8003b1a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	0b5b      	lsrs	r3, r3, #13
 8003b28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b2c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	08db      	lsrs	r3, r3, #3
 8003b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b36:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003b40:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b46:	4912      	ldr	r1, [pc, #72]	; (8003b90 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	60fa      	str	r2, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1ea      	bne.n	8003b38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	613a      	str	r2, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1db      	bne.n	8003b2e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b76:	f3bf 8f4f 	dsb	sy
}
 8003b7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b7c:	f3bf 8f6f 	isb	sy
}
 8003b80:	bf00      	nop
}
 8003b82:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_LTDC_LineEventCallback+0x74>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <HAL_LTDC_LineEventCallback+0x78>)
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d017      	beq.n	8003be2 <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <HAL_LTDC_LineEventCallback+0x7c>)
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f00f f8a9 	bl	8012d10 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003bbe:	f7fe fb33 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fd9e 	bl	8003706 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003bca:	f7fe fa27 	bl	800201c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003bce:	f7fe fb2b 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f015 fce7 	bl	80195a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fd fef6 	bl	80019cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003be0:	e00e      	b.n	8003c00 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <HAL_LTDC_LineEventCallback+0x78>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f00f f891 	bl	8012d10 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7fd ff08 	bl	8001a04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003bf4:	f7fe fb18 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fd75 	bl	80036ea <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	50001000 	.word	0x50001000
 8003c0c:	24001dc8 	.word	0x24001dc8
 8003c10:	24001dca 	.word	0x24001dca

08003c14 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	2b05      	cmp	r3, #5
 8003c24:	d82c      	bhi.n	8003c80 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c45 	.word	0x08003c45
 8003c30:	08003c4f 	.word	0x08003c4f
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c63 	.word	0x08003c63
 8003c3c:	08003c6d 	.word	0x08003c6d
 8003c40:	08003c77 	.word	0x08003c77
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c44:	f006 fa80 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	e019      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003c4e:	f006 fa7b 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c52:	4603      	mov	r3, r0
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	e014      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003c58:	f006 fa76 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	e00f      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003c62:	f006 fa71 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c66:	4603      	mov	r3, r0
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	e00a      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c6c:	f006 fa6c 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c70:	4603      	mov	r3, r0
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	e005      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003c76:	f006 fa67 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	e000      	b.n	8003c82 <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003c80:	2300      	movs	r3, #0
    }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop

08003c8c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003c90:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	0802d270 	.word	0x0802d270

08003ca0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003ca4:	230e      	movs	r3, #14
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    {
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
    }
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	0802d714 	.word	0x0802d714

08003cd0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    }
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ffe9 	bl	8003cb0 <_ZN8touchgfx4FontD1Ev>
 8003cde:	2110      	movs	r1, #16
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f027 f8e2 	bl	802aeaa <_ZdlPvj>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003cfc:	887b      	ldrh	r3, [r7, #2]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e010      	b.n	8003d28 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3308      	adds	r3, #8
 8003d14:	681c      	ldr	r4, [r3, #0]
 8003d16:	f107 030f 	add.w	r3, r7, #15
 8003d1a:	f107 0210 	add.w	r2, r7, #16
 8003d1e:	8879      	ldrh	r1, [r7, #2]
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	47a0      	blx	r4
 8003d24:	6178      	str	r0, [r7, #20]
        return glyph;
 8003d26:	697b      	ldr	r3, [r7, #20]
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	895b      	ldrh	r3, [r3, #10]
    }
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	899b      	ldrh	r3, [r3, #12]
    }
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	889b      	ldrh	r3, [r3, #4]
    }
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	889a      	ldrh	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	799b      	ldrb	r3, [r3, #6]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
    }
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	79db      	ldrb	r3, [r3, #7]
 8003da6:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003daa:	b2db      	uxtb	r3, r3
    }
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	79db      	ldrb	r3, [r3, #7]
 8003dc4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003dc8:	b2db      	uxtb	r3, r3
    }
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff61 	bl	8003cb0 <_ZN8touchgfx4FontD1Ev>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	0802f57c 	.word	0x0802f57c

08003dfc <_ZN8touchgfx9ConstFontD0Ev>:
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ffe7 	bl	8003dd8 <_ZN8touchgfx9ConstFontD1Ev>
 8003e0a:	2118      	movs	r1, #24
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f027 f84c 	bl	802aeaa <_ZdlPvj>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ffd3 	bl	8003dd8 <_ZN8touchgfx9ConstFontD1Ev>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0802d55c 	.word	0x0802d55c

08003e40 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffe7 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8003e4e:	2128      	movs	r1, #40	; 0x28
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f027 f82a 	bl	802aeaa <_ZdlPvj>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
    {
 8003e68:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
    }
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	0802d390 	.word	0x0802d390

08003e80 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    }
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffe9 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
 8003e8e:	2108      	movs	r1, #8
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f027 f80a 	bl	802aeaa <_ZdlPvj>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	817b      	strh	r3, [r7, #10]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	813b      	strh	r3, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	897a      	ldrh	r2, [r7, #10]
 8003ed6:	801a      	strh	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	893a      	ldrh	r2, [r7, #8]
 8003edc:	805a      	strh	r2, [r3, #2]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	809a      	strh	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8b3a      	ldrh	r2, [r7, #24]
 8003ee8:	80da      	strh	r2, [r3, #6]
    {
    }
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4618      	mov	r0, r3
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
        : rect(),
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fe fcec 	bl	80028e8 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	330c      	adds	r3, #12
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fce7 	bl	80028e8 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	0802f518 	.word	0x0802f518

08003f58 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
    {
 8003f60:	4a04      	ldr	r2, [pc, #16]	; (8003f74 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
    }
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	0802f518 	.word	0x0802f518

08003f78 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
    }
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff ffe9 	bl	8003f58 <_ZN8touchgfx8DrawableD1Ev>
 8003f86:	2128      	movs	r1, #40	; 0x28
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f026 ff8e 	bl	802aeaa <_ZdlPvj>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4618      	mov	r0, r3
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003fa0:	2300      	movs	r3, #0
    }
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
    }
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	4608      	mov	r0, r1
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	813b      	strh	r3, [r7, #8]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8003fe0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003fe4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f844 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8003ff0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f898 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8004030:	4618      	mov	r0, r3
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	809a      	strh	r2, [r3, #4]
    }
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	460b      	mov	r3, r1
 8004064:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	887a      	ldrh	r2, [r7, #2]
 800406a:	80da      	strh	r2, [r3, #6]
    }
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	332c      	adds	r3, #44	; 0x2c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004094:	4611      	mov	r1, r2
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
        setY(y);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3330      	adds	r3, #48	; 0x30
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040a6:	4611      	mov	r1, r2
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
    }
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	811a      	strh	r2, [r3, #8]
    }
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	815a      	strh	r2, [r3, #10]
    }
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    {
    }
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
    {
    }
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
    {
    }
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3334      	adds	r3, #52	; 0x34
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800414c:	4611      	mov	r1, r2
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
        setHeight(height);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3338      	adds	r3, #56	; 0x38
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800415e:	4611      	mov	r1, r2
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
    }
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
    {
    }
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
    {
    }
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	807b      	strh	r3, [r7, #2]
 80041d6:	4613      	mov	r3, r2
 80041d8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3350      	adds	r3, #80	; 0x50
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	8879      	ldrh	r1, [r7, #2]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80041ea:	b292      	uxth	r2, r2
 80041ec:	1a8a      	subs	r2, r1, r2
 80041ee:	b292      	uxth	r2, r2
 80041f0:	b210      	sxth	r0, r2
 80041f2:	8839      	ldrh	r1, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80041fa:	b292      	uxth	r2, r2
 80041fc:	1a8a      	subs	r2, r1, r2
 80041fe:	b292      	uxth	r2, r2
 8004200:	b212      	sxth	r2, r2
 8004202:	4601      	mov	r1, r0
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
    }
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800421e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004226:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800422e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff ffe1 	bl	8004210 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]
    }
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8004274:	4b08      	ldr	r3, [pc, #32]	; (8004298 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	e002      	b.n	800428c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8004286:	4b04      	ldr	r3, [pc, #16]	; (8004298 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
    }
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	2400b8cc 	.word	0x2400b8cc

0800429c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80042a4:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	721a      	strb	r2, [r3, #8]
    {
    }
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4618      	mov	r0, r3
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	0802d538 	.word	0x0802d538

080042c8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
    {
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	601a      	str	r2, [r3, #0]
    }
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	0802d538 	.word	0x0802d538

080042e8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
    }
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ffe9 	bl	80042c8 <_ZN8touchgfx10TransitionD1Ev>
 80042f6:	210c      	movs	r1, #12
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f026 fdd6 	bl	802aeaa <_ZdlPvj>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    {
    }
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    {
    }
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
    {
    }
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 800434c:	f017 fc6e 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8004350:	4603      	mov	r3, r0
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	3230      	adds	r2, #48	; 0x30
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	4790      	blx	r2
    }
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]
    }
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	f017 fcb8 	bl	801bd00 <_ZN8touchgfx11ApplicationC1Ev>
 8004390:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
          pendingScreenTransitionCallback(0)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80043aa:	6013      	str	r3, [r2, #0]
    }
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	0802d0ec 	.word	0x0802d0ec
 80043bc:	2400b918 	.word	0x2400b918

080043c0 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
    }
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
    {
        done = true;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	721a      	strb	r2, [r3, #8]
    }
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	817b      	strh	r3, [r7, #10]
 8004404:	4613      	mov	r3, r2
 8004406:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fec3 	bl	8004196 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fec9 	bl	80041b0 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8004428:	2300      	movs	r3, #0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
        }
    }
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	605a      	str	r2, [r3, #4]
    }
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fd48 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 8004468:	4a03      	ldr	r2, [pc, #12]	; (8004478 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	0802d4b0 	.word	0x0802d4b0

0800447c <_ZN8touchgfx6WidgetD1Ev>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	4a05      	ldr	r2, [pc, #20]	; (800449c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff fd63 	bl	8003f58 <_ZN8touchgfx8DrawableD1Ev>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	0802d4b0 	.word	0x0802d4b0

080044a0 <_ZN8touchgfx6WidgetD0Ev>:
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff ffe7 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 80044ae:	2128      	movs	r1, #40	; 0x28
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f026 fcfa 	bl	802aeaa <_ZdlPvj>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff56 	bl	8004380 <_ZN8touchgfx14MVPApplicationC1Ev>
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f92b 	bl	800473c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
      model(m)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80044f6:	f7fd fe97 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 80044fa:	4603      	mov	r3, r0
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	3208      	adds	r2, #8
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8004508:	2000      	movs	r0, #0
 800450a:	f005 fda5 	bl	800a058 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800450e:	f7ff fea9 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8004512:	4603      	mov	r3, r0
 8004514:	4618      	mov	r0, r3
 8004516:	f01f fb84 	bl	8023c22 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	0802d090 	.word	0x0802d090

08004528 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ffe9 	bl	8004528 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	3208      	adds	r2, #8
 8004566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800456a:	e883 0003 	stmia.w	r3, {r0, r1}
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	2300      	movs	r3, #0
 800458c:	61fb      	str	r3, [r7, #28]
 800458e:	f107 0008 	add.w	r0, r7, #8
 8004592:	f107 0318 	add.w	r3, r7, #24
 8004596:	cb0c      	ldmia	r3, {r2, r3}
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	f000 f8eb 	bl	8004774 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800459e:	f107 0308 	add.w	r3, r7, #8
 80045a2:	4619      	mov	r1, r3
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff ffcb 	bl	8004540 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80045aa:	f107 0308 	add.w	r3, r7, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fe ff70 	bl	8003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80045c0:	bf00      	nop
 80045c2:	3724      	adds	r7, #36	; 0x24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	080045cd 	.word	0x080045cd

080045cc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af02      	add	r7, sp, #8
 80045d2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80045e0:	461a      	mov	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 80045ec:	4804      	ldr	r0, [pc, #16]	; (8004600 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 80045ee:	f000 f8f3 	bl	80047d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2400b90c 	.word	0x2400b90c
 8004600:	2400b908 	.word	0x2400b908

08004604 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	2300      	movs	r3, #0
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	f107 0008 	add.w	r0, r7, #8
 800461e:	f107 0318 	add.w	r3, r7, #24
 8004622:	cb0c      	ldmia	r3, {r2, r3}
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	f000 f8a5 	bl	8004774 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	4619      	mov	r1, r3
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff ff85 	bl	8004540 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004636:	f107 0308 	add.w	r3, r7, #8
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe ff2a 	bl	8003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800464c:	bf00      	nop
 800464e:	3724      	adds	r7, #36	; 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	08004659 	.word	0x08004659

08004658 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800466c:	461a      	mov	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 8004678:	4804      	ldr	r0, [pc, #16]	; (800468c <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 800467a:	f000 f9c7 	bl	8004a0c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2400b90c 	.word	0x2400b90c
 800468c:	2400b908 	.word	0x2400b908

08004690 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	2300      	movs	r3, #0
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	f107 0008 	add.w	r0, r7, #8
 80046aa:	f107 0318 	add.w	r3, r7, #24
 80046ae:	cb0c      	ldmia	r3, {r2, r3}
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	f000 f85f 	bl	8004774 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4619      	mov	r1, r3
 80046bc:	4620      	mov	r0, r4
 80046be:	f7ff ff3f 	bl	8004540 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe fee4 	bl	8003494 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80046d8:	bf00      	nop
 80046da:	3724      	adds	r7, #36	; 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}
 80046e0:	080046e5 	.word	0x080046e5

080046e4 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 8004704:	4804      	ldr	r0, [pc, #16]	; (8004718 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 8004706:	f000 fa9d 	bl	8004c44 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	2400b90c 	.word	0x2400b90c
 8004718:	2400b908 	.word	0x2400b908

0800471c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	4a04      	ldr	r2, [pc, #16]	; (8004738 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	0802d130 	.word	0x0802d130

0800473c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ffe8 	bl	800471c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	605a      	str	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	60da      	str	r2, [r3, #12]
    }
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	0802d0d4 	.word	0x0802d0d4

08004774 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	4639      	mov	r1, r7
 8004780:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ffc8 	bl	800471c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	605a      	str	r2, [r3, #4]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3308      	adds	r3, #8
 800479c:	463a      	mov	r2, r7
 800479e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	0802d0d4 	.word	0x0802d0d4

080047b4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fd6c 	bl	800429c <_ZN8touchgfx10TransitionC1Ev>
 80047c4:	4a03      	ldr	r2, [pc, #12]	; (80047d4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	0802d514 	.word	0x0802d514

080047d8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80047d8:	b590      	push	{r4, r7, lr}
 80047da:	b08f      	sub	sp, #60	; 0x3c
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3320      	adds	r3, #32
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
 80047f8:	4603      	mov	r3, r0
 80047fa:	f640 3217 	movw	r2, #2839	; 0xb17
 80047fe:	4293      	cmp	r3, r2
 8004800:	d805      	bhi.n	800480e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004802:	4b7d      	ldr	r3, [pc, #500]	; (80049f8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004804:	4a7d      	ldr	r2, [pc, #500]	; (80049fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004806:	21a3      	movs	r1, #163	; 0xa3
 8004808:	487d      	ldr	r0, [pc, #500]	; (8004a00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800480a:	f026 fb7d 	bl	802af08 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3320      	adds	r3, #32
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4610      	mov	r0, r2
 800481e:	4798      	blx	r3
 8004820:	4603      	mov	r3, r0
 8004822:	2b0f      	cmp	r3, #15
 8004824:	d805      	bhi.n	8004832 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004826:	4b77      	ldr	r3, [pc, #476]	; (8004a04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004828:	4a74      	ldr	r2, [pc, #464]	; (80049fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800482a:	21a4      	movs	r1, #164	; 0xa4
 800482c:	4874      	ldr	r0, [pc, #464]	; (8004a00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800482e:	f026 fb6b 	bl	802af08 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3320      	adds	r3, #32
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4610      	mov	r0, r2
 8004842:	4798      	blx	r3
 8004844:	4603      	mov	r3, r0
 8004846:	2b0b      	cmp	r3, #11
 8004848:	d805      	bhi.n	8004856 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800484a:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800484c:	4a6b      	ldr	r2, [pc, #428]	; (80049fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800484e:	21a5      	movs	r1, #165	; 0xa5
 8004850:	486b      	ldr	r0, [pc, #428]	; (8004a00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004852:	f026 fb59 	bl	802af08 <__assert_func>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004862:	f017 f9e3 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8004866:	4603      	mov	r3, r0
 8004868:	4618      	mov	r0, r3
 800486a:	f017 fa2d 	bl	801bcc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
    if (*currentTrans)
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4610      	mov	r0, r2
 800489e:	4798      	blx	r3
    if (*currentScreen)
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4610      	mov	r0, r2
 80048b8:	4798      	blx	r3
    if (*currentPresenter)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3304      	adds	r3, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4610      	mov	r0, r2
 80048d2:	4798      	blx	r3
    if (*currentScreen)
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 80048dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4610      	mov	r0, r2
 80048ea:	4798      	blx	r3
    if (*currentPresenter)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4610      	mov	r0, r2
 8004904:	4798      	blx	r3
}
 8004906:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fab2 	bl	8004e78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004914:	4603      	mov	r3, r0
 8004916:	4619      	mov	r1, r3
 8004918:	200c      	movs	r0, #12
 800491a:	f7ff fac1 	bl	8003ea0 <_ZnwjPv>
 800491e:	4604      	mov	r4, r0
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff ff47 	bl	80047b4 <_ZN8touchgfx12NoTransitionC1Ev>
 8004926:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2100      	movs	r1, #0
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fab5 	bl	8004e9e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004934:	4603      	mov	r3, r0
 8004936:	4619      	mov	r1, r3
 8004938:	f640 3018 	movw	r0, #2840	; 0xb18
 800493c:	f7ff fab0 	bl	8003ea0 <_ZnwjPv>
 8004940:	4604      	mov	r4, r0
 8004942:	4620      	mov	r0, r4
 8004944:	f005 fe44 	bl	800a5d0 <_ZN8MainViewC1Ev>
 8004948:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fab7 	bl	8004ec4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004956:	4603      	mov	r3, r0
 8004958:	4619      	mov	r1, r3
 800495a:	2010      	movs	r0, #16
 800495c:	f7ff faa0 	bl	8003ea0 <_ZnwjPv>
 8004960:	4604      	mov	r4, r0
 8004962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004964:	4620      	mov	r0, r4
 8004966:	f005 fda5 	bl	800a4b4 <_ZN13MainPresenterC1ER8MainView>
 800496a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004970:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800497c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	3304      	adds	r3, #4
 8004988:	e000      	b.n	800498c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800498a:	2300      	movs	r3, #0
 800498c:	4619      	mov	r1, r3
 800498e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004990:	f7ff fd16 	bl	80043c0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	3304      	adds	r3, #4
 8004998:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fd4e 	bl	800443c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 faa0 	bl	8004eea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69f8      	ldr	r0, [r7, #28]
 80049c0:	4798      	blx	r3
    newPresenter->activate();
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69b8      	ldr	r0, [r7, #24]
 80049ca:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	69f8      	ldr	r0, [r7, #28]
 80049d0:	f018 fdc0 	bl	801d554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3310      	adds	r3, #16
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	4798      	blx	r3
    newTransition->invalidate();
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6978      	ldr	r0, [r7, #20]
 80049ea:	4798      	blx	r3
}
 80049ec:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	373c      	adds	r7, #60	; 0x3c
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	0802c4a4 	.word	0x0802c4a4
 80049fc:	0802c534 	.word	0x0802c534
 8004a00:	0802c634 	.word	0x0802c634
 8004a04:	0802c67c 	.word	0x0802c67c
 8004a08:	0802c720 	.word	0x0802c720

08004a0c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b08f      	sub	sp, #60	; 0x3c
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3320      	adds	r3, #32
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4798      	blx	r3
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f640 3217 	movw	r2, #2839	; 0xb17
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d805      	bhi.n	8004a42 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004a36:	4b7e      	ldr	r3, [pc, #504]	; (8004c30 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004a38:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a3a:	21a3      	movs	r1, #163	; 0xa3
 8004a3c:	487e      	ldr	r0, [pc, #504]	; (8004c38 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a3e:	f026 fa63 	bl	802af08 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3320      	adds	r3, #32
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	d805      	bhi.n	8004a66 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004a5a:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004a5c:	4a75      	ldr	r2, [pc, #468]	; (8004c34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a5e:	21a4      	movs	r1, #164	; 0xa4
 8004a60:	4875      	ldr	r0, [pc, #468]	; (8004c38 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a62:	f026 fa51 	bl	802af08 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3320      	adds	r3, #32
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4610      	mov	r0, r2
 8004a76:	4798      	blx	r3
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b37      	cmp	r3, #55	; 0x37
 8004a7c:	d805      	bhi.n	8004a8a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004a7e:	4b70      	ldr	r3, [pc, #448]	; (8004c40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004a80:	4a6c      	ldr	r2, [pc, #432]	; (8004c34 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a82:	21a5      	movs	r1, #165	; 0xa5
 8004a84:	486c      	ldr	r0, [pc, #432]	; (8004c38 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a86:	f026 fa3f 	bl	802af08 <__assert_func>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004a96:	f017 f8c9 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f017 f913 	bl	801bcc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
    if (*currentTrans)
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d007      	beq.n	8004ad4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4798      	blx	r3
    if (*currentScreen)
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3314      	adds	r3, #20
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4610      	mov	r0, r2
 8004aec:	4798      	blx	r3
    if (*currentPresenter)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3304      	adds	r3, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
    if (*currentScreen)
 8004b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4798      	blx	r3
    if (*currentPresenter)
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3308      	adds	r3, #8
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4610      	mov	r0, r2
 8004b38:	4798      	blx	r3
}
 8004b3a:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f9df 	bl	8004f06 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	2038      	movs	r0, #56	; 0x38
 8004b4e:	f7ff f9a7 	bl	8003ea0 <_ZnwjPv>
 8004b52:	4604      	mov	r4, r0
 8004b54:	2114      	movs	r1, #20
 8004b56:	4620      	mov	r0, r4
 8004b58:	f000 fa1c 	bl	8004f94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004b5c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f99a 	bl	8004e9e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f640 3018 	movw	r0, #2840	; 0xb18
 8004b72:	f7ff f995 	bl	8003ea0 <_ZnwjPv>
 8004b76:	4604      	mov	r4, r0
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f005 fd29 	bl	800a5d0 <_ZN8MainViewC1Ev>
 8004b7e:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f99c 	bl	8004ec4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4619      	mov	r1, r3
 8004b90:	2010      	movs	r0, #16
 8004b92:	f7ff f985 	bl	8003ea0 <_ZnwjPv>
 8004b96:	4604      	mov	r4, r0
 8004b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f005 fc8a 	bl	800a4b4 <_ZN13MainPresenterC1ER8MainView>
 8004ba0:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bac:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	e000      	b.n	8004bc2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004bc6:	f7ff fbfb 	bl	80043c0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fc33 	bl	800443c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f985 	bl	8004eea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	61fb      	str	r3, [r7, #28]
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69f8      	ldr	r0, [r7, #28]
 8004bf6:	4798      	blx	r3
    newPresenter->activate();
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69b8      	ldr	r0, [r7, #24]
 8004c00:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004c02:	6979      	ldr	r1, [r7, #20]
 8004c04:	69f8      	ldr	r0, [r7, #28]
 8004c06:	f018 fca5 	bl	801d554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3310      	adds	r3, #16
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6978      	ldr	r0, [r7, #20]
 8004c14:	4798      	blx	r3
    newTransition->invalidate();
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3314      	adds	r3, #20
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	4798      	blx	r3
}
 8004c22:	bf00      	nop
    return newPresenter;
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	373c      	adds	r7, #60	; 0x3c
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	0802c4a4 	.word	0x0802c4a4
 8004c34:	0802c7c4 	.word	0x0802c7c4
 8004c38:	0802c634 	.word	0x0802c634
 8004c3c:	0802c67c 	.word	0x0802c67c
 8004c40:	0802c720 	.word	0x0802c720

08004c44 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b08f      	sub	sp, #60	; 0x3c
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3320      	adds	r3, #32
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
 8004c64:	4603      	mov	r3, r0
 8004c66:	f5b3 7f70 	cmp.w	r3, #960	; 0x3c0
 8004c6a:	d205      	bcs.n	8004c78 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004c6c:	4b7d      	ldr	r3, [pc, #500]	; (8004e64 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004c6e:	4a7e      	ldr	r2, [pc, #504]	; (8004e68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004c70:	21a3      	movs	r1, #163	; 0xa3
 8004c72:	487e      	ldr	r0, [pc, #504]	; (8004e6c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c74:	f026 f948 	bl	802af08 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3320      	adds	r3, #32
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4610      	mov	r0, r2
 8004c88:	4798      	blx	r3
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b0f      	cmp	r3, #15
 8004c8e:	d805      	bhi.n	8004c9c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004c90:	4b77      	ldr	r3, [pc, #476]	; (8004e70 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004c92:	4a75      	ldr	r2, [pc, #468]	; (8004e68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004c94:	21a4      	movs	r1, #164	; 0xa4
 8004c96:	4875      	ldr	r0, [pc, #468]	; (8004e6c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004c98:	f026 f936 	bl	802af08 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3320      	adds	r3, #32
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4610      	mov	r0, r2
 8004cac:	4798      	blx	r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b37      	cmp	r3, #55	; 0x37
 8004cb2:	d805      	bhi.n	8004cc0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004cb6:	4a6c      	ldr	r2, [pc, #432]	; (8004e68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004cb8:	21a5      	movs	r1, #165	; 0xa5
 8004cba:	486c      	ldr	r0, [pc, #432]	; (8004e6c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004cbc:	f026 f924 	bl	802af08 <__assert_func>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004ccc:	f016 ffae 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f016 fff8 	bl	801bcc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4798      	blx	r3
    if (*currentTrans)
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4610      	mov	r0, r2
 8004d08:	4798      	blx	r3
    if (*currentScreen)
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d008      	beq.n	8004d24 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
    if (*currentPresenter)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4798      	blx	r3
    if (*currentScreen)
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4610      	mov	r0, r2
 8004d54:	4798      	blx	r3
    if (*currentPresenter)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3308      	adds	r3, #8
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	4798      	blx	r3
}
 8004d70:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f94d 	bl	8005018 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4619      	mov	r1, r3
 8004d82:	2038      	movs	r0, #56	; 0x38
 8004d84:	f7ff f88c 	bl	8003ea0 <_ZnwjPv>
 8004d88:	4604      	mov	r4, r0
 8004d8a:	2114      	movs	r1, #20
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f000 f98b 	bl	80050a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004d92:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 f9c6 	bl	800512c <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4619      	mov	r1, r3
 8004da4:	f44f 7070 	mov.w	r0, #960	; 0x3c0
 8004da8:	f7ff f87a 	bl	8003ea0 <_ZnwjPv>
 8004dac:	4604      	mov	r4, r0
 8004dae:	4620      	mov	r0, r4
 8004db0:	f005 fb22 	bl	800a3f8 <_ZN20Localize_AnomalyViewC1Ev>
 8004db4:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f9c8 	bl	8005152 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	2010      	movs	r0, #16
 8004dc8:	f7ff f86a 	bl	8003ea0 <_ZnwjPv>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f005 fab9 	bl	800a348 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004dd6:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ddc:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004de2:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de8:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	3304      	adds	r3, #4
 8004df4:	e000      	b.n	8004df8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004dfc:	f7ff fae0 	bl	80043c0 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	3304      	adds	r3, #4
 8004e04:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fb18 	bl	800443c <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f9b1 	bl	8005178 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e20:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	330c      	adds	r3, #12
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69f8      	ldr	r0, [r7, #28]
 8004e2c:	4798      	blx	r3
    newPresenter->activate();
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69b8      	ldr	r0, [r7, #24]
 8004e36:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004e38:	6979      	ldr	r1, [r7, #20]
 8004e3a:	69f8      	ldr	r0, [r7, #28]
 8004e3c:	f018 fb8a 	bl	801d554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3310      	adds	r3, #16
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6978      	ldr	r0, [r7, #20]
 8004e4a:	4798      	blx	r3
    newTransition->invalidate();
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6978      	ldr	r0, [r7, #20]
 8004e56:	4798      	blx	r3
}
 8004e58:	bf00      	nop
    return newPresenter;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	373c      	adds	r7, #60	; 0x3c
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}
 8004e64:	0802c4a4 	.word	0x0802c4a4
 8004e68:	0802c8d8 	.word	0x0802c8d8
 8004e6c:	0802c634 	.word	0x0802c634
 8004e70:	0802c67c 	.word	0x0802c67c
 8004e74:	0802c720 	.word	0x0802c720

08004e78 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	460b      	mov	r3, r1
 8004e82:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3324      	adds	r3, #36	; 0x24
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	887a      	ldrh	r2, [r7, #2]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
 8004e94:	4603      	mov	r3, r0
    }
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3324      	adds	r3, #36	; 0x24
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
    }
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3324      	adds	r3, #36	; 0x24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	887a      	ldrh	r2, [r7, #2]
 8004eda:	4611      	mov	r1, r2
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
 8004ee0:	4603      	mov	r3, r0
    }
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3324      	adds	r3, #36	; 0x24
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	4798      	blx	r3
 8004f22:	4603      	mov	r3, r0
    }
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fa8e 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 8004f3c:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	0802d3c4 	.word	0x0802d3c4

08004f50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	4a05      	ldr	r2, [pc, #20]	; (8004f70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff fa8b 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	0802d3c4 	.word	0x0802d3c4

08004f74 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ffe7 	bl	8004f50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004f82:	2128      	movs	r1, #40	; 0x28
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f025 ff90 	bl	802aeaa <_ZdlPvj>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff f97a 	bl	800429c <_ZN8touchgfx10TransitionC1Ev>
 8004fa8:	4a18      	ldr	r2, [pc, #96]	; (800500c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	81da      	strh	r2, [r3, #14]
          solid()
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3310      	adds	r3, #16
 8004fc4:	2228      	movs	r2, #40	; 0x28
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f026 f9a2 	bl	802b312 <memset>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3310      	adds	r3, #16
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7ff ffaa 	bl	8004f2c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b21a      	sxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	819a      	strh	r2, [r3, #12]
            break;
 8004fe2:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f103 0010 	add.w	r0, r3, #16
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	b21a      	sxth	r2, r3
 8004ff0:	4b07      	ldr	r3, [pc, #28]	; (8005010 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b21b      	sxth	r3, r3
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f7fe ffe2 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	0802d3a0 	.word	0x0802d3a0
 8005010:	2400b8c2 	.word	0x2400b8c2
 8005014:	2400b8c0 	.word	0x2400b8c0

08005018 <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3324      	adds	r3, #36	; 0x24
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	4611      	mov	r1, r2
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	4798      	blx	r3
 8005034:	4603      	mov	r3, r0
    }
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
	...

08005040 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fa04 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 8005050:	4a03      	ldr	r2, [pc, #12]	; (8005060 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	0802d44c 	.word	0x0802d44c

08005064 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	4a05      	ldr	r2, [pc, #20]	; (8005084 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fa01 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	0802d44c 	.word	0x0802d44c

08005088 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ffe7 	bl	8005064 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 8005096:	2128      	movs	r1, #40	; 0x28
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f025 ff06 	bl	802aeaa <_ZdlPvj>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	70fb      	strb	r3, [r7, #3]
          solid()
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f8f0 	bl	800429c <_ZN8touchgfx10TransitionC1Ev>
 80050bc:	4a18      	ldr	r2, [pc, #96]	; (8005120 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	81da      	strh	r2, [r3, #14]
          solid()
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3310      	adds	r3, #16
 80050d8:	2228      	movs	r2, #40	; 0x28
 80050da:	2100      	movs	r1, #0
 80050dc:	4618      	mov	r0, r3
 80050de:	f026 f918 	bl	802b312 <memset>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3310      	adds	r3, #16
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ffaa 	bl	8005040 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b21a      	sxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	819a      	strh	r2, [r3, #12]
            break;
 80050f6:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f103 0010 	add.w	r0, r3, #16
 80050fe:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b21a      	sxth	r2, r3
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b21b      	sxth	r3, r3
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	f7fe ff58 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	0802d428 	.word	0x0802d428
 8005124:	2400b8c2 	.word	0x2400b8c2
 8005128:	2400b8c0 	.word	0x2400b8c0

0800512c <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3324      	adds	r3, #36	; 0x24
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	887a      	ldrh	r2, [r7, #2]
 8005142:	4611      	mov	r1, r2
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
 8005148:	4603      	mov	r3, r0
    }
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3324      	adds	r3, #36	; 0x24
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	4611      	mov	r1, r2
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	4798      	blx	r3
 800516e:	4603      	mov	r3, r0
    }
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3310      	adds	r3, #16
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fed2 	bl	8004f50 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff f88a 	bl	80042c8 <_ZN8touchgfx10TransitionD1Ev>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	0802d3a0 	.word	0x0802d3a0

080051c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ffe1 	bl	8005194 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 80051d2:	2138      	movs	r1, #56	; 0x38
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f025 fe68 	bl	802aeaa <_ZdlPvj>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3310      	adds	r3, #16
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff34 	bl	8005064 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff f862 	bl	80042c8 <_ZN8touchgfx10TransitionD1Ev>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	0802d428 	.word	0x0802d428

08005214 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff ffe1 	bl	80051e4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 8005222:	2138      	movs	r1, #56	; 0x38
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f025 fe40 	bl	802aeaa <_ZdlPvj>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	4a05      	ldr	r2, [pc, #20]	; (8005254 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff f83f 	bl	80042c8 <_ZN8touchgfx10TransitionD1Ev>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	0802d514 	.word	0x0802d514

08005258 <_ZN8touchgfx12NoTransitionD0Ev>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ffe7 	bl	8005234 <_ZN8touchgfx12NoTransitionD1Ev>
 8005266:	210c      	movs	r1, #12
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f025 fe1e 	bl	802aeaa <_ZdlPvj>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b093      	sub	sp, #76	; 0x4c
 800527c:	af02      	add	r7, sp, #8
 800527e:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff f840 	bl	8004308 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7a9b      	ldrb	r3, [r3, #10]
 800528c:	3301      	adds	r3, #1
 800528e:	b2da      	uxtb	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7a9a      	ldrb	r2, [r3, #10]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	7a5b      	ldrb	r3, [r3, #9]
 800529c:	429a      	cmp	r2, r3
 800529e:	d82b      	bhi.n	80052f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	7a9b      	ldrb	r3, [r3, #10]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7a5b      	ldrb	r3, [r3, #9]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2100      	movs	r1, #0
 80052b4:	f018 f954 	bl	801d560 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d019      	beq.n	8005306 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80052e0:	2a00      	cmp	r2, #0
 80052e2:	dd01      	ble.n	80052e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x70>
 80052e4:	2201      	movs	r2, #1
 80052e6:	e001      	b.n	80052ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x74>
 80052e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ec:	4413      	add	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	b21a      	sxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	81da      	strh	r2, [r3, #14]
 80052f6:	e006      	b.n	8005306 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	729a      	strb	r2, [r3, #10]
            return;
 8005304:	e07e      	b.n	8005404 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3310      	adds	r3, #16
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fe89 	bl	8004022 <_ZNK8touchgfx8Drawable9getHeightEv>
 8005310:	4603      	mov	r3, r0
 8005312:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f103 0010 	add.w	r0, r3, #16
 800531a:	4b3c      	ldr	r3, [pc, #240]	; (800540c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 800531c:	881a      	ldrh	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005324:	b29b      	uxth	r3, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	b21b      	sxth	r3, r3
 800532c:	4619      	mov	r1, r3
 800532e:	f7fe fed0 	bl	80040d2 <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3310      	adds	r3, #16
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fe73 	bl	8004022 <_ZNK8touchgfx8Drawable9getHeightEv>
 800533c:	4603      	mov	r3, r0
 800533e:	b29b      	uxth	r3, r3
 8005340:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3310      	adds	r3, #16
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fe69 	bl	8004022 <_ZNK8touchgfx8Drawable9getHeightEv>
 8005350:	4603      	mov	r3, r0
 8005352:	4619      	mov	r1, r3
 8005354:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b21a      	sxth	r2, r3
 800535a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800535e:	f107 0018 	add.w	r0, r7, #24
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	460a      	mov	r2, r1
 8005368:	2100      	movs	r1, #0
 800536a:	f7fe fda5 	bl	8003eb8 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3310      	adds	r3, #16
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f107 0218 	add.w	r2, r7, #24
 8005382:	4611      	mov	r1, r2
 8005384:	4798      	blx	r3
                break;
 8005386:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7a9b      	ldrb	r3, [r3, #10]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d139      	bne.n	8005404 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
 8005390:	4b20      	ldr	r3, [pc, #128]	; (8005414 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x19c>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d035      	beq.n	8005404 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18c>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3310      	adds	r3, #16
 800539c:	4618      	mov	r0, r3
 800539e:	f7fe fe06 	bl	8003fae <_ZNK8touchgfx8Drawable7getRectEv>
 80053a2:	4602      	mov	r2, r0
 80053a4:	f107 0310 	add.w	r3, r7, #16
 80053a8:	6810      	ldr	r0, [r2, #0]
 80053aa:	6851      	ldr	r1, [r2, #4]
 80053ac:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80053ae:	f7fc ff3b 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 80053b2:	4603      	mov	r3, r0
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	3230      	adds	r2, #48	; 0x30
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	4790      	blx	r2
 80053be:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fd fa8f 	bl	80028e8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 80053d2:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b21b      	sxth	r3, r3
 80053e0:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 80053e2:	f7fc ff21 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 80053e6:	f7fe ff3d 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 80053ea:	6803      	ldr	r3, [r0, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	681c      	ldr	r4, [r3, #0]
 80053f0:	f107 0310 	add.w	r3, r7, #16
 80053f4:	f107 0208 	add.w	r2, r7, #8
 80053f8:	2100      	movs	r1, #0
 80053fa:	9101      	str	r1, [sp, #4]
 80053fc:	21ff      	movs	r1, #255	; 0xff
 80053fe:	9100      	str	r1, [sp, #0]
 8005400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005402:	47a0      	blx	r4
        }
    }
 8005404:	3744      	adds	r7, #68	; 0x44
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	bf00      	nop
 800540c:	2400b8c2 	.word	0x2400b8c2
 8005410:	2400b8c0 	.word	0x2400b8c0
 8005414:	2400b8ca 	.word	0x2400b8ca

08005418 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6858      	ldr	r0, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3360      	adds	r3, #96	; 0x60
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	3210      	adds	r2, #16
 8005432:	4611      	mov	r1, r2
 8005434:	4798      	blx	r3
    }
 8005436:	bf00      	nop
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f7fe ff71 	bl	8004330 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6858      	ldr	r0, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	335c      	adds	r3, #92	; 0x5c
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	3210      	adds	r2, #16
 8005460:	4611      	mov	r1, r2
 8005462:	4798      	blx	r3
    }
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    {
    }
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
        }
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af02      	add	r7, sp, #8
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	4613      	mov	r3, r2
 80054b0:	2200      	movs	r2, #0
 80054b2:	2100      	movs	r1, #0
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fe fcff 	bl	8003eb8 <_ZN8touchgfx4RectC1Essss>
        }
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 80054c4:	b590      	push	{r4, r7, lr}
 80054c6:	b093      	sub	sp, #76	; 0x4c
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe ff1a 	bl	8004308 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	7a9b      	ldrb	r3, [r3, #10]
 80054d8:	3301      	adds	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	7a9a      	ldrb	r2, [r3, #10]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	7a5b      	ldrb	r3, [r3, #9]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d82b      	bhi.n	8005544 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7a9b      	ldrb	r3, [r3, #10]
 80054f0:	b298      	uxth	r0, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	7a5b      	ldrb	r3, [r3, #9]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2100      	movs	r1, #0
 8005500:	f018 f82e 	bl	801d560 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005512:	b29b      	uxth	r3, r3
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005524:	b29b      	uxth	r3, r3
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800552c:	2a00      	cmp	r2, #0
 800552e:	dd01      	ble.n	8005534 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x70>
 8005530:	2201      	movs	r2, #1
 8005532:	e001      	b.n	8005538 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x74>
 8005534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005538:	4413      	add	r3, r2
 800553a:	b29b      	uxth	r3, r3
 800553c:	b21a      	sxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	81da      	strh	r2, [r3, #14]
 8005542:	e006      	b.n	8005552 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8e>
            done = true;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	729a      	strb	r2, [r3, #10]
            return;
 8005550:	e07f      	b.n	8005652 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
                const uint16_t prevSolidPos = solid.getY();
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3310      	adds	r3, #16
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fd56 	bl	8004008 <_ZNK8touchgfx8Drawable4getYEv>
 800555c:	4603      	mov	r3, r0
 800555e:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f103 0010 	add.w	r0, r3, #16
 8005566:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005570:	b29b      	uxth	r3, r3
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	b21b      	sxth	r3, r3
 8005578:	4619      	mov	r1, r3
 800557a:	f7fe fdaa 	bl	80040d2 <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 0210 	add.w	r2, r3, #16
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f7fe fd64 	bl	800405a <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005598:	b29a      	uxth	r2, r3
 800559a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 80055a0:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	b219      	sxth	r1, r3
 80055aa:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80055ae:	f107 0020 	add.w	r0, r7, #32
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	460b      	mov	r3, r1
 80055b6:	2100      	movs	r1, #0
 80055b8:	f7fe fc7e 	bl	8003eb8 <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4618      	mov	r0, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3310      	adds	r3, #16
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f107 0220 	add.w	r2, r7, #32
 80055d0:	4611      	mov	r1, r2
 80055d2:	4798      	blx	r3
                break;
 80055d4:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7a9b      	ldrb	r3, [r3, #10]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d139      	bne.n	8005652 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
 80055de:	4b20      	ldr	r3, [pc, #128]	; (8005660 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d035      	beq.n	8005652 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18e>
            Rect rect = solid.getRect(); // Part to copy between buffers
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3310      	adds	r3, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fcdf 	bl	8003fae <_ZNK8touchgfx8Drawable7getRectEv>
 80055f0:	4602      	mov	r2, r0
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	6810      	ldr	r0, [r2, #0]
 80055f8:	6851      	ldr	r1, [r2, #4]
 80055fa:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80055fc:	f7fc fe14 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 8005600:	4603      	mov	r3, r0
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	3230      	adds	r2, #48	; 0x30
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	4790      	blx	r2
 800560c:	63f8      	str	r0, [r7, #60]	; 0x3c
            Rect source;
 800560e:	f107 0308 	add.w	r3, r7, #8
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd f968 	bl	80028e8 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 8005620:	4b0e      	ldr	r3, [pc, #56]	; (800565c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b21b      	sxth	r3, r3
 8005626:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b21b      	sxth	r3, r3
 800562e:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8005630:	f7fc fdfa 	bl	8002228 <_ZN8touchgfx3HAL11getInstanceEv>
 8005634:	f7fe fe16 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8005638:	6803      	ldr	r3, [r0, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	f107 0208 	add.w	r2, r7, #8
 8005646:	2100      	movs	r1, #0
 8005648:	9101      	str	r1, [sp, #4]
 800564a:	21ff      	movs	r1, #255	; 0xff
 800564c:	9100      	str	r1, [sp, #0]
 800564e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005650:	47a0      	blx	r4
    }
 8005652:	3744      	adds	r7, #68	; 0x44
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	2400b8c2 	.word	0x2400b8c2
 800565c:	2400b8c0 	.word	0x2400b8c0
 8005660:	2400b8ca 	.word	0x2400b8ca

08005664 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6858      	ldr	r0, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3360      	adds	r3, #96	; 0x60
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	3210      	adds	r2, #16
 800567e:	4611      	mov	r1, r2
 8005680:	4798      	blx	r3
    }
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 800568a:	b580      	push	{r7, lr}
 800568c:	b082      	sub	sp, #8
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
        Transition::init();
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fe4b 	bl	8004330 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6858      	ldr	r0, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	335c      	adds	r3, #92	; 0x5c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	3210      	adds	r2, #16
 80056ac:	4611      	mov	r1, r2
 80056ae:	4798      	blx	r3
    }
 80056b0:	bf00      	nop
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
    }
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
        }
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af02      	add	r7, sp, #8
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4613      	mov	r3, r2
 80056fc:	2200      	movs	r2, #0
 80056fe:	2100      	movs	r1, #0
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fe fbd9 	bl	8003eb8 <_ZN8touchgfx4RectC1Essss>
        }
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
    }
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	; 0x30
 8005744:	af08      	add	r7, sp, #32
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	460b      	mov	r3, r1
 8005750:	80fb      	strh	r3, [r7, #6]
 8005752:	4613      	mov	r3, r2
 8005754:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	88b9      	ldrh	r1, [r7, #4]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800575e:	9306      	str	r3, [sp, #24]
 8005760:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	7f3b      	ldrb	r3, [r7, #28]
 8005778:	9301      	str	r3, [sp, #4]
 800577a:	7e3b      	ldrb	r3, [r7, #24]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	460b      	mov	r3, r1
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	f017 fac7 	bl	801cd14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005790:	619a      	str	r2, [r3, #24]
      kerningData(kerningList),
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005796:	61da      	str	r2, [r3, #28]
      gsubTable(gsubData),
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579c:	621a      	str	r2, [r3, #32]
      arabicTable(formsTable)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057a2:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0802d55c 	.word	0x0802d55c

080057b4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	889b      	ldrh	r3, [r3, #4]
 80057c8:	0adb      	lsrs	r3, r3, #11
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4413      	add	r3, r2
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80057e6:	b480      	push	{r7}
 80057e8:	b089      	sub	sp, #36	; 0x24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	460b      	mov	r3, r1
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	7b1b      	ldrb	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005802:	2300      	movs	r3, #0
 8005804:	e031      	b.n	800586a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	69da      	ldr	r2, [r3, #28]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	7b5b      	ldrb	r3, [r3, #13]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	b21b      	sxth	r3, r3
 8005816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800581a:	b219      	sxth	r1, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	7adb      	ldrb	r3, [r3, #11]
 8005820:	b21b      	sxth	r3, r3
 8005822:	430b      	orrs	r3, r1
 8005824:	b21b      	sxth	r3, r3
 8005826:	b29b      	uxth	r3, r3
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	4413      	add	r3, r2
 800582c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7b1b      	ldrb	r3, [r3, #12]
 8005832:	837b      	strh	r3, [r7, #26]
 8005834:	e013      	b.n	800585e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	897a      	ldrh	r2, [r7, #10]
 800583c:	429a      	cmp	r2, r3
 800583e:	d103      	bne.n	8005848 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005846:	e010      	b.n	800586a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	897a      	ldrh	r2, [r7, #10]
 800584e:	429a      	cmp	r2, r3
 8005850:	d309      	bcc.n	8005866 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005852:	8b7b      	ldrh	r3, [r7, #26]
 8005854:	3b01      	subs	r3, #1
 8005856:	837b      	strh	r3, [r7, #26]
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3304      	adds	r3, #4
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	8b7b      	ldrh	r3, [r7, #26]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e8      	bne.n	8005836 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8005864:	e000      	b.n	8005868 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8005866:	bf00      	nop
        }
    }
    return 0;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
        : color(col)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	601a      	str	r2, [r3, #0]
    }
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	887a      	ldrh	r2, [r7, #2]
 80058a4:	801a      	strh	r2, [r3, #0]
    {
    }
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	460b      	mov	r3, r1
 80058be:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fb0a 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 80058e4:	4a05      	ldr	r2, [pc, #20]	; (80058fc <_ZN8touchgfx9ContainerC1Ev+0x28>)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	0802de50 	.word	0x0802de50

08005900 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
    {
 8005908:	4a06      	ldr	r2, [pc, #24]	; (8005924 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f001 f820 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	0802f610 	.word	0x0802f610

08005928 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
    }
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ffe5 	bl	8005900 <_ZN8touchgfx6ScreenD1Ev>
 8005936:	213c      	movs	r1, #60	; 0x3c
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f025 fab6 	bl	802aeaa <_ZdlPvj>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    {
    }
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    {
    }
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
    {
    }
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
    {
    }
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f012 fa7f 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	2326      	movs	r3, #38	; 0x26
 80059de:	461a      	mov	r2, r3
 80059e0:	2100      	movs	r1, #0
 80059e2:	f025 fc96 	bl	802b312 <memset>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fd35 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	22ff      	movs	r2, #255	; 0xff
 80059f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3328      	adds	r3, #40	; 0x28
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ff37 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	0802eec4 	.word	0x0802eec4

08005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	2326      	movs	r3, #38	; 0x26
 8005a44:	461a      	mov	r2, r3
 8005a46:	2100      	movs	r1, #0
 8005a48:	f025 fc63 	bl	802b312 <memset>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fd02 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 8005a54:	4a09      	ldr	r2, [pc, #36]	; (8005a7c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	8812      	ldrh	r2, [r2, #0]
 8005a60:	84da      	strh	r2, [r3, #38]	; 0x26
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	22ff      	movs	r2, #255	; 0xff
 8005a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bitmap);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f014 fbce 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	0802f13c 	.word	0x0802f13c

08005a80 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	601a      	str	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fcf3 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	0802eec4 	.word	0x0802eec4

08005aa4 <_ZN8touchgfx3BoxD0Ev>:
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ffe7 	bl	8005a80 <_ZN8touchgfx3BoxD1Ev>
 8005ab2:	212c      	movs	r1, #44	; 0x2c
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f025 f9f8 	bl	802aeaa <_ZdlPvj>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ff7e 	bl	80059d0 <_ZN8touchgfx3BoxC1Ev>
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	332c      	adds	r3, #44	; 0x2c
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fec8 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	0802f0d8 	.word	0x0802f0d8

08005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	887a      	ldrh	r2, [r7, #2]
 8005b28:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	460b      	mov	r3, r1
 8005b42:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005b44:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	809a      	strh	r2, [r3, #4]
    }
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	0802d390 	.word	0x0802d390

08005b64 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	2326      	movs	r3, #38	; 0x26
 8005b72:	461a      	mov	r2, r3
 8005b74:	2100      	movs	r1, #0
 8005b76:	f025 fbcc 	bl	802b312 <memset>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fc6b 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 8005b82:	4a14      	ldr	r2, [pc, #80]	; (8005bd4 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3328      	adds	r3, #40	; 0x28
 8005b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ffd1 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	3330      	adds	r3, #48	; 0x30
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fe6a 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	869a      	strh	r2, [r3, #52]	; 0x34
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	22ff      	movs	r2, #255	; 0xff
 8005bac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    {
    }
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	0802ee1c 	.word	0x0802ee1c

08005bd8 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4618      	mov	r0, r3
 8005be4:	2326      	movs	r3, #38	; 0x26
 8005be6:	461a      	mov	r2, r3
 8005be8:	2100      	movs	r1, #0
 8005bea:	f025 fb92 	bl	802b312 <memset>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe fc31 	bl	8004458 <_ZN8touchgfx6WidgetC1Ev>
 8005bf6:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fe50 	bl	80058b4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	0802ec80 	.word	0x0802ec80

08005c24 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fe fc13 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	0802ec80 	.word	0x0802ec80

08005c64 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ffe7 	bl	8005c40 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005c72:	2130      	movs	r1, #48	; 0x30
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f025 f918 	bl	802aeaa <_ZdlPvj>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff ffa2 	bl	8005bd8 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005c94:	4a0c      	ldr	r2, [pc, #48]	; (8005cc8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	332e      	adds	r3, #46	; 0x2e
 8005c9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fdf6 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3330      	adds	r3, #48	; 0x30
 8005cac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fdef 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	0802ef8c 	.word	0x0802ef8c

08005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fe0f 	bl	8005900 <_ZN8touchgfx6ScreenD1Ev>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0802d604 	.word	0x0802d604

08005cf0 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff ffe7 	bl	8005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005cfe:	2140      	movs	r1, #64	; 0x40
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f025 f8d2 	bl	802aeaa <_ZdlPvj>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	4a3c      	ldr	r2, [pc, #240]	; (8005e0c <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fdf5 	bl	8006914 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 fe77 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fe4f 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f000 fe05 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fe21 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fe3d 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fdf3 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fe31 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fde7 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe6f 	bl	8006a74 <_ZN8touchgfx6ButtonD1Ev>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fe41 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe19 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fdcf 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f000 fe0d 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	33f8      	adds	r3, #248	; 0xf8
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fdc4 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	33c4      	adds	r3, #196	; 0xc4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fe03 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3398      	adds	r3, #152	; 0x98
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fdba 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	336c      	adds	r3, #108	; 0x6c
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fdd7 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3340      	adds	r3, #64	; 0x40
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff fe44 	bl	8005a80 <_ZN8touchgfx3BoxD1Ev>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff ff66 	bl	8005ccc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0802d5b4 	.word	0x0802d5b4

08005e10 <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff79 	bl	8005d10 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005e1e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f025 f841 	bl	802aeaa <_ZdlPvj>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005e4e:	f015 feed 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8005e52:	4603      	mov	r3, r0
    }
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b0b5      	sub	sp, #212	; 0xd4
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 fcee 	bl	8006848 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005e6c:	4ae0      	ldr	r2, [pc, #896]	; (80061f0 <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3340      	adds	r3, #64	; 0x40
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fdaa 	bl	80059d0 <_ZN8touchgfx3BoxC1Ev>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005e82:	f107 0314 	add.w	r3, r7, #20
 8005e86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fd02 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4619      	mov	r1, r3
 8005e96:	4620      	mov	r0, r4
 8005e98:	f7ff fdcc 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3398      	adds	r3, #152	; 0x98
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fd17 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	33c4      	adds	r3, #196	; 0xc4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff fe0a 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	33f8      	adds	r3, #248	; 0xf8
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fd0d 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff fdff 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fd01 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fdf3 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fe3d 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fec7 	bl	8005c84 <_ZN8touchgfx6ButtonC1Ev>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff fce9 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff fddb 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fcdd 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fdcf 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 8005f2c:	f107 0318 	add.w	r3, r7, #24
 8005f30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fcad 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8005f3a:	f107 0318 	add.w	r3, r7, #24
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff fd77 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7ff fcc1 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff fdb3 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fdfd 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f503 706c 	add.w	r0, r3, #944	; 0x3b0
 8005f70:	4ba0      	ldr	r3, [pc, #640]	; (80061f4 <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005f72:	61fb      	str	r3, [r7, #28]
 8005f74:	2300      	movs	r3, #0
 8005f76:	623b      	str	r3, [r7, #32]
 8005f78:	f107 031c 	add.w	r3, r7, #28
 8005f7c:	cb0c      	ldmia	r3, {r2, r3}
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	f000 fc88 	bl	8006894 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005f8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	f7fe f815 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005fb4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005fce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fc4e 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8005fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f7ff fd1a 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	336c      	adds	r3, #108	; 0x6c
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2100      	movs	r1, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe f843 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fc48 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8006004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006008:	4619      	mov	r1, r3
 800600a:	4620      	mov	r0, r4
 800600c:	f014 f8ff 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8006016:	234d      	movs	r3, #77	; 0x4d
 8006018:	9300      	str	r3, [sp, #0]
 800601a:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800601e:	22bb      	movs	r2, #187	; 0xbb
 8006020:	210a      	movs	r1, #10
 8006022:	f7fd ffd0 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800602c:	234d      	movs	r3, #77	; 0x4d
 800602e:	9300      	str	r3, [sp, #0]
 8006030:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	f7fd ffc5 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8006042:	234e      	movs	r3, #78	; 0x4e
 8006044:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8006048:	2389      	movs	r3, #137	; 0x89
 800604a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 800604e:	23ae      	movs	r3, #174	; 0xae
 8006050:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8006054:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8006058:	041b      	lsls	r3, r3, #16
 800605a:	461a      	mov	r2, r3
 800605c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	431a      	orrs	r2, r3
 8006064:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8006068:	4313      	orrs	r3, r2
 800606a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800606e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fbfe 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800607a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607c:	4619      	mov	r1, r3
 800607e:	4620      	mov	r0, r4
 8006080:	f7ff fcca 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 800608a:	23ed      	movs	r3, #237	; 0xed
 800608c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
 8006090:	2366      	movs	r3, #102	; 0x66
 8006092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006096:	2363      	movs	r3, #99	; 0x63
 8006098:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800609c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	461a      	mov	r2, r3
 80060a4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	431a      	orrs	r2, r3
 80060ac:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80060b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff fbda 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80060c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c4:	4619      	mov	r1, r3
 80060c6:	4620      	mov	r0, r4
 80060c8:	f7ff fd18 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	33c4      	adds	r3, #196	; 0xc4
 80060d0:	2105      	movs	r1, #5
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fd20 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	33c4      	adds	r3, #196	; 0xc4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f011 feed 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 80060f0:	2349      	movs	r3, #73	; 0x49
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80060f8:	2204      	movs	r2, #4
 80060fa:	2105      	movs	r1, #5
 80060fc:	f7fd ff63 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 7092 	add.w	r0, r3, #292	; 0x124
 8006106:	2343      	movs	r3, #67	; 0x43
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800610e:	2201      	movs	r2, #1
 8006110:	2100      	movs	r1, #0
 8006112:	f7fd ff58 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f503 7492 	add.w	r4, r3, #292	; 0x124
 800611c:	2343      	movs	r3, #67	; 0x43
 800611e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8006122:	2365      	movs	r3, #101	; 0x65
 8006124:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8006128:	238b      	movs	r3, #139	; 0x8b
 800612a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800612e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006132:	041b      	lsls	r3, r3, #16
 8006134:	461a      	mov	r2, r3
 8006136:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	431a      	orrs	r2, r3
 800613e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006142:	4313      	orrs	r3, r2
 8006144:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006148:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fb91 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006156:	4619      	mov	r1, r3
 8006158:	4620      	mov	r0, r4
 800615a:	f7ff fc5d 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8006164:	2300      	movs	r3, #0
 8006166:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800616a:	2300      	movs	r3, #0
 800616c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8006170:	2300      	movs	r3, #0
 8006172:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8006176:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	461a      	mov	r2, r3
 800617e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	431a      	orrs	r2, r3
 8006186:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800618a:	4313      	orrs	r3, r2
 800618c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006190:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fb6d 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800619c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619e:	4619      	mov	r1, r3
 80061a0:	4620      	mov	r0, r4
 80061a2:	f7ff fcab 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061ac:	2102      	movs	r1, #2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fcb2 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f011 fe7e 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	33f8      	adds	r3, #248	; 0xf8
 80061d2:	4619      	mov	r1, r3
 80061d4:	4610      	mov	r0, r2
 80061d6:	f011 fe75 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 80061e0:	2314      	movs	r3, #20
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	23b1      	movs	r3, #177	; 0xb1
 80061e6:	222f      	movs	r2, #47	; 0x2f
 80061e8:	218e      	movs	r1, #142	; 0x8e
 80061ea:	f7fd feec 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
 80061ee:	e003      	b.n	80061f8 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 80061f0:	0802d5b4 	.word	0x0802d5b4
 80061f4:	0800681d 	.word	0x0800681d

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 80061fe:	2311      	movs	r3, #17
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	23b1      	movs	r3, #177	; 0xb1
 8006204:	2203      	movs	r2, #3
 8006206:	2100      	movs	r1, #0
 8006208:	f7fd fedd 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 8006212:	2300      	movs	r3, #0
 8006214:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 800621e:	2300      	movs	r3, #0
 8006220:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006224:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	461a      	mov	r2, r3
 800622c:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	431a      	orrs	r2, r3
 8006234:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006238:	4313      	orrs	r3, r2
 800623a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800623e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fb16 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800624a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800624c:	4619      	mov	r1, r3
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fbe2 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 800625a:	23ed      	movs	r3, #237	; 0xed
 800625c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8006260:	2366      	movs	r3, #102	; 0x66
 8006262:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8006266:	2363      	movs	r3, #99	; 0x63
 8006268:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 800626c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	461a      	mov	r2, r3
 8006274:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	431a      	orrs	r2, r3
 800627c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8006280:	4313      	orrs	r3, r2
 8006282:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006286:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800628a:	4611      	mov	r1, r2
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff faf2 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006294:	4619      	mov	r1, r3
 8006296:	4620      	mov	r0, r4
 8006298:	f7ff fc30 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80062a2:	2103      	movs	r1, #3
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fc37 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f011 fe03 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80062c4:	2205      	movs	r2, #5
 80062c6:	2107      	movs	r1, #7
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fd fed5 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80062d4:	23ff      	movs	r3, #255	; 0xff
 80062d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80062da:	23ff      	movs	r3, #255	; 0xff
 80062dc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80062e0:	23ff      	movs	r3, #255	; 0xff
 80062e2:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80062e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	461a      	mov	r2, r3
 80062ee:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	431a      	orrs	r2, r3
 80062f6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006300:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006304:	4611      	mov	r1, r2
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fab5 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800630c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006312:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8006314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800631c:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006324:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006328:	2300      	movs	r3, #0
 800632a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 800632e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006332:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8006336:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006338:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8006340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006344:	2107      	movs	r1, #7
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fbf6 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 800634c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006350:	4619      	mov	r1, r3
 8006352:	4620      	mov	r0, r4
 8006354:	f013 fce1 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006358:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800635c:	4618      	mov	r0, r3
 800635e:	f7fd fd7f 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f011 fda7 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f011 fd9d 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006390:	220f      	movs	r2, #15
 8006392:	21bc      	movs	r1, #188	; 0xbc
 8006394:	4618      	mov	r0, r3
 8006396:	f7fd fe6f 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 80063a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063a4:	2103      	movs	r1, #3
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fa74 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 80063ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80063b0:	2102      	movs	r1, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fa6e 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 80063b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80063bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80063c0:	4619      	mov	r1, r3
 80063c2:	4620      	mov	r0, r4
 80063c4:	f013 fce0 	bl	8019d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f503 736c 	add.w	r3, r3, #944	; 0x3b0
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7ff fc24 	bl	8005c24 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f011 fd6a 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f503 700a 	add.w	r0, r3, #552	; 0x228
 80063f6:	23c2      	movs	r3, #194	; 0xc2
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80063fe:	2208      	movs	r2, #8
 8006400:	210a      	movs	r1, #10
 8006402:	f7fd fde0 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f503 7015 	add.w	r0, r3, #596	; 0x254
 800640c:	23b7      	movs	r3, #183	; 0xb7
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8006414:	2200      	movs	r2, #0
 8006416:	2100      	movs	r1, #0
 8006418:	f7fd fdd5 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8006422:	234e      	movs	r3, #78	; 0x4e
 8006424:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
 8006428:	2389      	movs	r3, #137	; 0x89
 800642a:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 800642e:	23ae      	movs	r3, #174	; 0xae
 8006430:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006434:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	461a      	mov	r2, r3
 800643c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	431a      	orrs	r2, r3
 8006444:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006448:	4313      	orrs	r3, r2
 800644a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800644e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fa0e 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800645a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800645c:	4619      	mov	r1, r3
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff fada 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f503 7415 	add.w	r4, r3, #596	; 0x254
 800646a:	23ed      	movs	r3, #237	; 0xed
 800646c:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
 8006470:	2366      	movs	r3, #102	; 0x66
 8006472:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
 8006476:	2363      	movs	r3, #99	; 0x63
 8006478:	f887 30aa 	strb.w	r3, [r7, #170]	; 0xaa
 800647c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	461a      	mov	r2, r3
 8006484:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8006488:	021b      	lsls	r3, r3, #8
 800648a:	431a      	orrs	r2, r3
 800648c:	f897 30aa 	ldrb.w	r3, [r7, #170]	; 0xaa
 8006490:	4313      	orrs	r3, r2
 8006492:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800649a:	4611      	mov	r1, r2
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff f9ea 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80064a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a4:	4619      	mov	r1, r3
 80064a6:	4620      	mov	r0, r4
 80064a8:	f7ff fb28 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80064b2:	2105      	movs	r1, #5
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fb2f 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 720a 	add.w	r2, r3, #552	; 0x228
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80064c6:	4619      	mov	r1, r3
 80064c8:	4610      	mov	r0, r2
 80064ca:	f011 fcfb 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f503 7022 	add.w	r0, r3, #648	; 0x288
 80064d4:	23af      	movs	r3, #175	; 0xaf
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80064dc:	2204      	movs	r2, #4
 80064de:	2105      	movs	r1, #5
 80064e0:	f7fd fd71 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f503 702d 	add.w	r0, r3, #692	; 0x2b4
 80064ea:	23af      	movs	r3, #175	; 0xaf
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80064f2:	2200      	movs	r2, #0
 80064f4:	2100      	movs	r1, #0
 80064f6:	f7fd fd66 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8006500:	2343      	movs	r3, #67	; 0x43
 8006502:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8006506:	2365      	movs	r3, #101	; 0x65
 8006508:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
 800650c:	238b      	movs	r3, #139	; 0x8b
 800650e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
 8006512:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	461a      	mov	r2, r3
 800651a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	431a      	orrs	r2, r3
 8006522:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 8006526:	4313      	orrs	r3, r2
 8006528:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800652c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006530:	4611      	mov	r1, r2
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff f99f 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800653a:	4619      	mov	r1, r3
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fa6b 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f503 742d 	add.w	r4, r3, #692	; 0x2b4
 8006548:	2300      	movs	r3, #0
 800654a:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 800654e:	2300      	movs	r3, #0
 8006550:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8006554:	2300      	movs	r3, #0
 8006556:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
 800655a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 800655e:	041b      	lsls	r3, r3, #16
 8006560:	461a      	mov	r2, r3
 8006562:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	431a      	orrs	r2, r3
 800656a:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 800656e:	4313      	orrs	r3, r2
 8006570:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff f97b 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006582:	4619      	mov	r1, r3
 8006584:	4620      	mov	r0, r4
 8006586:	f7ff fab9 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006590:	2102      	movs	r1, #2
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff fac0 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f011 fc8c 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80065b2:	2209      	movs	r2, #9
 80065b4:	215f      	movs	r1, #95	; 0x5f
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd fd5e 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 743a 	add.w	r4, r3, #744	; 0x2e8
 80065c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065c6:	210c      	movs	r1, #12
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff f963 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 80065ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80065d2:	4619      	mov	r1, r3
 80065d4:	4620      	mov	r0, r4
 80065d6:	f013 fe1a 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 7222 	add.w	r2, r3, #648	; 0x288
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f011 fc6b 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f503 7045 	add.w	r0, r3, #788	; 0x314
 80065f4:	2314      	movs	r3, #20
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2375      	movs	r3, #117	; 0x75
 80065fa:	2200      	movs	r2, #0
 80065fc:	21a7      	movs	r1, #167	; 0xa7
 80065fe:	f7fd fce2 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8006608:	2311      	movs	r3, #17
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	2375      	movs	r3, #117	; 0x75
 800660e:	2203      	movs	r2, #3
 8006610:	2100      	movs	r1, #0
 8006612:	f7fd fcd8 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 7450 	add.w	r4, r3, #832	; 0x340
 800661c:	2300      	movs	r3, #0
 800661e:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8006622:	2300      	movs	r3, #0
 8006624:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8006628:	2300      	movs	r3, #0
 800662a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800662e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	461a      	mov	r2, r3
 8006636:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	431a      	orrs	r2, r3
 800663e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8006642:	4313      	orrs	r3, r2
 8006644:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006648:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800664c:	4611      	mov	r1, r2
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff f911 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006656:	4619      	mov	r1, r3
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff f9dd 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 7450 	add.w	r4, r3, #832	; 0x340
 8006664:	23ed      	movs	r3, #237	; 0xed
 8006666:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
 800666a:	2366      	movs	r3, #102	; 0x66
 800666c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006670:	2363      	movs	r3, #99	; 0x63
 8006672:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8006676:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	461a      	mov	r2, r3
 800667e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	431a      	orrs	r2, r3
 8006686:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800668a:	4313      	orrs	r3, r2
 800668c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8006690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006694:	4611      	mov	r1, r2
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff f8ed 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800669c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800669e:	4619      	mov	r1, r3
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff fa2b 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80066ac:	2103      	movs	r1, #3
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fa32 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 7245 	add.w	r2, r3, #788	; 0x314
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f011 fbfe 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80066ce:	2205      	movs	r2, #5
 80066d0:	2104      	movs	r1, #4
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd fcd0 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f503 745d 	add.w	r4, r3, #884	; 0x374
 80066de:	23ff      	movs	r3, #255	; 0xff
 80066e0:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 80066e4:	23ff      	movs	r3, #255	; 0xff
 80066e6:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
 80066ea:	23ff      	movs	r3, #255	; 0xff
 80066ec:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 80066f0:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80066f4:	041b      	lsls	r3, r3, #16
 80066f6:	461a      	mov	r2, r3
 80066f8:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	431a      	orrs	r2, r3
 8006700:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8006704:	4313      	orrs	r3, r2
 8006706:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800670a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff f8b0 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8006716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006718:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800671c:	60fb      	str	r3, [r7, #12]
        this->color = color;
 800671e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8006726:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f503 735d 	add.w	r3, r3, #884	; 0x374
 800672e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006732:	2300      	movs	r3, #0
 8006734:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
        linespace = space;
 8006738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800673c:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8006740:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8006742:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f503 745d 	add.w	r4, r3, #884	; 0x374
 800674a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800674e:	2108      	movs	r1, #8
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f9f1 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8006756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800675a:	4619      	mov	r1, r3
 800675c:	4620      	mov	r0, r4
 800675e:	f013 fadc 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006762:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd fb7a 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 7245 	add.w	r2, r3, #788	; 0x314
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8006778:	4619      	mov	r1, r3
 800677a:	4610      	mov	r0, r2
 800677c:	f011 fba2 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f503 7345 	add.w	r3, r3, #788	; 0x314
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f011 fb98 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 720a 	add.w	r2, r3, #552	; 0x228
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f011 fb8e 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3340      	adds	r3, #64	; 0x40
 80067ae:	4619      	mov	r1, r3
 80067b0:	4610      	mov	r0, r2
 80067b2:	f7ff f8fd 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	336c      	adds	r3, #108	; 0x6c
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7ff f8f6 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3398      	adds	r3, #152	; 0x98
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7ff f8ef 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f503 730a 	add.w	r3, r3, #552	; 0x228
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7ff f8e7 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	37cc      	adds	r7, #204	; 0xcc
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd90      	pop	{r4, r7, pc}

080067ec <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	332c      	adds	r3, #44	; 0x2c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
}
 8006814:	bf00      	nop
 8006816:	3708      	adds	r7, #8
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d106      	bne.n	8006840 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff fb07 	bl	8005e46 <_ZN24Localize_AnomalyViewBase11applicationEv>
 8006838:	4603      	mov	r3, r0
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd fee2 	bl	8004604 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4618      	mov	r0, r3
 8006854:	f016 fcd2 	bl	801d1fc <_ZN8touchgfx6ScreenC1Ev>
 8006858:	4a05      	ldr	r2, [pc, #20]	; (8006870 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	0802d604 	.word	0x0802d604

08006874 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	0802d638 	.word	0x0802d638

08006894 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4639      	mov	r1, r7
 80068a0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff ffe4 	bl	8006874 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80068ac:	4a08      	ldr	r2, [pc, #32]	; (80068d0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3308      	adds	r3, #8
 80068bc:	463a      	mov	r2, r7
 80068be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	0802d5ec 	.word	0x0802d5ec

080068d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
    }
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	0802d638 	.word	0x0802d638

080068f4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
    }
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff ffe9 	bl	80068d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006902:	2104      	movs	r1, #4
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f024 fad0 	bl	802aeaa <_ZdlPvj>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	4a05      	ldr	r2, [pc, #20]	; (8006934 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff ffd5 	bl	80068d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	0802d5ec 	.word	0x0802d5ec

08006938 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ffe7 	bl	8006914 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006946:	2110      	movs	r1, #16
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f024 faae 	bl	802aeaa <_ZdlPvj>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	4a05      	ldr	r2, [pc, #20]	; (8006978 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fd faf5 	bl	8003f58 <_ZN8touchgfx8DrawableD1Ev>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	0802de50 	.word	0x0802de50

0800697c <_ZN8touchgfx9ContainerD0Ev>:
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ffe7 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 800698a:	212c      	movs	r1, #44	; 0x2c
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f024 fa8c 	bl	802aeaa <_ZdlPvj>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	4a05      	ldr	r2, [pc, #20]	; (80069bc <_ZN8touchgfx5ImageD1Ev+0x20>)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fd fd65 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	0802f13c 	.word	0x0802f13c

080069c0 <_ZN8touchgfx5ImageD0Ev>:
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffe7 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 80069ce:	212c      	movs	r1, #44	; 0x2c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f024 fa6a 	bl	802aeaa <_ZdlPvj>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff f845 	bl	8005a80 <_ZN8touchgfx3BoxD1Ev>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	0802f0d8 	.word	0x0802f0d8

08006a04 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff ffe7 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006a12:	2134      	movs	r1, #52	; 0x34
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f024 fa48 	bl	802aeaa <_ZdlPvj>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	4a08      	ldr	r2, [pc, #32]	; (8006a50 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3328      	adds	r3, #40	; 0x28
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7fd fa12 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fd fd1c 	bl	800447c <_ZN8touchgfx6WidgetD1Ev>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	0802ee1c 	.word	0x0802ee1c

08006a54 <_ZN8touchgfx8TextAreaD0Ev>:
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ffe1 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006a62:	213c      	movs	r1, #60	; 0x3c
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f024 fa20 	bl	802aeaa <_ZdlPvj>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	4a05      	ldr	r2, [pc, #20]	; (8006a94 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff f8db 	bl	8005c40 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	0802ef8c 	.word	0x0802ef8c

08006a98 <_ZN8touchgfx6ButtonD0Ev>:
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ffe7 	bl	8006a74 <_ZN8touchgfx6ButtonD1Ev>
 8006aa6:	2134      	movs	r1, #52	; 0x34
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f024 f9fe 	bl	802aeaa <_ZdlPvj>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	1052      	asrs	r2, r2, #1
 8006acc:	1898      	adds	r0, r3, r2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	e00a      	b.n	8006af6 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68d2      	ldr	r2, [r2, #12]
 8006ae8:	1052      	asrs	r2, r2, #1
 8006aea:	4413      	add	r3, r2
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6892      	ldr	r2, [r2, #8]
 8006af2:	4413      	add	r3, r2
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	4798      	blx	r3
    }
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d010      	beq.n	8006b34 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d107      	bne.n	8006b2a <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b26:	2301      	movs	r3, #1
 8006b28:	e000      	b.n	8006b2c <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d001      	beq.n	8006b34 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006b34:	2300      	movs	r3, #0
    }
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f013 f8f4 	bl	8019d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006ba0:	bf00      	nop
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	4a05      	ldr	r2, [pc, #20]	; (8006bc8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe fea1 	bl	8005900 <_ZN8touchgfx6ScreenD1Ev>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	0802d6c8 	.word	0x0802d6c8

08006bcc <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ffe7 	bl	8006ba8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006bda:	2140      	movs	r1, #64	; 0x40
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f024 f964 	bl	802aeaa <_ZdlPvj>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	4a93      	ldr	r2, [pc, #588]	; (8006e44 <_ZN12MainViewBaseD1Ev+0x258>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8006c00:	4618      	mov	r0, r3
 8006c02:	f002 fd9f 	bl	8009744 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f002 fdbb 	bl	8009788 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff ff03 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fedb 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fe91 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff19 	bl	8006a74 <_ZN8touchgfx6ButtonD1Ev>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff ff13 	bl	8006a74 <_ZN8touchgfx6ButtonD1Ev>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fea1 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff fe9b 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fed9 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff feb1 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fe67 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fec7 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fec1 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fe99 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fe93 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fe49 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fea9 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fea3 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fe7b 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fe75 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fe2b 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fe8b 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fe63 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fe19 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fe57 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fe0d 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fe4b 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fe01 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fe3f 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fdf5 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8006d74:	4618      	mov	r0, r3
 8006d76:	f002 fdd7 	bl	8009928 <_ZN8touchgfx12ToggleButtonD1Ev>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8006d80:	4618      	mov	r0, r3
 8006d82:	f002 fd9b 	bl	80098bc <_ZN8touchgfx6SliderD1Ev>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fe49 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fe21 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff fdd7 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 fd59 	bl	8009868 <_ZN8touchgfx12TextProgressD1Ev>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fe0f 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fdc5 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff fe25 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fdfd 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fdb3 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fdf1 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	33f8      	adds	r3, #248	; 0xf8
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7ff fda8 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	33c4      	adds	r3, #196	; 0xc4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fde7 	bl	80069e0 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3398      	adds	r3, #152	; 0x98
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7ff fd9e 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	336c      	adds	r3, #108	; 0x6c
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fdbb 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3340      	adds	r3, #64	; 0x40
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fe28 	bl	8005a80 <_ZN8touchgfx3BoxD1Ev>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff feb8 	bl	8006ba8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	0802d650 	.word	0x0802d650

08006e48 <_ZN12MainViewBaseD0Ev>:
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fecb 	bl	8006bec <_ZN12MainViewBaseD1Ev>
 8006e56:	f640 3118 	movw	r1, #2840	; 0xb18
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f024 f825 	bl	802aeaa <_ZdlPvj>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006ed8:	f014 fea8 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8006edc:	4603      	mov	r3, r0
    }
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe fec6 	bl	8005c84 <_ZN8touchgfx6ButtonC1Ev>
 8006ef8:	4a07      	ldr	r2, [pc, #28]	; (8006f18 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3334      	adds	r3, #52	; 0x34
 8006f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fcc4 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	0802ecec 	.word	0x0802ecec

08006f1c <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006f1c:	b590      	push	{r4, r7, lr}
 8006f1e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8006f22:	af02      	add	r7, sp, #8
 8006f24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f28:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f2c:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006f2e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f32:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f002 fb7d 	bl	8009638 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006f3e:	4ae7      	ldr	r2, [pc, #924]	; (80072dc <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006f40:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f44:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f50:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3340      	adds	r3, #64	; 0x40
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fd39 	bl	80059d0 <_ZN8touchgfx3BoxC1Ev>
 8006f5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8006f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fe fc8d 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8006f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4620      	mov	r0, r4
 8006f82:	f7fe fd57 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006f86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f8a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3398      	adds	r3, #152	; 0x98
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe fc9e 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8006f98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006f9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	33c4      	adds	r3, #196	; 0xc4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe fd8d 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006faa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	33f8      	adds	r3, #248	; 0xf8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fc8c 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8006fbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fc0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fd7a 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fd4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fc78 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8006fe4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006fe8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fd66 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ff8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ffc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fdac 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 800700c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007010:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fc5a 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8007020:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007024:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe fd48 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007034:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007038:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007042:	4618      	mov	r0, r3
 8007044:	f010 fcdc 	bl	8017a00 <_ZN8touchgfx12TextProgressC1Ev>
 8007048:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800704c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc3c 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 800705c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007060:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fd2a 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007070:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007074:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800707e:	4618      	mov	r0, r3
 8007080:	f7fe fd70 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8007084:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007088:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007092:	4618      	mov	r0, r3
 8007094:	f011 fb96 	bl	80187c4 <_ZN8touchgfx6SliderC1Ev>
 8007098:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800709c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff ff1e 	bl	8006ee8 <_ZN8touchgfx12ToggleButtonC1Ev>
 80070ac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070b0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe fc0a 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 80070c0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070c4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fcf8 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fe fbf6 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 80070e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80070ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe fce4 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007100:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fbe2 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8007110:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007114:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fcd0 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007124:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007128:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe fbce 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8007138:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800713c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fcbc 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800714c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007150:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fd02 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8007160:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007164:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fbb0 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 8007174:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007178:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8007182:	4618      	mov	r0, r3
 8007184:	f7fe fc9e 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007188:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800718c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fc94 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800719c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fcda 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 80071b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071b4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe fcd0 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 80071c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fb7e 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 80071d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fc6c 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80071f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f603 0354 	addw	r3, r3, #2132	; 0x854
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fc62 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007200:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007204:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fca8 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8007214:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007218:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fc9e 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8007228:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800722c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fb4c 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 800723c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007240:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fc3a 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007250:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007254:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 800725e:	4618      	mov	r0, r3
 8007260:	f7fe fc80 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
 8007264:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007268:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 8007272:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007276:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe fb0a 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007280:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007284:	4619      	mov	r1, r3
 8007286:	4620      	mov	r0, r4
 8007288:	f7fe fbd4 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800728c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007290:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 800729a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800729e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe faf6 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 80072a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80072ac:	4619      	mov	r1, r3
 80072ae:	4620      	mov	r0, r4
 80072b0:	f7fe fbc0 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80072b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072b8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fcde 	bl	8005c84 <_ZN8touchgfx6ButtonC1Ev>
 80072c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80072d6:	4618      	mov	r0, r3
 80072d8:	e002      	b.n	80072e0 <_ZN12MainViewBaseC1Ev+0x3c4>
 80072da:	bf00      	nop
 80072dc:	0802d650 	.word	0x0802d650
 80072e0:	f7fe fcd0 	bl	8005c84 <_ZN8touchgfx6ButtonC1Ev>
 80072e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7fe faee 	bl	80058d4 <_ZN8touchgfx9ContainerC1Ev>
 80072f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80072fc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fbdc 	bl	8005ac4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800730c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007310:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fc22 	bl	8005b64 <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
 8007320:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007324:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f603 20f8 	addw	r0, r3, #2808	; 0xaf8
 800732e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007332:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007336:	4ae9      	ldr	r2, [pc, #932]	; (80076dc <_ZN12MainViewBaseC1Ev+0x7c0>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800733e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8007342:	2200      	movs	r2, #0
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800734a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800734e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007352:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 8007356:	cb0c      	ldmia	r3, {r2, r3}
 8007358:	6809      	ldr	r1, [r1, #0]
 800735a:	f002 f983 	bl	8009664 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 800735e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007362:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f603 3008 	addw	r0, r3, #2824	; 0xb08
 800736c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007370:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007374:	4ada      	ldr	r2, [pc, #872]	; (80076e0 <_ZN12MainViewBaseC1Ev+0x7c4>)
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800737c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8007380:	2200      	movs	r2, #0
 8007382:	605a      	str	r2, [r3, #4]
 8007384:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007388:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800738c:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007390:	f5a2 7119 	sub.w	r1, r2, #612	; 0x264
 8007394:	cb0c      	ldmia	r3, {r2, r3}
 8007396:	6809      	ldr	r1, [r1, #0]
 8007398:	f002 f994 	bl	80096c4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 800739c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80073a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80073aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	f7fc fe05 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80073c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 80073d0:	2300      	movs	r3, #0
 80073d2:	f887 3175 	strb.w	r3, [r7, #373]	; 0x175
 80073d6:	2300      	movs	r3, #0
 80073d8:	f887 3174 	strb.w	r3, [r7, #372]	; 0x174
 80073dc:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	461a      	mov	r2, r3
 80073e4:	f897 3175 	ldrb.w	r3, [r7, #373]	; 0x175
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	431a      	orrs	r2, r3
 80073ec:	f897 3174 	ldrb.w	r3, [r7, #372]	; 0x174
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80073f6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fa3a 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007402:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8007406:	4619      	mov	r1, r3
 8007408:	4620      	mov	r0, r4
 800740a:	f7fe fb05 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 800740e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007412:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	336c      	adds	r3, #108	; 0x6c
 800741a:	2200      	movs	r2, #0
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fc fe2a 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8007424:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007428:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8007432:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007436:	2100      	movs	r1, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fa2b 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 800743e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007442:	4619      	mov	r1, r3
 8007444:	4620      	mov	r0, r4
 8007446:	f012 fee2 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 800744a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800744e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8007458:	23aa      	movs	r3, #170	; 0xaa
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 8007460:	225e      	movs	r2, #94	; 0x5e
 8007462:	210a      	movs	r1, #10
 8007464:	f7fc fdaf 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 8007468:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800746c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8007476:	2399      	movs	r3, #153	; 0x99
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 800747e:	2212      	movs	r2, #18
 8007480:	2100      	movs	r1, #0
 8007482:	f7fc fda0 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 8007486:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800748a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8007494:	234e      	movs	r3, #78	; 0x4e
 8007496:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
 800749a:	2389      	movs	r3, #137	; 0x89
 800749c:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
 80074a0:	23ae      	movs	r3, #174	; 0xae
 80074a2:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 80074a6:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 80074aa:	041b      	lsls	r3, r3, #16
 80074ac:	461a      	mov	r2, r3
 80074ae:	f897 3178 	ldrb.w	r3, [r7, #376]	; 0x178
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	431a      	orrs	r2, r3
 80074b6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80074c0:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe f9d5 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80074cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80074d0:	4619      	mov	r1, r3
 80074d2:	4620      	mov	r0, r4
 80074d4:	f7fe faa0 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80074d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80074dc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80074e6:	23ed      	movs	r3, #237	; 0xed
 80074e8:	f887 317c 	strb.w	r3, [r7, #380]	; 0x17c
 80074ec:	2366      	movs	r3, #102	; 0x66
 80074ee:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
 80074f2:	2363      	movs	r3, #99	; 0x63
 80074f4:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
 80074f8:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	461a      	mov	r2, r3
 8007500:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	431a      	orrs	r2, r3
 8007508:	f897 317a 	ldrb.w	r3, [r7, #378]	; 0x17a
 800750c:	4313      	orrs	r3, r2
 800750e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007512:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8007516:	4611      	mov	r1, r2
 8007518:	4618      	mov	r0, r3
 800751a:	f7fe f9ac 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800751e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007522:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4619      	mov	r1, r3
 800752a:	4620      	mov	r0, r4
 800752c:	f7fe fae6 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8007530:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007534:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	33c4      	adds	r3, #196	; 0xc4
 800753c:	2105      	movs	r1, #5
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe faea 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8007544:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007548:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007552:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007556:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	33c4      	adds	r3, #196	; 0xc4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f010 fcaf 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 8007566:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800756a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
 8007574:	2352      	movs	r3, #82	; 0x52
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800757c:	2254      	movs	r2, #84	; 0x54
 800757e:	2105      	movs	r1, #5
 8007580:	f7fc fd21 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 8007584:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007588:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f503 7092 	add.w	r0, r3, #292	; 0x124
 8007592:	2352      	movs	r3, #82	; 0x52
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	f7fc fd12 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80075a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f503 7492 	add.w	r4, r3, #292	; 0x124
 80075b0:	2343      	movs	r3, #67	; 0x43
 80075b2:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 80075b6:	2365      	movs	r3, #101	; 0x65
 80075b8:	f887 317e 	strb.w	r3, [r7, #382]	; 0x17e
 80075bc:	238b      	movs	r3, #139	; 0x8b
 80075be:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d
 80075c2:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	461a      	mov	r2, r3
 80075ca:	f897 317e 	ldrb.w	r3, [r7, #382]	; 0x17e
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	431a      	orrs	r2, r3
 80075d2:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80075dc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80075e0:	4611      	mov	r1, r2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe f947 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80075e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7fe fa0f 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80075fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075fe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800760e:	2300      	movs	r3, #0
 8007610:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800761a:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800761e:	041b      	lsls	r3, r3, #16
 8007620:	461a      	mov	r2, r3
 8007622:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	431a      	orrs	r2, r3
 800762a:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800762e:	4313      	orrs	r3, r2
 8007630:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007634:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8007638:	4611      	mov	r1, r2
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe f91b 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007640:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4619      	mov	r1, r3
 800764c:	4620      	mov	r0, r4
 800764e:	f7fe fa55 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 8007652:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007656:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007660:	2102      	movs	r1, #2
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fa58 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 8007668:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800766c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007676:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800767a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f010 fc1c 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 800768c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007690:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 800769a:	2314      	movs	r3, #20
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2389      	movs	r3, #137	; 0x89
 80076a0:	2200      	movs	r2, #0
 80076a2:	219d      	movs	r1, #157	; 0x9d
 80076a4:	f7fc fc8f 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 80076a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076ac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 80076b6:	2311      	movs	r3, #17
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	238a      	movs	r3, #138	; 0x8a
 80076bc:	2203      	movs	r2, #3
 80076be:	f04f 31ff 	mov.w	r1, #4294967295
 80076c2:	f7fc fc80 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80076c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
 80076da:	e003      	b.n	80076e4 <_ZN12MainViewBaseC1Ev+0x7c8>
 80076dc:	080095a9 	.word	0x080095a9
 80076e0:	08009609 	.word	0x08009609
 80076e4:	2300      	movs	r3, #0
 80076e6:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
 80076ea:	2300      	movs	r3, #0
 80076ec:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 80076f0:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	461a      	mov	r2, r3
 80076f8:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 80076fc:	021b      	lsls	r3, r3, #8
 80076fe:	431a      	orrs	r2, r3
 8007700:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8007704:	4313      	orrs	r3, r2
 8007706:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800770a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800770e:	4611      	mov	r1, r2
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f8b0 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007716:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800771a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4619      	mov	r1, r3
 8007722:	4620      	mov	r0, r4
 8007724:	f7fe f978 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007728:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800772c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f503 74c2 	add.w	r4, r3, #388	; 0x184
 8007736:	23ed      	movs	r3, #237	; 0xed
 8007738:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
 800773c:	2366      	movs	r3, #102	; 0x66
 800773e:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8007742:	2363      	movs	r3, #99	; 0x63
 8007744:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
 8007748:	f897 3188 	ldrb.w	r3, [r7, #392]	; 0x188
 800774c:	041b      	lsls	r3, r3, #16
 800774e:	461a      	mov	r2, r3
 8007750:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	431a      	orrs	r2, r3
 8007758:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800775c:	4313      	orrs	r3, r2
 800775e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007762:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f7fe f884 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800776e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007772:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4619      	mov	r1, r3
 800777a:	4620      	mov	r0, r4
 800777c:	f7fe f9be 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007780:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007784:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800778e:	2103      	movs	r1, #3
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe f9c1 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 8007796:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800779a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80077a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f010 fb85 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 80077ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077be:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80077c8:	2205      	movs	r2, #5
 80077ca:	2107      	movs	r1, #7
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fc fc53 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80077d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80077d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 80077e0:	23ff      	movs	r3, #255	; 0xff
 80077e2:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80077e6:	23ff      	movs	r3, #255	; 0xff
 80077e8:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
 80077ec:	23ff      	movs	r3, #255	; 0xff
 80077ee:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
 80077f2:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80077f6:	041b      	lsls	r3, r3, #16
 80077f8:	461a      	mov	r2, r3
 80077fa:	f897 318a 	ldrb.w	r3, [r7, #394]	; 0x18a
 80077fe:	021b      	lsls	r3, r3, #8
 8007800:	431a      	orrs	r2, r3
 8007802:	f897 3189 	ldrb.w	r3, [r7, #393]	; 0x189
 8007806:	4313      	orrs	r3, r2
 8007808:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800780c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8007810:	4611      	mov	r1, r2
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe f82f 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007818:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800781c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	f8c7 418c 	str.w	r4, [r7, #396]	; 0x18c
 8007828:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800782c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8007830:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007832:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007836:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800783a:	f5a2 720f 	sub.w	r2, r2, #572	; 0x23c
 800783e:	6812      	ldr	r2, [r2, #0]
 8007840:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007842:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 8007844:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007848:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007852:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8007856:	2300      	movs	r3, #0
 8007858:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
        linespace = space;
 800785c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8007860:	f8b7 2192 	ldrh.w	r2, [r7, #402]	; 0x192
 8007864:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007866:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 8007868:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800786c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
 8007876:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800787a:	2101      	movs	r1, #1
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe f95b 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8007882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007886:	4619      	mov	r1, r3
 8007888:	4620      	mov	r0, r4
 800788a:	f012 fa46 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800788e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007892:	4618      	mov	r0, r3
 8007894:	f7fc fae4 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 8007898:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800789c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80078a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078aa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f010 fb04 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 80078bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078c0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 80078ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078ce:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f010 faf2 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 80078e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078e4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f503 70fa 	add.w	r0, r3, #500	; 0x1f4
 80078ee:	2310      	movs	r3, #16
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	2346      	movs	r3, #70	; 0x46
 80078f4:	223a      	movs	r2, #58	; 0x3a
 80078f6:	218f      	movs	r1, #143	; 0x8f
 80078f8:	f7fc fb65 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 80078fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007900:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f503 7008 	add.w	r0, r3, #544	; 0x220
 800790a:	2310      	movs	r3, #16
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	2346      	movs	r3, #70	; 0x46
 8007910:	2200      	movs	r2, #0
 8007912:	2100      	movs	r1, #0
 8007914:	f7fc fb57 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007918:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800791c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f503 7408 	add.w	r4, r3, #544	; 0x220
 8007926:	2300      	movs	r3, #0
 8007928:	f887 319c 	strb.w	r3, [r7, #412]	; 0x19c
 800792c:	2300      	movs	r3, #0
 800792e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
 8007932:	2300      	movs	r3, #0
 8007934:	f887 319a 	strb.w	r3, [r7, #410]	; 0x19a
 8007938:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	461a      	mov	r2, r3
 8007940:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	431a      	orrs	r2, r3
 8007948:	f897 319a 	ldrb.w	r3, [r7, #410]	; 0x19a
 800794c:	4313      	orrs	r3, r2
 800794e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007952:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fd ff8c 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800795e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007962:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4619      	mov	r1, r3
 800796a:	4620      	mov	r0, r4
 800796c:	f7fe f854 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007970:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007974:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f503 7408 	add.w	r4, r3, #544	; 0x220
 800797e:	23ed      	movs	r3, #237	; 0xed
 8007980:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8007984:	2366      	movs	r3, #102	; 0x66
 8007986:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 800798a:	2363      	movs	r3, #99	; 0x63
 800798c:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
 8007990:	f897 319f 	ldrb.w	r3, [r7, #415]	; 0x19f
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	461a      	mov	r2, r3
 8007998:	f897 319e 	ldrb.w	r3, [r7, #414]	; 0x19e
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	431a      	orrs	r2, r3
 80079a0:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80079aa:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd ff60 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80079b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4619      	mov	r1, r3
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7fe f89a 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 80079c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80079d6:	2103      	movs	r1, #3
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe f89d 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 80079de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80079ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f010 fa61 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 8007a02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007a10:	2203      	movs	r2, #3
 8007a12:	2103      	movs	r1, #3
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fc fb2f 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 8007a1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a1e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8007a28:	2314      	movs	r3, #20
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	f00f ffc7 	bl	80179c4 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007a36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a3a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f503 7015 	add.w	r0, r3, #596	; 0x254
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2264      	movs	r2, #100	; 0x64
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	f010 f8c1 	bl	8017bd4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a52:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007a60:	23ff      	movs	r3, #255	; 0xff
 8007a62:	f887 31a2 	strb.w	r3, [r7, #418]	; 0x1a2
 8007a66:	23ff      	movs	r3, #255	; 0xff
 8007a68:	f887 31a1 	strb.w	r3, [r7, #417]	; 0x1a1
 8007a6c:	23ff      	movs	r3, #255	; 0xff
 8007a6e:	f887 31a0 	strb.w	r3, [r7, #416]	; 0x1a0
 8007a72:	f897 31a2 	ldrb.w	r3, [r7, #418]	; 0x1a2
 8007a76:	041b      	lsls	r3, r3, #16
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f897 31a1 	ldrb.w	r3, [r7, #417]	; 0x1a1
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	431a      	orrs	r2, r3
 8007a82:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007a8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd feef 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007a98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f00f ff1f 	bl	80178e8 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8007aaa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007aae:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007ab8:	2100      	movs	r1, #0
 8007aba:	4618      	mov	r0, r3
 8007abc:	f00f ff1a 	bl	80178f4 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 8007ac0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ac4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007ace:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ad2:	2109      	movs	r1, #9
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fe f82f 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8007ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f00f ff1d 	bl	8017920 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8007ae6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fc f9b8 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 8007af0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007af4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f503 7415 	add.w	r4, r3, #596	; 0x254
 8007afe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b02:	210d      	movs	r1, #13
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fd fec5 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007b0a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4620      	mov	r0, r4
 8007b12:	f010 f90c 	bl	8017d2e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 8007b16:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b1a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007b24:	2132      	movs	r1, #50	; 0x32
 8007b26:	4618      	mov	r0, r3
 8007b28:	f00f ff06 	bl	8017938 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007b2c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b30:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007b3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b3e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f010 f9ba 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 8007b50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b54:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007b5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4610      	mov	r0, r2
 8007b70:	f010 f9a8 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007b74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b78:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f503 7057 	add.w	r0, r3, #860	; 0x35c
 8007b82:	2311      	movs	r3, #17
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2327      	movs	r3, #39	; 0x27
 8007b88:	223a      	movs	r2, #58	; 0x3a
 8007b8a:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8007b8e:	f7fc fa1a 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007b92:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b96:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f503 7062 	add.w	r0, r3, #904	; 0x388
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	2326      	movs	r3, #38	; 0x26
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f7fc fa0c 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007bae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bb2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 31a5 	strb.w	r3, [r7, #421]	; 0x1a5
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f887 31a4 	strb.w	r3, [r7, #420]	; 0x1a4
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
 8007bce:	f897 31a5 	ldrb.w	r3, [r7, #421]	; 0x1a5
 8007bd2:	041b      	lsls	r3, r3, #16
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 8007be2:	4313      	orrs	r3, r2
 8007be4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007be8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fd fe41 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007bf4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007bf8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7fd ff09 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007c06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c0a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f503 7462 	add.w	r4, r3, #904	; 0x388
 8007c14:	23ed      	movs	r3, #237	; 0xed
 8007c16:	f887 31a8 	strb.w	r3, [r7, #424]	; 0x1a8
 8007c1a:	2366      	movs	r3, #102	; 0x66
 8007c1c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
 8007c20:	2363      	movs	r3, #99	; 0x63
 8007c22:	f887 31a6 	strb.w	r3, [r7, #422]	; 0x1a6
 8007c26:	f897 31a8 	ldrb.w	r3, [r7, #424]	; 0x1a8
 8007c2a:	041b      	lsls	r3, r3, #16
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f897 31a7 	ldrb.w	r3, [r7, #423]	; 0x1a7
 8007c32:	021b      	lsls	r3, r3, #8
 8007c34:	431a      	orrs	r2, r3
 8007c36:	f897 31a6 	ldrb.w	r3, [r7, #422]	; 0x1a6
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fe15 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007c4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4619      	mov	r1, r3
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7fd ff4f 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007c5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007c6c:	2103      	movs	r1, #3
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd ff52 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007c74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c78:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007c82:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c86:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f010 f916 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007c98:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007c9c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	2104      	movs	r1, #4
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fc f9e4 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007cb0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cb4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8007cbe:	23ff      	movs	r3, #255	; 0xff
 8007cc0:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
 8007cc4:	23ff      	movs	r3, #255	; 0xff
 8007cc6:	f887 31aa 	strb.w	r3, [r7, #426]	; 0x1aa
 8007cca:	23ff      	movs	r3, #255	; 0xff
 8007ccc:	f887 31a9 	strb.w	r3, [r7, #425]	; 0x1a9
 8007cd0:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	f897 31a9 	ldrb.w	r3, [r7, #425]	; 0x1a9
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007cea:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd fdc0 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007cf6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007cfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8c7 41ac 	str.w	r4, [r7, #428]	; 0x1ac
 8007d06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d0a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007d0e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007d10:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8007d14:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007d18:	f5a2 7210 	sub.w	r2, r2, #576	; 0x240
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8007d20:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007d22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d26:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007d30:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8007d34:	2300      	movs	r3, #0
 8007d36:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
        linespace = space;
 8007d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8007d3e:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 8007d42:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8007d44:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007d46:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d4a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8007d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fd feec 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8007d60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d64:	4619      	mov	r1, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f011 ffd7 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fc f875 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007d76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d7a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f503 7257 	add.w	r2, r3, #860	; 0x35c
 8007d84:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d88:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8007d92:	4619      	mov	r1, r3
 8007d94:	4610      	mov	r0, r2
 8007d96:	f010 f895 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007d9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007d9e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007da8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f010 f883 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007dbe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dc2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007dcc:	2219      	movs	r2, #25
 8007dce:	2108      	movs	r1, #8
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7fc f951 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007dd6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007dda:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f503 747e 	add.w	r4, r3, #1016	; 0x3f8
 8007de4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007de8:	2104      	movs	r1, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fd fd52 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007df0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007df4:	2105      	movs	r1, #5
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd fd4c 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007dfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e00:	210b      	movs	r1, #11
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fd fd46 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007e08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e0c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007e10:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007e14:	4620      	mov	r0, r4
 8007e16:	f010 fd31 	bl	801887c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007e1a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e1e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f503 707e 	add.w	r0, r3, #1016	; 0x3f8
 8007e28:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	2300      	movs	r3, #0
 8007e34:	2209      	movs	r2, #9
 8007e36:	2102      	movs	r1, #2
 8007e38:	f010 fb94 	bl	8018564 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007e3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e40:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007e4a:	2264      	movs	r2, #100	; 0x64
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f010 fafd 	bl	801844e <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007e54:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e58:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007e62:	2132      	movs	r1, #50	; 0x32
 8007e64:	4618      	mov	r0, r3
 8007e66:	f010 fa7e 	bl	8018366 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007e6a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e6e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f503 727e 	add.w	r2, r3, #1016	; 0x3f8
 8007e78:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e7c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fe fe6a 	bl	8006b62 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007e8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007e92:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007e9c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ea0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f010 f809 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007eb2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007eb6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007ec0:	2217      	movs	r2, #23
 8007ec2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fc f8d6 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007ecc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ed0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f203 44f4 	addw	r4, r3, #1268	; 0x4f4
 8007eda:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007ede:	210a      	movs	r1, #10
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fd fcd7 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007ee6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007eea:	2108      	movs	r1, #8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fd fcd1 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8007ef2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8007ef6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007efa:	4619      	mov	r1, r3
 8007efc:	4620      	mov	r0, r4
 8007efe:	f7fe fe3f 	bl	8006b80 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007f02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 8007f10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f14:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7fd fe7f 	bl	8005c24 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007f26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f2a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8007f34:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f38:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f00f ffbd 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007f4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f4e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8007f58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f5c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	33f8      	adds	r3, #248	; 0xf8
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f00f ffac 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007f6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f70:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f203 502c 	addw	r0, r3, #1324	; 0x52c
 8007f7a:	2343      	movs	r3, #67	; 0x43
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007f82:	2217      	movs	r2, #23
 8007f84:	2105      	movs	r1, #5
 8007f86:	f7fc f81e 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007f8a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007f8e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f503 60ab 	add.w	r0, r3, #1368	; 0x558
 8007f98:	233f      	movs	r3, #63	; 0x3f
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	f7fc f80f 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007fa8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007fac:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 8007fb6:	2343      	movs	r3, #67	; 0x43
 8007fb8:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
 8007fbc:	2365      	movs	r3, #101	; 0x65
 8007fbe:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
 8007fc2:	238b      	movs	r3, #139	; 0x8b
 8007fc4:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
 8007fc8:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f897 31ba 	ldrb.w	r3, [r7, #442]	; 0x1ba
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	f897 31b9 	ldrb.w	r3, [r7, #441]	; 0x1b9
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8007fe2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007fe6:	4611      	mov	r1, r2
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fd fc44 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8007fee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7fd fd0c 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008000:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008004:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f503 64ab 	add.w	r4, r3, #1368	; 0x558
 800800e:	2300      	movs	r3, #0
 8008010:	f887 31be 	strb.w	r3, [r7, #446]	; 0x1be
 8008014:	2300      	movs	r3, #0
 8008016:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd
 800801a:	2300      	movs	r3, #0
 800801c:	f887 31bc 	strb.w	r3, [r7, #444]	; 0x1bc
 8008020:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	461a      	mov	r2, r3
 8008028:	f897 31bd 	ldrb.w	r3, [r7, #445]	; 0x1bd
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	431a      	orrs	r2, r3
 8008030:	f897 31bc 	ldrb.w	r3, [r7, #444]	; 0x1bc
 8008034:	4313      	orrs	r3, r2
 8008036:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800803a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800803e:	4611      	mov	r1, r2
 8008040:	4618      	mov	r0, r3
 8008042:	f7fd fc18 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008046:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800804a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4619      	mov	r1, r3
 8008052:	4620      	mov	r0, r4
 8008054:	f7fd fd52 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 8008058:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800805c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 8008066:	2102      	movs	r1, #2
 8008068:	4618      	mov	r0, r3
 800806a:	f7fd fd55 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 800806e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008072:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f203 522c 	addw	r2, r3, #1324	; 0x52c
 800807c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008080:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f503 63ab 	add.w	r3, r3, #1368	; 0x558
 800808a:	4619      	mov	r1, r3
 800808c:	4610      	mov	r0, r2
 800808e:	f00f ff19 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8008092:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008096:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80080a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f203 532c 	addw	r3, r3, #1324	; 0x52c
 80080ae:	4619      	mov	r1, r3
 80080b0:	4610      	mov	r0, r2
 80080b2:	f00f ff07 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 80080b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080ba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f203 508c 	addw	r0, r3, #1420	; 0x58c
 80080c4:	236d      	movs	r3, #109	; 0x6d
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80080cc:	2208      	movs	r2, #8
 80080ce:	210a      	movs	r1, #10
 80080d0:	f7fb ff79 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 80080d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f503 60b7 	add.w	r0, r3, #1464	; 0x5b8
 80080e2:	236d      	movs	r3, #109	; 0x6d
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	f7fb ff6a 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80080f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80080f6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8008100:	234e      	movs	r3, #78	; 0x4e
 8008102:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
 8008106:	2389      	movs	r3, #137	; 0x89
 8008108:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 800810c:	23ae      	movs	r3, #174	; 0xae
 800810e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
 8008112:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	461a      	mov	r2, r3
 800811a:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	431a      	orrs	r2, r3
 8008122:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8008126:	4313      	orrs	r3, r2
 8008128:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f7fd fb9f 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008138:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800813c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4619      	mov	r1, r3
 8008144:	4620      	mov	r0, r4
 8008146:	f7fd fc67 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800814a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800814e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f503 64b7 	add.w	r4, r3, #1464	; 0x5b8
 8008158:	23ed      	movs	r3, #237	; 0xed
 800815a:	f887 31c4 	strb.w	r3, [r7, #452]	; 0x1c4
 800815e:	2366      	movs	r3, #102	; 0x66
 8008160:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8008164:	2363      	movs	r3, #99	; 0x63
 8008166:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
 800816a:	f897 31c4 	ldrb.w	r3, [r7, #452]	; 0x1c4
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	461a      	mov	r2, r3
 8008172:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	431a      	orrs	r2, r3
 800817a:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 800817e:	4313      	orrs	r3, r2
 8008180:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008184:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fd fb73 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008190:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008194:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4620      	mov	r0, r4
 800819e:	f7fd fcad 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 80081a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081a6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80081b0:	2105      	movs	r1, #5
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fd fcb0 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80081b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 80081c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 80081d4:	4619      	mov	r1, r3
 80081d6:	4610      	mov	r0, r2
 80081d8:	f00f fe74 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 80081dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f203 50ec 	addw	r0, r3, #1516	; 0x5ec
 80081ea:	2364      	movs	r3, #100	; 0x64
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80081f2:	2204      	movs	r2, #4
 80081f4:	2105      	movs	r1, #5
 80081f6:	f7fb fee6 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 80081fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80081fe:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f503 60c3 	add.w	r0, r3, #1560	; 0x618
 8008208:	2364      	movs	r3, #100	; 0x64
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8008210:	2200      	movs	r2, #0
 8008212:	2100      	movs	r1, #0
 8008214:	f7fb fed7 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008218:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800821c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 8008226:	2343      	movs	r3, #67	; 0x43
 8008228:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 800822c:	2365      	movs	r3, #101	; 0x65
 800822e:	f887 31c6 	strb.w	r3, [r7, #454]	; 0x1c6
 8008232:	238b      	movs	r3, #139	; 0x8b
 8008234:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
 8008238:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	461a      	mov	r2, r3
 8008240:	f897 31c6 	ldrb.w	r3, [r7, #454]	; 0x1c6
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	431a      	orrs	r2, r3
 8008248:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 800824c:	4313      	orrs	r3, r2
 800824e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008252:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fb0c 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800825e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008262:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	4620      	mov	r0, r4
 800826c:	f7fd fbd4 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008270:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008274:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f503 64c3 	add.w	r4, r3, #1560	; 0x618
 800827e:	2300      	movs	r3, #0
 8008280:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 8008284:	2300      	movs	r3, #0
 8008286:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 800828a:	2300      	movs	r3, #0
 800828c:	f887 31c8 	strb.w	r3, [r7, #456]	; 0x1c8
 8008290:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 8008294:	041b      	lsls	r3, r3, #16
 8008296:	461a      	mov	r2, r3
 8008298:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	431a      	orrs	r2, r3
 80082a0:	f897 31c8 	ldrb.w	r3, [r7, #456]	; 0x1c8
 80082a4:	4313      	orrs	r3, r2
 80082a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80082aa:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fae0 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80082b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4619      	mov	r1, r3
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7fd fc1a 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 80082c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082cc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80082d6:	2102      	movs	r1, #2
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fd fc1d 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80082de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 80082ec:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80082f0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f503 63c3 	add.w	r3, r3, #1560	; 0x618
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f00f fde1 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 8008302:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008306:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f203 604c 	addw	r0, r3, #1612	; 0x64c
 8008310:	2314      	movs	r3, #20
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	2363      	movs	r3, #99	; 0x63
 8008316:	2200      	movs	r2, #0
 8008318:	21b0      	movs	r1, #176	; 0xb0
 800831a:	f7fb fe54 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 800831e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008322:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f503 60cf 	add.w	r0, r3, #1656	; 0x678
 800832c:	2311      	movs	r3, #17
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	2363      	movs	r3, #99	; 0x63
 8008332:	2203      	movs	r2, #3
 8008334:	2100      	movs	r1, #0
 8008336:	f7fb fe46 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800833a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800833e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 8008348:	2300      	movs	r3, #0
 800834a:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 800834e:	2300      	movs	r3, #0
 8008350:	f887 31cc 	strb.w	r3, [r7, #460]	; 0x1cc
 8008354:	2300      	movs	r3, #0
 8008356:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 800835a:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 800835e:	041b      	lsls	r3, r3, #16
 8008360:	461a      	mov	r2, r3
 8008362:	f897 31cc 	ldrb.w	r3, [r7, #460]	; 0x1cc
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	431a      	orrs	r2, r3
 800836a:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 800836e:	4313      	orrs	r3, r2
 8008370:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008374:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd fa7b 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008380:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008384:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4619      	mov	r1, r3
 800838c:	4620      	mov	r0, r4
 800838e:	f7fd fb43 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008392:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008396:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f503 64cf 	add.w	r4, r3, #1656	; 0x678
 80083a0:	23ed      	movs	r3, #237	; 0xed
 80083a2:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
 80083a6:	2366      	movs	r3, #102	; 0x66
 80083a8:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80083ac:	2363      	movs	r3, #99	; 0x63
 80083ae:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 80083b2:	f897 31d0 	ldrb.w	r3, [r7, #464]	; 0x1d0
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	461a      	mov	r2, r3
 80083ba:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	431a      	orrs	r2, r3
 80083c2:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80083cc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fd fa4f 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80083d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083dc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4619      	mov	r1, r3
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7fd fb89 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80083ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80083ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 80083f8:	2103      	movs	r1, #3
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd fb8c 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 8008400:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008404:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 800840e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008412:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f00f fd50 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 8008424:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008428:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 8008432:	2205      	movs	r2, #5
 8008434:	2107      	movs	r1, #7
 8008436:	4618      	mov	r0, r3
 8008438:	f7fb fe1e 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800843c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008440:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 800844a:	23ff      	movs	r3, #255	; 0xff
 800844c:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 8008450:	23ff      	movs	r3, #255	; 0xff
 8008452:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
 8008456:	23ff      	movs	r3, #255	; 0xff
 8008458:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
 800845c:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	461a      	mov	r2, r3
 8008464:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	431a      	orrs	r2, r3
 800846c:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8008470:	4313      	orrs	r3, r2
 8008472:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800847a:	4611      	mov	r1, r2
 800847c:	4618      	mov	r0, r3
 800847e:	f7fd f9fa 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008482:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008486:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
 8008492:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008496:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800849a:	601a      	str	r2, [r3, #0]
        this->color = color;
 800849c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80084a0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80084a4:	f5a2 7211 	sub.w	r2, r2, #580	; 0x244
 80084a8:	6812      	ldr	r2, [r2, #0]
 80084aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80084ac:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 80084ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80084b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 80084bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80084c0:	2300      	movs	r3, #0
 80084c2:	f8a7 31da 	strh.w	r3, [r7, #474]	; 0x1da
        linespace = space;
 80084c6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80084ca:	f8b7 21da 	ldrh.w	r2, [r7, #474]	; 0x1da
 80084ce:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 80084d0:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 80084d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80084d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f203 64ac 	addw	r4, r3, #1708	; 0x6ac
 80084e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084e4:	2102      	movs	r1, #2
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fd fb26 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 80084ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084f0:	4619      	mov	r1, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f011 fc11 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80084f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7fb fcaf 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8008502:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008506:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f203 624c 	addw	r2, r3, #1612	; 0x64c
 8008510:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008514:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f203 63ac 	addw	r3, r3, #1708	; 0x6ac
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f00f fccf 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 8008526:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800852a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008534:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008538:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f203 634c 	addw	r3, r3, #1612	; 0x64c
 8008542:	4619      	mov	r1, r3
 8008544:	4610      	mov	r0, r2
 8008546:	f00f fcbd 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 800854a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800854e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f503 60dd 	add.w	r0, r3, #1768	; 0x6e8
 8008558:	2362      	movs	r3, #98	; 0x62
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2372      	movs	r3, #114	; 0x72
 800855e:	2200      	movs	r2, #0
 8008560:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008564:	f7fb fd2f 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 8008568:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800856c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f203 7014 	addw	r0, r3, #1812	; 0x714
 8008576:	2360      	movs	r3, #96	; 0x60
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2370      	movs	r3, #112	; 0x70
 800857c:	2202      	movs	r2, #2
 800857e:	2102      	movs	r1, #2
 8008580:	f7fb fd21 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008584:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008588:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f203 7414 	addw	r4, r3, #1812	; 0x714
 8008592:	23ed      	movs	r3, #237	; 0xed
 8008594:	f887 31e3 	strb.w	r3, [r7, #483]	; 0x1e3
 8008598:	2366      	movs	r3, #102	; 0x66
 800859a:	f887 31e2 	strb.w	r3, [r7, #482]	; 0x1e2
 800859e:	2363      	movs	r3, #99	; 0x63
 80085a0:	f887 31e1 	strb.w	r3, [r7, #481]	; 0x1e1
 80085a4:	f897 31e3 	ldrb.w	r3, [r7, #483]	; 0x1e3
 80085a8:	041b      	lsls	r3, r3, #16
 80085aa:	461a      	mov	r2, r3
 80085ac:	f897 31e2 	ldrb.w	r3, [r7, #482]	; 0x1e2
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	431a      	orrs	r2, r3
 80085b4:	f897 31e1 	ldrb.w	r3, [r7, #481]	; 0x1e1
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80085be:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80085c2:	4611      	mov	r1, r2
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd f956 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80085ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80085ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4619      	mov	r1, r3
 80085d6:	4620      	mov	r0, r4
 80085d8:	f7fd fa1e 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80085dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80085e0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f203 7414 	addw	r4, r3, #1812	; 0x714
 80085ea:	2300      	movs	r3, #0
 80085ec:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 31e5 	strb.w	r3, [r7, #485]	; 0x1e5
 80085f6:	2300      	movs	r3, #0
 80085f8:	f887 31e4 	strb.w	r3, [r7, #484]	; 0x1e4
 80085fc:	f897 31e6 	ldrb.w	r3, [r7, #486]	; 0x1e6
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	461a      	mov	r2, r3
 8008604:	f897 31e5 	ldrb.w	r3, [r7, #485]	; 0x1e5
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	431a      	orrs	r2, r3
 800860c:	f897 31e4 	ldrb.w	r3, [r7, #484]	; 0x1e4
 8008610:	4313      	orrs	r3, r2
 8008612:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800861a:	4611      	mov	r1, r2
 800861c:	4618      	mov	r0, r3
 800861e:	f7fd f92a 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008622:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008626:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4619      	mov	r1, r3
 800862e:	4620      	mov	r0, r4
 8008630:	f7fd fa64 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 8008634:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008638:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8008642:	2103      	movs	r1, #3
 8008644:	4618      	mov	r0, r3
 8008646:	f7fd fa67 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 800864a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800864e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008658:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800865c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f203 7314 	addw	r3, r3, #1812	; 0x714
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f00f fc2b 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 800866e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008672:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f503 60e9 	add.w	r0, r3, #1864	; 0x748
 800867c:	2350      	movs	r3, #80	; 0x50
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2354      	movs	r3, #84	; 0x54
 8008682:	220a      	movs	r2, #10
 8008684:	2110      	movs	r1, #16
 8008686:	f7fb fc9e 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800868a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800868e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 8008698:	2300      	movs	r3, #0
 800869a:	f887 31e9 	strb.w	r3, [r7, #489]	; 0x1e9
 800869e:	2300      	movs	r3, #0
 80086a0:	f887 31e8 	strb.w	r3, [r7, #488]	; 0x1e8
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
 80086aa:	f897 31e9 	ldrb.w	r3, [r7, #489]	; 0x1e9
 80086ae:	041b      	lsls	r3, r3, #16
 80086b0:	461a      	mov	r2, r3
 80086b2:	f897 31e8 	ldrb.w	r3, [r7, #488]	; 0x1e8
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	431a      	orrs	r2, r3
 80086ba:	f897 31e7 	ldrb.w	r3, [r7, #487]	; 0x1e7
 80086be:	4313      	orrs	r3, r2
 80086c0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80086c4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7fd f8d3 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80086d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80086d4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4619      	mov	r1, r3
 80086dc:	4620      	mov	r0, r4
 80086de:	f7fd f99b 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80086e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80086e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f503 64e9 	add.w	r4, r3, #1864	; 0x748
 80086f0:	2343      	movs	r3, #67	; 0x43
 80086f2:	f887 31ec 	strb.w	r3, [r7, #492]	; 0x1ec
 80086f6:	2365      	movs	r3, #101	; 0x65
 80086f8:	f887 31eb 	strb.w	r3, [r7, #491]	; 0x1eb
 80086fc:	238b      	movs	r3, #139	; 0x8b
 80086fe:	f887 31ea 	strb.w	r3, [r7, #490]	; 0x1ea
 8008702:	f897 31ec 	ldrb.w	r3, [r7, #492]	; 0x1ec
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	461a      	mov	r2, r3
 800870a:	f897 31eb 	ldrb.w	r3, [r7, #491]	; 0x1eb
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	431a      	orrs	r2, r3
 8008712:	f897 31ea 	ldrb.w	r3, [r7, #490]	; 0x1ea
 8008716:	4313      	orrs	r3, r2
 8008718:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800871c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd f8a7 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008728:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800872c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	4620      	mov	r0, r4
 8008736:	f7fd f9e1 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 800873a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800873e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 8008748:	2103      	movs	r1, #3
 800874a:	4618      	mov	r0, r3
 800874c:	f7fd f9e4 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 8008750:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008754:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 800875e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008762:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f503 63e9 	add.w	r3, r3, #1864	; 0x748
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f00f fba8 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 8008774:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008778:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 8008782:	220d      	movs	r2, #13
 8008784:	2124      	movs	r1, #36	; 0x24
 8008786:	4618      	mov	r0, r3
 8008788:	f7fb fc76 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800878c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008790:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 800879a:	23ff      	movs	r3, #255	; 0xff
 800879c:	f887 31ef 	strb.w	r3, [r7, #495]	; 0x1ef
 80087a0:	23ff      	movs	r3, #255	; 0xff
 80087a2:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
 80087a6:	23ff      	movs	r3, #255	; 0xff
 80087a8:	f887 31ed 	strb.w	r3, [r7, #493]	; 0x1ed
 80087ac:	f897 31ef 	ldrb.w	r3, [r7, #495]	; 0x1ef
 80087b0:	041b      	lsls	r3, r3, #16
 80087b2:	461a      	mov	r2, r3
 80087b4:	f897 31ee 	ldrb.w	r3, [r7, #494]	; 0x1ee
 80087b8:	021b      	lsls	r3, r3, #8
 80087ba:	431a      	orrs	r2, r3
 80087bc:	f897 31ed 	ldrb.w	r3, [r7, #493]	; 0x1ed
 80087c0:	4313      	orrs	r3, r2
 80087c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80087c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80087ca:	4611      	mov	r1, r2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd f852 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80087d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80087d6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	461a      	mov	r2, r3
 80087de:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80087e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80087e6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80087ea:	601a      	str	r2, [r3, #0]
        this->color = color;
 80087ec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80087f0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80087f4:	f5a2 7212 	sub.w	r2, r2, #584	; 0x248
 80087f8:	6812      	ldr	r2, [r2, #0]
 80087fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80087fc:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 80087fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008802:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800880c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8008810:	2300      	movs	r3, #0
 8008812:	f8a7 31f6 	strh.w	r3, [r7, #502]	; 0x1f6
        linespace = space;
 8008816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800881a:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	; 0x1f6
 800881e:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008820:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 8008822:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008826:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f203 747c 	addw	r4, r3, #1916	; 0x77c
 8008830:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008834:	2105      	movs	r1, #5
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd f97e 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 800883c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8008840:	4619      	mov	r1, r3
 8008842:	4620      	mov	r0, r4
 8008844:	f011 fa69 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008848:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800884c:	4618      	mov	r0, r3
 800884e:	f7fb fb07 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 8008852:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008856:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008860:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008864:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f00f fb27 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 8008876:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800887a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008884:	220d      	movs	r2, #13
 8008886:	2124      	movs	r1, #36	; 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f7fb fbf5 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 800888e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008892:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe f94f 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80088a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80088a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 80088b2:	23ff      	movs	r3, #255	; 0xff
 80088b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80088b8:	23ff      	movs	r3, #255	; 0xff
 80088ba:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
 80088be:	23ff      	movs	r3, #255	; 0xff
 80088c0:	f887 31fd 	strb.w	r3, [r7, #509]	; 0x1fd
 80088c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80088c8:	041b      	lsls	r3, r3, #16
 80088ca:	461a      	mov	r2, r3
 80088cc:	f897 31fe 	ldrb.w	r3, [r7, #510]	; 0x1fe
 80088d0:	021b      	lsls	r3, r3, #8
 80088d2:	431a      	orrs	r2, r3
 80088d4:	f897 31fd 	ldrb.w	r3, [r7, #509]	; 0x1fd
 80088d8:	4313      	orrs	r3, r2
 80088da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80088de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fc ffc6 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 80088ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80088ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80088fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80088fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008902:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008904:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008908:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800890c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008914:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 8008916:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800891a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008924:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8008928:	2300      	movs	r3, #0
 800892a:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
        linespace = space;
 800892e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008932:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 8008936:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008938:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 800893a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800893e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f503 64f7 	add.w	r4, r3, #1976	; 0x7b8
 8008948:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800894c:	210a      	movs	r1, #10
 800894e:	4618      	mov	r0, r3
 8008950:	f7fd f8f2 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8008954:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008958:	4619      	mov	r1, r3
 800895a:	4620      	mov	r0, r4
 800895c:	f011 f9dd 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008960:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008964:	4618      	mov	r0, r3
 8008966:	f7fb fa7b 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 800896a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800896e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f503 62dd 	add.w	r2, r3, #1768	; 0x6e8
 8008978:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800897c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8008986:	4619      	mov	r1, r3
 8008988:	4610      	mov	r0, r2
 800898a:	f00f fa9b 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 800898e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008992:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 800899c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089a0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f503 63dd 	add.w	r3, r3, #1768	; 0x6e8
 80089aa:	4619      	mov	r1, r3
 80089ac:	4610      	mov	r0, r2
 80089ae:	f00f fa89 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 80089b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089b6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f203 70f4 	addw	r0, r3, #2036	; 0x7f4
 80089c0:	2362      	movs	r3, #98	; 0x62
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2375      	movs	r3, #117	; 0x75
 80089c6:	2200      	movs	r2, #0
 80089c8:	212a      	movs	r1, #42	; 0x2a
 80089ca:	f7fb fafc 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 80089ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089d2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f503 6002 	add.w	r0, r3, #2080	; 0x820
 80089dc:	2360      	movs	r3, #96	; 0x60
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	2373      	movs	r3, #115	; 0x73
 80089e2:	2202      	movs	r2, #2
 80089e4:	2102      	movs	r1, #2
 80089e6:	f7fb faee 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80089ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80089ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 80089f8:	23ed      	movs	r3, #237	; 0xed
 80089fa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80089fe:	2366      	movs	r3, #102	; 0x66
 8008a00:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
 8008a04:	2363      	movs	r3, #99	; 0x63
 8008a06:	f887 320d 	strb.w	r3, [r7, #525]	; 0x20d
 8008a0a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008a0e:	041b      	lsls	r3, r3, #16
 8008a10:	461a      	mov	r2, r3
 8008a12:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	f897 320d 	ldrb.w	r3, [r7, #525]	; 0x20d
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fc ff23 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008a30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f7fc ffeb 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008a42:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a46:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 8008a50:	2300      	movs	r3, #0
 8008a52:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 8008a56:	2300      	movs	r3, #0
 8008a58:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8008a62:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8008a66:	041b      	lsls	r3, r3, #16
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8008a6e:	021b      	lsls	r3, r3, #8
 8008a70:	431a      	orrs	r2, r3
 8008a72:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008a7c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fc fef7 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008a88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a8c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4619      	mov	r1, r3
 8008a94:	4620      	mov	r0, r4
 8008a96:	f7fd f831 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 8008a9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008a9e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008aa8:	2103      	movs	r1, #3
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fd f834 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008ab0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ab4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008abe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ac2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8008acc:	4619      	mov	r1, r3
 8008ace:	4610      	mov	r0, r2
 8008ad0:	f00f f9f8 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008ad4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ad8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f603 0054 	addw	r0, r3, #2132	; 0x854
 8008ae2:	2350      	movs	r3, #80	; 0x50
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2359      	movs	r3, #89	; 0x59
 8008ae8:	220a      	movs	r2, #10
 8008aea:	2110      	movs	r1, #16
 8008aec:	f7fb fa6b 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008af0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008af4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8008afe:	2300      	movs	r3, #0
 8008b00:	f887 3215 	strb.w	r3, [r7, #533]	; 0x215
 8008b04:	2300      	movs	r3, #0
 8008b06:	f887 3214 	strb.w	r3, [r7, #532]	; 0x214
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
 8008b10:	f897 3215 	ldrb.w	r3, [r7, #533]	; 0x215
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	461a      	mov	r2, r3
 8008b18:	f897 3214 	ldrb.w	r3, [r7, #532]	; 0x214
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b2a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fc fea0 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008b36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b3a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4619      	mov	r1, r3
 8008b42:	4620      	mov	r0, r4
 8008b44:	f7fc ff68 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008b48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b4c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f603 0454 	addw	r4, r3, #2132	; 0x854
 8008b56:	2343      	movs	r3, #67	; 0x43
 8008b58:	f887 3218 	strb.w	r3, [r7, #536]	; 0x218
 8008b5c:	2365      	movs	r3, #101	; 0x65
 8008b5e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008b62:	238b      	movs	r3, #139	; 0x8b
 8008b64:	f887 3216 	strb.w	r3, [r7, #534]	; 0x216
 8008b68:	f897 3218 	ldrb.w	r3, [r7, #536]	; 0x218
 8008b6c:	041b      	lsls	r3, r3, #16
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	431a      	orrs	r2, r3
 8008b78:	f897 3216 	ldrb.w	r3, [r7, #534]	; 0x216
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008b82:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fc fe74 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008b8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008b92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7fc ffae 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008ba0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ba4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008bae:	2103      	movs	r1, #3
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fc ffb1 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008bb6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bba:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008bc4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bc8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f603 0354 	addw	r3, r3, #2132	; 0x854
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f00f f975 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008bda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bde:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008be8:	220d      	movs	r2, #13
 8008bea:	211d      	movs	r1, #29
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fb fa43 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008bf2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008bf6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8008c00:	23ff      	movs	r3, #255	; 0xff
 8008c02:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
 8008c06:	23ff      	movs	r3, #255	; 0xff
 8008c08:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
 8008c0c:	23ff      	movs	r3, #255	; 0xff
 8008c0e:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219
 8008c12:	f897 321b 	ldrb.w	r3, [r7, #539]	; 0x21b
 8008c16:	041b      	lsls	r3, r3, #16
 8008c18:	461a      	mov	r2, r3
 8008c1a:	f897 321a 	ldrb.w	r3, [r7, #538]	; 0x21a
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	431a      	orrs	r2, r3
 8008c22:	f897 3219 	ldrb.w	r3, [r7, #537]	; 0x219
 8008c26:	4313      	orrs	r3, r2
 8008c28:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008c2c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8008c30:	4611      	mov	r1, r2
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fc fe1f 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008c38:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c3c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	f8c7 421c 	str.w	r4, [r7, #540]	; 0x21c
 8008c48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c4c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8008c50:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008c52:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8008c56:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008c5a:	f5a2 7214 	sub.w	r2, r2, #592	; 0x250
 8008c5e:	6812      	ldr	r2, [r2, #0]
 8008c60:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008c62:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008c64:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c68:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008c72:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8008c76:	2300      	movs	r3, #0
 8008c78:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
        linespace = space;
 8008c7c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8008c80:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 8008c84:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008c86:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008c88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008c8c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f603 0488 	addw	r4, r3, #2184	; 0x888
 8008c96:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008c9a:	2106      	movs	r1, #6
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fc ff4b 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8008ca2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f011 f836 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008cae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fb f8d4 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008cb8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cbc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008cc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f00f f8f4 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008cdc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ce0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008cea:	220d      	movs	r2, #13
 8008cec:	211e      	movs	r1, #30
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fb f9c2 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008cf4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008cf8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008d02:	2100      	movs	r1, #0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fd ff1c 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008d0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d0e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 8008d18:	23ff      	movs	r3, #255	; 0xff
 8008d1a:	f887 322b 	strb.w	r3, [r7, #555]	; 0x22b
 8008d1e:	23ff      	movs	r3, #255	; 0xff
 8008d20:	f887 322a 	strb.w	r3, [r7, #554]	; 0x22a
 8008d24:	23ff      	movs	r3, #255	; 0xff
 8008d26:	f887 3229 	strb.w	r3, [r7, #553]	; 0x229
 8008d2a:	f897 322b 	ldrb.w	r3, [r7, #555]	; 0x22b
 8008d2e:	041b      	lsls	r3, r3, #16
 8008d30:	461a      	mov	r2, r3
 8008d32:	f897 322a 	ldrb.w	r3, [r7, #554]	; 0x22a
 8008d36:	021b      	lsls	r3, r3, #8
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	f897 3229 	ldrb.w	r3, [r7, #553]	; 0x229
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008d44:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fc fd93 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008d50:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d54:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f8c7 422c 	str.w	r4, [r7, #556]	; 0x22c
 8008d60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d64:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8008d68:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008d6a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8008d6e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008d72:	f5a2 7215 	sub.w	r2, r2, #596	; 0x254
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008d7a:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008d7c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008d80:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008d8a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
        linespace = space;
 8008d94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8008d98:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 8008d9c:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8008d9e:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008da0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008da4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f603 04c4 	addw	r4, r3, #2244	; 0x8c4
 8008dae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008db2:	210b      	movs	r1, #11
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fc febf 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8008dba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f010 ffaa 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008dc6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fb f848 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008dd0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008dd4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f203 72f4 	addw	r2, r3, #2036	; 0x7f4
 8008dde:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008de2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8008dec:	4619      	mov	r1, r3
 8008dee:	4610      	mov	r0, r2
 8008df0:	f00f f868 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008df4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008df8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f203 52ec 	addw	r2, r3, #1516	; 0x5ec
 8008e02:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e06:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 8008e10:	4619      	mov	r1, r3
 8008e12:	4610      	mov	r0, r2
 8008e14:	f00f f856 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008e18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e1c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f203 528c 	addw	r2, r3, #1420	; 0x58c
 8008e26:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e2a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f203 53ec 	addw	r3, r3, #1516	; 0x5ec
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f00f f844 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008e3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e40:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f503 6010 	add.w	r0, r3, #2304	; 0x900
 8008e4a:	2314      	movs	r3, #20
 8008e4c:	9300      	str	r3, [sp, #0]
 8008e4e:	2381      	movs	r3, #129	; 0x81
 8008e50:	2275      	movs	r2, #117	; 0x75
 8008e52:	2140      	movs	r1, #64	; 0x40
 8008e54:	f7fb f8b7 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8008e58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e5c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f603 102c 	addw	r0, r3, #2348	; 0x92c
 8008e66:	2311      	movs	r3, #17
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	2381      	movs	r3, #129	; 0x81
 8008e6c:	2203      	movs	r2, #3
 8008e6e:	2100      	movs	r1, #0
 8008e70:	f7fb f8a9 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008e74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008e78:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 8008e82:	2300      	movs	r3, #0
 8008e84:	f887 323d 	strb.w	r3, [r7, #573]	; 0x23d
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 323c 	strb.w	r3, [r7, #572]	; 0x23c
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
 8008e94:	f897 323d 	ldrb.w	r3, [r7, #573]	; 0x23d
 8008e98:	041b      	lsls	r3, r3, #16
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	f897 323c 	ldrb.w	r3, [r7, #572]	; 0x23c
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008eae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008eb2:	4611      	mov	r1, r2
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fc fcde 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008eba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ebe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f7fc fda6 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008ecc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008ed0:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f603 142c 	addw	r4, r3, #2348	; 0x92c
 8008eda:	23ed      	movs	r3, #237	; 0xed
 8008edc:	f887 3240 	strb.w	r3, [r7, #576]	; 0x240
 8008ee0:	2366      	movs	r3, #102	; 0x66
 8008ee2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008ee6:	2363      	movs	r3, #99	; 0x63
 8008ee8:	f887 323e 	strb.w	r3, [r7, #574]	; 0x23e
 8008eec:	f897 3240 	ldrb.w	r3, [r7, #576]	; 0x240
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	431a      	orrs	r2, r3
 8008efc:	f897 323e 	ldrb.w	r3, [r7, #574]	; 0x23e
 8008f00:	4313      	orrs	r3, r2
 8008f02:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008f06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fc fcb2 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008f12:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f7fc fdec 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008f24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f28:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008f32:	2103      	movs	r1, #3
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fc fdef 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008f3a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f3e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8008f48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f4c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f603 132c 	addw	r3, r3, #2348	; 0x92c
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f00e ffb3 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008f5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f62:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008f6c:	2205      	movs	r2, #5
 8008f6e:	2109      	movs	r1, #9
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fb f881 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008f76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008f7a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 8008f84:	23ff      	movs	r3, #255	; 0xff
 8008f86:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243
 8008f8a:	23ff      	movs	r3, #255	; 0xff
 8008f8c:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
 8008f90:	23ff      	movs	r3, #255	; 0xff
 8008f92:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
 8008f96:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8008f9a:	041b      	lsls	r3, r3, #16
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8008fa2:	021b      	lsls	r3, r3, #8
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8008fb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fc fc5d 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8008fbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f8c7 4244 	str.w	r4, [r7, #580]	; 0x244
 8008fcc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fd0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8008fd4:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008fd6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8008fda:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8008fde:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 8008fe2:	6812      	ldr	r2, [r2, #0]
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8008fe6:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 8008fe8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8008fec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8008ff6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f8a7 324a 	strh.w	r3, [r7, #586]	; 0x24a
        linespace = space;
 8009000:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009004:	f8b7 224a 	ldrh.w	r2, [r7, #586]	; 0x24a
 8009008:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 800900a:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 800900c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009010:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f503 6416 	add.w	r4, r3, #2400	; 0x960
 800901a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800901e:	2103      	movs	r1, #3
 8009020:	4618      	mov	r0, r3
 8009022:	f7fc fd89 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 8009026:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800902a:	4619      	mov	r1, r3
 800902c:	4620      	mov	r0, r4
 800902e:	f010 fe74 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009032:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009036:	4618      	mov	r0, r3
 8009038:	f7fa ff12 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 800903c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009040:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 800904a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800904e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f503 6316 	add.w	r3, r3, #2400	; 0x960
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f00e ff32 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 8009060:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009064:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800906e:	228c      	movs	r2, #140	; 0x8c
 8009070:	215c      	movs	r1, #92	; 0x5c
 8009072:	4618      	mov	r0, r3
 8009074:	f7fb f800 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009078:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800907c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f603 149c 	addw	r4, r3, #2460	; 0x99c
 8009086:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800908a:	2102      	movs	r1, #2
 800908c:	4618      	mov	r0, r3
 800908e:	f7fc fc01 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8009092:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8009096:	4619      	mov	r1, r3
 8009098:	4620      	mov	r0, r4
 800909a:	f011 f8b8 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 800909e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090a2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 80090ac:	228d      	movs	r2, #141	; 0x8d
 80090ae:	f240 1135 	movw	r1, #309	; 0x135
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fa ffe0 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80090b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090bc:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f603 14c8 	addw	r4, r3, #2504	; 0x9c8
 80090c6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090ca:	2102      	movs	r1, #2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fc fbe1 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 80090d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80090d6:	4619      	mov	r1, r3
 80090d8:	4620      	mov	r0, r4
 80090da:	f011 f898 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 80090de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090e2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80090ec:	228c      	movs	r2, #140	; 0x8c
 80090ee:	215c      	movs	r1, #92	; 0x5c
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fa ffc1 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80090f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80090fa:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f603 14f4 	addw	r4, r3, #2548	; 0x9f4
 8009104:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009108:	2103      	movs	r1, #3
 800910a:	4618      	mov	r0, r3
 800910c:	f7fc fbc2 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8009110:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8009114:	2102      	movs	r1, #2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc fbbc 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 800911c:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8009120:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8009124:	4619      	mov	r1, r3
 8009126:	4620      	mov	r0, r4
 8009128:	f010 fe2e 	bl	8019d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 800912c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009130:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f603 12f4 	addw	r2, r3, #2548	; 0x9f4
 800913a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800913e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f7fc fd6a 	bl	8005c24 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 8009150:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009154:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800915e:	228c      	movs	r2, #140	; 0x8c
 8009160:	f240 1135 	movw	r1, #309	; 0x135
 8009164:	4618      	mov	r0, r3
 8009166:	f7fa ff87 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 800916a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800916e:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f603 2428 	addw	r4, r3, #2600	; 0xa28
 8009178:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800917c:	2103      	movs	r1, #3
 800917e:	4618      	mov	r0, r3
 8009180:	f7fc fb88 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8009184:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009188:	2102      	movs	r1, #2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fc fb82 	bl	8005894 <_ZN8touchgfx6BitmapC1Et>
 8009190:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8009194:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009198:	4619      	mov	r1, r3
 800919a:	4620      	mov	r0, r4
 800919c:	f010 fdf4 	bl	8019d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80091a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091a4:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f603 2228 	addw	r2, r3, #2600	; 0xa28
 80091ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f603 23f8 	addw	r3, r3, #2808	; 0xaf8
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f7fc fd30 	bl	8005c24 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 80091c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f603 205c 	addw	r0, r3, #2652	; 0xa5c
 80091d2:	2314      	movs	r3, #20
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	2381      	movs	r3, #129	; 0x81
 80091d8:	2275      	movs	r2, #117	; 0x75
 80091da:	f240 111b 	movw	r1, #283	; 0x11b
 80091de:	f7fa fef2 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 80091e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80091e6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f603 2088 	addw	r0, r3, #2696	; 0xa88
 80091f0:	2311      	movs	r3, #17
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	2381      	movs	r3, #129	; 0x81
 80091f6:	2203      	movs	r2, #3
 80091f8:	2100      	movs	r1, #0
 80091fa:	f7fa fee4 	bl	8003fc6 <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80091fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009202:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 800920c:	2300      	movs	r3, #0
 800920e:	f887 3255 	strb.w	r3, [r7, #597]	; 0x255
 8009212:	2300      	movs	r3, #0
 8009214:	f887 3254 	strb.w	r3, [r7, #596]	; 0x254
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
 800921e:	f897 3255 	ldrb.w	r3, [r7, #597]	; 0x255
 8009222:	041b      	lsls	r3, r3, #16
 8009224:	461a      	mov	r2, r3
 8009226:	f897 3254 	ldrb.w	r3, [r7, #596]	; 0x254
 800922a:	021b      	lsls	r3, r3, #8
 800922c:	431a      	orrs	r2, r3
 800922e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8009232:	4313      	orrs	r3, r2
 8009234:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009238:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fc fb19 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8009244:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009248:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4619      	mov	r1, r3
 8009250:	4620      	mov	r0, r4
 8009252:	f7fc fbe1 	bl	8005a18 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8009256:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800925a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f603 2488 	addw	r4, r3, #2696	; 0xa88
 8009264:	23ed      	movs	r3, #237	; 0xed
 8009266:	f887 3258 	strb.w	r3, [r7, #600]	; 0x258
 800926a:	2366      	movs	r3, #102	; 0x66
 800926c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8009270:	2363      	movs	r3, #99	; 0x63
 8009272:	f887 3256 	strb.w	r3, [r7, #598]	; 0x256
 8009276:	f897 3258 	ldrb.w	r3, [r7, #600]	; 0x258
 800927a:	041b      	lsls	r3, r3, #16
 800927c:	461a      	mov	r2, r3
 800927e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	431a      	orrs	r2, r3
 8009286:	f897 3256 	ldrb.w	r3, [r7, #598]	; 0x256
 800928a:	4313      	orrs	r3, r2
 800928c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8009290:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fc faed 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 800929c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092a0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4619      	mov	r1, r3
 80092a8:	4620      	mov	r0, r4
 80092aa:	f7fc fc27 	bl	8005afc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 80092ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80092bc:	2103      	movs	r1, #3
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fc fc2a 	bl	8005b18 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 80092c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 80092d2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092d6:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f00e fdee 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 80092e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80092ec:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80092f6:	2205      	movs	r2, #5
 80092f8:	210f      	movs	r1, #15
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fa febc 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8009300:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009304:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 800930e:	23ff      	movs	r3, #255	; 0xff
 8009310:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
 8009314:	23ff      	movs	r3, #255	; 0xff
 8009316:	f887 325a 	strb.w	r3, [r7, #602]	; 0x25a
 800931a:	23ff      	movs	r3, #255	; 0xff
 800931c:	f887 3259 	strb.w	r3, [r7, #601]	; 0x259
 8009320:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8009324:	041b      	lsls	r3, r3, #16
 8009326:	461a      	mov	r2, r3
 8009328:	f897 325a 	ldrb.w	r3, [r7, #602]	; 0x25a
 800932c:	021b      	lsls	r3, r3, #8
 800932e:	431a      	orrs	r2, r3
 8009330:	f897 3259 	ldrb.w	r3, [r7, #601]	; 0x259
 8009334:	4313      	orrs	r3, r2
 8009336:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800933a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800933e:	4611      	mov	r1, r2
 8009340:	4618      	mov	r0, r3
 8009342:	f7fc fa98 	bl	8005876 <_ZN8touchgfx9colortypeC1Em>
 8009346:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800934a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	461a      	mov	r2, r3
 8009352:	f8c7 425c 	str.w	r4, [r7, #604]	; 0x25c
 8009356:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800935a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800935e:	601a      	str	r2, [r3, #0]
        this->color = color;
 8009360:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8009364:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8009368:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8009370:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 8009372:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009376:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 8009380:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8009384:	2300      	movs	r3, #0
 8009386:	f8a7 3262 	strh.w	r3, [r7, #610]	; 0x262
        linespace = space;
 800938a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800938e:	f8b7 2262 	ldrh.w	r2, [r7, #610]	; 0x262
 8009392:	869a      	strh	r2, [r3, #52]	; 0x34
    }
 8009394:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 8009396:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800939a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f603 24bc 	addw	r4, r3, #2748	; 0xabc
 80093a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80093a8:	2104      	movs	r1, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fc fbc4 	bl	8005b38 <_ZN8touchgfx9TypedTextC1Et>
 80093b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80093b4:	4619      	mov	r1, r3
 80093b6:	4620      	mov	r0, r4
 80093b8:	f010 fcaf 	bl	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80093bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fa fd4d 	bl	8003e60 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 80093c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093ca:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 80093d4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093d8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f603 23bc 	addw	r3, r3, #2748	; 0xabc
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f00e fd6d 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 80093ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093ee:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80093f8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3340      	adds	r3, #64	; 0x40
 8009400:	4619      	mov	r1, r3
 8009402:	4610      	mov	r0, r2
 8009404:	f7fc fad4 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 8009408:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800940c:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009416:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	336c      	adds	r3, #108	; 0x6c
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f7fc fac5 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 8009426:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800942a:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009434:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3398      	adds	r3, #152	; 0x98
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fc fab6 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 8009444:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009448:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009452:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f203 538c 	addw	r3, r3, #1420	; 0x58c
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fc faa6 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 8009464:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009468:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009472:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7fc fa96 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 8009484:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009488:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009492:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fc fa86 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 80094a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094a8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094b2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 80094bc:	4619      	mov	r1, r3
 80094be:	4610      	mov	r0, r2
 80094c0:	f7fc fa76 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 80094c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094c8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094d2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fc fa66 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 80094e4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094e8:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80094f2:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7fc fa56 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 8009504:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009508:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009512:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7fc fa46 	bl	80059b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8009524:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8009528:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4618      	mov	r0, r3
 8009530:	f507 771b 	add.w	r7, r7, #620	; 0x26c
 8009534:	46bd      	mov	sp, r7
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]

}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2b57      	cmp	r3, #87	; 0x57
 800955c:	d105      	bne.n	800956a <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3330      	adds	r3, #48	; 0x30
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
    }
    if(88 == key)
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	2b58      	cmp	r3, #88	; 0x58
 800956e:	d105      	bne.n	800957c <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	333c      	adds	r3, #60	; 0x3c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	4798      	blx	r3
    }
    if(89 == key)
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	2b59      	cmp	r3, #89	; 0x59
 8009580:	d105      	bne.n	800958e <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3334      	adds	r3, #52	; 0x34
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
    }
    if(90 == key)
 800958e:	78fb      	ldrb	r3, [r7, #3]
 8009590:	2b5a      	cmp	r3, #90	; 0x5a
 8009592:	d105      	bne.n	80095a0 <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3338      	adds	r3, #56	; 0x38
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	4798      	blx	r3
    }
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d106      	bne.n	80095cc <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3334      	adds	r3, #52	; 0x34
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 80095ca:	e019      	b.n	8009600 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d106      	bne.n	80095e6 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3338      	adds	r3, #56	; 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	4798      	blx	r3
}
 80095e4:	e00c      	b.n	8009600 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d106      	bne.n	8009600 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7fd fc6c 	bl	8006ed0 <_ZN12MainViewBase11applicationEv>
 80095f8:	4603      	mov	r3, r0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb f848 	bl	8004690 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	d106      	bne.n	800962e <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	332c      	adds	r3, #44	; 0x2c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	4798      	blx	r3
    }
}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4618      	mov	r0, r3
 8009644:	f013 fdda 	bl	801d1fc <_ZN8touchgfx6ScreenC1Ev>
 8009648:	4a05      	ldr	r2, [pc, #20]	; (8009660 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	601a      	str	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	0802d6c8 	.word	0x0802d6c8

08009664 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	4639      	mov	r1, r7
 8009670:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4618      	mov	r0, r3
 8009678:	f7fd f8fc 	bl	8006874 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800967c:	4a08      	ldr	r2, [pc, #32]	; (80096a0 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	605a      	str	r2, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3308      	adds	r3, #8
 800968c:	463a      	mov	r2, r7
 800968e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009692:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	0802d6b0 	.word	0x0802d6b0

080096a4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	0802d6fc 	.word	0x0802d6fc

080096c4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4639      	mov	r1, r7
 80096d0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff ffe4 	bl	80096a4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 80096dc:	4a08      	ldr	r2, [pc, #32]	; (8009700 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3308      	adds	r3, #8
 80096ec:	463a      	mov	r2, r7
 80096ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	0802d698 	.word	0x0802d698

08009704 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
    }
 800970c:	4a04      	ldr	r2, [pc, #16]	; (8009720 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	0802d6fc 	.word	0x0802d6fc

08009724 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
    }
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ffe9 	bl	8009704 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009732:	2104      	movs	r1, #4
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f021 fbb8 	bl	802aeaa <_ZdlPvj>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	4a05      	ldr	r2, [pc, #20]	; (8009764 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff ffd5 	bl	8009704 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4618      	mov	r0, r3
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	0802d698 	.word	0x0802d698

08009768 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ffe7 	bl	8009744 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8009776:	2110      	movs	r1, #16
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f021 fb96 	bl	802aeaa <_ZdlPvj>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	4a05      	ldr	r2, [pc, #20]	; (80097a8 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	f7fd f89b 	bl	80068d4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4618      	mov	r0, r3
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	0802d6b0 	.word	0x0802d6b0

080097ac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff ffe7 	bl	8009788 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80097ba:	2110      	movs	r1, #16
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f021 fb74 	bl	802aeaa <_ZdlPvj>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	4a0a      	ldr	r2, [pc, #40]	; (8009800 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	3358      	adds	r3, #88	; 0x58
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fd f8ba 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	332c      	adds	r3, #44	; 0x2c
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fd f8d7 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fd f8b1 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0802dc5c 	.word	0x0802dc5c

08009804 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7ff ffdd 	bl	80097cc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009812:	21b4      	movs	r1, #180	; 0xb4
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f021 fb48 	bl	802aeaa <_ZdlPvj>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	3708      	adds	r7, #8
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 8009824:	b580      	push	{r7, lr}
 8009826:	b082      	sub	sp, #8
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	4a05      	ldr	r2, [pc, #20]	; (8009844 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	f7fd f8f5 	bl	8006a24 <_ZN8touchgfx8TextAreaD1Ev>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	0802f030 	.word	0x0802f030

08009848 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ffe7 	bl	8009824 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009856:	2140      	movs	r1, #64	; 0x40
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f021 fb26 	bl	802aeaa <_ZdlPvj>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	4a08      	ldr	r2, [pc, #32]	; (8009894 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	33b4      	adds	r3, #180	; 0xb4
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff ffd2 	bl	8009824 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff ffa2 	bl	80097cc <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4618      	mov	r0, r3
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	0802daf8 	.word	0x0802daf8

08009898 <_ZN8touchgfx12TextProgressD0Ev>:
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ffe1 	bl	8009868 <_ZN8touchgfx12TextProgressD1Ev>
 80098a6:	f44f 7184 	mov.w	r1, #264	; 0x108
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f021 fafd 	bl	802aeaa <_ZdlPvj>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
	...

080098bc <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	4a0f      	ldr	r2, [pc, #60]	; (8009904 <_ZN8touchgfx6SliderD1Ev+0x48>)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	33c0      	adds	r3, #192	; 0xc0
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fd f842 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3394      	adds	r3, #148	; 0x94
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fd f85f 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	3368      	adds	r3, #104	; 0x68
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd f85a 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	333c      	adds	r3, #60	; 0x3c
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd f855 	bl	800699c <_ZN8touchgfx5ImageD1Ev>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fd f82f 	bl	8006958 <_ZN8touchgfx9ContainerD1Ev>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	0802e164 	.word	0x0802e164

08009908 <_ZN8touchgfx6SliderD0Ev>:
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7ff ffd3 	bl	80098bc <_ZN8touchgfx6SliderD1Ev>
 8009916:	21fc      	movs	r1, #252	; 0xfc
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f021 fac6 	bl	802aeaa <_ZdlPvj>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4618      	mov	r0, r3
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <_ZN8touchgfx12ToggleButtonD1Ev>:
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	4a05      	ldr	r2, [pc, #20]	; (8009948 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f7fd f89b 	bl	8006a74 <_ZN8touchgfx6ButtonD1Ev>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	0802ecec 	.word	0x0802ecec

0800994c <_ZN8touchgfx12ToggleButtonD0Ev>:
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff ffe7 	bl	8009928 <_ZN8touchgfx12ToggleButtonD1Ev>
 800995a:	2138      	movs	r1, #56	; 0x38
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f021 faa4 	bl	802aeaa <_ZdlPvj>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	68d2      	ldr	r2, [r2, #12]
 8009980:	1052      	asrs	r2, r2, #1
 8009982:	1898      	adds	r0, r3, r2
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	2b00      	cmp	r3, #0
 800998e:	d102      	bne.n	8009996 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	e00a      	b.n	80099ac <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	68d2      	ldr	r2, [r2, #12]
 800999e:	1052      	asrs	r2, r2, #1
 80099a0:	4413      	add	r3, r2
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	6892      	ldr	r2, [r2, #8]
 80099a8:	4413      	add	r3, r2
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	68b9      	ldr	r1, [r7, #8]
 80099b0:	4798      	blx	r3
    }
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 80099ba:	b480      	push	{r7}
 80099bc:	b083      	sub	sp, #12
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d010      	beq.n	80099ec <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d107      	bne.n	80099e2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80099e2:	2300      	movs	r3, #0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d001      	beq.n	80099ec <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80099e8:	2301      	movs	r3, #1
 80099ea:	e000      	b.n	80099ee <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80099ec:	2300      	movs	r3, #0
    }
 80099ee:	4618      	mov	r0, r3
 80099f0:	370c      	adds	r7, #12
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b082      	sub	sp, #8
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68d2      	ldr	r2, [r2, #12]
 8009a0c:	1052      	asrs	r2, r2, #1
 8009a0e:	1898      	adds	r0, r3, r2
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	e00a      	b.n	8009a38 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	68d2      	ldr	r2, [r2, #12]
 8009a2a:	1052      	asrs	r2, r2, #1
 8009a2c:	4413      	add	r3, r2
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6892      	ldr	r2, [r2, #8]
 8009a34:	4413      	add	r3, r2
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	4798      	blx	r3
    }
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d010      	beq.n	8009a76 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d107      	bne.n	8009a6c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e000      	b.n	8009a6e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d001      	beq.n	8009a76 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009a76:	2300      	movs	r3, #0
    }
 8009a78:	4618      	mov	r0, r3
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	4801      	ldr	r0, [pc, #4]	; (8009a90 <__tcf_0+0xc>)
 8009a8a:	f7fa f9c7 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	24001dcc 	.word	0x24001dcc

08009a94 <_Z23getFont_verdana_20_4bppv>:
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	; 0x30
 8009a98:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a9a:	4b1f      	ldr	r3, [pc, #124]	; (8009b18 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f3bf 8f5b 	dmb	ish
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bf0c      	ite	eq
 8009aaa:	2301      	moveq	r3, #1
 8009aac:	2300      	movne	r3, #0
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d02c      	beq.n	8009b0e <_Z23getFont_verdana_20_4bppv+0x7a>
 8009ab4:	4818      	ldr	r0, [pc, #96]	; (8009b18 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009ab6:	f021 f9fa 	bl	802aeae <__cxa_guard_acquire>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	bf14      	ite	ne
 8009ac0:	2301      	movne	r3, #1
 8009ac2:	2300      	moveq	r3, #0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d021      	beq.n	8009b0e <_Z23getFont_verdana_20_4bppv+0x7a>
 8009aca:	2300      	movs	r3, #0
 8009acc:	930a      	str	r3, [sp, #40]	; 0x28
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9308      	str	r3, [sp, #32]
 8009ad6:	233f      	movs	r3, #63	; 0x3f
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	4b10      	ldr	r3, [pc, #64]	; (8009b1c <_Z23getFont_verdana_20_4bppv+0x88>)
 8009adc:	9306      	str	r3, [sp, #24]
 8009ade:	4b10      	ldr	r3, [pc, #64]	; (8009b20 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	2301      	movs	r3, #1
 8009aec:	9302      	str	r3, [sp, #8]
 8009aee:	2304      	movs	r3, #4
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	2314      	movs	r3, #20
 8009af8:	2201      	movs	r2, #1
 8009afa:	490a      	ldr	r1, [pc, #40]	; (8009b24 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009afc:	480a      	ldr	r0, [pc, #40]	; (8009b28 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009afe:	f7fb fe1f 	bl	8005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b02:	480a      	ldr	r0, [pc, #40]	; (8009b2c <_Z23getFont_verdana_20_4bppv+0x98>)
 8009b04:	f021 fa1e 	bl	802af44 <atexit>
 8009b08:	4803      	ldr	r0, [pc, #12]	; (8009b18 <_Z23getFont_verdana_20_4bppv+0x84>)
 8009b0a:	f021 f9dc 	bl	802aec6 <__cxa_guard_release>
    return verdana_20_4bpp;
 8009b0e:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	24001df4 	.word	0x24001df4
 8009b1c:	080309d8 	.word	0x080309d8
 8009b20:	080309ec 	.word	0x080309ec
 8009b24:	900007ec 	.word	0x900007ec
 8009b28:	24001dcc 	.word	0x24001dcc
 8009b2c:	08009a85 	.word	0x08009a85

08009b30 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	4801      	ldr	r0, [pc, #4]	; (8009b3c <__tcf_0+0xc>)
 8009b36:	f7fa f971 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	24001df8 	.word	0x24001df8

08009b40 <_Z23getFont_verdana_40_4bppv>:
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08c      	sub	sp, #48	; 0x30
 8009b44:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f3bf 8f5b 	dmb	ish
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bf0c      	ite	eq
 8009b56:	2301      	moveq	r3, #1
 8009b58:	2300      	movne	r3, #0
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d02c      	beq.n	8009bba <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b60:	4818      	ldr	r0, [pc, #96]	; (8009bc4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b62:	f021 f9a4 	bl	802aeae <__cxa_guard_acquire>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bf14      	ite	ne
 8009b6c:	2301      	movne	r3, #1
 8009b6e:	2300      	moveq	r3, #0
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d021      	beq.n	8009bba <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b76:	2300      	movs	r3, #0
 8009b78:	930a      	str	r3, [sp, #40]	; 0x28
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9308      	str	r3, [sp, #32]
 8009b82:	233f      	movs	r3, #63	; 0x3f
 8009b84:	9307      	str	r3, [sp, #28]
 8009b86:	4b10      	ldr	r3, [pc, #64]	; (8009bc8 <_Z23getFont_verdana_40_4bppv+0x88>)
 8009b88:	9306      	str	r3, [sp, #24]
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9303      	str	r3, [sp, #12]
 8009b96:	2301      	movs	r3, #1
 8009b98:	9302      	str	r3, [sp, #8]
 8009b9a:	2304      	movs	r3, #4
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	9300      	str	r3, [sp, #0]
 8009ba2:	2328      	movs	r3, #40	; 0x28
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	490a      	ldr	r1, [pc, #40]	; (8009bd0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009ba8:	480a      	ldr	r0, [pc, #40]	; (8009bd4 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009baa:	f7fb fdc9 	bl	8005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009bae:	480a      	ldr	r0, [pc, #40]	; (8009bd8 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009bb0:	f021 f9c8 	bl	802af44 <atexit>
 8009bb4:	4803      	ldr	r0, [pc, #12]	; (8009bc4 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009bb6:	f021 f986 	bl	802aec6 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	24001e20 	.word	0x24001e20
 8009bc8:	080309dc 	.word	0x080309dc
 8009bcc:	080309f0 	.word	0x080309f0
 8009bd0:	900007fc 	.word	0x900007fc
 8009bd4:	24001df8 	.word	0x24001df8
 8009bd8:	08009b31 	.word	0x08009b31

08009bdc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	4801      	ldr	r0, [pc, #4]	; (8009be8 <__tcf_0+0xc>)
 8009be2:	f7fa f91b 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	24001e24 	.word	0x24001e24

08009bec <_Z24getFont_verdanab_10_4bppv>:
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08c      	sub	sp, #48	; 0x30
 8009bf0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bf2:	4b1f      	ldr	r3, [pc, #124]	; (8009c70 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f3bf 8f5b 	dmb	ish
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bf0c      	ite	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	2300      	movne	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d02c      	beq.n	8009c66 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009c0c:	4818      	ldr	r0, [pc, #96]	; (8009c70 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009c0e:	f021 f94e 	bl	802aeae <__cxa_guard_acquire>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bf14      	ite	ne
 8009c18:	2301      	movne	r3, #1
 8009c1a:	2300      	moveq	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d021      	beq.n	8009c66 <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009c22:	2300      	movs	r3, #0
 8009c24:	930a      	str	r3, [sp, #40]	; 0x28
 8009c26:	2300      	movs	r3, #0
 8009c28:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9308      	str	r3, [sp, #32]
 8009c2e:	233f      	movs	r3, #63	; 0x3f
 8009c30:	9307      	str	r3, [sp, #28]
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <_Z24getFont_verdanab_10_4bppv+0x88>)
 8009c34:	9306      	str	r3, [sp, #24]
 8009c36:	4b10      	ldr	r3, [pc, #64]	; (8009c78 <_Z24getFont_verdanab_10_4bppv+0x8c>)
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	9304      	str	r3, [sp, #16]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	9303      	str	r3, [sp, #12]
 8009c42:	2301      	movs	r3, #1
 8009c44:	9302      	str	r3, [sp, #8]
 8009c46:	2304      	movs	r3, #4
 8009c48:	9301      	str	r3, [sp, #4]
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	230a      	movs	r3, #10
 8009c50:	221a      	movs	r2, #26
 8009c52:	490a      	ldr	r1, [pc, #40]	; (8009c7c <_Z24getFont_verdanab_10_4bppv+0x90>)
 8009c54:	480a      	ldr	r0, [pc, #40]	; (8009c80 <_Z24getFont_verdanab_10_4bppv+0x94>)
 8009c56:	f7fb fd73 	bl	8005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c5a:	480a      	ldr	r0, [pc, #40]	; (8009c84 <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009c5c:	f021 f972 	bl	802af44 <atexit>
 8009c60:	4803      	ldr	r0, [pc, #12]	; (8009c70 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009c62:	f021 f930 	bl	802aec6 <__cxa_guard_release>
    return verdanab_10_4bpp;
 8009c66:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	24001e4c 	.word	0x24001e4c
 8009c74:	080309e0 	.word	0x080309e0
 8009c78:	080309f4 	.word	0x080309f4
 8009c7c:	9000080c 	.word	0x9000080c
 8009c80:	24001e24 	.word	0x24001e24
 8009c84:	08009bdd 	.word	0x08009bdd

08009c88 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <__tcf_0+0xc>)
 8009c8e:	f7fa f8c5 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	24001e50 	.word	0x24001e50

08009c98 <_Z24getFont_verdanab_12_4bppv>:
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08c      	sub	sp, #48	; 0x30
 8009c9c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c9e:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f3bf 8f5b 	dmb	ish
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	bf0c      	ite	eq
 8009cae:	2301      	moveq	r3, #1
 8009cb0:	2300      	movne	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d02c      	beq.n	8009d12 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009cb8:	4818      	ldr	r0, [pc, #96]	; (8009d1c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009cba:	f021 f8f8 	bl	802aeae <__cxa_guard_acquire>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bf14      	ite	ne
 8009cc4:	2301      	movne	r3, #1
 8009cc6:	2300      	moveq	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d021      	beq.n	8009d12 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	233f      	movs	r3, #63	; 0x3f
 8009cdc:	9307      	str	r3, [sp, #28]
 8009cde:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <_Z24getFont_verdanab_12_4bppv+0x88>)
 8009ce0:	9306      	str	r3, [sp, #24]
 8009ce2:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	2300      	movs	r3, #0
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	9302      	str	r3, [sp, #8]
 8009cf2:	2304      	movs	r3, #4
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	230c      	movs	r3, #12
 8009cfc:	2215      	movs	r2, #21
 8009cfe:	490a      	ldr	r1, [pc, #40]	; (8009d28 <_Z24getFont_verdanab_12_4bppv+0x90>)
 8009d00:	480a      	ldr	r0, [pc, #40]	; (8009d2c <_Z24getFont_verdanab_12_4bppv+0x94>)
 8009d02:	f7fb fd1d 	bl	8005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009d06:	480a      	ldr	r0, [pc, #40]	; (8009d30 <_Z24getFont_verdanab_12_4bppv+0x98>)
 8009d08:	f021 f91c 	bl	802af44 <atexit>
 8009d0c:	4803      	ldr	r0, [pc, #12]	; (8009d1c <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009d0e:	f021 f8da 	bl	802aec6 <__cxa_guard_release>
    return verdanab_12_4bpp;
 8009d12:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	24001e78 	.word	0x24001e78
 8009d20:	080309e4 	.word	0x080309e4
 8009d24:	080309f8 	.word	0x080309f8
 8009d28:	90000978 	.word	0x90000978
 8009d2c:	24001e50 	.word	0x24001e50
 8009d30:	08009c89 	.word	0x08009c89

08009d34 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__tcf_0+0xc>)
 8009d3a:	f7fa f86f 	bl	8003e1c <_ZN8touchgfx13GeneratedFontD1Ev>
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	24001e7c 	.word	0x24001e7c

08009d44 <_Z23getFont_verdanab_8_4bppv>:
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b08c      	sub	sp, #48	; 0x30
 8009d48:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d4a:	4b1f      	ldr	r3, [pc, #124]	; (8009dc8 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f3bf 8f5b 	dmb	ish
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bf0c      	ite	eq
 8009d5a:	2301      	moveq	r3, #1
 8009d5c:	2300      	movne	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02c      	beq.n	8009dbe <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d64:	4818      	ldr	r0, [pc, #96]	; (8009dc8 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d66:	f021 f8a2 	bl	802aeae <__cxa_guard_acquire>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d021      	beq.n	8009dbe <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9309      	str	r3, [sp, #36]	; 0x24
 8009d82:	2300      	movs	r3, #0
 8009d84:	9308      	str	r3, [sp, #32]
 8009d86:	233f      	movs	r3, #63	; 0x3f
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009d8c:	9306      	str	r3, [sp, #24]
 8009d8e:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009d90:	9305      	str	r3, [sp, #20]
 8009d92:	2301      	movs	r3, #1
 8009d94:	9304      	str	r3, [sp, #16]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	2304      	movs	r3, #4
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	2302      	movs	r3, #2
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	2308      	movs	r3, #8
 8009da8:	2216      	movs	r2, #22
 8009daa:	490a      	ldr	r1, [pc, #40]	; (8009dd4 <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009dac:	480a      	ldr	r0, [pc, #40]	; (8009dd8 <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009dae:	f7fb fcc7 	bl	8005740 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009db2:	480a      	ldr	r0, [pc, #40]	; (8009ddc <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009db4:	f021 f8c6 	bl	802af44 <atexit>
 8009db8:	4803      	ldr	r0, [pc, #12]	; (8009dc8 <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009dba:	f021 f884 	bl	802aec6 <__cxa_guard_release>
    return verdanab_8_4bpp;
 8009dbe:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	24001ea4 	.word	0x24001ea4
 8009dcc:	080309e8 	.word	0x080309e8
 8009dd0:	080309fc 	.word	0x080309fc
 8009dd4:	90000aa0 	.word	0x90000aa0
 8009dd8:	24001e7c 	.word	0x24001e7c
 8009ddc:	08009d35 	.word	0x08009d35

08009de0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	460b      	mov	r3, r1
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8009dee:	2300      	movs	r3, #0
    }
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009e04:	2300      	movs	r3, #0
    }
 8009e06:	4618      	mov	r0, r3
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009e12:	b480      	push	{r7}
 8009e14:	b083      	sub	sp, #12
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009e1a:	2300      	movs	r3, #0
    }
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009e36:	4a07      	ldr	r2, [pc, #28]	; (8009e54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009e3c:	4a06      	ldr	r2, [pc, #24]	; (8009e58 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009e42:	4a06      	ldr	r2, [pc, #24]	; (8009e5c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009e44:	88fb      	ldrh	r3, [r7, #6]
 8009e46:	8013      	strh	r3, [r2, #0]
    }
 8009e48:	bf00      	nop
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr
 8009e54:	2400b91c 	.word	0x2400b91c
 8009e58:	2400b924 	.word	0x2400b924
 8009e5c:	2400b920 	.word	0x2400b920

08009e60 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e60:	b40e      	push	{r1, r2, r3}
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009e6a:	f107 0320 	add.w	r3, r7, #32
 8009e6e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	2100      	movs	r1, #0
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f012 fd80 	bl	801c97c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009e80:	89fb      	ldrh	r3, [r7, #14]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e8c:	b003      	add	sp, #12
 8009e8e:	4770      	bx	lr

08009e90 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e90:	b40c      	push	{r2, r3}
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009e9e:	f107 031c 	add.w	r3, r7, #28
 8009ea2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009ea4:	78f9      	ldrb	r1, [r7, #3]
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	69ba      	ldr	r2, [r7, #24]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f012 fd66 	bl	801c97c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009eb4:	89fb      	ldrh	r3, [r7, #14]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ec0:	b002      	add	sp, #8
 8009ec2:	4770      	bx	lr

08009ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d016      	beq.n	8009f06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	3322      	adds	r3, #34	; 0x22
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	8adb      	ldrh	r3, [r3, #22]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009ee6:	4b43      	ldr	r3, [pc, #268]	; (8009ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009ee8:	4a43      	ldr	r2, [pc, #268]	; (8009ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009eea:	21c0      	movs	r1, #192	; 0xc0
 8009eec:	4843      	ldr	r0, [pc, #268]	; (8009ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009eee:	f021 f80b 	bl	802af08 <__assert_func>
            return buffer[pos];
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	8a9b      	ldrh	r3, [r3, #20]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009f06:	2300      	movs	r3, #0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d06a      	beq.n	8009fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f014 f8f1 	bl	801e0f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	3322      	adds	r3, #34	; 0x22
 8009f16:	623b      	str	r3, [r7, #32]
 8009f18:	2301      	movs	r3, #1
 8009f1a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	8adb      	ldrh	r3, [r3, #22]
 8009f20:	8bfa      	ldrh	r2, [r7, #30]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d305      	bcc.n	8009f32 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009f26:	4b36      	ldr	r3, [pc, #216]	; (800a000 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009f28:	4a36      	ldr	r2, [pc, #216]	; (800a004 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009f2a:	21c5      	movs	r1, #197	; 0xc5
 8009f2c:	4833      	ldr	r0, [pc, #204]	; (8009ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f2e:	f020 ffeb 	bl	802af08 <__assert_func>
            const uint16_t index = pos + offset;
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	8a9a      	ldrh	r2, [r3, #20]
 8009f36:	8bfb      	ldrh	r3, [r7, #30]
 8009f38:	4413      	add	r3, r2
 8009f3a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009f3c:	8bbb      	ldrh	r3, [r7, #28]
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d801      	bhi.n	8009f46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009f42:	8bbb      	ldrh	r3, [r7, #28]
 8009f44:	e001      	b.n	8009f4a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009f46:	8bbb      	ldrh	r3, [r7, #28]
 8009f48:	3b0a      	subs	r3, #10
 8009f4a:	6a3a      	ldr	r2, [r7, #32]
 8009f4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f50:	f640 123f 	movw	r2, #2367	; 0x93f
 8009f54:	4293      	cmp	r3, r2
 8009f56:	bf0c      	ite	eq
 8009f58:	2301      	moveq	r3, #1
 8009f5a:	2300      	movne	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d03f      	beq.n	8009fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3322      	adds	r3, #34	; 0x22
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	3222      	adds	r2, #34	; 0x22
 8009f6a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	8ad2      	ldrh	r2, [r2, #22]
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d105      	bne.n	8009f80 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009f74:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009f76:	4a20      	ldr	r2, [pc, #128]	; (8009ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009f78:	21c0      	movs	r1, #192	; 0xc0
 8009f7a:	4820      	ldr	r0, [pc, #128]	; (8009ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f7c:	f020 ffc4 	bl	802af08 <__assert_func>
            return buffer[pos];
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	8a92      	ldrh	r2, [r2, #20]
 8009f84:	4611      	mov	r1, r2
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009f8c:	613b      	str	r3, [r7, #16]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	8adb      	ldrh	r3, [r3, #22]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d806      	bhi.n	8009fa8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009f9c:	4a1b      	ldr	r2, [pc, #108]	; (800a00c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009f9e:	f240 110d 	movw	r1, #269	; 0x10d
 8009fa2:	4816      	ldr	r0, [pc, #88]	; (8009ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009fa4:	f020 ffb0 	bl	802af08 <__assert_func>
            const uint16_t index = pos + 1;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	8a9b      	ldrh	r3, [r3, #20]
 8009fac:	3301      	adds	r3, #1
 8009fae:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009fb0:	89bb      	ldrh	r3, [r7, #12]
 8009fb2:	2b09      	cmp	r3, #9
 8009fb4:	d801      	bhi.n	8009fba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009fb6:	89bb      	ldrh	r3, [r7, #12]
 8009fb8:	e000      	b.n	8009fbc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	89f9      	ldrh	r1, [r7, #14]
 8009fc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009fc4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3322      	adds	r3, #34	; 0x22
 8009fca:	61bb      	str	r3, [r7, #24]
 8009fcc:	f640 133f 	movw	r3, #2367	; 0x93f
 8009fd0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	8a9b      	ldrh	r3, [r3, #20]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	8afa      	ldrh	r2, [r7, #22]
 8009fdc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009fe0:	bf00      	nop
        }
    }
    return getNextChar();
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f013 ff6a 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009fe8:	4603      	mov	r3, r0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3728      	adds	r7, #40	; 0x28
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0802ca04 	.word	0x0802ca04
 8009ff8:	0802ca10 	.word	0x0802ca10
 8009ffc:	0802cabc 	.word	0x0802cabc
 800a000:	0802cb08 	.word	0x0802cb08
 800a004:	0802cb18 	.word	0x0802cb18
 800a008:	0802cbec 	.word	0x0802cbec
 800a00c:	0802cbf8 	.word	0x0802cbf8

0800a010 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f013 ff07 	bl	801de2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b088      	sub	sp, #32
 800a02a:	af02      	add	r7, sp, #8
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	1d38      	adds	r0, r7, #4
 800a030:	e880 0006 	stmia.w	r0, {r1, r2}
 800a034:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a03a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a03c:	1d39      	adds	r1, r7, #4
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	6a3b      	ldr	r3, [r7, #32]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f011 f96e 	bl	801b32c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a050:	bf00      	nop
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a066:	88fb      	ldrh	r3, [r7, #6]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d127      	bne.n	800a0bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d016      	beq.n	800a0a6 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a078:	88fb      	ldrh	r3, [r7, #6]
 800a07a:	4a1b      	ldr	r2, [pc, #108]	; (800a0e8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a080:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	4413      	add	r3, r2
 800a08a:	4a18      	ldr	r2, [pc, #96]	; (800a0ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a08c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	4413      	add	r3, r2
 800a096:	4a16      	ldr	r2, [pc, #88]	; (800a0f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a098:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e00a      	b.n	800a0bc <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a0a8:	4a12      	ldr	r2, [pc, #72]	; (800a0f4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a0aa:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a0ac:	4a12      	ldr	r2, [pc, #72]	; (800a0f8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a0b0:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	4a11      	ldr	r2, [pc, #68]	; (800a0fc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ba:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00d      	beq.n	800a0de <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800a0c2:	4a0f      	ldr	r2, [pc, #60]	; (800a100 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a0c8:	f000 f83e 	bl	800a148 <_ZN17TypedTextDatabase8getFontsEv>
 800a0cc:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a0ce:	f000 f833 	bl	800a138 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff fea5 	bl	8009e28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a0de:	bf00      	nop
 800a0e0:	3714      	adds	r7, #20
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd90      	pop	{r4, r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	24001ea8 	.word	0x24001ea8
 800a0ec:	24001eb0 	.word	0x24001eb0
 800a0f0:	24001eb4 	.word	0x24001eb4
 800a0f4:	90000c04 	.word	0x90000c04
 800a0f8:	90000bd4 	.word	0x90000bd4
 800a0fc:	90000dec 	.word	0x90000dec
 800a100:	24001eac 	.word	0x24001eac

0800a104 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	4b07      	ldr	r3, [pc, #28]	; (800a134 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a116:	6819      	ldr	r1, [r3, #0]
 800a118:	887b      	ldrh	r3, [r7, #2]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	4413      	add	r3, r2
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	24001eb0 	.word	0x24001eb0
 800a134:	24001eb4 	.word	0x24001eb4

0800a138 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a13c:	230c      	movs	r3, #12
}
 800a13e:	4618      	mov	r0, r3
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a14c:	4b02      	ldr	r3, [pc, #8]	; (800a158 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a14e:	4618      	mov	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	24001eb8 	.word	0x24001eb8

0800a15c <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d11d      	bne.n	800a1a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a172:	4293      	cmp	r3, r2
 800a174:	d118      	bne.n	800a1a8 <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800a176:	f7ff fc8d 	bl	8009a94 <_Z23getFont_verdana_20_4bppv>
 800a17a:	4603      	mov	r3, r0
};
 800a17c:	4a0c      	ldr	r2, [pc, #48]	; (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a17e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800a180:	f7ff fcde 	bl	8009b40 <_Z23getFont_verdana_40_4bppv>
 800a184:	4603      	mov	r3, r0
};
 800a186:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a188:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 800a18a:	f7ff fddb 	bl	8009d44 <_Z23getFont_verdanab_8_4bppv>
 800a18e:	4603      	mov	r3, r0
};
 800a190:	4a07      	ldr	r2, [pc, #28]	; (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a192:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 800a194:	f7ff fd2a 	bl	8009bec <_Z24getFont_verdanab_10_4bppv>
 800a198:	4603      	mov	r3, r0
};
 800a19a:	4a05      	ldr	r2, [pc, #20]	; (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a19c:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 800a19e:	f7ff fd7b 	bl	8009c98 <_Z24getFont_verdanab_12_4bppv>
 800a1a2:	4603      	mov	r3, r0
};
 800a1a4:	4a02      	ldr	r2, [pc, #8]	; (800a1b0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a1a6:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	24001eb8 	.word	0x24001eb8

0800a1b4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a1bc:	2001      	movs	r0, #1
 800a1be:	f7ff ffcd 	bl	800a15c <_Z41__static_initialization_and_destruction_0ii>
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68b9      	ldr	r1, [r7, #8]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa f972 	bl	80044c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a1dc:	4a03      	ldr	r2, [pc, #12]	; (800a1ec <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	601a      	str	r2, [r3, #0]
{
}
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	0802d04c 	.word	0x0802d04c

0800a1f0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
    {
    }
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
    {
    }
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
    {
 800a220:	4a04      	ldr	r2, [pc, #16]	; (800a234 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
    }
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr
 800a234:	0802d7a0 	.word	0x0802d7a0

0800a238 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
    }
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff ffe9 	bl	800a218 <_ZN8touchgfx9PresenterD1Ev>
 800a246:	2104      	movs	r1, #4
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f020 fe2e 	bl	802aeaa <_ZdlPvj>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
    {
 800a260:	4a04      	ldr	r2, [pc, #16]	; (800a274 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
    }
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr
 800a274:	0802d7a0 	.word	0x0802d7a0

0800a278 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	4a06      	ldr	r2, [pc, #24]	; (800a29c <_ZN13ModelListenerC1Ev+0x24>)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	605a      	str	r2, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	0802d790 	.word	0x0802d790

0800a2a0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	4a04      	ldr	r2, [pc, #16]	; (800a2bc <_ZN13ModelListenerD1Ev+0x1c>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	0802d790 	.word	0x0802d790

0800a2c0 <_ZN13ModelListenerD0Ev>:
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f7ff ffe9 	bl	800a2a0 <_ZN13ModelListenerD1Ev>
 800a2ce:	2108      	movs	r1, #8
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f020 fdea 	bl	802aeaa <_ZdlPvj>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	4a09      	ldr	r2, [pc, #36]	; (800a310 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	605a      	str	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7ff ffd1 	bl	800a2a0 <_ZN13ModelListenerD1Ev>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4618      	mov	r0, r3
 800a302:	f7ff ff89 	bl	800a218 <_ZN8touchgfx9PresenterD1Ev>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4618      	mov	r0, r3
 800a30a:	3708      	adds	r7, #8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	0802d768 	.word	0x0802d768
 800a314:	0802d780 	.word	0x0802d780

0800a318 <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a318:	f1a0 0004 	sub.w	r0, r0, #4
 800a31c:	e7e0      	b.n	800a2e0 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a31e:	bf00      	nop

0800a320 <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ffd9 	bl	800a2e0 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a32e:	2110      	movs	r1, #16
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f020 fdba 	bl	802aeaa <_ZdlPvj>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a340:	f1a0 0004 	sub.w	r0, r0, #4
 800a344:	e7ec      	b.n	800a320 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a348 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
    : view(v)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff ff7f 	bl	800a258 <_ZN8touchgfx9PresenterC1Ev>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3304      	adds	r3, #4
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff ff8a 	bl	800a278 <_ZN13ModelListenerC1Ev>
 800a364:	4a06      	ldr	r2, [pc, #24]	; (800a380 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	4a06      	ldr	r2, [pc, #24]	; (800a384 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	605a      	str	r2, [r3, #4]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	60da      	str	r2, [r3, #12]
{

}
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	0802d768 	.word	0x0802d768
 800a384:	0802d780 	.word	0x0802d780

0800a388 <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]

}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]

}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	4a05      	ldr	r2, [pc, #20]	; (800a3d0 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fb fca5 	bl	8005d10 <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	0802d7b8 	.word	0x0802d7b8

0800a3d4 <_ZN20Localize_AnomalyViewD0Ev>:
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ffe7 	bl	800a3b0 <_ZN20Localize_AnomalyViewD1Ev>
 800a3e2:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f020 fd5f 	bl	802aeaa <_ZdlPvj>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fb fd2a 	bl	8005e5c <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a408:	4a03      	ldr	r2, [pc, #12]	; (800a418 <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	601a      	str	r2, [r3, #0]
{

}
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}
 800a418:	0802d7b8 	.word	0x0802d7b8

0800a41c <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4618      	mov	r0, r3
 800a428:	f7fc f9e0 	bl	80067ec <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a42c:	bf00      	nop
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fb fa96 	bl	8005970 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	4a09      	ldr	r2, [pc, #36]	; (800a47c <_ZN13MainPresenterD1Ev+0x30>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	4a09      	ldr	r2, [pc, #36]	; (800a480 <_ZN13MainPresenterD1Ev+0x34>)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	605a      	str	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff ff1b 	bl	800a2a0 <_ZN13ModelListenerD1Ev>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fed3 	bl	800a218 <_ZN8touchgfx9PresenterD1Ev>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	0802d7f0 	.word	0x0802d7f0
 800a480:	0802d808 	.word	0x0802d808

0800a484 <_ZThn4_N13MainPresenterD1Ev>:
 800a484:	f1a0 0004 	sub.w	r0, r0, #4
 800a488:	e7e0      	b.n	800a44c <_ZN13MainPresenterD1Ev>
 800a48a:	bf00      	nop

0800a48c <_ZN13MainPresenterD0Ev>:
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff ffd9 	bl	800a44c <_ZN13MainPresenterD1Ev>
 800a49a:	2110      	movs	r1, #16
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f020 fd04 	bl	802aeaa <_ZdlPvj>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <_ZThn4_N13MainPresenterD0Ev>:
 800a4ac:	f1a0 0004 	sub.w	r0, r0, #4
 800a4b0:	e7ec      	b.n	800a48c <_ZN13MainPresenterD0Ev>
	...

0800a4b4 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
    : view(v)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fec9 	bl	800a258 <_ZN8touchgfx9PresenterC1Ev>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7ff fed4 	bl	800a278 <_ZN13ModelListenerC1Ev>
 800a4d0:	4a06      	ldr	r2, [pc, #24]	; (800a4ec <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	4a06      	ldr	r2, [pc, #24]	; (800a4f0 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	605a      	str	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	60da      	str	r2, [r3, #12]
{
}
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	0802d7f0 	.word	0x0802d7f0
 800a4f0:	0802d808 	.word	0x0802d808

0800a4f4 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a524:	4b07      	ldr	r3, [pc, #28]	; (800a544 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d105      	bne.n	800a538 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a52c:	4b06      	ldr	r3, [pc, #24]	; (800a548 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a52e:	4a07      	ldr	r2, [pc, #28]	; (800a54c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a530:	2187      	movs	r1, #135	; 0x87
 800a532:	4807      	ldr	r0, [pc, #28]	; (800a550 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a534:	f020 fce8 	bl	802af08 <__assert_func>
        return bitmapId;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	881b      	ldrh	r3, [r3, #0]
    }
 800a53c:	4618      	mov	r0, r3
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	2400b954 	.word	0x2400b954
 800a548:	0802ccac 	.word	0x0802ccac
 800a54c:	0802cce8 	.word	0x0802cce8
 800a550:	0802cd1c 	.word	0x0802cd1c

0800a554 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a554:	b590      	push	{r4, r7, lr}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	332e      	adds	r3, #46	; 0x2e
 800a560:	4618      	mov	r0, r3
 800a562:	f7ff ffdb 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 800a566:	4603      	mov	r3, r0
 800a568:	461c      	mov	r4, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3334      	adds	r3, #52	; 0x34
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff ffd4 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 800a574:	4603      	mov	r3, r0
 800a576:	429c      	cmp	r4, r3
 800a578:	bf0c      	ite	eq
 800a57a:	2301      	moveq	r3, #1
 800a57c:	2300      	movne	r3, #0
 800a57e:	b2db      	uxtb	r3, r3
    }
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	bd90      	pop	{r4, r7, pc}

0800a588 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	4a05      	ldr	r2, [pc, #20]	; (800a5a8 <_ZN8MainViewD1Ev+0x20>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fc fb27 	bl	8006bec <_ZN12MainViewBaseD1Ev>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	0802d818 	.word	0x0802d818

0800a5ac <_ZN8MainViewD0Ev>:
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f7ff ffe7 	bl	800a588 <_ZN8MainViewD1Ev>
 800a5ba:	f640 3118 	movw	r1, #2840	; 0xb18
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f020 fc73 	bl	802aeaa <_ZdlPvj>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
	...

0800a5d0 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fc fc9e 	bl	8006f1c <_ZN12MainViewBaseC1Ev>
 800a5e0:	4a03      	ldr	r2, [pc, #12]	; (800a5f0 <_ZN8MainViewC1Ev+0x20>)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	601a      	str	r2, [r3, #0]
{
}
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	0802d818 	.word	0x0802d818

0800a5f4 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800a5fc:	4b60      	ldr	r3, [pc, #384]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	f083 0301 	eor.w	r3, r3, #1
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d026      	beq.n	800a658 <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a610:	2100      	movs	r1, #0
 800a612:	4618      	mov	r0, r3
 800a614:	f7fc fa95 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a61e:	2101      	movs	r1, #1
 800a620:	4618      	mov	r0, r3
 800a622:	f7fc fa8e 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a62c:	4618      	mov	r0, r3
 800a62e:	f012 fac7 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a638:	4618      	mov	r0, r3
 800a63a:	f012 fac1 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a644:	2101      	movs	r1, #1
 800a646:	4618      	mov	r0, r3
 800a648:	f00f f962 	bl	8019910 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a652:	4618      	mov	r0, r3
 800a654:	f012 fab4 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a65e:	4a48      	ldr	r2, [pc, #288]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a660:	6812      	ldr	r2, [r2, #0]
 800a662:	4611      	mov	r1, r2
 800a664:	4618      	mov	r0, r3
 800a666:	f00d f967 	bl	8017938 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a670:	4a43      	ldr	r2, [pc, #268]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	4611      	mov	r1, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f00d fe75 	bl	8018366 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a682:	4618      	mov	r0, r3
 800a684:	f012 fa9c 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a68e:	4a3c      	ldr	r2, [pc, #240]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a690:	7952      	ldrb	r2, [r2, #5]
 800a692:	b2d2      	uxtb	r2, r2
 800a694:	4611      	mov	r1, r2
 800a696:	4618      	mov	r0, r3
 800a698:	f7fc fa53 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f012 fa8c 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a6ae:	4a34      	ldr	r2, [pc, #208]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6b0:	7992      	ldrb	r2, [r2, #6]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fc fa44 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f012 fa7d 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a6cc:	4b2c      	ldr	r3, [pc, #176]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6ce:	799b      	ldrb	r3, [r3, #6]
 800a6d0:	f083 0301 	eor.w	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7fc fa32 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f012 fa6b 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a6f0:	4a23      	ldr	r2, [pc, #140]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6f2:	7952      	ldrb	r2, [r2, #5]
 800a6f4:	b2d2      	uxtb	r2, r2
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fc fa22 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a704:	4618      	mov	r0, r3
 800a706:	f012 fa5b 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a710:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a712:	7952      	ldrb	r2, [r2, #5]
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fc fa12 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800a724:	4618      	mov	r0, r3
 800a726:	f012 fa4b 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 800a730:	4b13      	ldr	r3, [pc, #76]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a732:	795b      	ldrb	r3, [r3, #5]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f083 0301 	eor.w	r3, r3, #1
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4619      	mov	r1, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	f7fc f9ff 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800a74a:	4618      	mov	r0, r3
 800a74c:	f012 fa38 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 800a756:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <_ZN8MainView11setupScreenEv+0x18c>)
 800a758:	795b      	ldrb	r3, [r3, #5]
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	f083 0301 	eor.w	r3, r3, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fc f9ec 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800a770:	4618      	mov	r0, r3
 800a772:	f012 fa25 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	2400000c 	.word	0x2400000c

0800a784 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800a7a2:	4a0e      	ldr	r2, [pc, #56]	; (800a7dc <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f00d f8c1 	bl	8017938 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7c2:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a7e0 <_ZN8MainView17set_volume_sliderEi+0x48>
 800a7c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7ca:	eeb0 0a47 	vmov.f32	s0, s14
 800a7ce:	f7f5 fdd7 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800a7d2:	bf00      	nop
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	2400000c 	.word	0x2400000c
 800a7e0:	42c80000 	.word	0x42c80000

0800a7e4 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800a7ec:	4b1e      	ldr	r3, [pc, #120]	; (800a868 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	4b1e      	ldr	r3, [pc, #120]	; (800a86c <_ZN8MainView18set_volume_encoderEv+0x88>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2b64      	cmp	r3, #100	; 0x64
 800a7fc:	dd02      	ble.n	800a804 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800a7fe:	2364      	movs	r3, #100	; 0x64
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	e004      	b.n	800a80e <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	da01      	bge.n	800a80e <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800a80e:	4a16      	ldr	r2, [pc, #88]	; (800a868 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a814:	4b14      	ldr	r3, [pc, #80]	; (800a868 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	ee07 3a90 	vmov	s15, r3
 800a81c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a820:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a870 <_ZN8MainView18set_volume_encoderEv+0x8c>
 800a824:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a828:	eeb0 0a47 	vmov.f32	s0, s14
 800a82c:	f7f5 fda8 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800a836:	4a0c      	ldr	r2, [pc, #48]	; (800a868 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a838:	6812      	ldr	r2, [r2, #0]
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f00d f87b 	bl	8017938 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a848:	4a07      	ldr	r2, [pc, #28]	; (800a868 <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a84a:	6812      	ldr	r2, [r2, #0]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f00d fd89 	bl	8018366 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800a85a:	4618      	mov	r0, r3
 800a85c:	f012 f9b0 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800a860:	bf00      	nop
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	2400000c 	.word	0x2400000c
 800a86c:	24001ecc 	.word	0x24001ecc
 800a870:	42c80000 	.word	0x42c80000

0800a874 <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a87c:	4b37      	ldr	r3, [pc, #220]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	f083 0301 	eor.w	r3, r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	4b35      	ldr	r3, [pc, #212]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a888:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800a88a:	4b34      	ldr	r3, [pc, #208]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a88c:	791b      	ldrb	r3, [r3, #4]
 800a88e:	f083 0301 	eor.w	r3, r3, #1
 800a892:	b2db      	uxtb	r3, r3
 800a894:	4618      	mov	r0, r3
 800a896:	f7f5 fd83 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a89a:	4b30      	ldr	r3, [pc, #192]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01a      	beq.n	800a8d8 <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fc f949 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fc f942 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f012 f97b 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f012 f975 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
 800a8d6:	e019      	b.n	800a90c <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8de:	2100      	movs	r1, #0
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fc f92e 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fc f927 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f203 737c 	addw	r3, r3, #1916	; 0x77c
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f012 f960 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 800a906:	4618      	mov	r0, r3
 800a908:	f012 f95a 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fe1e 	bl	800a554 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800a918:	4603      	mov	r3, r0
 800a91a:	461a      	mov	r2, r3
 800a91c:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a91e:	791b      	ldrb	r3, [r3, #4]
 800a920:	429a      	cmp	r2, r3
 800a922:	bf0c      	ite	eq
 800a924:	2301      	moveq	r3, #1
 800a926:	2300      	movne	r3, #0
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d011      	beq.n	800a952 <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f203 42f4 	addw	r2, r3, #1268	; 0x4f4
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a936:	791b      	ldrb	r3, [r3, #4]
 800a938:	f083 0301 	eor.w	r3, r3, #1
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	4619      	mov	r1, r3
 800a940:	4610      	mov	r0, r2
 800a942:	f00e ffe5 	bl	8019910 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f203 43f4 	addw	r3, r3, #1268	; 0x4f4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f012 f937 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a952:	bf00      	nop
 800a954:	3708      	adds	r7, #8
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	2400000c 	.word	0x2400000c

0800a960 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800a968:	f7f5 fd2a 	bl	80003c0 <IPCGetAnomalyDetectState>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf14      	ite	ne
 800a972:	2301      	movne	r3, #1
 800a974:	2300      	moveq	r3, #0
 800a976:	b2da      	uxtb	r2, r3
 800a978:	4b40      	ldr	r3, [pc, #256]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a97a:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800a97c:	4b3f      	ldr	r3, [pc, #252]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a97e:	795b      	ldrb	r3, [r3, #5]
 800a980:	b2da      	uxtb	r2, r3
 800a982:	4b3e      	ldr	r3, [pc, #248]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a984:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a98c:	4a3b      	ldr	r2, [pc, #236]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a98e:	7952      	ldrb	r2, [r2, #5]
 800a990:	b2d2      	uxtb	r2, r2
 800a992:	4611      	mov	r1, r2
 800a994:	4618      	mov	r0, r3
 800a996:	f7fc f8d4 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f203 73f4 	addw	r3, r3, #2036	; 0x7f4
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f012 f90d 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a9ac:	4a33      	ldr	r2, [pc, #204]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9ae:	7992      	ldrb	r2, [r2, #6]
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fc f8c5 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f012 f8fe 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800a9ca:	4b2c      	ldr	r3, [pc, #176]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9cc:	799b      	ldrb	r3, [r3, #6]
 800a9ce:	f083 0301 	eor.w	r3, r3, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fc f8b3 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f012 f8ec 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800a9ee:	4a23      	ldr	r2, [pc, #140]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9f0:	7952      	ldrb	r2, [r2, #5]
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fc f8a3 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f603 2328 	addw	r3, r3, #2600	; 0xa28
 800aa02:	4618      	mov	r0, r3
 800aa04:	f012 f8dc 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800aa0e:	4a1b      	ldr	r2, [pc, #108]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa10:	7952      	ldrb	r2, [r2, #5]
 800aa12:	b2d2      	uxtb	r2, r2
 800aa14:	4611      	mov	r1, r2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fc f893 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f603 13f4 	addw	r3, r3, #2548	; 0x9f4
 800aa22:	4618      	mov	r0, r3
 800aa24:	f012 f8cc 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f603 12c8 	addw	r2, r3, #2504	; 0x9c8
 800aa2e:	4b13      	ldr	r3, [pc, #76]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa30:	795b      	ldrb	r3, [r3, #5]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	f083 0301 	eor.w	r3, r3, #1
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	f7fc f880 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f012 f8b9 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f603 129c 	addw	r2, r3, #2460	; 0x99c
 800aa54:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa56:	795b      	ldrb	r3, [r3, #5]
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	f083 0301 	eor.w	r3, r3, #1
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	4619      	mov	r1, r3
 800aa62:	4610      	mov	r0, r2
 800aa64:	f7fc f86d 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f603 139c 	addw	r3, r3, #2460	; 0x99c
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f012 f8a6 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	2400000c 	.word	0x2400000c

0800aa80 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800aa88:	f7f5 fca6 	bl	80003d8 <IPCGetAlarmMuteState>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	bf0c      	ite	eq
 800aa92:	2301      	moveq	r3, #1
 800aa94:	2300      	movne	r3, #0
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7f5 fca9 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800aa9e:	4b16      	ldr	r3, [pc, #88]	; (800aaf8 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aaa0:	799b      	ldrb	r3, [r3, #6]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d023      	beq.n	800aaee <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800aab2:	4a11      	ldr	r2, [pc, #68]	; (800aaf8 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aab4:	7992      	ldrb	r2, [r2, #6]
 800aab6:	4611      	mov	r1, r2
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fc f842 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800aac4:	4618      	mov	r0, r3
 800aac6:	f012 f87b 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f603 02c4 	addw	r2, r3, #2244	; 0x8c4
 800aad0:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aad2:	799b      	ldrb	r3, [r3, #6]
 800aad4:	f083 0301 	eor.w	r3, r3, #1
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	4619      	mov	r1, r3
 800aadc:	4610      	mov	r0, r2
 800aade:	f7fc f830 	bl	8006b42 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 800aae8:	4618      	mov	r0, r3
 800aaea:	f012 f869 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	2400000c 	.word	0x2400000c

0800aafc <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	601a      	str	r2, [r3, #0]
{

}
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <_ZN5Model4tickEv>:
bool anomaly_detect_state_previous;
bool anomaly_detect_state_current = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800ab20:	4b67      	ldr	r3, [pc, #412]	; (800acc0 <_ZN5Model4tickEv+0x1a8>)
 800ab22:	781a      	ldrb	r2, [r3, #0]
 800ab24:	4b67      	ldr	r3, [pc, #412]	; (800acc4 <_ZN5Model4tickEv+0x1ac>)
 800ab26:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800ab28:	f7f5 fc4a 	bl	80003c0 <IPCGetAnomalyDetectState>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf14      	ite	ne
 800ab32:	2301      	movne	r3, #1
 800ab34:	2300      	moveq	r3, #0
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	4b61      	ldr	r3, [pc, #388]	; (800acc0 <_ZN5Model4tickEv+0x1a8>)
 800ab3a:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800ab3c:	4b60      	ldr	r3, [pc, #384]	; (800acc0 <_ZN5Model4tickEv+0x1a8>)
 800ab3e:	781a      	ldrb	r2, [r3, #0]
 800ab40:	4b60      	ldr	r3, [pc, #384]	; (800acc4 <_ZN5Model4tickEv+0x1ac>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d009      	beq.n	800ab5c <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800ab48:	f011 f870 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	461a      	mov	r2, r3
 800ab50:	6813      	ldr	r3, [r2, #0]
 800ab52:	330c      	adds	r3, #12
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2157      	movs	r1, #87	; 0x57
 800ab58:	4610      	mov	r0, r2
 800ab5a:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800ab5c:	4b58      	ldr	r3, [pc, #352]	; (800acc0 <_ZN5Model4tickEv+0x1a8>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d028      	beq.n	800abb6 <_ZN5Model4tickEv+0x9e>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800ab64:	4b58      	ldr	r3, [pc, #352]	; (800acc8 <_ZN5Model4tickEv+0x1b0>)
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	4a57      	ldr	r2, [pc, #348]	; (800acc8 <_ZN5Model4tickEv+0x1b0>)
 800ab6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab6e:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800ab70:	f006 f976 	bl	8010e60 <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	4b55      	ldr	r3, [pc, #340]	; (800accc <_ZN5Model4tickEv+0x1b4>)
 800ab78:	fba3 1302 	umull	r1, r3, r3, r2
 800ab7c:	099b      	lsrs	r3, r3, #6
 800ab7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ab82:	fb01 f303 	mul.w	r3, r1, r3
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	bf94      	ite	ls
 800ab90:	2301      	movls	r3, #1
 800ab92:	2300      	movhi	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d006      	beq.n	800aba8 <_ZN5Model4tickEv+0x90>
    {
      GPIOE->BSRR |= 1 << 3;
 800ab9a:	4b4d      	ldr	r3, [pc, #308]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	4a4c      	ldr	r2, [pc, #304]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800aba0:	f043 0308 	orr.w	r3, r3, #8
 800aba4:	6193      	str	r3, [r2, #24]
 800aba6:	e012      	b.n	800abce <_ZN5Model4tickEv+0xb6>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800aba8:	4b49      	ldr	r3, [pc, #292]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	4a48      	ldr	r2, [pc, #288]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800abae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb2:	6193      	str	r3, [r2, #24]
 800abb4:	e00b      	b.n	800abce <_ZN5Model4tickEv+0xb6>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800abb6:	4b44      	ldr	r3, [pc, #272]	; (800acc8 <_ZN5Model4tickEv+0x1b0>)
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	4a43      	ldr	r2, [pc, #268]	; (800acc8 <_ZN5Model4tickEv+0x1b0>)
 800abbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abc0:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800abc2:	4b43      	ldr	r3, [pc, #268]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	4a42      	ldr	r2, [pc, #264]	; (800acd0 <_ZN5Model4tickEv+0x1b8>)
 800abc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abcc:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800abce:	2108      	movs	r1, #8
 800abd0:	4840      	ldr	r0, [pc, #256]	; (800acd4 <_ZN5Model4tickEv+0x1bc>)
 800abd2:	f007 f80b 	bl	8011bec <HAL_GPIO_ReadPin>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bf14      	ite	ne
 800abdc:	2301      	movne	r3, #1
 800abde:	2300      	moveq	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800abe2:	4b3d      	ldr	r3, [pc, #244]	; (800acd8 <_ZN5Model4tickEv+0x1c0>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	7bfa      	ldrb	r2, [r7, #15]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d017      	beq.n	800ac1c <_ZN5Model4tickEv+0x104>
	   swStatus = currentSWStatus;
 800abec:	4a3a      	ldr	r2, [pc, #232]	; (800acd8 <_ZN5Model4tickEv+0x1c0>)
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800abf2:	4b3a      	ldr	r3, [pc, #232]	; (800acdc <_ZN5Model4tickEv+0x1c4>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d009      	beq.n	800ac0e <_ZN5Model4tickEv+0xf6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800abfa:	f011 f817 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 800abfe:	4603      	mov	r3, r0
 800ac00:	461a      	mov	r2, r3
 800ac02:	6813      	ldr	r3, [r2, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2159      	movs	r1, #89	; 0x59
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800ac0e:	4b33      	ldr	r3, [pc, #204]	; (800acdc <_ZN5Model4tickEv+0x1c4>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	f083 0301 	eor.w	r3, r3, #1
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	4b30      	ldr	r3, [pc, #192]	; (800acdc <_ZN5Model4tickEv+0x1c4>)
 800ac1a:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800ac1c:	2102      	movs	r1, #2
 800ac1e:	4830      	ldr	r0, [pc, #192]	; (800ace0 <_ZN5Model4tickEv+0x1c8>)
 800ac20:	f006 ffe4 	bl	8011bec <HAL_GPIO_ReadPin>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	bf14      	ite	ne
 800ac2a:	2301      	movne	r3, #1
 800ac2c:	2300      	moveq	r3, #0
 800ac2e:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800ac30:	4b2c      	ldr	r3, [pc, #176]	; (800ace4 <_ZN5Model4tickEv+0x1cc>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	7bba      	ldrb	r2, [r7, #14]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d017      	beq.n	800ac6a <_ZN5Model4tickEv+0x152>
	   muteStatus = currentMuteStatus;
 800ac3a:	4a2a      	ldr	r2, [pc, #168]	; (800ace4 <_ZN5Model4tickEv+0x1cc>)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800ac40:	4b29      	ldr	r3, [pc, #164]	; (800ace8 <_ZN5Model4tickEv+0x1d0>)
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d009      	beq.n	800ac5c <_ZN5Model4tickEv+0x144>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800ac48:	f010 fff0 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6813      	ldr	r3, [r2, #0]
 800ac52:	330c      	adds	r3, #12
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	215a      	movs	r1, #90	; 0x5a
 800ac58:	4610      	mov	r0, r2
 800ac5a:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800ac5c:	4b22      	ldr	r3, [pc, #136]	; (800ace8 <_ZN5Model4tickEv+0x1d0>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	f083 0301 	eor.w	r3, r3, #1
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <_ZN5Model4tickEv+0x1d0>)
 800ac68:	701a      	strb	r2, [r3, #0]
	}

  // TIM4 serves as the encoder counter
  if (TIM4->CNT != encoderCount)
 800ac6a:	4b20      	ldr	r3, [pc, #128]	; (800acec <_ZN5Model4tickEv+0x1d4>)
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6e:	4a20      	ldr	r2, [pc, #128]	; (800acf0 <_ZN5Model4tickEv+0x1d8>)
 800ac70:	8812      	ldrh	r2, [r2, #0]
 800ac72:	4293      	cmp	r3, r2
 800ac74:	bf14      	ite	ne
 800ac76:	2301      	movne	r3, #1
 800ac78:	2300      	moveq	r3, #0
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d01b      	beq.n	800acb8 <_ZN5Model4tickEv+0x1a0>
  {
    int16_t encoderDelta = TIM4->CNT - encoderCount;
 800ac80:	4b1a      	ldr	r3, [pc, #104]	; (800acec <_ZN5Model4tickEv+0x1d4>)
 800ac82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <_ZN5Model4tickEv+0x1d8>)
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	81bb      	strh	r3, [r7, #12]
    encoderCount = TIM4->CNT;
 800ac90:	4b16      	ldr	r3, [pc, #88]	; (800acec <_ZN5Model4tickEv+0x1d4>)
 800ac92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	4b16      	ldr	r3, [pc, #88]	; (800acf0 <_ZN5Model4tickEv+0x1d8>)
 800ac98:	801a      	strh	r2, [r3, #0]
    currentDelta = encoderDelta * 2;
 800ac9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	4a14      	ldr	r2, [pc, #80]	; (800acf4 <_ZN5Model4tickEv+0x1dc>)
 800aca2:	6013      	str	r3, [r2, #0]

    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
 800aca4:	f010 ffc2 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 800aca8:	4603      	mov	r3, r0
 800acaa:	461a      	mov	r2, r3
 800acac:	6813      	ldr	r3, [r2, #0]
 800acae:	330c      	adds	r3, #12
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2158      	movs	r1, #88	; 0x58
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
  }
}
 800acb8:	bf00      	nop
 800acba:	3710      	adds	r7, #16
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	24001ed5 	.word	0x24001ed5
 800acc4:	24001ed4 	.word	0x24001ed4
 800acc8:	58021c00 	.word	0x58021c00
 800accc:	10624dd3 	.word	0x10624dd3
 800acd0:	58021000 	.word	0x58021000
 800acd4:	58021800 	.word	0x58021800
 800acd8:	24001ed0 	.word	0x24001ed0
 800acdc:	24001ed1 	.word	0x24001ed1
 800ace0:	58022800 	.word	0x58022800
 800ace4:	24001ed2 	.word	0x24001ed2
 800ace8:	24001ed3 	.word	0x24001ed3
 800acec:	40000800 	.word	0x40000800
 800acf0:	24001ed6 	.word	0x24001ed6
 800acf4:	24001ecc 	.word	0x24001ecc

0800acf8 <__NVIC_SetPriority>:
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	6039      	str	r1, [r7, #0]
 800ad02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ad04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	db0a      	blt.n	800ad22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	490c      	ldr	r1, [pc, #48]	; (800ad44 <__NVIC_SetPriority+0x4c>)
 800ad12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad16:	0112      	lsls	r2, r2, #4
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad20:	e00a      	b.n	800ad38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	4908      	ldr	r1, [pc, #32]	; (800ad48 <__NVIC_SetPriority+0x50>)
 800ad28:	88fb      	ldrh	r3, [r7, #6]
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	3b04      	subs	r3, #4
 800ad30:	0112      	lsls	r2, r2, #4
 800ad32:	b2d2      	uxtb	r2, r2
 800ad34:	440b      	add	r3, r1
 800ad36:	761a      	strb	r2, [r3, #24]
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	e000e100 	.word	0xe000e100
 800ad48:	e000ed00 	.word	0xe000ed00

0800ad4c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <SysTick_Handler+0x1c>)
 800ad52:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad54:	f002 fed6 	bl	800db04 <xTaskGetSchedulerState>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d001      	beq.n	800ad62 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad5e:	f000 ffeb 	bl	800bd38 <xPortSysTickHandler>
  }
}
 800ad62:	bf00      	nop
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	e000e010 	.word	0xe000e010

0800ad6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad70:	2100      	movs	r1, #0
 800ad72:	f06f 0004 	mvn.w	r0, #4
 800ad76:	f7ff ffbf 	bl	800acf8 <__NVIC_SetPriority>
#endif
}
 800ad7a:	bf00      	nop
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad86:	f3ef 8305 	mrs	r3, IPSR
 800ad8a:	603b      	str	r3, [r7, #0]
  return(result);
 800ad8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad92:	f06f 0305 	mvn.w	r3, #5
 800ad96:	607b      	str	r3, [r7, #4]
 800ad98:	e00c      	b.n	800adb4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <osKernelInitialize+0x44>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d105      	bne.n	800adae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ada2:	4b08      	ldr	r3, [pc, #32]	; (800adc4 <osKernelInitialize+0x44>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	607b      	str	r3, [r7, #4]
 800adac:	e002      	b.n	800adb4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800adae:	f04f 33ff 	mov.w	r3, #4294967295
 800adb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800adb4:	687b      	ldr	r3, [r7, #4]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	24001ed8 	.word	0x24001ed8

0800adc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adce:	f3ef 8305 	mrs	r3, IPSR
 800add2:	603b      	str	r3, [r7, #0]
  return(result);
 800add4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800adda:	f06f 0305 	mvn.w	r3, #5
 800adde:	607b      	str	r3, [r7, #4]
 800ade0:	e010      	b.n	800ae04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ade2:	4b0b      	ldr	r3, [pc, #44]	; (800ae10 <osKernelStart+0x48>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d109      	bne.n	800adfe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adea:	f7ff ffbf 	bl	800ad6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adee:	4b08      	ldr	r3, [pc, #32]	; (800ae10 <osKernelStart+0x48>)
 800adf0:	2202      	movs	r2, #2
 800adf2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800adf4:	f002 fa2a 	bl	800d24c <vTaskStartScheduler>
      stat = osOK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	607b      	str	r3, [r7, #4]
 800adfc:	e002      	b.n	800ae04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800adfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ae02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae04:	687b      	ldr	r3, [r7, #4]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	24001ed8 	.word	0x24001ed8

0800ae14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08e      	sub	sp, #56	; 0x38
 800ae18:	af04      	add	r7, sp, #16
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae24:	f3ef 8305 	mrs	r3, IPSR
 800ae28:	617b      	str	r3, [r7, #20]
  return(result);
 800ae2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d17e      	bne.n	800af2e <osThreadNew+0x11a>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d07b      	beq.n	800af2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae36:	2380      	movs	r3, #128	; 0x80
 800ae38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae3a:	2318      	movs	r3, #24
 800ae3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ae42:	f04f 33ff 	mov.w	r3, #4294967295
 800ae46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d045      	beq.n	800aeda <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d002      	beq.n	800ae5c <osThreadNew+0x48>
        name = attr->name;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d008      	beq.n	800ae82 <osThreadNew+0x6e>
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2b38      	cmp	r3, #56	; 0x38
 800ae74:	d805      	bhi.n	800ae82 <osThreadNew+0x6e>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <osThreadNew+0x72>
        return (NULL);
 800ae82:	2300      	movs	r3, #0
 800ae84:	e054      	b.n	800af30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	089b      	lsrs	r3, r3, #2
 800ae94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00e      	beq.n	800aebc <osThreadNew+0xa8>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	2ba7      	cmp	r3, #167	; 0xa7
 800aea4:	d90a      	bls.n	800aebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d006      	beq.n	800aebc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d002      	beq.n	800aebc <osThreadNew+0xa8>
        mem = 1;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	61bb      	str	r3, [r7, #24]
 800aeba:	e010      	b.n	800aede <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d10c      	bne.n	800aede <osThreadNew+0xca>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d108      	bne.n	800aede <osThreadNew+0xca>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <osThreadNew+0xca>
          mem = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	61bb      	str	r3, [r7, #24]
 800aed8:	e001      	b.n	800aede <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d110      	bne.n	800af06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeec:	9202      	str	r2, [sp, #8]
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	69fb      	ldr	r3, [r7, #28]
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6a3a      	ldr	r2, [r7, #32]
 800aef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f001 ffba 	bl	800ce74 <xTaskCreateStatic>
 800af00:	4603      	mov	r3, r0
 800af02:	613b      	str	r3, [r7, #16]
 800af04:	e013      	b.n	800af2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d110      	bne.n	800af2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	b29a      	uxth	r2, r3
 800af10:	f107 0310 	add.w	r3, r7, #16
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f002 f805 	bl	800cf2e <xTaskCreate>
 800af24:	4603      	mov	r3, r0
 800af26:	2b01      	cmp	r3, #1
 800af28:	d001      	beq.n	800af2e <osThreadNew+0x11a>
            hTask = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af2e:	693b      	ldr	r3, [r7, #16]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3728      	adds	r7, #40	; 0x28
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af40:	f3ef 8305 	mrs	r3, IPSR
 800af44:	60bb      	str	r3, [r7, #8]
  return(result);
 800af46:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <osDelay+0x1c>
    stat = osErrorISR;
 800af4c:	f06f 0305 	mvn.w	r3, #5
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	e007      	b.n	800af64 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af54:	2300      	movs	r3, #0
 800af56:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d002      	beq.n	800af64 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f002 f940 	bl	800d1e4 <vTaskDelay>
    }
  }

  return (stat);
 800af64:	68fb      	ldr	r3, [r7, #12]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af6e:	b580      	push	{r7, lr}
 800af70:	b08a      	sub	sp, #40	; 0x28
 800af72:	af02      	add	r7, sp, #8
 800af74:	60f8      	str	r0, [r7, #12]
 800af76:	60b9      	str	r1, [r7, #8]
 800af78:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af7e:	f3ef 8305 	mrs	r3, IPSR
 800af82:	613b      	str	r3, [r7, #16]
  return(result);
 800af84:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af86:	2b00      	cmp	r3, #0
 800af88:	d175      	bne.n	800b076 <osSemaphoreNew+0x108>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d072      	beq.n	800b076 <osSemaphoreNew+0x108>
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	429a      	cmp	r2, r3
 800af96:	d86e      	bhi.n	800b076 <osSemaphoreNew+0x108>
    mem = -1;
 800af98:	f04f 33ff 	mov.w	r3, #4294967295
 800af9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d015      	beq.n	800afd0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d006      	beq.n	800afba <osSemaphoreNew+0x4c>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	2b4f      	cmp	r3, #79	; 0x4f
 800afb2:	d902      	bls.n	800afba <osSemaphoreNew+0x4c>
        mem = 1;
 800afb4:	2301      	movs	r3, #1
 800afb6:	61bb      	str	r3, [r7, #24]
 800afb8:	e00c      	b.n	800afd4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d108      	bne.n	800afd4 <osSemaphoreNew+0x66>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d104      	bne.n	800afd4 <osSemaphoreNew+0x66>
          mem = 0;
 800afca:	2300      	movs	r3, #0
 800afcc:	61bb      	str	r3, [r7, #24]
 800afce:	e001      	b.n	800afd4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afda:	d04c      	beq.n	800b076 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d128      	bne.n	800b034 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800afe2:	69bb      	ldr	r3, [r7, #24]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d10a      	bne.n	800affe <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	2203      	movs	r2, #3
 800afee:	9200      	str	r2, [sp, #0]
 800aff0:	2200      	movs	r2, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	2001      	movs	r0, #1
 800aff6:	f000 ff97 	bl	800bf28 <xQueueGenericCreateStatic>
 800affa:	61f8      	str	r0, [r7, #28]
 800affc:	e005      	b.n	800b00a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800affe:	2203      	movs	r2, #3
 800b000:	2100      	movs	r1, #0
 800b002:	2001      	movs	r0, #1
 800b004:	f001 f808 	bl	800c018 <xQueueGenericCreate>
 800b008:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d022      	beq.n	800b056 <osSemaphoreNew+0xe8>
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01f      	beq.n	800b056 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b016:	2300      	movs	r3, #0
 800b018:	2200      	movs	r2, #0
 800b01a:	2100      	movs	r1, #0
 800b01c:	69f8      	ldr	r0, [r7, #28]
 800b01e:	f001 f8c3 	bl	800c1a8 <xQueueGenericSend>
 800b022:	4603      	mov	r3, r0
 800b024:	2b01      	cmp	r3, #1
 800b026:	d016      	beq.n	800b056 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b028:	69f8      	ldr	r0, [r7, #28]
 800b02a:	f001 fd4f 	bl	800cacc <vQueueDelete>
            hSemaphore = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
 800b032:	e010      	b.n	800b056 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d108      	bne.n	800b04c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	461a      	mov	r2, r3
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f001 f845 	bl	800c0d2 <xQueueCreateCountingSemaphoreStatic>
 800b048:	61f8      	str	r0, [r7, #28]
 800b04a:	e004      	b.n	800b056 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f001 f876 	bl	800c140 <xQueueCreateCountingSemaphore>
 800b054:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00c      	beq.n	800b076 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <osSemaphoreNew+0xfc>
          name = attr->name;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e001      	b.n	800b06e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b06e:	6979      	ldr	r1, [r7, #20]
 800b070:	69f8      	ldr	r0, [r7, #28]
 800b072:	f001 fe77 	bl	800cd64 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b076:	69fb      	ldr	r3, [r7, #28]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3720      	adds	r7, #32
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b08e:	2300      	movs	r3, #0
 800b090:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b098:	f06f 0303 	mvn.w	r3, #3
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	e039      	b.n	800b114 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a0:	f3ef 8305 	mrs	r3, IPSR
 800b0a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d022      	beq.n	800b0f2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b0b2:	f06f 0303 	mvn.w	r3, #3
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	e02c      	b.n	800b114 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b0be:	f107 0308 	add.w	r3, r7, #8
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	6938      	ldr	r0, [r7, #16]
 800b0c8:	f001 fc80 	bl	800c9cc <xQueueReceiveFromISR>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d003      	beq.n	800b0da <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b0d2:	f06f 0302 	mvn.w	r3, #2
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	e01c      	b.n	800b114 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d019      	beq.n	800b114 <osSemaphoreAcquire+0x94>
 800b0e0:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <osSemaphoreAcquire+0xa0>)
 800b0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	e010      	b.n	800b114 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6938      	ldr	r0, [r7, #16]
 800b0f6:	f001 fb5d 	bl	800c7b4 <xQueueSemaphoreTake>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d009      	beq.n	800b114 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b106:	f06f 0301 	mvn.w	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e002      	b.n	800b114 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b10e:	f06f 0302 	mvn.w	r3, #2
 800b112:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b114:	697b      	ldr	r3, [r7, #20]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3718      	adds	r7, #24
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b13a:	f06f 0303 	mvn.w	r3, #3
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	e02c      	b.n	800b19c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b142:	f3ef 8305 	mrs	r3, IPSR
 800b146:	60fb      	str	r3, [r7, #12]
  return(result);
 800b148:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01a      	beq.n	800b184 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b14e:	2300      	movs	r3, #0
 800b150:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b152:	f107 0308 	add.w	r3, r7, #8
 800b156:	4619      	mov	r1, r3
 800b158:	6938      	ldr	r0, [r7, #16]
 800b15a:	f001 f9be 	bl	800c4da <xQueueGiveFromISR>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d003      	beq.n	800b16c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b164:	f06f 0302 	mvn.w	r3, #2
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	e017      	b.n	800b19c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d014      	beq.n	800b19c <osSemaphoreRelease+0x78>
 800b172:	4b0d      	ldr	r3, [pc, #52]	; (800b1a8 <osSemaphoreRelease+0x84>)
 800b174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	e00b      	b.n	800b19c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b184:	2300      	movs	r3, #0
 800b186:	2200      	movs	r2, #0
 800b188:	2100      	movs	r1, #0
 800b18a:	6938      	ldr	r0, [r7, #16]
 800b18c:	f001 f80c 	bl	800c1a8 <xQueueGenericSend>
 800b190:	4603      	mov	r3, r0
 800b192:	2b01      	cmp	r3, #1
 800b194:	d002      	beq.n	800b19c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b196:	f06f 0302 	mvn.w	r3, #2
 800b19a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b19c:	697b      	ldr	r3, [r7, #20]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	e000ed04 	.word	0xe000ed04

0800b1ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08a      	sub	sp, #40	; 0x28
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1bc:	f3ef 8305 	mrs	r3, IPSR
 800b1c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b1c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d15f      	bne.n	800b288 <osMessageQueueNew+0xdc>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d05c      	beq.n	800b288 <osMessageQueueNew+0xdc>
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d059      	beq.n	800b288 <osMessageQueueNew+0xdc>
    mem = -1;
 800b1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d029      	beq.n	800b234 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d012      	beq.n	800b20e <osMessageQueueNew+0x62>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	2b4f      	cmp	r3, #79	; 0x4f
 800b1ee:	d90e      	bls.n	800b20e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	695a      	ldr	r2, [r3, #20]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	fb01 f303 	mul.w	r3, r1, r3
 800b204:	429a      	cmp	r2, r3
 800b206:	d302      	bcc.n	800b20e <osMessageQueueNew+0x62>
        mem = 1;
 800b208:	2301      	movs	r3, #1
 800b20a:	61bb      	str	r3, [r7, #24]
 800b20c:	e014      	b.n	800b238 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d110      	bne.n	800b238 <osMessageQueueNew+0x8c>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10c      	bne.n	800b238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b222:	2b00      	cmp	r3, #0
 800b224:	d108      	bne.n	800b238 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <osMessageQueueNew+0x8c>
          mem = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	61bb      	str	r3, [r7, #24]
 800b232:	e001      	b.n	800b238 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d10b      	bne.n	800b256 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691a      	ldr	r2, [r3, #16]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	2100      	movs	r1, #0
 800b248:	9100      	str	r1, [sp, #0]
 800b24a:	68b9      	ldr	r1, [r7, #8]
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f000 fe6b 	bl	800bf28 <xQueueGenericCreateStatic>
 800b252:	61f8      	str	r0, [r7, #28]
 800b254:	e008      	b.n	800b268 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d105      	bne.n	800b268 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b25c:	2200      	movs	r2, #0
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f000 fed9 	bl	800c018 <xQueueGenericCreate>
 800b266:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00c      	beq.n	800b288 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d003      	beq.n	800b27c <osMessageQueueNew+0xd0>
        name = attr->name;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	e001      	b.n	800b280 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b280:	6979      	ldr	r1, [r7, #20]
 800b282:	69f8      	ldr	r0, [r7, #28]
 800b284:	f001 fd6e 	bl	800cd64 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b288:	69fb      	ldr	r3, [r7, #28]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2ac:	f3ef 8305 	mrs	r3, IPSR
 800b2b0:	617b      	str	r3, [r7, #20]
  return(result);
 800b2b2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d028      	beq.n	800b30a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d005      	beq.n	800b2ca <osMessageQueuePut+0x36>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <osMessageQueuePut+0x36>
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d003      	beq.n	800b2d2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b2ca:	f06f 0303 	mvn.w	r3, #3
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e038      	b.n	800b344 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b2d6:	f107 0210 	add.w	r2, r7, #16
 800b2da:	2300      	movs	r3, #0
 800b2dc:	68b9      	ldr	r1, [r7, #8]
 800b2de:	69b8      	ldr	r0, [r7, #24]
 800b2e0:	f001 f860 	bl	800c3a4 <xQueueGenericSendFromISR>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d003      	beq.n	800b2f2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b2ea:	f06f 0302 	mvn.w	r3, #2
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	e028      	b.n	800b344 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d025      	beq.n	800b344 <osMessageQueuePut+0xb0>
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <osMessageQueuePut+0xbc>)
 800b2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	f3bf 8f6f 	isb	sy
 800b308:	e01c      	b.n	800b344 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <osMessageQueuePut+0x82>
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d103      	bne.n	800b31e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b316:	f06f 0303 	mvn.w	r3, #3
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	e012      	b.n	800b344 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b31e:	2300      	movs	r3, #0
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	69b8      	ldr	r0, [r7, #24]
 800b326:	f000 ff3f 	bl	800c1a8 <xQueueGenericSend>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d009      	beq.n	800b344 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b336:	f06f 0301 	mvn.w	r3, #1
 800b33a:	61fb      	str	r3, [r7, #28]
 800b33c:	e002      	b.n	800b344 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b33e:	f06f 0302 	mvn.w	r3, #2
 800b342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b344:	69fb      	ldr	r3, [r7, #28]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	e000ed04 	.word	0xe000ed04

0800b354 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b354:	b580      	push	{r7, lr}
 800b356:	b088      	sub	sp, #32
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b366:	2300      	movs	r3, #0
 800b368:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36a:	f3ef 8305 	mrs	r3, IPSR
 800b36e:	617b      	str	r3, [r7, #20]
  return(result);
 800b370:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b372:	2b00      	cmp	r3, #0
 800b374:	d028      	beq.n	800b3c8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <osMessageQueueGet+0x34>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <osMessageQueueGet+0x34>
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d003      	beq.n	800b390 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b388:	f06f 0303 	mvn.w	r3, #3
 800b38c:	61fb      	str	r3, [r7, #28]
 800b38e:	e037      	b.n	800b400 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b394:	f107 0310 	add.w	r3, r7, #16
 800b398:	461a      	mov	r2, r3
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	69b8      	ldr	r0, [r7, #24]
 800b39e:	f001 fb15 	bl	800c9cc <xQueueReceiveFromISR>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d003      	beq.n	800b3b0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b3a8:	f06f 0302 	mvn.w	r3, #2
 800b3ac:	61fb      	str	r3, [r7, #28]
 800b3ae:	e027      	b.n	800b400 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d024      	beq.n	800b400 <osMessageQueueGet+0xac>
 800b3b6:	4b15      	ldr	r3, [pc, #84]	; (800b40c <osMessageQueueGet+0xb8>)
 800b3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	e01b      	b.n	800b400 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <osMessageQueueGet+0x80>
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d103      	bne.n	800b3dc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b3d4:	f06f 0303 	mvn.w	r3, #3
 800b3d8:	61fb      	str	r3, [r7, #28]
 800b3da:	e011      	b.n	800b400 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	68b9      	ldr	r1, [r7, #8]
 800b3e0:	69b8      	ldr	r0, [r7, #24]
 800b3e2:	f001 f907 	bl	800c5f4 <xQueueReceive>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d009      	beq.n	800b400 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b3f2:	f06f 0301 	mvn.w	r3, #1
 800b3f6:	61fb      	str	r3, [r7, #28]
 800b3f8:	e002      	b.n	800b400 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b3fa:	f06f 0302 	mvn.w	r3, #2
 800b3fe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b400:	69fb      	ldr	r3, [r7, #28]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3720      	adds	r7, #32
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	e000ed04 	.word	0xe000ed04

0800b410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a07      	ldr	r2, [pc, #28]	; (800b43c <vApplicationGetIdleTaskMemory+0x2c>)
 800b420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	4a06      	ldr	r2, [pc, #24]	; (800b440 <vApplicationGetIdleTaskMemory+0x30>)
 800b426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2280      	movs	r2, #128	; 0x80
 800b42c:	601a      	str	r2, [r3, #0]
}
 800b42e:	bf00      	nop
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	24001edc 	.word	0x24001edc
 800b440:	24001f84 	.word	0x24001f84

0800b444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a07      	ldr	r2, [pc, #28]	; (800b470 <vApplicationGetTimerTaskMemory+0x2c>)
 800b454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4a06      	ldr	r2, [pc, #24]	; (800b474 <vApplicationGetTimerTaskMemory+0x30>)
 800b45a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	24002184 	.word	0x24002184
 800b474:	2400222c 	.word	0x2400222c

0800b478 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b08a      	sub	sp, #40	; 0x28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b480:	2300      	movs	r3, #0
 800b482:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b484:	f001 ff52 	bl	800d32c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b488:	4b5b      	ldr	r3, [pc, #364]	; (800b5f8 <pvPortMalloc+0x180>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b490:	f000 f920 	bl	800b6d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b494:	4b59      	ldr	r3, [pc, #356]	; (800b5fc <pvPortMalloc+0x184>)
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4013      	ands	r3, r2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 8093 	bne.w	800b5c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d01d      	beq.n	800b4e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4a8:	2208      	movs	r2, #8
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d014      	beq.n	800b4e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f023 0307 	bic.w	r3, r3, #7
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d06e      	beq.n	800b5c8 <pvPortMalloc+0x150>
 800b4ea:	4b45      	ldr	r3, [pc, #276]	; (800b600 <pvPortMalloc+0x188>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d869      	bhi.n	800b5c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4f4:	4b43      	ldr	r3, [pc, #268]	; (800b604 <pvPortMalloc+0x18c>)
 800b4f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4f8:	4b42      	ldr	r3, [pc, #264]	; (800b604 <pvPortMalloc+0x18c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4fe:	e004      	b.n	800b50a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d903      	bls.n	800b51c <pvPortMalloc+0xa4>
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d1f1      	bne.n	800b500 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b51c:	4b36      	ldr	r3, [pc, #216]	; (800b5f8 <pvPortMalloc+0x180>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b522:	429a      	cmp	r2, r3
 800b524:	d050      	beq.n	800b5c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2208      	movs	r2, #8
 800b52c:	4413      	add	r3, r2
 800b52e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	2308      	movs	r3, #8
 800b542:	005b      	lsls	r3, r3, #1
 800b544:	429a      	cmp	r2, r3
 800b546:	d91f      	bls.n	800b588 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4413      	add	r3, r2
 800b54e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	2b00      	cmp	r3, #0
 800b558:	d00a      	beq.n	800b570 <pvPortMalloc+0xf8>
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	613b      	str	r3, [r7, #16]
}
 800b56c:	bf00      	nop
 800b56e:	e7fe      	b.n	800b56e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	1ad2      	subs	r2, r2, r3
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b582:	69b8      	ldr	r0, [r7, #24]
 800b584:	f000 f908 	bl	800b798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b588:	4b1d      	ldr	r3, [pc, #116]	; (800b600 <pvPortMalloc+0x188>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	4a1b      	ldr	r2, [pc, #108]	; (800b600 <pvPortMalloc+0x188>)
 800b594:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b596:	4b1a      	ldr	r3, [pc, #104]	; (800b600 <pvPortMalloc+0x188>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4b1b      	ldr	r3, [pc, #108]	; (800b608 <pvPortMalloc+0x190>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d203      	bcs.n	800b5aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5a2:	4b17      	ldr	r3, [pc, #92]	; (800b600 <pvPortMalloc+0x188>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a18      	ldr	r2, [pc, #96]	; (800b608 <pvPortMalloc+0x190>)
 800b5a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <pvPortMalloc+0x184>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5be:	4b13      	ldr	r3, [pc, #76]	; (800b60c <pvPortMalloc+0x194>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	4a11      	ldr	r2, [pc, #68]	; (800b60c <pvPortMalloc+0x194>)
 800b5c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5c8:	f001 febe 	bl	800d348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f003 0307 	and.w	r3, r3, #7
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <pvPortMalloc+0x174>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	60fb      	str	r3, [r7, #12]
}
 800b5e8:	bf00      	nop
 800b5ea:	e7fe      	b.n	800b5ea <pvPortMalloc+0x172>
	return pvReturn;
 800b5ec:	69fb      	ldr	r3, [r7, #28]
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3728      	adds	r7, #40	; 0x28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	2400a634 	.word	0x2400a634
 800b5fc:	2400a648 	.word	0x2400a648
 800b600:	2400a638 	.word	0x2400a638
 800b604:	2400a62c 	.word	0x2400a62c
 800b608:	2400a63c 	.word	0x2400a63c
 800b60c:	2400a640 	.word	0x2400a640

0800b610 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d04d      	beq.n	800b6be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b622:	2308      	movs	r3, #8
 800b624:	425b      	negs	r3, r3
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	4b24      	ldr	r3, [pc, #144]	; (800b6c8 <vPortFree+0xb8>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4013      	ands	r3, r2
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10a      	bne.n	800b654 <vPortFree+0x44>
	__asm volatile
 800b63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b642:	f383 8811 	msr	BASEPRI, r3
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	f3bf 8f4f 	dsb	sy
 800b64e:	60fb      	str	r3, [r7, #12]
}
 800b650:	bf00      	nop
 800b652:	e7fe      	b.n	800b652 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00a      	beq.n	800b672 <vPortFree+0x62>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	60bb      	str	r3, [r7, #8]
}
 800b66e:	bf00      	nop
 800b670:	e7fe      	b.n	800b670 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4b14      	ldr	r3, [pc, #80]	; (800b6c8 <vPortFree+0xb8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01e      	beq.n	800b6be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d11a      	bne.n	800b6be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	4b0e      	ldr	r3, [pc, #56]	; (800b6c8 <vPortFree+0xb8>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	43db      	mvns	r3, r3
 800b692:	401a      	ands	r2, r3
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b698:	f001 fe48 	bl	800d32c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <vPortFree+0xbc>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	4a09      	ldr	r2, [pc, #36]	; (800b6cc <vPortFree+0xbc>)
 800b6a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6aa:	6938      	ldr	r0, [r7, #16]
 800b6ac:	f000 f874 	bl	800b798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6b0:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <vPortFree+0xc0>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	4a06      	ldr	r2, [pc, #24]	; (800b6d0 <vPortFree+0xc0>)
 800b6b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6ba:	f001 fe45 	bl	800d348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6be:	bf00      	nop
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	2400a648 	.word	0x2400a648
 800b6cc:	2400a638 	.word	0x2400a638
 800b6d0:	2400a644 	.word	0x2400a644

0800b6d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6e0:	4b27      	ldr	r3, [pc, #156]	; (800b780 <prvHeapInit+0xac>)
 800b6e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f003 0307 	and.w	r3, r3, #7
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3307      	adds	r3, #7
 800b6f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f023 0307 	bic.w	r3, r3, #7
 800b6fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6fc:	68ba      	ldr	r2, [r7, #8]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	4a1f      	ldr	r2, [pc, #124]	; (800b780 <prvHeapInit+0xac>)
 800b704:	4413      	add	r3, r2
 800b706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b70c:	4a1d      	ldr	r2, [pc, #116]	; (800b784 <prvHeapInit+0xb0>)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b712:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <prvHeapInit+0xb0>)
 800b714:	2200      	movs	r2, #0
 800b716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	4413      	add	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b720:	2208      	movs	r2, #8
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f023 0307 	bic.w	r3, r3, #7
 800b72e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	4a15      	ldr	r2, [pc, #84]	; (800b788 <prvHeapInit+0xb4>)
 800b734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <prvHeapInit+0xb4>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2200      	movs	r2, #0
 800b73c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b73e:	4b12      	ldr	r3, [pc, #72]	; (800b788 <prvHeapInit+0xb4>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <prvHeapInit+0xb4>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4a0a      	ldr	r2, [pc, #40]	; (800b78c <prvHeapInit+0xb8>)
 800b762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	4a09      	ldr	r2, [pc, #36]	; (800b790 <prvHeapInit+0xbc>)
 800b76a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <prvHeapInit+0xc0>)
 800b76e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b772:	601a      	str	r2, [r3, #0]
}
 800b774:	bf00      	nop
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	2400262c 	.word	0x2400262c
 800b784:	2400a62c 	.word	0x2400a62c
 800b788:	2400a634 	.word	0x2400a634
 800b78c:	2400a63c 	.word	0x2400a63c
 800b790:	2400a638 	.word	0x2400a638
 800b794:	2400a648 	.word	0x2400a648

0800b798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7a0:	4b28      	ldr	r3, [pc, #160]	; (800b844 <prvInsertBlockIntoFreeList+0xac>)
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	e002      	b.n	800b7ac <prvInsertBlockIntoFreeList+0x14>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d8f7      	bhi.n	800b7a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d108      	bne.n	800b7da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	441a      	add	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	441a      	add	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d118      	bne.n	800b820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	4b15      	ldr	r3, [pc, #84]	; (800b848 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d00d      	beq.n	800b816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	441a      	add	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	e008      	b.n	800b828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b816:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <prvInsertBlockIntoFreeList+0xb0>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	e003      	b.n	800b828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d002      	beq.n	800b836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	687a      	ldr	r2, [r7, #4]
 800b834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b836:	bf00      	nop
 800b838:	3714      	adds	r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	2400a62c 	.word	0x2400a62c
 800b848:	2400a634 	.word	0x2400a634

0800b84c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f103 0208 	add.w	r2, r3, #8
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f04f 32ff 	mov.w	r2, #4294967295
 800b864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f103 0208 	add.w	r2, r3, #8
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f103 0208 	add.w	r2, r3, #8
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b89a:	bf00      	nop
 800b89c:	370c      	adds	r7, #12
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
 800b8ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	689a      	ldr	r2, [r3, #8]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	683a      	ldr	r2, [r7, #0]
 800b8ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	1c5a      	adds	r2, r3, #1
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	601a      	str	r2, [r3, #0]
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b085      	sub	sp, #20
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d103      	bne.n	800b90e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	691b      	ldr	r3, [r3, #16]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	e00c      	b.n	800b928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3308      	adds	r3, #8
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	e002      	b.n	800b91c <vListInsert+0x2e>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	429a      	cmp	r2, r3
 800b926:	d2f6      	bcs.n	800b916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	601a      	str	r2, [r3, #0]
}
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6892      	ldr	r2, [r2, #8]
 800b976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6852      	ldr	r2, [r2, #4]
 800b980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d103      	bne.n	800b994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3b04      	subs	r3, #4
 800b9c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	3b04      	subs	r3, #4
 800b9d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	f023 0201 	bic.w	r2, r3, #1
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	3b04      	subs	r3, #4
 800b9e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ba18 <pxPortInitialiseStack+0x64>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	3b14      	subs	r3, #20
 800b9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3b04      	subs	r3, #4
 800b9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f06f 0202 	mvn.w	r2, #2
 800ba02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3b20      	subs	r3, #32
 800ba08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3714      	adds	r7, #20
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr
 800ba18:	0800ba1d 	.word	0x0800ba1d

0800ba1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba26:	4b12      	ldr	r3, [pc, #72]	; (800ba70 <prvTaskExitError+0x54>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d00a      	beq.n	800ba46 <prvTaskExitError+0x2a>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	60fb      	str	r3, [r7, #12]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <prvTaskExitError+0x28>
	__asm volatile
 800ba46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4a:	f383 8811 	msr	BASEPRI, r3
 800ba4e:	f3bf 8f6f 	isb	sy
 800ba52:	f3bf 8f4f 	dsb	sy
 800ba56:	60bb      	str	r3, [r7, #8]
}
 800ba58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba5a:	bf00      	nop
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0fc      	beq.n	800ba5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba62:	bf00      	nop
 800ba64:	bf00      	nop
 800ba66:	3714      	adds	r7, #20
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	24000014 	.word	0x24000014
	...

0800ba80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba80:	4b07      	ldr	r3, [pc, #28]	; (800baa0 <pxCurrentTCBConst2>)
 800ba82:	6819      	ldr	r1, [r3, #0]
 800ba84:	6808      	ldr	r0, [r1, #0]
 800ba86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8a:	f380 8809 	msr	PSP, r0
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8811 	msr	BASEPRI, r0
 800ba9a:	4770      	bx	lr
 800ba9c:	f3af 8000 	nop.w

0800baa0 <pxCurrentTCBConst2>:
 800baa0:	2400a694 	.word	0x2400a694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800baa8:	4808      	ldr	r0, [pc, #32]	; (800bacc <prvPortStartFirstTask+0x24>)
 800baaa:	6800      	ldr	r0, [r0, #0]
 800baac:	6800      	ldr	r0, [r0, #0]
 800baae:	f380 8808 	msr	MSP, r0
 800bab2:	f04f 0000 	mov.w	r0, #0
 800bab6:	f380 8814 	msr	CONTROL, r0
 800baba:	b662      	cpsie	i
 800babc:	b661      	cpsie	f
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	df00      	svc	0
 800bac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baca:	bf00      	nop
 800bacc:	e000ed08 	.word	0xe000ed08

0800bad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bad6:	4b46      	ldr	r3, [pc, #280]	; (800bbf0 <xPortStartScheduler+0x120>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a46      	ldr	r2, [pc, #280]	; (800bbf4 <xPortStartScheduler+0x124>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d10a      	bne.n	800baf6 <xPortStartScheduler+0x26>
	__asm volatile
 800bae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae4:	f383 8811 	msr	BASEPRI, r3
 800bae8:	f3bf 8f6f 	isb	sy
 800baec:	f3bf 8f4f 	dsb	sy
 800baf0:	613b      	str	r3, [r7, #16]
}
 800baf2:	bf00      	nop
 800baf4:	e7fe      	b.n	800baf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baf6:	4b3e      	ldr	r3, [pc, #248]	; (800bbf0 <xPortStartScheduler+0x120>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a3f      	ldr	r2, [pc, #252]	; (800bbf8 <xPortStartScheduler+0x128>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d10a      	bne.n	800bb16 <xPortStartScheduler+0x46>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	60fb      	str	r3, [r7, #12]
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb16:	4b39      	ldr	r3, [pc, #228]	; (800bbfc <xPortStartScheduler+0x12c>)
 800bb18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	22ff      	movs	r2, #255	; 0xff
 800bb26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	4b31      	ldr	r3, [pc, #196]	; (800bc00 <xPortStartScheduler+0x130>)
 800bb3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb3e:	4b31      	ldr	r3, [pc, #196]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb40:	2207      	movs	r2, #7
 800bb42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb44:	e009      	b.n	800bb5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb46:	4b2f      	ldr	r3, [pc, #188]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	4a2d      	ldr	r2, [pc, #180]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb50:	78fb      	ldrb	r3, [r7, #3]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d0ef      	beq.n	800bb46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb66:	4b27      	ldr	r3, [pc, #156]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f1c3 0307 	rsb	r3, r3, #7
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d00a      	beq.n	800bb88 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	60bb      	str	r3, [r7, #8]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb88:	4b1e      	ldr	r3, [pc, #120]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb9a:	4a1a      	ldr	r2, [pc, #104]	; (800bc04 <xPortStartScheduler+0x134>)
 800bb9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bba6:	4b18      	ldr	r3, [pc, #96]	; (800bc08 <xPortStartScheduler+0x138>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a17      	ldr	r2, [pc, #92]	; (800bc08 <xPortStartScheduler+0x138>)
 800bbac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbb2:	4b15      	ldr	r3, [pc, #84]	; (800bc08 <xPortStartScheduler+0x138>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a14      	ldr	r2, [pc, #80]	; (800bc08 <xPortStartScheduler+0x138>)
 800bbb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbbe:	f000 f8dd 	bl	800bd7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbc2:	4b12      	ldr	r3, [pc, #72]	; (800bc0c <xPortStartScheduler+0x13c>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbc8:	f000 f8fc 	bl	800bdc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbcc:	4b10      	ldr	r3, [pc, #64]	; (800bc10 <xPortStartScheduler+0x140>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4a0f      	ldr	r2, [pc, #60]	; (800bc10 <xPortStartScheduler+0x140>)
 800bbd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbd8:	f7ff ff66 	bl	800baa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbdc:	f001 fd1c 	bl	800d618 <vTaskSwitchContext>
	prvTaskExitError();
 800bbe0:	f7ff ff1c 	bl	800ba1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	e000ed00 	.word	0xe000ed00
 800bbf4:	410fc271 	.word	0x410fc271
 800bbf8:	410fc270 	.word	0x410fc270
 800bbfc:	e000e400 	.word	0xe000e400
 800bc00:	2400a64c 	.word	0x2400a64c
 800bc04:	2400a650 	.word	0x2400a650
 800bc08:	e000ed20 	.word	0xe000ed20
 800bc0c:	24000014 	.word	0x24000014
 800bc10:	e000ef34 	.word	0xe000ef34

0800bc14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	607b      	str	r3, [r7, #4]
}
 800bc2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <vPortEnterCritical+0x58>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3301      	adds	r3, #1
 800bc34:	4a0d      	ldr	r2, [pc, #52]	; (800bc6c <vPortEnterCritical+0x58>)
 800bc36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc38:	4b0c      	ldr	r3, [pc, #48]	; (800bc6c <vPortEnterCritical+0x58>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d10f      	bne.n	800bc60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <vPortEnterCritical+0x5c>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00a      	beq.n	800bc60 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	603b      	str	r3, [r7, #0]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <vPortEnterCritical+0x4a>
	}
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	24000014 	.word	0x24000014
 800bc70:	e000ed04 	.word	0xe000ed04

0800bc74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc7a:	4b12      	ldr	r3, [pc, #72]	; (800bcc4 <vPortExitCritical+0x50>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <vPortExitCritical+0x24>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	607b      	str	r3, [r7, #4]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc98:	4b0a      	ldr	r3, [pc, #40]	; (800bcc4 <vPortExitCritical+0x50>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	4a09      	ldr	r2, [pc, #36]	; (800bcc4 <vPortExitCritical+0x50>)
 800bca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bca2:	4b08      	ldr	r3, [pc, #32]	; (800bcc4 <vPortExitCritical+0x50>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d105      	bne.n	800bcb6 <vPortExitCritical+0x42>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bcb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	24000014 	.word	0x24000014
	...

0800bcd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcd0:	f3ef 8009 	mrs	r0, PSP
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <pxCurrentTCBConst>)
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	f01e 0f10 	tst.w	lr, #16
 800bce0:	bf08      	it	eq
 800bce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcea:	6010      	str	r0, [r2, #0]
 800bcec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bcf4:	f380 8811 	msr	BASEPRI, r0
 800bcf8:	f3bf 8f4f 	dsb	sy
 800bcfc:	f3bf 8f6f 	isb	sy
 800bd00:	f001 fc8a 	bl	800d618 <vTaskSwitchContext>
 800bd04:	f04f 0000 	mov.w	r0, #0
 800bd08:	f380 8811 	msr	BASEPRI, r0
 800bd0c:	bc09      	pop	{r0, r3}
 800bd0e:	6819      	ldr	r1, [r3, #0]
 800bd10:	6808      	ldr	r0, [r1, #0]
 800bd12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd16:	f01e 0f10 	tst.w	lr, #16
 800bd1a:	bf08      	it	eq
 800bd1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd20:	f380 8809 	msr	PSP, r0
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	f3af 8000 	nop.w

0800bd30 <pxCurrentTCBConst>:
 800bd30:	2400a694 	.word	0x2400a694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd34:	bf00      	nop
 800bd36:	bf00      	nop

0800bd38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd42:	f383 8811 	msr	BASEPRI, r3
 800bd46:	f3bf 8f6f 	isb	sy
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	607b      	str	r3, [r7, #4]
}
 800bd50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd52:	f001 fba7 	bl	800d4a4 <xTaskIncrementTick>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d003      	beq.n	800bd64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd5c:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <xPortSysTickHandler+0x40>)
 800bd5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	2300      	movs	r3, #0
 800bd66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f383 8811 	msr	BASEPRI, r3
}
 800bd6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	e000ed04 	.word	0xe000ed04

0800bd7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd80:	4b0b      	ldr	r3, [pc, #44]	; (800bdb0 <vPortSetupTimerInterrupt+0x34>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <vPortSetupTimerInterrupt+0x38>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <vPortSetupTimerInterrupt+0x3c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <vPortSetupTimerInterrupt+0x40>)
 800bd92:	fba2 2303 	umull	r2, r3, r2, r3
 800bd96:	099b      	lsrs	r3, r3, #6
 800bd98:	4a09      	ldr	r2, [pc, #36]	; (800bdc0 <vPortSetupTimerInterrupt+0x44>)
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd9e:	4b04      	ldr	r3, [pc, #16]	; (800bdb0 <vPortSetupTimerInterrupt+0x34>)
 800bda0:	2207      	movs	r2, #7
 800bda2:	601a      	str	r2, [r3, #0]
}
 800bda4:	bf00      	nop
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	e000e010 	.word	0xe000e010
 800bdb4:	e000e018 	.word	0xe000e018
 800bdb8:	24000018 	.word	0x24000018
 800bdbc:	10624dd3 	.word	0x10624dd3
 800bdc0:	e000e014 	.word	0xe000e014

0800bdc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdd4 <vPortEnableVFP+0x10>
 800bdc8:	6801      	ldr	r1, [r0, #0]
 800bdca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdce:	6001      	str	r1, [r0, #0]
 800bdd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdd2:	bf00      	nop
 800bdd4:	e000ed88 	.word	0xe000ed88

0800bdd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdd8:	b480      	push	{r7}
 800bdda:	b085      	sub	sp, #20
 800bddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdde:	f3ef 8305 	mrs	r3, IPSR
 800bde2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2b0f      	cmp	r3, #15
 800bde8:	d914      	bls.n	800be14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdea:	4a17      	ldr	r2, [pc, #92]	; (800be48 <vPortValidateInterruptPriority+0x70>)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdf4:	4b15      	ldr	r3, [pc, #84]	; (800be4c <vPortValidateInterruptPriority+0x74>)
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	7afa      	ldrb	r2, [r7, #11]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d20a      	bcs.n	800be14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	607b      	str	r3, [r7, #4]
}
 800be10:	bf00      	nop
 800be12:	e7fe      	b.n	800be12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be14:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <vPortValidateInterruptPriority+0x78>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be1c:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <vPortValidateInterruptPriority+0x7c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	429a      	cmp	r2, r3
 800be22:	d90a      	bls.n	800be3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be28:	f383 8811 	msr	BASEPRI, r3
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f3bf 8f4f 	dsb	sy
 800be34:	603b      	str	r3, [r7, #0]
}
 800be36:	bf00      	nop
 800be38:	e7fe      	b.n	800be38 <vPortValidateInterruptPriority+0x60>
	}
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	e000e3f0 	.word	0xe000e3f0
 800be4c:	2400a64c 	.word	0x2400a64c
 800be50:	e000ed0c 	.word	0xe000ed0c
 800be54:	2400a650 	.word	0x2400a650

0800be58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10a      	bne.n	800be82 <xQueueGenericReset+0x2a>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	60bb      	str	r3, [r7, #8]
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be82:	f7ff fec7 	bl	800bc14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8e:	68f9      	ldr	r1, [r7, #12]
 800be90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be92:	fb01 f303 	mul.w	r3, r1, r3
 800be96:	441a      	add	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb2:	3b01      	subs	r3, #1
 800beb4:	68f9      	ldr	r1, [r7, #12]
 800beb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800beb8:	fb01 f303 	mul.w	r3, r1, r3
 800bebc:	441a      	add	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	22ff      	movs	r2, #255	; 0xff
 800bec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	22ff      	movs	r2, #255	; 0xff
 800bece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d114      	bne.n	800bf02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	691b      	ldr	r3, [r3, #16]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d01a      	beq.n	800bf16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3310      	adds	r3, #16
 800bee4:	4618      	mov	r0, r3
 800bee6:	f001 fc4b 	bl	800d780 <xTaskRemoveFromEventList>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d012      	beq.n	800bf16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bef0:	4b0c      	ldr	r3, [pc, #48]	; (800bf24 <xQueueGenericReset+0xcc>)
 800bef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bef6:	601a      	str	r2, [r3, #0]
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	e009      	b.n	800bf16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	3310      	adds	r3, #16
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff fca0 	bl	800b84c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	3324      	adds	r3, #36	; 0x24
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fc9b 	bl	800b84c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf16:	f7ff fead 	bl	800bc74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf1a:	2301      	movs	r3, #1
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b08e      	sub	sp, #56	; 0x38
 800bf2c:	af02      	add	r7, sp, #8
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d10a      	bne.n	800bf52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf40:	f383 8811 	msr	BASEPRI, r3
 800bf44:	f3bf 8f6f 	isb	sy
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <xQueueGenericCreateStatic+0x52>
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <xQueueGenericCreateStatic+0x56>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e000      	b.n	800bf80 <xQueueGenericCreateStatic+0x58>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10a      	bne.n	800bf9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	623b      	str	r3, [r7, #32]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <xQueueGenericCreateStatic+0x7e>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <xQueueGenericCreateStatic+0x82>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <xQueueGenericCreateStatic+0x84>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	61fb      	str	r3, [r7, #28]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfc6:	2350      	movs	r3, #80	; 0x50
 800bfc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b50      	cmp	r3, #80	; 0x50
 800bfce:	d00a      	beq.n	800bfe6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	61bb      	str	r3, [r7, #24]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfe6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00d      	beq.n	800c00e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	2201      	movs	r2, #1
 800bff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bffa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	4613      	mov	r3, r2
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	68b9      	ldr	r1, [r7, #8]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 f83f 	bl	800c08c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c010:	4618      	mov	r0, r3
 800c012:	3730      	adds	r7, #48	; 0x30
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	613b      	str	r3, [r7, #16]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	fb02 f303 	mul.w	r3, r2, r3
 800c04a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	3350      	adds	r3, #80	; 0x50
 800c050:	4618      	mov	r0, r3
 800c052:	f7ff fa11 	bl	800b478 <pvPortMalloc>
 800c056:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d011      	beq.n	800c082 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	3350      	adds	r3, #80	; 0x50
 800c066:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c070:	79fa      	ldrb	r2, [r7, #7]
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	4613      	mov	r3, r2
 800c078:	697a      	ldr	r2, [r7, #20]
 800c07a:	68b9      	ldr	r1, [r7, #8]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f805 	bl	800c08c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c082:	69bb      	ldr	r3, [r7, #24]
	}
 800c084:	4618      	mov	r0, r3
 800c086:	3720      	adds	r7, #32
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
 800c098:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d103      	bne.n	800c0a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	e002      	b.n	800c0ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	69b8      	ldr	r0, [r7, #24]
 800c0be:	f7ff fecb 	bl	800be58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	78fa      	ldrb	r2, [r7, #3]
 800c0c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0ca:	bf00      	nop
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b08a      	sub	sp, #40	; 0x28
 800c0d6:	af02      	add	r7, sp, #8
 800c0d8:	60f8      	str	r0, [r7, #12]
 800c0da:	60b9      	str	r1, [r7, #8]
 800c0dc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10a      	bne.n	800c0fa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e8:	f383 8811 	msr	BASEPRI, r3
 800c0ec:	f3bf 8f6f 	isb	sy
 800c0f0:	f3bf 8f4f 	dsb	sy
 800c0f4:	61bb      	str	r3, [r7, #24]
}
 800c0f6:	bf00      	nop
 800c0f8:	e7fe      	b.n	800c0f8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d90a      	bls.n	800c118 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	617b      	str	r3, [r7, #20]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c118:	2302      	movs	r3, #2
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	2100      	movs	r1, #0
 800c122:	68f8      	ldr	r0, [r7, #12]
 800c124:	f7ff ff00 	bl	800bf28 <xQueueGenericCreateStatic>
 800c128:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c136:	69fb      	ldr	r3, [r7, #28]
	}
 800c138:	4618      	mov	r0, r3
 800c13a:	3720      	adds	r7, #32
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10a      	bne.n	800c166 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	f383 8811 	msr	BASEPRI, r3
 800c158:	f3bf 8f6f 	isb	sy
 800c15c:	f3bf 8f4f 	dsb	sy
 800c160:	613b      	str	r3, [r7, #16]
}
 800c162:	bf00      	nop
 800c164:	e7fe      	b.n	800c164 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d90a      	bls.n	800c184 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	60fb      	str	r3, [r7, #12]
}
 800c180:	bf00      	nop
 800c182:	e7fe      	b.n	800c182 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c184:	2202      	movs	r2, #2
 800c186:	2100      	movs	r1, #0
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff ff45 	bl	800c018 <xQueueGenericCreate>
 800c18e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c19c:	697b      	ldr	r3, [r7, #20]
	}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08e      	sub	sp, #56	; 0x38
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <xQueueGenericSend+0x32>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1d6:	bf00      	nop
 800c1d8:	e7fe      	b.n	800c1d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d103      	bne.n	800c1e8 <xQueueGenericSend+0x40>
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <xQueueGenericSend+0x44>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <xQueueGenericSend+0x46>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <xQueueGenericSend+0x60>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d103      	bne.n	800c216 <xQueueGenericSend+0x6e>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <xQueueGenericSend+0x72>
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <xQueueGenericSend+0x74>
 800c21a:	2300      	movs	r3, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <xQueueGenericSend+0x8e>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	623b      	str	r3, [r7, #32]
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c236:	f001 fc65 	bl	800db04 <xTaskGetSchedulerState>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <xQueueGenericSend+0x9e>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <xQueueGenericSend+0xa2>
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <xQueueGenericSend+0xa4>
 800c24a:	2300      	movs	r3, #0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10a      	bne.n	800c266 <xQueueGenericSend+0xbe>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	61fb      	str	r3, [r7, #28]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c266:	f7ff fcd5 	bl	800bc14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c272:	429a      	cmp	r2, r3
 800c274:	d302      	bcc.n	800c27c <xQueueGenericSend+0xd4>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d129      	bne.n	800c2d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c282:	f000 fc5e 	bl	800cb42 <prvCopyDataToQueue>
 800c286:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d010      	beq.n	800c2b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	3324      	adds	r3, #36	; 0x24
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fa73 	bl	800d780 <xTaskRemoveFromEventList>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d013      	beq.n	800c2c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2a0:	4b3f      	ldr	r3, [pc, #252]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	e00a      	b.n	800c2c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2b8:	4b39      	ldr	r3, [pc, #228]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2c8:	f7ff fcd4 	bl	800bc74 <vPortExitCritical>
				return pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e063      	b.n	800c398 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d103      	bne.n	800c2de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2d6:	f7ff fccd 	bl	800bc74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e05c      	b.n	800c398 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 faad 	bl	800d848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2f2:	f7ff fcbf 	bl	800bc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2f6:	f001 f819 	bl	800d32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2fa:	f7ff fc8b 	bl	800bc14 <vPortEnterCritical>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c304:	b25b      	sxtb	r3, r3
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30a:	d103      	bne.n	800c314 <xQueueGenericSend+0x16c>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c320:	d103      	bne.n	800c32a <xQueueGenericSend+0x182>
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c32a:	f7ff fca3 	bl	800bc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c32e:	1d3a      	adds	r2, r7, #4
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f001 fa9c 	bl	800d874 <xTaskCheckForTimeOut>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d124      	bne.n	800c38c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c344:	f000 fcf5 	bl	800cd32 <prvIsQueueFull>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	3310      	adds	r3, #16
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f001 f9c2 	bl	800d6e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c35c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c35e:	f000 fc80 	bl	800cc62 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c362:	f000 fff1 	bl	800d348 <xTaskResumeAll>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f47f af7c 	bne.w	800c266 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	e772      	b.n	800c266 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c382:	f000 fc6e 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c386:	f000 ffdf 	bl	800d348 <xTaskResumeAll>
 800c38a:	e76c      	b.n	800c266 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38e:	f000 fc68 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c392:	f000 ffd9 	bl	800d348 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c396:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3738      	adds	r7, #56	; 0x38
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b090      	sub	sp, #64	; 0x40
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10a      	bne.n	800c3d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3ce:	bf00      	nop
 800c3d0:	e7fe      	b.n	800c3d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d103      	bne.n	800c3e0 <xQueueGenericSendFromISR+0x3c>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <xQueueGenericSendFromISR+0x40>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e000      	b.n	800c3e6 <xQueueGenericSendFromISR+0x42>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10a      	bne.n	800c400 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3fc:	bf00      	nop
 800c3fe:	e7fe      	b.n	800c3fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	2b02      	cmp	r3, #2
 800c404:	d103      	bne.n	800c40e <xQueueGenericSendFromISR+0x6a>
 800c406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d101      	bne.n	800c412 <xQueueGenericSendFromISR+0x6e>
 800c40e:	2301      	movs	r3, #1
 800c410:	e000      	b.n	800c414 <xQueueGenericSendFromISR+0x70>
 800c412:	2300      	movs	r3, #0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	623b      	str	r3, [r7, #32]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c42e:	f7ff fcd3 	bl	800bdd8 <vPortValidateInterruptPriority>
	__asm volatile
 800c432:	f3ef 8211 	mrs	r2, BASEPRI
 800c436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43a:	f383 8811 	msr	BASEPRI, r3
 800c43e:	f3bf 8f6f 	isb	sy
 800c442:	f3bf 8f4f 	dsb	sy
 800c446:	61fa      	str	r2, [r7, #28]
 800c448:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c44a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c44c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c456:	429a      	cmp	r2, r3
 800c458:	d302      	bcc.n	800c460 <xQueueGenericSendFromISR+0xbc>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d12f      	bne.n	800c4c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	68b9      	ldr	r1, [r7, #8]
 800c474:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c476:	f000 fb64 	bl	800cb42 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c47a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d112      	bne.n	800c4aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d016      	beq.n	800c4ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48e:	3324      	adds	r3, #36	; 0x24
 800c490:	4618      	mov	r0, r3
 800c492:	f001 f975 	bl	800d780 <xTaskRemoveFromEventList>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00e      	beq.n	800c4ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00b      	beq.n	800c4ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	e007      	b.n	800c4ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	b25a      	sxtb	r2, r3
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c4be:	e001      	b.n	800c4c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f383 8811 	msr	BASEPRI, r3
}
 800c4ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3740      	adds	r7, #64	; 0x40
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b08e      	sub	sp, #56	; 0x38
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d10a      	bne.n	800c504 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	623b      	str	r3, [r7, #32]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00a      	beq.n	800c522 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	61fb      	str	r3, [r7, #28]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d103      	bne.n	800c532 <xQueueGiveFromISR+0x58>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <xQueueGiveFromISR+0x5c>
 800c532:	2301      	movs	r3, #1
 800c534:	e000      	b.n	800c538 <xQueueGiveFromISR+0x5e>
 800c536:	2300      	movs	r3, #0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10a      	bne.n	800c552 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c540:	f383 8811 	msr	BASEPRI, r3
 800c544:	f3bf 8f6f 	isb	sy
 800c548:	f3bf 8f4f 	dsb	sy
 800c54c:	61bb      	str	r3, [r7, #24]
}
 800c54e:	bf00      	nop
 800c550:	e7fe      	b.n	800c550 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c552:	f7ff fc41 	bl	800bdd8 <vPortValidateInterruptPriority>
	__asm volatile
 800c556:	f3ef 8211 	mrs	r2, BASEPRI
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	617a      	str	r2, [r7, #20]
 800c56c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c56e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c570:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c576:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57e:	429a      	cmp	r2, r3
 800c580:	d22b      	bcs.n	800c5da <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59c:	d112      	bne.n	800c5c4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d016      	beq.n	800c5d4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	3324      	adds	r3, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f001 f8e8 	bl	800d780 <xTaskRemoveFromEventList>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00e      	beq.n	800c5d4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
 800c5c2:	e007      	b.n	800c5d4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	b25a      	sxtb	r2, r3
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d8:	e001      	b.n	800c5de <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f383 8811 	msr	BASEPRI, r3
}
 800c5e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3738      	adds	r7, #56	; 0x38
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08c      	sub	sp, #48	; 0x30
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10a      	bne.n	800c624 <xQueueReceive+0x30>
	__asm volatile
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	623b      	str	r3, [r7, #32]
}
 800c620:	bf00      	nop
 800c622:	e7fe      	b.n	800c622 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <xQueueReceive+0x3e>
 800c62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <xQueueReceive+0x42>
 800c632:	2301      	movs	r3, #1
 800c634:	e000      	b.n	800c638 <xQueueReceive+0x44>
 800c636:	2300      	movs	r3, #0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d10a      	bne.n	800c652 <xQueueReceive+0x5e>
	__asm volatile
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	61fb      	str	r3, [r7, #28]
}
 800c64e:	bf00      	nop
 800c650:	e7fe      	b.n	800c650 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c652:	f001 fa57 	bl	800db04 <xTaskGetSchedulerState>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <xQueueReceive+0x6e>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <xQueueReceive+0x72>
 800c662:	2301      	movs	r3, #1
 800c664:	e000      	b.n	800c668 <xQueueReceive+0x74>
 800c666:	2300      	movs	r3, #0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10a      	bne.n	800c682 <xQueueReceive+0x8e>
	__asm volatile
 800c66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c670:	f383 8811 	msr	BASEPRI, r3
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	61bb      	str	r3, [r7, #24]
}
 800c67e:	bf00      	nop
 800c680:	e7fe      	b.n	800c680 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c682:	f7ff fac7 	bl	800bc14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d01f      	beq.n	800c6d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c692:	68b9      	ldr	r1, [r7, #8]
 800c694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c696:	f000 fabe 	bl	800cc16 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	1e5a      	subs	r2, r3, #1
 800c69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	691b      	ldr	r3, [r3, #16]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00f      	beq.n	800c6ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ac:	3310      	adds	r3, #16
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 f866 	bl	800d780 <xTaskRemoveFromEventList>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d007      	beq.n	800c6ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6ba:	4b3d      	ldr	r3, [pc, #244]	; (800c7b0 <xQueueReceive+0x1bc>)
 800c6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c0:	601a      	str	r2, [r3, #0]
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6ca:	f7ff fad3 	bl	800bc74 <vPortExitCritical>
				return pdPASS;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e069      	b.n	800c7a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d103      	bne.n	800c6e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6d8:	f7ff facc 	bl	800bc74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e062      	b.n	800c7a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d106      	bne.n	800c6f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6e6:	f107 0310 	add.w	r3, r7, #16
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f001 f8ac 	bl	800d848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6f4:	f7ff fabe 	bl	800bc74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6f8:	f000 fe18 	bl	800d32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6fc:	f7ff fa8a 	bl	800bc14 <vPortEnterCritical>
 800c700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c706:	b25b      	sxtb	r3, r3
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d103      	bne.n	800c716 <xQueueReceive+0x122>
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	2200      	movs	r2, #0
 800c712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d103      	bne.n	800c72c <xQueueReceive+0x138>
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c72c:	f7ff faa2 	bl	800bc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c730:	1d3a      	adds	r2, r7, #4
 800c732:	f107 0310 	add.w	r3, r7, #16
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f001 f89b 	bl	800d874 <xTaskCheckForTimeOut>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b00      	cmp	r3, #0
 800c742:	d123      	bne.n	800c78c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c746:	f000 fade 	bl	800cd06 <prvIsQueueEmpty>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d017      	beq.n	800c780 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c752:	3324      	adds	r3, #36	; 0x24
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	4611      	mov	r1, r2
 800c758:	4618      	mov	r0, r3
 800c75a:	f000 ffc1 	bl	800d6e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c760:	f000 fa7f 	bl	800cc62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c764:	f000 fdf0 	bl	800d348 <xTaskResumeAll>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d189      	bne.n	800c682 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c76e:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <xQueueReceive+0x1bc>)
 800c770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
 800c776:	f3bf 8f4f 	dsb	sy
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	e780      	b.n	800c682 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c782:	f000 fa6e 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c786:	f000 fddf 	bl	800d348 <xTaskResumeAll>
 800c78a:	e77a      	b.n	800c682 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c78e:	f000 fa68 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c792:	f000 fdd9 	bl	800d348 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c798:	f000 fab5 	bl	800cd06 <prvIsQueueEmpty>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f43f af6f 	beq.w	800c682 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3730      	adds	r7, #48	; 0x30
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	e000ed04 	.word	0xe000ed04

0800c7b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08e      	sub	sp, #56	; 0x38
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	623b      	str	r3, [r7, #32]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d00a      	beq.n	800c804 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	61fb      	str	r3, [r7, #28]
}
 800c800:	bf00      	nop
 800c802:	e7fe      	b.n	800c802 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c804:	f001 f97e 	bl	800db04 <xTaskGetSchedulerState>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d102      	bne.n	800c814 <xQueueSemaphoreTake+0x60>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <xQueueSemaphoreTake+0x64>
 800c814:	2301      	movs	r3, #1
 800c816:	e000      	b.n	800c81a <xQueueSemaphoreTake+0x66>
 800c818:	2300      	movs	r3, #0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61bb      	str	r3, [r7, #24]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c834:	f7ff f9ee 	bl	800bc14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	2b00      	cmp	r3, #0
 800c842:	d024      	beq.n	800c88e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c846:	1e5a      	subs	r2, r3, #1
 800c848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d104      	bne.n	800c85e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c854:	f001 facc 	bl	800ddf0 <pvTaskIncrementMutexHeldCount>
 800c858:	4602      	mov	r2, r0
 800c85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00f      	beq.n	800c886 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c868:	3310      	adds	r3, #16
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 ff88 	bl	800d780 <xTaskRemoveFromEventList>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d007      	beq.n	800c886 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c876:	4b54      	ldr	r3, [pc, #336]	; (800c9c8 <xQueueSemaphoreTake+0x214>)
 800c878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c886:	f7ff f9f5 	bl	800bc74 <vPortExitCritical>
				return pdPASS;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e097      	b.n	800c9be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d111      	bne.n	800c8b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	617b      	str	r3, [r7, #20]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8b0:	f7ff f9e0 	bl	800bc74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e082      	b.n	800c9be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d106      	bne.n	800c8cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8be:	f107 030c 	add.w	r3, r7, #12
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 ffc0 	bl	800d848 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8cc:	f7ff f9d2 	bl	800bc74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8d0:	f000 fd2c 	bl	800d32c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8d4:	f7ff f99e 	bl	800bc14 <vPortEnterCritical>
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8de:	b25b      	sxtb	r3, r3
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d103      	bne.n	800c8ee <xQueueSemaphoreTake+0x13a>
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8f4:	b25b      	sxtb	r3, r3
 800c8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8fa:	d103      	bne.n	800c904 <xQueueSemaphoreTake+0x150>
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c904:	f7ff f9b6 	bl	800bc74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c908:	463a      	mov	r2, r7
 800c90a:	f107 030c 	add.w	r3, r7, #12
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 ffaf 	bl	800d874 <xTaskCheckForTimeOut>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d132      	bne.n	800c982 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c91e:	f000 f9f2 	bl	800cd06 <prvIsQueueEmpty>
 800c922:	4603      	mov	r3, r0
 800c924:	2b00      	cmp	r3, #0
 800c926:	d026      	beq.n	800c976 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c930:	f7ff f970 	bl	800bc14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	4618      	mov	r0, r3
 800c93a:	f001 f901 	bl	800db40 <xTaskPriorityInherit>
 800c93e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c940:	f7ff f998 	bl	800bc74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	3324      	adds	r3, #36	; 0x24
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	4611      	mov	r1, r2
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 fec7 	bl	800d6e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c954:	f000 f985 	bl	800cc62 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c958:	f000 fcf6 	bl	800d348 <xTaskResumeAll>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f47f af68 	bne.w	800c834 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c964:	4b18      	ldr	r3, [pc, #96]	; (800c9c8 <xQueueSemaphoreTake+0x214>)
 800c966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	f3bf 8f6f 	isb	sy
 800c974:	e75e      	b.n	800c834 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c978:	f000 f973 	bl	800cc62 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c97c:	f000 fce4 	bl	800d348 <xTaskResumeAll>
 800c980:	e758      	b.n	800c834 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c984:	f000 f96d 	bl	800cc62 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c988:	f000 fcde 	bl	800d348 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c98e:	f000 f9ba 	bl	800cd06 <prvIsQueueEmpty>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	f43f af4d 	beq.w	800c834 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00d      	beq.n	800c9bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c9a0:	f7ff f938 	bl	800bc14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a6:	f000 f8b4 	bl	800cb12 <prvGetDisinheritPriorityAfterTimeout>
 800c9aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f001 f99a 	bl	800dcec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9b8:	f7ff f95c 	bl	800bc74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3738      	adds	r7, #56	; 0x38
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	623b      	str	r3, [r7, #32]
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d103      	bne.n	800ca06 <xQueueReceiveFromISR+0x3a>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d101      	bne.n	800ca0a <xQueueReceiveFromISR+0x3e>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <xQueueReceiveFromISR+0x40>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	61fb      	str	r3, [r7, #28]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca26:	f7ff f9d7 	bl	800bdd8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca2a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	61ba      	str	r2, [r7, #24]
 800ca40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d02f      	beq.n	800cab2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca60:	f000 f8d9 	bl	800cc16 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	1e5a      	subs	r2, r3, #1
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca74:	d112      	bne.n	800ca9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d016      	beq.n	800caac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca80:	3310      	adds	r3, #16
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 fe7c 	bl	800d780 <xTaskRemoveFromEventList>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00e      	beq.n	800caac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00b      	beq.n	800caac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2201      	movs	r2, #1
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	e007      	b.n	800caac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ca9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caa0:	3301      	adds	r3, #1
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	b25a      	sxtb	r2, r3
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800caac:	2301      	movs	r3, #1
 800caae:	637b      	str	r3, [r7, #52]	; 0x34
 800cab0:	e001      	b.n	800cab6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	637b      	str	r3, [r7, #52]	; 0x34
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	f383 8811 	msr	BASEPRI, r3
}
 800cac0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3738      	adds	r7, #56	; 0x38
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10a      	bne.n	800caf4 <vQueueDelete+0x28>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	60bb      	str	r3, [r7, #8]
}
 800caf0:	bf00      	nop
 800caf2:	e7fe      	b.n	800caf2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f000 f95f 	bl	800cdb8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d102      	bne.n	800cb0a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cb04:	68f8      	ldr	r0, [r7, #12]
 800cb06:	f7fe fd83 	bl	800b610 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb0a:	bf00      	nop
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb12:	b480      	push	{r7}
 800cb14:	b085      	sub	sp, #20
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d006      	beq.n	800cb30 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	e001      	b.n	800cb34 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb34:	68fb      	ldr	r3, [r7, #12]
	}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb42:	b580      	push	{r7, lr}
 800cb44:	b086      	sub	sp, #24
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb56:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10d      	bne.n	800cb7c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d14d      	bne.n	800cc04 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f001 f84f 	bl	800dc10 <xTaskPriorityDisinherit>
 800cb72:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	609a      	str	r2, [r3, #8]
 800cb7a:	e043      	b.n	800cc04 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d119      	bne.n	800cbb6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6858      	ldr	r0, [r3, #4]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	f01e fce6 	bl	802b55e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	441a      	add	r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d32b      	bcc.n	800cc04 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	605a      	str	r2, [r3, #4]
 800cbb4:	e026      	b.n	800cc04 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	68d8      	ldr	r0, [r3, #12]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	f01e fccc 	bl	802b55e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	68da      	ldr	r2, [r3, #12]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	425b      	negs	r3, r3
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d207      	bcs.n	800cbf2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	689a      	ldr	r2, [r3, #8]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbea:	425b      	negs	r3, r3
 800cbec:	441a      	add	r2, r3
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d105      	bne.n	800cc04 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d002      	beq.n	800cc04 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc0c:	697b      	ldr	r3, [r7, #20]
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3718      	adds	r7, #24
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc16:	b580      	push	{r7, lr}
 800cc18:	b082      	sub	sp, #8
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
 800cc1e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d018      	beq.n	800cc5a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68da      	ldr	r2, [r3, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc30:	441a      	add	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68da      	ldr	r2, [r3, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d303      	bcc.n	800cc4a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68d9      	ldr	r1, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc52:	461a      	mov	r2, r3
 800cc54:	6838      	ldr	r0, [r7, #0]
 800cc56:	f01e fc82 	bl	802b55e <memcpy>
	}
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc6a:	f7fe ffd3 	bl	800bc14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc74:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc76:	e011      	b.n	800cc9c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d012      	beq.n	800cca6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3324      	adds	r3, #36	; 0x24
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 fd7b 	bl	800d780 <xTaskRemoveFromEventList>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc90:	f000 fe52 	bl	800d938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	3b01      	subs	r3, #1
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	dce9      	bgt.n	800cc78 <prvUnlockQueue+0x16>
 800cca4:	e000      	b.n	800cca8 <prvUnlockQueue+0x46>
					break;
 800cca6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	22ff      	movs	r2, #255	; 0xff
 800ccac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ccb0:	f7fe ffe0 	bl	800bc74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccb4:	f7fe ffae 	bl	800bc14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ccbe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccc0:	e011      	b.n	800cce6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d012      	beq.n	800ccf0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3310      	adds	r3, #16
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f000 fd56 	bl	800d780 <xTaskRemoveFromEventList>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d001      	beq.n	800ccde <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccda:	f000 fe2d 	bl	800d938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ccde:	7bbb      	ldrb	r3, [r7, #14]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cce6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dce9      	bgt.n	800ccc2 <prvUnlockQueue+0x60>
 800ccee:	e000      	b.n	800ccf2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ccf0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	22ff      	movs	r2, #255	; 0xff
 800ccf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ccfa:	f7fe ffbb 	bl	800bc74 <vPortExitCritical>
}
 800ccfe:	bf00      	nop
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd0e:	f7fe ff81 	bl	800bc14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d102      	bne.n	800cd20 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e001      	b.n	800cd24 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd24:	f7fe ffa6 	bl	800bc74 <vPortExitCritical>

	return xReturn;
 800cd28:	68fb      	ldr	r3, [r7, #12]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b084      	sub	sp, #16
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd3a:	f7fe ff6b 	bl	800bc14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d102      	bne.n	800cd50 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	e001      	b.n	800cd54 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd50:	2300      	movs	r3, #0
 800cd52:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd54:	f7fe ff8e 	bl	800bc74 <vPortExitCritical>

	return xReturn;
 800cd58:	68fb      	ldr	r3, [r7, #12]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	e014      	b.n	800cd9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd74:	4a0f      	ldr	r2, [pc, #60]	; (800cdb4 <vQueueAddToRegistry+0x50>)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d10b      	bne.n	800cd98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd80:	490c      	ldr	r1, [pc, #48]	; (800cdb4 <vQueueAddToRegistry+0x50>)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd8a:	4a0a      	ldr	r2, [pc, #40]	; (800cdb4 <vQueueAddToRegistry+0x50>)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	4413      	add	r3, r2
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd96:	e006      	b.n	800cda6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60fb      	str	r3, [r7, #12]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b07      	cmp	r3, #7
 800cda2:	d9e7      	bls.n	800cd74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop
 800cdb4:	2400a654 	.word	0x2400a654

0800cdb8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	60fb      	str	r3, [r7, #12]
 800cdc4:	e016      	b.n	800cdf4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cdc6:	4a10      	ldr	r2, [pc, #64]	; (800ce08 <vQueueUnregisterQueue+0x50>)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	4413      	add	r3, r2
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d10b      	bne.n	800cdee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdd6:	4a0c      	ldr	r2, [pc, #48]	; (800ce08 <vQueueUnregisterQueue+0x50>)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2100      	movs	r1, #0
 800cddc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cde0:	4a09      	ldr	r2, [pc, #36]	; (800ce08 <vQueueUnregisterQueue+0x50>)
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	00db      	lsls	r3, r3, #3
 800cde6:	4413      	add	r3, r2
 800cde8:	2200      	movs	r2, #0
 800cdea:	605a      	str	r2, [r3, #4]
				break;
 800cdec:	e006      	b.n	800cdfc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	60fb      	str	r3, [r7, #12]
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2b07      	cmp	r3, #7
 800cdf8:	d9e5      	bls.n	800cdc6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	3714      	adds	r7, #20
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	2400a654 	.word	0x2400a654

0800ce0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce1c:	f7fe fefa 	bl	800bc14 <vPortEnterCritical>
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce26:	b25b      	sxtb	r3, r3
 800ce28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2c:	d103      	bne.n	800ce36 <vQueueWaitForMessageRestricted+0x2a>
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce3c:	b25b      	sxtb	r3, r3
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce42:	d103      	bne.n	800ce4c <vQueueWaitForMessageRestricted+0x40>
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce4c:	f7fe ff12 	bl	800bc74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	3324      	adds	r3, #36	; 0x24
 800ce5c:	687a      	ldr	r2, [r7, #4]
 800ce5e:	68b9      	ldr	r1, [r7, #8]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f000 fc61 	bl	800d728 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce66:	6978      	ldr	r0, [r7, #20]
 800ce68:	f7ff fefb 	bl	800cc62 <prvUnlockQueue>
	}
 800ce6c:	bf00      	nop
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08e      	sub	sp, #56	; 0x38
 800ce78:	af04      	add	r7, sp, #16
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
 800ce80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10a      	bne.n	800ce9e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	623b      	str	r3, [r7, #32]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10a      	bne.n	800ceba <xTaskCreateStatic+0x46>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	61fb      	str	r3, [r7, #28]
}
 800ceb6:	bf00      	nop
 800ceb8:	e7fe      	b.n	800ceb8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ceba:	23a8      	movs	r3, #168	; 0xa8
 800cebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2ba8      	cmp	r3, #168	; 0xa8
 800cec2:	d00a      	beq.n	800ceda <xTaskCreateStatic+0x66>
	__asm volatile
 800cec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec8:	f383 8811 	msr	BASEPRI, r3
 800cecc:	f3bf 8f6f 	isb	sy
 800ced0:	f3bf 8f4f 	dsb	sy
 800ced4:	61bb      	str	r3, [r7, #24]
}
 800ced6:	bf00      	nop
 800ced8:	e7fe      	b.n	800ced8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ceda:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d01e      	beq.n	800cf20 <xTaskCreateStatic+0xac>
 800cee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d01b      	beq.n	800cf20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ceec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cef0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef4:	2202      	movs	r2, #2
 800cef6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cefa:	2300      	movs	r3, #0
 800cefc:	9303      	str	r3, [sp, #12]
 800cefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf00:	9302      	str	r3, [sp, #8]
 800cf02:	f107 0314 	add.w	r3, r7, #20
 800cf06:	9301      	str	r3, [sp, #4]
 800cf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	68b9      	ldr	r1, [r7, #8]
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f850 	bl	800cfb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf1a:	f000 f8f3 	bl	800d104 <prvAddNewTaskToReadyList>
 800cf1e:	e001      	b.n	800cf24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf24:	697b      	ldr	r3, [r7, #20]
	}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3728      	adds	r7, #40	; 0x28
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b08c      	sub	sp, #48	; 0x30
 800cf32:	af04      	add	r7, sp, #16
 800cf34:	60f8      	str	r0, [r7, #12]
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	603b      	str	r3, [r7, #0]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf3e:	88fb      	ldrh	r3, [r7, #6]
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe fa98 	bl	800b478 <pvPortMalloc>
 800cf48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00e      	beq.n	800cf6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf50:	20a8      	movs	r0, #168	; 0xa8
 800cf52:	f7fe fa91 	bl	800b478 <pvPortMalloc>
 800cf56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	697a      	ldr	r2, [r7, #20]
 800cf62:	631a      	str	r2, [r3, #48]	; 0x30
 800cf64:	e005      	b.n	800cf72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf66:	6978      	ldr	r0, [r7, #20]
 800cf68:	f7fe fb52 	bl	800b610 <vPortFree>
 800cf6c:	e001      	b.n	800cf72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d017      	beq.n	800cfa8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf80:	88fa      	ldrh	r2, [r7, #6]
 800cf82:	2300      	movs	r3, #0
 800cf84:	9303      	str	r3, [sp, #12]
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	68b9      	ldr	r1, [r7, #8]
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 f80e 	bl	800cfb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf9c:	69f8      	ldr	r0, [r7, #28]
 800cf9e:	f000 f8b1 	bl	800d104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	61bb      	str	r3, [r7, #24]
 800cfa6:	e002      	b.n	800cfae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfae:	69bb      	ldr	r3, [r7, #24]
	}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	60f8      	str	r0, [r7, #12]
 800cfc0:	60b9      	str	r1, [r7, #8]
 800cfc2:	607a      	str	r2, [r7, #4]
 800cfc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	461a      	mov	r2, r3
 800cfd0:	21a5      	movs	r1, #165	; 0xa5
 800cfd2:	f01e f99e 	bl	802b312 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cfe0:	440b      	add	r3, r1
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	f023 0307 	bic.w	r3, r3, #7
 800cfee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	f003 0307 	and.w	r3, r3, #7
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00a      	beq.n	800d010 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	617b      	str	r3, [r7, #20]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d01f      	beq.n	800d056 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d016:	2300      	movs	r3, #0
 800d018:	61fb      	str	r3, [r7, #28]
 800d01a:	e012      	b.n	800d042 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	69fb      	ldr	r3, [r7, #28]
 800d020:	4413      	add	r3, r2
 800d022:	7819      	ldrb	r1, [r3, #0]
 800d024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	4413      	add	r3, r2
 800d02a:	3334      	adds	r3, #52	; 0x34
 800d02c:	460a      	mov	r2, r1
 800d02e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d030:	68ba      	ldr	r2, [r7, #8]
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	4413      	add	r3, r2
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d006      	beq.n	800d04a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	3301      	adds	r3, #1
 800d040:	61fb      	str	r3, [r7, #28]
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	2b0f      	cmp	r3, #15
 800d046:	d9e9      	bls.n	800d01c <prvInitialiseNewTask+0x64>
 800d048:	e000      	b.n	800d04c <prvInitialiseNewTask+0x94>
			{
				break;
 800d04a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d054:	e003      	b.n	800d05e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	2b37      	cmp	r3, #55	; 0x37
 800d062:	d901      	bls.n	800d068 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d064:	2337      	movs	r3, #55	; 0x37
 800d066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d06c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d076:	2200      	movs	r2, #0
 800d078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07c:	3304      	adds	r3, #4
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe fc04 	bl	800b88c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	3318      	adds	r3, #24
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe fbff 	bl	800b88c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b6:	3354      	adds	r3, #84	; 0x54
 800d0b8:	224c      	movs	r2, #76	; 0x4c
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f01e f928 	bl	802b312 <memset>
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c4:	4a0c      	ldr	r2, [pc, #48]	; (800d0f8 <prvInitialiseNewTask+0x140>)
 800d0c6:	659a      	str	r2, [r3, #88]	; 0x58
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	4a0c      	ldr	r2, [pc, #48]	; (800d0fc <prvInitialiseNewTask+0x144>)
 800d0cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	4a0b      	ldr	r2, [pc, #44]	; (800d100 <prvInitialiseNewTask+0x148>)
 800d0d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	68f9      	ldr	r1, [r7, #12]
 800d0d8:	69b8      	ldr	r0, [r7, #24]
 800d0da:	f7fe fc6b 	bl	800b9b4 <pxPortInitialiseStack>
 800d0de:	4602      	mov	r2, r0
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d002      	beq.n	800d0f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0f0:	bf00      	nop
 800d0f2:	3720      	adds	r7, #32
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	2400b9d0 	.word	0x2400b9d0
 800d0fc:	2400ba38 	.word	0x2400ba38
 800d100:	2400baa0 	.word	0x2400baa0

0800d104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d10c:	f7fe fd82 	bl	800bc14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d110:	4b2d      	ldr	r3, [pc, #180]	; (800d1c8 <prvAddNewTaskToReadyList+0xc4>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	3301      	adds	r3, #1
 800d116:	4a2c      	ldr	r2, [pc, #176]	; (800d1c8 <prvAddNewTaskToReadyList+0xc4>)
 800d118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d11a:	4b2c      	ldr	r3, [pc, #176]	; (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d122:	4a2a      	ldr	r2, [pc, #168]	; (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d128:	4b27      	ldr	r3, [pc, #156]	; (800d1c8 <prvAddNewTaskToReadyList+0xc4>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d110      	bne.n	800d152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d130:	f000 fc26 	bl	800d980 <prvInitialiseTaskLists>
 800d134:	e00d      	b.n	800d152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d136:	4b26      	ldr	r3, [pc, #152]	; (800d1d0 <prvAddNewTaskToReadyList+0xcc>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d109      	bne.n	800d152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d148:	429a      	cmp	r2, r3
 800d14a:	d802      	bhi.n	800d152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d14c:	4a1f      	ldr	r2, [pc, #124]	; (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d152:	4b20      	ldr	r3, [pc, #128]	; (800d1d4 <prvAddNewTaskToReadyList+0xd0>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3301      	adds	r3, #1
 800d158:	4a1e      	ldr	r2, [pc, #120]	; (800d1d4 <prvAddNewTaskToReadyList+0xd0>)
 800d15a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d15c:	4b1d      	ldr	r3, [pc, #116]	; (800d1d4 <prvAddNewTaskToReadyList+0xd0>)
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d168:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <prvAddNewTaskToReadyList+0xd4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d903      	bls.n	800d178 <prvAddNewTaskToReadyList+0x74>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d174:	4a18      	ldr	r2, [pc, #96]	; (800d1d8 <prvAddNewTaskToReadyList+0xd4>)
 800d176:	6013      	str	r3, [r2, #0]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4a15      	ldr	r2, [pc, #84]	; (800d1dc <prvAddNewTaskToReadyList+0xd8>)
 800d186:	441a      	add	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	3304      	adds	r3, #4
 800d18c:	4619      	mov	r1, r3
 800d18e:	4610      	mov	r0, r2
 800d190:	f7fe fb89 	bl	800b8a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d194:	f7fe fd6e 	bl	800bc74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d198:	4b0d      	ldr	r3, [pc, #52]	; (800d1d0 <prvAddNewTaskToReadyList+0xcc>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00e      	beq.n	800d1be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1a0:	4b0a      	ldr	r3, [pc, #40]	; (800d1cc <prvAddNewTaskToReadyList+0xc8>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d207      	bcs.n	800d1be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	; (800d1e0 <prvAddNewTaskToReadyList+0xdc>)
 800d1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1be:	bf00      	nop
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	2400ab68 	.word	0x2400ab68
 800d1cc:	2400a694 	.word	0x2400a694
 800d1d0:	2400ab74 	.word	0x2400ab74
 800d1d4:	2400ab84 	.word	0x2400ab84
 800d1d8:	2400ab70 	.word	0x2400ab70
 800d1dc:	2400a698 	.word	0x2400a698
 800d1e0:	e000ed04 	.word	0xe000ed04

0800d1e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d017      	beq.n	800d226 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d1f6:	4b13      	ldr	r3, [pc, #76]	; (800d244 <vTaskDelay+0x60>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d00a      	beq.n	800d214 <vTaskDelay+0x30>
	__asm volatile
 800d1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d202:	f383 8811 	msr	BASEPRI, r3
 800d206:	f3bf 8f6f 	isb	sy
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	60bb      	str	r3, [r7, #8]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d214:	f000 f88a 	bl	800d32c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d218:	2100      	movs	r1, #0
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fdfc 	bl	800de18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d220:	f000 f892 	bl	800d348 <xTaskResumeAll>
 800d224:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d107      	bne.n	800d23c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d22c:	4b06      	ldr	r3, [pc, #24]	; (800d248 <vTaskDelay+0x64>)
 800d22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d23c:	bf00      	nop
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	2400ab90 	.word	0x2400ab90
 800d248:	e000ed04 	.word	0xe000ed04

0800d24c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	; 0x28
 800d250:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d252:	2300      	movs	r3, #0
 800d254:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d256:	2300      	movs	r3, #0
 800d258:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d25a:	463a      	mov	r2, r7
 800d25c:	1d39      	adds	r1, r7, #4
 800d25e:	f107 0308 	add.w	r3, r7, #8
 800d262:	4618      	mov	r0, r3
 800d264:	f7fe f8d4 	bl	800b410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	9202      	str	r2, [sp, #8]
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	2300      	movs	r3, #0
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	2300      	movs	r3, #0
 800d278:	460a      	mov	r2, r1
 800d27a:	4924      	ldr	r1, [pc, #144]	; (800d30c <vTaskStartScheduler+0xc0>)
 800d27c:	4824      	ldr	r0, [pc, #144]	; (800d310 <vTaskStartScheduler+0xc4>)
 800d27e:	f7ff fdf9 	bl	800ce74 <xTaskCreateStatic>
 800d282:	4603      	mov	r3, r0
 800d284:	4a23      	ldr	r2, [pc, #140]	; (800d314 <vTaskStartScheduler+0xc8>)
 800d286:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d288:	4b22      	ldr	r3, [pc, #136]	; (800d314 <vTaskStartScheduler+0xc8>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d290:	2301      	movs	r3, #1
 800d292:	617b      	str	r3, [r7, #20]
 800d294:	e001      	b.n	800d29a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d296:	2300      	movs	r3, #0
 800d298:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d102      	bne.n	800d2a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2a0:	f000 fe0e 	bl	800dec0 <xTimerCreateTimerTask>
 800d2a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d11b      	bne.n	800d2e4 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	613b      	str	r3, [r7, #16]
}
 800d2be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2c0:	4b15      	ldr	r3, [pc, #84]	; (800d318 <vTaskStartScheduler+0xcc>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3354      	adds	r3, #84	; 0x54
 800d2c6:	4a15      	ldr	r2, [pc, #84]	; (800d31c <vTaskStartScheduler+0xd0>)
 800d2c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2ca:	4b15      	ldr	r3, [pc, #84]	; (800d320 <vTaskStartScheduler+0xd4>)
 800d2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d2d2:	4b14      	ldr	r3, [pc, #80]	; (800d324 <vTaskStartScheduler+0xd8>)
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d2d8:	4b13      	ldr	r3, [pc, #76]	; (800d328 <vTaskStartScheduler+0xdc>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d2de:	f7fe fbf7 	bl	800bad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d2e2:	e00e      	b.n	800d302 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ea:	d10a      	bne.n	800d302 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	60fb      	str	r3, [r7, #12]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <vTaskStartScheduler+0xb4>
}
 800d302:	bf00      	nop
 800d304:	3718      	adds	r7, #24
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	0802cd60 	.word	0x0802cd60
 800d310:	0800d951 	.word	0x0800d951
 800d314:	2400ab8c 	.word	0x2400ab8c
 800d318:	2400a694 	.word	0x2400a694
 800d31c:	24000124 	.word	0x24000124
 800d320:	2400ab88 	.word	0x2400ab88
 800d324:	2400ab74 	.word	0x2400ab74
 800d328:	2400ab6c 	.word	0x2400ab6c

0800d32c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d32c:	b480      	push	{r7}
 800d32e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d330:	4b04      	ldr	r3, [pc, #16]	; (800d344 <vTaskSuspendAll+0x18>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	3301      	adds	r3, #1
 800d336:	4a03      	ldr	r2, [pc, #12]	; (800d344 <vTaskSuspendAll+0x18>)
 800d338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d33a:	bf00      	nop
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr
 800d344:	2400ab90 	.word	0x2400ab90

0800d348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d34e:	2300      	movs	r3, #0
 800d350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d352:	2300      	movs	r3, #0
 800d354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d356:	4b42      	ldr	r3, [pc, #264]	; (800d460 <xTaskResumeAll+0x118>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10a      	bne.n	800d374 <xTaskResumeAll+0x2c>
	__asm volatile
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	f383 8811 	msr	BASEPRI, r3
 800d366:	f3bf 8f6f 	isb	sy
 800d36a:	f3bf 8f4f 	dsb	sy
 800d36e:	603b      	str	r3, [r7, #0]
}
 800d370:	bf00      	nop
 800d372:	e7fe      	b.n	800d372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d374:	f7fe fc4e 	bl	800bc14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d378:	4b39      	ldr	r3, [pc, #228]	; (800d460 <xTaskResumeAll+0x118>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3b01      	subs	r3, #1
 800d37e:	4a38      	ldr	r2, [pc, #224]	; (800d460 <xTaskResumeAll+0x118>)
 800d380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d382:	4b37      	ldr	r3, [pc, #220]	; (800d460 <xTaskResumeAll+0x118>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d162      	bne.n	800d450 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d38a:	4b36      	ldr	r3, [pc, #216]	; (800d464 <xTaskResumeAll+0x11c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d05e      	beq.n	800d450 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d392:	e02f      	b.n	800d3f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d394:	4b34      	ldr	r3, [pc, #208]	; (800d468 <xTaskResumeAll+0x120>)
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3318      	adds	r3, #24
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe fadd 	bl	800b960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fad8 	bl	800b960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b4:	4b2d      	ldr	r3, [pc, #180]	; (800d46c <xTaskResumeAll+0x124>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d903      	bls.n	800d3c4 <xTaskResumeAll+0x7c>
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	4a2a      	ldr	r2, [pc, #168]	; (800d46c <xTaskResumeAll+0x124>)
 800d3c2:	6013      	str	r3, [r2, #0]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4413      	add	r3, r2
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	4a27      	ldr	r2, [pc, #156]	; (800d470 <xTaskResumeAll+0x128>)
 800d3d2:	441a      	add	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	3304      	adds	r3, #4
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4610      	mov	r0, r2
 800d3dc:	f7fe fa63 	bl	800b8a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	4b23      	ldr	r3, [pc, #140]	; (800d474 <xTaskResumeAll+0x12c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d302      	bcc.n	800d3f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d3ee:	4b22      	ldr	r3, [pc, #136]	; (800d478 <xTaskResumeAll+0x130>)
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3f4:	4b1c      	ldr	r3, [pc, #112]	; (800d468 <xTaskResumeAll+0x120>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1cb      	bne.n	800d394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d402:	f000 fb5f 	bl	800dac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d406:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <xTaskResumeAll+0x134>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d010      	beq.n	800d434 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d412:	f000 f847 	bl	800d4a4 <xTaskIncrementTick>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d41c:	4b16      	ldr	r3, [pc, #88]	; (800d478 <xTaskResumeAll+0x130>)
 800d41e:	2201      	movs	r2, #1
 800d420:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	3b01      	subs	r3, #1
 800d426:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1f1      	bne.n	800d412 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <xTaskResumeAll+0x134>)
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d434:	4b10      	ldr	r3, [pc, #64]	; (800d478 <xTaskResumeAll+0x130>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d43c:	2301      	movs	r3, #1
 800d43e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d440:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <xTaskResumeAll+0x138>)
 800d442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d450:	f7fe fc10 	bl	800bc74 <vPortExitCritical>

	return xAlreadyYielded;
 800d454:	68bb      	ldr	r3, [r7, #8]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2400ab90 	.word	0x2400ab90
 800d464:	2400ab68 	.word	0x2400ab68
 800d468:	2400ab28 	.word	0x2400ab28
 800d46c:	2400ab70 	.word	0x2400ab70
 800d470:	2400a698 	.word	0x2400a698
 800d474:	2400a694 	.word	0x2400a694
 800d478:	2400ab7c 	.word	0x2400ab7c
 800d47c:	2400ab78 	.word	0x2400ab78
 800d480:	e000ed04 	.word	0xe000ed04

0800d484 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d484:	b480      	push	{r7}
 800d486:	b083      	sub	sp, #12
 800d488:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d48a:	4b05      	ldr	r3, [pc, #20]	; (800d4a0 <xTaskGetTickCount+0x1c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d490:	687b      	ldr	r3, [r7, #4]
}
 800d492:	4618      	mov	r0, r3
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	2400ab6c 	.word	0x2400ab6c

0800d4a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ae:	4b4f      	ldr	r3, [pc, #316]	; (800d5ec <xTaskIncrementTick+0x148>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f040 808f 	bne.w	800d5d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4b8:	4b4d      	ldr	r3, [pc, #308]	; (800d5f0 <xTaskIncrementTick+0x14c>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4c0:	4a4b      	ldr	r2, [pc, #300]	; (800d5f0 <xTaskIncrementTick+0x14c>)
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d120      	bne.n	800d50e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4cc:	4b49      	ldr	r3, [pc, #292]	; (800d5f4 <xTaskIncrementTick+0x150>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <xTaskIncrementTick+0x48>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	603b      	str	r3, [r7, #0]
}
 800d4e8:	bf00      	nop
 800d4ea:	e7fe      	b.n	800d4ea <xTaskIncrementTick+0x46>
 800d4ec:	4b41      	ldr	r3, [pc, #260]	; (800d5f4 <xTaskIncrementTick+0x150>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	4b41      	ldr	r3, [pc, #260]	; (800d5f8 <xTaskIncrementTick+0x154>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a3f      	ldr	r2, [pc, #252]	; (800d5f4 <xTaskIncrementTick+0x150>)
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	4a3f      	ldr	r2, [pc, #252]	; (800d5f8 <xTaskIncrementTick+0x154>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6013      	str	r3, [r2, #0]
 800d500:	4b3e      	ldr	r3, [pc, #248]	; (800d5fc <xTaskIncrementTick+0x158>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3301      	adds	r3, #1
 800d506:	4a3d      	ldr	r2, [pc, #244]	; (800d5fc <xTaskIncrementTick+0x158>)
 800d508:	6013      	str	r3, [r2, #0]
 800d50a:	f000 fadb 	bl	800dac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d50e:	4b3c      	ldr	r3, [pc, #240]	; (800d600 <xTaskIncrementTick+0x15c>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	429a      	cmp	r2, r3
 800d516:	d349      	bcc.n	800d5ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d518:	4b36      	ldr	r3, [pc, #216]	; (800d5f4 <xTaskIncrementTick+0x150>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d104      	bne.n	800d52c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d522:	4b37      	ldr	r3, [pc, #220]	; (800d600 <xTaskIncrementTick+0x15c>)
 800d524:	f04f 32ff 	mov.w	r2, #4294967295
 800d528:	601a      	str	r2, [r3, #0]
					break;
 800d52a:	e03f      	b.n	800d5ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d52c:	4b31      	ldr	r3, [pc, #196]	; (800d5f4 <xTaskIncrementTick+0x150>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d53c:	693a      	ldr	r2, [r7, #16]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d203      	bcs.n	800d54c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d544:	4a2e      	ldr	r2, [pc, #184]	; (800d600 <xTaskIncrementTick+0x15c>)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d54a:	e02f      	b.n	800d5ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	3304      	adds	r3, #4
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe fa05 	bl	800b960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d004      	beq.n	800d568 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	3318      	adds	r3, #24
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe f9fc 	bl	800b960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56c:	4b25      	ldr	r3, [pc, #148]	; (800d604 <xTaskIncrementTick+0x160>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	429a      	cmp	r2, r3
 800d572:	d903      	bls.n	800d57c <xTaskIncrementTick+0xd8>
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d578:	4a22      	ldr	r2, [pc, #136]	; (800d604 <xTaskIncrementTick+0x160>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <xTaskIncrementTick+0x164>)
 800d58a:	441a      	add	r2, r3
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe f987 	bl	800b8a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xTaskIncrementTick+0x168>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d3b8      	bcc.n	800d518 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5aa:	e7b5      	b.n	800d518 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5ac:	4b17      	ldr	r3, [pc, #92]	; (800d60c <xTaskIncrementTick+0x168>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5b2:	4915      	ldr	r1, [pc, #84]	; (800d608 <xTaskIncrementTick+0x164>)
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	440b      	add	r3, r1
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d901      	bls.n	800d5c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5c8:	4b11      	ldr	r3, [pc, #68]	; (800d610 <xTaskIncrementTick+0x16c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d007      	beq.n	800d5e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	617b      	str	r3, [r7, #20]
 800d5d4:	e004      	b.n	800d5e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xTaskIncrementTick+0x170>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	4a0d      	ldr	r2, [pc, #52]	; (800d614 <xTaskIncrementTick+0x170>)
 800d5de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5e0:	697b      	ldr	r3, [r7, #20]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3718      	adds	r7, #24
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	2400ab90 	.word	0x2400ab90
 800d5f0:	2400ab6c 	.word	0x2400ab6c
 800d5f4:	2400ab20 	.word	0x2400ab20
 800d5f8:	2400ab24 	.word	0x2400ab24
 800d5fc:	2400ab80 	.word	0x2400ab80
 800d600:	2400ab88 	.word	0x2400ab88
 800d604:	2400ab70 	.word	0x2400ab70
 800d608:	2400a698 	.word	0x2400a698
 800d60c:	2400a694 	.word	0x2400a694
 800d610:	2400ab7c 	.word	0x2400ab7c
 800d614:	2400ab78 	.word	0x2400ab78

0800d618 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d618:	b480      	push	{r7}
 800d61a:	b085      	sub	sp, #20
 800d61c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d61e:	4b2a      	ldr	r3, [pc, #168]	; (800d6c8 <vTaskSwitchContext+0xb0>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d626:	4b29      	ldr	r3, [pc, #164]	; (800d6cc <vTaskSwitchContext+0xb4>)
 800d628:	2201      	movs	r2, #1
 800d62a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d62c:	e046      	b.n	800d6bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d62e:	4b27      	ldr	r3, [pc, #156]	; (800d6cc <vTaskSwitchContext+0xb4>)
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d634:	4b26      	ldr	r3, [pc, #152]	; (800d6d0 <vTaskSwitchContext+0xb8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	60fb      	str	r3, [r7, #12]
 800d63a:	e010      	b.n	800d65e <vTaskSwitchContext+0x46>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10a      	bne.n	800d658 <vTaskSwitchContext+0x40>
	__asm volatile
 800d642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	607b      	str	r3, [r7, #4]
}
 800d654:	bf00      	nop
 800d656:	e7fe      	b.n	800d656 <vTaskSwitchContext+0x3e>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	3b01      	subs	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	491d      	ldr	r1, [pc, #116]	; (800d6d4 <vTaskSwitchContext+0xbc>)
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	4613      	mov	r3, r2
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	4413      	add	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	440b      	add	r3, r1
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d0e4      	beq.n	800d63c <vTaskSwitchContext+0x24>
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	4613      	mov	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4413      	add	r3, r2
 800d67a:	009b      	lsls	r3, r3, #2
 800d67c:	4a15      	ldr	r2, [pc, #84]	; (800d6d4 <vTaskSwitchContext+0xbc>)
 800d67e:	4413      	add	r3, r2
 800d680:	60bb      	str	r3, [r7, #8]
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	605a      	str	r2, [r3, #4]
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	685a      	ldr	r2, [r3, #4]
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	3308      	adds	r3, #8
 800d694:	429a      	cmp	r2, r3
 800d696:	d104      	bne.n	800d6a2 <vTaskSwitchContext+0x8a>
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	605a      	str	r2, [r3, #4]
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	4a0b      	ldr	r2, [pc, #44]	; (800d6d8 <vTaskSwitchContext+0xc0>)
 800d6aa:	6013      	str	r3, [r2, #0]
 800d6ac:	4a08      	ldr	r2, [pc, #32]	; (800d6d0 <vTaskSwitchContext+0xb8>)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6b2:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <vTaskSwitchContext+0xc0>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	3354      	adds	r3, #84	; 0x54
 800d6b8:	4a08      	ldr	r2, [pc, #32]	; (800d6dc <vTaskSwitchContext+0xc4>)
 800d6ba:	6013      	str	r3, [r2, #0]
}
 800d6bc:	bf00      	nop
 800d6be:	3714      	adds	r7, #20
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr
 800d6c8:	2400ab90 	.word	0x2400ab90
 800d6cc:	2400ab7c 	.word	0x2400ab7c
 800d6d0:	2400ab70 	.word	0x2400ab70
 800d6d4:	2400a698 	.word	0x2400a698
 800d6d8:	2400a694 	.word	0x2400a694
 800d6dc:	24000124 	.word	0x24000124

0800d6e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10a      	bne.n	800d706 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	60fb      	str	r3, [r7, #12]
}
 800d702:	bf00      	nop
 800d704:	e7fe      	b.n	800d704 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d706:	4b07      	ldr	r3, [pc, #28]	; (800d724 <vTaskPlaceOnEventList+0x44>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3318      	adds	r3, #24
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7fe f8ed 	bl	800b8ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d714:	2101      	movs	r1, #1
 800d716:	6838      	ldr	r0, [r7, #0]
 800d718:	f000 fb7e 	bl	800de18 <prvAddCurrentTaskToDelayedList>
}
 800d71c:	bf00      	nop
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}
 800d724:	2400a694 	.word	0x2400a694

0800d728 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	617b      	str	r3, [r7, #20]
}
 800d74c:	bf00      	nop
 800d74e:	e7fe      	b.n	800d74e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d750:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <vTaskPlaceOnEventListRestricted+0x54>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	3318      	adds	r3, #24
 800d756:	4619      	mov	r1, r3
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7fe f8a4 	bl	800b8a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d002      	beq.n	800d76a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
 800d768:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	68b8      	ldr	r0, [r7, #8]
 800d76e:	f000 fb53 	bl	800de18 <prvAddCurrentTaskToDelayedList>
	}
 800d772:	bf00      	nop
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	2400a694 	.word	0x2400a694

0800d780 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d10a      	bne.n	800d7ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79a:	f383 8811 	msr	BASEPRI, r3
 800d79e:	f3bf 8f6f 	isb	sy
 800d7a2:	f3bf 8f4f 	dsb	sy
 800d7a6:	60fb      	str	r3, [r7, #12]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	3318      	adds	r3, #24
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fe f8d5 	bl	800b960 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b6:	4b1e      	ldr	r3, [pc, #120]	; (800d830 <xTaskRemoveFromEventList+0xb0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d11d      	bne.n	800d7fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fe f8cc 	bl	800b960 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7cc:	4b19      	ldr	r3, [pc, #100]	; (800d834 <xTaskRemoveFromEventList+0xb4>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d903      	bls.n	800d7dc <xTaskRemoveFromEventList+0x5c>
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7d8:	4a16      	ldr	r2, [pc, #88]	; (800d834 <xTaskRemoveFromEventList+0xb4>)
 800d7da:	6013      	str	r3, [r2, #0]
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4a13      	ldr	r2, [pc, #76]	; (800d838 <xTaskRemoveFromEventList+0xb8>)
 800d7ea:	441a      	add	r2, r3
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	4610      	mov	r0, r2
 800d7f4:	f7fe f857 	bl	800b8a6 <vListInsertEnd>
 800d7f8:	e005      	b.n	800d806 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3318      	adds	r3, #24
 800d7fe:	4619      	mov	r1, r3
 800d800:	480e      	ldr	r0, [pc, #56]	; (800d83c <xTaskRemoveFromEventList+0xbc>)
 800d802:	f7fe f850 	bl	800b8a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d80a:	4b0d      	ldr	r3, [pc, #52]	; (800d840 <xTaskRemoveFromEventList+0xc0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d810:	429a      	cmp	r2, r3
 800d812:	d905      	bls.n	800d820 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d814:	2301      	movs	r3, #1
 800d816:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d818:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <xTaskRemoveFromEventList+0xc4>)
 800d81a:	2201      	movs	r2, #1
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	e001      	b.n	800d824 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d824:	697b      	ldr	r3, [r7, #20]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	2400ab90 	.word	0x2400ab90
 800d834:	2400ab70 	.word	0x2400ab70
 800d838:	2400a698 	.word	0x2400a698
 800d83c:	2400ab28 	.word	0x2400ab28
 800d840:	2400a694 	.word	0x2400a694
 800d844:	2400ab7c 	.word	0x2400ab7c

0800d848 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d850:	4b06      	ldr	r3, [pc, #24]	; (800d86c <vTaskInternalSetTimeOutState+0x24>)
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d858:	4b05      	ldr	r3, [pc, #20]	; (800d870 <vTaskInternalSetTimeOutState+0x28>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	605a      	str	r2, [r3, #4]
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	2400ab80 	.word	0x2400ab80
 800d870:	2400ab6c 	.word	0x2400ab6c

0800d874 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d10a      	bne.n	800d89a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	613b      	str	r3, [r7, #16]
}
 800d896:	bf00      	nop
 800d898:	e7fe      	b.n	800d898 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	60fb      	str	r3, [r7, #12]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d8b6:	f7fe f9ad 	bl	800bc14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8ba:	4b1d      	ldr	r3, [pc, #116]	; (800d930 <xTaskCheckForTimeOut+0xbc>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	69ba      	ldr	r2, [r7, #24]
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8d2:	d102      	bne.n	800d8da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e023      	b.n	800d922 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b15      	ldr	r3, [pc, #84]	; (800d934 <xTaskCheckForTimeOut+0xc0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d007      	beq.n	800d8f6 <xTaskCheckForTimeOut+0x82>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	69ba      	ldr	r2, [r7, #24]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d302      	bcc.n	800d8f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	61fb      	str	r3, [r7, #28]
 800d8f4:	e015      	b.n	800d922 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d20b      	bcs.n	800d918 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	1ad2      	subs	r2, r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff ff9b 	bl	800d848 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	61fb      	str	r3, [r7, #28]
 800d916:	e004      	b.n	800d922 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	2200      	movs	r2, #0
 800d91c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d91e:	2301      	movs	r3, #1
 800d920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d922:	f7fe f9a7 	bl	800bc74 <vPortExitCritical>

	return xReturn;
 800d926:	69fb      	ldr	r3, [r7, #28]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3720      	adds	r7, #32
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	2400ab6c 	.word	0x2400ab6c
 800d934:	2400ab80 	.word	0x2400ab80

0800d938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d938:	b480      	push	{r7}
 800d93a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d93c:	4b03      	ldr	r3, [pc, #12]	; (800d94c <vTaskMissedYield+0x14>)
 800d93e:	2201      	movs	r2, #1
 800d940:	601a      	str	r2, [r3, #0]
}
 800d942:	bf00      	nop
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	2400ab7c 	.word	0x2400ab7c

0800d950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d958:	f000 f852 	bl	800da00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d95c:	4b06      	ldr	r3, [pc, #24]	; (800d978 <prvIdleTask+0x28>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d9f9      	bls.n	800d958 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d964:	4b05      	ldr	r3, [pc, #20]	; (800d97c <prvIdleTask+0x2c>)
 800d966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d96a:	601a      	str	r2, [r3, #0]
 800d96c:	f3bf 8f4f 	dsb	sy
 800d970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d974:	e7f0      	b.n	800d958 <prvIdleTask+0x8>
 800d976:	bf00      	nop
 800d978:	2400a698 	.word	0x2400a698
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d986:	2300      	movs	r3, #0
 800d988:	607b      	str	r3, [r7, #4]
 800d98a:	e00c      	b.n	800d9a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	4613      	mov	r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	4413      	add	r3, r2
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4a12      	ldr	r2, [pc, #72]	; (800d9e0 <prvInitialiseTaskLists+0x60>)
 800d998:	4413      	add	r3, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fd ff56 	bl	800b84c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	607b      	str	r3, [r7, #4]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2b37      	cmp	r3, #55	; 0x37
 800d9aa:	d9ef      	bls.n	800d98c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9ac:	480d      	ldr	r0, [pc, #52]	; (800d9e4 <prvInitialiseTaskLists+0x64>)
 800d9ae:	f7fd ff4d 	bl	800b84c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9b2:	480d      	ldr	r0, [pc, #52]	; (800d9e8 <prvInitialiseTaskLists+0x68>)
 800d9b4:	f7fd ff4a 	bl	800b84c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9b8:	480c      	ldr	r0, [pc, #48]	; (800d9ec <prvInitialiseTaskLists+0x6c>)
 800d9ba:	f7fd ff47 	bl	800b84c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9be:	480c      	ldr	r0, [pc, #48]	; (800d9f0 <prvInitialiseTaskLists+0x70>)
 800d9c0:	f7fd ff44 	bl	800b84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d9c4:	480b      	ldr	r0, [pc, #44]	; (800d9f4 <prvInitialiseTaskLists+0x74>)
 800d9c6:	f7fd ff41 	bl	800b84c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <prvInitialiseTaskLists+0x78>)
 800d9cc:	4a05      	ldr	r2, [pc, #20]	; (800d9e4 <prvInitialiseTaskLists+0x64>)
 800d9ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <prvInitialiseTaskLists+0x7c>)
 800d9d2:	4a05      	ldr	r2, [pc, #20]	; (800d9e8 <prvInitialiseTaskLists+0x68>)
 800d9d4:	601a      	str	r2, [r3, #0]
}
 800d9d6:	bf00      	nop
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	2400a698 	.word	0x2400a698
 800d9e4:	2400aaf8 	.word	0x2400aaf8
 800d9e8:	2400ab0c 	.word	0x2400ab0c
 800d9ec:	2400ab28 	.word	0x2400ab28
 800d9f0:	2400ab3c 	.word	0x2400ab3c
 800d9f4:	2400ab54 	.word	0x2400ab54
 800d9f8:	2400ab20 	.word	0x2400ab20
 800d9fc:	2400ab24 	.word	0x2400ab24

0800da00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b082      	sub	sp, #8
 800da04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da06:	e019      	b.n	800da3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da08:	f7fe f904 	bl	800bc14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da0c:	4b10      	ldr	r3, [pc, #64]	; (800da50 <prvCheckTasksWaitingTermination+0x50>)
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	3304      	adds	r3, #4
 800da18:	4618      	mov	r0, r3
 800da1a:	f7fd ffa1 	bl	800b960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da1e:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <prvCheckTasksWaitingTermination+0x54>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	3b01      	subs	r3, #1
 800da24:	4a0b      	ldr	r2, [pc, #44]	; (800da54 <prvCheckTasksWaitingTermination+0x54>)
 800da26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da28:	4b0b      	ldr	r3, [pc, #44]	; (800da58 <prvCheckTasksWaitingTermination+0x58>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	4a0a      	ldr	r2, [pc, #40]	; (800da58 <prvCheckTasksWaitingTermination+0x58>)
 800da30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da32:	f7fe f91f 	bl	800bc74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f810 	bl	800da5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da3c:	4b06      	ldr	r3, [pc, #24]	; (800da58 <prvCheckTasksWaitingTermination+0x58>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e1      	bne.n	800da08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	2400ab3c 	.word	0x2400ab3c
 800da54:	2400ab68 	.word	0x2400ab68
 800da58:	2400ab50 	.word	0x2400ab50

0800da5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	3354      	adds	r3, #84	; 0x54
 800da68:	4618      	mov	r0, r3
 800da6a:	f01d fc9b 	bl	802b3a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800da74:	2b00      	cmp	r3, #0
 800da76:	d108      	bne.n	800da8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fd fdc7 	bl	800b610 <vPortFree>
				vPortFree( pxTCB );
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7fd fdc4 	bl	800b610 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da88:	e018      	b.n	800dabc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800da90:	2b01      	cmp	r3, #1
 800da92:	d103      	bne.n	800da9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7fd fdbb 	bl	800b610 <vPortFree>
	}
 800da9a:	e00f      	b.n	800dabc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800daa2:	2b02      	cmp	r3, #2
 800daa4:	d00a      	beq.n	800dabc <prvDeleteTCB+0x60>
	__asm volatile
 800daa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	60fb      	str	r3, [r7, #12]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <prvDeleteTCB+0x5e>
	}
 800dabc:	bf00      	nop
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daca:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <prvResetNextTaskUnblockTime+0x38>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d104      	bne.n	800dade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dad4:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <prvResetNextTaskUnblockTime+0x3c>)
 800dad6:	f04f 32ff 	mov.w	r2, #4294967295
 800dada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dadc:	e008      	b.n	800daf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dade:	4b07      	ldr	r3, [pc, #28]	; (800dafc <prvResetNextTaskUnblockTime+0x38>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	4a04      	ldr	r2, [pc, #16]	; (800db00 <prvResetNextTaskUnblockTime+0x3c>)
 800daee:	6013      	str	r3, [r2, #0]
}
 800daf0:	bf00      	nop
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr
 800dafc:	2400ab20 	.word	0x2400ab20
 800db00:	2400ab88 	.word	0x2400ab88

0800db04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db0a:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <xTaskGetSchedulerState+0x34>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db12:	2301      	movs	r3, #1
 800db14:	607b      	str	r3, [r7, #4]
 800db16:	e008      	b.n	800db2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db18:	4b08      	ldr	r3, [pc, #32]	; (800db3c <xTaskGetSchedulerState+0x38>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d102      	bne.n	800db26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db20:	2302      	movs	r3, #2
 800db22:	607b      	str	r3, [r7, #4]
 800db24:	e001      	b.n	800db2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db26:	2300      	movs	r3, #0
 800db28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db2a:	687b      	ldr	r3, [r7, #4]
	}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	2400ab74 	.word	0x2400ab74
 800db3c:	2400ab90 	.word	0x2400ab90

0800db40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db4c:	2300      	movs	r3, #0
 800db4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d051      	beq.n	800dbfa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db5a:	4b2a      	ldr	r3, [pc, #168]	; (800dc04 <xTaskPriorityInherit+0xc4>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db60:	429a      	cmp	r2, r3
 800db62:	d241      	bcs.n	800dbe8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	db06      	blt.n	800db7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db6c:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <xTaskPriorityInherit+0xc4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	6959      	ldr	r1, [r3, #20]
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db82:	4613      	mov	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	4413      	add	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	4a1f      	ldr	r2, [pc, #124]	; (800dc08 <xTaskPriorityInherit+0xc8>)
 800db8c:	4413      	add	r3, r2
 800db8e:	4299      	cmp	r1, r3
 800db90:	d122      	bne.n	800dbd8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	3304      	adds	r3, #4
 800db96:	4618      	mov	r0, r3
 800db98:	f7fd fee2 	bl	800b960 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db9c:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <xTaskPriorityInherit+0xc4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbaa:	4b18      	ldr	r3, [pc, #96]	; (800dc0c <xTaskPriorityInherit+0xcc>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d903      	bls.n	800dbba <xTaskPriorityInherit+0x7a>
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb6:	4a15      	ldr	r2, [pc, #84]	; (800dc0c <xTaskPriorityInherit+0xcc>)
 800dbb8:	6013      	str	r3, [r2, #0]
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4a10      	ldr	r2, [pc, #64]	; (800dc08 <xTaskPriorityInherit+0xc8>)
 800dbc8:	441a      	add	r2, r3
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd fe68 	bl	800b8a6 <vListInsertEnd>
 800dbd6:	e004      	b.n	800dbe2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <xTaskPriorityInherit+0xc4>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	60fb      	str	r3, [r7, #12]
 800dbe6:	e008      	b.n	800dbfa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <xTaskPriorityInherit+0xc4>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d201      	bcs.n	800dbfa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
	}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	2400a694 	.word	0x2400a694
 800dc08:	2400a698 	.word	0x2400a698
 800dc0c:	2400ab70 	.word	0x2400ab70

0800dc10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d056      	beq.n	800dcd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc26:	4b2e      	ldr	r3, [pc, #184]	; (800dce0 <xTaskPriorityDisinherit+0xd0>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	693a      	ldr	r2, [r7, #16]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d00a      	beq.n	800dc46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	60fb      	str	r3, [r7, #12]
}
 800dc42:	bf00      	nop
 800dc44:	e7fe      	b.n	800dc44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10a      	bne.n	800dc64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	f383 8811 	msr	BASEPRI, r3
 800dc56:	f3bf 8f6f 	isb	sy
 800dc5a:	f3bf 8f4f 	dsb	sy
 800dc5e:	60bb      	str	r3, [r7, #8]
}
 800dc60:	bf00      	nop
 800dc62:	e7fe      	b.n	800dc62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc68:	1e5a      	subs	r2, r3, #1
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d02c      	beq.n	800dcd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d128      	bne.n	800dcd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	3304      	adds	r3, #4
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd fe6a 	bl	800b960 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dca4:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <xTaskPriorityDisinherit+0xd4>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d903      	bls.n	800dcb4 <xTaskPriorityDisinherit+0xa4>
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb0:	4a0c      	ldr	r2, [pc, #48]	; (800dce4 <xTaskPriorityDisinherit+0xd4>)
 800dcb2:	6013      	str	r3, [r2, #0]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcb8:	4613      	mov	r3, r2
 800dcba:	009b      	lsls	r3, r3, #2
 800dcbc:	4413      	add	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <xTaskPriorityDisinherit+0xd8>)
 800dcc2:	441a      	add	r2, r3
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	4619      	mov	r1, r3
 800dcca:	4610      	mov	r0, r2
 800dccc:	f7fd fdeb 	bl	800b8a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dcd4:	697b      	ldr	r3, [r7, #20]
	}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	2400a694 	.word	0x2400a694
 800dce4:	2400ab70 	.word	0x2400ab70
 800dce8:	2400a698 	.word	0x2400a698

0800dcec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b088      	sub	sp, #32
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d06a      	beq.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd04:	69bb      	ldr	r3, [r7, #24]
 800dd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	60fb      	str	r3, [r7, #12]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd26:	683a      	ldr	r2, [r7, #0]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d902      	bls.n	800dd32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	61fb      	str	r3, [r7, #28]
 800dd30:	e002      	b.n	800dd38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	69fa      	ldr	r2, [r7, #28]
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d04b      	beq.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d146      	bne.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd4c:	4b25      	ldr	r3, [pc, #148]	; (800dde4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d10a      	bne.n	800dd6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5a:	f383 8811 	msr	BASEPRI, r3
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	60bb      	str	r3, [r7, #8]
}
 800dd68:	bf00      	nop
 800dd6a:	e7fe      	b.n	800dd6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd72:	69bb      	ldr	r3, [r7, #24]
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	699b      	ldr	r3, [r3, #24]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	db04      	blt.n	800dd8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	6959      	ldr	r1, [r3, #20]
 800dd8e:	693a      	ldr	r2, [r7, #16]
 800dd90:	4613      	mov	r3, r2
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4a13      	ldr	r2, [pc, #76]	; (800dde8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd9a:	4413      	add	r3, r2
 800dd9c:	4299      	cmp	r1, r3
 800dd9e:	d11c      	bne.n	800ddda <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	3304      	adds	r3, #4
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd fddb 	bl	800b960 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddaa:	69bb      	ldr	r3, [r7, #24]
 800ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddae:	4b0f      	ldr	r3, [pc, #60]	; (800ddec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d903      	bls.n	800ddbe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddba:	4a0c      	ldr	r2, [pc, #48]	; (800ddec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	009b      	lsls	r3, r3, #2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	009b      	lsls	r3, r3, #2
 800ddca:	4a07      	ldr	r2, [pc, #28]	; (800dde8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ddcc:	441a      	add	r2, r3
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4610      	mov	r0, r2
 800ddd6:	f7fd fd66 	bl	800b8a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ddda:	bf00      	nop
 800dddc:	3720      	adds	r7, #32
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	2400a694 	.word	0x2400a694
 800dde8:	2400a698 	.word	0x2400a698
 800ddec:	2400ab70 	.word	0x2400ab70

0800ddf0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ddf0:	b480      	push	{r7}
 800ddf2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ddf4:	4b07      	ldr	r3, [pc, #28]	; (800de14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d004      	beq.n	800de06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ddfc:	4b05      	ldr	r3, [pc, #20]	; (800de14 <pvTaskIncrementMutexHeldCount+0x24>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de02:	3201      	adds	r2, #1
 800de04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800de06:	4b03      	ldr	r3, [pc, #12]	; (800de14 <pvTaskIncrementMutexHeldCount+0x24>)
 800de08:	681b      	ldr	r3, [r3, #0]
	}
 800de0a:	4618      	mov	r0, r3
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr
 800de14:	2400a694 	.word	0x2400a694

0800de18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de22:	4b21      	ldr	r3, [pc, #132]	; (800dea8 <prvAddCurrentTaskToDelayedList+0x90>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de28:	4b20      	ldr	r3, [pc, #128]	; (800deac <prvAddCurrentTaskToDelayedList+0x94>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3304      	adds	r3, #4
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fd fd96 	bl	800b960 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3a:	d10a      	bne.n	800de52 <prvAddCurrentTaskToDelayedList+0x3a>
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d007      	beq.n	800de52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de42:	4b1a      	ldr	r3, [pc, #104]	; (800deac <prvAddCurrentTaskToDelayedList+0x94>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	3304      	adds	r3, #4
 800de48:	4619      	mov	r1, r3
 800de4a:	4819      	ldr	r0, [pc, #100]	; (800deb0 <prvAddCurrentTaskToDelayedList+0x98>)
 800de4c:	f7fd fd2b 	bl	800b8a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de50:	e026      	b.n	800dea0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de52:	68fa      	ldr	r2, [r7, #12]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4413      	add	r3, r2
 800de58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800de5a:	4b14      	ldr	r3, [pc, #80]	; (800deac <prvAddCurrentTaskToDelayedList+0x94>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	68ba      	ldr	r2, [r7, #8]
 800de60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de62:	68ba      	ldr	r2, [r7, #8]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	429a      	cmp	r2, r3
 800de68:	d209      	bcs.n	800de7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	4b0f      	ldr	r3, [pc, #60]	; (800deac <prvAddCurrentTaskToDelayedList+0x94>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	3304      	adds	r3, #4
 800de74:	4619      	mov	r1, r3
 800de76:	4610      	mov	r0, r2
 800de78:	f7fd fd39 	bl	800b8ee <vListInsert>
}
 800de7c:	e010      	b.n	800dea0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de7e:	4b0e      	ldr	r3, [pc, #56]	; (800deb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	4b0a      	ldr	r3, [pc, #40]	; (800deac <prvAddCurrentTaskToDelayedList+0x94>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	3304      	adds	r3, #4
 800de88:	4619      	mov	r1, r3
 800de8a:	4610      	mov	r0, r2
 800de8c:	f7fd fd2f 	bl	800b8ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <prvAddCurrentTaskToDelayedList+0xa4>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	429a      	cmp	r2, r3
 800de98:	d202      	bcs.n	800dea0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de9a:	4a08      	ldr	r2, [pc, #32]	; (800debc <prvAddCurrentTaskToDelayedList+0xa4>)
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	6013      	str	r3, [r2, #0]
}
 800dea0:	bf00      	nop
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2400ab6c 	.word	0x2400ab6c
 800deac:	2400a694 	.word	0x2400a694
 800deb0:	2400ab54 	.word	0x2400ab54
 800deb4:	2400ab24 	.word	0x2400ab24
 800deb8:	2400ab20 	.word	0x2400ab20
 800debc:	2400ab88 	.word	0x2400ab88

0800dec0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800deca:	f000 fb07 	bl	800e4dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dece:	4b1c      	ldr	r3, [pc, #112]	; (800df40 <xTimerCreateTimerTask+0x80>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d021      	beq.n	800df1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800deda:	2300      	movs	r3, #0
 800dedc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dede:	1d3a      	adds	r2, r7, #4
 800dee0:	f107 0108 	add.w	r1, r7, #8
 800dee4:	f107 030c 	add.w	r3, r7, #12
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fd faab 	bl	800b444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800deee:	6879      	ldr	r1, [r7, #4]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	9202      	str	r2, [sp, #8]
 800def6:	9301      	str	r3, [sp, #4]
 800def8:	2302      	movs	r3, #2
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	2300      	movs	r3, #0
 800defe:	460a      	mov	r2, r1
 800df00:	4910      	ldr	r1, [pc, #64]	; (800df44 <xTimerCreateTimerTask+0x84>)
 800df02:	4811      	ldr	r0, [pc, #68]	; (800df48 <xTimerCreateTimerTask+0x88>)
 800df04:	f7fe ffb6 	bl	800ce74 <xTaskCreateStatic>
 800df08:	4603      	mov	r3, r0
 800df0a:	4a10      	ldr	r2, [pc, #64]	; (800df4c <xTimerCreateTimerTask+0x8c>)
 800df0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df0e:	4b0f      	ldr	r3, [pc, #60]	; (800df4c <xTimerCreateTimerTask+0x8c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df16:	2301      	movs	r3, #1
 800df18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d10a      	bne.n	800df36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800df20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	613b      	str	r3, [r7, #16]
}
 800df32:	bf00      	nop
 800df34:	e7fe      	b.n	800df34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df36:	697b      	ldr	r3, [r7, #20]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3718      	adds	r7, #24
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	2400abc4 	.word	0x2400abc4
 800df44:	0802cd68 	.word	0x0802cd68
 800df48:	0800e085 	.word	0x0800e085
 800df4c:	2400abc8 	.word	0x2400abc8

0800df50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b08a      	sub	sp, #40	; 0x28
 800df54:	af00      	add	r7, sp, #0
 800df56:	60f8      	str	r0, [r7, #12]
 800df58:	60b9      	str	r1, [r7, #8]
 800df5a:	607a      	str	r2, [r7, #4]
 800df5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df5e:	2300      	movs	r3, #0
 800df60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10a      	bne.n	800df7e <xTimerGenericCommand+0x2e>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	623b      	str	r3, [r7, #32]
}
 800df7a:	bf00      	nop
 800df7c:	e7fe      	b.n	800df7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df7e:	4b1a      	ldr	r3, [pc, #104]	; (800dfe8 <xTimerGenericCommand+0x98>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d02a      	beq.n	800dfdc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2b05      	cmp	r3, #5
 800df96:	dc18      	bgt.n	800dfca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df98:	f7ff fdb4 	bl	800db04 <xTaskGetSchedulerState>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d109      	bne.n	800dfb6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dfa2:	4b11      	ldr	r3, [pc, #68]	; (800dfe8 <xTimerGenericCommand+0x98>)
 800dfa4:	6818      	ldr	r0, [r3, #0]
 800dfa6:	f107 0110 	add.w	r1, r7, #16
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfae:	f7fe f8fb 	bl	800c1a8 <xQueueGenericSend>
 800dfb2:	6278      	str	r0, [r7, #36]	; 0x24
 800dfb4:	e012      	b.n	800dfdc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dfb6:	4b0c      	ldr	r3, [pc, #48]	; (800dfe8 <xTimerGenericCommand+0x98>)
 800dfb8:	6818      	ldr	r0, [r3, #0]
 800dfba:	f107 0110 	add.w	r1, r7, #16
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f7fe f8f1 	bl	800c1a8 <xQueueGenericSend>
 800dfc6:	6278      	str	r0, [r7, #36]	; 0x24
 800dfc8:	e008      	b.n	800dfdc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dfca:	4b07      	ldr	r3, [pc, #28]	; (800dfe8 <xTimerGenericCommand+0x98>)
 800dfcc:	6818      	ldr	r0, [r3, #0]
 800dfce:	f107 0110 	add.w	r1, r7, #16
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	f7fe f9e5 	bl	800c3a4 <xQueueGenericSendFromISR>
 800dfda:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3728      	adds	r7, #40	; 0x28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	2400abc4 	.word	0x2400abc4

0800dfec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af02      	add	r7, sp, #8
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dff6:	4b22      	ldr	r3, [pc, #136]	; (800e080 <prvProcessExpiredTimer+0x94>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68db      	ldr	r3, [r3, #12]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	3304      	adds	r3, #4
 800e004:	4618      	mov	r0, r3
 800e006:	f7fd fcab 	bl	800b960 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e010:	f003 0304 	and.w	r3, r3, #4
 800e014:	2b00      	cmp	r3, #0
 800e016:	d022      	beq.n	800e05e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	699a      	ldr	r2, [r3, #24]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	18d1      	adds	r1, r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	6978      	ldr	r0, [r7, #20]
 800e026:	f000 f8d1 	bl	800e1cc <prvInsertTimerInActiveList>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01f      	beq.n	800e070 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e030:	2300      	movs	r3, #0
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	2300      	movs	r3, #0
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	2100      	movs	r1, #0
 800e03a:	6978      	ldr	r0, [r7, #20]
 800e03c:	f7ff ff88 	bl	800df50 <xTimerGenericCommand>
 800e040:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d113      	bne.n	800e070 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	60fb      	str	r3, [r7, #12]
}
 800e05a:	bf00      	nop
 800e05c:	e7fe      	b.n	800e05c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e064:	f023 0301 	bic.w	r3, r3, #1
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	6a1b      	ldr	r3, [r3, #32]
 800e074:	6978      	ldr	r0, [r7, #20]
 800e076:	4798      	blx	r3
}
 800e078:	bf00      	nop
 800e07a:	3718      	adds	r7, #24
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}
 800e080:	2400abbc 	.word	0x2400abbc

0800e084 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e08c:	f107 0308 	add.w	r3, r7, #8
 800e090:	4618      	mov	r0, r3
 800e092:	f000 f857 	bl	800e144 <prvGetNextExpireTime>
 800e096:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	4619      	mov	r1, r3
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f000 f803 	bl	800e0a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0a2:	f000 f8d5 	bl	800e250 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0a6:	e7f1      	b.n	800e08c <prvTimerTask+0x8>

0800e0a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e0b2:	f7ff f93b 	bl	800d32c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0b6:	f107 0308 	add.w	r3, r7, #8
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f866 	bl	800e18c <prvSampleTimeNow>
 800e0c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d130      	bne.n	800e12a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10a      	bne.n	800e0e4 <prvProcessTimerOrBlockTask+0x3c>
 800e0ce:	687a      	ldr	r2, [r7, #4]
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d806      	bhi.n	800e0e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e0d6:	f7ff f937 	bl	800d348 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e0da:	68f9      	ldr	r1, [r7, #12]
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7ff ff85 	bl	800dfec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e0e2:	e024      	b.n	800e12e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d008      	beq.n	800e0fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <prvProcessTimerOrBlockTask+0x90>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <prvProcessTimerOrBlockTask+0x50>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e000      	b.n	800e0fa <prvProcessTimerOrBlockTask+0x52>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <prvProcessTimerOrBlockTask+0x94>)
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4619      	mov	r1, r3
 800e10a:	f7fe fe7f 	bl	800ce0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e10e:	f7ff f91b 	bl	800d348 <xTaskResumeAll>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e118:	4b09      	ldr	r3, [pc, #36]	; (800e140 <prvProcessTimerOrBlockTask+0x98>)
 800e11a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e11e:	601a      	str	r2, [r3, #0]
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	f3bf 8f6f 	isb	sy
}
 800e128:	e001      	b.n	800e12e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e12a:	f7ff f90d 	bl	800d348 <xTaskResumeAll>
}
 800e12e:	bf00      	nop
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	2400abc0 	.word	0x2400abc0
 800e13c:	2400abc4 	.word	0x2400abc4
 800e140:	e000ed04 	.word	0xe000ed04

0800e144 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e14c:	4b0e      	ldr	r3, [pc, #56]	; (800e188 <prvGetNextExpireTime+0x44>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d101      	bne.n	800e15a <prvGetNextExpireTime+0x16>
 800e156:	2201      	movs	r2, #1
 800e158:	e000      	b.n	800e15c <prvGetNextExpireTime+0x18>
 800e15a:	2200      	movs	r2, #0
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d105      	bne.n	800e174 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e168:	4b07      	ldr	r3, [pc, #28]	; (800e188 <prvGetNextExpireTime+0x44>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68db      	ldr	r3, [r3, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	60fb      	str	r3, [r7, #12]
 800e172:	e001      	b.n	800e178 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e178:	68fb      	ldr	r3, [r7, #12]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3714      	adds	r7, #20
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	2400abbc 	.word	0x2400abbc

0800e18c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e194:	f7ff f976 	bl	800d484 <xTaskGetTickCount>
 800e198:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e19a:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <prvSampleTimeNow+0x3c>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d205      	bcs.n	800e1b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1a4:	f000 f936 	bl	800e414 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	e002      	b.n	800e1b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e1b6:	4a04      	ldr	r2, [pc, #16]	; (800e1c8 <prvSampleTimeNow+0x3c>)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3710      	adds	r7, #16
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	2400abcc 	.word	0x2400abcc

0800e1cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b086      	sub	sp, #24
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d812      	bhi.n	800e218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	1ad2      	subs	r2, r2, r3
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d302      	bcc.n	800e206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e200:	2301      	movs	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
 800e204:	e01b      	b.n	800e23e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e206:	4b10      	ldr	r3, [pc, #64]	; (800e248 <prvInsertTimerInActiveList+0x7c>)
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4619      	mov	r1, r3
 800e210:	4610      	mov	r0, r2
 800e212:	f7fd fb6c 	bl	800b8ee <vListInsert>
 800e216:	e012      	b.n	800e23e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d206      	bcs.n	800e22e <prvInsertTimerInActiveList+0x62>
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	429a      	cmp	r2, r3
 800e226:	d302      	bcc.n	800e22e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e228:	2301      	movs	r3, #1
 800e22a:	617b      	str	r3, [r7, #20]
 800e22c:	e007      	b.n	800e23e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e22e:	4b07      	ldr	r3, [pc, #28]	; (800e24c <prvInsertTimerInActiveList+0x80>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3304      	adds	r3, #4
 800e236:	4619      	mov	r1, r3
 800e238:	4610      	mov	r0, r2
 800e23a:	f7fd fb58 	bl	800b8ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e23e:	697b      	ldr	r3, [r7, #20]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	2400abc0 	.word	0x2400abc0
 800e24c:	2400abbc 	.word	0x2400abbc

0800e250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b08e      	sub	sp, #56	; 0x38
 800e254:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e256:	e0ca      	b.n	800e3ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	da18      	bge.n	800e290 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e25e:	1d3b      	adds	r3, r7, #4
 800e260:	3304      	adds	r3, #4
 800e262:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	61fb      	str	r3, [r7, #28]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e286:	6850      	ldr	r0, [r2, #4]
 800e288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e28a:	6892      	ldr	r2, [r2, #8]
 800e28c:	4611      	mov	r1, r2
 800e28e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	f2c0 80ab 	blt.w	800e3ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29e:	695b      	ldr	r3, [r3, #20]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d004      	beq.n	800e2ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fd fb59 	bl	800b960 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e2ae:	463b      	mov	r3, r7
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff ff6b 	bl	800e18c <prvSampleTimeNow>
 800e2b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b09      	cmp	r3, #9
 800e2bc:	f200 8096 	bhi.w	800e3ec <prvProcessReceivedCommands+0x19c>
 800e2c0:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <prvProcessReceivedCommands+0x78>)
 800e2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c6:	bf00      	nop
 800e2c8:	0800e2f1 	.word	0x0800e2f1
 800e2cc:	0800e2f1 	.word	0x0800e2f1
 800e2d0:	0800e2f1 	.word	0x0800e2f1
 800e2d4:	0800e365 	.word	0x0800e365
 800e2d8:	0800e379 	.word	0x0800e379
 800e2dc:	0800e3c3 	.word	0x0800e3c3
 800e2e0:	0800e2f1 	.word	0x0800e2f1
 800e2e4:	0800e2f1 	.word	0x0800e2f1
 800e2e8:	0800e365 	.word	0x0800e365
 800e2ec:	0800e379 	.word	0x0800e379
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2f6:	f043 0301 	orr.w	r3, r3, #1
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	18d1      	adds	r1, r2, r3
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e310:	f7ff ff5c 	bl	800e1cc <prvInsertTimerInActiveList>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d069      	beq.n	800e3ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e328:	f003 0304 	and.w	r3, r3, #4
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d05e      	beq.n	800e3ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	441a      	add	r2, r3
 800e338:	2300      	movs	r3, #0
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	2300      	movs	r3, #0
 800e33e:	2100      	movs	r1, #0
 800e340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e342:	f7ff fe05 	bl	800df50 <xTimerGenericCommand>
 800e346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d14f      	bne.n	800e3ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	61bb      	str	r3, [r7, #24]
}
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e36a:	f023 0301 	bic.w	r3, r3, #1
 800e36e:	b2da      	uxtb	r2, r3
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e376:	e03a      	b.n	800e3ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e37a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e37e:	f043 0301 	orr.w	r3, r3, #1
 800e382:	b2da      	uxtb	r2, r3
 800e384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e38a:	68ba      	ldr	r2, [r7, #8]
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	699b      	ldr	r3, [r3, #24]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10a      	bne.n	800e3ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39c:	f383 8811 	msr	BASEPRI, r3
 800e3a0:	f3bf 8f6f 	isb	sy
 800e3a4:	f3bf 8f4f 	dsb	sy
 800e3a8:	617b      	str	r3, [r7, #20]
}
 800e3aa:	bf00      	nop
 800e3ac:	e7fe      	b.n	800e3ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b0:	699a      	ldr	r2, [r3, #24]
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	18d1      	adds	r1, r2, r3
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3bc:	f7ff ff06 	bl	800e1cc <prvInsertTimerInActiveList>
					break;
 800e3c0:	e015      	b.n	800e3ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3c8:	f003 0302 	and.w	r3, r3, #2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d103      	bne.n	800e3d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d2:	f7fd f91d 	bl	800b610 <vPortFree>
 800e3d6:	e00a      	b.n	800e3ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3de:	f023 0301 	bic.w	r3, r3, #1
 800e3e2:	b2da      	uxtb	r2, r3
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e3ea:	e000      	b.n	800e3ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e3ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3ee:	4b08      	ldr	r3, [pc, #32]	; (800e410 <prvProcessReceivedCommands+0x1c0>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	1d39      	adds	r1, r7, #4
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fe f8fc 	bl	800c5f4 <xQueueReceive>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f47f af2a 	bne.w	800e258 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e404:	bf00      	nop
 800e406:	bf00      	nop
 800e408:	3730      	adds	r7, #48	; 0x30
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	2400abc4 	.word	0x2400abc4

0800e414 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e41a:	e048      	b.n	800e4ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e41c:	4b2d      	ldr	r3, [pc, #180]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e426:	4b2b      	ldr	r3, [pc, #172]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3304      	adds	r3, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f7fd fa93 	bl	800b960 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6a1b      	ldr	r3, [r3, #32]
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d02e      	beq.n	800e4ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	4413      	add	r3, r2
 800e458:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e45a:	68ba      	ldr	r2, [r7, #8]
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d90e      	bls.n	800e480 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	68ba      	ldr	r2, [r7, #8]
 800e466:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	68fa      	ldr	r2, [r7, #12]
 800e46c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e46e:	4b19      	ldr	r3, [pc, #100]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	3304      	adds	r3, #4
 800e476:	4619      	mov	r1, r3
 800e478:	4610      	mov	r0, r2
 800e47a:	f7fd fa38 	bl	800b8ee <vListInsert>
 800e47e:	e016      	b.n	800e4ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e480:	2300      	movs	r3, #0
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	2300      	movs	r3, #0
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	2100      	movs	r1, #0
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff fd60 	bl	800df50 <xTimerGenericCommand>
 800e490:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d10a      	bne.n	800e4ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49c:	f383 8811 	msr	BASEPRI, r3
 800e4a0:	f3bf 8f6f 	isb	sy
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	603b      	str	r3, [r7, #0]
}
 800e4aa:	bf00      	nop
 800e4ac:	e7fe      	b.n	800e4ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4ae:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d1b1      	bne.n	800e41c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e4b8:	4b06      	ldr	r3, [pc, #24]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e4be:	4b06      	ldr	r3, [pc, #24]	; (800e4d8 <prvSwitchTimerLists+0xc4>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a04      	ldr	r2, [pc, #16]	; (800e4d4 <prvSwitchTimerLists+0xc0>)
 800e4c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e4c6:	4a04      	ldr	r2, [pc, #16]	; (800e4d8 <prvSwitchTimerLists+0xc4>)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	6013      	str	r3, [r2, #0]
}
 800e4cc:	bf00      	nop
 800e4ce:	3718      	adds	r7, #24
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	2400abbc 	.word	0x2400abbc
 800e4d8:	2400abc0 	.word	0x2400abc0

0800e4dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e4e2:	f7fd fb97 	bl	800bc14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e4e6:	4b15      	ldr	r3, [pc, #84]	; (800e53c <prvCheckForValidListAndQueue+0x60>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d120      	bne.n	800e530 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4ee:	4814      	ldr	r0, [pc, #80]	; (800e540 <prvCheckForValidListAndQueue+0x64>)
 800e4f0:	f7fd f9ac 	bl	800b84c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4f4:	4813      	ldr	r0, [pc, #76]	; (800e544 <prvCheckForValidListAndQueue+0x68>)
 800e4f6:	f7fd f9a9 	bl	800b84c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4fa:	4b13      	ldr	r3, [pc, #76]	; (800e548 <prvCheckForValidListAndQueue+0x6c>)
 800e4fc:	4a10      	ldr	r2, [pc, #64]	; (800e540 <prvCheckForValidListAndQueue+0x64>)
 800e4fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e500:	4b12      	ldr	r3, [pc, #72]	; (800e54c <prvCheckForValidListAndQueue+0x70>)
 800e502:	4a10      	ldr	r2, [pc, #64]	; (800e544 <prvCheckForValidListAndQueue+0x68>)
 800e504:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e506:	2300      	movs	r3, #0
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	4b11      	ldr	r3, [pc, #68]	; (800e550 <prvCheckForValidListAndQueue+0x74>)
 800e50c:	4a11      	ldr	r2, [pc, #68]	; (800e554 <prvCheckForValidListAndQueue+0x78>)
 800e50e:	2110      	movs	r1, #16
 800e510:	200a      	movs	r0, #10
 800e512:	f7fd fd09 	bl	800bf28 <xQueueGenericCreateStatic>
 800e516:	4603      	mov	r3, r0
 800e518:	4a08      	ldr	r2, [pc, #32]	; (800e53c <prvCheckForValidListAndQueue+0x60>)
 800e51a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e51c:	4b07      	ldr	r3, [pc, #28]	; (800e53c <prvCheckForValidListAndQueue+0x60>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d005      	beq.n	800e530 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e524:	4b05      	ldr	r3, [pc, #20]	; (800e53c <prvCheckForValidListAndQueue+0x60>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	490b      	ldr	r1, [pc, #44]	; (800e558 <prvCheckForValidListAndQueue+0x7c>)
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7fe fc1a 	bl	800cd64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e530:	f7fd fba0 	bl	800bc74 <vPortExitCritical>
}
 800e534:	bf00      	nop
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	2400abc4 	.word	0x2400abc4
 800e540:	2400ab94 	.word	0x2400ab94
 800e544:	2400aba8 	.word	0x2400aba8
 800e548:	2400abbc 	.word	0x2400abbc
 800e54c:	2400abc0 	.word	0x2400abc0
 800e550:	2400ac70 	.word	0x2400ac70
 800e554:	2400abd0 	.word	0x2400abd0
 800e558:	0802cd70 	.word	0x0802cd70

0800e55c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e560:	4b3f      	ldr	r3, [pc, #252]	; (800e660 <SystemInit+0x104>)
 800e562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e566:	4a3e      	ldr	r2, [pc, #248]	; (800e660 <SystemInit+0x104>)
 800e568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e56c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e570:	4b3b      	ldr	r3, [pc, #236]	; (800e660 <SystemInit+0x104>)
 800e572:	691b      	ldr	r3, [r3, #16]
 800e574:	4a3a      	ldr	r2, [pc, #232]	; (800e660 <SystemInit+0x104>)
 800e576:	f043 0310 	orr.w	r3, r3, #16
 800e57a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e57c:	4b39      	ldr	r3, [pc, #228]	; (800e664 <SystemInit+0x108>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f003 030f 	and.w	r3, r3, #15
 800e584:	2b06      	cmp	r3, #6
 800e586:	d807      	bhi.n	800e598 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e588:	4b36      	ldr	r3, [pc, #216]	; (800e664 <SystemInit+0x108>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f023 030f 	bic.w	r3, r3, #15
 800e590:	4a34      	ldr	r2, [pc, #208]	; (800e664 <SystemInit+0x108>)
 800e592:	f043 0307 	orr.w	r3, r3, #7
 800e596:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e598:	4b33      	ldr	r3, [pc, #204]	; (800e668 <SystemInit+0x10c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a32      	ldr	r2, [pc, #200]	; (800e668 <SystemInit+0x10c>)
 800e59e:	f043 0301 	orr.w	r3, r3, #1
 800e5a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e5a4:	4b30      	ldr	r3, [pc, #192]	; (800e668 <SystemInit+0x10c>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e5aa:	4b2f      	ldr	r3, [pc, #188]	; (800e668 <SystemInit+0x10c>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	492e      	ldr	r1, [pc, #184]	; (800e668 <SystemInit+0x10c>)
 800e5b0:	4b2e      	ldr	r3, [pc, #184]	; (800e66c <SystemInit+0x110>)
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e5b6:	4b2b      	ldr	r3, [pc, #172]	; (800e664 <SystemInit+0x108>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f003 0308 	and.w	r3, r3, #8
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d007      	beq.n	800e5d2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e5c2:	4b28      	ldr	r3, [pc, #160]	; (800e664 <SystemInit+0x108>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f023 030f 	bic.w	r3, r3, #15
 800e5ca:	4a26      	ldr	r2, [pc, #152]	; (800e664 <SystemInit+0x108>)
 800e5cc:	f043 0307 	orr.w	r3, r3, #7
 800e5d0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e5d2:	4b25      	ldr	r3, [pc, #148]	; (800e668 <SystemInit+0x10c>)
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e5d8:	4b23      	ldr	r3, [pc, #140]	; (800e668 <SystemInit+0x10c>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e5de:	4b22      	ldr	r3, [pc, #136]	; (800e668 <SystemInit+0x10c>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e5e4:	4b20      	ldr	r3, [pc, #128]	; (800e668 <SystemInit+0x10c>)
 800e5e6:	4a22      	ldr	r2, [pc, #136]	; (800e670 <SystemInit+0x114>)
 800e5e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e5ea:	4b1f      	ldr	r3, [pc, #124]	; (800e668 <SystemInit+0x10c>)
 800e5ec:	4a21      	ldr	r2, [pc, #132]	; (800e674 <SystemInit+0x118>)
 800e5ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e5f0:	4b1d      	ldr	r3, [pc, #116]	; (800e668 <SystemInit+0x10c>)
 800e5f2:	4a21      	ldr	r2, [pc, #132]	; (800e678 <SystemInit+0x11c>)
 800e5f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e5f6:	4b1c      	ldr	r3, [pc, #112]	; (800e668 <SystemInit+0x10c>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e5fc:	4b1a      	ldr	r3, [pc, #104]	; (800e668 <SystemInit+0x10c>)
 800e5fe:	4a1e      	ldr	r2, [pc, #120]	; (800e678 <SystemInit+0x11c>)
 800e600:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e602:	4b19      	ldr	r3, [pc, #100]	; (800e668 <SystemInit+0x10c>)
 800e604:	2200      	movs	r2, #0
 800e606:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e608:	4b17      	ldr	r3, [pc, #92]	; (800e668 <SystemInit+0x10c>)
 800e60a:	4a1b      	ldr	r2, [pc, #108]	; (800e678 <SystemInit+0x11c>)
 800e60c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e60e:	4b16      	ldr	r3, [pc, #88]	; (800e668 <SystemInit+0x10c>)
 800e610:	2200      	movs	r2, #0
 800e612:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e614:	4b14      	ldr	r3, [pc, #80]	; (800e668 <SystemInit+0x10c>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a13      	ldr	r2, [pc, #76]	; (800e668 <SystemInit+0x10c>)
 800e61a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e61e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e620:	4b11      	ldr	r3, [pc, #68]	; (800e668 <SystemInit+0x10c>)
 800e622:	2200      	movs	r2, #0
 800e624:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e626:	4b15      	ldr	r3, [pc, #84]	; (800e67c <SystemInit+0x120>)
 800e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62a:	4a14      	ldr	r2, [pc, #80]	; (800e67c <SystemInit+0x120>)
 800e62c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e630:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e632:	4b13      	ldr	r3, [pc, #76]	; (800e680 <SystemInit+0x124>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	4b13      	ldr	r3, [pc, #76]	; (800e684 <SystemInit+0x128>)
 800e638:	4013      	ands	r3, r2
 800e63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e63e:	d202      	bcs.n	800e646 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e640:	4b11      	ldr	r3, [pc, #68]	; (800e688 <SystemInit+0x12c>)
 800e642:	2201      	movs	r2, #1
 800e644:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e646:	4b11      	ldr	r3, [pc, #68]	; (800e68c <SystemInit+0x130>)
 800e648:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800e64c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e64e:	4b04      	ldr	r3, [pc, #16]	; (800e660 <SystemInit+0x104>)
 800e650:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e654:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800e656:	bf00      	nop
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	e000ed00 	.word	0xe000ed00
 800e664:	52002000 	.word	0x52002000
 800e668:	58024400 	.word	0x58024400
 800e66c:	eaf6ed7f 	.word	0xeaf6ed7f
 800e670:	02020200 	.word	0x02020200
 800e674:	01ff0000 	.word	0x01ff0000
 800e678:	01010280 	.word	0x01010280
 800e67c:	580000c0 	.word	0x580000c0
 800e680:	5c001000 	.word	0x5c001000
 800e684:	ffff0000 	.word	0xffff0000
 800e688:	51008108 	.word	0x51008108
 800e68c:	52004000 	.word	0x52004000

0800e690 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d103      	bne.n	800e6a8 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800e6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	e02c      	b.n	800e702 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	891a      	ldrh	r2, [r3, #8]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	68da      	ldr	r2, [r3, #12]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	691a      	ldr	r2, [r3, #16]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	695a      	ldr	r2, [r3, #20]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a0c      	ldr	r2, [pc, #48]	; (800e70c <FT5336_RegisterBusIO+0x7c>)
 800e6dc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a0b      	ldr	r2, [pc, #44]	; (800e710 <FT5336_RegisterBusIO+0x80>)
 800e6e2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d004      	beq.n	800e6fc <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	4798      	blx	r3
 800e6f8:	60f8      	str	r0, [r7, #12]
 800e6fa:	e002      	b.n	800e702 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800e6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e700:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e702:	68fb      	ldr	r3, [r7, #12]
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	0800eb09 	.word	0x0800eb09
 800e710:	0800eb3d 	.word	0x0800eb3d

0800e714 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2201      	movs	r2, #1
 800e722:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	2201      	movs	r2, #1
 800e728:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2205      	movs	r2, #5
 800e72e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e736:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e73e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr

0800e74e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e756:	2300      	movs	r3, #0
 800e758:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10d      	bne.n	800e780 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f987 	bl	800ea7e <FT5336_DisableIT>
 800e770:	4602      	mov	r2, r0
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	4413      	add	r3, r2
 800e776:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2201      	movs	r2, #1
 800e77c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d002      	beq.n	800e78c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e78c:	68fb      	ldr	r3, [r7, #12]
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800e796:	b480      	push	{r7}
 800e798:	b085      	sub	sp, #20
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d103      	bne.n	800e7b4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3714      	adds	r7, #20
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f103 0218 	add.w	r2, r3, #24
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4610      	mov	r0, r2
 800e7dc:	f000 fa25 	bl	800ec2a <ft5336_radian_value>
 800e7e0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f103 0218 	add.w	r2, r3, #24
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	4610      	mov	r0, r2
 800e7f2:	f000 fa2b 	bl	800ec4c <ft5336_offset_left_right>
 800e7f6:	4602      	mov	r2, r0
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f103 0218 	add.w	r2, r3, #24
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	689b      	ldr	r3, [r3, #8]
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	4619      	mov	r1, r3
 800e80c:	4610      	mov	r0, r2
 800e80e:	f000 fa2e 	bl	800ec6e <ft5336_offset_up_down>
 800e812:	4602      	mov	r2, r0
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	4413      	add	r3, r2
 800e818:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f103 0218 	add.w	r2, r3, #24
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	b2db      	uxtb	r3, r3
 800e826:	4619      	mov	r1, r3
 800e828:	4610      	mov	r0, r2
 800e82a:	f000 fa31 	bl	800ec90 <ft5336_disatnce_left_right>
 800e82e:	4602      	mov	r2, r0
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4413      	add	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f103 0218 	add.w	r2, r3, #24
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	b2db      	uxtb	r3, r3
 800e842:	4619      	mov	r1, r3
 800e844:	4610      	mov	r0, r2
 800e846:	f000 fa34 	bl	800ecb2 <ft5336_distance_up_down>
 800e84a:	4602      	mov	r2, r0
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	4413      	add	r3, r2
 800e850:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f103 0218 	add.w	r2, r3, #24
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	695b      	ldr	r3, [r3, #20]
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	4619      	mov	r1, r3
 800e860:	4610      	mov	r0, r2
 800e862:	f000 fa37 	bl	800ecd4 <ft5336_distance_zoom>
 800e866:	4602      	mov	r2, r0
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	4413      	add	r3, r2
 800e86c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800e874:	f04f 33ff 	mov.w	r3, #4294967295
 800e878:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e87a:	68fb      	ldr	r3, [r7, #12]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3318      	adds	r3, #24
 800e892:	6839      	ldr	r1, [r7, #0]
 800e894:	4618      	mov	r0, r3
 800e896:	f000 fa3f 	bl	800ed18 <ft5336_chip_id>
 800e89a:	4603      	mov	r3, r0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}

0800e8a4 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b084      	sub	sp, #16
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e8b2:	6878      	ldr	r0, [r7, #4]
 800e8b4:	f000 f908 	bl	800eac8 <FT5336_DetectTouch>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f103 0018 	add.w	r0, r3, #24
 800e8c6:	f107 0208 	add.w	r2, r7, #8
 800e8ca:	2304      	movs	r3, #4
 800e8cc:	2103      	movs	r1, #3
 800e8ce:	f000 f94f 	bl	800eb70 <ft5336_read_reg>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800e8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8dc:	60fb      	str	r3, [r7, #12]
 800e8de:	e00f      	b.n	800e900 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800e8e0:	7a3b      	ldrb	r3, [r7, #8]
 800e8e2:	021b      	lsls	r3, r3, #8
 800e8e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e8e8:	7a7a      	ldrb	r2, [r7, #9]
 800e8ea:	431a      	orrs	r2, r3
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800e8f0:	7abb      	ldrb	r3, [r7, #10]
 800e8f2:	021b      	lsls	r3, r3, #8
 800e8f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e8f8:	7afa      	ldrb	r2, [r7, #11]
 800e8fa:	431a      	orrs	r2, r3
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e900:	68fb      	ldr	r3, [r7, #12]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b08c      	sub	sp, #48	; 0x30
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
 800e912:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f8d5 	bl	800eac8 <FT5336_DetectTouch>
 800e91e:	4603      	mov	r3, r0
 800e920:	461a      	mov	r2, r3
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f103 0018 	add.w	r0, r3, #24
 800e92c:	f107 0208 	add.w	r2, r7, #8
 800e930:	231e      	movs	r3, #30
 800e932:	2103      	movs	r1, #3
 800e934:	f000 f91c 	bl	800eb70 <ft5336_read_reg>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800e93e:	f04f 33ff 	mov.w	r3, #4294967295
 800e942:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e944:	e077      	b.n	800ea36 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e946:	2300      	movs	r3, #0
 800e948:	62bb      	str	r3, [r7, #40]	; 0x28
 800e94a:	e071      	b.n	800ea30 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800e94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e94e:	4613      	mov	r3, r2
 800e950:	005b      	lsls	r3, r3, #1
 800e952:	4413      	add	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	3330      	adds	r3, #48	; 0x30
 800e958:	443b      	add	r3, r7
 800e95a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e95e:	021b      	lsls	r3, r3, #8
 800e960:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e966:	4613      	mov	r3, r2
 800e968:	005b      	lsls	r3, r3, #1
 800e96a:	4413      	add	r3, r2
 800e96c:	005b      	lsls	r3, r3, #1
 800e96e:	3301      	adds	r3, #1
 800e970:	3330      	adds	r3, #48	; 0x30
 800e972:	443b      	add	r3, r7
 800e974:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e978:	ea41 0203 	orr.w	r2, r1, r3
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	440b      	add	r3, r1
 800e984:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800e986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e988:	4613      	mov	r3, r2
 800e98a:	005b      	lsls	r3, r3, #1
 800e98c:	4413      	add	r3, r2
 800e98e:	005b      	lsls	r3, r3, #1
 800e990:	3302      	adds	r3, #2
 800e992:	3330      	adds	r3, #48	; 0x30
 800e994:	443b      	add	r3, r7
 800e996:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e99a:	021b      	lsls	r3, r3, #8
 800e99c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800e9a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	005b      	lsls	r3, r3, #1
 800e9a6:	4413      	add	r3, r2
 800e9a8:	005b      	lsls	r3, r3, #1
 800e9aa:	3303      	adds	r3, #3
 800e9ac:	3330      	adds	r3, #48	; 0x30
 800e9ae:	443b      	add	r3, r7
 800e9b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9b4:	4319      	orrs	r1, r3
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ba:	3206      	adds	r2, #6
 800e9bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800e9c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	4413      	add	r3, r2
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	3330      	adds	r3, #48	; 0x30
 800e9cc:	443b      	add	r3, r7
 800e9ce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9d2:	099b      	lsrs	r3, r3, #6
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9dc:	3210      	adds	r2, #16
 800e9de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800e9e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	4413      	add	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	3330      	adds	r3, #48	; 0x30
 800e9f0:	443b      	add	r3, r7
 800e9f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	683a      	ldr	r2, [r7, #0]
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fc:	330a      	adds	r3, #10
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	4413      	add	r3, r2
 800ea02:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ea04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea06:	4613      	mov	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	4413      	add	r3, r2
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	3305      	adds	r3, #5
 800ea10:	3330      	adds	r3, #48	; 0x30
 800ea12:	443b      	add	r3, r7
 800ea14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ea18:	091b      	lsrs	r3, r3, #4
 800ea1a:	b2db      	uxtb	r3, r3
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	683a      	ldr	r2, [r7, #0]
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	3314      	adds	r3, #20
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	4413      	add	r3, r2
 800ea28:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800ea2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea32:	2b04      	cmp	r3, #4
 800ea34:	d98a      	bls.n	800e94c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3730      	adds	r7, #48	; 0x30
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3318      	adds	r3, #24
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 f8bb 	bl	800ebcc <ft5336_gest_id>
 800ea56:	4603      	mov	r3, r0
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3318      	adds	r3, #24
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 f941 	bl	800ecf6 <ft5336_g_mode>
 800ea74:	4603      	mov	r3, r0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b082      	sub	sp, #8
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	3318      	adds	r3, #24
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f000 f932 	bl	800ecf6 <ft5336_g_mode>
 800ea92:	4603      	mov	r3, r0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3708      	adds	r7, #8
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b083      	sub	sp, #12
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	3318      	adds	r3, #24
 800ead4:	f107 020b 	add.w	r2, r7, #11
 800ead8:	4611      	mov	r1, r2
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 f886 	bl	800ebec <ft5336_td_status>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d003      	beq.n	800eaee <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800eae6:	f04f 33ff 	mov.w	r3, #4294967295
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	e007      	b.n	800eafe <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800eaee:	7afb      	ldrb	r3, [r7, #11]
 800eaf0:	2b05      	cmp	r3, #5
 800eaf2:	d902      	bls.n	800eafa <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	60fb      	str	r3, [r7, #12]
 800eaf8:	e001      	b.n	800eafe <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800eafa:	7afb      	ldrb	r3, [r7, #11]
 800eafc:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800eafe:	68fb      	ldr	r3, [r7, #12]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eb08:	b590      	push	{r4, r7, lr}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	607a      	str	r2, [r7, #4]
 800eb12:	461a      	mov	r2, r3
 800eb14:	460b      	mov	r3, r1
 800eb16:	72fb      	strb	r3, [r7, #11]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	691c      	ldr	r4, [r3, #16]
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	8918      	ldrh	r0, [r3, #8]
 800eb28:	7afb      	ldrb	r3, [r7, #11]
 800eb2a:	b299      	uxth	r1, r3
 800eb2c:	893b      	ldrh	r3, [r7, #8]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	47a0      	blx	r4
 800eb32:	4603      	mov	r3, r0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	371c      	adds	r7, #28
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd90      	pop	{r4, r7, pc}

0800eb3c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eb3c:	b590      	push	{r4, r7, lr}
 800eb3e:	b087      	sub	sp, #28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	607a      	str	r2, [r7, #4]
 800eb46:	461a      	mov	r2, r3
 800eb48:	460b      	mov	r3, r1
 800eb4a:	72fb      	strb	r3, [r7, #11]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	68dc      	ldr	r4, [r3, #12]
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	8918      	ldrh	r0, [r3, #8]
 800eb5c:	7afb      	ldrb	r3, [r7, #11]
 800eb5e:	b299      	uxth	r1, r3
 800eb60:	893b      	ldrh	r3, [r7, #8]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	47a0      	blx	r4
 800eb66:	4603      	mov	r3, r0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	371c      	adds	r7, #28
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd90      	pop	{r4, r7, pc}

0800eb70 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800eb70:	b590      	push	{r4, r7, lr}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	60f8      	str	r0, [r7, #12]
 800eb78:	607a      	str	r2, [r7, #4]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	72fb      	strb	r3, [r7, #11]
 800eb80:	4613      	mov	r3, r2
 800eb82:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	685c      	ldr	r4, [r3, #4]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6898      	ldr	r0, [r3, #8]
 800eb8c:	893b      	ldrh	r3, [r7, #8]
 800eb8e:	7af9      	ldrb	r1, [r7, #11]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	47a0      	blx	r4
 800eb94:	4603      	mov	r3, r0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3714      	adds	r7, #20
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd90      	pop	{r4, r7, pc}

0800eb9e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800eb9e:	b590      	push	{r4, r7, lr}
 800eba0:	b085      	sub	sp, #20
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	60f8      	str	r0, [r7, #12]
 800eba6:	607a      	str	r2, [r7, #4]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	460b      	mov	r3, r1
 800ebac:	72fb      	strb	r3, [r7, #11]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681c      	ldr	r4, [r3, #0]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6898      	ldr	r0, [r3, #8]
 800ebba:	893b      	ldrh	r3, [r7, #8]
 800ebbc:	7af9      	ldrb	r1, [r7, #11]
 800ebbe:	687a      	ldr	r2, [r7, #4]
 800ebc0:	47a0      	blx	r4
 800ebc2:	4603      	mov	r3, r0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd90      	pop	{r4, r7, pc}

0800ebcc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	2101      	movs	r1, #1
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f7ff ffc7 	bl	800eb70 <ft5336_read_reg>
 800ebe2:	4603      	mov	r3, r0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3708      	adds	r7, #8
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}

0800ebec <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
 800ebf4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	683a      	ldr	r2, [r7, #0]
 800ebfa:	2102      	movs	r1, #2
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff ffb7 	bl	800eb70 <ft5336_read_reg>
 800ec02:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d10a      	bne.n	800ec20 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	f003 030f 	and.w	r3, r3, #15
 800ec12:	b2da      	uxtb	r2, r3
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	781a      	ldrb	r2, [r3, #0]
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ec20:	68fb      	ldr	r3, [r7, #12]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	460b      	mov	r3, r1
 800ec34:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ec36:	1cfa      	adds	r2, r7, #3
 800ec38:	2301      	movs	r3, #1
 800ec3a:	2191      	movs	r1, #145	; 0x91
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7ff ffae 	bl	800eb9e <ft5336_write_reg>
 800ec42:	4603      	mov	r3, r0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	460b      	mov	r3, r1
 800ec56:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ec58:	1cfa      	adds	r2, r7, #3
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	2192      	movs	r1, #146	; 0x92
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f7ff ff9d 	bl	800eb9e <ft5336_write_reg>
 800ec64:	4603      	mov	r3, r0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}

0800ec6e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec6e:	b580      	push	{r7, lr}
 800ec70:	b082      	sub	sp, #8
 800ec72:	af00      	add	r7, sp, #0
 800ec74:	6078      	str	r0, [r7, #4]
 800ec76:	460b      	mov	r3, r1
 800ec78:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ec7a:	1cfa      	adds	r2, r7, #3
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	2193      	movs	r1, #147	; 0x93
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff ff8c 	bl	800eb9e <ft5336_write_reg>
 800ec86:	4603      	mov	r3, r0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ec9c:	1cfa      	adds	r2, r7, #3
 800ec9e:	2301      	movs	r3, #1
 800eca0:	2194      	movs	r1, #148	; 0x94
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff ff7b 	bl	800eb9e <ft5336_write_reg>
 800eca8:	4603      	mov	r3, r0
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}

0800ecb2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b082      	sub	sp, #8
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
 800ecba:	460b      	mov	r3, r1
 800ecbc:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800ecbe:	1cfa      	adds	r2, r7, #3
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	2195      	movs	r1, #149	; 0x95
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff ff6a 	bl	800eb9e <ft5336_write_reg>
 800ecca:	4603      	mov	r3, r0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ece0:	1cfa      	adds	r2, r7, #3
 800ece2:	2301      	movs	r3, #1
 800ece4:	2196      	movs	r1, #150	; 0x96
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff ff59 	bl	800eb9e <ft5336_write_reg>
 800ecec:	4603      	mov	r3, r0
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b082      	sub	sp, #8
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	460b      	mov	r3, r1
 800ed00:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800ed02:	1cfa      	adds	r2, r7, #3
 800ed04:	2301      	movs	r3, #1
 800ed06:	21a4      	movs	r1, #164	; 0xa4
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff ff48 	bl	800eb9e <ft5336_write_reg>
 800ed0e:	4603      	mov	r3, r0
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ed22:	2301      	movs	r3, #1
 800ed24:	683a      	ldr	r2, [r7, #0]
 800ed26:	21a8      	movs	r1, #168	; 0xa8
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f7ff ff21 	bl	800eb70 <ft5336_read_reg>
 800ed2e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d107      	bne.n	800ed46 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	781a      	ldrb	r2, [r3, #0]
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	781a      	ldrb	r2, [r3, #0]
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ed46:	68fb      	ldr	r3, [r7, #12]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3710      	adds	r7, #16
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed5e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ed66:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed6e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed78:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	68db      	ldr	r3, [r3, #12]
 800ed84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ed88:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	370c      	adds	r7, #12
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr

0800ed9e <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b090      	sub	sp, #64	; 0x40
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800edaa:	78fb      	ldrb	r3, [r7, #3]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d102      	bne.n	800edb6 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800edb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800edb4:	e001      	b.n	800edba <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800edb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edba:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800edbc:	23b7      	movs	r3, #183	; 0xb7
 800edbe:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800edc4:	2300      	movs	r3, #0
 800edc6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800edc8:	2300      	movs	r3, #0
 800edca:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800edd0:	2300      	movs	r3, #0
 800edd2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800edd4:	2300      	movs	r3, #0
 800edd6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800edd8:	2300      	movs	r3, #0
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800eddc:	78fb      	ldrb	r3, [r7, #3]
 800edde:	4619      	mov	r1, r3
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 f860 	bl	800eea6 <MT25TL01G_WriteEnable>
 800ede6:	4603      	mov	r3, r0
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800edec:	f06f 0301 	mvn.w	r3, #1
 800edf0:	e019      	b.n	800ee26 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edfa:	4619      	mov	r1, r3
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f004 fd45 	bl	801388c <HAL_QSPI_Command>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee08:	f06f 0301 	mvn.w	r3, #1
 800ee0c:	e00b      	b.n	800ee26 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800ee0e:	78fb      	ldrb	r3, [r7, #3]
 800ee10:	4619      	mov	r1, r3
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f80b 	bl	800ee2e <MT25TL01G_AutoPollingMemReady>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d002      	beq.n	800ee24 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee1e:	f06f 0301 	mvn.w	r3, #1
 800ee22:	e000      	b.n	800ee26 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3740      	adds	r7, #64	; 0x40
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b096      	sub	sp, #88	; 0x58
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ee3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee3e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ee40:	2305      	movs	r3, #5
 800ee42:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ee44:	2300      	movs	r3, #0
 800ee46:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ee4c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ee50:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800ee52:	2302      	movs	r3, #2
 800ee54:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ee56:	2300      	movs	r3, #0
 800ee58:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ee66:	2300      	movs	r3, #0
 800ee68:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800ee6a:	2310      	movs	r3, #16
 800ee6c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ee6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ee72:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800ee74:	f240 1301 	movw	r3, #257	; 0x101
 800ee78:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800ee7a:	2302      	movs	r3, #2
 800ee7c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ee7e:	f107 0208 	add.w	r2, r7, #8
 800ee82:	f107 0120 	add.w	r1, r7, #32
 800ee86:	f241 3388 	movw	r3, #5000	; 0x1388
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f004 fe8b 	bl	8013ba6 <HAL_QSPI_AutoPolling>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d002      	beq.n	800ee9c <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ee96:	f06f 0304 	mvn.w	r3, #4
 800ee9a:	e000      	b.n	800ee9e <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800ee9c:	2300      	movs	r3, #0

}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3758      	adds	r7, #88	; 0x58
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}

0800eea6 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800eea6:	b580      	push	{r7, lr}
 800eea8:	b096      	sub	sp, #88	; 0x58
 800eeaa:	af00      	add	r7, sp, #0
 800eeac:	6078      	str	r0, [r7, #4]
 800eeae:	460b      	mov	r3, r1
 800eeb0:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800eeb2:	78fb      	ldrb	r3, [r7, #3]
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d102      	bne.n	800eebe <MT25TL01G_WriteEnable+0x18>
 800eeb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eebc:	e001      	b.n	800eec2 <MT25TL01G_WriteEnable+0x1c>
 800eebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eec2:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800eec4:	2306      	movs	r3, #6
 800eec6:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800eec8:	2300      	movs	r3, #0
 800eeca:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800eecc:	2300      	movs	r3, #0
 800eece:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800eed0:	2300      	movs	r3, #0
 800eed2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800eed4:	2300      	movs	r3, #0
 800eed6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800eed8:	2300      	movs	r3, #0
 800eeda:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800eedc:	2300      	movs	r3, #0
 800eede:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800eee0:	2300      	movs	r3, #0
 800eee2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800eee4:	f107 0320 	add.w	r3, r7, #32
 800eee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f004 fccc 	bl	801388c <HAL_QSPI_Command>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800eefa:	f06f 0301 	mvn.w	r3, #1
 800eefe:	e029      	b.n	800ef54 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800ef00:	f240 2302 	movw	r3, #514	; 0x202
 800ef04:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800ef06:	f240 2302 	movw	r3, #514	; 0x202
 800ef0a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800ef10:	2302      	movs	r3, #2
 800ef12:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800ef14:	2310      	movs	r3, #16
 800ef16:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ef18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ef1c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ef1e:	2305      	movs	r3, #5
 800ef20:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ef22:	78fb      	ldrb	r3, [r7, #3]
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d102      	bne.n	800ef2e <MT25TL01G_WriteEnable+0x88>
 800ef28:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ef2c:	e001      	b.n	800ef32 <MT25TL01G_WriteEnable+0x8c>
 800ef2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ef32:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef34:	f107 0208 	add.w	r2, r7, #8
 800ef38:	f107 0120 	add.w	r1, r7, #32
 800ef3c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f004 fe30 	bl	8013ba6 <HAL_QSPI_AutoPolling>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ef4c:	f06f 0304 	mvn.w	r3, #4
 800ef50:	e000      	b.n	800ef54 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3758      	adds	r7, #88	; 0x58
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b090      	sub	sp, #64	; 0x40
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ef64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef68:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ef6a:	2335      	movs	r3, #53	; 0x35
 800ef6c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ef72:	2300      	movs	r3, #0
 800ef74:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ef82:	2300      	movs	r3, #0
 800ef84:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ef86:	2300      	movs	r3, #0
 800ef88:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef8a:	f107 0308 	add.w	r3, r7, #8
 800ef8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef92:	4619      	mov	r1, r3
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f004 fc79 	bl	801388c <HAL_QSPI_Command>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800efa0:	f06f 0301 	mvn.w	r3, #1
 800efa4:	e000      	b.n	800efa8 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3740      	adds	r7, #64	; 0x40
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b090      	sub	sp, #64	; 0x40
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800efb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efbc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800efbe:	23f5      	movs	r3, #245	; 0xf5
 800efc0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800efc2:	2300      	movs	r3, #0
 800efc4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800efc6:	2300      	movs	r3, #0
 800efc8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800efca:	2300      	movs	r3, #0
 800efcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800efce:	2300      	movs	r3, #0
 800efd0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800efd6:	2300      	movs	r3, #0
 800efd8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800efda:	2300      	movs	r3, #0
 800efdc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800efde:	f107 0308 	add.w	r3, r7, #8
 800efe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800efe6:	4619      	mov	r1, r3
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f004 fc4f 	bl	801388c <HAL_QSPI_Command>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d002      	beq.n	800effa <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800eff4:	f06f 0301 	mvn.w	r3, #1
 800eff8:	e000      	b.n	800effc <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3740      	adds	r7, #64	; 0x40
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b092      	sub	sp, #72	; 0x48
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f010:	78fb      	ldrb	r3, [r7, #3]
 800f012:	2b03      	cmp	r3, #3
 800f014:	d83a      	bhi.n	800f08c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f02d 	.word	0x0800f02d
 800f020:	0800f045 	.word	0x0800f045
 800f024:	0800f05d 	.word	0x0800f05d
 800f028:	0800f075 	.word	0x0800f075
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f030:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800f032:	230e      	movs	r3, #14
 800f034:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f03c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f040:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f042:	e023      	b.n	800f08c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f044:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f048:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800f04a:	233d      	movs	r3, #61	; 0x3d
 800f04c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f04e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f052:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f054:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f058:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f05a:	e017      	b.n	800f08c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f05c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f060:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800f062:	23ee      	movs	r3, #238	; 0xee
 800f064:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f066:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f06a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f06c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f070:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f072:	e00b      	b.n	800f08c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f074:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f078:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800f07a:	23ed      	movs	r3, #237	; 0xed
 800f07c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f07e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f082:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f084:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f088:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f08a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f08c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f090:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f092:	2300      	movs	r3, #0
 800f094:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800f096:	2308      	movs	r3, #8
 800f098:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800f09a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f09e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800f0a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f0a4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f0b2:	f107 0208 	add.w	r2, r7, #8
 800f0b6:	f107 0310 	add.w	r3, r7, #16
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f004 fde9 	bl	8013c94 <HAL_QSPI_MemoryMapped>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f0c8:	f06f 0305 	mvn.w	r3, #5
 800f0cc:	e000      	b.n	800f0d0 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3748      	adds	r7, #72	; 0x48
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b092      	sub	sp, #72	; 0x48
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	460b      	mov	r3, r1
 800f0e2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f0e4:	78fb      	ldrb	r3, [r7, #3]
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d83a      	bhi.n	800f160 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800f0ea:	a201      	add	r2, pc, #4	; (adr r2, 800f0f0 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800f0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f0:	0800f101 	.word	0x0800f101
 800f0f4:	0800f119 	.word	0x0800f119
 800f0f8:	0800f131 	.word	0x0800f131
 800f0fc:	0800f149 	.word	0x0800f149
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f100:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f104:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800f106:	230c      	movs	r3, #12
 800f108:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f10e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f114:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800f116:	e023      	b.n	800f160 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f11c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f11e:	23bc      	movs	r3, #188	; 0xbc
 800f120:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800f122:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f126:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f12c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f12e:	e017      	b.n	800f160 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f130:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f134:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f136:	23ec      	movs	r3, #236	; 0xec
 800f138:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f13a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f13e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f140:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f144:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f146:	e00b      	b.n	800f160 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f14c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800f14e:	23eb      	movs	r3, #235	; 0xeb
 800f150:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f152:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f156:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f158:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800f15c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800f15e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f160:	2308      	movs	r3, #8
 800f162:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f164:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f168:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f16a:	2300      	movs	r3, #0
 800f16c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f16e:	2300      	movs	r3, #0
 800f170:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f172:	2300      	movs	r3, #0
 800f174:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f176:	2300      	movs	r3, #0
 800f178:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f17a:	2300      	movs	r3, #0
 800f17c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f182:	f107 0208 	add.w	r2, r7, #8
 800f186:	f107 0310 	add.w	r3, r7, #16
 800f18a:	4619      	mov	r1, r3
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f004 fd81 	bl	8013c94 <HAL_QSPI_MemoryMapped>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d002      	beq.n	800f19e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f198:	f06f 0305 	mvn.w	r3, #5
 800f19c:	e000      	b.n	800f1a0 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3748      	adds	r7, #72	; 0x48
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b090      	sub	sp, #64	; 0x40
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f1b4:	78fb      	ldrb	r3, [r7, #3]
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d102      	bne.n	800f1c0 <MT25TL01G_ResetEnable+0x18>
 800f1ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f1be:	e001      	b.n	800f1c4 <MT25TL01G_ResetEnable+0x1c>
 800f1c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1c4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f1c6:	2366      	movs	r3, #102	; 0x66
 800f1c8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f1e6:	f107 0308 	add.w	r3, r7, #8
 800f1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f004 fb4b 	bl	801388c <HAL_QSPI_Command>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f1fc:	f06f 0301 	mvn.w	r3, #1
 800f200:	e000      	b.n	800f204 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3740      	adds	r7, #64	; 0x40
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b090      	sub	sp, #64	; 0x40
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	460b      	mov	r3, r1
 800f216:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f218:	78fb      	ldrb	r3, [r7, #3]
 800f21a:	2b03      	cmp	r3, #3
 800f21c:	d102      	bne.n	800f224 <MT25TL01G_ResetMemory+0x18>
 800f21e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f222:	e001      	b.n	800f228 <MT25TL01G_ResetMemory+0x1c>
 800f224:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f228:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f22a:	2399      	movs	r3, #153	; 0x99
 800f22c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f22e:	2300      	movs	r3, #0
 800f230:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f232:	2300      	movs	r3, #0
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f236:	2300      	movs	r3, #0
 800f238:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f23e:	2300      	movs	r3, #0
 800f240:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f242:	2300      	movs	r3, #0
 800f244:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f246:	2300      	movs	r3, #0
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f24a:	f107 0308 	add.w	r3, r7, #8
 800f24e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f252:	4619      	mov	r1, r3
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f004 fb19 	bl	801388c <HAL_QSPI_Command>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f260:	f06f 0301 	mvn.w	r3, #1
 800f264:	e000      	b.n	800f268 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3740      	adds	r7, #64	; 0x40
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f27a:	f04f 33ff 	mov.w	r3, #4294967295
 800f27e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4619      	mov	r1, r3
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 f832 	bl	800f2f0 <MT48LC4M32B2_ClockEnable>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d128      	bne.n	800f2e4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f292:	2001      	movs	r0, #1
 800f294:	f000 f8e2 	bl	800f45c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f000 f84a 	bl	800f338 <MT48LC4M32B2_Precharge>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d11c      	bne.n	800f2e4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	6819      	ldr	r1, [r3, #0]
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f897 	bl	800f3e8 <MT48LC4M32B2_RefreshMode>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d111      	bne.n	800f2e4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f85c 	bl	800f380 <MT48LC4M32B2_ModeRegConfig>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10a      	bne.n	800f2e4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 f8ad 	bl	800f434 <MT48LC4M32B2_RefreshRate>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d101      	bne.n	800f2e4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f2fa:	4b0e      	ldr	r3, [pc, #56]	; (800f334 <MT48LC4M32B2_ClockEnable+0x44>)
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f300:	4a0c      	ldr	r2, [pc, #48]	; (800f334 <MT48LC4M32B2_ClockEnable+0x44>)
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f306:	4b0b      	ldr	r3, [pc, #44]	; (800f334 <MT48LC4M32B2_ClockEnable+0x44>)
 800f308:	2201      	movs	r2, #1
 800f30a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f30c:	4b09      	ldr	r3, [pc, #36]	; (800f334 <MT48LC4M32B2_ClockEnable+0x44>)
 800f30e:	2200      	movs	r2, #0
 800f310:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f316:	4907      	ldr	r1, [pc, #28]	; (800f334 <MT48LC4M32B2_ClockEnable+0x44>)
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f007 fbc3 	bl	8016aa4 <HAL_SDRAM_SendCommand>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d002      	beq.n	800f32a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f324:	f04f 33ff 	mov.w	r3, #4294967295
 800f328:	e000      	b.n	800f32c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f32a:	2300      	movs	r3, #0
  }
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	2400acc0 	.word	0x2400acc0

0800f338 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f342:	4b0e      	ldr	r3, [pc, #56]	; (800f37c <MT48LC4M32B2_Precharge+0x44>)
 800f344:	2202      	movs	r2, #2
 800f346:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f348:	4a0c      	ldr	r2, [pc, #48]	; (800f37c <MT48LC4M32B2_Precharge+0x44>)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f34e:	4b0b      	ldr	r3, [pc, #44]	; (800f37c <MT48LC4M32B2_Precharge+0x44>)
 800f350:	2201      	movs	r2, #1
 800f352:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f354:	4b09      	ldr	r3, [pc, #36]	; (800f37c <MT48LC4M32B2_Precharge+0x44>)
 800f356:	2200      	movs	r2, #0
 800f358:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f35e:	4907      	ldr	r1, [pc, #28]	; (800f37c <MT48LC4M32B2_Precharge+0x44>)
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f007 fb9f 	bl	8016aa4 <HAL_SDRAM_SendCommand>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f36c:	f04f 33ff 	mov.w	r3, #4294967295
 800f370:	e000      	b.n	800f374 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f372:	2300      	movs	r3, #0
  }
}
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	2400acc0 	.word	0x2400acc0

0800f380 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f392:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f398:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f39e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3aa:	2204      	movs	r2, #4
 800f3ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a0c      	ldr	r2, [pc, #48]	; (800f3e4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f3b6:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f3bc:	4a09      	ldr	r2, [pc, #36]	; (800f3e4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f3c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3c6:	4907      	ldr	r1, [pc, #28]	; (800f3e4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f007 fb6b 	bl	8016aa4 <HAL_SDRAM_SendCommand>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d8:	e000      	b.n	800f3dc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f3da:	2300      	movs	r3, #0
  }
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3710      	adds	r7, #16
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	2400acc0 	.word	0x2400acc0

0800f3e8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f3f4:	4a0e      	ldr	r2, [pc, #56]	; (800f430 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f3fa:	4a0d      	ldr	r2, [pc, #52]	; (800f430 <MT48LC4M32B2_RefreshMode+0x48>)
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f400:	4b0b      	ldr	r3, [pc, #44]	; (800f430 <MT48LC4M32B2_RefreshMode+0x48>)
 800f402:	2208      	movs	r2, #8
 800f404:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f406:	4b0a      	ldr	r3, [pc, #40]	; (800f430 <MT48LC4M32B2_RefreshMode+0x48>)
 800f408:	2200      	movs	r2, #0
 800f40a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f40c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f410:	4907      	ldr	r1, [pc, #28]	; (800f430 <MT48LC4M32B2_RefreshMode+0x48>)
 800f412:	68f8      	ldr	r0, [r7, #12]
 800f414:	f007 fb46 	bl	8016aa4 <HAL_SDRAM_SendCommand>
 800f418:	4603      	mov	r3, r0
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f41e:	f04f 33ff 	mov.w	r3, #4294967295
 800f422:	e000      	b.n	800f426 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f424:	2300      	movs	r3, #0
  }
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	2400acc0 	.word	0x2400acc0

0800f434 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f007 fb64 	bl	8016b0e <HAL_SDRAM_ProgramRefreshRate>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d002      	beq.n	800f452 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f44c:	f04f 33ff 	mov.w	r3, #4294967295
 800f450:	e000      	b.n	800f454 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f452:	2300      	movs	r3, #0
  }
}
 800f454:	4618      	mov	r0, r3
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f464:	f001 fcfc 	bl	8010e60 <HAL_GetTick>
 800f468:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f46a:	bf00      	nop
 800f46c:	f001 fcf8 	bl	8010e60 <HAL_GetTick>
 800f470:	4602      	mov	r2, r0
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d8f7      	bhi.n	800f46c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3710      	adds	r7, #16
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f48e:	2300      	movs	r3, #0
 800f490:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f492:	4b16      	ldr	r3, [pc, #88]	; (800f4ec <BSP_I2C4_Init+0x64>)
 800f494:	4a16      	ldr	r2, [pc, #88]	; (800f4f0 <BSP_I2C4_Init+0x68>)
 800f496:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f498:	4b16      	ldr	r3, [pc, #88]	; (800f4f4 <BSP_I2C4_Init+0x6c>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d11f      	bne.n	800f4e0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f4a0:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <BSP_I2C4_Init+0x6c>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3301      	adds	r3, #1
 800f4a6:	4a13      	ldr	r2, [pc, #76]	; (800f4f4 <BSP_I2C4_Init+0x6c>)
 800f4a8:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f4aa:	4810      	ldr	r0, [pc, #64]	; (800f4ec <BSP_I2C4_Init+0x64>)
 800f4ac:	f002 ff00 	bl	80122b0 <HAL_I2C_GetState>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d114      	bne.n	800f4e0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f4b6:	480d      	ldr	r0, [pc, #52]	; (800f4ec <BSP_I2C4_Init+0x64>)
 800f4b8:	f000 fb60 	bl	800fb7c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f4bc:	f005 fed4 	bl	8015268 <HAL_RCC_GetPCLK2Freq>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	490d      	ldr	r1, [pc, #52]	; (800f4f8 <BSP_I2C4_Init+0x70>)
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f000 f8e3 	bl	800f690 <I2C_GetTiming>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4807      	ldr	r0, [pc, #28]	; (800f4ec <BSP_I2C4_Init+0x64>)
 800f4d0:	f000 f838 	bl	800f544 <MX_I2C4_Init>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f4da:	f06f 0307 	mvn.w	r3, #7
 800f4de:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f4e0:	687b      	ldr	r3, [r7, #4]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3708      	adds	r7, #8
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	2400b6d8 	.word	0x2400b6d8
 800f4f0:	58001c00 	.word	0x58001c00
 800f4f4:	2400acd0 	.word	0x2400acd0
 800f4f8:	000186a0 	.word	0x000186a0

0800f4fc <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f506:	4b0d      	ldr	r3, [pc, #52]	; (800f53c <BSP_I2C4_DeInit+0x40>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3b01      	subs	r3, #1
 800f50c:	4a0b      	ldr	r2, [pc, #44]	; (800f53c <BSP_I2C4_DeInit+0x40>)
 800f50e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f510:	4b0a      	ldr	r3, [pc, #40]	; (800f53c <BSP_I2C4_DeInit+0x40>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d10b      	bne.n	800f530 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f518:	4809      	ldr	r0, [pc, #36]	; (800f540 <BSP_I2C4_DeInit+0x44>)
 800f51a:	f000 fb9b 	bl	800fc54 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f51e:	4808      	ldr	r0, [pc, #32]	; (800f540 <BSP_I2C4_DeInit+0x44>)
 800f520:	f002 fc54 	bl	8011dcc <HAL_I2C_DeInit>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f52a:	f06f 0307 	mvn.w	r3, #7
 800f52e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f530:	687b      	ldr	r3, [r7, #4]
}
 800f532:	4618      	mov	r0, r3
 800f534:	3708      	adds	r7, #8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	2400acd0 	.word	0x2400acd0
 800f540:	2400b6d8 	.word	0x2400b6d8

0800f544 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	683a      	ldr	r2, [r7, #0]
 800f556:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2201      	movs	r2, #1
 800f562:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f002 fb92 	bl	8011cac <HAL_I2C_Init>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d002      	beq.n	800f594 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f58e:	2301      	movs	r3, #1
 800f590:	73fb      	strb	r3, [r7, #15]
 800f592:	e014      	b.n	800f5be <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f594:	2300      	movs	r3, #0
 800f596:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f598:	68b9      	ldr	r1, [r7, #8]
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f003 f95a 	bl	8012854 <HAL_I2CEx_ConfigAnalogFilter>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	73fb      	strb	r3, [r7, #15]
 800f5aa:	e008      	b.n	800f5be <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800f5ac:	2100      	movs	r1, #0
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f003 f99b 	bl	80128ea <HAL_I2CEx_ConfigDigitalFilter>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d001      	beq.n	800f5be <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800f5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b088      	sub	sp, #32
 800f5cc:	af02      	add	r7, sp, #8
 800f5ce:	60ba      	str	r2, [r7, #8]
 800f5d0:	461a      	mov	r2, r3
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	81fb      	strh	r3, [r7, #14]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	81bb      	strh	r3, [r7, #12]
 800f5da:	4613      	mov	r3, r2
 800f5dc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f5de:	89b9      	ldrh	r1, [r7, #12]
 800f5e0:	89f8      	ldrh	r0, [r7, #14]
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	9300      	str	r3, [sp, #0]
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	f000 fb57 	bl	800fc9c <I2C4_WriteReg>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d102      	bne.n	800f5fa <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	617b      	str	r3, [r7, #20]
 800f5f8:	e00c      	b.n	800f614 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f5fa:	4809      	ldr	r0, [pc, #36]	; (800f620 <BSP_I2C4_WriteReg+0x58>)
 800f5fc:	f002 fe66 	bl	80122cc <HAL_I2C_GetError>
 800f600:	4603      	mov	r3, r0
 800f602:	2b04      	cmp	r3, #4
 800f604:	d103      	bne.n	800f60e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f606:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800f60a:	617b      	str	r3, [r7, #20]
 800f60c:	e002      	b.n	800f614 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f60e:	f06f 0303 	mvn.w	r3, #3
 800f612:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f614:	697b      	ldr	r3, [r7, #20]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3718      	adds	r7, #24
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	2400b6d8 	.word	0x2400b6d8

0800f624 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b088      	sub	sp, #32
 800f628:	af02      	add	r7, sp, #8
 800f62a:	60ba      	str	r2, [r7, #8]
 800f62c:	461a      	mov	r2, r3
 800f62e:	4603      	mov	r3, r0
 800f630:	81fb      	strh	r3, [r7, #14]
 800f632:	460b      	mov	r3, r1
 800f634:	81bb      	strh	r3, [r7, #12]
 800f636:	4613      	mov	r3, r2
 800f638:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f63a:	89b9      	ldrh	r1, [r7, #12]
 800f63c:	89f8      	ldrh	r0, [r7, #14]
 800f63e:	88fb      	ldrh	r3, [r7, #6]
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2201      	movs	r2, #1
 800f646:	f000 fb4f 	bl	800fce8 <I2C4_ReadReg>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d102      	bne.n	800f656 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f650:	2300      	movs	r3, #0
 800f652:	617b      	str	r3, [r7, #20]
 800f654:	e00c      	b.n	800f670 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f656:	4809      	ldr	r0, [pc, #36]	; (800f67c <BSP_I2C4_ReadReg+0x58>)
 800f658:	f002 fe38 	bl	80122cc <HAL_I2C_GetError>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b04      	cmp	r3, #4
 800f660:	d103      	bne.n	800f66a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f662:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	e002      	b.n	800f670 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f66a:	f06f 0303 	mvn.w	r3, #3
 800f66e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f670:	697b      	ldr	r3, [r7, #20]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3718      	adds	r7, #24
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	2400b6d8 	.word	0x2400b6d8

0800f680 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800f684:	f001 fbec 	bl	8010e60 <HAL_GetTick>
 800f688:	4603      	mov	r3, r0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	bd80      	pop	{r7, pc}
	...

0800f690 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b086      	sub	sp, #24
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d06b      	beq.n	800f77c <I2C_GetTiming+0xec>
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d068      	beq.n	800f77c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	613b      	str	r3, [r7, #16]
 800f6ae:	e060      	b.n	800f772 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f6b0:	4a35      	ldr	r2, [pc, #212]	; (800f788 <I2C_GetTiming+0xf8>)
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	212c      	movs	r1, #44	; 0x2c
 800f6b6:	fb01 f303 	mul.w	r3, r1, r3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	3304      	adds	r3, #4
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	683a      	ldr	r2, [r7, #0]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d352      	bcc.n	800f76c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800f6c6:	4a30      	ldr	r2, [pc, #192]	; (800f788 <I2C_GetTiming+0xf8>)
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	212c      	movs	r1, #44	; 0x2c
 800f6cc:	fb01 f303 	mul.w	r3, r1, r3
 800f6d0:	4413      	add	r3, r2
 800f6d2:	3308      	adds	r3, #8
 800f6d4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d847      	bhi.n	800f76c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800f6dc:	6939      	ldr	r1, [r7, #16]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 f856 	bl	800f790 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800f6e4:	6939      	ldr	r1, [r7, #16]
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f000 f940 	bl	800f96c <I2C_Compute_SCLL_SCLH>
 800f6ec:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	2b7f      	cmp	r3, #127	; 0x7f
 800f6f2:	d842      	bhi.n	800f77a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f6f4:	4925      	ldr	r1, [pc, #148]	; (800f78c <I2C_GetTiming+0xfc>)
 800f6f6:	68fa      	ldr	r2, [r7, #12]
 800f6f8:	4613      	mov	r3, r2
 800f6fa:	009b      	lsls	r3, r3, #2
 800f6fc:	4413      	add	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	440b      	add	r3, r1
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f706:	4821      	ldr	r0, [pc, #132]	; (800f78c <I2C_GetTiming+0xfc>)
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	4613      	mov	r3, r2
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	4403      	add	r3, r0
 800f714:	3304      	adds	r3, #4
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	051b      	lsls	r3, r3, #20
 800f71a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f71e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f720:	481a      	ldr	r0, [pc, #104]	; (800f78c <I2C_GetTiming+0xfc>)
 800f722:	68fa      	ldr	r2, [r7, #12]
 800f724:	4613      	mov	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	4413      	add	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	4403      	add	r3, r0
 800f72e:	3308      	adds	r3, #8
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	041b      	lsls	r3, r3, #16
 800f734:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f738:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800f73a:	4814      	ldr	r0, [pc, #80]	; (800f78c <I2C_GetTiming+0xfc>)
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4613      	mov	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4403      	add	r3, r0
 800f748:	330c      	adds	r3, #12
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	021b      	lsls	r3, r3, #8
 800f74e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f750:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800f752:	480e      	ldr	r0, [pc, #56]	; (800f78c <I2C_GetTiming+0xfc>)
 800f754:	68fa      	ldr	r2, [r7, #12]
 800f756:	4613      	mov	r3, r2
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	4413      	add	r3, r2
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4403      	add	r3, r0
 800f760:	3310      	adds	r3, #16
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f766:	430b      	orrs	r3, r1
 800f768:	617b      	str	r3, [r7, #20]
        }
        break;
 800f76a:	e006      	b.n	800f77a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	3301      	adds	r3, #1
 800f770:	613b      	str	r3, [r7, #16]
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d99b      	bls.n	800f6b0 <I2C_GetTiming+0x20>
 800f778:	e000      	b.n	800f77c <I2C_GetTiming+0xec>
        break;
 800f77a:	bf00      	nop
      }
    }
  }

  return ret;
 800f77c:	697b      	ldr	r3, [r7, #20]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	0802d868 	.word	0x0802d868
 800f78c:	2400acd4 	.word	0x2400acd4

0800f790 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f790:	b480      	push	{r7}
 800f792:	b08f      	sub	sp, #60	; 0x3c
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800f79a:	2310      	movs	r3, #16
 800f79c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	085a      	lsrs	r2, r3, #1
 800f7a2:	4b6e      	ldr	r3, [pc, #440]	; (800f95c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800f7a4:	4413      	add	r3, r2
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7ac:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f7ae:	2332      	movs	r3, #50	; 0x32
 800f7b0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800f7b2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800f7b6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f7b8:	4a69      	ldr	r2, [pc, #420]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	212c      	movs	r1, #44	; 0x2c
 800f7be:	fb01 f303 	mul.w	r3, r1, r3
 800f7c2:	4413      	add	r3, r2
 800f7c4:	3324      	adds	r3, #36	; 0x24
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	4a65      	ldr	r2, [pc, #404]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	212c      	movs	r1, #44	; 0x2c
 800f7d0:	fb01 f303 	mul.w	r3, r1, r3
 800f7d4:	4413      	add	r3, r2
 800f7d6:	330c      	adds	r3, #12
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f7dc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f7de:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f7e0:	495f      	ldr	r1, [pc, #380]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	202c      	movs	r0, #44	; 0x2c
 800f7e6:	fb00 f303 	mul.w	r3, r0, r3
 800f7ea:	440b      	add	r3, r1
 800f7ec:	3328      	adds	r3, #40	; 0x28
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	3303      	adds	r3, #3
 800f7f2:	69f9      	ldr	r1, [r7, #28]
 800f7f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f7fc:	4a58      	ldr	r2, [pc, #352]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	212c      	movs	r1, #44	; 0x2c
 800f802:	fb01 f303 	mul.w	r3, r1, r3
 800f806:	4413      	add	r3, r2
 800f808:	3310      	adds	r3, #16
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4618      	mov	r0, r3
 800f80e:	4a54      	ldr	r2, [pc, #336]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	212c      	movs	r1, #44	; 0x2c
 800f814:	fb01 f303 	mul.w	r3, r1, r3
 800f818:	4413      	add	r3, r2
 800f81a:	3320      	adds	r3, #32
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f820:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f822:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f824:	494e      	ldr	r1, [pc, #312]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	202c      	movs	r0, #44	; 0x2c
 800f82a:	fb00 f303 	mul.w	r3, r0, r3
 800f82e:	440b      	add	r3, r1
 800f830:	3328      	adds	r3, #40	; 0x28
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3304      	adds	r3, #4
 800f836:	69f9      	ldr	r1, [r7, #28]
 800f838:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f83c:	1ad3      	subs	r3, r2, r3
 800f83e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800f840:	4a47      	ldr	r2, [pc, #284]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	212c      	movs	r1, #44	; 0x2c
 800f846:	fb01 f303 	mul.w	r3, r1, r3
 800f84a:	4413      	add	r3, r2
 800f84c:	3320      	adds	r3, #32
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4618      	mov	r0, r3
 800f852:	4a43      	ldr	r2, [pc, #268]	; (800f960 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	212c      	movs	r1, #44	; 0x2c
 800f858:	fb01 f303 	mul.w	r3, r1, r3
 800f85c:	4413      	add	r3, r2
 800f85e:	3314      	adds	r3, #20
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4403      	add	r3, r0
 800f864:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	2b00      	cmp	r3, #0
 800f86a:	dc01      	bgt.n	800f870 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800f86c:	2300      	movs	r3, #0
 800f86e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	2b00      	cmp	r3, #0
 800f874:	dc01      	bgt.n	800f87a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800f876:	2300      	movs	r3, #0
 800f878:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f87a:	2300      	movs	r3, #0
 800f87c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f87e:	e062      	b.n	800f946 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f880:	2300      	movs	r3, #0
 800f882:	627b      	str	r3, [r7, #36]	; 0x24
 800f884:	e059      	b.n	800f93a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	3301      	adds	r3, #1
 800f88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f88c:	3201      	adds	r2, #1
 800f88e:	fb03 f202 	mul.w	r2, r3, r2
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	fb02 f303 	mul.w	r3, r2, r3
 800f898:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	68fa      	ldr	r2, [r7, #12]
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d348      	bcc.n	800f934 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	623b      	str	r3, [r7, #32]
 800f8a6:	e042      	b.n	800f92e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800f8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	6a3a      	ldr	r2, [r7, #32]
 800f8ae:	fb03 f202 	mul.w	r2, r3, r2
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	fb02 f303 	mul.w	r3, r2, r3
 800f8b8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d332      	bcc.n	800f928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	68ba      	ldr	r2, [r7, #8]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d82e      	bhi.n	800f928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800f8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d02a      	beq.n	800f928 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800f8d2:	4b24      	ldr	r3, [pc, #144]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	4924      	ldr	r1, [pc, #144]	; (800f968 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f8d8:	4613      	mov	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	4413      	add	r3, r2
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	440b      	add	r3, r1
 800f8e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8e4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800f8e6:	4b1f      	ldr	r3, [pc, #124]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	491f      	ldr	r1, [pc, #124]	; (800f968 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	440b      	add	r3, r1
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8fa:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800f8fc:	4b19      	ldr	r3, [pc, #100]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	4919      	ldr	r1, [pc, #100]	; (800f968 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f902:	4613      	mov	r3, r2
 800f904:	009b      	lsls	r3, r3, #2
 800f906:	4413      	add	r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	440b      	add	r3, r1
 800f90c:	3308      	adds	r3, #8
 800f90e:	6a3a      	ldr	r2, [r7, #32]
 800f910:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800f912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800f916:	4b13      	ldr	r3, [pc, #76]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	3301      	adds	r3, #1
 800f91c:	4a11      	ldr	r2, [pc, #68]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f91e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800f920:	4b10      	ldr	r3, [pc, #64]	; (800f964 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	2b7f      	cmp	r3, #127	; 0x7f
 800f926:	d812      	bhi.n	800f94e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	3301      	adds	r3, #1
 800f92c:	623b      	str	r3, [r7, #32]
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	2b0f      	cmp	r3, #15
 800f932:	d9b9      	bls.n	800f8a8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	3301      	adds	r3, #1
 800f938:	627b      	str	r3, [r7, #36]	; 0x24
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	2b0f      	cmp	r3, #15
 800f93e:	d9a2      	bls.n	800f886 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f942:	3301      	adds	r3, #1
 800f944:	62bb      	str	r3, [r7, #40]	; 0x28
 800f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f948:	2b0f      	cmp	r3, #15
 800f94a:	d999      	bls.n	800f880 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800f94c:	e000      	b.n	800f950 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800f94e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800f950:	373c      	adds	r7, #60	; 0x3c
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	3b9aca00 	.word	0x3b9aca00
 800f960:	0802d868 	.word	0x0802d868
 800f964:	2400b6d4 	.word	0x2400b6d4
 800f968:	2400acd4 	.word	0x2400acd4

0800f96c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b093      	sub	sp, #76	; 0x4c
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800f976:	f04f 33ff 	mov.w	r3, #4294967295
 800f97a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	085a      	lsrs	r2, r3, #1
 800f980:	4b7a      	ldr	r3, [pc, #488]	; (800fb6c <I2C_Compute_SCLL_SCLH+0x200>)
 800f982:	4413      	add	r3, r2
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	fbb3 f3f2 	udiv	r3, r3, r2
 800f98a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800f98c:	4a78      	ldr	r2, [pc, #480]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	212c      	movs	r1, #44	; 0x2c
 800f992:	fb01 f303 	mul.w	r3, r1, r3
 800f996:	4413      	add	r3, r2
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	085a      	lsrs	r2, r3, #1
 800f99c:	4b73      	ldr	r3, [pc, #460]	; (800fb6c <I2C_Compute_SCLL_SCLH+0x200>)
 800f99e:	4413      	add	r3, r2
 800f9a0:	4973      	ldr	r1, [pc, #460]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9a2:	683a      	ldr	r2, [r7, #0]
 800f9a4:	202c      	movs	r0, #44	; 0x2c
 800f9a6:	fb00 f202 	mul.w	r2, r0, r2
 800f9aa:	440a      	add	r2, r1
 800f9ac:	6812      	ldr	r2, [r2, #0]
 800f9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f9b4:	2332      	movs	r3, #50	; 0x32
 800f9b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800f9b8:	4a6d      	ldr	r2, [pc, #436]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	212c      	movs	r1, #44	; 0x2c
 800f9be:	fb01 f303 	mul.w	r3, r1, r3
 800f9c2:	4413      	add	r3, r2
 800f9c4:	3328      	adds	r3, #40	; 0x28
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	fb02 f303 	mul.w	r3, r2, r3
 800f9ce:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800f9d0:	4a67      	ldr	r2, [pc, #412]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	212c      	movs	r1, #44	; 0x2c
 800f9d6:	fb01 f303 	mul.w	r3, r1, r3
 800f9da:	4413      	add	r3, r2
 800f9dc:	3304      	adds	r3, #4
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a62      	ldr	r2, [pc, #392]	; (800fb6c <I2C_Compute_SCLL_SCLH+0x200>)
 800f9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9e6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800f9e8:	4a61      	ldr	r2, [pc, #388]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	212c      	movs	r1, #44	; 0x2c
 800f9ee:	fb01 f303 	mul.w	r3, r1, r3
 800f9f2:	4413      	add	r3, r2
 800f9f4:	3308      	adds	r3, #8
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a5c      	ldr	r2, [pc, #368]	; (800fb6c <I2C_Compute_SCLL_SCLH+0x200>)
 800f9fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9fe:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800fa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa02:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fa04:	2300      	movs	r3, #0
 800fa06:	637b      	str	r3, [r7, #52]	; 0x34
 800fa08:	e0a3      	b.n	800fb52 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800fa0a:	495a      	ldr	r1, [pc, #360]	; (800fb74 <I2C_Compute_SCLL_SCLH+0x208>)
 800fa0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa0e:	4613      	mov	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	440b      	add	r3, r1
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	1c5a      	adds	r2, r3, #1
 800fa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1e:	fb02 f303 	mul.w	r3, r2, r3
 800fa22:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fa24:	2300      	movs	r3, #0
 800fa26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa28:	e08c      	b.n	800fb44 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800fa2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa2c:	6a3b      	ldr	r3, [r7, #32]
 800fa2e:	441a      	add	r2, r3
 800fa30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa32:	3301      	adds	r3, #1
 800fa34:	6979      	ldr	r1, [r7, #20]
 800fa36:	fb03 f101 	mul.w	r1, r3, r1
 800fa3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	440b      	add	r3, r1
 800fa40:	4413      	add	r3, r2
 800fa42:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800fa44:	4a4a      	ldr	r2, [pc, #296]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	212c      	movs	r1, #44	; 0x2c
 800fa4a:	fb01 f303 	mul.w	r3, r1, r3
 800fa4e:	4413      	add	r3, r2
 800fa50:	3318      	adds	r3, #24
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d971      	bls.n	800fb3e <I2C_Compute_SCLL_SCLH+0x1d2>
 800fa5a:	693a      	ldr	r2, [r7, #16]
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	1ad2      	subs	r2, r2, r3
 800fa60:	6a3b      	ldr	r3, [r7, #32]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	089b      	lsrs	r3, r3, #2
 800fa66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d268      	bcs.n	800fb3e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa70:	e062      	b.n	800fb38 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800fa72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa74:	6a3b      	ldr	r3, [r7, #32]
 800fa76:	441a      	add	r2, r3
 800fa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	6979      	ldr	r1, [r7, #20]
 800fa7e:	fb03 f101 	mul.w	r1, r3, r1
 800fa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	440b      	add	r3, r1
 800fa88:	4413      	add	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800fa8c:	693a      	ldr	r2, [r7, #16]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	441a      	add	r2, r3
 800fa92:	4937      	ldr	r1, [pc, #220]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	202c      	movs	r0, #44	; 0x2c
 800fa98:	fb00 f303 	mul.w	r3, r0, r3
 800fa9c:	440b      	add	r3, r1
 800fa9e:	3320      	adds	r3, #32
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	441a      	add	r2, r3
 800faa4:	4932      	ldr	r1, [pc, #200]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	202c      	movs	r0, #44	; 0x2c
 800faaa:	fb00 f303 	mul.w	r3, r0, r3
 800faae:	440b      	add	r3, r1
 800fab0:	3324      	adds	r3, #36	; 0x24
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4413      	add	r3, r2
 800fab6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d338      	bcc.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d834      	bhi.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fac8:	4a29      	ldr	r2, [pc, #164]	; (800fb70 <I2C_Compute_SCLL_SCLH+0x204>)
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	212c      	movs	r1, #44	; 0x2c
 800face:	fb01 f303 	mul.w	r3, r1, r3
 800fad2:	4413      	add	r3, r2
 800fad4:	331c      	adds	r3, #28
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d329      	bcc.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	429a      	cmp	r2, r3
 800fae4:	d225      	bcs.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	da02      	bge.n	800fafa <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800faf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf6:	425b      	negs	r3, r3
 800faf8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d917      	bls.n	800fb32 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800fb06:	491b      	ldr	r1, [pc, #108]	; (800fb74 <I2C_Compute_SCLL_SCLH+0x208>)
 800fb08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	4413      	add	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	440b      	add	r3, r1
 800fb14:	3310      	adds	r3, #16
 800fb16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb18:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800fb1a:	4916      	ldr	r1, [pc, #88]	; (800fb74 <I2C_Compute_SCLL_SCLH+0x208>)
 800fb1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb1e:	4613      	mov	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	440b      	add	r3, r1
 800fb28:	330c      	adds	r3, #12
 800fb2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb2c:	601a      	str	r2, [r3, #0]
              ret = count;
 800fb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb30:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	3301      	adds	r3, #1
 800fb36:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	2bff      	cmp	r3, #255	; 0xff
 800fb3c:	d999      	bls.n	800fa72 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fb3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb40:	3301      	adds	r3, #1
 800fb42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	2bff      	cmp	r3, #255	; 0xff
 800fb48:	f67f af6f 	bls.w	800fa2a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4e:	3301      	adds	r3, #1
 800fb50:	637b      	str	r3, [r7, #52]	; 0x34
 800fb52:	4b09      	ldr	r3, [pc, #36]	; (800fb78 <I2C_Compute_SCLL_SCLH+0x20c>)
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	f4ff af56 	bcc.w	800fa0a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800fb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	374c      	adds	r7, #76	; 0x4c
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	3b9aca00 	.word	0x3b9aca00
 800fb70:	0802d868 	.word	0x0802d868
 800fb74:	2400acd4 	.word	0x2400acd4
 800fb78:	2400b6d4 	.word	0x2400b6d4

0800fb7c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b08a      	sub	sp, #40	; 0x28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800fb84:	4b31      	ldr	r3, [pc, #196]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fb86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb8a:	4a30      	ldr	r2, [pc, #192]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fb8c:	f043 0308 	orr.w	r3, r3, #8
 800fb90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb94:	4b2d      	ldr	r3, [pc, #180]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fb96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb9a:	f003 0308 	and.w	r3, r3, #8
 800fb9e:	613b      	str	r3, [r7, #16]
 800fba0:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800fba2:	4b2a      	ldr	r3, [pc, #168]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fba8:	4a28      	ldr	r2, [pc, #160]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fbaa:	f043 0308 	orr.w	r3, r3, #8
 800fbae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbb2:	4b26      	ldr	r3, [pc, #152]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fbb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbb8:	f003 0308 	and.w	r3, r3, #8
 800fbbc:	60fb      	str	r3, [r7, #12]
 800fbbe:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800fbc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fbc4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fbc6:	2312      	movs	r3, #18
 800fbc8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fbce:	2302      	movs	r3, #2
 800fbd0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800fbd2:	2304      	movs	r3, #4
 800fbd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800fbd6:	f107 0314 	add.w	r3, r7, #20
 800fbda:	4619      	mov	r1, r3
 800fbdc:	481c      	ldr	r0, [pc, #112]	; (800fc50 <I2C4_MspInit+0xd4>)
 800fbde:	f001 fd4b 	bl	8011678 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800fbe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbe6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fbe8:	2312      	movs	r3, #18
 800fbea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fbec:	2300      	movs	r3, #0
 800fbee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800fbf4:	2304      	movs	r3, #4
 800fbf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800fbf8:	f107 0314 	add.w	r3, r7, #20
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	4814      	ldr	r0, [pc, #80]	; (800fc50 <I2C4_MspInit+0xd4>)
 800fc00:	f001 fd3a 	bl	8011678 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800fc04:	4b11      	ldr	r3, [pc, #68]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc0a:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800fc14:	4b0d      	ldr	r3, [pc, #52]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc1e:	60bb      	str	r3, [r7, #8]
 800fc20:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800fc22:	4b0a      	ldr	r3, [pc, #40]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc28:	4a08      	ldr	r2, [pc, #32]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc2e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800fc32:	4b06      	ldr	r3, [pc, #24]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc38:	4a04      	ldr	r2, [pc, #16]	; (800fc4c <I2C4_MspInit+0xd0>)
 800fc3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800fc42:	bf00      	nop
 800fc44:	3728      	adds	r7, #40	; 0x28
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	58024400 	.word	0x58024400
 800fc50:	58020c00 	.word	0x58020c00

0800fc54 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b088      	sub	sp, #32
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800fc5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc60:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	4619      	mov	r1, r3
 800fc66:	480b      	ldr	r0, [pc, #44]	; (800fc94 <I2C4_MspDeInit+0x40>)
 800fc68:	f001 feb6 	bl	80119d8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800fc6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	4619      	mov	r1, r3
 800fc76:	4807      	ldr	r0, [pc, #28]	; (800fc94 <I2C4_MspDeInit+0x40>)
 800fc78:	f001 feae 	bl	80119d8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800fc7c:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <I2C4_MspDeInit+0x44>)
 800fc7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800fc82:	4a05      	ldr	r2, [pc, #20]	; (800fc98 <I2C4_MspDeInit+0x44>)
 800fc84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800fc8c:	bf00      	nop
 800fc8e:	3720      	adds	r7, #32
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	58020c00 	.word	0x58020c00
 800fc98:	58024400 	.word	0x58024400

0800fc9c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b088      	sub	sp, #32
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	607b      	str	r3, [r7, #4]
 800fca4:	4603      	mov	r3, r0
 800fca6:	81fb      	strh	r3, [r7, #14]
 800fca8:	460b      	mov	r3, r1
 800fcaa:	81bb      	strh	r3, [r7, #12]
 800fcac:	4613      	mov	r3, r2
 800fcae:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fcb0:	8978      	ldrh	r0, [r7, #10]
 800fcb2:	89ba      	ldrh	r2, [r7, #12]
 800fcb4:	89f9      	ldrh	r1, [r7, #14]
 800fcb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fcba:	9302      	str	r3, [sp, #8]
 800fcbc:	8b3b      	ldrh	r3, [r7, #24]
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	4807      	ldr	r0, [pc, #28]	; (800fce4 <I2C4_WriteReg+0x48>)
 800fcc8:	f002 f8c4 	bl	8011e54 <HAL_I2C_Mem_Write>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d101      	bne.n	800fcd6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	e001      	b.n	800fcda <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fcd6:	f06f 0307 	mvn.w	r3, #7
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	2400b6d8 	.word	0x2400b6d8

0800fce8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b088      	sub	sp, #32
 800fcec:	af04      	add	r7, sp, #16
 800fcee:	607b      	str	r3, [r7, #4]
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	81fb      	strh	r3, [r7, #14]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	81bb      	strh	r3, [r7, #12]
 800fcf8:	4613      	mov	r3, r2
 800fcfa:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fcfc:	8978      	ldrh	r0, [r7, #10]
 800fcfe:	89ba      	ldrh	r2, [r7, #12]
 800fd00:	89f9      	ldrh	r1, [r7, #14]
 800fd02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd06:	9302      	str	r3, [sp, #8]
 800fd08:	8b3b      	ldrh	r3, [r7, #24]
 800fd0a:	9301      	str	r3, [sp, #4]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	4603      	mov	r3, r0
 800fd12:	4807      	ldr	r0, [pc, #28]	; (800fd30 <I2C4_ReadReg+0x48>)
 800fd14:	f002 f9b2 	bl	801207c <HAL_I2C_Mem_Read>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d101      	bne.n	800fd22 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	e001      	b.n	800fd26 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fd22:	f06f 0307 	mvn.w	r3, #7
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	2400b6d8 	.word	0x2400b6d8

0800fd34 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b090      	sub	sp, #64	; 0x40
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d003      	beq.n	800fd50 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fd48:	f06f 0301 	mvn.w	r3, #1
 800fd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fd4e:	e090      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800fd50:	494a      	ldr	r1, [pc, #296]	; (800fe7c <BSP_QSPI_Init+0x148>)
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	4613      	mov	r3, r2
 800fd56:	005b      	lsls	r3, r3, #1
 800fd58:	4413      	add	r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	440b      	add	r3, r1
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f040 8086 	bne.w	800fe72 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800fd66:	4846      	ldr	r0, [pc, #280]	; (800fe80 <BSP_QSPI_Init+0x14c>)
 800fd68:	f000 f99c 	bl	80100a4 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800fd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d17f      	bne.n	800fe72 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800fd72:	f107 031c 	add.w	r3, r7, #28
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe ffea 	bl	800ed50 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	785b      	ldrb	r3, [r3, #1]
 800fd80:	461a      	mov	r2, r3
 800fd82:	4b40      	ldr	r3, [pc, #256]	; (800fe84 <BSP_QSPI_Init+0x150>)
 800fd84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd88:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800fd8a:	2340      	movs	r3, #64	; 0x40
 800fd8c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fd92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd94:	fa93 f3a3 	rbit	r3, r3
 800fd98:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800fd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9c:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d101      	bne.n	800fda8 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800fda4:	2320      	movs	r3, #32
 800fda6:	e003      	b.n	800fdb0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800fda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdaa:	fab3 f383 	clz	r3, r3
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	785b      	ldrb	r3, [r3, #1]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d101      	bne.n	800fdc0 <BSP_QSPI_Init+0x8c>
 800fdbc:	2310      	movs	r3, #16
 800fdbe:	e000      	b.n	800fdc2 <BSP_QSPI_Init+0x8e>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800fdc4:	f107 030c 	add.w	r3, r7, #12
 800fdc8:	4619      	mov	r1, r3
 800fdca:	482d      	ldr	r0, [pc, #180]	; (800fe80 <BSP_QSPI_Init+0x14c>)
 800fdcc:	f000 f85c 	bl	800fe88 <MX_QSPI_Init>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d003      	beq.n	800fdde <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800fdd6:	f06f 0303 	mvn.w	r3, #3
 800fdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fddc:	e049      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 faa8 	bl	8010334 <QSPI_ResetMemory>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d003      	beq.n	800fdf2 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fdea:	f06f 0304 	mvn.w	r3, #4
 800fdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdf0:	e03f      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fdf2:	4922      	ldr	r1, [pc, #136]	; (800fe7c <BSP_QSPI_Init+0x148>)
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	4613      	mov	r3, r2
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	4413      	add	r3, r2
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	440b      	add	r3, r1
 800fe00:	3301      	adds	r3, #1
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	4619      	mov	r1, r3
 800fe06:	481e      	ldr	r0, [pc, #120]	; (800fe80 <BSP_QSPI_Init+0x14c>)
 800fe08:	f7ff f811 	bl	800ee2e <MT25TL01G_AutoPollingMemReady>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d003      	beq.n	800fe1a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe12:	f06f 0304 	mvn.w	r3, #4
 800fe16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe18:	e02b      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fe1a:	4918      	ldr	r1, [pc, #96]	; (800fe7c <BSP_QSPI_Init+0x148>)
 800fe1c:	687a      	ldr	r2, [r7, #4]
 800fe1e:	4613      	mov	r3, r2
 800fe20:	005b      	lsls	r3, r3, #1
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	440b      	add	r3, r1
 800fe28:	3301      	adds	r3, #1
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	4814      	ldr	r0, [pc, #80]	; (800fe80 <BSP_QSPI_Init+0x14c>)
 800fe30:	f7fe ffb5 	bl	800ed9e <MT25TL01G_Enter4BytesAddressMode>
 800fe34:	4603      	mov	r3, r0
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d003      	beq.n	800fe42 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe3a:	f06f 0304 	mvn.w	r3, #4
 800fe3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe40:	e017      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 fae2 	bl	801040c <QSPI_DummyCyclesCfg>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d003      	beq.n	800fe56 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe4e:	f06f 0304 	mvn.w	r3, #4
 800fe52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe54:	e00d      	b.n	800fe72 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	7819      	ldrb	r1, [r3, #0]
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	785b      	ldrb	r3, [r3, #1]
 800fe5e:	461a      	mov	r2, r3
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f89d 	bl	800ffa0 <BSP_QSPI_ConfigFlash>
 800fe66:	4603      	mov	r3, r0
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe6c:	f06f 0304 	mvn.w	r3, #4
 800fe70:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800fe72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3740      	adds	r7, #64	; 0x40
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	2400b72c 	.word	0x2400b72c
 800fe80:	2400027c 	.word	0x2400027c
 800fe84:	0802d8ec 	.word	0x0802d8ec

0800fe88 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
 800fe90:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a13      	ldr	r2, [pc, #76]	; (800fee4 <MX_QSPI_Init+0x5c>)
 800fe96:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	689a      	ldr	r2, [r3, #8]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800febc:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	68da      	ldr	r2, [r3, #12]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f003 faac 	bl	8013430 <HAL_QSPI_Init>
 800fed8:	4603      	mov	r3, r0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop
 800fee4:	52005000 	.word	0x52005000

0800fee8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800fef0:	2300      	movs	r3, #0
 800fef2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d003      	beq.n	800ff02 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fefa:	f06f 0301 	mvn.w	r3, #1
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	e045      	b.n	800ff8e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800ff02:	4925      	ldr	r1, [pc, #148]	; (800ff98 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	4613      	mov	r3, r2
 800ff08:	005b      	lsls	r3, r3, #1
 800ff0a:	4413      	add	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	440b      	add	r3, r1
 800ff10:	3302      	adds	r3, #2
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d11d      	bne.n	800ff54 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ff18:	491f      	ldr	r1, [pc, #124]	; (800ff98 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	4413      	add	r3, r2
 800ff22:	009b      	lsls	r3, r3, #2
 800ff24:	440b      	add	r3, r1
 800ff26:	3301      	adds	r3, #1
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	481b      	ldr	r0, [pc, #108]	; (800ff9c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ff2e:	f7ff f8d3 	bl	800f0d8 <MT25TL01G_EnableMemoryMappedModeSTR>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d003      	beq.n	800ff40 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff38:	f06f 0304 	mvn.w	r3, #4
 800ff3c:	60fb      	str	r3, [r7, #12]
 800ff3e:	e026      	b.n	800ff8e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ff40:	4915      	ldr	r1, [pc, #84]	; (800ff98 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	4613      	mov	r3, r2
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	4413      	add	r3, r2
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	440b      	add	r3, r1
 800ff4e:	2202      	movs	r2, #2
 800ff50:	701a      	strb	r2, [r3, #0]
 800ff52:	e01c      	b.n	800ff8e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ff54:	4910      	ldr	r1, [pc, #64]	; (800ff98 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	4613      	mov	r3, r2
 800ff5a:	005b      	lsls	r3, r3, #1
 800ff5c:	4413      	add	r3, r2
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	440b      	add	r3, r1
 800ff62:	3301      	adds	r3, #1
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	4619      	mov	r1, r3
 800ff68:	480c      	ldr	r0, [pc, #48]	; (800ff9c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ff6a:	f7ff f84b 	bl	800f004 <MT25TL01G_EnableMemoryMappedModeDTR>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d003      	beq.n	800ff7c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff74:	f06f 0304 	mvn.w	r3, #4
 800ff78:	60fb      	str	r3, [r7, #12]
 800ff7a:	e008      	b.n	800ff8e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ff7c:	4906      	ldr	r1, [pc, #24]	; (800ff98 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	4613      	mov	r3, r2
 800ff82:	005b      	lsls	r3, r3, #1
 800ff84:	4413      	add	r3, r2
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	440b      	add	r3, r1
 800ff8a:	2202      	movs	r2, #2
 800ff8c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3710      	adds	r7, #16
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	2400b72c 	.word	0x2400b72c
 800ff9c:	2400027c 	.word	0x2400027c

0800ffa0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	70fb      	strb	r3, [r7, #3]
 800ffac:	4613      	mov	r3, r2
 800ffae:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ffba:	f06f 0301 	mvn.w	r3, #1
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	e067      	b.n	8010092 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800ffc2:	4936      	ldr	r1, [pc, #216]	; (801009c <BSP_QSPI_ConfigFlash+0xfc>)
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	005b      	lsls	r3, r3, #1
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d103      	bne.n	800ffde <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800ffd6:	f06f 0319 	mvn.w	r3, #25
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	e059      	b.n	8010092 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ffde:	78bb      	ldrb	r3, [r7, #2]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d101      	bne.n	800ffe8 <BSP_QSPI_ConfigFlash+0x48>
 800ffe4:	2310      	movs	r3, #16
 800ffe6:	e000      	b.n	800ffea <BSP_QSPI_ConfigFlash+0x4a>
 800ffe8:	2300      	movs	r3, #0
 800ffea:	4a2d      	ldr	r2, [pc, #180]	; (80100a0 <BSP_QSPI_ConfigFlash+0x100>)
 800ffec:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800ffee:	482c      	ldr	r0, [pc, #176]	; (80100a0 <BSP_QSPI_ConfigFlash+0x100>)
 800fff0:	f003 fa1e 	bl	8013430 <HAL_QSPI_Init>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800fffa:	f06f 0303 	mvn.w	r3, #3
 800fffe:	60fb      	str	r3, [r7, #12]
 8010000:	e047      	b.n	8010092 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8010002:	4926      	ldr	r1, [pc, #152]	; (801009c <BSP_QSPI_ConfigFlash+0xfc>)
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	4613      	mov	r3, r2
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	4413      	add	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	440b      	add	r3, r1
 8010010:	3301      	adds	r3, #1
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	2b03      	cmp	r3, #3
 8010016:	d10c      	bne.n	8010032 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8010018:	78fb      	ldrb	r3, [r7, #3]
 801001a:	2b03      	cmp	r3, #3
 801001c:	d016      	beq.n	801004c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 801001e:	4820      	ldr	r0, [pc, #128]	; (80100a0 <BSP_QSPI_ConfigFlash+0x100>)
 8010020:	f7fe ffc6 	bl	800efb0 <MT25TL01G_ExitQPIMode>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d010      	beq.n	801004c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 801002a:	f06f 0304 	mvn.w	r3, #4
 801002e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010030:	e00c      	b.n	801004c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8010032:	78fb      	ldrb	r3, [r7, #3]
 8010034:	2b03      	cmp	r3, #3
 8010036:	d10b      	bne.n	8010050 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8010038:	4819      	ldr	r0, [pc, #100]	; (80100a0 <BSP_QSPI_ConfigFlash+0x100>)
 801003a:	f7fe ff8f 	bl	800ef5c <MT25TL01G_EnterQPIMode>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d005      	beq.n	8010050 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8010044:	f06f 0304 	mvn.w	r3, #4
 8010048:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 801004a:	e001      	b.n	8010050 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 801004c:	bf00      	nop
 801004e:	e000      	b.n	8010052 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8010050:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d11c      	bne.n	8010092 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8010058:	4910      	ldr	r1, [pc, #64]	; (801009c <BSP_QSPI_ConfigFlash+0xfc>)
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	4613      	mov	r3, r2
 801005e:	005b      	lsls	r3, r3, #1
 8010060:	4413      	add	r3, r2
 8010062:	009b      	lsls	r3, r3, #2
 8010064:	440b      	add	r3, r1
 8010066:	2201      	movs	r2, #1
 8010068:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 801006a:	490c      	ldr	r1, [pc, #48]	; (801009c <BSP_QSPI_ConfigFlash+0xfc>)
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	4613      	mov	r3, r2
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	4413      	add	r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	440b      	add	r3, r1
 8010078:	3301      	adds	r3, #1
 801007a:	78fa      	ldrb	r2, [r7, #3]
 801007c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 801007e:	4907      	ldr	r1, [pc, #28]	; (801009c <BSP_QSPI_ConfigFlash+0xfc>)
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	4613      	mov	r3, r2
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	4413      	add	r3, r2
 8010088:	009b      	lsls	r3, r3, #2
 801008a:	440b      	add	r3, r1
 801008c:	3302      	adds	r3, #2
 801008e:	78ba      	ldrb	r2, [r7, #2]
 8010090:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010092:	68fb      	ldr	r3, [r7, #12]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	2400b72c 	.word	0x2400b72c
 80100a0:	2400027c 	.word	0x2400027c

080100a4 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b094      	sub	sp, #80	; 0x50
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80100ac:	4b9c      	ldr	r3, [pc, #624]	; (8010320 <QSPI_MspInit+0x27c>)
 80100ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80100b2:	4a9b      	ldr	r2, [pc, #620]	; (8010320 <QSPI_MspInit+0x27c>)
 80100b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80100bc:	4b98      	ldr	r3, [pc, #608]	; (8010320 <QSPI_MspInit+0x27c>)
 80100be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80100c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80100ca:	4b95      	ldr	r3, [pc, #596]	; (8010320 <QSPI_MspInit+0x27c>)
 80100cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ce:	4a94      	ldr	r2, [pc, #592]	; (8010320 <QSPI_MspInit+0x27c>)
 80100d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80100d4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80100d6:	4b92      	ldr	r3, [pc, #584]	; (8010320 <QSPI_MspInit+0x27c>)
 80100d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100da:	4a91      	ldr	r2, [pc, #580]	; (8010320 <QSPI_MspInit+0x27c>)
 80100dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80100e0:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 80100e2:	4b8f      	ldr	r3, [pc, #572]	; (8010320 <QSPI_MspInit+0x27c>)
 80100e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100e8:	4a8d      	ldr	r2, [pc, #564]	; (8010320 <QSPI_MspInit+0x27c>)
 80100ea:	f043 0320 	orr.w	r3, r3, #32
 80100ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80100f2:	4b8b      	ldr	r3, [pc, #556]	; (8010320 <QSPI_MspInit+0x27c>)
 80100f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80100f8:	f003 0320 	and.w	r3, r3, #32
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
 80100fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8010100:	4b87      	ldr	r3, [pc, #540]	; (8010320 <QSPI_MspInit+0x27c>)
 8010102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010106:	4a86      	ldr	r2, [pc, #536]	; (8010320 <QSPI_MspInit+0x27c>)
 8010108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801010c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010110:	4b83      	ldr	r3, [pc, #524]	; (8010320 <QSPI_MspInit+0x27c>)
 8010112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801011a:	633b      	str	r3, [r7, #48]	; 0x30
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 801011e:	4b80      	ldr	r3, [pc, #512]	; (8010320 <QSPI_MspInit+0x27c>)
 8010120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010124:	4a7e      	ldr	r2, [pc, #504]	; (8010320 <QSPI_MspInit+0x27c>)
 8010126:	f043 0308 	orr.w	r3, r3, #8
 801012a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801012e:	4b7c      	ldr	r3, [pc, #496]	; (8010320 <QSPI_MspInit+0x27c>)
 8010130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010134:	f003 0308 	and.w	r3, r3, #8
 8010138:	62fb      	str	r3, [r7, #44]	; 0x2c
 801013a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 801013c:	4b78      	ldr	r3, [pc, #480]	; (8010320 <QSPI_MspInit+0x27c>)
 801013e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010142:	4a77      	ldr	r2, [pc, #476]	; (8010320 <QSPI_MspInit+0x27c>)
 8010144:	f043 0320 	orr.w	r3, r3, #32
 8010148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801014c:	4b74      	ldr	r3, [pc, #464]	; (8010320 <QSPI_MspInit+0x27c>)
 801014e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010152:	f003 0320 	and.w	r3, r3, #32
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 801015a:	4b71      	ldr	r3, [pc, #452]	; (8010320 <QSPI_MspInit+0x27c>)
 801015c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010160:	4a6f      	ldr	r2, [pc, #444]	; (8010320 <QSPI_MspInit+0x27c>)
 8010162:	f043 0320 	orr.w	r3, r3, #32
 8010166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801016a:	4b6d      	ldr	r3, [pc, #436]	; (8010320 <QSPI_MspInit+0x27c>)
 801016c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010170:	f003 0320 	and.w	r3, r3, #32
 8010174:	627b      	str	r3, [r7, #36]	; 0x24
 8010176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8010178:	4b69      	ldr	r3, [pc, #420]	; (8010320 <QSPI_MspInit+0x27c>)
 801017a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801017e:	4a68      	ldr	r2, [pc, #416]	; (8010320 <QSPI_MspInit+0x27c>)
 8010180:	f043 0320 	orr.w	r3, r3, #32
 8010184:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010188:	4b65      	ldr	r3, [pc, #404]	; (8010320 <QSPI_MspInit+0x27c>)
 801018a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801018e:	f003 0320 	and.w	r3, r3, #32
 8010192:	623b      	str	r3, [r7, #32]
 8010194:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8010196:	4b62      	ldr	r3, [pc, #392]	; (8010320 <QSPI_MspInit+0x27c>)
 8010198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801019c:	4a60      	ldr	r2, [pc, #384]	; (8010320 <QSPI_MspInit+0x27c>)
 801019e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101a6:	4b5e      	ldr	r3, [pc, #376]	; (8010320 <QSPI_MspInit+0x27c>)
 80101a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101b0:	61fb      	str	r3, [r7, #28]
 80101b2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80101b4:	4b5a      	ldr	r3, [pc, #360]	; (8010320 <QSPI_MspInit+0x27c>)
 80101b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101ba:	4a59      	ldr	r2, [pc, #356]	; (8010320 <QSPI_MspInit+0x27c>)
 80101bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101c4:	4b56      	ldr	r3, [pc, #344]	; (8010320 <QSPI_MspInit+0x27c>)
 80101c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ce:	61bb      	str	r3, [r7, #24]
 80101d0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80101d2:	4b53      	ldr	r3, [pc, #332]	; (8010320 <QSPI_MspInit+0x27c>)
 80101d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101d8:	4a51      	ldr	r2, [pc, #324]	; (8010320 <QSPI_MspInit+0x27c>)
 80101da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80101e2:	4b4f      	ldr	r3, [pc, #316]	; (8010320 <QSPI_MspInit+0x27c>)
 80101e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ec:	617b      	str	r3, [r7, #20]
 80101ee:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80101f0:	4b4b      	ldr	r3, [pc, #300]	; (8010320 <QSPI_MspInit+0x27c>)
 80101f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80101f6:	4a4a      	ldr	r2, [pc, #296]	; (8010320 <QSPI_MspInit+0x27c>)
 80101f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010200:	4b47      	ldr	r3, [pc, #284]	; (8010320 <QSPI_MspInit+0x27c>)
 8010202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801020a:	613b      	str	r3, [r7, #16]
 801020c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 801020e:	4b44      	ldr	r3, [pc, #272]	; (8010320 <QSPI_MspInit+0x27c>)
 8010210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010214:	4a42      	ldr	r2, [pc, #264]	; (8010320 <QSPI_MspInit+0x27c>)
 8010216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801021a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801021e:	4b40      	ldr	r3, [pc, #256]	; (8010320 <QSPI_MspInit+0x27c>)
 8010220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010228:	60fb      	str	r3, [r7, #12]
 801022a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 801022c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010230:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010232:	2302      	movs	r3, #2
 8010234:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010236:	2303      	movs	r3, #3
 8010238:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801023a:	2300      	movs	r3, #0
 801023c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801023e:	2309      	movs	r3, #9
 8010240:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8010242:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010246:	4619      	mov	r1, r3
 8010248:	4836      	ldr	r0, [pc, #216]	; (8010324 <QSPI_MspInit+0x280>)
 801024a:	f001 fa15 	bl	8011678 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 801024e:	2340      	movs	r3, #64	; 0x40
 8010250:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010252:	2301      	movs	r3, #1
 8010254:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8010256:	230a      	movs	r3, #10
 8010258:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 801025a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801025e:	4619      	mov	r1, r3
 8010260:	4831      	ldr	r0, [pc, #196]	; (8010328 <QSPI_MspInit+0x284>)
 8010262:	f001 fa09 	bl	8011678 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8010266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801026c:	2300      	movs	r3, #0
 801026e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010270:	2309      	movs	r3, #9
 8010272:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8010274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010278:	4619      	mov	r1, r3
 801027a:	482c      	ldr	r0, [pc, #176]	; (801032c <QSPI_MspInit+0x288>)
 801027c:	f001 f9fc 	bl	8011678 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8010280:	2304      	movs	r3, #4
 8010282:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010284:	2309      	movs	r3, #9
 8010286:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8010288:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801028c:	4619      	mov	r1, r3
 801028e:	4828      	ldr	r0, [pc, #160]	; (8010330 <QSPI_MspInit+0x28c>)
 8010290:	f001 f9f2 	bl	8011678 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8010294:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010298:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801029a:	230a      	movs	r3, #10
 801029c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 801029e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102a2:	4619      	mov	r1, r3
 80102a4:	481f      	ldr	r0, [pc, #124]	; (8010324 <QSPI_MspInit+0x280>)
 80102a6:	f001 f9e7 	bl	8011678 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80102aa:	2308      	movs	r3, #8
 80102ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80102ae:	2309      	movs	r3, #9
 80102b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80102b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102b6:	4619      	mov	r1, r3
 80102b8:	481d      	ldr	r0, [pc, #116]	; (8010330 <QSPI_MspInit+0x28c>)
 80102ba:	f001 f9dd 	bl	8011678 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80102be:	2380      	movs	r3, #128	; 0x80
 80102c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80102c2:	2309      	movs	r3, #9
 80102c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80102c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102ca:	4619      	mov	r1, r3
 80102cc:	4815      	ldr	r0, [pc, #84]	; (8010324 <QSPI_MspInit+0x280>)
 80102ce:	f001 f9d3 	bl	8011678 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80102d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80102d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80102d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102dc:	4619      	mov	r1, r3
 80102de:	4812      	ldr	r0, [pc, #72]	; (8010328 <QSPI_MspInit+0x284>)
 80102e0:	f001 f9ca 	bl	8011678 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80102e4:	2340      	movs	r3, #64	; 0x40
 80102e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80102e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102ec:	4619      	mov	r1, r3
 80102ee:	480d      	ldr	r0, [pc, #52]	; (8010324 <QSPI_MspInit+0x280>)
 80102f0:	f001 f9c2 	bl	8011678 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80102f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80102f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80102fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80102fe:	4619      	mov	r1, r3
 8010300:	4809      	ldr	r0, [pc, #36]	; (8010328 <QSPI_MspInit+0x284>)
 8010302:	f001 f9b9 	bl	8011678 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8010306:	2200      	movs	r2, #0
 8010308:	210f      	movs	r1, #15
 801030a:	205c      	movs	r0, #92	; 0x5c
 801030c:	f000 fe9c 	bl	8011048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8010310:	205c      	movs	r0, #92	; 0x5c
 8010312:	f000 feb3 	bl	801107c <HAL_NVIC_EnableIRQ>
}
 8010316:	bf00      	nop
 8010318:	3750      	adds	r7, #80	; 0x50
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	58024400 	.word	0x58024400
 8010324:	58021400 	.word	0x58021400
 8010328:	58021800 	.word	0x58021800
 801032c:	58020c00 	.word	0x58020c00
 8010330:	58021c00 	.word	0x58021c00

08010334 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b084      	sub	sp, #16
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801033c:	2300      	movs	r3, #0
 801033e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010340:	2103      	movs	r1, #3
 8010342:	4830      	ldr	r0, [pc, #192]	; (8010404 <QSPI_ResetMemory+0xd0>)
 8010344:	f7fe ff30 	bl	800f1a8 <MT25TL01G_ResetEnable>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 801034e:	f06f 0304 	mvn.w	r3, #4
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e051      	b.n	80103fa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010356:	2103      	movs	r1, #3
 8010358:	482a      	ldr	r0, [pc, #168]	; (8010404 <QSPI_ResetMemory+0xd0>)
 801035a:	f7fe ff57 	bl	800f20c <MT25TL01G_ResetMemory>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010364:	f06f 0304 	mvn.w	r3, #4
 8010368:	60fb      	str	r3, [r7, #12]
 801036a:	e046      	b.n	80103fa <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801036c:	4926      	ldr	r1, [pc, #152]	; (8010408 <QSPI_ResetMemory+0xd4>)
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	4613      	mov	r3, r2
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	4413      	add	r3, r2
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	440b      	add	r3, r1
 801037a:	3301      	adds	r3, #1
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	4619      	mov	r1, r3
 8010380:	4820      	ldr	r0, [pc, #128]	; (8010404 <QSPI_ResetMemory+0xd0>)
 8010382:	f7fe fd54 	bl	800ee2e <MT25TL01G_AutoPollingMemReady>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d003      	beq.n	8010394 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801038c:	f06f 0304 	mvn.w	r3, #4
 8010390:	60fb      	str	r3, [r7, #12]
 8010392:	e032      	b.n	80103fa <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8010394:	2100      	movs	r1, #0
 8010396:	481b      	ldr	r0, [pc, #108]	; (8010404 <QSPI_ResetMemory+0xd0>)
 8010398:	f7fe ff06 	bl	800f1a8 <MT25TL01G_ResetEnable>
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80103a2:	f06f 0304 	mvn.w	r3, #4
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	e027      	b.n	80103fa <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80103aa:	2100      	movs	r1, #0
 80103ac:	4815      	ldr	r0, [pc, #84]	; (8010404 <QSPI_ResetMemory+0xd0>)
 80103ae:	f7fe ff2d 	bl	800f20c <MT25TL01G_ResetMemory>
 80103b2:	4603      	mov	r3, r0
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d003      	beq.n	80103c0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80103b8:	f06f 0304 	mvn.w	r3, #4
 80103bc:	60fb      	str	r3, [r7, #12]
 80103be:	e01c      	b.n	80103fa <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80103c0:	4911      	ldr	r1, [pc, #68]	; (8010408 <QSPI_ResetMemory+0xd4>)
 80103c2:	687a      	ldr	r2, [r7, #4]
 80103c4:	4613      	mov	r3, r2
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	4413      	add	r3, r2
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	440b      	add	r3, r1
 80103ce:	2201      	movs	r2, #1
 80103d0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 80103d2:	490d      	ldr	r1, [pc, #52]	; (8010408 <QSPI_ResetMemory+0xd4>)
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	4613      	mov	r3, r2
 80103d8:	005b      	lsls	r3, r3, #1
 80103da:	4413      	add	r3, r2
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	440b      	add	r3, r1
 80103e0:	3301      	adds	r3, #1
 80103e2:	2200      	movs	r2, #0
 80103e4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80103e6:	4908      	ldr	r1, [pc, #32]	; (8010408 <QSPI_ResetMemory+0xd4>)
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	4613      	mov	r3, r2
 80103ec:	005b      	lsls	r3, r3, #1
 80103ee:	4413      	add	r3, r2
 80103f0:	009b      	lsls	r3, r3, #2
 80103f2:	440b      	add	r3, r1
 80103f4:	3302      	adds	r3, #2
 80103f6:	2200      	movs	r2, #0
 80103f8:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 80103fa:	68fb      	ldr	r3, [r7, #12]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	2400027c 	.word	0x2400027c
 8010408:	2400b72c 	.word	0x2400b72c

0801040c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b092      	sub	sp, #72	; 0x48
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8010414:	2300      	movs	r3, #0
 8010416:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8010418:	2300      	movs	r3, #0
 801041a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801041c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010420:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8010422:	2385      	movs	r3, #133	; 0x85
 8010424:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010426:	2300      	movs	r3, #0
 8010428:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801042a:	2300      	movs	r3, #0
 801042c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801042e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8010432:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 8010434:	2300      	movs	r3, #0
 8010436:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8010438:	2302      	movs	r3, #2
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801043c:	2300      	movs	r3, #0
 801043e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010440:	2300      	movs	r3, #0
 8010442:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8010444:	2300      	movs	r3, #0
 8010446:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010448:	f107 030c 	add.w	r3, r7, #12
 801044c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010450:	4619      	mov	r1, r3
 8010452:	482b      	ldr	r0, [pc, #172]	; (8010500 <QSPI_DummyCyclesCfg+0xf4>)
 8010454:	f003 fa1a 	bl	801388c <HAL_QSPI_Command>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d002      	beq.n	8010464 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801045e:	f06f 0304 	mvn.w	r3, #4
 8010462:	e048      	b.n	80104f6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010464:	f107 030a 	add.w	r3, r7, #10
 8010468:	f241 3288 	movw	r2, #5000	; 0x1388
 801046c:	4619      	mov	r1, r3
 801046e:	4824      	ldr	r0, [pc, #144]	; (8010500 <QSPI_DummyCyclesCfg+0xf4>)
 8010470:	f003 fafc 	bl	8013a6c <HAL_QSPI_Receive>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d002      	beq.n	8010480 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801047a:	f06f 0304 	mvn.w	r3, #4
 801047e:	e03a      	b.n	80104f6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010480:	4920      	ldr	r1, [pc, #128]	; (8010504 <QSPI_DummyCyclesCfg+0xf8>)
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	4613      	mov	r3, r2
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	4413      	add	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	440b      	add	r3, r1
 801048e:	3301      	adds	r3, #1
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	4619      	mov	r1, r3
 8010494:	481a      	ldr	r0, [pc, #104]	; (8010500 <QSPI_DummyCyclesCfg+0xf4>)
 8010496:	f7fe fd06 	bl	800eea6 <MT25TL01G_WriteEnable>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104a0:	f06f 0304 	mvn.w	r3, #4
 80104a4:	e027      	b.n	80104f6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80104a6:	2381      	movs	r3, #129	; 0x81
 80104a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80104aa:	897a      	ldrh	r2, [r7, #10]
 80104ac:	f640 730f 	movw	r3, #3855	; 0xf0f
 80104b0:	4013      	ands	r3, r2
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	4b14      	ldr	r3, [pc, #80]	; (8010508 <QSPI_DummyCyclesCfg+0xfc>)
 80104b6:	4313      	orrs	r3, r2
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80104bc:	f107 030c 	add.w	r3, r7, #12
 80104c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80104c4:	4619      	mov	r1, r3
 80104c6:	480e      	ldr	r0, [pc, #56]	; (8010500 <QSPI_DummyCyclesCfg+0xf4>)
 80104c8:	f003 f9e0 	bl	801388c <HAL_QSPI_Command>
 80104cc:	4603      	mov	r3, r0
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104d2:	f06f 0304 	mvn.w	r3, #4
 80104d6:	e00e      	b.n	80104f6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80104d8:	f107 030a 	add.w	r3, r7, #10
 80104dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e0:	4619      	mov	r1, r3
 80104e2:	4807      	ldr	r0, [pc, #28]	; (8010500 <QSPI_DummyCyclesCfg+0xf4>)
 80104e4:	f003 fa30 	bl	8013948 <HAL_QSPI_Transmit>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104ee:	f06f 0304 	mvn.w	r3, #4
 80104f2:	e000      	b.n	80104f6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 80104f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3748      	adds	r7, #72	; 0x48
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	2400027c 	.word	0x2400027c
 8010504:	2400b72c 	.word	0x2400b72c
 8010508:	ffff8080 	.word	0xffff8080

0801050c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010514:	2300      	movs	r3, #0
 8010516:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d003      	beq.n	8010526 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 801051e:	f06f 0301 	mvn.w	r3, #1
 8010522:	60fb      	str	r3, [r7, #12]
 8010524:	e044      	b.n	80105b0 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2234      	movs	r2, #52	; 0x34
 801052a:	fb02 f303 	mul.w	r3, r2, r3
 801052e:	4a23      	ldr	r2, [pc, #140]	; (80105bc <BSP_SDRAM_Init+0xb0>)
 8010530:	4413      	add	r3, r2
 8010532:	4618      	mov	r0, r3
 8010534:	f000 f8b8 	bl	80106a8 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2234      	movs	r2, #52	; 0x34
 801053c:	fb02 f303 	mul.w	r3, r2, r3
 8010540:	4a1e      	ldr	r2, [pc, #120]	; (80105bc <BSP_SDRAM_Init+0xb0>)
 8010542:	4413      	add	r3, r2
 8010544:	2210      	movs	r2, #16
 8010546:	2104      	movs	r1, #4
 8010548:	4618      	mov	r0, r3
 801054a:	f000 f861 	bl	8010610 <MX_SDRAM_BANK2_Init>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d003      	beq.n	801055c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8010554:	f04f 33ff 	mov.w	r3, #4294967295
 8010558:	60fb      	str	r3, [r7, #12]
 801055a:	e029      	b.n	80105b0 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 801055c:	4b18      	ldr	r3, [pc, #96]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 801055e:	2208      	movs	r2, #8
 8010560:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8010562:	4b17      	ldr	r3, [pc, #92]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 8010564:	2203      	movs	r2, #3
 8010566:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8010568:	4b15      	ldr	r3, [pc, #84]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 801056a:	f240 6203 	movw	r2, #1539	; 0x603
 801056e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8010570:	4b13      	ldr	r3, [pc, #76]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 8010572:	2200      	movs	r2, #0
 8010574:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8010576:	4b12      	ldr	r3, [pc, #72]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 8010578:	2200      	movs	r2, #0
 801057a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 801057c:	4b10      	ldr	r3, [pc, #64]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 801057e:	2230      	movs	r2, #48	; 0x30
 8010580:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8010582:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 8010584:	2200      	movs	r2, #0
 8010586:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8010588:	4b0d      	ldr	r3, [pc, #52]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 801058a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801058e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2234      	movs	r2, #52	; 0x34
 8010594:	fb02 f303 	mul.w	r3, r2, r3
 8010598:	4a08      	ldr	r2, [pc, #32]	; (80105bc <BSP_SDRAM_Init+0xb0>)
 801059a:	4413      	add	r3, r2
 801059c:	4908      	ldr	r1, [pc, #32]	; (80105c0 <BSP_SDRAM_Init+0xb4>)
 801059e:	4618      	mov	r0, r3
 80105a0:	f7fe fe66 	bl	800f270 <MT48LC4M32B2_Init>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d002      	beq.n	80105b0 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80105aa:	f06f 0304 	mvn.w	r3, #4
 80105ae:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80105b0:	68fb      	ldr	r3, [r7, #12]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	2400b738 	.word	0x2400b738
 80105c0:	2400b76c 	.word	0x2400b76c

080105c4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80105cc:	2300      	movs	r3, #0
 80105ce:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d003      	beq.n	80105de <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80105d6:	f06f 0301 	mvn.w	r3, #1
 80105da:	60fb      	str	r3, [r7, #12]
 80105dc:	e011      	b.n	8010602 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2234      	movs	r2, #52	; 0x34
 80105e2:	fb02 f303 	mul.w	r3, r2, r3
 80105e6:	4a09      	ldr	r2, [pc, #36]	; (801060c <BSP_SDRAM_DeInit+0x48>)
 80105e8:	4413      	add	r3, r2
 80105ea:	4618      	mov	r0, r3
 80105ec:	f006 fa3e 	bl	8016a6c <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2234      	movs	r2, #52	; 0x34
 80105f4:	fb02 f303 	mul.w	r3, r2, r3
 80105f8:	4a04      	ldr	r2, [pc, #16]	; (801060c <BSP_SDRAM_DeInit+0x48>)
 80105fa:	4413      	add	r3, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f000 f951 	bl	80108a4 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	2400b738 	.word	0x2400b738

08010610 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b08c      	sub	sp, #48	; 0x30
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 801061c:	4b20      	ldr	r3, [pc, #128]	; (80106a0 <MX_SDRAM_BANK2_Init+0x90>)
 801061e:	4a21      	ldr	r2, [pc, #132]	; (80106a4 <MX_SDRAM_BANK2_Init+0x94>)
 8010620:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2201      	movs	r2, #1
 8010626:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2200      	movs	r2, #0
 801062c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	68ba      	ldr	r2, [r7, #8]
 8010632:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801063a:	4b19      	ldr	r3, [pc, #100]	; (80106a0 <MX_SDRAM_BANK2_Init+0x90>)
 801063c:	2240      	movs	r2, #64	; 0x40
 801063e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8010646:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2200      	movs	r2, #0
 801064c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010654:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801065c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 8010664:	2302      	movs	r3, #2
 8010666:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8010668:	2307      	movs	r3, #7
 801066a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 801066c:	2304      	movs	r3, #4
 801066e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8010670:	2307      	movs	r3, #7
 8010672:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 8010674:	2302      	movs	r3, #2
 8010676:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8010678:	2302      	movs	r3, #2
 801067a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 801067c:	2302      	movs	r3, #2
 801067e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8010680:	f107 0314 	add.w	r3, r7, #20
 8010684:	4619      	mov	r1, r3
 8010686:	68f8      	ldr	r0, [r7, #12]
 8010688:	f006 f9b4 	bl	80169f4 <HAL_SDRAM_Init>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8010692:	2301      	movs	r3, #1
 8010694:	e000      	b.n	8010698 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3730      	adds	r7, #48	; 0x30
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	2400b738 	.word	0x2400b738
 80106a4:	52004140 	.word	0x52004140

080106a8 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b08e      	sub	sp, #56	; 0x38
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80106b0:	4b73      	ldr	r3, [pc, #460]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106b6:	4a72      	ldr	r2, [pc, #456]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80106bc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80106c0:	4b6f      	ldr	r3, [pc, #444]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80106ca:	623b      	str	r3, [r7, #32]
 80106cc:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80106ce:	4b6c      	ldr	r3, [pc, #432]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106d4:	4a6a      	ldr	r2, [pc, #424]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106d6:	f043 0301 	orr.w	r3, r3, #1
 80106da:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80106de:	4b68      	ldr	r3, [pc, #416]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	61fb      	str	r3, [r7, #28]
 80106ea:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80106ec:	4b64      	ldr	r3, [pc, #400]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80106f2:	4a63      	ldr	r2, [pc, #396]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106f4:	f043 0308 	orr.w	r3, r3, #8
 80106f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80106fc:	4b60      	ldr	r3, [pc, #384]	; (8010880 <SDRAM_MspInit+0x1d8>)
 80106fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010702:	f003 0308 	and.w	r3, r3, #8
 8010706:	61bb      	str	r3, [r7, #24]
 8010708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801070a:	4b5d      	ldr	r3, [pc, #372]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010710:	4a5b      	ldr	r2, [pc, #364]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010712:	f043 0310 	orr.w	r3, r3, #16
 8010716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801071a:	4b59      	ldr	r3, [pc, #356]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010720:	f003 0310 	and.w	r3, r3, #16
 8010724:	617b      	str	r3, [r7, #20]
 8010726:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010728:	4b55      	ldr	r3, [pc, #340]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801072e:	4a54      	ldr	r2, [pc, #336]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010730:	f043 0320 	orr.w	r3, r3, #32
 8010734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010738:	4b51      	ldr	r3, [pc, #324]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801073e:	f003 0320 	and.w	r3, r3, #32
 8010742:	613b      	str	r3, [r7, #16]
 8010744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010746:	4b4e      	ldr	r3, [pc, #312]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801074c:	4a4c      	ldr	r2, [pc, #304]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010756:	4b4a      	ldr	r3, [pc, #296]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801075c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010760:	60fb      	str	r3, [r7, #12]
 8010762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010764:	4b46      	ldr	r3, [pc, #280]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801076a:	4a45      	ldr	r2, [pc, #276]	; (8010880 <SDRAM_MspInit+0x1d8>)
 801076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010774:	4b42      	ldr	r3, [pc, #264]	; (8010880 <SDRAM_MspInit+0x1d8>)
 8010776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801077e:	60bb      	str	r3, [r7, #8]
 8010780:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010782:	2302      	movs	r3, #2
 8010784:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010786:	2301      	movs	r3, #1
 8010788:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801078a:	2303      	movs	r3, #3
 801078c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 801078e:	230c      	movs	r3, #12
 8010790:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8010792:	f24c 7303 	movw	r3, #50947	; 0xc703
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8010798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801079c:	4619      	mov	r1, r3
 801079e:	4839      	ldr	r0, [pc, #228]	; (8010884 <SDRAM_MspInit+0x1dc>)
 80107a0:	f000 ff6a 	bl	8011678 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80107a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80107a8:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80107aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107ae:	4619      	mov	r1, r3
 80107b0:	4835      	ldr	r0, [pc, #212]	; (8010888 <SDRAM_MspInit+0x1e0>)
 80107b2:	f000 ff61 	bl	8011678 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80107b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80107ba:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80107bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107c0:	4619      	mov	r1, r3
 80107c2:	4832      	ldr	r0, [pc, #200]	; (801088c <SDRAM_MspInit+0x1e4>)
 80107c4:	f000 ff58 	bl	8011678 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 80107c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80107ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107d2:	4619      	mov	r1, r3
 80107d4:	482e      	ldr	r0, [pc, #184]	; (8010890 <SDRAM_MspInit+0x1e8>)
 80107d6:	f000 ff4f 	bl	8011678 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80107da:	23e0      	movs	r3, #224	; 0xe0
 80107dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80107de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107e2:	4619      	mov	r1, r3
 80107e4:	482b      	ldr	r0, [pc, #172]	; (8010894 <SDRAM_MspInit+0x1ec>)
 80107e6:	f000 ff47 	bl	8011678 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80107ea:	4b2b      	ldr	r3, [pc, #172]	; (8010898 <SDRAM_MspInit+0x1f0>)
 80107ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80107f0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80107f2:	4b29      	ldr	r3, [pc, #164]	; (8010898 <SDRAM_MspInit+0x1f0>)
 80107f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107f8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80107fa:	4b27      	ldr	r3, [pc, #156]	; (8010898 <SDRAM_MspInit+0x1f0>)
 80107fc:	2280      	movs	r2, #128	; 0x80
 80107fe:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8010800:	4b25      	ldr	r3, [pc, #148]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010802:	2200      	movs	r2, #0
 8010804:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8010806:	4b24      	ldr	r3, [pc, #144]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010808:	f240 2202 	movw	r2, #514	; 0x202
 801080c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 801080e:	4b22      	ldr	r3, [pc, #136]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010810:	f640 0208 	movw	r2, #2056	; 0x808
 8010814:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8010816:	4b20      	ldr	r3, [pc, #128]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010818:	2220      	movs	r2, #32
 801081a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 801081c:	4b1e      	ldr	r3, [pc, #120]	; (8010898 <SDRAM_MspInit+0x1f0>)
 801081e:	2280      	movs	r2, #128	; 0x80
 8010820:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8010822:	4b1d      	ldr	r3, [pc, #116]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8010828:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 801082a:	4b1b      	ldr	r3, [pc, #108]	; (8010898 <SDRAM_MspInit+0x1f0>)
 801082c:	2200      	movs	r2, #0
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8010830:	4b19      	ldr	r3, [pc, #100]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010832:	2200      	movs	r2, #0
 8010834:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8010836:	4b18      	ldr	r3, [pc, #96]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010838:	2280      	movs	r2, #128	; 0x80
 801083a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 801083c:	4b16      	ldr	r3, [pc, #88]	; (8010898 <SDRAM_MspInit+0x1f0>)
 801083e:	2200      	movs	r2, #0
 8010840:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8010842:	4b15      	ldr	r3, [pc, #84]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010844:	2200      	movs	r2, #0
 8010846:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010848:	4b13      	ldr	r3, [pc, #76]	; (8010898 <SDRAM_MspInit+0x1f0>)
 801084a:	4a14      	ldr	r2, [pc, #80]	; (801089c <SDRAM_MspInit+0x1f4>)
 801084c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 801084e:	4b14      	ldr	r3, [pc, #80]	; (80108a0 <SDRAM_MspInit+0x1f8>)
 8010850:	4a11      	ldr	r2, [pc, #68]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010852:	631a      	str	r2, [r3, #48]	; 0x30
 8010854:	4b10      	ldr	r3, [pc, #64]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010856:	4a12      	ldr	r2, [pc, #72]	; (80108a0 <SDRAM_MspInit+0x1f8>)
 8010858:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 801085a:	480f      	ldr	r0, [pc, #60]	; (8010898 <SDRAM_MspInit+0x1f0>)
 801085c:	f002 fc76 	bl	801314c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8010860:	480d      	ldr	r0, [pc, #52]	; (8010898 <SDRAM_MspInit+0x1f0>)
 8010862:	f002 fc27 	bl	80130b4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8010866:	2200      	movs	r2, #0
 8010868:	210f      	movs	r1, #15
 801086a:	207a      	movs	r0, #122	; 0x7a
 801086c:	f000 fbec 	bl	8011048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8010870:	207a      	movs	r0, #122	; 0x7a
 8010872:	f000 fc03 	bl	801107c <HAL_NVIC_EnableIRQ>
}
 8010876:	bf00      	nop
 8010878:	3738      	adds	r7, #56	; 0x38
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	58024400 	.word	0x58024400
 8010884:	58020c00 	.word	0x58020c00
 8010888:	58021000 	.word	0x58021000
 801088c:	58021400 	.word	0x58021400
 8010890:	58021800 	.word	0x58021800
 8010894:	58021c00 	.word	0x58021c00
 8010898:	2400b78c 	.word	0x2400b78c
 801089c:	52000040 	.word	0x52000040
 80108a0:	2400b738 	.word	0x2400b738

080108a4 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80108ac:	207a      	movs	r0, #122	; 0x7a
 80108ae:	f000 fbf3 	bl	8011098 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80108b2:	4b05      	ldr	r3, [pc, #20]	; (80108c8 <SDRAM_MspDeInit+0x24>)
 80108b4:	4a05      	ldr	r2, [pc, #20]	; (80108cc <SDRAM_MspDeInit+0x28>)
 80108b6:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80108b8:	4803      	ldr	r0, [pc, #12]	; (80108c8 <SDRAM_MspDeInit+0x24>)
 80108ba:	f002 fc47 	bl	801314c <HAL_MDMA_DeInit>
}
 80108be:	bf00      	nop
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	2400b7f8 	.word	0x2400b7f8
 80108cc:	52000040 	.word	0x52000040

080108d0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80108da:	2300      	movs	r3, #0
 80108dc:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d11c      	bne.n	801091e <BSP_TS_Init+0x4e>
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d018      	beq.n	801091e <BSP_TS_Init+0x4e>
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80108f4:	d813      	bhi.n	801091e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00f      	beq.n	801091e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8010906:	d80a      	bhi.n	801091e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	68da      	ldr	r2, [r3, #12]
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	6819      	ldr	r1, [r3, #0]
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	428b      	cmp	r3, r1
 8010916:	bf28      	it	cs
 8010918:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801091a:	429a      	cmp	r2, r3
 801091c:	d903      	bls.n	8010926 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801091e:	f06f 0301 	mvn.w	r3, #1
 8010922:	61fb      	str	r3, [r7, #28]
 8010924:	e085      	b.n	8010a32 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 f9e6 	bl	8010cf8 <FT5336_Probe>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d003      	beq.n	801093a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010932:	f04f 33ff 	mov.w	r3, #4294967295
 8010936:	61fb      	str	r3, [r7, #28]
 8010938:	e07b      	b.n	8010a32 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	6819      	ldr	r1, [r3, #0]
 801093e:	483f      	ldr	r0, [pc, #252]	; (8010a3c <BSP_TS_Init+0x16c>)
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	4613      	mov	r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	4413      	add	r3, r2
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	4403      	add	r3, r0
 801094c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	6859      	ldr	r1, [r3, #4]
 8010952:	483a      	ldr	r0, [pc, #232]	; (8010a3c <BSP_TS_Init+0x16c>)
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	4613      	mov	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	4413      	add	r3, r2
 801095c:	00db      	lsls	r3, r3, #3
 801095e:	4403      	add	r3, r0
 8010960:	3304      	adds	r3, #4
 8010962:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	6899      	ldr	r1, [r3, #8]
 8010968:	4834      	ldr	r0, [pc, #208]	; (8010a3c <BSP_TS_Init+0x16c>)
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	4613      	mov	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4413      	add	r3, r2
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	4403      	add	r3, r0
 8010976:	3308      	adds	r3, #8
 8010978:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	68d9      	ldr	r1, [r3, #12]
 801097e:	482f      	ldr	r0, [pc, #188]	; (8010a3c <BSP_TS_Init+0x16c>)
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	4613      	mov	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	00db      	lsls	r3, r3, #3
 801098a:	4403      	add	r3, r0
 801098c:	330c      	adds	r3, #12
 801098e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8010990:	4b2b      	ldr	r3, [pc, #172]	; (8010a40 <BSP_TS_Init+0x170>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	69db      	ldr	r3, [r3, #28]
 8010996:	492b      	ldr	r1, [pc, #172]	; (8010a44 <BSP_TS_Init+0x174>)
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801099e:	f107 010c 	add.w	r1, r7, #12
 80109a2:	4610      	mov	r0, r2
 80109a4:	4798      	blx	r3
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	da03      	bge.n	80109b4 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80109ac:	f06f 0304 	mvn.w	r3, #4
 80109b0:	61fb      	str	r3, [r7, #28]
 80109b2:	e03e      	b.n	8010a32 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80109b4:	6939      	ldr	r1, [r7, #16]
 80109b6:	4821      	ldr	r0, [pc, #132]	; (8010a3c <BSP_TS_Init+0x16c>)
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	4613      	mov	r3, r2
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	4413      	add	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	4403      	add	r3, r0
 80109c4:	3310      	adds	r3, #16
 80109c6:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80109c8:	6979      	ldr	r1, [r7, #20]
 80109ca:	481c      	ldr	r0, [pc, #112]	; (8010a3c <BSP_TS_Init+0x16c>)
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	4613      	mov	r3, r2
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	4413      	add	r3, r2
 80109d4:	00db      	lsls	r3, r3, #3
 80109d6:	4403      	add	r3, r0
 80109d8:	3314      	adds	r3, #20
 80109da:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80109dc:	2300      	movs	r3, #0
 80109de:	61bb      	str	r3, [r7, #24]
 80109e0:	e024      	b.n	8010a2c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	68db      	ldr	r3, [r3, #12]
 80109ea:	4413      	add	r3, r2
 80109ec:	1c59      	adds	r1, r3, #1
 80109ee:	4813      	ldr	r0, [pc, #76]	; (8010a3c <BSP_TS_Init+0x16c>)
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	4613      	mov	r3, r2
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	4413      	add	r3, r2
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	4413      	add	r3, r2
 80109fe:	3306      	adds	r3, #6
 8010a00:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	685a      	ldr	r2, [r3, #4]
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	4413      	add	r3, r2
 8010a0e:	1c59      	adds	r1, r3, #1
 8010a10:	480a      	ldr	r0, [pc, #40]	; (8010a3c <BSP_TS_Init+0x16c>)
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	4613      	mov	r3, r2
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	005b      	lsls	r3, r3, #1
 8010a1c:	69ba      	ldr	r2, [r7, #24]
 8010a1e:	4413      	add	r3, r2
 8010a20:	3308      	adds	r3, #8
 8010a22:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	61bb      	str	r3, [r7, #24]
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	2b01      	cmp	r3, #1
 8010a30:	d9d7      	bls.n	80109e2 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010a32:	69fb      	ldr	r3, [r7, #28]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3720      	adds	r7, #32
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	2400b86c 	.word	0x2400b86c
 8010a40:	2400b864 	.word	0x2400b864
 8010a44:	2400b868 	.word	0x2400b868

08010a48 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b08a      	sub	sp, #40	; 0x28
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010a52:	2300      	movs	r3, #0
 8010a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d003      	beq.n	8010a64 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010a5c:	f06f 0301 	mvn.w	r3, #1
 8010a60:	627b      	str	r3, [r7, #36]	; 0x24
 8010a62:	e13e      	b.n	8010ce2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010a64:	4ba1      	ldr	r3, [pc, #644]	; (8010cec <BSP_TS_GetState+0x2a4>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	49a1      	ldr	r1, [pc, #644]	; (8010cf0 <BSP_TS_GetState+0x2a8>)
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010a72:	f107 0108 	add.w	r1, r7, #8
 8010a76:	4610      	mov	r0, r2
 8010a78:	4798      	blx	r3
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	da03      	bge.n	8010a88 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010a80:	f06f 0304 	mvn.w	r3, #4
 8010a84:	627b      	str	r3, [r7, #36]	; 0x24
 8010a86:	e12c      	b.n	8010ce2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f000 8110 	beq.w	8010cb0 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010a98:	4996      	ldr	r1, [pc, #600]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4413      	add	r3, r2
 8010aa2:	00db      	lsls	r3, r3, #3
 8010aa4:	440b      	add	r3, r1
 8010aa6:	3308      	adds	r3, #8
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f003 0308 	and.w	r3, r3, #8
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d003      	beq.n	8010aba <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8010aba:	498e      	ldr	r1, [pc, #568]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	4413      	add	r3, r2
 8010ac4:	00db      	lsls	r3, r3, #3
 8010ac6:	440b      	add	r3, r1
 8010ac8:	3308      	adds	r3, #8
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f003 0302 	and.w	r3, r3, #2
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00c      	beq.n	8010aee <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010ad4:	4987      	ldr	r1, [pc, #540]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	4413      	add	r3, r2
 8010ade:	00db      	lsls	r3, r3, #3
 8010ae0:	440b      	add	r3, r1
 8010ae2:	3310      	adds	r3, #16
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	3b01      	subs	r3, #1
 8010aec:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8010aee:	4981      	ldr	r1, [pc, #516]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	4613      	mov	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	00db      	lsls	r3, r3, #3
 8010afa:	440b      	add	r3, r1
 8010afc:	3308      	adds	r3, #8
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	f003 0304 	and.w	r3, r3, #4
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00b      	beq.n	8010b20 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010b08:	497a      	ldr	r1, [pc, #488]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4413      	add	r3, r2
 8010b12:	00db      	lsls	r3, r3, #3
 8010b14:	440b      	add	r3, r1
 8010b16:	3314      	adds	r3, #20
 8010b18:	681a      	ldr	r2, [r3, #0]
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010b20:	4974      	ldr	r1, [pc, #464]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	4613      	mov	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	4413      	add	r3, r2
 8010b2a:	00db      	lsls	r3, r3, #3
 8010b2c:	440b      	add	r3, r1
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	6a3a      	ldr	r2, [r7, #32]
 8010b32:	fb02 f103 	mul.w	r1, r2, r3
 8010b36:	486f      	ldr	r0, [pc, #444]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	4413      	add	r3, r2
 8010b40:	00db      	lsls	r3, r3, #3
 8010b42:	4403      	add	r3, r0
 8010b44:	3310      	adds	r3, #16
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	fbb1 f2f3 	udiv	r2, r1, r3
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010b50:	4968      	ldr	r1, [pc, #416]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	4613      	mov	r3, r2
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	4413      	add	r3, r2
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	440b      	add	r3, r1
 8010b5e:	3304      	adds	r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	69fa      	ldr	r2, [r7, #28]
 8010b64:	fb02 f103 	mul.w	r1, r2, r3
 8010b68:	4862      	ldr	r0, [pc, #392]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4413      	add	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	4403      	add	r3, r0
 8010b76:	3314      	adds	r3, #20
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	fbb1 f2f3 	udiv	r2, r1, r3
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010b82:	68ba      	ldr	r2, [r7, #8]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	6859      	ldr	r1, [r3, #4]
 8010b8c:	4859      	ldr	r0, [pc, #356]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	4613      	mov	r3, r2
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	4413      	add	r3, r2
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	4403      	add	r3, r0
 8010b9a:	3318      	adds	r3, #24
 8010b9c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010b9e:	4299      	cmp	r1, r3
 8010ba0:	d90c      	bls.n	8010bbc <BSP_TS_GetState+0x174>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	6859      	ldr	r1, [r3, #4]
 8010ba6:	4853      	ldr	r0, [pc, #332]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	4613      	mov	r3, r2
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	4413      	add	r3, r2
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	4403      	add	r3, r0
 8010bb4:	3318      	adds	r3, #24
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	1acb      	subs	r3, r1, r3
 8010bba:	e00b      	b.n	8010bd4 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8010bbc:	494d      	ldr	r1, [pc, #308]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	4413      	add	r3, r2
 8010bc6:	00db      	lsls	r3, r3, #3
 8010bc8:	440b      	add	r3, r1
 8010bca:	3318      	adds	r3, #24
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010bd2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010bd4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	6899      	ldr	r1, [r3, #8]
 8010bda:	4846      	ldr	r0, [pc, #280]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	4613      	mov	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	4403      	add	r3, r0
 8010be8:	3320      	adds	r3, #32
 8010bea:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010bec:	4299      	cmp	r1, r3
 8010bee:	d90c      	bls.n	8010c0a <BSP_TS_GetState+0x1c2>
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	6899      	ldr	r1, [r3, #8]
 8010bf4:	483f      	ldr	r0, [pc, #252]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	00db      	lsls	r3, r3, #3
 8010c00:	4403      	add	r3, r0
 8010c02:	3320      	adds	r3, #32
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	1acb      	subs	r3, r1, r3
 8010c08:	e00b      	b.n	8010c22 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8010c0a:	493a      	ldr	r1, [pc, #232]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	4413      	add	r3, r2
 8010c14:	00db      	lsls	r3, r3, #3
 8010c16:	440b      	add	r3, r1
 8010c18:	3320      	adds	r3, #32
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010c20:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010c22:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010c24:	4933      	ldr	r1, [pc, #204]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	4613      	mov	r3, r2
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	4413      	add	r3, r2
 8010c2e:	00db      	lsls	r3, r3, #3
 8010c30:	440b      	add	r3, r1
 8010c32:	330c      	adds	r3, #12
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	69ba      	ldr	r2, [r7, #24]
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d80b      	bhi.n	8010c54 <BSP_TS_GetState+0x20c>
 8010c3c:	492d      	ldr	r1, [pc, #180]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c3e:	687a      	ldr	r2, [r7, #4]
 8010c40:	4613      	mov	r3, r2
 8010c42:	009b      	lsls	r3, r3, #2
 8010c44:	4413      	add	r3, r2
 8010c46:	00db      	lsls	r3, r3, #3
 8010c48:	440b      	add	r3, r1
 8010c4a:	330c      	adds	r3, #12
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d916      	bls.n	8010c82 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	6859      	ldr	r1, [r3, #4]
 8010c58:	4826      	ldr	r0, [pc, #152]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4413      	add	r3, r2
 8010c62:	00db      	lsls	r3, r3, #3
 8010c64:	4403      	add	r3, r0
 8010c66:	3318      	adds	r3, #24
 8010c68:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	6899      	ldr	r1, [r3, #8]
 8010c6e:	4821      	ldr	r0, [pc, #132]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	4613      	mov	r3, r2
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	00db      	lsls	r3, r3, #3
 8010c7a:	4403      	add	r3, r0
 8010c7c:	3320      	adds	r3, #32
 8010c7e:	6019      	str	r1, [r3, #0]
 8010c80:	e02f      	b.n	8010ce2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010c82:	491c      	ldr	r1, [pc, #112]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	4613      	mov	r3, r2
 8010c88:	009b      	lsls	r3, r3, #2
 8010c8a:	4413      	add	r3, r2
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	440b      	add	r3, r1
 8010c90:	3318      	adds	r3, #24
 8010c92:	681a      	ldr	r2, [r3, #0]
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010c98:	4916      	ldr	r1, [pc, #88]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	4613      	mov	r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	4413      	add	r3, r2
 8010ca2:	00db      	lsls	r3, r3, #3
 8010ca4:	440b      	add	r3, r1
 8010ca6:	3320      	adds	r3, #32
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	609a      	str	r2, [r3, #8]
 8010cae:	e018      	b.n	8010ce2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010cb6:	490f      	ldr	r1, [pc, #60]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010cb8:	687a      	ldr	r2, [r7, #4]
 8010cba:	4613      	mov	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	00db      	lsls	r3, r3, #3
 8010cc2:	440b      	add	r3, r1
 8010cc4:	3318      	adds	r3, #24
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010ccc:	4909      	ldr	r1, [pc, #36]	; (8010cf4 <BSP_TS_GetState+0x2ac>)
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	440b      	add	r3, r1
 8010cda:	3320      	adds	r3, #32
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8010ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3728      	adds	r7, #40	; 0x28
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	2400b864 	.word	0x2400b864
 8010cf0:	2400b868 	.word	0x2400b868
 8010cf4:	2400b86c 	.word	0x2400b86c

08010cf8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b08a      	sub	sp, #40	; 0x28
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010d00:	2300      	movs	r3, #0
 8010d02:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010d04:	2300      	movs	r3, #0
 8010d06:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010d08:	2370      	movs	r3, #112	; 0x70
 8010d0a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8010d0c:	4b23      	ldr	r3, [pc, #140]	; (8010d9c <FT5336_Probe+0xa4>)
 8010d0e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010d10:	4b23      	ldr	r3, [pc, #140]	; (8010da0 <FT5336_Probe+0xa8>)
 8010d12:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010d14:	4b23      	ldr	r3, [pc, #140]	; (8010da4 <FT5336_Probe+0xac>)
 8010d16:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010d18:	4b23      	ldr	r3, [pc, #140]	; (8010da8 <FT5336_Probe+0xb0>)
 8010d1a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8010d1c:	4b23      	ldr	r3, [pc, #140]	; (8010dac <FT5336_Probe+0xb4>)
 8010d1e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010d20:	f107 030c 	add.w	r3, r7, #12
 8010d24:	4619      	mov	r1, r3
 8010d26:	4822      	ldr	r0, [pc, #136]	; (8010db0 <FT5336_Probe+0xb8>)
 8010d28:	f7fd fcb2 	bl	800e690 <FT5336_RegisterBusIO>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d003      	beq.n	8010d3a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010d32:	f06f 0307 	mvn.w	r3, #7
 8010d36:	627b      	str	r3, [r7, #36]	; 0x24
 8010d38:	e02a      	b.n	8010d90 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	4619      	mov	r1, r3
 8010d40:	481b      	ldr	r0, [pc, #108]	; (8010db0 <FT5336_Probe+0xb8>)
 8010d42:	f7fd fd9f 	bl	800e884 <FT5336_ReadID>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d003      	beq.n	8010d54 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010d4c:	f06f 0304 	mvn.w	r3, #4
 8010d50:	627b      	str	r3, [r7, #36]	; 0x24
 8010d52:	e01d      	b.n	8010d90 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	2b51      	cmp	r3, #81	; 0x51
 8010d58:	d003      	beq.n	8010d62 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010d5a:	f06f 0306 	mvn.w	r3, #6
 8010d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d60:	e016      	b.n	8010d90 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010d62:	4a14      	ldr	r2, [pc, #80]	; (8010db4 <FT5336_Probe+0xbc>)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4912      	ldr	r1, [pc, #72]	; (8010db0 <FT5336_Probe+0xb8>)
 8010d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8010d6c:	4b12      	ldr	r3, [pc, #72]	; (8010db8 <FT5336_Probe+0xc0>)
 8010d6e:	4a13      	ldr	r2, [pc, #76]	; (8010dbc <FT5336_Probe+0xc4>)
 8010d70:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010d72:	4b11      	ldr	r3, [pc, #68]	; (8010db8 <FT5336_Probe+0xc0>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	490e      	ldr	r1, [pc, #56]	; (8010db4 <FT5336_Probe+0xbc>)
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010d80:	4610      	mov	r0, r2
 8010d82:	4798      	blx	r3
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d002      	beq.n	8010d90 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010d8a:	f06f 0304 	mvn.w	r3, #4
 8010d8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3728      	adds	r7, #40	; 0x28
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	0800f489 	.word	0x0800f489
 8010da0:	0800f4fd 	.word	0x0800f4fd
 8010da4:	0800f625 	.word	0x0800f625
 8010da8:	0800f5c9 	.word	0x0800f5c9
 8010dac:	0800f681 	.word	0x0800f681
 8010db0:	2400b894 	.word	0x2400b894
 8010db4:	2400b868 	.word	0x2400b868
 8010db8:	2400b864 	.word	0x2400b864
 8010dbc:	24000020 	.word	0x24000020

08010dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010dc6:	2003      	movs	r0, #3
 8010dc8:	f000 f933 	bl	8011032 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010dcc:	f004 f88c 	bl	8014ee8 <HAL_RCC_GetSysClockFreq>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	4b15      	ldr	r3, [pc, #84]	; (8010e28 <HAL_Init+0x68>)
 8010dd4:	699b      	ldr	r3, [r3, #24]
 8010dd6:	0a1b      	lsrs	r3, r3, #8
 8010dd8:	f003 030f 	and.w	r3, r3, #15
 8010ddc:	4913      	ldr	r1, [pc, #76]	; (8010e2c <HAL_Init+0x6c>)
 8010dde:	5ccb      	ldrb	r3, [r1, r3]
 8010de0:	f003 031f 	and.w	r3, r3, #31
 8010de4:	fa22 f303 	lsr.w	r3, r2, r3
 8010de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010dea:	4b0f      	ldr	r3, [pc, #60]	; (8010e28 <HAL_Init+0x68>)
 8010dec:	699b      	ldr	r3, [r3, #24]
 8010dee:	f003 030f 	and.w	r3, r3, #15
 8010df2:	4a0e      	ldr	r2, [pc, #56]	; (8010e2c <HAL_Init+0x6c>)
 8010df4:	5cd3      	ldrb	r3, [r2, r3]
 8010df6:	f003 031f 	and.w	r3, r3, #31
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8010e00:	4a0b      	ldr	r2, [pc, #44]	; (8010e30 <HAL_Init+0x70>)
 8010e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010e04:	4a0b      	ldr	r2, [pc, #44]	; (8010e34 <HAL_Init+0x74>)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010e0a:	200f      	movs	r0, #15
 8010e0c:	f7f0 fbd8 	bl	80015c0 <HAL_InitTick>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d001      	beq.n	8010e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010e16:	2301      	movs	r3, #1
 8010e18:	e002      	b.n	8010e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010e1a:	f7f0 f811 	bl	8000e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3708      	adds	r7, #8
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	58024400 	.word	0x58024400
 8010e2c:	0802d858 	.word	0x0802d858
 8010e30:	2400001c 	.word	0x2400001c
 8010e34:	24000018 	.word	0x24000018

08010e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010e3c:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <HAL_IncTick+0x20>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	461a      	mov	r2, r3
 8010e42:	4b06      	ldr	r3, [pc, #24]	; (8010e5c <HAL_IncTick+0x24>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4413      	add	r3, r2
 8010e48:	4a04      	ldr	r2, [pc, #16]	; (8010e5c <HAL_IncTick+0x24>)
 8010e4a:	6013      	str	r3, [r2, #0]
}
 8010e4c:	bf00      	nop
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	24000054 	.word	0x24000054
 8010e5c:	2400b8bc 	.word	0x2400b8bc

08010e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010e60:	b480      	push	{r7}
 8010e62:	af00      	add	r7, sp, #0
  return uwTick;
 8010e64:	4b03      	ldr	r3, [pc, #12]	; (8010e74 <HAL_GetTick+0x14>)
 8010e66:	681b      	ldr	r3, [r3, #0]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	2400b8bc 	.word	0x2400b8bc

08010e78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010e7c:	4b03      	ldr	r3, [pc, #12]	; (8010e8c <HAL_GetREVID+0x14>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	0c1b      	lsrs	r3, r3, #16
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	5c001000 	.word	0x5c001000

08010e90 <__NVIC_SetPriorityGrouping>:
{
 8010e90:	b480      	push	{r7}
 8010e92:	b085      	sub	sp, #20
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f003 0307 	and.w	r3, r3, #7
 8010e9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010ea0:	4b0b      	ldr	r3, [pc, #44]	; (8010ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010ea6:	68ba      	ldr	r2, [r7, #8]
 8010ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010eac:	4013      	ands	r3, r2
 8010eae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010eb8:	4b06      	ldr	r3, [pc, #24]	; (8010ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010ebe:	4a04      	ldr	r2, [pc, #16]	; (8010ed0 <__NVIC_SetPriorityGrouping+0x40>)
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	60d3      	str	r3, [r2, #12]
}
 8010ec4:	bf00      	nop
 8010ec6:	3714      	adds	r7, #20
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	e000ed00 	.word	0xe000ed00
 8010ed4:	05fa0000 	.word	0x05fa0000

08010ed8 <__NVIC_GetPriorityGrouping>:
{
 8010ed8:	b480      	push	{r7}
 8010eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010edc:	4b04      	ldr	r3, [pc, #16]	; (8010ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	0a1b      	lsrs	r3, r3, #8
 8010ee2:	f003 0307 	and.w	r3, r3, #7
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr
 8010ef0:	e000ed00 	.word	0xe000ed00

08010ef4 <__NVIC_EnableIRQ>:
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	4603      	mov	r3, r0
 8010efc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	db0b      	blt.n	8010f1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f06:	88fb      	ldrh	r3, [r7, #6]
 8010f08:	f003 021f 	and.w	r2, r3, #31
 8010f0c:	4907      	ldr	r1, [pc, #28]	; (8010f2c <__NVIC_EnableIRQ+0x38>)
 8010f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f12:	095b      	lsrs	r3, r3, #5
 8010f14:	2001      	movs	r0, #1
 8010f16:	fa00 f202 	lsl.w	r2, r0, r2
 8010f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010f1e:	bf00      	nop
 8010f20:	370c      	adds	r7, #12
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	e000e100 	.word	0xe000e100

08010f30 <__NVIC_DisableIRQ>:
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	4603      	mov	r3, r0
 8010f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	db12      	blt.n	8010f68 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f42:	88fb      	ldrh	r3, [r7, #6]
 8010f44:	f003 021f 	and.w	r2, r3, #31
 8010f48:	490a      	ldr	r1, [pc, #40]	; (8010f74 <__NVIC_DisableIRQ+0x44>)
 8010f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f4e:	095b      	lsrs	r3, r3, #5
 8010f50:	2001      	movs	r0, #1
 8010f52:	fa00 f202 	lsl.w	r2, r0, r2
 8010f56:	3320      	adds	r3, #32
 8010f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010f5c:	f3bf 8f4f 	dsb	sy
}
 8010f60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010f62:	f3bf 8f6f 	isb	sy
}
 8010f66:	bf00      	nop
}
 8010f68:	bf00      	nop
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	e000e100 	.word	0xe000e100

08010f78 <__NVIC_SetPriority>:
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	6039      	str	r1, [r7, #0]
 8010f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	db0a      	blt.n	8010fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	b2da      	uxtb	r2, r3
 8010f90:	490c      	ldr	r1, [pc, #48]	; (8010fc4 <__NVIC_SetPriority+0x4c>)
 8010f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f96:	0112      	lsls	r2, r2, #4
 8010f98:	b2d2      	uxtb	r2, r2
 8010f9a:	440b      	add	r3, r1
 8010f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010fa0:	e00a      	b.n	8010fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	4908      	ldr	r1, [pc, #32]	; (8010fc8 <__NVIC_SetPriority+0x50>)
 8010fa8:	88fb      	ldrh	r3, [r7, #6]
 8010faa:	f003 030f 	and.w	r3, r3, #15
 8010fae:	3b04      	subs	r3, #4
 8010fb0:	0112      	lsls	r2, r2, #4
 8010fb2:	b2d2      	uxtb	r2, r2
 8010fb4:	440b      	add	r3, r1
 8010fb6:	761a      	strb	r2, [r3, #24]
}
 8010fb8:	bf00      	nop
 8010fba:	370c      	adds	r7, #12
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr
 8010fc4:	e000e100 	.word	0xe000e100
 8010fc8:	e000ed00 	.word	0xe000ed00

08010fcc <NVIC_EncodePriority>:
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b089      	sub	sp, #36	; 0x24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f003 0307 	and.w	r3, r3, #7
 8010fde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	f1c3 0307 	rsb	r3, r3, #7
 8010fe6:	2b04      	cmp	r3, #4
 8010fe8:	bf28      	it	cs
 8010fea:	2304      	movcs	r3, #4
 8010fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	2b06      	cmp	r3, #6
 8010ff4:	d902      	bls.n	8010ffc <NVIC_EncodePriority+0x30>
 8010ff6:	69fb      	ldr	r3, [r7, #28]
 8010ff8:	3b03      	subs	r3, #3
 8010ffa:	e000      	b.n	8010ffe <NVIC_EncodePriority+0x32>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011000:	f04f 32ff 	mov.w	r2, #4294967295
 8011004:	69bb      	ldr	r3, [r7, #24]
 8011006:	fa02 f303 	lsl.w	r3, r2, r3
 801100a:	43da      	mvns	r2, r3
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	401a      	ands	r2, r3
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011014:	f04f 31ff 	mov.w	r1, #4294967295
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	fa01 f303 	lsl.w	r3, r1, r3
 801101e:	43d9      	mvns	r1, r3
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011024:	4313      	orrs	r3, r2
}
 8011026:	4618      	mov	r0, r3
 8011028:	3724      	adds	r7, #36	; 0x24
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr

08011032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011032:	b580      	push	{r7, lr}
 8011034:	b082      	sub	sp, #8
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7ff ff28 	bl	8010e90 <__NVIC_SetPriorityGrouping>
}
 8011040:	bf00      	nop
 8011042:	3708      	adds	r7, #8
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b086      	sub	sp, #24
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
 8011054:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8011056:	f7ff ff3f 	bl	8010ed8 <__NVIC_GetPriorityGrouping>
 801105a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	68b9      	ldr	r1, [r7, #8]
 8011060:	6978      	ldr	r0, [r7, #20]
 8011062:	f7ff ffb3 	bl	8010fcc <NVIC_EncodePriority>
 8011066:	4602      	mov	r2, r0
 8011068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff ff82 	bl	8010f78 <__NVIC_SetPriority>
}
 8011074:	bf00      	nop
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}

0801107c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	4603      	mov	r3, r0
 8011084:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff ff32 	bl	8010ef4 <__NVIC_EnableIRQ>
}
 8011090:	bf00      	nop
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	4603      	mov	r3, r0
 80110a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80110a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff ff42 	bl	8010f30 <__NVIC_DisableIRQ>
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}

080110b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80110b4:	b480      	push	{r7}
 80110b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80110b8:	f3bf 8f5f 	dmb	sy
}
 80110bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80110be:	4b07      	ldr	r3, [pc, #28]	; (80110dc <HAL_MPU_Disable+0x28>)
 80110c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c2:	4a06      	ldr	r2, [pc, #24]	; (80110dc <HAL_MPU_Disable+0x28>)
 80110c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80110c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80110ca:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <HAL_MPU_Disable+0x2c>)
 80110cc:	2200      	movs	r2, #0
 80110ce:	605a      	str	r2, [r3, #4]
}
 80110d0:	bf00      	nop
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	e000ed00 	.word	0xe000ed00
 80110e0:	e000ed90 	.word	0xe000ed90

080110e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80110ec:	4a0b      	ldr	r2, [pc, #44]	; (801111c <HAL_MPU_Enable+0x38>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f043 0301 	orr.w	r3, r3, #1
 80110f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80110f6:	4b0a      	ldr	r3, [pc, #40]	; (8011120 <HAL_MPU_Enable+0x3c>)
 80110f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fa:	4a09      	ldr	r2, [pc, #36]	; (8011120 <HAL_MPU_Enable+0x3c>)
 80110fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011100:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011102:	f3bf 8f4f 	dsb	sy
}
 8011106:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011108:	f3bf 8f6f 	isb	sy
}
 801110c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801110e:	bf00      	nop
 8011110:	370c      	adds	r7, #12
 8011112:	46bd      	mov	sp, r7
 8011114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011118:	4770      	bx	lr
 801111a:	bf00      	nop
 801111c:	e000ed90 	.word	0xe000ed90
 8011120:	e000ed00 	.word	0xe000ed00

08011124 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	785a      	ldrb	r2, [r3, #1]
 8011130:	4b1d      	ldr	r3, [pc, #116]	; (80111a8 <HAL_MPU_ConfigRegion+0x84>)
 8011132:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d029      	beq.n	8011190 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 801113c:	4a1a      	ldr	r2, [pc, #104]	; (80111a8 <HAL_MPU_ConfigRegion+0x84>)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	7b1b      	ldrb	r3, [r3, #12]
 8011148:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	7adb      	ldrb	r3, [r3, #11]
 801114e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	7a9b      	ldrb	r3, [r3, #10]
 8011156:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8011158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	7b5b      	ldrb	r3, [r3, #13]
 801115e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8011160:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	7b9b      	ldrb	r3, [r3, #14]
 8011166:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8011168:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	7bdb      	ldrb	r3, [r3, #15]
 801116e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8011170:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	7a5b      	ldrb	r3, [r3, #9]
 8011176:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8011178:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7a1b      	ldrb	r3, [r3, #8]
 801117e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8011180:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	7812      	ldrb	r2, [r2, #0]
 8011186:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8011188:	4a07      	ldr	r2, [pc, #28]	; (80111a8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801118a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801118c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801118e:	e005      	b.n	801119c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8011190:	4b05      	ldr	r3, [pc, #20]	; (80111a8 <HAL_MPU_ConfigRegion+0x84>)
 8011192:	2200      	movs	r2, #0
 8011194:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8011196:	4b04      	ldr	r3, [pc, #16]	; (80111a8 <HAL_MPU_ConfigRegion+0x84>)
 8011198:	2200      	movs	r2, #0
 801119a:	611a      	str	r2, [r3, #16]
}
 801119c:	bf00      	nop
 801119e:	370c      	adds	r7, #12
 80111a0:	46bd      	mov	sp, r7
 80111a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a6:	4770      	bx	lr
 80111a8:	e000ed90 	.word	0xe000ed90

080111ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d101      	bne.n	80111be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80111ba:	2301      	movs	r3, #1
 80111bc:	e054      	b.n	8011268 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	7f5b      	ldrb	r3, [r3, #29]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d105      	bne.n	80111d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ef fe54 	bl	8000e7c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2202      	movs	r2, #2
 80111d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	791b      	ldrb	r3, [r3, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10c      	bne.n	80111fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a22      	ldr	r2, [pc, #136]	; (8011270 <HAL_CRC_Init+0xc4>)
 80111e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	689a      	ldr	r2, [r3, #8]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f022 0218 	bic.w	r2, r2, #24
 80111f8:	609a      	str	r2, [r3, #8]
 80111fa:	e00c      	b.n	8011216 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6899      	ldr	r1, [r3, #8]
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	461a      	mov	r2, r3
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 f834 	bl	8011274 <HAL_CRCEx_Polynomial_Set>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e028      	b.n	8011268 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	795b      	ldrb	r3, [r3, #5]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d105      	bne.n	801122a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	f04f 32ff 	mov.w	r2, #4294967295
 8011226:	611a      	str	r2, [r3, #16]
 8011228:	e004      	b.n	8011234 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	687a      	ldr	r2, [r7, #4]
 8011230:	6912      	ldr	r2, [r2, #16]
 8011232:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	695a      	ldr	r2, [r3, #20]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	699a      	ldr	r2, [r3, #24]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	430a      	orrs	r2, r1
 801125e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2201      	movs	r2, #1
 8011264:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	04c11db7 	.word	0x04c11db7

08011274 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011274:	b480      	push	{r7}
 8011276:	b087      	sub	sp, #28
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011280:	2300      	movs	r3, #0
 8011282:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011284:	231f      	movs	r3, #31
 8011286:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	f003 0301 	and.w	r3, r3, #1
 801128e:	2b00      	cmp	r3, #0
 8011290:	d102      	bne.n	8011298 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	75fb      	strb	r3, [r7, #23]
 8011296:	e063      	b.n	8011360 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8011298:	bf00      	nop
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	1e5a      	subs	r2, r3, #1
 801129e:	613a      	str	r2, [r7, #16]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d009      	beq.n	80112b8 <HAL_CRCEx_Polynomial_Set+0x44>
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	f003 031f 	and.w	r3, r3, #31
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	fa22 f303 	lsr.w	r3, r2, r3
 80112b0:	f003 0301 	and.w	r3, r3, #1
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0f0      	beq.n	801129a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2b18      	cmp	r3, #24
 80112bc:	d846      	bhi.n	801134c <HAL_CRCEx_Polynomial_Set+0xd8>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	08011353 	.word	0x08011353
 80112c8:	0801134d 	.word	0x0801134d
 80112cc:	0801134d 	.word	0x0801134d
 80112d0:	0801134d 	.word	0x0801134d
 80112d4:	0801134d 	.word	0x0801134d
 80112d8:	0801134d 	.word	0x0801134d
 80112dc:	0801134d 	.word	0x0801134d
 80112e0:	0801134d 	.word	0x0801134d
 80112e4:	08011341 	.word	0x08011341
 80112e8:	0801134d 	.word	0x0801134d
 80112ec:	0801134d 	.word	0x0801134d
 80112f0:	0801134d 	.word	0x0801134d
 80112f4:	0801134d 	.word	0x0801134d
 80112f8:	0801134d 	.word	0x0801134d
 80112fc:	0801134d 	.word	0x0801134d
 8011300:	0801134d 	.word	0x0801134d
 8011304:	08011335 	.word	0x08011335
 8011308:	0801134d 	.word	0x0801134d
 801130c:	0801134d 	.word	0x0801134d
 8011310:	0801134d 	.word	0x0801134d
 8011314:	0801134d 	.word	0x0801134d
 8011318:	0801134d 	.word	0x0801134d
 801131c:	0801134d 	.word	0x0801134d
 8011320:	0801134d 	.word	0x0801134d
 8011324:	08011329 	.word	0x08011329
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	2b06      	cmp	r3, #6
 801132c:	d913      	bls.n	8011356 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 801132e:	2301      	movs	r3, #1
 8011330:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8011332:	e010      	b.n	8011356 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	2b07      	cmp	r3, #7
 8011338:	d90f      	bls.n	801135a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 801133a:	2301      	movs	r3, #1
 801133c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 801133e:	e00c      	b.n	801135a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	2b0f      	cmp	r3, #15
 8011344:	d90b      	bls.n	801135e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8011346:	2301      	movs	r3, #1
 8011348:	75fb      	strb	r3, [r7, #23]
        }
        break;
 801134a:	e008      	b.n	801135e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 801134c:	2301      	movs	r3, #1
 801134e:	75fb      	strb	r3, [r7, #23]
        break;
 8011350:	e006      	b.n	8011360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8011352:	bf00      	nop
 8011354:	e004      	b.n	8011360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8011356:	bf00      	nop
 8011358:	e002      	b.n	8011360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 801135a:	bf00      	nop
 801135c:	e000      	b.n	8011360 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 801135e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8011360:	7dfb      	ldrb	r3, [r7, #23]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d10d      	bne.n	8011382 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	689b      	ldr	r3, [r3, #8]
 8011374:	f023 0118 	bic.w	r1, r3, #24
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	430a      	orrs	r2, r1
 8011380:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8011382:	7dfb      	ldrb	r3, [r7, #23]
}
 8011384:	4618      	mov	r0, r3
 8011386:	371c      	adds	r7, #28
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d101      	bne.n	80113a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 801139e:	2301      	movs	r3, #1
 80113a0:	e04f      	b.n	8011442 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f7ef fd82 	bl	8000ec0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2202      	movs	r2, #2
 80113c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	4b20      	ldr	r3, [pc, #128]	; (801144c <HAL_DMA2D_Init+0xbc>)
 80113cc:	4013      	ands	r3, r2
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	6851      	ldr	r1, [r2, #4]
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	69d2      	ldr	r2, [r2, #28]
 80113d6:	4311      	orrs	r1, r2
 80113d8:	687a      	ldr	r2, [r7, #4]
 80113da:	6812      	ldr	r2, [r2, #0]
 80113dc:	430b      	orrs	r3, r1
 80113de:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113e6:	4b1a      	ldr	r3, [pc, #104]	; (8011450 <HAL_DMA2D_Init+0xc0>)
 80113e8:	4013      	ands	r3, r2
 80113ea:	687a      	ldr	r2, [r7, #4]
 80113ec:	6891      	ldr	r1, [r2, #8]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	6992      	ldr	r2, [r2, #24]
 80113f2:	4311      	orrs	r1, r2
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	6812      	ldr	r2, [r2, #0]
 80113f8:	430b      	orrs	r3, r1
 80113fa:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011402:	4b14      	ldr	r3, [pc, #80]	; (8011454 <HAL_DMA2D_Init+0xc4>)
 8011404:	4013      	ands	r3, r2
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	68d1      	ldr	r1, [r2, #12]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	6812      	ldr	r2, [r2, #0]
 801140e:	430b      	orrs	r3, r1
 8011410:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011418:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	691b      	ldr	r3, [r3, #16]
 8011420:	051a      	lsls	r2, r3, #20
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	055b      	lsls	r3, r3, #21
 8011428:	431a      	orrs	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	430a      	orrs	r2, r1
 8011430:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	fff8ffbf 	.word	0xfff8ffbf
 8011450:	fffffef8 	.word	0xfffffef8
 8011454:	ffff0000 	.word	0xffff0000

08011458 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f003 0301 	and.w	r3, r3, #1
 8011476:	2b00      	cmp	r3, #0
 8011478:	d026      	beq.n	80114c8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011480:	2b00      	cmp	r3, #0
 8011482:	d021      	beq.n	80114c8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	681a      	ldr	r2, [r3, #0]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011492:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011498:	f043 0201 	orr.w	r2, r3, #1
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2201      	movs	r2, #1
 80114a6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2204      	movs	r2, #4
 80114ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d003      	beq.n	80114c8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f003 0320 	and.w	r3, r3, #32
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d026      	beq.n	8011520 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d021      	beq.n	8011520 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80114ea:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2220      	movs	r2, #32
 80114f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114f8:	f043 0202 	orr.w	r2, r3, #2
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2204      	movs	r2, #4
 8011504:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2200      	movs	r2, #0
 801150c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	d003      	beq.n	8011520 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f003 0308 	and.w	r3, r3, #8
 8011526:	2b00      	cmp	r3, #0
 8011528:	d026      	beq.n	8011578 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011530:	2b00      	cmp	r3, #0
 8011532:	d021      	beq.n	8011578 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011542:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2208      	movs	r2, #8
 801154a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011550:	f043 0204 	orr.w	r2, r3, #4
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2204      	movs	r2, #4
 801155c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2200      	movs	r2, #0
 8011564:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801156c:	2b00      	cmp	r3, #0
 801156e:	d003      	beq.n	8011578 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f003 0304 	and.w	r3, r3, #4
 801157e:	2b00      	cmp	r3, #0
 8011580:	d013      	beq.n	80115aa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00e      	beq.n	80115aa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801159a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2204      	movs	r2, #4
 80115a2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 f853 	bl	8011650 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f003 0302 	and.w	r3, r3, #2
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d024      	beq.n	80115fe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d01f      	beq.n	80115fe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80115cc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2202      	movs	r2, #2
 80115d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2201      	movs	r2, #1
 80115e2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6a1b      	ldr	r3, [r3, #32]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d003      	beq.n	80115fe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6a1b      	ldr	r3, [r3, #32]
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	f003 0310 	and.w	r3, r3, #16
 8011604:	2b00      	cmp	r3, #0
 8011606:	d01f      	beq.n	8011648 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801160e:	2b00      	cmp	r3, #0
 8011610:	d01a      	beq.n	8011648 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011620:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2210      	movs	r2, #16
 8011628:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 f80e 	bl	8011664 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8011648:	bf00      	nop
 801164a:	3710      	adds	r7, #16
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 801166c:	bf00      	nop
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011678:	b480      	push	{r7}
 801167a:	b089      	sub	sp, #36	; 0x24
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011682:	2300      	movs	r3, #0
 8011684:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011686:	4b89      	ldr	r3, [pc, #548]	; (80118ac <HAL_GPIO_Init+0x234>)
 8011688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801168a:	e194      	b.n	80119b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	681a      	ldr	r2, [r3, #0]
 8011690:	2101      	movs	r1, #1
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	fa01 f303 	lsl.w	r3, r1, r3
 8011698:	4013      	ands	r3, r2
 801169a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	f000 8186 	beq.w	80119b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	685b      	ldr	r3, [r3, #4]
 80116a8:	f003 0303 	and.w	r3, r3, #3
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d005      	beq.n	80116bc <HAL_GPIO_Init+0x44>
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	f003 0303 	and.w	r3, r3, #3
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	d130      	bne.n	801171e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	689b      	ldr	r3, [r3, #8]
 80116c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80116c2:	69fb      	ldr	r3, [r7, #28]
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	2203      	movs	r2, #3
 80116c8:	fa02 f303 	lsl.w	r3, r2, r3
 80116cc:	43db      	mvns	r3, r3
 80116ce:	69ba      	ldr	r2, [r7, #24]
 80116d0:	4013      	ands	r3, r2
 80116d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80116d4:	683b      	ldr	r3, [r7, #0]
 80116d6:	68da      	ldr	r2, [r3, #12]
 80116d8:	69fb      	ldr	r3, [r7, #28]
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	fa02 f303 	lsl.w	r3, r2, r3
 80116e0:	69ba      	ldr	r2, [r7, #24]
 80116e2:	4313      	orrs	r3, r2
 80116e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	69ba      	ldr	r2, [r7, #24]
 80116ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80116f2:	2201      	movs	r2, #1
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	fa02 f303 	lsl.w	r3, r2, r3
 80116fa:	43db      	mvns	r3, r3
 80116fc:	69ba      	ldr	r2, [r7, #24]
 80116fe:	4013      	ands	r3, r2
 8011700:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	091b      	lsrs	r3, r3, #4
 8011708:	f003 0201 	and.w	r2, r3, #1
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	fa02 f303 	lsl.w	r3, r2, r3
 8011712:	69ba      	ldr	r2, [r7, #24]
 8011714:	4313      	orrs	r3, r2
 8011716:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	69ba      	ldr	r2, [r7, #24]
 801171c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	f003 0303 	and.w	r3, r3, #3
 8011726:	2b03      	cmp	r3, #3
 8011728:	d017      	beq.n	801175a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	68db      	ldr	r3, [r3, #12]
 801172e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	005b      	lsls	r3, r3, #1
 8011734:	2203      	movs	r2, #3
 8011736:	fa02 f303 	lsl.w	r3, r2, r3
 801173a:	43db      	mvns	r3, r3
 801173c:	69ba      	ldr	r2, [r7, #24]
 801173e:	4013      	ands	r3, r2
 8011740:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	689a      	ldr	r2, [r3, #8]
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	005b      	lsls	r3, r3, #1
 801174a:	fa02 f303 	lsl.w	r3, r2, r3
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	4313      	orrs	r3, r2
 8011752:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	69ba      	ldr	r2, [r7, #24]
 8011758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	f003 0303 	and.w	r3, r3, #3
 8011762:	2b02      	cmp	r3, #2
 8011764:	d123      	bne.n	80117ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	08da      	lsrs	r2, r3, #3
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	3208      	adds	r2, #8
 801176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	f003 0307 	and.w	r3, r3, #7
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	220f      	movs	r2, #15
 801177e:	fa02 f303 	lsl.w	r3, r2, r3
 8011782:	43db      	mvns	r3, r3
 8011784:	69ba      	ldr	r2, [r7, #24]
 8011786:	4013      	ands	r3, r2
 8011788:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	691a      	ldr	r2, [r3, #16]
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	f003 0307 	and.w	r3, r3, #7
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	fa02 f303 	lsl.w	r3, r2, r3
 801179a:	69ba      	ldr	r2, [r7, #24]
 801179c:	4313      	orrs	r3, r2
 801179e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	08da      	lsrs	r2, r3, #3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3208      	adds	r2, #8
 80117a8:	69b9      	ldr	r1, [r7, #24]
 80117aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	005b      	lsls	r3, r3, #1
 80117b8:	2203      	movs	r2, #3
 80117ba:	fa02 f303 	lsl.w	r3, r2, r3
 80117be:	43db      	mvns	r3, r3
 80117c0:	69ba      	ldr	r2, [r7, #24]
 80117c2:	4013      	ands	r3, r2
 80117c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	f003 0203 	and.w	r2, r3, #3
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	fa02 f303 	lsl.w	r3, r2, r3
 80117d6:	69ba      	ldr	r2, [r7, #24]
 80117d8:	4313      	orrs	r3, r2
 80117da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	69ba      	ldr	r2, [r7, #24]
 80117e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	f000 80e0 	beq.w	80119b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80117f0:	4b2f      	ldr	r3, [pc, #188]	; (80118b0 <HAL_GPIO_Init+0x238>)
 80117f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80117f6:	4a2e      	ldr	r2, [pc, #184]	; (80118b0 <HAL_GPIO_Init+0x238>)
 80117f8:	f043 0302 	orr.w	r3, r3, #2
 80117fc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8011800:	4b2b      	ldr	r3, [pc, #172]	; (80118b0 <HAL_GPIO_Init+0x238>)
 8011802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8011806:	f003 0302 	and.w	r3, r3, #2
 801180a:	60fb      	str	r3, [r7, #12]
 801180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801180e:	4a29      	ldr	r2, [pc, #164]	; (80118b4 <HAL_GPIO_Init+0x23c>)
 8011810:	69fb      	ldr	r3, [r7, #28]
 8011812:	089b      	lsrs	r3, r3, #2
 8011814:	3302      	adds	r3, #2
 8011816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	f003 0303 	and.w	r3, r3, #3
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	220f      	movs	r2, #15
 8011826:	fa02 f303 	lsl.w	r3, r2, r3
 801182a:	43db      	mvns	r3, r3
 801182c:	69ba      	ldr	r2, [r7, #24]
 801182e:	4013      	ands	r3, r2
 8011830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	4a20      	ldr	r2, [pc, #128]	; (80118b8 <HAL_GPIO_Init+0x240>)
 8011836:	4293      	cmp	r3, r2
 8011838:	d052      	beq.n	80118e0 <HAL_GPIO_Init+0x268>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4a1f      	ldr	r2, [pc, #124]	; (80118bc <HAL_GPIO_Init+0x244>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d031      	beq.n	80118a6 <HAL_GPIO_Init+0x22e>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	4a1e      	ldr	r2, [pc, #120]	; (80118c0 <HAL_GPIO_Init+0x248>)
 8011846:	4293      	cmp	r3, r2
 8011848:	d02b      	beq.n	80118a2 <HAL_GPIO_Init+0x22a>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4a1d      	ldr	r2, [pc, #116]	; (80118c4 <HAL_GPIO_Init+0x24c>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d025      	beq.n	801189e <HAL_GPIO_Init+0x226>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4a1c      	ldr	r2, [pc, #112]	; (80118c8 <HAL_GPIO_Init+0x250>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d01f      	beq.n	801189a <HAL_GPIO_Init+0x222>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4a1b      	ldr	r2, [pc, #108]	; (80118cc <HAL_GPIO_Init+0x254>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d019      	beq.n	8011896 <HAL_GPIO_Init+0x21e>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4a1a      	ldr	r2, [pc, #104]	; (80118d0 <HAL_GPIO_Init+0x258>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d013      	beq.n	8011892 <HAL_GPIO_Init+0x21a>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a19      	ldr	r2, [pc, #100]	; (80118d4 <HAL_GPIO_Init+0x25c>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d00d      	beq.n	801188e <HAL_GPIO_Init+0x216>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4a18      	ldr	r2, [pc, #96]	; (80118d8 <HAL_GPIO_Init+0x260>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d007      	beq.n	801188a <HAL_GPIO_Init+0x212>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a17      	ldr	r2, [pc, #92]	; (80118dc <HAL_GPIO_Init+0x264>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d101      	bne.n	8011886 <HAL_GPIO_Init+0x20e>
 8011882:	2309      	movs	r3, #9
 8011884:	e02d      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 8011886:	230a      	movs	r3, #10
 8011888:	e02b      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 801188a:	2308      	movs	r3, #8
 801188c:	e029      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 801188e:	2307      	movs	r3, #7
 8011890:	e027      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 8011892:	2306      	movs	r3, #6
 8011894:	e025      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 8011896:	2305      	movs	r3, #5
 8011898:	e023      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 801189a:	2304      	movs	r3, #4
 801189c:	e021      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 801189e:	2303      	movs	r3, #3
 80118a0:	e01f      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 80118a2:	2302      	movs	r3, #2
 80118a4:	e01d      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 80118a6:	2301      	movs	r3, #1
 80118a8:	e01b      	b.n	80118e2 <HAL_GPIO_Init+0x26a>
 80118aa:	bf00      	nop
 80118ac:	58000080 	.word	0x58000080
 80118b0:	58024400 	.word	0x58024400
 80118b4:	58000400 	.word	0x58000400
 80118b8:	58020000 	.word	0x58020000
 80118bc:	58020400 	.word	0x58020400
 80118c0:	58020800 	.word	0x58020800
 80118c4:	58020c00 	.word	0x58020c00
 80118c8:	58021000 	.word	0x58021000
 80118cc:	58021400 	.word	0x58021400
 80118d0:	58021800 	.word	0x58021800
 80118d4:	58021c00 	.word	0x58021c00
 80118d8:	58022000 	.word	0x58022000
 80118dc:	58022400 	.word	0x58022400
 80118e0:	2300      	movs	r3, #0
 80118e2:	69fa      	ldr	r2, [r7, #28]
 80118e4:	f002 0203 	and.w	r2, r2, #3
 80118e8:	0092      	lsls	r2, r2, #2
 80118ea:	4093      	lsls	r3, r2
 80118ec:	69ba      	ldr	r2, [r7, #24]
 80118ee:	4313      	orrs	r3, r2
 80118f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80118f2:	4938      	ldr	r1, [pc, #224]	; (80119d4 <HAL_GPIO_Init+0x35c>)
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	089b      	lsrs	r3, r3, #2
 80118f8:	3302      	adds	r3, #2
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	43db      	mvns	r3, r3
 801190c:	69ba      	ldr	r2, [r7, #24]
 801190e:	4013      	ands	r3, r2
 8011910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801191a:	2b00      	cmp	r3, #0
 801191c:	d003      	beq.n	8011926 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801191e:	69ba      	ldr	r2, [r7, #24]
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	4313      	orrs	r3, r2
 8011924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8011926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	43db      	mvns	r3, r3
 801193a:	69ba      	ldr	r2, [r7, #24]
 801193c:	4013      	ands	r3, r2
 801193e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	685b      	ldr	r3, [r3, #4]
 8011944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011948:	2b00      	cmp	r3, #0
 801194a:	d003      	beq.n	8011954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801194c:	69ba      	ldr	r2, [r7, #24]
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	4313      	orrs	r3, r2
 8011952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8011954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	43db      	mvns	r3, r3
 8011966:	69ba      	ldr	r2, [r7, #24]
 8011968:	4013      	ands	r3, r2
 801196a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011974:	2b00      	cmp	r3, #0
 8011976:	d003      	beq.n	8011980 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8011978:	69ba      	ldr	r2, [r7, #24]
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	4313      	orrs	r3, r2
 801197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	69ba      	ldr	r2, [r7, #24]
 8011984:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801198c:	693b      	ldr	r3, [r7, #16]
 801198e:	43db      	mvns	r3, r3
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	4013      	ands	r3, r2
 8011994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d003      	beq.n	80119aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80119a2:	69ba      	ldr	r2, [r7, #24]
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	69ba      	ldr	r2, [r7, #24]
 80119ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	3301      	adds	r3, #1
 80119b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	fa22 f303 	lsr.w	r3, r2, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f47f ae63 	bne.w	801168c <HAL_GPIO_Init+0x14>
  }
}
 80119c6:	bf00      	nop
 80119c8:	bf00      	nop
 80119ca:	3724      	adds	r7, #36	; 0x24
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	58000400 	.word	0x58000400

080119d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80119d8:	b480      	push	{r7}
 80119da:	b087      	sub	sp, #28
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80119e2:	2300      	movs	r3, #0
 80119e4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80119e6:	4b75      	ldr	r3, [pc, #468]	; (8011bbc <HAL_GPIO_DeInit+0x1e4>)
 80119e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80119ea:	e0d9      	b.n	8011ba0 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80119ec:	2201      	movs	r2, #1
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	fa02 f303 	lsl.w	r3, r2, r3
 80119f4:	683a      	ldr	r2, [r7, #0]
 80119f6:	4013      	ands	r3, r2
 80119f8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f000 80cc 	beq.w	8011b9a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011a02:	4a6f      	ldr	r2, [pc, #444]	; (8011bc0 <HAL_GPIO_DeInit+0x1e8>)
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	089b      	lsrs	r3, r3, #2
 8011a08:	3302      	adds	r3, #2
 8011a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a0e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	f003 0303 	and.w	r3, r3, #3
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	220f      	movs	r2, #15
 8011a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a1e:	68ba      	ldr	r2, [r7, #8]
 8011a20:	4013      	ands	r3, r2
 8011a22:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a67      	ldr	r2, [pc, #412]	; (8011bc4 <HAL_GPIO_DeInit+0x1ec>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d037      	beq.n	8011a9c <HAL_GPIO_DeInit+0xc4>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	4a66      	ldr	r2, [pc, #408]	; (8011bc8 <HAL_GPIO_DeInit+0x1f0>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d031      	beq.n	8011a98 <HAL_GPIO_DeInit+0xc0>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4a65      	ldr	r2, [pc, #404]	; (8011bcc <HAL_GPIO_DeInit+0x1f4>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d02b      	beq.n	8011a94 <HAL_GPIO_DeInit+0xbc>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	4a64      	ldr	r2, [pc, #400]	; (8011bd0 <HAL_GPIO_DeInit+0x1f8>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d025      	beq.n	8011a90 <HAL_GPIO_DeInit+0xb8>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	4a63      	ldr	r2, [pc, #396]	; (8011bd4 <HAL_GPIO_DeInit+0x1fc>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d01f      	beq.n	8011a8c <HAL_GPIO_DeInit+0xb4>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4a62      	ldr	r2, [pc, #392]	; (8011bd8 <HAL_GPIO_DeInit+0x200>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d019      	beq.n	8011a88 <HAL_GPIO_DeInit+0xb0>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	4a61      	ldr	r2, [pc, #388]	; (8011bdc <HAL_GPIO_DeInit+0x204>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d013      	beq.n	8011a84 <HAL_GPIO_DeInit+0xac>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	4a60      	ldr	r2, [pc, #384]	; (8011be0 <HAL_GPIO_DeInit+0x208>)
 8011a60:	4293      	cmp	r3, r2
 8011a62:	d00d      	beq.n	8011a80 <HAL_GPIO_DeInit+0xa8>
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	4a5f      	ldr	r2, [pc, #380]	; (8011be4 <HAL_GPIO_DeInit+0x20c>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d007      	beq.n	8011a7c <HAL_GPIO_DeInit+0xa4>
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	4a5e      	ldr	r2, [pc, #376]	; (8011be8 <HAL_GPIO_DeInit+0x210>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d101      	bne.n	8011a78 <HAL_GPIO_DeInit+0xa0>
 8011a74:	2309      	movs	r3, #9
 8011a76:	e012      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a78:	230a      	movs	r3, #10
 8011a7a:	e010      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a7c:	2308      	movs	r3, #8
 8011a7e:	e00e      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a80:	2307      	movs	r3, #7
 8011a82:	e00c      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a84:	2306      	movs	r3, #6
 8011a86:	e00a      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a88:	2305      	movs	r3, #5
 8011a8a:	e008      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a8c:	2304      	movs	r3, #4
 8011a8e:	e006      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a90:	2303      	movs	r3, #3
 8011a92:	e004      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a94:	2302      	movs	r3, #2
 8011a96:	e002      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a98:	2301      	movs	r3, #1
 8011a9a:	e000      	b.n	8011a9e <HAL_GPIO_DeInit+0xc6>
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	f002 0203 	and.w	r2, r2, #3
 8011aa4:	0092      	lsls	r2, r2, #2
 8011aa6:	4093      	lsls	r3, r2
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d136      	bne.n	8011b1c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	43db      	mvns	r3, r3
 8011ab6:	401a      	ands	r2, r3
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	685a      	ldr	r2, [r3, #4]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	43db      	mvns	r3, r3
 8011ac4:	401a      	ands	r2, r3
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	43db      	mvns	r3, r3
 8011ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011ad8:	4013      	ands	r3, r2
 8011ada:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	43db      	mvns	r3, r3
 8011ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8011aea:	4013      	ands	r3, r2
 8011aec:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	f003 0303 	and.w	r3, r3, #3
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	220f      	movs	r2, #15
 8011af8:	fa02 f303 	lsl.w	r3, r2, r3
 8011afc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011afe:	4a30      	ldr	r2, [pc, #192]	; (8011bc0 <HAL_GPIO_DeInit+0x1e8>)
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	089b      	lsrs	r3, r3, #2
 8011b04:	3302      	adds	r3, #2
 8011b06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	43da      	mvns	r2, r3
 8011b0e:	482c      	ldr	r0, [pc, #176]	; (8011bc0 <HAL_GPIO_DeInit+0x1e8>)
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	089b      	lsrs	r3, r3, #2
 8011b14:	400a      	ands	r2, r1
 8011b16:	3302      	adds	r3, #2
 8011b18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681a      	ldr	r2, [r3, #0]
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	005b      	lsls	r3, r3, #1
 8011b24:	2103      	movs	r1, #3
 8011b26:	fa01 f303 	lsl.w	r3, r1, r3
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011b30:	697b      	ldr	r3, [r7, #20]
 8011b32:	08da      	lsrs	r2, r3, #3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	3208      	adds	r2, #8
 8011b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	f003 0307 	and.w	r3, r3, #7
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	220f      	movs	r2, #15
 8011b46:	fa02 f303 	lsl.w	r3, r2, r3
 8011b4a:	43db      	mvns	r3, r3
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	08d2      	lsrs	r2, r2, #3
 8011b50:	4019      	ands	r1, r3
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	3208      	adds	r2, #8
 8011b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	68da      	ldr	r2, [r3, #12]
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	005b      	lsls	r3, r3, #1
 8011b62:	2103      	movs	r1, #3
 8011b64:	fa01 f303 	lsl.w	r3, r1, r3
 8011b68:	43db      	mvns	r3, r3
 8011b6a:	401a      	ands	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	2101      	movs	r1, #1
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	fa01 f303 	lsl.w	r3, r1, r3
 8011b7c:	43db      	mvns	r3, r3
 8011b7e:	401a      	ands	r2, r3
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	689a      	ldr	r2, [r3, #8]
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	005b      	lsls	r3, r3, #1
 8011b8c:	2103      	movs	r1, #3
 8011b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8011b92:	43db      	mvns	r3, r3
 8011b94:	401a      	ands	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011ba0:	683a      	ldr	r2, [r7, #0]
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f47f af1f 	bne.w	80119ec <HAL_GPIO_DeInit+0x14>
  }
}
 8011bae:	bf00      	nop
 8011bb0:	bf00      	nop
 8011bb2:	371c      	adds	r7, #28
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bba:	4770      	bx	lr
 8011bbc:	58000080 	.word	0x58000080
 8011bc0:	58000400 	.word	0x58000400
 8011bc4:	58020000 	.word	0x58020000
 8011bc8:	58020400 	.word	0x58020400
 8011bcc:	58020800 	.word	0x58020800
 8011bd0:	58020c00 	.word	0x58020c00
 8011bd4:	58021000 	.word	0x58021000
 8011bd8:	58021400 	.word	0x58021400
 8011bdc:	58021800 	.word	0x58021800
 8011be0:	58021c00 	.word	0x58021c00
 8011be4:	58022000 	.word	0x58022000
 8011be8:	58022400 	.word	0x58022400

08011bec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b085      	sub	sp, #20
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	691a      	ldr	r2, [r3, #16]
 8011bfc:	887b      	ldrh	r3, [r7, #2]
 8011bfe:	4013      	ands	r3, r2
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011c04:	2301      	movs	r3, #1
 8011c06:	73fb      	strb	r3, [r7, #15]
 8011c08:	e001      	b.n	8011c0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3714      	adds	r7, #20
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	460b      	mov	r3, r1
 8011c26:	807b      	strh	r3, [r7, #2]
 8011c28:	4613      	mov	r3, r2
 8011c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011c2c:	787b      	ldrb	r3, [r7, #1]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d003      	beq.n	8011c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011c32:	887a      	ldrh	r2, [r7, #2]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011c38:	e003      	b.n	8011c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011c3a:	887b      	ldrh	r3, [r7, #2]
 8011c3c:	041a      	lsls	r2, r3, #16
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	619a      	str	r2, [r3, #24]
}
 8011c42:	bf00      	nop
 8011c44:	370c      	adds	r7, #12
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
	...

08011c50 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b083      	sub	sp, #12
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011c58:	4a08      	ldr	r2, [pc, #32]	; (8011c7c <HAL_HSEM_FastTake+0x2c>)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	3320      	adds	r3, #32
 8011c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c62:	4a07      	ldr	r2, [pc, #28]	; (8011c80 <HAL_HSEM_FastTake+0x30>)
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d101      	bne.n	8011c6c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e000      	b.n	8011c6e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011c6c:	2301      	movs	r3, #1
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	370c      	adds	r7, #12
 8011c72:	46bd      	mov	sp, r7
 8011c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	58026400 	.word	0x58026400
 8011c80:	80000300 	.word	0x80000300

08011c84 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b083      	sub	sp, #12
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8011c8e:	4906      	ldr	r1, [pc, #24]	; (8011ca8 <HAL_HSEM_Release+0x24>)
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr
 8011ca8:	58026400 	.word	0x58026400

08011cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b082      	sub	sp, #8
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d101      	bne.n	8011cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	e07f      	b.n	8011dbe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d106      	bne.n	8011cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 f8a9 	bl	8011e2a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2224      	movs	r2, #36	; 0x24
 8011cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	f022 0201 	bic.w	r2, r2, #1
 8011cee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	685a      	ldr	r2, [r3, #4]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8011cfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689a      	ldr	r2, [r3, #8]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011d0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	2b01      	cmp	r3, #1
 8011d14:	d107      	bne.n	8011d26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	689a      	ldr	r2, [r3, #8]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011d22:	609a      	str	r2, [r3, #8]
 8011d24:	e006      	b.n	8011d34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	689a      	ldr	r2, [r3, #8]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8011d32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d104      	bne.n	8011d46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6859      	ldr	r1, [r3, #4]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	4b1d      	ldr	r3, [pc, #116]	; (8011dc8 <HAL_I2C_Init+0x11c>)
 8011d52:	430b      	orrs	r3, r1
 8011d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	68da      	ldr	r2, [r3, #12]
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	691a      	ldr	r2, [r3, #16]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	695b      	ldr	r3, [r3, #20]
 8011d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	699b      	ldr	r3, [r3, #24]
 8011d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	430a      	orrs	r2, r1
 8011d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	69d9      	ldr	r1, [r3, #28]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6a1a      	ldr	r2, [r3, #32]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	430a      	orrs	r2, r1
 8011d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f042 0201 	orr.w	r2, r2, #1
 8011d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2200      	movs	r2, #0
 8011da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	2220      	movs	r2, #32
 8011daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2200      	movs	r2, #0
 8011db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2200      	movs	r2, #0
 8011db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8011dbc:	2300      	movs	r3, #0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	02008000 	.word	0x02008000

08011dcc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d101      	bne.n	8011dde <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	e021      	b.n	8011e22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2224      	movs	r2, #36	; 0x24
 8011de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f022 0201 	bic.w	r2, r2, #1
 8011df4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 f821 	bl	8011e3e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2200      	movs	r2, #0
 8011e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3708      	adds	r7, #8
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011e32:	bf00      	nop
 8011e34:	370c      	adds	r7, #12
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr

08011e3e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011e3e:	b480      	push	{r7}
 8011e40:	b083      	sub	sp, #12
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011e46:	bf00      	nop
 8011e48:	370c      	adds	r7, #12
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr
	...

08011e54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b088      	sub	sp, #32
 8011e58:	af02      	add	r7, sp, #8
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	4608      	mov	r0, r1
 8011e5e:	4611      	mov	r1, r2
 8011e60:	461a      	mov	r2, r3
 8011e62:	4603      	mov	r3, r0
 8011e64:	817b      	strh	r3, [r7, #10]
 8011e66:	460b      	mov	r3, r1
 8011e68:	813b      	strh	r3, [r7, #8]
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	2b20      	cmp	r3, #32
 8011e78:	f040 80f9 	bne.w	801206e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011e7c:	6a3b      	ldr	r3, [r7, #32]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d002      	beq.n	8011e88 <HAL_I2C_Mem_Write+0x34>
 8011e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d105      	bne.n	8011e94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8011e90:	2301      	movs	r3, #1
 8011e92:	e0ed      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e9a:	2b01      	cmp	r3, #1
 8011e9c:	d101      	bne.n	8011ea2 <HAL_I2C_Mem_Write+0x4e>
 8011e9e:	2302      	movs	r3, #2
 8011ea0:	e0e6      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011eaa:	f7fe ffd9 	bl	8010e60 <HAL_GetTick>
 8011eae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	2319      	movs	r3, #25
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011ebc:	68f8      	ldr	r0, [r7, #12]
 8011ebe:	f000 fadd 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d001      	beq.n	8011ecc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011ec8:	2301      	movs	r3, #1
 8011eca:	e0d1      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2221      	movs	r2, #33	; 0x21
 8011ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2240      	movs	r2, #64	; 0x40
 8011ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6a3a      	ldr	r2, [r7, #32]
 8011ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011ef4:	88f8      	ldrh	r0, [r7, #6]
 8011ef6:	893a      	ldrh	r2, [r7, #8]
 8011ef8:	8979      	ldrh	r1, [r7, #10]
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	9301      	str	r3, [sp, #4]
 8011efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	4603      	mov	r3, r0
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f000 f9ed 	bl	80122e4 <I2C_RequestMemoryWrite>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d005      	beq.n	8011f1c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	e0a9      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	2bff      	cmp	r3, #255	; 0xff
 8011f24:	d90e      	bls.n	8011f44 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	22ff      	movs	r2, #255	; 0xff
 8011f2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f30:	b2da      	uxtb	r2, r3
 8011f32:	8979      	ldrh	r1, [r7, #10]
 8011f34:	2300      	movs	r3, #0
 8011f36:	9300      	str	r3, [sp, #0]
 8011f38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f000 fc57 	bl	80127f0 <I2C_TransferConfig>
 8011f42:	e00f      	b.n	8011f64 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f52:	b2da      	uxtb	r2, r3
 8011f54:	8979      	ldrh	r1, [r7, #10]
 8011f56:	2300      	movs	r3, #0
 8011f58:	9300      	str	r3, [sp, #0]
 8011f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f000 fc46 	bl	80127f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011f64:	697a      	ldr	r2, [r7, #20]
 8011f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f000 fad6 	bl	801251a <I2C_WaitOnTXISFlagUntilTimeout>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011f74:	2301      	movs	r3, #1
 8011f76:	e07b      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f7c:	781a      	ldrb	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f88:	1c5a      	adds	r2, r3, #1
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	3b01      	subs	r3, #1
 8011f96:	b29a      	uxth	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d034      	beq.n	801201c <HAL_I2C_Mem_Write+0x1c8>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d130      	bne.n	801201c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	2180      	movs	r1, #128	; 0x80
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	f000 fa59 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d001      	beq.n	8011fd4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	e04d      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	2bff      	cmp	r3, #255	; 0xff
 8011fdc:	d90e      	bls.n	8011ffc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	22ff      	movs	r2, #255	; 0xff
 8011fe2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fe8:	b2da      	uxtb	r2, r3
 8011fea:	8979      	ldrh	r1, [r7, #10]
 8011fec:	2300      	movs	r3, #0
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f000 fbfb 	bl	80127f0 <I2C_TransferConfig>
 8011ffa:	e00f      	b.n	801201c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012000:	b29a      	uxth	r2, r3
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801200a:	b2da      	uxtb	r2, r3
 801200c:	8979      	ldrh	r1, [r7, #10]
 801200e:	2300      	movs	r3, #0
 8012010:	9300      	str	r3, [sp, #0]
 8012012:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012016:	68f8      	ldr	r0, [r7, #12]
 8012018:	f000 fbea 	bl	80127f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012020:	b29b      	uxth	r3, r3
 8012022:	2b00      	cmp	r3, #0
 8012024:	d19e      	bne.n	8011f64 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012026:	697a      	ldr	r2, [r7, #20]
 8012028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f000 fabc 	bl	80125a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d001      	beq.n	801203a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8012036:	2301      	movs	r3, #1
 8012038:	e01a      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	2220      	movs	r2, #32
 8012040:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	6859      	ldr	r1, [r3, #4]
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	681a      	ldr	r2, [r3, #0]
 801204c:	4b0a      	ldr	r3, [pc, #40]	; (8012078 <HAL_I2C_Mem_Write+0x224>)
 801204e:	400b      	ands	r3, r1
 8012050:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2220      	movs	r2, #32
 8012056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2200      	movs	r2, #0
 801205e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	2200      	movs	r2, #0
 8012066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801206a:	2300      	movs	r3, #0
 801206c:	e000      	b.n	8012070 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801206e:	2302      	movs	r3, #2
  }
}
 8012070:	4618      	mov	r0, r3
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	fe00e800 	.word	0xfe00e800

0801207c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b088      	sub	sp, #32
 8012080:	af02      	add	r7, sp, #8
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	4608      	mov	r0, r1
 8012086:	4611      	mov	r1, r2
 8012088:	461a      	mov	r2, r3
 801208a:	4603      	mov	r3, r0
 801208c:	817b      	strh	r3, [r7, #10]
 801208e:	460b      	mov	r3, r1
 8012090:	813b      	strh	r3, [r7, #8]
 8012092:	4613      	mov	r3, r2
 8012094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801209c:	b2db      	uxtb	r3, r3
 801209e:	2b20      	cmp	r3, #32
 80120a0:	f040 80fd 	bne.w	801229e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80120a4:	6a3b      	ldr	r3, [r7, #32]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d002      	beq.n	80120b0 <HAL_I2C_Mem_Read+0x34>
 80120aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d105      	bne.n	80120bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80120b8:	2301      	movs	r3, #1
 80120ba:	e0f1      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d101      	bne.n	80120ca <HAL_I2C_Mem_Read+0x4e>
 80120c6:	2302      	movs	r3, #2
 80120c8:	e0ea      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	2201      	movs	r2, #1
 80120ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80120d2:	f7fe fec5 	bl	8010e60 <HAL_GetTick>
 80120d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	9300      	str	r3, [sp, #0]
 80120dc:	2319      	movs	r3, #25
 80120de:	2201      	movs	r2, #1
 80120e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f000 f9c9 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 80120ea:	4603      	mov	r3, r0
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d001      	beq.n	80120f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80120f0:	2301      	movs	r3, #1
 80120f2:	e0d5      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2222      	movs	r2, #34	; 0x22
 80120f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2240      	movs	r2, #64	; 0x40
 8012100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	2200      	movs	r2, #0
 8012108:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6a3a      	ldr	r2, [r7, #32]
 801210e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012114:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2200      	movs	r2, #0
 801211a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801211c:	88f8      	ldrh	r0, [r7, #6]
 801211e:	893a      	ldrh	r2, [r7, #8]
 8012120:	8979      	ldrh	r1, [r7, #10]
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	9301      	str	r3, [sp, #4]
 8012126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012128:	9300      	str	r3, [sp, #0]
 801212a:	4603      	mov	r3, r0
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f000 f92d 	bl	801238c <I2C_RequestMemoryRead>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d005      	beq.n	8012144 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2200      	movs	r2, #0
 801213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8012140:	2301      	movs	r3, #1
 8012142:	e0ad      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012148:	b29b      	uxth	r3, r3
 801214a:	2bff      	cmp	r3, #255	; 0xff
 801214c:	d90e      	bls.n	801216c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	22ff      	movs	r2, #255	; 0xff
 8012152:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012158:	b2da      	uxtb	r2, r3
 801215a:	8979      	ldrh	r1, [r7, #10]
 801215c:	4b52      	ldr	r3, [pc, #328]	; (80122a8 <HAL_I2C_Mem_Read+0x22c>)
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f000 fb43 	bl	80127f0 <I2C_TransferConfig>
 801216a:	e00f      	b.n	801218c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012170:	b29a      	uxth	r2, r3
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801217a:	b2da      	uxtb	r2, r3
 801217c:	8979      	ldrh	r1, [r7, #10]
 801217e:	4b4a      	ldr	r3, [pc, #296]	; (80122a8 <HAL_I2C_Mem_Read+0x22c>)
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f000 fb32 	bl	80127f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012192:	2200      	movs	r2, #0
 8012194:	2104      	movs	r1, #4
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f000 f970 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 801219c:	4603      	mov	r3, r0
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d001      	beq.n	80121a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80121a2:	2301      	movs	r3, #1
 80121a4:	e07c      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b0:	b2d2      	uxtb	r2, r2
 80121b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	1c5a      	adds	r2, r3, #1
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121c2:	3b01      	subs	r3, #1
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	3b01      	subs	r3, #1
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80121dc:	b29b      	uxth	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d034      	beq.n	801224c <HAL_I2C_Mem_Read+0x1d0>
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d130      	bne.n	801224c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f0:	2200      	movs	r2, #0
 80121f2:	2180      	movs	r1, #128	; 0x80
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f000 f941 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 80121fa:	4603      	mov	r3, r0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d001      	beq.n	8012204 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8012200:	2301      	movs	r3, #1
 8012202:	e04d      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012208:	b29b      	uxth	r3, r3
 801220a:	2bff      	cmp	r3, #255	; 0xff
 801220c:	d90e      	bls.n	801222c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	22ff      	movs	r2, #255	; 0xff
 8012212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012218:	b2da      	uxtb	r2, r3
 801221a:	8979      	ldrh	r1, [r7, #10]
 801221c:	2300      	movs	r3, #0
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f000 fae3 	bl	80127f0 <I2C_TransferConfig>
 801222a:	e00f      	b.n	801224c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012230:	b29a      	uxth	r2, r3
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801223a:	b2da      	uxtb	r2, r3
 801223c:	8979      	ldrh	r1, [r7, #10]
 801223e:	2300      	movs	r3, #0
 8012240:	9300      	str	r3, [sp, #0]
 8012242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f000 fad2 	bl	80127f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012250:	b29b      	uxth	r3, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	d19a      	bne.n	801218c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012256:	697a      	ldr	r2, [r7, #20]
 8012258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f000 f9a4 	bl	80125a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012260:	4603      	mov	r3, r0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d001      	beq.n	801226a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8012266:	2301      	movs	r3, #1
 8012268:	e01a      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2220      	movs	r2, #32
 8012270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	6859      	ldr	r1, [r3, #4]
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	4b0b      	ldr	r3, [pc, #44]	; (80122ac <HAL_I2C_Mem_Read+0x230>)
 801227e:	400b      	ands	r3, r1
 8012280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2220      	movs	r2, #32
 8012286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	2200      	movs	r2, #0
 801228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	e000      	b.n	80122a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801229e:	2302      	movs	r3, #2
  }
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3718      	adds	r7, #24
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	80002400 	.word	0x80002400
 80122ac:	fe00e800 	.word	0xfe00e800

080122b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80122b0:	b480      	push	{r7}
 80122b2:	b083      	sub	sp, #12
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80122be:	b2db      	uxtb	r3, r3
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80122d8:	4618      	mov	r0, r3
 80122da:	370c      	adds	r7, #12
 80122dc:	46bd      	mov	sp, r7
 80122de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e2:	4770      	bx	lr

080122e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b086      	sub	sp, #24
 80122e8:	af02      	add	r7, sp, #8
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	461a      	mov	r2, r3
 80122f2:	4603      	mov	r3, r0
 80122f4:	817b      	strh	r3, [r7, #10]
 80122f6:	460b      	mov	r3, r1
 80122f8:	813b      	strh	r3, [r7, #8]
 80122fa:	4613      	mov	r3, r2
 80122fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80122fe:	88fb      	ldrh	r3, [r7, #6]
 8012300:	b2da      	uxtb	r2, r3
 8012302:	8979      	ldrh	r1, [r7, #10]
 8012304:	4b20      	ldr	r3, [pc, #128]	; (8012388 <I2C_RequestMemoryWrite+0xa4>)
 8012306:	9300      	str	r3, [sp, #0]
 8012308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801230c:	68f8      	ldr	r0, [r7, #12]
 801230e:	f000 fa6f 	bl	80127f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012312:	69fa      	ldr	r2, [r7, #28]
 8012314:	69b9      	ldr	r1, [r7, #24]
 8012316:	68f8      	ldr	r0, [r7, #12]
 8012318:	f000 f8ff 	bl	801251a <I2C_WaitOnTXISFlagUntilTimeout>
 801231c:	4603      	mov	r3, r0
 801231e:	2b00      	cmp	r3, #0
 8012320:	d001      	beq.n	8012326 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8012322:	2301      	movs	r3, #1
 8012324:	e02c      	b.n	8012380 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012326:	88fb      	ldrh	r3, [r7, #6]
 8012328:	2b01      	cmp	r3, #1
 801232a:	d105      	bne.n	8012338 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801232c:	893b      	ldrh	r3, [r7, #8]
 801232e:	b2da      	uxtb	r2, r3
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	629a      	str	r2, [r3, #40]	; 0x28
 8012336:	e015      	b.n	8012364 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012338:	893b      	ldrh	r3, [r7, #8]
 801233a:	0a1b      	lsrs	r3, r3, #8
 801233c:	b29b      	uxth	r3, r3
 801233e:	b2da      	uxtb	r2, r3
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012346:	69fa      	ldr	r2, [r7, #28]
 8012348:	69b9      	ldr	r1, [r7, #24]
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f000 f8e5 	bl	801251a <I2C_WaitOnTXISFlagUntilTimeout>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8012356:	2301      	movs	r3, #1
 8012358:	e012      	b.n	8012380 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801235a:	893b      	ldrh	r3, [r7, #8]
 801235c:	b2da      	uxtb	r2, r3
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	2200      	movs	r2, #0
 801236c:	2180      	movs	r1, #128	; 0x80
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f000 f884 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d001      	beq.n	801237e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801237a:	2301      	movs	r3, #1
 801237c:	e000      	b.n	8012380 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801237e:	2300      	movs	r3, #0
}
 8012380:	4618      	mov	r0, r3
 8012382:	3710      	adds	r7, #16
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}
 8012388:	80002000 	.word	0x80002000

0801238c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b086      	sub	sp, #24
 8012390:	af02      	add	r7, sp, #8
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	4608      	mov	r0, r1
 8012396:	4611      	mov	r1, r2
 8012398:	461a      	mov	r2, r3
 801239a:	4603      	mov	r3, r0
 801239c:	817b      	strh	r3, [r7, #10]
 801239e:	460b      	mov	r3, r1
 80123a0:	813b      	strh	r3, [r7, #8]
 80123a2:	4613      	mov	r3, r2
 80123a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80123a6:	88fb      	ldrh	r3, [r7, #6]
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	8979      	ldrh	r1, [r7, #10]
 80123ac:	4b20      	ldr	r3, [pc, #128]	; (8012430 <I2C_RequestMemoryRead+0xa4>)
 80123ae:	9300      	str	r3, [sp, #0]
 80123b0:	2300      	movs	r3, #0
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	f000 fa1c 	bl	80127f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80123b8:	69fa      	ldr	r2, [r7, #28]
 80123ba:	69b9      	ldr	r1, [r7, #24]
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f8ac 	bl	801251a <I2C_WaitOnTXISFlagUntilTimeout>
 80123c2:	4603      	mov	r3, r0
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d001      	beq.n	80123cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80123c8:	2301      	movs	r3, #1
 80123ca:	e02c      	b.n	8012426 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80123cc:	88fb      	ldrh	r3, [r7, #6]
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d105      	bne.n	80123de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80123d2:	893b      	ldrh	r3, [r7, #8]
 80123d4:	b2da      	uxtb	r2, r3
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	629a      	str	r2, [r3, #40]	; 0x28
 80123dc:	e015      	b.n	801240a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80123de:	893b      	ldrh	r3, [r7, #8]
 80123e0:	0a1b      	lsrs	r3, r3, #8
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	b2da      	uxtb	r2, r3
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80123ec:	69fa      	ldr	r2, [r7, #28]
 80123ee:	69b9      	ldr	r1, [r7, #24]
 80123f0:	68f8      	ldr	r0, [r7, #12]
 80123f2:	f000 f892 	bl	801251a <I2C_WaitOnTXISFlagUntilTimeout>
 80123f6:	4603      	mov	r3, r0
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d001      	beq.n	8012400 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80123fc:	2301      	movs	r3, #1
 80123fe:	e012      	b.n	8012426 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012400:	893b      	ldrh	r3, [r7, #8]
 8012402:	b2da      	uxtb	r2, r3
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	2200      	movs	r2, #0
 8012412:	2140      	movs	r1, #64	; 0x40
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 f831 	bl	801247c <I2C_WaitOnFlagUntilTimeout>
 801241a:	4603      	mov	r3, r0
 801241c:	2b00      	cmp	r3, #0
 801241e:	d001      	beq.n	8012424 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8012420:	2301      	movs	r3, #1
 8012422:	e000      	b.n	8012426 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8012424:	2300      	movs	r3, #0
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	80002000 	.word	0x80002000

08012434 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	f003 0302 	and.w	r3, r3, #2
 8012446:	2b02      	cmp	r3, #2
 8012448:	d103      	bne.n	8012452 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2200      	movs	r2, #0
 8012450:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	699b      	ldr	r3, [r3, #24]
 8012458:	f003 0301 	and.w	r3, r3, #1
 801245c:	2b01      	cmp	r3, #1
 801245e:	d007      	beq.n	8012470 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	699a      	ldr	r2, [r3, #24]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	f042 0201 	orr.w	r2, r2, #1
 801246e:	619a      	str	r2, [r3, #24]
  }
}
 8012470:	bf00      	nop
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr

0801247c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b084      	sub	sp, #16
 8012480:	af00      	add	r7, sp, #0
 8012482:	60f8      	str	r0, [r7, #12]
 8012484:	60b9      	str	r1, [r7, #8]
 8012486:	603b      	str	r3, [r7, #0]
 8012488:	4613      	mov	r3, r2
 801248a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801248c:	e031      	b.n	80124f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012494:	d02d      	beq.n	80124f2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012496:	f7fe fce3 	bl	8010e60 <HAL_GetTick>
 801249a:	4602      	mov	r2, r0
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	1ad3      	subs	r3, r2, r3
 80124a0:	683a      	ldr	r2, [r7, #0]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d302      	bcc.n	80124ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d122      	bne.n	80124f2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	699a      	ldr	r2, [r3, #24]
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	4013      	ands	r3, r2
 80124b6:	68ba      	ldr	r2, [r7, #8]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	bf0c      	ite	eq
 80124bc:	2301      	moveq	r3, #1
 80124be:	2300      	movne	r3, #0
 80124c0:	b2db      	uxtb	r3, r3
 80124c2:	461a      	mov	r2, r3
 80124c4:	79fb      	ldrb	r3, [r7, #7]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d113      	bne.n	80124f2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124ce:	f043 0220 	orr.w	r2, r3, #32
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	2220      	movs	r2, #32
 80124da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2200      	movs	r2, #0
 80124e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2200      	movs	r2, #0
 80124ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80124ee:	2301      	movs	r3, #1
 80124f0:	e00f      	b.n	8012512 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	699a      	ldr	r2, [r3, #24]
 80124f8:	68bb      	ldr	r3, [r7, #8]
 80124fa:	4013      	ands	r3, r2
 80124fc:	68ba      	ldr	r2, [r7, #8]
 80124fe:	429a      	cmp	r2, r3
 8012500:	bf0c      	ite	eq
 8012502:	2301      	moveq	r3, #1
 8012504:	2300      	movne	r3, #0
 8012506:	b2db      	uxtb	r3, r3
 8012508:	461a      	mov	r2, r3
 801250a:	79fb      	ldrb	r3, [r7, #7]
 801250c:	429a      	cmp	r2, r3
 801250e:	d0be      	beq.n	801248e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012510:	2300      	movs	r3, #0
}
 8012512:	4618      	mov	r0, r3
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}

0801251a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801251a:	b580      	push	{r7, lr}
 801251c:	b084      	sub	sp, #16
 801251e:	af00      	add	r7, sp, #0
 8012520:	60f8      	str	r0, [r7, #12]
 8012522:	60b9      	str	r1, [r7, #8]
 8012524:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012526:	e033      	b.n	8012590 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68b9      	ldr	r1, [r7, #8]
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f000 f87f 	bl	8012630 <I2C_IsErrorOccurred>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	d001      	beq.n	801253c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012538:	2301      	movs	r3, #1
 801253a:	e031      	b.n	80125a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012542:	d025      	beq.n	8012590 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012544:	f7fe fc8c 	bl	8010e60 <HAL_GetTick>
 8012548:	4602      	mov	r2, r0
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	1ad3      	subs	r3, r2, r3
 801254e:	68ba      	ldr	r2, [r7, #8]
 8012550:	429a      	cmp	r2, r3
 8012552:	d302      	bcc.n	801255a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d11a      	bne.n	8012590 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	699b      	ldr	r3, [r3, #24]
 8012560:	f003 0302 	and.w	r3, r3, #2
 8012564:	2b02      	cmp	r3, #2
 8012566:	d013      	beq.n	8012590 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801256c:	f043 0220 	orr.w	r2, r3, #32
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2220      	movs	r2, #32
 8012578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2200      	movs	r2, #0
 8012580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2200      	movs	r2, #0
 8012588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 801258c:	2301      	movs	r3, #1
 801258e:	e007      	b.n	80125a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	699b      	ldr	r3, [r3, #24]
 8012596:	f003 0302 	and.w	r3, r3, #2
 801259a:	2b02      	cmp	r3, #2
 801259c:	d1c4      	bne.n	8012528 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3710      	adds	r7, #16
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}

080125a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	60f8      	str	r0, [r7, #12]
 80125b0:	60b9      	str	r1, [r7, #8]
 80125b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125b4:	e02f      	b.n	8012616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	68b9      	ldr	r1, [r7, #8]
 80125ba:	68f8      	ldr	r0, [r7, #12]
 80125bc:	f000 f838 	bl	8012630 <I2C_IsErrorOccurred>
 80125c0:	4603      	mov	r3, r0
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d001      	beq.n	80125ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80125c6:	2301      	movs	r3, #1
 80125c8:	e02d      	b.n	8012626 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125ca:	f7fe fc49 	bl	8010e60 <HAL_GetTick>
 80125ce:	4602      	mov	r2, r0
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	1ad3      	subs	r3, r2, r3
 80125d4:	68ba      	ldr	r2, [r7, #8]
 80125d6:	429a      	cmp	r2, r3
 80125d8:	d302      	bcc.n	80125e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d11a      	bne.n	8012616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	699b      	ldr	r3, [r3, #24]
 80125e6:	f003 0320 	and.w	r3, r3, #32
 80125ea:	2b20      	cmp	r3, #32
 80125ec:	d013      	beq.n	8012616 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125f2:	f043 0220 	orr.w	r2, r3, #32
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2220      	movs	r2, #32
 80125fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2200      	movs	r2, #0
 8012606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	2200      	movs	r2, #0
 801260e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8012612:	2301      	movs	r3, #1
 8012614:	e007      	b.n	8012626 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	699b      	ldr	r3, [r3, #24]
 801261c:	f003 0320 	and.w	r3, r3, #32
 8012620:	2b20      	cmp	r3, #32
 8012622:	d1c8      	bne.n	80125b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3710      	adds	r7, #16
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
	...

08012630 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b08a      	sub	sp, #40	; 0x28
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801263c:	2300      	movs	r3, #0
 801263e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	699b      	ldr	r3, [r3, #24]
 8012648:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801264a:	2300      	movs	r3, #0
 801264c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	f003 0310 	and.w	r3, r3, #16
 8012658:	2b00      	cmp	r3, #0
 801265a:	d068      	beq.n	801272e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2210      	movs	r2, #16
 8012662:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8012664:	e049      	b.n	80126fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801266c:	d045      	beq.n	80126fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801266e:	f7fe fbf7 	bl	8010e60 <HAL_GetTick>
 8012672:	4602      	mov	r2, r0
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	68ba      	ldr	r2, [r7, #8]
 801267a:	429a      	cmp	r2, r3
 801267c:	d302      	bcc.n	8012684 <I2C_IsErrorOccurred+0x54>
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d13a      	bne.n	80126fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801268e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012696:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	699b      	ldr	r3, [r3, #24]
 801269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80126a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126a6:	d121      	bne.n	80126ec <I2C_IsErrorOccurred+0xbc>
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80126ae:	d01d      	beq.n	80126ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80126b0:	7cfb      	ldrb	r3, [r7, #19]
 80126b2:	2b20      	cmp	r3, #32
 80126b4:	d01a      	beq.n	80126ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	685a      	ldr	r2, [r3, #4]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80126c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80126c6:	f7fe fbcb 	bl	8010e60 <HAL_GetTick>
 80126ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126cc:	e00e      	b.n	80126ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80126ce:	f7fe fbc7 	bl	8010e60 <HAL_GetTick>
 80126d2:	4602      	mov	r2, r0
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	2b19      	cmp	r3, #25
 80126da:	d907      	bls.n	80126ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	f043 0320 	orr.w	r3, r3, #32
 80126e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80126ea:	e006      	b.n	80126fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	699b      	ldr	r3, [r3, #24]
 80126f2:	f003 0320 	and.w	r3, r3, #32
 80126f6:	2b20      	cmp	r3, #32
 80126f8:	d1e9      	bne.n	80126ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	f003 0320 	and.w	r3, r3, #32
 8012704:	2b20      	cmp	r3, #32
 8012706:	d003      	beq.n	8012710 <I2C_IsErrorOccurred+0xe0>
 8012708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801270c:	2b00      	cmp	r3, #0
 801270e:	d0aa      	beq.n	8012666 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012714:	2b00      	cmp	r3, #0
 8012716:	d103      	bne.n	8012720 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2220      	movs	r2, #32
 801271e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	f043 0304 	orr.w	r3, r3, #4
 8012726:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	699b      	ldr	r3, [r3, #24]
 8012734:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00b      	beq.n	8012758 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8012740:	6a3b      	ldr	r3, [r7, #32]
 8012742:	f043 0301 	orr.w	r3, r3, #1
 8012746:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012750:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012752:	2301      	movs	r3, #1
 8012754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801275e:	2b00      	cmp	r3, #0
 8012760:	d00b      	beq.n	801277a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8012762:	6a3b      	ldr	r3, [r7, #32]
 8012764:	f043 0308 	orr.w	r3, r3, #8
 8012768:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012772:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012774:	2301      	movs	r3, #1
 8012776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012780:	2b00      	cmp	r3, #0
 8012782:	d00b      	beq.n	801279c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012784:	6a3b      	ldr	r3, [r7, #32]
 8012786:	f043 0302 	orr.w	r3, r3, #2
 801278a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012794:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012796:	2301      	movs	r3, #1
 8012798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801279c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d01c      	beq.n	80127de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	f7ff fe45 	bl	8012434 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	6859      	ldr	r1, [r3, #4]
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	681a      	ldr	r2, [r3, #0]
 80127b4:	4b0d      	ldr	r3, [pc, #52]	; (80127ec <I2C_IsErrorOccurred+0x1bc>)
 80127b6:	400b      	ands	r3, r1
 80127b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127be:	6a3b      	ldr	r3, [r7, #32]
 80127c0:	431a      	orrs	r2, r3
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2220      	movs	r2, #32
 80127ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2200      	movs	r2, #0
 80127d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80127de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3728      	adds	r7, #40	; 0x28
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	fe00e800 	.word	0xfe00e800

080127f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80127f0:	b480      	push	{r7}
 80127f2:	b087      	sub	sp, #28
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	607b      	str	r3, [r7, #4]
 80127fa:	460b      	mov	r3, r1
 80127fc:	817b      	strh	r3, [r7, #10]
 80127fe:	4613      	mov	r3, r2
 8012800:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012802:	897b      	ldrh	r3, [r7, #10]
 8012804:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012808:	7a7b      	ldrb	r3, [r7, #9]
 801280a:	041b      	lsls	r3, r3, #16
 801280c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012810:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012816:	6a3b      	ldr	r3, [r7, #32]
 8012818:	4313      	orrs	r3, r2
 801281a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801281e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	685a      	ldr	r2, [r3, #4]
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	0d5b      	lsrs	r3, r3, #21
 801282a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801282e:	4b08      	ldr	r3, [pc, #32]	; (8012850 <I2C_TransferConfig+0x60>)
 8012830:	430b      	orrs	r3, r1
 8012832:	43db      	mvns	r3, r3
 8012834:	ea02 0103 	and.w	r1, r2, r3
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	697a      	ldr	r2, [r7, #20]
 801283e:	430a      	orrs	r2, r1
 8012840:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8012842:	bf00      	nop
 8012844:	371c      	adds	r7, #28
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop
 8012850:	03ff63ff 	.word	0x03ff63ff

08012854 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012864:	b2db      	uxtb	r3, r3
 8012866:	2b20      	cmp	r3, #32
 8012868:	d138      	bne.n	80128dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012870:	2b01      	cmp	r3, #1
 8012872:	d101      	bne.n	8012878 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012874:	2302      	movs	r3, #2
 8012876:	e032      	b.n	80128de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2201      	movs	r2, #1
 801287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2224      	movs	r2, #36	; 0x24
 8012884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	f022 0201 	bic.w	r2, r2, #1
 8012896:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	681a      	ldr	r2, [r3, #0]
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80128a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	6819      	ldr	r1, [r3, #0]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	683a      	ldr	r2, [r7, #0]
 80128b4:	430a      	orrs	r2, r1
 80128b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	f042 0201 	orr.w	r2, r2, #1
 80128c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2220      	movs	r2, #32
 80128cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80128d8:	2300      	movs	r3, #0
 80128da:	e000      	b.n	80128de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80128dc:	2302      	movs	r3, #2
  }
}
 80128de:	4618      	mov	r0, r3
 80128e0:	370c      	adds	r7, #12
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80128ea:	b480      	push	{r7}
 80128ec:	b085      	sub	sp, #20
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
 80128f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	2b20      	cmp	r3, #32
 80128fe:	d139      	bne.n	8012974 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012906:	2b01      	cmp	r3, #1
 8012908:	d101      	bne.n	801290e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801290a:	2302      	movs	r3, #2
 801290c:	e033      	b.n	8012976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2201      	movs	r2, #1
 8012912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2224      	movs	r2, #36	; 0x24
 801291a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f022 0201 	bic.w	r2, r2, #1
 801292c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801293c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	021b      	lsls	r3, r3, #8
 8012942:	68fa      	ldr	r2, [r7, #12]
 8012944:	4313      	orrs	r3, r2
 8012946:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68fa      	ldr	r2, [r7, #12]
 801294e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f042 0201 	orr.w	r2, r2, #1
 801295e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2220      	movs	r2, #32
 8012964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2200      	movs	r2, #0
 801296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8012970:	2300      	movs	r3, #0
 8012972:	e000      	b.n	8012976 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012974:	2302      	movs	r3, #2
  }
}
 8012976:	4618      	mov	r0, r3
 8012978:	3714      	adds	r7, #20
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr
	...

08012984 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d101      	bne.n	8012996 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8012992:	2301      	movs	r3, #1
 8012994:	e0bf      	b.n	8012b16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d106      	bne.n	80129b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2200      	movs	r2, #0
 80129a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7ee fab0 	bl	8000f10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2202      	movs	r2, #2
 80129b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	699a      	ldr	r2, [r3, #24]
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80129c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6999      	ldr	r1, [r3, #24]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	685a      	ldr	r2, [r3, #4]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	689b      	ldr	r3, [r3, #8]
 80129d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	691b      	ldr	r3, [r3, #16]
 80129e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	430a      	orrs	r2, r1
 80129ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	6899      	ldr	r1, [r3, #8]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681a      	ldr	r2, [r3, #0]
 80129f6:	4b4a      	ldr	r3, [pc, #296]	; (8012b20 <HAL_LTDC_Init+0x19c>)
 80129f8:	400b      	ands	r3, r1
 80129fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	695b      	ldr	r3, [r3, #20]
 8012a00:	041b      	lsls	r3, r3, #16
 8012a02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	6899      	ldr	r1, [r3, #8]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	699a      	ldr	r2, [r3, #24]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	431a      	orrs	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	430a      	orrs	r2, r1
 8012a18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	68d9      	ldr	r1, [r3, #12]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681a      	ldr	r2, [r3, #0]
 8012a24:	4b3e      	ldr	r3, [pc, #248]	; (8012b20 <HAL_LTDC_Init+0x19c>)
 8012a26:	400b      	ands	r3, r1
 8012a28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	69db      	ldr	r3, [r3, #28]
 8012a2e:	041b      	lsls	r3, r3, #16
 8012a30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	68d9      	ldr	r1, [r3, #12]
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	6a1a      	ldr	r2, [r3, #32]
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	431a      	orrs	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	430a      	orrs	r2, r1
 8012a46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	6919      	ldr	r1, [r3, #16]
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	4b33      	ldr	r3, [pc, #204]	; (8012b20 <HAL_LTDC_Init+0x19c>)
 8012a54:	400b      	ands	r3, r1
 8012a56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5c:	041b      	lsls	r3, r3, #16
 8012a5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	6919      	ldr	r1, [r3, #16]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	431a      	orrs	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	430a      	orrs	r2, r1
 8012a74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	6959      	ldr	r1, [r3, #20]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681a      	ldr	r2, [r3, #0]
 8012a80:	4b27      	ldr	r3, [pc, #156]	; (8012b20 <HAL_LTDC_Init+0x19c>)
 8012a82:	400b      	ands	r3, r1
 8012a84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a8a:	041b      	lsls	r3, r3, #16
 8012a8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	6959      	ldr	r1, [r3, #20]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	431a      	orrs	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	430a      	orrs	r2, r1
 8012aa2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012aaa:	021b      	lsls	r3, r3, #8
 8012aac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8012ab4:	041b      	lsls	r3, r3, #16
 8012ab6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8012ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8012ace:	68ba      	ldr	r2, [r7, #8]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8012ada:	431a      	orrs	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	430a      	orrs	r2, r1
 8012ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f042 0206 	orr.w	r2, r2, #6
 8012af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	699a      	ldr	r2, [r3, #24]
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f042 0201 	orr.w	r2, r2, #1
 8012b02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2200      	movs	r2, #0
 8012b08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2201      	movs	r2, #1
 8012b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8012b14:	2300      	movs	r3, #0
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3710      	adds	r7, #16
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	f000f800 	.word	0xf000f800

08012b24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f003 0304 	and.w	r3, r3, #4
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d023      	beq.n	8012b8e <HAL_LTDC_IRQHandler+0x6a>
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	f003 0304 	and.w	r3, r3, #4
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d01e      	beq.n	8012b8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f022 0204 	bic.w	r2, r2, #4
 8012b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2204      	movs	r2, #4
 8012b66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012b6e:	f043 0201 	orr.w	r2, r3, #1
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2204      	movs	r2, #4
 8012b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012b88:	6878      	ldr	r0, [r7, #4]
 8012b8a:	f000 f86f 	bl	8012c6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	f003 0302 	and.w	r3, r3, #2
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d023      	beq.n	8012be0 <HAL_LTDC_IRQHandler+0xbc>
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	f003 0302 	and.w	r3, r3, #2
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d01e      	beq.n	8012be0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f022 0202 	bic.w	r2, r2, #2
 8012bb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012bc0:	f043 0202 	orr.w	r2, r3, #2
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2204      	movs	r2, #4
 8012bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f000 f846 	bl	8012c6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f003 0301 	and.w	r3, r3, #1
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d01b      	beq.n	8012c22 <HAL_LTDC_IRQHandler+0xfe>
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d016      	beq.n	8012c22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	f022 0201 	bic.w	r2, r2, #1
 8012c02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2201      	movs	r2, #1
 8012c10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2200      	movs	r2, #0
 8012c18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f7f0 ffb9 	bl	8003b94 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	f003 0308 	and.w	r3, r3, #8
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d01b      	beq.n	8012c64 <HAL_LTDC_IRQHandler+0x140>
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	f003 0308 	and.w	r3, r3, #8
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d016      	beq.n	8012c64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f022 0208 	bic.w	r2, r2, #8
 8012c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	2208      	movs	r2, #8
 8012c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 f80e 	bl	8012c80 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012c64:	bf00      	nop
 8012c66:	3710      	adds	r7, #16
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd80      	pop	{r7, pc}

08012c6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012c74:	bf00      	nop
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012c88:	bf00      	nop
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr

08012c94 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012c94:	b5b0      	push	{r4, r5, r7, lr}
 8012c96:	b084      	sub	sp, #16
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	60f8      	str	r0, [r7, #12]
 8012c9c:	60b9      	str	r1, [r7, #8]
 8012c9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d101      	bne.n	8012cae <HAL_LTDC_ConfigLayer+0x1a>
 8012caa:	2302      	movs	r3, #2
 8012cac:	e02c      	b.n	8012d08 <HAL_LTDC_ConfigLayer+0x74>
 8012cae:	68fb      	ldr	r3, [r7, #12]
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2202      	movs	r2, #2
 8012cba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012cbe:	68fa      	ldr	r2, [r7, #12]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2134      	movs	r1, #52	; 0x34
 8012cc4:	fb01 f303 	mul.w	r3, r1, r3
 8012cc8:	4413      	add	r3, r2
 8012cca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012cce:	68bb      	ldr	r3, [r7, #8]
 8012cd0:	4614      	mov	r4, r2
 8012cd2:	461d      	mov	r5, r3
 8012cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	68b9      	ldr	r1, [r7, #8]
 8012ce8:	68f8      	ldr	r0, [r7, #12]
 8012cea:	f000 f849 	bl	8012d80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2201      	movs	r2, #1
 8012cfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2200      	movs	r2, #0
 8012d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012d06:	2300      	movs	r3, #0
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3710      	adds	r7, #16
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bdb0      	pop	{r4, r5, r7, pc}

08012d10 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8012d20:	2b01      	cmp	r3, #1
 8012d22:	d101      	bne.n	8012d28 <HAL_LTDC_ProgramLineEvent+0x18>
 8012d24:	2302      	movs	r3, #2
 8012d26:	e023      	b.n	8012d70 <HAL_LTDC_ProgramLineEvent+0x60>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2202      	movs	r2, #2
 8012d34:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f022 0201 	bic.w	r2, r2, #1
 8012d46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012d48:	4a0c      	ldr	r2, [pc, #48]	; (8012d7c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f042 0201 	orr.w	r2, r2, #1
 8012d5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2201      	movs	r2, #1
 8012d62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	370c      	adds	r7, #12
 8012d74:	46bd      	mov	sp, r7
 8012d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d7a:	4770      	bx	lr
 8012d7c:	50001000 	.word	0x50001000

08012d80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012d80:	b480      	push	{r7}
 8012d82:	b089      	sub	sp, #36	; 0x24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012d8c:	68bb      	ldr	r3, [r7, #8]
 8012d8e:	685a      	ldr	r2, [r3, #4]
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	68db      	ldr	r3, [r3, #12]
 8012d96:	0c1b      	lsrs	r3, r3, #16
 8012d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d9c:	4413      	add	r3, r2
 8012d9e:	041b      	lsls	r3, r3, #16
 8012da0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	461a      	mov	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	01db      	lsls	r3, r3, #7
 8012dac:	4413      	add	r3, r2
 8012dae:	3384      	adds	r3, #132	; 0x84
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	6812      	ldr	r2, [r2, #0]
 8012db6:	4611      	mov	r1, r2
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	01d2      	lsls	r2, r2, #7
 8012dbc:	440a      	add	r2, r1
 8012dbe:	3284      	adds	r2, #132	; 0x84
 8012dc0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012dc4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	0c1b      	lsrs	r3, r3, #16
 8012dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012dd6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012dd8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4619      	mov	r1, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	01db      	lsls	r3, r3, #7
 8012de4:	440b      	add	r3, r1
 8012de6:	3384      	adds	r3, #132	; 0x84
 8012de8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012dea:	69fb      	ldr	r3, [r7, #28]
 8012dec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012dee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	68da      	ldr	r2, [r3, #12]
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012dfe:	4413      	add	r3, r2
 8012e00:	041b      	lsls	r3, r3, #16
 8012e02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	461a      	mov	r2, r3
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	01db      	lsls	r3, r3, #7
 8012e0e:	4413      	add	r3, r2
 8012e10:	3384      	adds	r3, #132	; 0x84
 8012e12:	689b      	ldr	r3, [r3, #8]
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	6812      	ldr	r2, [r2, #0]
 8012e18:	4611      	mov	r1, r2
 8012e1a:	687a      	ldr	r2, [r7, #4]
 8012e1c:	01d2      	lsls	r2, r2, #7
 8012e1e:	440a      	add	r2, r1
 8012e20:	3284      	adds	r2, #132	; 0x84
 8012e22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8012e26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	689a      	ldr	r2, [r3, #8]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e36:	4413      	add	r3, r2
 8012e38:	1c5a      	adds	r2, r3, #1
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	01db      	lsls	r3, r3, #7
 8012e44:	440b      	add	r3, r1
 8012e46:	3384      	adds	r3, #132	; 0x84
 8012e48:	4619      	mov	r1, r3
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	4313      	orrs	r3, r2
 8012e4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	461a      	mov	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	01db      	lsls	r3, r3, #7
 8012e5a:	4413      	add	r3, r2
 8012e5c:	3384      	adds	r3, #132	; 0x84
 8012e5e:	691b      	ldr	r3, [r3, #16]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	6812      	ldr	r2, [r2, #0]
 8012e64:	4611      	mov	r1, r2
 8012e66:	687a      	ldr	r2, [r7, #4]
 8012e68:	01d2      	lsls	r2, r2, #7
 8012e6a:	440a      	add	r2, r1
 8012e6c:	3284      	adds	r2, #132	; 0x84
 8012e6e:	f023 0307 	bic.w	r3, r3, #7
 8012e72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	461a      	mov	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	01db      	lsls	r3, r3, #7
 8012e7e:	4413      	add	r3, r2
 8012e80:	3384      	adds	r3, #132	; 0x84
 8012e82:	461a      	mov	r2, r3
 8012e84:	68bb      	ldr	r3, [r7, #8]
 8012e86:	691b      	ldr	r3, [r3, #16]
 8012e88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8012e8a:	68bb      	ldr	r3, [r7, #8]
 8012e8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012e90:	021b      	lsls	r3, r3, #8
 8012e92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012e9a:	041b      	lsls	r3, r3, #16
 8012e9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	699b      	ldr	r3, [r3, #24]
 8012ea2:	061b      	lsls	r3, r3, #24
 8012ea4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	461a      	mov	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	01db      	lsls	r3, r3, #7
 8012eb0:	4413      	add	r3, r2
 8012eb2:	3384      	adds	r3, #132	; 0x84
 8012eb4:	699b      	ldr	r3, [r3, #24]
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	01db      	lsls	r3, r3, #7
 8012ec0:	4413      	add	r3, r2
 8012ec2:	3384      	adds	r3, #132	; 0x84
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	69fb      	ldr	r3, [r7, #28]
 8012ed4:	431a      	orrs	r2, r3
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	431a      	orrs	r2, r3
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	4619      	mov	r1, r3
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	01db      	lsls	r3, r3, #7
 8012ee4:	440b      	add	r3, r1
 8012ee6:	3384      	adds	r3, #132	; 0x84
 8012ee8:	4619      	mov	r1, r3
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	4313      	orrs	r3, r2
 8012eee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	461a      	mov	r2, r3
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	01db      	lsls	r3, r3, #7
 8012efa:	4413      	add	r3, r2
 8012efc:	3384      	adds	r3, #132	; 0x84
 8012efe:	695b      	ldr	r3, [r3, #20]
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	6812      	ldr	r2, [r2, #0]
 8012f04:	4611      	mov	r1, r2
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	01d2      	lsls	r2, r2, #7
 8012f0a:	440a      	add	r2, r1
 8012f0c:	3284      	adds	r2, #132	; 0x84
 8012f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8012f12:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	461a      	mov	r2, r3
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	01db      	lsls	r3, r3, #7
 8012f1e:	4413      	add	r3, r2
 8012f20:	3384      	adds	r3, #132	; 0x84
 8012f22:	461a      	mov	r2, r3
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	695b      	ldr	r3, [r3, #20]
 8012f28:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	461a      	mov	r2, r3
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	01db      	lsls	r3, r3, #7
 8012f34:	4413      	add	r3, r2
 8012f36:	3384      	adds	r3, #132	; 0x84
 8012f38:	69da      	ldr	r2, [r3, #28]
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	01db      	lsls	r3, r3, #7
 8012f44:	440b      	add	r3, r1
 8012f46:	3384      	adds	r3, #132	; 0x84
 8012f48:	4619      	mov	r1, r3
 8012f4a:	4b58      	ldr	r3, [pc, #352]	; (80130ac <LTDC_SetConfig+0x32c>)
 8012f4c:	4013      	ands	r3, r2
 8012f4e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	69da      	ldr	r2, [r3, #28]
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	6a1b      	ldr	r3, [r3, #32]
 8012f58:	68f9      	ldr	r1, [r7, #12]
 8012f5a:	6809      	ldr	r1, [r1, #0]
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	6879      	ldr	r1, [r7, #4]
 8012f60:	01c9      	lsls	r1, r1, #7
 8012f62:	4401      	add	r1, r0
 8012f64:	3184      	adds	r1, #132	; 0x84
 8012f66:	4313      	orrs	r3, r2
 8012f68:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	01db      	lsls	r3, r3, #7
 8012f74:	4413      	add	r3, r2
 8012f76:	3384      	adds	r3, #132	; 0x84
 8012f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	01db      	lsls	r3, r3, #7
 8012f84:	4413      	add	r3, r2
 8012f86:	3384      	adds	r3, #132	; 0x84
 8012f88:	461a      	mov	r2, r3
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	461a      	mov	r2, r3
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	01db      	lsls	r3, r3, #7
 8012f98:	4413      	add	r3, r2
 8012f9a:	3384      	adds	r3, #132	; 0x84
 8012f9c:	461a      	mov	r2, r3
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	691b      	ldr	r3, [r3, #16]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d102      	bne.n	8012fb2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8012fac:	2304      	movs	r3, #4
 8012fae:	61fb      	str	r3, [r7, #28]
 8012fb0:	e01b      	b.n	8012fea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	691b      	ldr	r3, [r3, #16]
 8012fb6:	2b01      	cmp	r3, #1
 8012fb8:	d102      	bne.n	8012fc0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8012fba:	2303      	movs	r3, #3
 8012fbc:	61fb      	str	r3, [r7, #28]
 8012fbe:	e014      	b.n	8012fea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	2b04      	cmp	r3, #4
 8012fc6:	d00b      	beq.n	8012fe0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8012fcc:	2b02      	cmp	r3, #2
 8012fce:	d007      	beq.n	8012fe0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8012fd4:	2b03      	cmp	r3, #3
 8012fd6:	d003      	beq.n	8012fe0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8012fdc:	2b07      	cmp	r3, #7
 8012fde:	d102      	bne.n	8012fe6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8012fe0:	2302      	movs	r3, #2
 8012fe2:	61fb      	str	r3, [r7, #28]
 8012fe4:	e001      	b.n	8012fea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	01db      	lsls	r3, r3, #7
 8012ff4:	4413      	add	r3, r2
 8012ff6:	3384      	adds	r3, #132	; 0x84
 8012ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ffa:	68fa      	ldr	r2, [r7, #12]
 8012ffc:	6812      	ldr	r2, [r2, #0]
 8012ffe:	4611      	mov	r1, r2
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	01d2      	lsls	r2, r2, #7
 8013004:	440a      	add	r2, r1
 8013006:	3284      	adds	r2, #132	; 0x84
 8013008:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 801300c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013012:	69fa      	ldr	r2, [r7, #28]
 8013014:	fb02 f303 	mul.w	r3, r2, r3
 8013018:	041a      	lsls	r2, r3, #16
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	6859      	ldr	r1, [r3, #4]
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	1acb      	subs	r3, r1, r3
 8013024:	69f9      	ldr	r1, [r7, #28]
 8013026:	fb01 f303 	mul.w	r3, r1, r3
 801302a:	3307      	adds	r3, #7
 801302c:	68f9      	ldr	r1, [r7, #12]
 801302e:	6809      	ldr	r1, [r1, #0]
 8013030:	4608      	mov	r0, r1
 8013032:	6879      	ldr	r1, [r7, #4]
 8013034:	01c9      	lsls	r1, r1, #7
 8013036:	4401      	add	r1, r0
 8013038:	3184      	adds	r1, #132	; 0x84
 801303a:	4313      	orrs	r3, r2
 801303c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	461a      	mov	r2, r3
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	01db      	lsls	r3, r3, #7
 8013048:	4413      	add	r3, r2
 801304a:	3384      	adds	r3, #132	; 0x84
 801304c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	4619      	mov	r1, r3
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	01db      	lsls	r3, r3, #7
 8013058:	440b      	add	r3, r1
 801305a:	3384      	adds	r3, #132	; 0x84
 801305c:	4619      	mov	r1, r3
 801305e:	4b14      	ldr	r3, [pc, #80]	; (80130b0 <LTDC_SetConfig+0x330>)
 8013060:	4013      	ands	r3, r2
 8013062:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	461a      	mov	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	01db      	lsls	r3, r3, #7
 801306e:	4413      	add	r3, r2
 8013070:	3384      	adds	r3, #132	; 0x84
 8013072:	461a      	mov	r2, r3
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013078:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	01db      	lsls	r3, r3, #7
 8013084:	4413      	add	r3, r2
 8013086:	3384      	adds	r3, #132	; 0x84
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	6812      	ldr	r2, [r2, #0]
 801308e:	4611      	mov	r1, r2
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	01d2      	lsls	r2, r2, #7
 8013094:	440a      	add	r2, r1
 8013096:	3284      	adds	r2, #132	; 0x84
 8013098:	f043 0301 	orr.w	r3, r3, #1
 801309c:	6013      	str	r3, [r2, #0]
}
 801309e:	bf00      	nop
 80130a0:	3724      	adds	r7, #36	; 0x24
 80130a2:	46bd      	mov	sp, r7
 80130a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a8:	4770      	bx	lr
 80130aa:	bf00      	nop
 80130ac:	fffff8f8 	.word	0xfffff8f8
 80130b0:	fffff800 	.word	0xfffff800

080130b4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80130bc:	f7fd fed0 	bl	8010e60 <HAL_GetTick>
 80130c0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d101      	bne.n	80130cc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80130c8:	2301      	movs	r3, #1
 80130ca:	e03b      	b.n	8013144 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2200      	movs	r2, #0
 80130d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2202      	movs	r2, #2
 80130d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	68da      	ldr	r2, [r3, #12]
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	f022 0201 	bic.w	r2, r2, #1
 80130ea:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80130ec:	e00f      	b.n	801310e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80130ee:	f7fd feb7 	bl	8010e60 <HAL_GetTick>
 80130f2:	4602      	mov	r2, r0
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	1ad3      	subs	r3, r2, r3
 80130f8:	2b05      	cmp	r3, #5
 80130fa:	d908      	bls.n	801310e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2240      	movs	r2, #64	; 0x40
 8013100:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2203      	movs	r2, #3
 8013106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 801310a:	2301      	movs	r3, #1
 801310c:	e01a      	b.n	8013144 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	f003 0301 	and.w	r3, r3, #1
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1e8      	bne.n	80130ee <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 f894 	bl	801324a <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2200      	movs	r2, #0
 8013126:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2200      	movs	r2, #0
 801312c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	2200      	movs	r2, #0
 8013132:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2200      	movs	r2, #0
 8013138:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2201      	movs	r2, #1
 801313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013142:	2300      	movs	r3, #0
}
 8013144:	4618      	mov	r0, r3
 8013146:	3710      	adds	r7, #16
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d101      	bne.n	801315e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801315a:	2301      	movs	r3, #1
 801315c:	e048      	b.n	80131f0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	68da      	ldr	r2, [r3, #12]
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	f022 0201 	bic.w	r2, r2, #1
 801316c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2200      	movs	r2, #0
 8013174:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2200      	movs	r2, #0
 801317c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2200      	movs	r2, #0
 8013184:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2200      	movs	r2, #0
 801318c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	2200      	movs	r2, #0
 8013194:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2200      	movs	r2, #0
 801319c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2200      	movs	r2, #0
 80131a4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2200      	movs	r2, #0
 80131ac:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	2200      	movs	r2, #0
 80131b4:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2200      	movs	r2, #0
 80131bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	221f      	movs	r2, #31
 80131c4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2200      	movs	r2, #0
 80131ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2200      	movs	r2, #0
 80131d0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	2200      	movs	r2, #0
 80131d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2200      	movs	r2, #0
 80131dc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2200      	movs	r2, #0
 80131e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2200      	movs	r2, #0
 80131ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80131ee:	2300      	movs	r3, #0
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	370c      	adds	r7, #12
 80131f4:	46bd      	mov	sp, r7
 80131f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fa:	4770      	bx	lr

080131fc <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d101      	bne.n	801320e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801320a:	2301      	movs	r3, #1
 801320c:	e017      	b.n	801323e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013214:	b2db      	uxtb	r3, r3
 8013216:	2b02      	cmp	r3, #2
 8013218:	d004      	beq.n	8013224 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2280      	movs	r2, #128	; 0x80
 801321e:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 8013220:	2301      	movs	r3, #1
 8013222:	e00c      	b.n	801323e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2204      	movs	r2, #4
 8013228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	68da      	ldr	r2, [r3, #12]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f022 0201 	bic.w	r2, r2, #1
 801323a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	370c      	adds	r7, #12
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 801324a:	b480      	push	{r7}
 801324c:	b085      	sub	sp, #20
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	68d9      	ldr	r1, [r3, #12]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	691a      	ldr	r2, [r3, #16]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	430a      	orrs	r2, r1
 8013260:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	695a      	ldr	r2, [r3, #20]
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	699b      	ldr	r3, [r3, #24]
 801326a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013270:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6a1b      	ldr	r3, [r3, #32]
 8013276:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 801327c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013282:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8013288:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801328e:	3b01      	subs	r3, #1
 8013290:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8013292:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 801329e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80132a0:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80132aa:	d107      	bne.n	80132bc <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	691a      	ldr	r2, [r3, #16]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80132ba:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	2200      	movs	r2, #0
 80132c2:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	da11      	bge.n	80132f0 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	695a      	ldr	r2, [r3, #20]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80132da:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132e0:	425b      	negs	r3, r3
 80132e2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	68fa      	ldr	r2, [r7, #12]
 80132ea:	b292      	uxth	r2, r2
 80132ec:	621a      	str	r2, [r3, #32]
 80132ee:	e006      	b.n	80132fe <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132f4:	461a      	mov	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	b292      	uxth	r2, r2
 80132fc:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013302:	2b00      	cmp	r3, #0
 8013304:	da15      	bge.n	8013332 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	695a      	ldr	r2, [r3, #20]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8013314:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801331a:	425b      	negs	r3, r3
 801331c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	6a19      	ldr	r1, [r3, #32]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	041a      	lsls	r2, r3, #16
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	430a      	orrs	r2, r1
 801332e:	621a      	str	r2, [r3, #32]
 8013330:	e009      	b.n	8013346 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	6a19      	ldr	r1, [r3, #32]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801333c:	041a      	lsls	r2, r3, #16
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	430a      	orrs	r2, r1
 8013344:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801334e:	d006      	beq.n	801335e <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685a      	ldr	r2, [r3, #4]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	b2d2      	uxtb	r2, r2
 801335a:	629a      	str	r2, [r3, #40]	; 0x28
 801335c:	e003      	b.n	8013366 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2200      	movs	r2, #0
 8013364:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	2200      	movs	r2, #0
 801336c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801336e:	bf00      	nop
 8013370:	3714      	adds	r7, #20
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr
	...

0801337c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8013384:	4b29      	ldr	r3, [pc, #164]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	f003 0307 	and.w	r3, r3, #7
 801338c:	2b06      	cmp	r3, #6
 801338e:	d00a      	beq.n	80133a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8013390:	4b26      	ldr	r3, [pc, #152]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	429a      	cmp	r2, r3
 801339c:	d001      	beq.n	80133a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	e040      	b.n	8013424 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80133a2:	2300      	movs	r3, #0
 80133a4:	e03e      	b.n	8013424 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80133a6:	4b21      	ldr	r3, [pc, #132]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80133ae:	491f      	ldr	r1, [pc, #124]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	4313      	orrs	r3, r2
 80133b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80133b6:	f7fd fd53 	bl	8010e60 <HAL_GetTick>
 80133ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80133bc:	e009      	b.n	80133d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80133be:	f7fd fd4f 	bl	8010e60 <HAL_GetTick>
 80133c2:	4602      	mov	r2, r0
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80133cc:	d901      	bls.n	80133d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80133ce:	2301      	movs	r3, #1
 80133d0:	e028      	b.n	8013424 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80133d2:	4b16      	ldr	r3, [pc, #88]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80133da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80133de:	d1ee      	bne.n	80133be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b1e      	cmp	r3, #30
 80133e4:	d008      	beq.n	80133f8 <HAL_PWREx_ConfigSupply+0x7c>
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b2e      	cmp	r3, #46	; 0x2e
 80133ea:	d005      	beq.n	80133f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2b1d      	cmp	r3, #29
 80133f0:	d002      	beq.n	80133f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b2d      	cmp	r3, #45	; 0x2d
 80133f6:	d114      	bne.n	8013422 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80133f8:	f7fd fd32 	bl	8010e60 <HAL_GetTick>
 80133fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80133fe:	e009      	b.n	8013414 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8013400:	f7fd fd2e 	bl	8010e60 <HAL_GetTick>
 8013404:	4602      	mov	r2, r0
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	1ad3      	subs	r3, r2, r3
 801340a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801340e:	d901      	bls.n	8013414 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8013410:	2301      	movs	r3, #1
 8013412:	e007      	b.n	8013424 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8013414:	4b05      	ldr	r3, [pc, #20]	; (801342c <HAL_PWREx_ConfigSupply+0xb0>)
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013420:	d1ee      	bne.n	8013400 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	58024800 	.word	0x58024800

08013430 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af02      	add	r7, sp, #8
 8013436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013438:	f7fd fd12 	bl	8010e60 <HAL_GetTick>
 801343c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d101      	bne.n	8013448 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8013444:	2301      	movs	r3, #1
 8013446:	e05f      	b.n	8013508 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801344e:	b2db      	uxtb	r3, r3
 8013450:	2b00      	cmp	r3, #0
 8013452:	d107      	bne.n	8013464 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7ed fe4f 	bl	80010f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801345a:	f241 3188 	movw	r1, #5000	; 0x1388
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 fcca 	bl	8013df8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	689b      	ldr	r3, [r3, #8]
 8013472:	3b01      	subs	r3, #1
 8013474:	021a      	lsls	r2, r3, #8
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	430a      	orrs	r2, r1
 801347c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2200      	movs	r2, #0
 8013488:	2120      	movs	r1, #32
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f000 fcf5 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013490:	4603      	mov	r3, r0
 8013492:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8013494:	7afb      	ldrb	r3, [r7, #11]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d135      	bne.n	8013506 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	4b1b      	ldr	r3, [pc, #108]	; (8013510 <HAL_QSPI_Init+0xe0>)
 80134a2:	4013      	ands	r3, r2
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	6852      	ldr	r2, [r2, #4]
 80134a8:	0611      	lsls	r1, r2, #24
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	68d2      	ldr	r2, [r2, #12]
 80134ae:	4311      	orrs	r1, r2
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	69d2      	ldr	r2, [r2, #28]
 80134b4:	4311      	orrs	r1, r2
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	6a12      	ldr	r2, [r2, #32]
 80134ba:	4311      	orrs	r1, r2
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	6812      	ldr	r2, [r2, #0]
 80134c0:	430b      	orrs	r3, r1
 80134c2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	685a      	ldr	r2, [r3, #4]
 80134ca:	4b12      	ldr	r3, [pc, #72]	; (8013514 <HAL_QSPI_Init+0xe4>)
 80134cc:	4013      	ands	r3, r2
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	6912      	ldr	r2, [r2, #16]
 80134d2:	0411      	lsls	r1, r2, #16
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	6952      	ldr	r2, [r2, #20]
 80134d8:	4311      	orrs	r1, r2
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	6992      	ldr	r2, [r2, #24]
 80134de:	4311      	orrs	r1, r2
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	6812      	ldr	r2, [r2, #0]
 80134e4:	430b      	orrs	r3, r1
 80134e6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	f042 0201 	orr.w	r2, r2, #1
 80134f6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	2200      	movs	r2, #0
 80134fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	2201      	movs	r2, #1
 8013502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8013506:	7afb      	ldrb	r3, [r7, #11]
}
 8013508:	4618      	mov	r0, r3
 801350a:	3710      	adds	r7, #16
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	00ffff2f 	.word	0x00ffff2f
 8013514:	ffe0f8fe 	.word	0xffe0f8fe

08013518 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b086      	sub	sp, #24
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	689b      	ldr	r3, [r3, #8]
 8013526:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f003 0304 	and.w	r3, r3, #4
 8013536:	2b00      	cmp	r3, #0
 8013538:	d064      	beq.n	8013604 <HAL_QSPI_IRQHandler+0xec>
 801353a:	693b      	ldr	r3, [r7, #16]
 801353c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013540:	2b00      	cmp	r3, #0
 8013542:	d05f      	beq.n	8013604 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	3320      	adds	r3, #32
 801354a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b12      	cmp	r3, #18
 8013556:	d125      	bne.n	80135a4 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013558:	e01c      	b.n	8013594 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00f      	beq.n	8013582 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013566:	781a      	ldrb	r2, [r3, #0]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013570:	1c5a      	adds	r2, r3, #1
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801357a:	1e5a      	subs	r2, r3, #1
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013580:	e008      	b.n	8013594 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013590:	601a      	str	r2, [r3, #0]
          break;
 8013592:	e033      	b.n	80135fc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	689b      	ldr	r3, [r3, #8]
 801359a:	f003 0304 	and.w	r3, r3, #4
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1db      	bne.n	801355a <HAL_QSPI_IRQHandler+0x42>
 80135a2:	e02b      	b.n	80135fc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	2b22      	cmp	r3, #34	; 0x22
 80135ae:	d125      	bne.n	80135fc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80135b0:	e01d      	b.n	80135ee <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d010      	beq.n	80135dc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	7812      	ldrb	r2, [r2, #0]
 80135c2:	b2d2      	uxtb	r2, r2
 80135c4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135ca:	1c5a      	adds	r2, r3, #1
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135d4:	1e5a      	subs	r2, r3, #1
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	639a      	str	r2, [r3, #56]	; 0x38
 80135da:	e008      	b.n	80135ee <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80135ea:	601a      	str	r2, [r3, #0]
          break;
 80135ec:	e006      	b.n	80135fc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	689b      	ldr	r3, [r3, #8]
 80135f4:	f003 0304 	and.w	r3, r3, #4
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1da      	bne.n	80135b2 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f000 fbdd 	bl	8013dbc <HAL_QSPI_FifoThresholdCallback>
 8013602:	e13c      	b.n	801387e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	f003 0302 	and.w	r3, r3, #2
 801360a:	2b00      	cmp	r3, #0
 801360c:	f000 80b0 	beq.w	8013770 <HAL_QSPI_IRQHandler+0x258>
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013616:	2b00      	cmp	r3, #0
 8013618:	f000 80aa 	beq.w	8013770 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2202      	movs	r2, #2
 8013622:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	681a      	ldr	r2, [r3, #0]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8013632:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801363a:	b2db      	uxtb	r3, r3
 801363c:	2b12      	cmp	r3, #18
 801363e:	d120      	bne.n	8013682 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f003 0304 	and.w	r3, r3, #4
 801364a:	2b00      	cmp	r3, #0
 801364c:	d011      	beq.n	8013672 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	681a      	ldr	r2, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	f022 0204 	bic.w	r2, r2, #4
 801365c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	68da      	ldr	r2, [r3, #12]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	f022 0201 	bic.w	r2, r2, #1
 8013670:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2201      	movs	r2, #1
 8013676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f000 fb94 	bl	8013da8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013680:	e0fa      	b.n	8013878 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013688:	b2db      	uxtb	r3, r3
 801368a:	2b22      	cmp	r3, #34	; 0x22
 801368c:	d143      	bne.n	8013716 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f003 0304 	and.w	r3, r3, #4
 8013698:	2b00      	cmp	r3, #0
 801369a:	d012      	beq.n	80136c2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	681a      	ldr	r2, [r3, #0]
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f022 0204 	bic.w	r2, r2, #4
 80136aa:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	68da      	ldr	r2, [r3, #12]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	f022 0201 	bic.w	r2, r2, #1
 80136be:	60da      	str	r2, [r3, #12]
 80136c0:	e021      	b.n	8013706 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	3320      	adds	r3, #32
 80136c8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80136ca:	e013      	b.n	80136f4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d017      	beq.n	8013704 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	7812      	ldrb	r2, [r2, #0]
 80136dc:	b2d2      	uxtb	r2, r2
 80136de:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136e4:	1c5a      	adds	r2, r3, #1
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ee:	1e5a      	subs	r2, r3, #1
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d1e4      	bne.n	80136cc <HAL_QSPI_IRQHandler+0x1b4>
 8013702:	e000      	b.n	8013706 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8013704:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	2201      	movs	r2, #1
 801370a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 fb40 	bl	8013d94 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013714:	e0b0      	b.n	8013878 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801371c:	b2db      	uxtb	r3, r3
 801371e:	2b02      	cmp	r3, #2
 8013720:	d107      	bne.n	8013732 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2201      	movs	r2, #1
 8013726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 fb28 	bl	8013d80 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013730:	e0a2      	b.n	8013878 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013738:	b2db      	uxtb	r3, r3
 801373a:	2b08      	cmp	r3, #8
 801373c:	f040 809c 	bne.w	8013878 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	695a      	ldr	r2, [r3, #20]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801374e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2201      	movs	r2, #1
 8013754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801375c:	2b00      	cmp	r3, #0
 801375e:	d103      	bne.n	8013768 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f000 fb03 	bl	8013d6c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013766:	e087      	b.n	8013878 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f000 faf5 	bl	8013d58 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801376e:	e083      	b.n	8013878 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	f003 0308 	and.w	r3, r3, #8
 8013776:	2b00      	cmp	r3, #0
 8013778:	d01f      	beq.n	80137ba <HAL_QSPI_IRQHandler+0x2a2>
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013780:	2b00      	cmp	r3, #0
 8013782:	d01a      	beq.n	80137ba <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2208      	movs	r2, #8
 801378a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013796:	2b00      	cmp	r3, #0
 8013798:	d00b      	beq.n	80137b2 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80137a8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2201      	movs	r2, #1
 80137ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f000 fb0c 	bl	8013dd0 <HAL_QSPI_StatusMatchCallback>
 80137b8:	e061      	b.n	801387e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	f003 0301 	and.w	r3, r3, #1
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d047      	beq.n	8013854 <HAL_QSPI_IRQHandler+0x33c>
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d042      	beq.n	8013854 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2201      	movs	r2, #1
 80137d4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80137e4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137ea:	f043 0202 	orr.w	r2, r3, #2
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f003 0304 	and.w	r3, r3, #4
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d021      	beq.n	8013844 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	f022 0204 	bic.w	r2, r2, #4
 801380e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013814:	4a1c      	ldr	r2, [pc, #112]	; (8013888 <HAL_QSPI_IRQHandler+0x370>)
 8013816:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801381c:	4618      	mov	r0, r3
 801381e:	f7ff fced 	bl	80131fc <HAL_MDMA_Abort_IT>
 8013822:	4603      	mov	r3, r0
 8013824:	2b00      	cmp	r3, #0
 8013826:	d029      	beq.n	801387c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801382c:	f043 0204 	orr.w	r2, r3, #4
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2201      	movs	r2, #1
 8013838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f000 fa8b 	bl	8013d58 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013842:	e01b      	b.n	801387c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2201      	movs	r2, #1
 8013848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 fa83 	bl	8013d58 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013852:	e013      	b.n	801387c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	f003 0310 	and.w	r3, r3, #16
 801385a:	2b00      	cmp	r3, #0
 801385c:	d00f      	beq.n	801387e <HAL_QSPI_IRQHandler+0x366>
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00a      	beq.n	801387e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	2210      	movs	r2, #16
 801386e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 fab7 	bl	8013de4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8013876:	e002      	b.n	801387e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013878:	bf00      	nop
 801387a:	e000      	b.n	801387e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801387c:	bf00      	nop
}
 801387e:	bf00      	nop
 8013880:	3718      	adds	r7, #24
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	08013e15 	.word	0x08013e15

0801388c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b088      	sub	sp, #32
 8013890:	af02      	add	r7, sp, #8
 8013892:	60f8      	str	r0, [r7, #12]
 8013894:	60b9      	str	r1, [r7, #8]
 8013896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013898:	f7fd fae2 	bl	8010e60 <HAL_GetTick>
 801389c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d101      	bne.n	80138ae <HAL_QSPI_Command+0x22>
 80138aa:	2302      	movs	r3, #2
 80138ac:	e048      	b.n	8013940 <HAL_QSPI_Command+0xb4>
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2201      	movs	r2, #1
 80138b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d137      	bne.n	8013932 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	2200      	movs	r2, #0
 80138c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2202      	movs	r2, #2
 80138cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	9300      	str	r3, [sp, #0]
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2200      	movs	r2, #0
 80138d8:	2120      	movs	r1, #32
 80138da:	68f8      	ldr	r0, [r7, #12]
 80138dc:	f000 facd 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 80138e0:	4603      	mov	r3, r0
 80138e2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80138e4:	7dfb      	ldrb	r3, [r7, #23]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d125      	bne.n	8013936 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80138ea:	2200      	movs	r2, #0
 80138ec:	68b9      	ldr	r1, [r7, #8]
 80138ee:	68f8      	ldr	r0, [r7, #12]
 80138f0:	f000 fafa 	bl	8013ee8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d115      	bne.n	8013928 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	9300      	str	r3, [sp, #0]
 8013900:	693b      	ldr	r3, [r7, #16]
 8013902:	2201      	movs	r2, #1
 8013904:	2102      	movs	r1, #2
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	f000 fab7 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 801390c:	4603      	mov	r3, r0
 801390e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8013910:	7dfb      	ldrb	r3, [r7, #23]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d10f      	bne.n	8013936 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2202      	movs	r2, #2
 801391c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	2201      	movs	r2, #1
 8013922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013926:	e006      	b.n	8013936 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	2201      	movs	r2, #1
 801392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013930:	e001      	b.n	8013936 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013932:	2302      	movs	r3, #2
 8013934:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	2200      	movs	r2, #0
 801393a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801393e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b08a      	sub	sp, #40	; 0x28
 801394c:	af02      	add	r7, sp, #8
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013954:	2300      	movs	r3, #0
 8013956:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013958:	f7fd fa82 	bl	8010e60 <HAL_GetTick>
 801395c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	3320      	adds	r3, #32
 8013964:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801396c:	b2db      	uxtb	r3, r3
 801396e:	2b01      	cmp	r3, #1
 8013970:	d101      	bne.n	8013976 <HAL_QSPI_Transmit+0x2e>
 8013972:	2302      	movs	r3, #2
 8013974:	e076      	b.n	8013a64 <HAL_QSPI_Transmit+0x11c>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2201      	movs	r2, #1
 801397a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013984:	b2db      	uxtb	r3, r3
 8013986:	2b01      	cmp	r3, #1
 8013988:	d165      	bne.n	8013a56 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2200      	movs	r2, #0
 801398e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d056      	beq.n	8013a44 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2212      	movs	r2, #18
 801399a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	691b      	ldr	r3, [r3, #16]
 80139a4:	1c5a      	adds	r2, r3, #1
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	691b      	ldr	r3, [r3, #16]
 80139b0:	1c5a      	adds	r2, r3, #1
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	68ba      	ldr	r2, [r7, #8]
 80139ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	695a      	ldr	r2, [r3, #20]
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80139ca:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80139cc:	e01b      	b.n	8013a06 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	9300      	str	r3, [sp, #0]
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	2201      	movs	r2, #1
 80139d6:	2104      	movs	r1, #4
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f000 fa4e 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 80139de:	4603      	mov	r3, r0
 80139e0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80139e2:	7ffb      	ldrb	r3, [r7, #31]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d113      	bne.n	8013a10 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ec:	781a      	ldrb	r2, [r3, #0]
 80139ee:	697b      	ldr	r3, [r7, #20]
 80139f0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139f6:	1c5a      	adds	r2, r3, #1
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a00:	1e5a      	subs	r2, r3, #1
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d1df      	bne.n	80139ce <HAL_QSPI_Transmit+0x86>
 8013a0e:	e000      	b.n	8013a12 <HAL_QSPI_Transmit+0xca>
          break;
 8013a10:	bf00      	nop
      }

      if (status == HAL_OK)
 8013a12:	7ffb      	ldrb	r3, [r7, #31]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d110      	bne.n	8013a3a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	2201      	movs	r2, #1
 8013a20:	2102      	movs	r1, #2
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	f000 fa29 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013a2c:	7ffb      	ldrb	r3, [r7, #31]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d103      	bne.n	8013a3a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2202      	movs	r2, #2
 8013a38:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013a42:	e00a      	b.n	8013a5a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a48:	f043 0208 	orr.w	r2, r3, #8
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013a50:	2301      	movs	r3, #1
 8013a52:	77fb      	strb	r3, [r7, #31]
 8013a54:	e001      	b.n	8013a5a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013a56:	2302      	movs	r3, #2
 8013a58:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	3720      	adds	r7, #32
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b08a      	sub	sp, #40	; 0x28
 8013a70:	af02      	add	r7, sp, #8
 8013a72:	60f8      	str	r0, [r7, #12]
 8013a74:	60b9      	str	r1, [r7, #8]
 8013a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a78:	2300      	movs	r3, #0
 8013a7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013a7c:	f7fd f9f0 	bl	8010e60 <HAL_GetTick>
 8013a80:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	699b      	ldr	r3, [r3, #24]
 8013a88:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	3320      	adds	r3, #32
 8013a90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d101      	bne.n	8013aa2 <HAL_QSPI_Receive+0x36>
 8013a9e:	2302      	movs	r3, #2
 8013aa0:	e07d      	b.n	8013b9e <HAL_QSPI_Receive+0x132>
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	2201      	movs	r2, #1
 8013aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ab0:	b2db      	uxtb	r3, r3
 8013ab2:	2b01      	cmp	r3, #1
 8013ab4:	d16c      	bne.n	8013b90 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d05d      	beq.n	8013b7e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	2222      	movs	r2, #34	; 0x22
 8013ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	691b      	ldr	r3, [r3, #16]
 8013ad0:	1c5a      	adds	r2, r3, #1
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	691b      	ldr	r3, [r3, #16]
 8013adc:	1c5a      	adds	r2, r3, #1
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	68ba      	ldr	r2, [r7, #8]
 8013ae6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	695b      	ldr	r3, [r3, #20]
 8013aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013afa:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	697a      	ldr	r2, [r7, #20]
 8013b02:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8013b04:	e01c      	b.n	8013b40 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	2201      	movs	r2, #1
 8013b0e:	2106      	movs	r1, #6
 8013b10:	68f8      	ldr	r0, [r7, #12]
 8013b12:	f000 f9b2 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013b16:	4603      	mov	r3, r0
 8013b18:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013b1a:	7ffb      	ldrb	r3, [r7, #31]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d114      	bne.n	8013b4a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b24:	693a      	ldr	r2, [r7, #16]
 8013b26:	7812      	ldrb	r2, [r2, #0]
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b30:	1c5a      	adds	r2, r3, #1
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b3a:	1e5a      	subs	r2, r3, #1
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d1de      	bne.n	8013b06 <HAL_QSPI_Receive+0x9a>
 8013b48:	e000      	b.n	8013b4c <HAL_QSPI_Receive+0xe0>
          break;
 8013b4a:	bf00      	nop
      }

      if (status == HAL_OK)
 8013b4c:	7ffb      	ldrb	r3, [r7, #31]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d110      	bne.n	8013b74 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	9300      	str	r3, [sp, #0]
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	2201      	movs	r2, #1
 8013b5a:	2102      	movs	r1, #2
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	f000 f98c 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013b62:	4603      	mov	r3, r0
 8013b64:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013b66:	7ffb      	ldrb	r3, [r7, #31]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d103      	bne.n	8013b74 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2202      	movs	r2, #2
 8013b72:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2201      	movs	r2, #1
 8013b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013b7c:	e00a      	b.n	8013b94 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b82:	f043 0208 	orr.w	r2, r3, #8
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	77fb      	strb	r3, [r7, #31]
 8013b8e:	e001      	b.n	8013b94 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013b90:	2302      	movs	r3, #2
 8013b92:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8013b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3720      	adds	r7, #32
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}

08013ba6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013ba6:	b580      	push	{r7, lr}
 8013ba8:	b088      	sub	sp, #32
 8013baa:	af02      	add	r7, sp, #8
 8013bac:	60f8      	str	r0, [r7, #12]
 8013bae:	60b9      	str	r1, [r7, #8]
 8013bb0:	607a      	str	r2, [r7, #4]
 8013bb2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013bb4:	f7fd f954 	bl	8010e60 <HAL_GetTick>
 8013bb8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013bc0:	b2db      	uxtb	r3, r3
 8013bc2:	2b01      	cmp	r3, #1
 8013bc4:	d101      	bne.n	8013bca <HAL_QSPI_AutoPolling+0x24>
 8013bc6:	2302      	movs	r3, #2
 8013bc8:	e060      	b.n	8013c8c <HAL_QSPI_AutoPolling+0xe6>
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2201      	movs	r2, #1
 8013bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d14f      	bne.n	8013c7e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2200      	movs	r2, #0
 8013be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2242      	movs	r2, #66	; 0x42
 8013be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	9300      	str	r3, [sp, #0]
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	2120      	movs	r1, #32
 8013bf6:	68f8      	ldr	r0, [r7, #12]
 8013bf8:	f000 f93f 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d13d      	bne.n	8013c82 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	6812      	ldr	r2, [r2, #0]
 8013c0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	6852      	ldr	r2, [r2, #4]
 8013c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	6892      	ldr	r2, [r2, #8]
 8013c22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	691b      	ldr	r3, [r3, #16]
 8013c32:	431a      	orrs	r2, r3
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8013c3c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	68da      	ldr	r2, [r3, #12]
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013c4a:	68b9      	ldr	r1, [r7, #8]
 8013c4c:	68f8      	ldr	r0, [r7, #12]
 8013c4e:	f000 f94b 	bl	8013ee8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	693b      	ldr	r3, [r7, #16]
 8013c58:	2201      	movs	r2, #1
 8013c5a:	2108      	movs	r1, #8
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	f000 f90c 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013c62:	4603      	mov	r3, r0
 8013c64:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013c66:	7dfb      	ldrb	r3, [r7, #23]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d10a      	bne.n	8013c82 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	2208      	movs	r2, #8
 8013c72:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2201      	movs	r2, #1
 8013c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013c7c:	e001      	b.n	8013c82 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013c7e:	2302      	movs	r3, #2
 8013c80:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2200      	movs	r2, #0
 8013c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3718      	adds	r7, #24
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b088      	sub	sp, #32
 8013c98:	af02      	add	r7, sp, #8
 8013c9a:	60f8      	str	r0, [r7, #12]
 8013c9c:	60b9      	str	r1, [r7, #8]
 8013c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013ca0:	f7fd f8de 	bl	8010e60 <HAL_GetTick>
 8013ca4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013cac:	b2db      	uxtb	r3, r3
 8013cae:	2b01      	cmp	r3, #1
 8013cb0:	d101      	bne.n	8013cb6 <HAL_QSPI_MemoryMapped+0x22>
 8013cb2:	2302      	movs	r3, #2
 8013cb4:	e04c      	b.n	8013d50 <HAL_QSPI_MemoryMapped+0xbc>
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2201      	movs	r2, #1
 8013cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	2b01      	cmp	r3, #1
 8013cc8:	d13b      	bne.n	8013d42 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	2282      	movs	r2, #130	; 0x82
 8013cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	693b      	ldr	r3, [r7, #16]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	2120      	movs	r1, #32
 8013ce4:	68f8      	ldr	r0, [r7, #12]
 8013ce6:	f000 f8c8 	bl	8013e7a <QSPI_WaitFlagStateUntilTimeout>
 8013cea:	4603      	mov	r3, r0
 8013cec:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013cee:	7dfb      	ldrb	r3, [r7, #23]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d128      	bne.n	8013d46 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	f023 0108 	bic.w	r1, r3, #8
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685a      	ldr	r2, [r3, #4]
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	430a      	orrs	r2, r1
 8013d08:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	2b08      	cmp	r3, #8
 8013d10:	d110      	bne.n	8013d34 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	6812      	ldr	r2, [r2, #0]
 8013d1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2210      	movs	r2, #16
 8013d22:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013d32:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013d34:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8013d38:	68b9      	ldr	r1, [r7, #8]
 8013d3a:	68f8      	ldr	r0, [r7, #12]
 8013d3c:	f000 f8d4 	bl	8013ee8 <QSPI_Config>
 8013d40:	e001      	b.n	8013d46 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013d42:	2302      	movs	r3, #2
 8013d44:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8013d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3718      	adds	r7, #24
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013d60:	bf00      	nop
 8013d62:	370c      	adds	r7, #12
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013d74:	bf00      	nop
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7e:	4770      	bx	lr

08013d80 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013d88:	bf00      	nop
 8013d8a:	370c      	adds	r7, #12
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d92:	4770      	bx	lr

08013d94 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013d9c:	bf00      	nop
 8013d9e:	370c      	adds	r7, #12
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr

08013da8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b083      	sub	sp, #12
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8013db0:	bf00      	nop
 8013db2:	370c      	adds	r7, #12
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr

08013dbc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013dc4:	bf00      	nop
 8013dc6:	370c      	adds	r7, #12
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dce:	4770      	bx	lr

08013dd0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8013dd8:	bf00      	nop
 8013dda:	370c      	adds	r7, #12
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013dec:	bf00      	nop
 8013dee:	370c      	adds	r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr

08013df8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b083      	sub	sp, #12
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	683a      	ldr	r2, [r7, #0]
 8013e06:	649a      	str	r2, [r3, #72]	; 0x48
}
 8013e08:	bf00      	nop
 8013e0a:	370c      	adds	r7, #12
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr

08013e14 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e20:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2200      	movs	r2, #0
 8013e26:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	2b08      	cmp	r3, #8
 8013e38:	d114      	bne.n	8013e64 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2202      	movs	r2, #2
 8013e40:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8013e50:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	681a      	ldr	r2, [r3, #0]
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	f042 0202 	orr.w	r2, r2, #2
 8013e60:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8013e62:	e006      	b.n	8013e72 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	2201      	movs	r2, #1
 8013e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f7ff ff73 	bl	8013d58 <HAL_QSPI_ErrorCallback>
}
 8013e72:	bf00      	nop
 8013e74:	3710      	adds	r7, #16
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}

08013e7a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013e7a:	b580      	push	{r7, lr}
 8013e7c:	b084      	sub	sp, #16
 8013e7e:	af00      	add	r7, sp, #0
 8013e80:	60f8      	str	r0, [r7, #12]
 8013e82:	60b9      	str	r1, [r7, #8]
 8013e84:	603b      	str	r3, [r7, #0]
 8013e86:	4613      	mov	r3, r2
 8013e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013e8a:	e01a      	b.n	8013ec2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e92:	d016      	beq.n	8013ec2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e94:	f7fc ffe4 	bl	8010e60 <HAL_GetTick>
 8013e98:	4602      	mov	r2, r0
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	69ba      	ldr	r2, [r7, #24]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	d302      	bcc.n	8013eaa <QSPI_WaitFlagStateUntilTimeout+0x30>
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d10b      	bne.n	8013ec2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	2204      	movs	r2, #4
 8013eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013eb6:	f043 0201 	orr.w	r2, r3, #1
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	e00e      	b.n	8013ee0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	689a      	ldr	r2, [r3, #8]
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	4013      	ands	r3, r2
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	bf14      	ite	ne
 8013ed0:	2301      	movne	r3, #1
 8013ed2:	2300      	moveq	r3, #0
 8013ed4:	b2db      	uxtb	r3, r3
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	79fb      	ldrb	r3, [r7, #7]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d1d6      	bne.n	8013e8c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013ede:	2300      	movs	r3, #0
}
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	3710      	adds	r7, #16
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	bd80      	pop	{r7, pc}

08013ee8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b085      	sub	sp, #20
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d009      	beq.n	8013f10 <QSPI_Config+0x28>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013f02:	d005      	beq.n	8013f10 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8013f04:	68bb      	ldr	r3, [r7, #8]
 8013f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	3a01      	subs	r2, #1
 8013f0e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 80b9 	beq.w	801408c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	6a1b      	ldr	r3, [r3, #32]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d05f      	beq.n	8013fe2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	68ba      	ldr	r2, [r7, #8]
 8013f28:	6892      	ldr	r2, [r2, #8]
 8013f2a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	69db      	ldr	r3, [r3, #28]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d031      	beq.n	8013f98 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f3c:	431a      	orrs	r2, r3
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f42:	431a      	orrs	r2, r3
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f48:	431a      	orrs	r2, r3
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	695b      	ldr	r3, [r3, #20]
 8013f4e:	049b      	lsls	r3, r3, #18
 8013f50:	431a      	orrs	r2, r3
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	691b      	ldr	r3, [r3, #16]
 8013f56:	431a      	orrs	r2, r3
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	6a1b      	ldr	r3, [r3, #32]
 8013f5c:	431a      	orrs	r2, r3
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	68db      	ldr	r3, [r3, #12]
 8013f62:	431a      	orrs	r2, r3
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	69db      	ldr	r3, [r3, #28]
 8013f68:	431a      	orrs	r2, r3
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	699b      	ldr	r3, [r3, #24]
 8013f6e:	431a      	orrs	r2, r3
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	ea42 0103 	orr.w	r1, r2, r3
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	430a      	orrs	r2, r1
 8013f80:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8013f88:	f000 812e 	beq.w	80141e8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	6852      	ldr	r2, [r2, #4]
 8013f94:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8013f96:	e127      	b.n	80141e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fa0:	431a      	orrs	r2, r3
 8013fa2:	68bb      	ldr	r3, [r7, #8]
 8013fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013fa6:	431a      	orrs	r2, r3
 8013fa8:	68bb      	ldr	r3, [r7, #8]
 8013faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fac:	431a      	orrs	r2, r3
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	695b      	ldr	r3, [r3, #20]
 8013fb2:	049b      	lsls	r3, r3, #18
 8013fb4:	431a      	orrs	r2, r3
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	691b      	ldr	r3, [r3, #16]
 8013fba:	431a      	orrs	r2, r3
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	6a1b      	ldr	r3, [r3, #32]
 8013fc0:	431a      	orrs	r2, r3
 8013fc2:	68bb      	ldr	r3, [r7, #8]
 8013fc4:	69db      	ldr	r3, [r3, #28]
 8013fc6:	431a      	orrs	r2, r3
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	699b      	ldr	r3, [r3, #24]
 8013fcc:	431a      	orrs	r2, r3
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	ea42 0103 	orr.w	r1, r2, r3
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	687a      	ldr	r2, [r7, #4]
 8013fdc:	430a      	orrs	r2, r1
 8013fde:	615a      	str	r2, [r3, #20]
}
 8013fe0:	e102      	b.n	80141e8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	69db      	ldr	r3, [r3, #28]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d02e      	beq.n	8014048 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ff2:	431a      	orrs	r2, r3
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ff8:	431a      	orrs	r2, r3
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ffe:	431a      	orrs	r2, r3
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	695b      	ldr	r3, [r3, #20]
 8014004:	049b      	lsls	r3, r3, #18
 8014006:	431a      	orrs	r2, r3
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	6a1b      	ldr	r3, [r3, #32]
 801400c:	431a      	orrs	r2, r3
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	431a      	orrs	r2, r3
 8014014:	68bb      	ldr	r3, [r7, #8]
 8014016:	69db      	ldr	r3, [r3, #28]
 8014018:	431a      	orrs	r2, r3
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	431a      	orrs	r2, r3
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	ea42 0103 	orr.w	r1, r2, r3
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	430a      	orrs	r2, r1
 8014030:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8014038:	f000 80d6 	beq.w	80141e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68ba      	ldr	r2, [r7, #8]
 8014042:	6852      	ldr	r2, [r2, #4]
 8014044:	619a      	str	r2, [r3, #24]
}
 8014046:	e0cf      	b.n	80141e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014050:	431a      	orrs	r2, r3
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014056:	431a      	orrs	r2, r3
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801405c:	431a      	orrs	r2, r3
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	695b      	ldr	r3, [r3, #20]
 8014062:	049b      	lsls	r3, r3, #18
 8014064:	431a      	orrs	r2, r3
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	6a1b      	ldr	r3, [r3, #32]
 801406a:	431a      	orrs	r2, r3
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	69db      	ldr	r3, [r3, #28]
 8014070:	431a      	orrs	r2, r3
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	699b      	ldr	r3, [r3, #24]
 8014076:	431a      	orrs	r2, r3
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	ea42 0103 	orr.w	r1, r2, r3
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	687a      	ldr	r2, [r7, #4]
 8014086:	430a      	orrs	r2, r1
 8014088:	615a      	str	r2, [r3, #20]
}
 801408a:	e0ad      	b.n	80141e8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	6a1b      	ldr	r3, [r3, #32]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d058      	beq.n	8014146 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	6892      	ldr	r2, [r2, #8]
 801409c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	69db      	ldr	r3, [r3, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d02d      	beq.n	8014102 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140ae:	431a      	orrs	r2, r3
 80140b0:	68bb      	ldr	r3, [r7, #8]
 80140b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140b4:	431a      	orrs	r2, r3
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ba:	431a      	orrs	r2, r3
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	049b      	lsls	r3, r3, #18
 80140c2:	431a      	orrs	r2, r3
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	691b      	ldr	r3, [r3, #16]
 80140c8:	431a      	orrs	r2, r3
 80140ca:	68bb      	ldr	r3, [r7, #8]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	431a      	orrs	r2, r3
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	68db      	ldr	r3, [r3, #12]
 80140d4:	431a      	orrs	r2, r3
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	69db      	ldr	r3, [r3, #28]
 80140da:	431a      	orrs	r2, r3
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	699b      	ldr	r3, [r3, #24]
 80140e0:	ea42 0103 	orr.w	r1, r2, r3
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	430a      	orrs	r2, r1
 80140ec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80140f4:	d078      	beq.n	80141e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	68ba      	ldr	r2, [r7, #8]
 80140fc:	6852      	ldr	r2, [r2, #4]
 80140fe:	619a      	str	r2, [r3, #24]
}
 8014100:	e072      	b.n	80141e8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801410a:	431a      	orrs	r2, r3
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014110:	431a      	orrs	r2, r3
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014116:	431a      	orrs	r2, r3
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	695b      	ldr	r3, [r3, #20]
 801411c:	049b      	lsls	r3, r3, #18
 801411e:	431a      	orrs	r2, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	691b      	ldr	r3, [r3, #16]
 8014124:	431a      	orrs	r2, r3
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	6a1b      	ldr	r3, [r3, #32]
 801412a:	431a      	orrs	r2, r3
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	69db      	ldr	r3, [r3, #28]
 8014130:	431a      	orrs	r2, r3
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	699b      	ldr	r3, [r3, #24]
 8014136:	ea42 0103 	orr.w	r1, r2, r3
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	430a      	orrs	r2, r1
 8014142:	615a      	str	r2, [r3, #20]
}
 8014144:	e050      	b.n	80141e8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	69db      	ldr	r3, [r3, #28]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d02a      	beq.n	80141a4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014156:	431a      	orrs	r2, r3
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801415c:	431a      	orrs	r2, r3
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014162:	431a      	orrs	r2, r3
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	695b      	ldr	r3, [r3, #20]
 8014168:	049b      	lsls	r3, r3, #18
 801416a:	431a      	orrs	r2, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	6a1b      	ldr	r3, [r3, #32]
 8014170:	431a      	orrs	r2, r3
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	68db      	ldr	r3, [r3, #12]
 8014176:	431a      	orrs	r2, r3
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	69db      	ldr	r3, [r3, #28]
 801417c:	431a      	orrs	r2, r3
 801417e:	68bb      	ldr	r3, [r7, #8]
 8014180:	699b      	ldr	r3, [r3, #24]
 8014182:	ea42 0103 	orr.w	r1, r2, r3
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	687a      	ldr	r2, [r7, #4]
 801418c:	430a      	orrs	r2, r1
 801418e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8014196:	d027      	beq.n	80141e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	68ba      	ldr	r2, [r7, #8]
 801419e:	6852      	ldr	r2, [r2, #4]
 80141a0:	619a      	str	r2, [r3, #24]
}
 80141a2:	e021      	b.n	80141e8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d01d      	beq.n	80141e8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141b4:	431a      	orrs	r2, r3
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141ba:	431a      	orrs	r2, r3
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141c0:	431a      	orrs	r2, r3
 80141c2:	68bb      	ldr	r3, [r7, #8]
 80141c4:	695b      	ldr	r3, [r3, #20]
 80141c6:	049b      	lsls	r3, r3, #18
 80141c8:	431a      	orrs	r2, r3
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	6a1b      	ldr	r3, [r3, #32]
 80141ce:	431a      	orrs	r2, r3
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	69db      	ldr	r3, [r3, #28]
 80141d4:	431a      	orrs	r2, r3
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	699b      	ldr	r3, [r3, #24]
 80141da:	ea42 0103 	orr.w	r1, r2, r3
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	687a      	ldr	r2, [r7, #4]
 80141e4:	430a      	orrs	r2, r1
 80141e6:	615a      	str	r2, [r3, #20]
}
 80141e8:	bf00      	nop
 80141ea:	3714      	adds	r7, #20
 80141ec:	46bd      	mov	sp, r7
 80141ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f2:	4770      	bx	lr

080141f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b08c      	sub	sp, #48	; 0x30
 80141f8:	af00      	add	r7, sp, #0
 80141fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d102      	bne.n	8014208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014202:	2301      	movs	r3, #1
 8014204:	f000 bc48 	b.w	8014a98 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	f003 0301 	and.w	r3, r3, #1
 8014210:	2b00      	cmp	r3, #0
 8014212:	f000 8088 	beq.w	8014326 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014216:	4b99      	ldr	r3, [pc, #612]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014218:	691b      	ldr	r3, [r3, #16]
 801421a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801421e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014220:	4b96      	ldr	r3, [pc, #600]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014224:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014228:	2b10      	cmp	r3, #16
 801422a:	d007      	beq.n	801423c <HAL_RCC_OscConfig+0x48>
 801422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422e:	2b18      	cmp	r3, #24
 8014230:	d111      	bne.n	8014256 <HAL_RCC_OscConfig+0x62>
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	f003 0303 	and.w	r3, r3, #3
 8014238:	2b02      	cmp	r3, #2
 801423a:	d10c      	bne.n	8014256 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801423c:	4b8f      	ldr	r3, [pc, #572]	; (801447c <HAL_RCC_OscConfig+0x288>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014244:	2b00      	cmp	r3, #0
 8014246:	d06d      	beq.n	8014324 <HAL_RCC_OscConfig+0x130>
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d169      	bne.n	8014324 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8014250:	2301      	movs	r3, #1
 8014252:	f000 bc21 	b.w	8014a98 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801425e:	d106      	bne.n	801426e <HAL_RCC_OscConfig+0x7a>
 8014260:	4b86      	ldr	r3, [pc, #536]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	4a85      	ldr	r2, [pc, #532]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801426a:	6013      	str	r3, [r2, #0]
 801426c:	e02e      	b.n	80142cc <HAL_RCC_OscConfig+0xd8>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d10c      	bne.n	8014290 <HAL_RCC_OscConfig+0x9c>
 8014276:	4b81      	ldr	r3, [pc, #516]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4a80      	ldr	r2, [pc, #512]	; (801447c <HAL_RCC_OscConfig+0x288>)
 801427c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014280:	6013      	str	r3, [r2, #0]
 8014282:	4b7e      	ldr	r3, [pc, #504]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	4a7d      	ldr	r2, [pc, #500]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801428c:	6013      	str	r3, [r2, #0]
 801428e:	e01d      	b.n	80142cc <HAL_RCC_OscConfig+0xd8>
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014298:	d10c      	bne.n	80142b4 <HAL_RCC_OscConfig+0xc0>
 801429a:	4b78      	ldr	r3, [pc, #480]	; (801447c <HAL_RCC_OscConfig+0x288>)
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4a77      	ldr	r2, [pc, #476]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80142a4:	6013      	str	r3, [r2, #0]
 80142a6:	4b75      	ldr	r3, [pc, #468]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	4a74      	ldr	r2, [pc, #464]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80142b0:	6013      	str	r3, [r2, #0]
 80142b2:	e00b      	b.n	80142cc <HAL_RCC_OscConfig+0xd8>
 80142b4:	4b71      	ldr	r3, [pc, #452]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	4a70      	ldr	r2, [pc, #448]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80142be:	6013      	str	r3, [r2, #0]
 80142c0:	4b6e      	ldr	r3, [pc, #440]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a6d      	ldr	r2, [pc, #436]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80142ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d013      	beq.n	80142fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142d4:	f7fc fdc4 	bl	8010e60 <HAL_GetTick>
 80142d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80142da:	e008      	b.n	80142ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80142dc:	f7fc fdc0 	bl	8010e60 <HAL_GetTick>
 80142e0:	4602      	mov	r2, r0
 80142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	2b64      	cmp	r3, #100	; 0x64
 80142e8:	d901      	bls.n	80142ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80142ea:	2303      	movs	r3, #3
 80142ec:	e3d4      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80142ee:	4b63      	ldr	r3, [pc, #396]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d0f0      	beq.n	80142dc <HAL_RCC_OscConfig+0xe8>
 80142fa:	e014      	b.n	8014326 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80142fc:	f7fc fdb0 	bl	8010e60 <HAL_GetTick>
 8014300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014302:	e008      	b.n	8014316 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014304:	f7fc fdac 	bl	8010e60 <HAL_GetTick>
 8014308:	4602      	mov	r2, r0
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	1ad3      	subs	r3, r2, r3
 801430e:	2b64      	cmp	r3, #100	; 0x64
 8014310:	d901      	bls.n	8014316 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8014312:	2303      	movs	r3, #3
 8014314:	e3c0      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014316:	4b59      	ldr	r3, [pc, #356]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801431e:	2b00      	cmp	r3, #0
 8014320:	d1f0      	bne.n	8014304 <HAL_RCC_OscConfig+0x110>
 8014322:	e000      	b.n	8014326 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	f003 0302 	and.w	r3, r3, #2
 801432e:	2b00      	cmp	r3, #0
 8014330:	f000 80ca 	beq.w	80144c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014334:	4b51      	ldr	r3, [pc, #324]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014336:	691b      	ldr	r3, [r3, #16]
 8014338:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801433c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801433e:	4b4f      	ldr	r3, [pc, #316]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014342:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8014344:	6a3b      	ldr	r3, [r7, #32]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d007      	beq.n	801435a <HAL_RCC_OscConfig+0x166>
 801434a:	6a3b      	ldr	r3, [r7, #32]
 801434c:	2b18      	cmp	r3, #24
 801434e:	d156      	bne.n	80143fe <HAL_RCC_OscConfig+0x20a>
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d151      	bne.n	80143fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801435a:	4b48      	ldr	r3, [pc, #288]	; (801447c <HAL_RCC_OscConfig+0x288>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f003 0304 	and.w	r3, r3, #4
 8014362:	2b00      	cmp	r3, #0
 8014364:	d005      	beq.n	8014372 <HAL_RCC_OscConfig+0x17e>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	68db      	ldr	r3, [r3, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d101      	bne.n	8014372 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801436e:	2301      	movs	r3, #1
 8014370:	e392      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014372:	4b42      	ldr	r3, [pc, #264]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f023 0219 	bic.w	r2, r3, #25
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	493f      	ldr	r1, [pc, #252]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014380:	4313      	orrs	r3, r2
 8014382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014384:	f7fc fd6c 	bl	8010e60 <HAL_GetTick>
 8014388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801438a:	e008      	b.n	801439e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801438c:	f7fc fd68 	bl	8010e60 <HAL_GetTick>
 8014390:	4602      	mov	r2, r0
 8014392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	2b02      	cmp	r3, #2
 8014398:	d901      	bls.n	801439e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801439a:	2303      	movs	r3, #3
 801439c:	e37c      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801439e:	4b37      	ldr	r3, [pc, #220]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	f003 0304 	and.w	r3, r3, #4
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d0f0      	beq.n	801438c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80143aa:	f7fc fd65 	bl	8010e78 <HAL_GetREVID>
 80143ae:	4603      	mov	r3, r0
 80143b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d817      	bhi.n	80143e8 <HAL_RCC_OscConfig+0x1f4>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	691b      	ldr	r3, [r3, #16]
 80143bc:	2b40      	cmp	r3, #64	; 0x40
 80143be:	d108      	bne.n	80143d2 <HAL_RCC_OscConfig+0x1de>
 80143c0:	4b2e      	ldr	r3, [pc, #184]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80143c8:	4a2c      	ldr	r2, [pc, #176]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80143ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80143d0:	e07a      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80143d2:	4b2a      	ldr	r3, [pc, #168]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143d4:	685b      	ldr	r3, [r3, #4]
 80143d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	691b      	ldr	r3, [r3, #16]
 80143de:	031b      	lsls	r3, r3, #12
 80143e0:	4926      	ldr	r1, [pc, #152]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143e2:	4313      	orrs	r3, r2
 80143e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80143e6:	e06f      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80143e8:	4b24      	ldr	r3, [pc, #144]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	691b      	ldr	r3, [r3, #16]
 80143f4:	061b      	lsls	r3, r3, #24
 80143f6:	4921      	ldr	r1, [pc, #132]	; (801447c <HAL_RCC_OscConfig+0x288>)
 80143f8:	4313      	orrs	r3, r2
 80143fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80143fc:	e064      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d047      	beq.n	8014496 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014406:	4b1d      	ldr	r3, [pc, #116]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	f023 0219 	bic.w	r2, r3, #25
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	491a      	ldr	r1, [pc, #104]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014414:	4313      	orrs	r3, r2
 8014416:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014418:	f7fc fd22 	bl	8010e60 <HAL_GetTick>
 801441c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801441e:	e008      	b.n	8014432 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014420:	f7fc fd1e 	bl	8010e60 <HAL_GetTick>
 8014424:	4602      	mov	r2, r0
 8014426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014428:	1ad3      	subs	r3, r2, r3
 801442a:	2b02      	cmp	r3, #2
 801442c:	d901      	bls.n	8014432 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801442e:	2303      	movs	r3, #3
 8014430:	e332      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014432:	4b12      	ldr	r3, [pc, #72]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	f003 0304 	and.w	r3, r3, #4
 801443a:	2b00      	cmp	r3, #0
 801443c:	d0f0      	beq.n	8014420 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801443e:	f7fc fd1b 	bl	8010e78 <HAL_GetREVID>
 8014442:	4603      	mov	r3, r0
 8014444:	f241 0203 	movw	r2, #4099	; 0x1003
 8014448:	4293      	cmp	r3, r2
 801444a:	d819      	bhi.n	8014480 <HAL_RCC_OscConfig+0x28c>
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	691b      	ldr	r3, [r3, #16]
 8014450:	2b40      	cmp	r3, #64	; 0x40
 8014452:	d108      	bne.n	8014466 <HAL_RCC_OscConfig+0x272>
 8014454:	4b09      	ldr	r3, [pc, #36]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801445c:	4a07      	ldr	r2, [pc, #28]	; (801447c <HAL_RCC_OscConfig+0x288>)
 801445e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014462:	6053      	str	r3, [r2, #4]
 8014464:	e030      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
 8014466:	4b05      	ldr	r3, [pc, #20]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	691b      	ldr	r3, [r3, #16]
 8014472:	031b      	lsls	r3, r3, #12
 8014474:	4901      	ldr	r1, [pc, #4]	; (801447c <HAL_RCC_OscConfig+0x288>)
 8014476:	4313      	orrs	r3, r2
 8014478:	604b      	str	r3, [r1, #4]
 801447a:	e025      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
 801447c:	58024400 	.word	0x58024400
 8014480:	4b9a      	ldr	r3, [pc, #616]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	691b      	ldr	r3, [r3, #16]
 801448c:	061b      	lsls	r3, r3, #24
 801448e:	4997      	ldr	r1, [pc, #604]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014490:	4313      	orrs	r3, r2
 8014492:	604b      	str	r3, [r1, #4]
 8014494:	e018      	b.n	80144c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014496:	4b95      	ldr	r3, [pc, #596]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	4a94      	ldr	r2, [pc, #592]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801449c:	f023 0301 	bic.w	r3, r3, #1
 80144a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144a2:	f7fc fcdd 	bl	8010e60 <HAL_GetTick>
 80144a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80144a8:	e008      	b.n	80144bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80144aa:	f7fc fcd9 	bl	8010e60 <HAL_GetTick>
 80144ae:	4602      	mov	r2, r0
 80144b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b2:	1ad3      	subs	r3, r2, r3
 80144b4:	2b02      	cmp	r3, #2
 80144b6:	d901      	bls.n	80144bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80144b8:	2303      	movs	r3, #3
 80144ba:	e2ed      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80144bc:	4b8b      	ldr	r3, [pc, #556]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	f003 0304 	and.w	r3, r3, #4
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1f0      	bne.n	80144aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	f003 0310 	and.w	r3, r3, #16
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	f000 80a9 	beq.w	8014628 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80144d6:	4b85      	ldr	r3, [pc, #532]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80144d8:	691b      	ldr	r3, [r3, #16]
 80144da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80144de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80144e0:	4b82      	ldr	r3, [pc, #520]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80144e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	2b08      	cmp	r3, #8
 80144ea:	d007      	beq.n	80144fc <HAL_RCC_OscConfig+0x308>
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	2b18      	cmp	r3, #24
 80144f0:	d13a      	bne.n	8014568 <HAL_RCC_OscConfig+0x374>
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	f003 0303 	and.w	r3, r3, #3
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d135      	bne.n	8014568 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80144fc:	4b7b      	ldr	r3, [pc, #492]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014504:	2b00      	cmp	r3, #0
 8014506:	d005      	beq.n	8014514 <HAL_RCC_OscConfig+0x320>
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	69db      	ldr	r3, [r3, #28]
 801450c:	2b80      	cmp	r3, #128	; 0x80
 801450e:	d001      	beq.n	8014514 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8014510:	2301      	movs	r3, #1
 8014512:	e2c1      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014514:	f7fc fcb0 	bl	8010e78 <HAL_GetREVID>
 8014518:	4603      	mov	r3, r0
 801451a:	f241 0203 	movw	r2, #4099	; 0x1003
 801451e:	4293      	cmp	r3, r2
 8014520:	d817      	bhi.n	8014552 <HAL_RCC_OscConfig+0x35e>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6a1b      	ldr	r3, [r3, #32]
 8014526:	2b20      	cmp	r3, #32
 8014528:	d108      	bne.n	801453c <HAL_RCC_OscConfig+0x348>
 801452a:	4b70      	ldr	r3, [pc, #448]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801452c:	685b      	ldr	r3, [r3, #4]
 801452e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8014532:	4a6e      	ldr	r2, [pc, #440]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014538:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801453a:	e075      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801453c:	4b6b      	ldr	r3, [pc, #428]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	6a1b      	ldr	r3, [r3, #32]
 8014548:	069b      	lsls	r3, r3, #26
 801454a:	4968      	ldr	r1, [pc, #416]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801454c:	4313      	orrs	r3, r2
 801454e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014550:	e06a      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014552:	4b66      	ldr	r3, [pc, #408]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014554:	68db      	ldr	r3, [r3, #12]
 8014556:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6a1b      	ldr	r3, [r3, #32]
 801455e:	061b      	lsls	r3, r3, #24
 8014560:	4962      	ldr	r1, [pc, #392]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014562:	4313      	orrs	r3, r2
 8014564:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014566:	e05f      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	69db      	ldr	r3, [r3, #28]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d042      	beq.n	80145f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014570:	4b5e      	ldr	r3, [pc, #376]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a5d      	ldr	r2, [pc, #372]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801457c:	f7fc fc70 	bl	8010e60 <HAL_GetTick>
 8014580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014582:	e008      	b.n	8014596 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8014584:	f7fc fc6c 	bl	8010e60 <HAL_GetTick>
 8014588:	4602      	mov	r2, r0
 801458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801458c:	1ad3      	subs	r3, r2, r3
 801458e:	2b02      	cmp	r3, #2
 8014590:	d901      	bls.n	8014596 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8014592:	2303      	movs	r3, #3
 8014594:	e280      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014596:	4b55      	ldr	r3, [pc, #340]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d0f0      	beq.n	8014584 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80145a2:	f7fc fc69 	bl	8010e78 <HAL_GetREVID>
 80145a6:	4603      	mov	r3, r0
 80145a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d817      	bhi.n	80145e0 <HAL_RCC_OscConfig+0x3ec>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6a1b      	ldr	r3, [r3, #32]
 80145b4:	2b20      	cmp	r3, #32
 80145b6:	d108      	bne.n	80145ca <HAL_RCC_OscConfig+0x3d6>
 80145b8:	4b4c      	ldr	r3, [pc, #304]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80145c0:	4a4a      	ldr	r2, [pc, #296]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80145c6:	6053      	str	r3, [r2, #4]
 80145c8:	e02e      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
 80145ca:	4b48      	ldr	r3, [pc, #288]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6a1b      	ldr	r3, [r3, #32]
 80145d6:	069b      	lsls	r3, r3, #26
 80145d8:	4944      	ldr	r1, [pc, #272]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145da:	4313      	orrs	r3, r2
 80145dc:	604b      	str	r3, [r1, #4]
 80145de:	e023      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
 80145e0:	4b42      	ldr	r3, [pc, #264]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6a1b      	ldr	r3, [r3, #32]
 80145ec:	061b      	lsls	r3, r3, #24
 80145ee:	493f      	ldr	r1, [pc, #252]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145f0:	4313      	orrs	r3, r2
 80145f2:	60cb      	str	r3, [r1, #12]
 80145f4:	e018      	b.n	8014628 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80145f6:	4b3d      	ldr	r3, [pc, #244]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	4a3c      	ldr	r2, [pc, #240]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80145fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014602:	f7fc fc2d 	bl	8010e60 <HAL_GetTick>
 8014606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014608:	e008      	b.n	801461c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801460a:	f7fc fc29 	bl	8010e60 <HAL_GetTick>
 801460e:	4602      	mov	r2, r0
 8014610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	2b02      	cmp	r3, #2
 8014616:	d901      	bls.n	801461c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8014618:	2303      	movs	r3, #3
 801461a:	e23d      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801461c:	4b33      	ldr	r3, [pc, #204]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014624:	2b00      	cmp	r3, #0
 8014626:	d1f0      	bne.n	801460a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	f003 0308 	and.w	r3, r3, #8
 8014630:	2b00      	cmp	r3, #0
 8014632:	d036      	beq.n	80146a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	695b      	ldr	r3, [r3, #20]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d019      	beq.n	8014670 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801463c:	4b2b      	ldr	r3, [pc, #172]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 801463e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014640:	4a2a      	ldr	r2, [pc, #168]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014642:	f043 0301 	orr.w	r3, r3, #1
 8014646:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014648:	f7fc fc0a 	bl	8010e60 <HAL_GetTick>
 801464c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801464e:	e008      	b.n	8014662 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014650:	f7fc fc06 	bl	8010e60 <HAL_GetTick>
 8014654:	4602      	mov	r2, r0
 8014656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	2b02      	cmp	r3, #2
 801465c:	d901      	bls.n	8014662 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801465e:	2303      	movs	r3, #3
 8014660:	e21a      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014662:	4b22      	ldr	r3, [pc, #136]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014666:	f003 0302 	and.w	r3, r3, #2
 801466a:	2b00      	cmp	r3, #0
 801466c:	d0f0      	beq.n	8014650 <HAL_RCC_OscConfig+0x45c>
 801466e:	e018      	b.n	80146a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014670:	4b1e      	ldr	r3, [pc, #120]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014674:	4a1d      	ldr	r2, [pc, #116]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014676:	f023 0301 	bic.w	r3, r3, #1
 801467a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801467c:	f7fc fbf0 	bl	8010e60 <HAL_GetTick>
 8014680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014682:	e008      	b.n	8014696 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8014684:	f7fc fbec 	bl	8010e60 <HAL_GetTick>
 8014688:	4602      	mov	r2, r0
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	1ad3      	subs	r3, r2, r3
 801468e:	2b02      	cmp	r3, #2
 8014690:	d901      	bls.n	8014696 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8014692:	2303      	movs	r3, #3
 8014694:	e200      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014696:	4b15      	ldr	r3, [pc, #84]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 8014698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801469a:	f003 0302 	and.w	r3, r3, #2
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1f0      	bne.n	8014684 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	f003 0320 	and.w	r3, r3, #32
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d039      	beq.n	8014722 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	699b      	ldr	r3, [r3, #24]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d01c      	beq.n	80146f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80146b6:	4b0d      	ldr	r3, [pc, #52]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	4a0c      	ldr	r2, [pc, #48]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80146bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80146c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80146c2:	f7fc fbcd 	bl	8010e60 <HAL_GetTick>
 80146c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80146c8:	e008      	b.n	80146dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80146ca:	f7fc fbc9 	bl	8010e60 <HAL_GetTick>
 80146ce:	4602      	mov	r2, r0
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d901      	bls.n	80146dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80146d8:	2303      	movs	r3, #3
 80146da:	e1dd      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80146dc:	4b03      	ldr	r3, [pc, #12]	; (80146ec <HAL_RCC_OscConfig+0x4f8>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d0f0      	beq.n	80146ca <HAL_RCC_OscConfig+0x4d6>
 80146e8:	e01b      	b.n	8014722 <HAL_RCC_OscConfig+0x52e>
 80146ea:	bf00      	nop
 80146ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80146f0:	4b9b      	ldr	r3, [pc, #620]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	4a9a      	ldr	r2, [pc, #616]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80146f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80146fc:	f7fc fbb0 	bl	8010e60 <HAL_GetTick>
 8014700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014702:	e008      	b.n	8014716 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014704:	f7fc fbac 	bl	8010e60 <HAL_GetTick>
 8014708:	4602      	mov	r2, r0
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	1ad3      	subs	r3, r2, r3
 801470e:	2b02      	cmp	r3, #2
 8014710:	d901      	bls.n	8014716 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8014712:	2303      	movs	r3, #3
 8014714:	e1c0      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014716:	4b92      	ldr	r3, [pc, #584]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801471e:	2b00      	cmp	r3, #0
 8014720:	d1f0      	bne.n	8014704 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	f003 0304 	and.w	r3, r3, #4
 801472a:	2b00      	cmp	r3, #0
 801472c:	f000 8081 	beq.w	8014832 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014730:	4b8c      	ldr	r3, [pc, #560]	; (8014964 <HAL_RCC_OscConfig+0x770>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	4a8b      	ldr	r2, [pc, #556]	; (8014964 <HAL_RCC_OscConfig+0x770>)
 8014736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801473a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801473c:	f7fc fb90 	bl	8010e60 <HAL_GetTick>
 8014740:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014742:	e008      	b.n	8014756 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014744:	f7fc fb8c 	bl	8010e60 <HAL_GetTick>
 8014748:	4602      	mov	r2, r0
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	2b64      	cmp	r3, #100	; 0x64
 8014750:	d901      	bls.n	8014756 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8014752:	2303      	movs	r3, #3
 8014754:	e1a0      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014756:	4b83      	ldr	r3, [pc, #524]	; (8014964 <HAL_RCC_OscConfig+0x770>)
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801475e:	2b00      	cmp	r3, #0
 8014760:	d0f0      	beq.n	8014744 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	689b      	ldr	r3, [r3, #8]
 8014766:	2b01      	cmp	r3, #1
 8014768:	d106      	bne.n	8014778 <HAL_RCC_OscConfig+0x584>
 801476a:	4b7d      	ldr	r3, [pc, #500]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801476e:	4a7c      	ldr	r2, [pc, #496]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014770:	f043 0301 	orr.w	r3, r3, #1
 8014774:	6713      	str	r3, [r2, #112]	; 0x70
 8014776:	e02d      	b.n	80147d4 <HAL_RCC_OscConfig+0x5e0>
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d10c      	bne.n	801479a <HAL_RCC_OscConfig+0x5a6>
 8014780:	4b77      	ldr	r3, [pc, #476]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014784:	4a76      	ldr	r2, [pc, #472]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014786:	f023 0301 	bic.w	r3, r3, #1
 801478a:	6713      	str	r3, [r2, #112]	; 0x70
 801478c:	4b74      	ldr	r3, [pc, #464]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014790:	4a73      	ldr	r2, [pc, #460]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014792:	f023 0304 	bic.w	r3, r3, #4
 8014796:	6713      	str	r3, [r2, #112]	; 0x70
 8014798:	e01c      	b.n	80147d4 <HAL_RCC_OscConfig+0x5e0>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	2b05      	cmp	r3, #5
 80147a0:	d10c      	bne.n	80147bc <HAL_RCC_OscConfig+0x5c8>
 80147a2:	4b6f      	ldr	r3, [pc, #444]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147a6:	4a6e      	ldr	r2, [pc, #440]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147a8:	f043 0304 	orr.w	r3, r3, #4
 80147ac:	6713      	str	r3, [r2, #112]	; 0x70
 80147ae:	4b6c      	ldr	r3, [pc, #432]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147b2:	4a6b      	ldr	r2, [pc, #428]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147b4:	f043 0301 	orr.w	r3, r3, #1
 80147b8:	6713      	str	r3, [r2, #112]	; 0x70
 80147ba:	e00b      	b.n	80147d4 <HAL_RCC_OscConfig+0x5e0>
 80147bc:	4b68      	ldr	r3, [pc, #416]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147c0:	4a67      	ldr	r2, [pc, #412]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147c2:	f023 0301 	bic.w	r3, r3, #1
 80147c6:	6713      	str	r3, [r2, #112]	; 0x70
 80147c8:	4b65      	ldr	r3, [pc, #404]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147cc:	4a64      	ldr	r2, [pc, #400]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147ce:	f023 0304 	bic.w	r3, r3, #4
 80147d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	689b      	ldr	r3, [r3, #8]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d015      	beq.n	8014808 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80147dc:	f7fc fb40 	bl	8010e60 <HAL_GetTick>
 80147e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80147e2:	e00a      	b.n	80147fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80147e4:	f7fc fb3c 	bl	8010e60 <HAL_GetTick>
 80147e8:	4602      	mov	r2, r0
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	1ad3      	subs	r3, r2, r3
 80147ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d901      	bls.n	80147fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80147f6:	2303      	movs	r3, #3
 80147f8:	e14e      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80147fa:	4b59      	ldr	r3, [pc, #356]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80147fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80147fe:	f003 0302 	and.w	r3, r3, #2
 8014802:	2b00      	cmp	r3, #0
 8014804:	d0ee      	beq.n	80147e4 <HAL_RCC_OscConfig+0x5f0>
 8014806:	e014      	b.n	8014832 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014808:	f7fc fb2a 	bl	8010e60 <HAL_GetTick>
 801480c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801480e:	e00a      	b.n	8014826 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014810:	f7fc fb26 	bl	8010e60 <HAL_GetTick>
 8014814:	4602      	mov	r2, r0
 8014816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014818:	1ad3      	subs	r3, r2, r3
 801481a:	f241 3288 	movw	r2, #5000	; 0x1388
 801481e:	4293      	cmp	r3, r2
 8014820:	d901      	bls.n	8014826 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8014822:	2303      	movs	r3, #3
 8014824:	e138      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014826:	4b4e      	ldr	r3, [pc, #312]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801482a:	f003 0302 	and.w	r3, r3, #2
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1ee      	bne.n	8014810 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014836:	2b00      	cmp	r3, #0
 8014838:	f000 812d 	beq.w	8014a96 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801483c:	4b48      	ldr	r3, [pc, #288]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801483e:	691b      	ldr	r3, [r3, #16]
 8014840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014844:	2b18      	cmp	r3, #24
 8014846:	f000 80bd 	beq.w	80149c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484e:	2b02      	cmp	r3, #2
 8014850:	f040 809e 	bne.w	8014990 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014854:	4b42      	ldr	r3, [pc, #264]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4a41      	ldr	r2, [pc, #260]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801485a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801485e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014860:	f7fc fafe 	bl	8010e60 <HAL_GetTick>
 8014864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014866:	e008      	b.n	801487a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014868:	f7fc fafa 	bl	8010e60 <HAL_GetTick>
 801486c:	4602      	mov	r2, r0
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	1ad3      	subs	r3, r2, r3
 8014872:	2b02      	cmp	r3, #2
 8014874:	d901      	bls.n	801487a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8014876:	2303      	movs	r3, #3
 8014878:	e10e      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801487a:	4b39      	ldr	r3, [pc, #228]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014882:	2b00      	cmp	r3, #0
 8014884:	d1f0      	bne.n	8014868 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014886:	4b36      	ldr	r3, [pc, #216]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801488a:	4b37      	ldr	r3, [pc, #220]	; (8014968 <HAL_RCC_OscConfig+0x774>)
 801488c:	4013      	ands	r3, r2
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014896:	0112      	lsls	r2, r2, #4
 8014898:	430a      	orrs	r2, r1
 801489a:	4931      	ldr	r1, [pc, #196]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801489c:	4313      	orrs	r3, r2
 801489e:	628b      	str	r3, [r1, #40]	; 0x28
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a4:	3b01      	subs	r3, #1
 80148a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ae:	3b01      	subs	r3, #1
 80148b0:	025b      	lsls	r3, r3, #9
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	431a      	orrs	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80148ba:	3b01      	subs	r3, #1
 80148bc:	041b      	lsls	r3, r3, #16
 80148be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80148c2:	431a      	orrs	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80148c8:	3b01      	subs	r3, #1
 80148ca:	061b      	lsls	r3, r3, #24
 80148cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80148d0:	4923      	ldr	r1, [pc, #140]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148d2:	4313      	orrs	r3, r2
 80148d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80148d6:	4b22      	ldr	r3, [pc, #136]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148da:	4a21      	ldr	r2, [pc, #132]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148dc:	f023 0301 	bic.w	r3, r3, #1
 80148e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80148e2:	4b1f      	ldr	r3, [pc, #124]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80148e6:	4b21      	ldr	r3, [pc, #132]	; (801496c <HAL_RCC_OscConfig+0x778>)
 80148e8:	4013      	ands	r3, r2
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80148ee:	00d2      	lsls	r2, r2, #3
 80148f0:	491b      	ldr	r1, [pc, #108]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148f2:	4313      	orrs	r3, r2
 80148f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80148f6:	4b1a      	ldr	r3, [pc, #104]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 80148f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148fa:	f023 020c 	bic.w	r2, r3, #12
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014902:	4917      	ldr	r1, [pc, #92]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014904:	4313      	orrs	r3, r2
 8014906:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014908:	4b15      	ldr	r3, [pc, #84]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801490c:	f023 0202 	bic.w	r2, r3, #2
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014914:	4912      	ldr	r1, [pc, #72]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014916:	4313      	orrs	r3, r2
 8014918:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801491a:	4b11      	ldr	r3, [pc, #68]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801491e:	4a10      	ldr	r2, [pc, #64]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014924:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014926:	4b0e      	ldr	r3, [pc, #56]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801492a:	4a0d      	ldr	r2, [pc, #52]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801492c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014930:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014932:	4b0b      	ldr	r3, [pc, #44]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014936:	4a0a      	ldr	r2, [pc, #40]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801493c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801493e:	4b08      	ldr	r3, [pc, #32]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014942:	4a07      	ldr	r2, [pc, #28]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014944:	f043 0301 	orr.w	r3, r3, #1
 8014948:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801494a:	4b05      	ldr	r3, [pc, #20]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	4a04      	ldr	r2, [pc, #16]	; (8014960 <HAL_RCC_OscConfig+0x76c>)
 8014950:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014956:	f7fc fa83 	bl	8010e60 <HAL_GetTick>
 801495a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801495c:	e011      	b.n	8014982 <HAL_RCC_OscConfig+0x78e>
 801495e:	bf00      	nop
 8014960:	58024400 	.word	0x58024400
 8014964:	58024800 	.word	0x58024800
 8014968:	fffffc0c 	.word	0xfffffc0c
 801496c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014970:	f7fc fa76 	bl	8010e60 <HAL_GetTick>
 8014974:	4602      	mov	r2, r0
 8014976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	2b02      	cmp	r3, #2
 801497c:	d901      	bls.n	8014982 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801497e:	2303      	movs	r3, #3
 8014980:	e08a      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014982:	4b47      	ldr	r3, [pc, #284]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801498a:	2b00      	cmp	r3, #0
 801498c:	d0f0      	beq.n	8014970 <HAL_RCC_OscConfig+0x77c>
 801498e:	e082      	b.n	8014a96 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014990:	4b43      	ldr	r3, [pc, #268]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	4a42      	ldr	r2, [pc, #264]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801499a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801499c:	f7fc fa60 	bl	8010e60 <HAL_GetTick>
 80149a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80149a2:	e008      	b.n	80149b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80149a4:	f7fc fa5c 	bl	8010e60 <HAL_GetTick>
 80149a8:	4602      	mov	r2, r0
 80149aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ac:	1ad3      	subs	r3, r2, r3
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d901      	bls.n	80149b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80149b2:	2303      	movs	r3, #3
 80149b4:	e070      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80149b6:	4b3a      	ldr	r3, [pc, #232]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d1f0      	bne.n	80149a4 <HAL_RCC_OscConfig+0x7b0>
 80149c2:	e068      	b.n	8014a96 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80149c4:	4b36      	ldr	r3, [pc, #216]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 80149c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80149ca:	4b35      	ldr	r3, [pc, #212]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 80149cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d031      	beq.n	8014a3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	f003 0203 	and.w	r2, r3, #3
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d12a      	bne.n	8014a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	091b      	lsrs	r3, r3, #4
 80149ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d122      	bne.n	8014a3c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a00:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d11a      	bne.n	8014a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	0a5b      	lsrs	r3, r3, #9
 8014a0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a12:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d111      	bne.n	8014a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	0c1b      	lsrs	r3, r3, #16
 8014a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a24:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014a26:	429a      	cmp	r2, r3
 8014a28:	d108      	bne.n	8014a3c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	0e1b      	lsrs	r3, r3, #24
 8014a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014a36:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d001      	beq.n	8014a40 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e02b      	b.n	8014a98 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8014a40:	4b17      	ldr	r3, [pc, #92]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a44:	08db      	lsrs	r3, r3, #3
 8014a46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a4a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a50:	693a      	ldr	r2, [r7, #16]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d01f      	beq.n	8014a96 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8014a56:	4b12      	ldr	r3, [pc, #72]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a5a:	4a11      	ldr	r2, [pc, #68]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a5c:	f023 0301 	bic.w	r3, r3, #1
 8014a60:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014a62:	f7fc f9fd 	bl	8010e60 <HAL_GetTick>
 8014a66:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014a68:	bf00      	nop
 8014a6a:	f7fc f9f9 	bl	8010e60 <HAL_GetTick>
 8014a6e:	4602      	mov	r2, r0
 8014a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d0f9      	beq.n	8014a6a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014a76:	4b0a      	ldr	r3, [pc, #40]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a7a:	4b0a      	ldr	r3, [pc, #40]	; (8014aa4 <HAL_RCC_OscConfig+0x8b0>)
 8014a7c:	4013      	ands	r3, r2
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014a82:	00d2      	lsls	r2, r2, #3
 8014a84:	4906      	ldr	r1, [pc, #24]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a86:	4313      	orrs	r3, r2
 8014a88:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014a8a:	4b05      	ldr	r3, [pc, #20]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8e:	4a04      	ldr	r2, [pc, #16]	; (8014aa0 <HAL_RCC_OscConfig+0x8ac>)
 8014a90:	f043 0301 	orr.w	r3, r3, #1
 8014a94:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014a96:	2300      	movs	r3, #0
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	3730      	adds	r7, #48	; 0x30
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}
 8014aa0:	58024400 	.word	0x58024400
 8014aa4:	ffff0007 	.word	0xffff0007

08014aa8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b086      	sub	sp, #24
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d101      	bne.n	8014abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014ab8:	2301      	movs	r3, #1
 8014aba:	e19c      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014abc:	4b8a      	ldr	r3, [pc, #552]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	f003 030f 	and.w	r3, r3, #15
 8014ac4:	683a      	ldr	r2, [r7, #0]
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d910      	bls.n	8014aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014aca:	4b87      	ldr	r3, [pc, #540]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f023 020f 	bic.w	r2, r3, #15
 8014ad2:	4985      	ldr	r1, [pc, #532]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014ada:	4b83      	ldr	r3, [pc, #524]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	f003 030f 	and.w	r3, r3, #15
 8014ae2:	683a      	ldr	r2, [r7, #0]
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d001      	beq.n	8014aec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e184      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	f003 0304 	and.w	r3, r3, #4
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d010      	beq.n	8014b1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	691a      	ldr	r2, [r3, #16]
 8014afc:	4b7b      	ldr	r3, [pc, #492]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014afe:	699b      	ldr	r3, [r3, #24]
 8014b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014b04:	429a      	cmp	r2, r3
 8014b06:	d908      	bls.n	8014b1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014b08:	4b78      	ldr	r3, [pc, #480]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b0a:	699b      	ldr	r3, [r3, #24]
 8014b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	691b      	ldr	r3, [r3, #16]
 8014b14:	4975      	ldr	r1, [pc, #468]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b16:	4313      	orrs	r3, r2
 8014b18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	f003 0308 	and.w	r3, r3, #8
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d010      	beq.n	8014b48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	695a      	ldr	r2, [r3, #20]
 8014b2a:	4b70      	ldr	r3, [pc, #448]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b2c:	69db      	ldr	r3, [r3, #28]
 8014b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d908      	bls.n	8014b48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014b36:	4b6d      	ldr	r3, [pc, #436]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b38:	69db      	ldr	r3, [r3, #28]
 8014b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	695b      	ldr	r3, [r3, #20]
 8014b42:	496a      	ldr	r1, [pc, #424]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b44:	4313      	orrs	r3, r2
 8014b46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	f003 0310 	and.w	r3, r3, #16
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d010      	beq.n	8014b76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	699a      	ldr	r2, [r3, #24]
 8014b58:	4b64      	ldr	r3, [pc, #400]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b5a:	69db      	ldr	r3, [r3, #28]
 8014b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d908      	bls.n	8014b76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014b64:	4b61      	ldr	r3, [pc, #388]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b66:	69db      	ldr	r3, [r3, #28]
 8014b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	699b      	ldr	r3, [r3, #24]
 8014b70:	495e      	ldr	r1, [pc, #376]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b72:	4313      	orrs	r3, r2
 8014b74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	f003 0320 	and.w	r3, r3, #32
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d010      	beq.n	8014ba4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	69da      	ldr	r2, [r3, #28]
 8014b86:	4b59      	ldr	r3, [pc, #356]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b88:	6a1b      	ldr	r3, [r3, #32]
 8014b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d908      	bls.n	8014ba4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014b92:	4b56      	ldr	r3, [pc, #344]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014b94:	6a1b      	ldr	r3, [r3, #32]
 8014b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	69db      	ldr	r3, [r3, #28]
 8014b9e:	4953      	ldr	r1, [pc, #332]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014ba0:	4313      	orrs	r3, r2
 8014ba2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f003 0302 	and.w	r3, r3, #2
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d010      	beq.n	8014bd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	68da      	ldr	r2, [r3, #12]
 8014bb4:	4b4d      	ldr	r3, [pc, #308]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014bb6:	699b      	ldr	r3, [r3, #24]
 8014bb8:	f003 030f 	and.w	r3, r3, #15
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d908      	bls.n	8014bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014bc0:	4b4a      	ldr	r3, [pc, #296]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014bc2:	699b      	ldr	r3, [r3, #24]
 8014bc4:	f023 020f 	bic.w	r2, r3, #15
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	4947      	ldr	r1, [pc, #284]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014bce:	4313      	orrs	r3, r2
 8014bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f003 0301 	and.w	r3, r3, #1
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d055      	beq.n	8014c8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014bde:	4b43      	ldr	r3, [pc, #268]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014be0:	699b      	ldr	r3, [r3, #24]
 8014be2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	689b      	ldr	r3, [r3, #8]
 8014bea:	4940      	ldr	r1, [pc, #256]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014bec:	4313      	orrs	r3, r2
 8014bee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	2b02      	cmp	r3, #2
 8014bf6:	d107      	bne.n	8014c08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014bf8:	4b3c      	ldr	r3, [pc, #240]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d121      	bne.n	8014c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c04:	2301      	movs	r3, #1
 8014c06:	e0f6      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	2b03      	cmp	r3, #3
 8014c0e:	d107      	bne.n	8014c20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014c10:	4b36      	ldr	r3, [pc, #216]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d115      	bne.n	8014c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c1c:	2301      	movs	r3, #1
 8014c1e:	e0ea      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	2b01      	cmp	r3, #1
 8014c26:	d107      	bne.n	8014c38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014c28:	4b30      	ldr	r3, [pc, #192]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d109      	bne.n	8014c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c34:	2301      	movs	r3, #1
 8014c36:	e0de      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014c38:	4b2c      	ldr	r3, [pc, #176]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	f003 0304 	and.w	r3, r3, #4
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d101      	bne.n	8014c48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c44:	2301      	movs	r3, #1
 8014c46:	e0d6      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014c48:	4b28      	ldr	r3, [pc, #160]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c4a:	691b      	ldr	r3, [r3, #16]
 8014c4c:	f023 0207 	bic.w	r2, r3, #7
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	4925      	ldr	r1, [pc, #148]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c56:	4313      	orrs	r3, r2
 8014c58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014c5a:	f7fc f901 	bl	8010e60 <HAL_GetTick>
 8014c5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014c60:	e00a      	b.n	8014c78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014c62:	f7fc f8fd 	bl	8010e60 <HAL_GetTick>
 8014c66:	4602      	mov	r2, r0
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c70:	4293      	cmp	r3, r2
 8014c72:	d901      	bls.n	8014c78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014c74:	2303      	movs	r3, #3
 8014c76:	e0be      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014c78:	4b1c      	ldr	r3, [pc, #112]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c7a:	691b      	ldr	r3, [r3, #16]
 8014c7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	00db      	lsls	r3, r3, #3
 8014c86:	429a      	cmp	r2, r3
 8014c88:	d1eb      	bne.n	8014c62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	f003 0302 	and.w	r3, r3, #2
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d010      	beq.n	8014cb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	68da      	ldr	r2, [r3, #12]
 8014c9a:	4b14      	ldr	r3, [pc, #80]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014c9c:	699b      	ldr	r3, [r3, #24]
 8014c9e:	f003 030f 	and.w	r3, r3, #15
 8014ca2:	429a      	cmp	r2, r3
 8014ca4:	d208      	bcs.n	8014cb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014ca6:	4b11      	ldr	r3, [pc, #68]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014ca8:	699b      	ldr	r3, [r3, #24]
 8014caa:	f023 020f 	bic.w	r2, r3, #15
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	490e      	ldr	r1, [pc, #56]	; (8014cec <HAL_RCC_ClockConfig+0x244>)
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014cb8:	4b0b      	ldr	r3, [pc, #44]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f003 030f 	and.w	r3, r3, #15
 8014cc0:	683a      	ldr	r2, [r7, #0]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d214      	bcs.n	8014cf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014cc6:	4b08      	ldr	r3, [pc, #32]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	f023 020f 	bic.w	r2, r3, #15
 8014cce:	4906      	ldr	r1, [pc, #24]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014cd0:	683b      	ldr	r3, [r7, #0]
 8014cd2:	4313      	orrs	r3, r2
 8014cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014cd6:	4b04      	ldr	r3, [pc, #16]	; (8014ce8 <HAL_RCC_ClockConfig+0x240>)
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	f003 030f 	and.w	r3, r3, #15
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d005      	beq.n	8014cf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	e086      	b.n	8014df6 <HAL_RCC_ClockConfig+0x34e>
 8014ce8:	52002000 	.word	0x52002000
 8014cec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	f003 0304 	and.w	r3, r3, #4
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d010      	beq.n	8014d1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	691a      	ldr	r2, [r3, #16]
 8014d00:	4b3f      	ldr	r3, [pc, #252]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d02:	699b      	ldr	r3, [r3, #24]
 8014d04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d208      	bcs.n	8014d1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014d0c:	4b3c      	ldr	r3, [pc, #240]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d0e:	699b      	ldr	r3, [r3, #24]
 8014d10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	691b      	ldr	r3, [r3, #16]
 8014d18:	4939      	ldr	r1, [pc, #228]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d1a:	4313      	orrs	r3, r2
 8014d1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	f003 0308 	and.w	r3, r3, #8
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d010      	beq.n	8014d4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	695a      	ldr	r2, [r3, #20]
 8014d2e:	4b34      	ldr	r3, [pc, #208]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d30:	69db      	ldr	r3, [r3, #28]
 8014d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d208      	bcs.n	8014d4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014d3a:	4b31      	ldr	r3, [pc, #196]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d3c:	69db      	ldr	r3, [r3, #28]
 8014d3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	695b      	ldr	r3, [r3, #20]
 8014d46:	492e      	ldr	r1, [pc, #184]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d48:	4313      	orrs	r3, r2
 8014d4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	f003 0310 	and.w	r3, r3, #16
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d010      	beq.n	8014d7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	699a      	ldr	r2, [r3, #24]
 8014d5c:	4b28      	ldr	r3, [pc, #160]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d5e:	69db      	ldr	r3, [r3, #28]
 8014d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d208      	bcs.n	8014d7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014d68:	4b25      	ldr	r3, [pc, #148]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d6a:	69db      	ldr	r3, [r3, #28]
 8014d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	4922      	ldr	r1, [pc, #136]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d76:	4313      	orrs	r3, r2
 8014d78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	f003 0320 	and.w	r3, r3, #32
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d010      	beq.n	8014da8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	69da      	ldr	r2, [r3, #28]
 8014d8a:	4b1d      	ldr	r3, [pc, #116]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d8c:	6a1b      	ldr	r3, [r3, #32]
 8014d8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014d92:	429a      	cmp	r2, r3
 8014d94:	d208      	bcs.n	8014da8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014d96:	4b1a      	ldr	r3, [pc, #104]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014d98:	6a1b      	ldr	r3, [r3, #32]
 8014d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	69db      	ldr	r3, [r3, #28]
 8014da2:	4917      	ldr	r1, [pc, #92]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014da4:	4313      	orrs	r3, r2
 8014da6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014da8:	f000 f89e 	bl	8014ee8 <HAL_RCC_GetSysClockFreq>
 8014dac:	4602      	mov	r2, r0
 8014dae:	4b14      	ldr	r3, [pc, #80]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014db0:	699b      	ldr	r3, [r3, #24]
 8014db2:	0a1b      	lsrs	r3, r3, #8
 8014db4:	f003 030f 	and.w	r3, r3, #15
 8014db8:	4912      	ldr	r1, [pc, #72]	; (8014e04 <HAL_RCC_ClockConfig+0x35c>)
 8014dba:	5ccb      	ldrb	r3, [r1, r3]
 8014dbc:	f003 031f 	and.w	r3, r3, #31
 8014dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8014dc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014dc6:	4b0e      	ldr	r3, [pc, #56]	; (8014e00 <HAL_RCC_ClockConfig+0x358>)
 8014dc8:	699b      	ldr	r3, [r3, #24]
 8014dca:	f003 030f 	and.w	r3, r3, #15
 8014dce:	4a0d      	ldr	r2, [pc, #52]	; (8014e04 <HAL_RCC_ClockConfig+0x35c>)
 8014dd0:	5cd3      	ldrb	r3, [r2, r3]
 8014dd2:	f003 031f 	and.w	r3, r3, #31
 8014dd6:	693a      	ldr	r2, [r7, #16]
 8014dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8014ddc:	4a0a      	ldr	r2, [pc, #40]	; (8014e08 <HAL_RCC_ClockConfig+0x360>)
 8014dde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014de0:	4a0a      	ldr	r2, [pc, #40]	; (8014e0c <HAL_RCC_ClockConfig+0x364>)
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8014de6:	4b0a      	ldr	r3, [pc, #40]	; (8014e10 <HAL_RCC_ClockConfig+0x368>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ec fbe8 	bl	80015c0 <HAL_InitTick>
 8014df0:	4603      	mov	r3, r0
 8014df2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014df6:	4618      	mov	r0, r3
 8014df8:	3718      	adds	r7, #24
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	58024400 	.word	0x58024400
 8014e04:	0802d858 	.word	0x0802d858
 8014e08:	2400001c 	.word	0x2400001c
 8014e0c:	24000018 	.word	0x24000018
 8014e10:	24000050 	.word	0x24000050

08014e14 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b08c      	sub	sp, #48	; 0x30
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d12a      	bne.n	8014e7c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014e26:	4b2d      	ldr	r3, [pc, #180]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e2c:	4a2b      	ldr	r2, [pc, #172]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e2e:	f043 0301 	orr.w	r3, r3, #1
 8014e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e36:	4b29      	ldr	r3, [pc, #164]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	61bb      	str	r3, [r7, #24]
 8014e42:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8014e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e4a:	2302      	movs	r3, #2
 8014e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e4e:	2303      	movs	r3, #3
 8014e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e52:	2300      	movs	r3, #0
 8014e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014e56:	2300      	movs	r3, #0
 8014e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8014e5a:	f107 031c 	add.w	r3, r7, #28
 8014e5e:	4619      	mov	r1, r3
 8014e60:	481f      	ldr	r0, [pc, #124]	; (8014ee0 <HAL_RCC_MCOConfig+0xcc>)
 8014e62:	f7fc fc09 	bl	8011678 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8014e66:	4b1d      	ldr	r3, [pc, #116]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e68:	691b      	ldr	r3, [r3, #16]
 8014e6a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8014e6e:	68b9      	ldr	r1, [r7, #8]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	430b      	orrs	r3, r1
 8014e74:	4919      	ldr	r1, [pc, #100]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e76:	4313      	orrs	r3, r2
 8014e78:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8014e7a:	e02a      	b.n	8014ed2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8014e7c:	4b17      	ldr	r3, [pc, #92]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e82:	4a16      	ldr	r2, [pc, #88]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e84:	f043 0304 	orr.w	r3, r3, #4
 8014e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e8c:	4b13      	ldr	r3, [pc, #76]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e92:	f003 0304 	and.w	r3, r3, #4
 8014e96:	617b      	str	r3, [r7, #20]
 8014e98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8014e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ea0:	2302      	movs	r3, #2
 8014ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ea4:	2303      	movs	r3, #3
 8014ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014eac:	2300      	movs	r3, #0
 8014eae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8014eb0:	f107 031c 	add.w	r3, r7, #28
 8014eb4:	4619      	mov	r1, r3
 8014eb6:	480b      	ldr	r0, [pc, #44]	; (8014ee4 <HAL_RCC_MCOConfig+0xd0>)
 8014eb8:	f7fc fbde 	bl	8011678 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8014ebc:	4b07      	ldr	r3, [pc, #28]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014ebe:	691b      	ldr	r3, [r3, #16]
 8014ec0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	01d9      	lsls	r1, r3, #7
 8014ec8:	68bb      	ldr	r3, [r7, #8]
 8014eca:	430b      	orrs	r3, r1
 8014ecc:	4903      	ldr	r1, [pc, #12]	; (8014edc <HAL_RCC_MCOConfig+0xc8>)
 8014ece:	4313      	orrs	r3, r2
 8014ed0:	610b      	str	r3, [r1, #16]
}
 8014ed2:	bf00      	nop
 8014ed4:	3730      	adds	r7, #48	; 0x30
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	58024400 	.word	0x58024400
 8014ee0:	58020000 	.word	0x58020000
 8014ee4:	58020800 	.word	0x58020800

08014ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014ee8:	b480      	push	{r7}
 8014eea:	b089      	sub	sp, #36	; 0x24
 8014eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014eee:	4bb3      	ldr	r3, [pc, #716]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ef0:	691b      	ldr	r3, [r3, #16]
 8014ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014ef6:	2b18      	cmp	r3, #24
 8014ef8:	f200 8155 	bhi.w	80151a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8014efc:	a201      	add	r2, pc, #4	; (adr r2, 8014f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8014efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f02:	bf00      	nop
 8014f04:	08014f69 	.word	0x08014f69
 8014f08:	080151a7 	.word	0x080151a7
 8014f0c:	080151a7 	.word	0x080151a7
 8014f10:	080151a7 	.word	0x080151a7
 8014f14:	080151a7 	.word	0x080151a7
 8014f18:	080151a7 	.word	0x080151a7
 8014f1c:	080151a7 	.word	0x080151a7
 8014f20:	080151a7 	.word	0x080151a7
 8014f24:	08014f8f 	.word	0x08014f8f
 8014f28:	080151a7 	.word	0x080151a7
 8014f2c:	080151a7 	.word	0x080151a7
 8014f30:	080151a7 	.word	0x080151a7
 8014f34:	080151a7 	.word	0x080151a7
 8014f38:	080151a7 	.word	0x080151a7
 8014f3c:	080151a7 	.word	0x080151a7
 8014f40:	080151a7 	.word	0x080151a7
 8014f44:	08014f95 	.word	0x08014f95
 8014f48:	080151a7 	.word	0x080151a7
 8014f4c:	080151a7 	.word	0x080151a7
 8014f50:	080151a7 	.word	0x080151a7
 8014f54:	080151a7 	.word	0x080151a7
 8014f58:	080151a7 	.word	0x080151a7
 8014f5c:	080151a7 	.word	0x080151a7
 8014f60:	080151a7 	.word	0x080151a7
 8014f64:	08014f9b 	.word	0x08014f9b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f68:	4b94      	ldr	r3, [pc, #592]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f003 0320 	and.w	r3, r3, #32
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d009      	beq.n	8014f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014f74:	4b91      	ldr	r3, [pc, #580]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	08db      	lsrs	r3, r3, #3
 8014f7a:	f003 0303 	and.w	r3, r3, #3
 8014f7e:	4a90      	ldr	r2, [pc, #576]	; (80151c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014f80:	fa22 f303 	lsr.w	r3, r2, r3
 8014f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8014f86:	e111      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014f88:	4b8d      	ldr	r3, [pc, #564]	; (80151c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014f8a:	61bb      	str	r3, [r7, #24]
      break;
 8014f8c:	e10e      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8014f8e:	4b8d      	ldr	r3, [pc, #564]	; (80151c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014f90:	61bb      	str	r3, [r7, #24]
      break;
 8014f92:	e10b      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8014f94:	4b8c      	ldr	r3, [pc, #560]	; (80151c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8014f96:	61bb      	str	r3, [r7, #24]
      break;
 8014f98:	e108      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014f9a:	4b88      	ldr	r3, [pc, #544]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f9e:	f003 0303 	and.w	r3, r3, #3
 8014fa2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8014fa4:	4b85      	ldr	r3, [pc, #532]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa8:	091b      	lsrs	r3, r3, #4
 8014faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014fae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8014fb0:	4b82      	ldr	r3, [pc, #520]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fb4:	f003 0301 	and.w	r3, r3, #1
 8014fb8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014fba:	4b80      	ldr	r3, [pc, #512]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fbe:	08db      	lsrs	r3, r3, #3
 8014fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	fb02 f303 	mul.w	r3, r2, r3
 8014fca:	ee07 3a90 	vmov	s15, r3
 8014fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fd2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f000 80e1 	beq.w	80151a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	2b02      	cmp	r3, #2
 8014fe2:	f000 8083 	beq.w	80150ec <HAL_RCC_GetSysClockFreq+0x204>
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	2b02      	cmp	r3, #2
 8014fea:	f200 80a1 	bhi.w	8015130 <HAL_RCC_GetSysClockFreq+0x248>
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d003      	beq.n	8014ffc <HAL_RCC_GetSysClockFreq+0x114>
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d056      	beq.n	80150a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8014ffa:	e099      	b.n	8015130 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014ffc:	4b6f      	ldr	r3, [pc, #444]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	f003 0320 	and.w	r3, r3, #32
 8015004:	2b00      	cmp	r3, #0
 8015006:	d02d      	beq.n	8015064 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015008:	4b6c      	ldr	r3, [pc, #432]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	08db      	lsrs	r3, r3, #3
 801500e:	f003 0303 	and.w	r3, r3, #3
 8015012:	4a6b      	ldr	r2, [pc, #428]	; (80151c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015014:	fa22 f303 	lsr.w	r3, r2, r3
 8015018:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	ee07 3a90 	vmov	s15, r3
 8015020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	ee07 3a90 	vmov	s15, r3
 801502a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015032:	4b62      	ldr	r3, [pc, #392]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801503a:	ee07 3a90 	vmov	s15, r3
 801503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015042:	ed97 6a02 	vldr	s12, [r7, #8]
 8015046:	eddf 5a61 	vldr	s11, [pc, #388]	; 80151cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801505e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8015062:	e087      	b.n	8015174 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	ee07 3a90 	vmov	s15, r3
 801506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801506e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80151d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8015072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015076:	4b51      	ldr	r3, [pc, #324]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801507e:	ee07 3a90 	vmov	s15, r3
 8015082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015086:	ed97 6a02 	vldr	s12, [r7, #8]
 801508a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80151cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80150a6:	e065      	b.n	8015174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	ee07 3a90 	vmov	s15, r3
 80150ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80151d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80150b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80150ba:	4b40      	ldr	r3, [pc, #256]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80150bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150c2:	ee07 3a90 	vmov	s15, r3
 80150c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80150ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80150ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80151cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80150d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80150d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80150da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80150ea:	e043      	b.n	8015174 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	ee07 3a90 	vmov	s15, r3
 80150f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80151d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80150fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80150fe:	4b2f      	ldr	r3, [pc, #188]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015106:	ee07 3a90 	vmov	s15, r3
 801510a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801510e:	ed97 6a02 	vldr	s12, [r7, #8]
 8015112:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80151cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8015116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801511a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801511e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801512a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801512e:	e021      	b.n	8015174 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	ee07 3a90 	vmov	s15, r3
 8015136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801513a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80151d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 801513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015142:	4b1e      	ldr	r3, [pc, #120]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801514a:	ee07 3a90 	vmov	s15, r3
 801514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015152:	ed97 6a02 	vldr	s12, [r7, #8]
 8015156:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80151cc <HAL_RCC_GetSysClockFreq+0x2e4>
 801515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801516e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015172:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8015174:	4b11      	ldr	r3, [pc, #68]	; (80151bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015178:	0a5b      	lsrs	r3, r3, #9
 801517a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801517e:	3301      	adds	r3, #1
 8015180:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	ee07 3a90 	vmov	s15, r3
 8015188:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801518c:	edd7 6a07 	vldr	s13, [r7, #28]
 8015190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015198:	ee17 3a90 	vmov	r3, s15
 801519c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801519e:	e005      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80151a0:	2300      	movs	r3, #0
 80151a2:	61bb      	str	r3, [r7, #24]
      break;
 80151a4:	e002      	b.n	80151ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80151a6:	4b07      	ldr	r3, [pc, #28]	; (80151c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80151a8:	61bb      	str	r3, [r7, #24]
      break;
 80151aa:	bf00      	nop
  }

  return sysclockfreq;
 80151ac:	69bb      	ldr	r3, [r7, #24]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3724      	adds	r7, #36	; 0x24
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	58024400 	.word	0x58024400
 80151c0:	03d09000 	.word	0x03d09000
 80151c4:	003d0900 	.word	0x003d0900
 80151c8:	017d7840 	.word	0x017d7840
 80151cc:	46000000 	.word	0x46000000
 80151d0:	4c742400 	.word	0x4c742400
 80151d4:	4a742400 	.word	0x4a742400
 80151d8:	4bbebc20 	.word	0x4bbebc20

080151dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80151e2:	f7ff fe81 	bl	8014ee8 <HAL_RCC_GetSysClockFreq>
 80151e6:	4602      	mov	r2, r0
 80151e8:	4b10      	ldr	r3, [pc, #64]	; (801522c <HAL_RCC_GetHCLKFreq+0x50>)
 80151ea:	699b      	ldr	r3, [r3, #24]
 80151ec:	0a1b      	lsrs	r3, r3, #8
 80151ee:	f003 030f 	and.w	r3, r3, #15
 80151f2:	490f      	ldr	r1, [pc, #60]	; (8015230 <HAL_RCC_GetHCLKFreq+0x54>)
 80151f4:	5ccb      	ldrb	r3, [r1, r3]
 80151f6:	f003 031f 	and.w	r3, r3, #31
 80151fa:	fa22 f303 	lsr.w	r3, r2, r3
 80151fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015200:	4b0a      	ldr	r3, [pc, #40]	; (801522c <HAL_RCC_GetHCLKFreq+0x50>)
 8015202:	699b      	ldr	r3, [r3, #24]
 8015204:	f003 030f 	and.w	r3, r3, #15
 8015208:	4a09      	ldr	r2, [pc, #36]	; (8015230 <HAL_RCC_GetHCLKFreq+0x54>)
 801520a:	5cd3      	ldrb	r3, [r2, r3]
 801520c:	f003 031f 	and.w	r3, r3, #31
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	fa22 f303 	lsr.w	r3, r2, r3
 8015216:	4a07      	ldr	r2, [pc, #28]	; (8015234 <HAL_RCC_GetHCLKFreq+0x58>)
 8015218:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801521a:	4a07      	ldr	r2, [pc, #28]	; (8015238 <HAL_RCC_GetHCLKFreq+0x5c>)
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015220:	4b04      	ldr	r3, [pc, #16]	; (8015234 <HAL_RCC_GetHCLKFreq+0x58>)
 8015222:	681b      	ldr	r3, [r3, #0]
}
 8015224:	4618      	mov	r0, r3
 8015226:	3708      	adds	r7, #8
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}
 801522c:	58024400 	.word	0x58024400
 8015230:	0802d858 	.word	0x0802d858
 8015234:	2400001c 	.word	0x2400001c
 8015238:	24000018 	.word	0x24000018

0801523c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015240:	f7ff ffcc 	bl	80151dc <HAL_RCC_GetHCLKFreq>
 8015244:	4602      	mov	r2, r0
 8015246:	4b06      	ldr	r3, [pc, #24]	; (8015260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015248:	69db      	ldr	r3, [r3, #28]
 801524a:	091b      	lsrs	r3, r3, #4
 801524c:	f003 0307 	and.w	r3, r3, #7
 8015250:	4904      	ldr	r1, [pc, #16]	; (8015264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015252:	5ccb      	ldrb	r3, [r1, r3]
 8015254:	f003 031f 	and.w	r3, r3, #31
 8015258:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801525c:	4618      	mov	r0, r3
 801525e:	bd80      	pop	{r7, pc}
 8015260:	58024400 	.word	0x58024400
 8015264:	0802d858 	.word	0x0802d858

08015268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801526c:	f7ff ffb6 	bl	80151dc <HAL_RCC_GetHCLKFreq>
 8015270:	4602      	mov	r2, r0
 8015272:	4b06      	ldr	r3, [pc, #24]	; (801528c <HAL_RCC_GetPCLK2Freq+0x24>)
 8015274:	69db      	ldr	r3, [r3, #28]
 8015276:	0a1b      	lsrs	r3, r3, #8
 8015278:	f003 0307 	and.w	r3, r3, #7
 801527c:	4904      	ldr	r1, [pc, #16]	; (8015290 <HAL_RCC_GetPCLK2Freq+0x28>)
 801527e:	5ccb      	ldrb	r3, [r1, r3]
 8015280:	f003 031f 	and.w	r3, r3, #31
 8015284:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015288:	4618      	mov	r0, r3
 801528a:	bd80      	pop	{r7, pc}
 801528c:	58024400 	.word	0x58024400
 8015290:	0802d858 	.word	0x0802d858

08015294 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	223f      	movs	r2, #63	; 0x3f
 80152a2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80152a4:	4b1a      	ldr	r3, [pc, #104]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152a6:	691b      	ldr	r3, [r3, #16]
 80152a8:	f003 0207 	and.w	r2, r3, #7
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80152b0:	4b17      	ldr	r3, [pc, #92]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152b2:	699b      	ldr	r3, [r3, #24]
 80152b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80152bc:	4b14      	ldr	r3, [pc, #80]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152be:	699b      	ldr	r3, [r3, #24]
 80152c0:	f003 020f 	and.w	r2, r3, #15
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80152c8:	4b11      	ldr	r3, [pc, #68]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152ca:	699b      	ldr	r3, [r3, #24]
 80152cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80152d4:	4b0e      	ldr	r3, [pc, #56]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152d6:	69db      	ldr	r3, [r3, #28]
 80152d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80152e0:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152e2:	69db      	ldr	r3, [r3, #28]
 80152e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80152ec:	4b08      	ldr	r3, [pc, #32]	; (8015310 <HAL_RCC_GetClockConfig+0x7c>)
 80152ee:	6a1b      	ldr	r3, [r3, #32]
 80152f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80152f8:	4b06      	ldr	r3, [pc, #24]	; (8015314 <HAL_RCC_GetClockConfig+0x80>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	f003 020f 	and.w	r2, r3, #15
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	601a      	str	r2, [r3, #0]
}
 8015304:	bf00      	nop
 8015306:	370c      	adds	r7, #12
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr
 8015310:	58024400 	.word	0x58024400
 8015314:	52002000 	.word	0x52002000

08015318 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801531c:	b0ca      	sub	sp, #296	; 0x128
 801531e:	af00      	add	r7, sp, #0
 8015320:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015324:	2300      	movs	r3, #0
 8015326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801532a:	2300      	movs	r3, #0
 801532c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015338:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801533c:	2500      	movs	r5, #0
 801533e:	ea54 0305 	orrs.w	r3, r4, r5
 8015342:	d049      	beq.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8015344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801534a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801534e:	d02f      	beq.n	80153b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8015350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015354:	d828      	bhi.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8015356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801535a:	d01a      	beq.n	8015392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801535c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015360:	d822      	bhi.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8015362:	2b00      	cmp	r3, #0
 8015364:	d003      	beq.n	801536e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8015366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801536a:	d007      	beq.n	801537c <HAL_RCCEx_PeriphCLKConfig+0x64>
 801536c:	e01c      	b.n	80153a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801536e:	4bb8      	ldr	r3, [pc, #736]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015372:	4ab7      	ldr	r2, [pc, #732]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015378:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801537a:	e01a      	b.n	80153b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015380:	3308      	adds	r3, #8
 8015382:	2102      	movs	r1, #2
 8015384:	4618      	mov	r0, r3
 8015386:	f001 f9d1 	bl	801672c <RCCEx_PLL2_Config>
 801538a:	4603      	mov	r3, r0
 801538c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015390:	e00f      	b.n	80153b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015396:	3328      	adds	r3, #40	; 0x28
 8015398:	2102      	movs	r1, #2
 801539a:	4618      	mov	r0, r3
 801539c:	f001 fa78 	bl	8016890 <RCCEx_PLL3_Config>
 80153a0:	4603      	mov	r3, r0
 80153a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80153a6:	e004      	b.n	80153b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80153a8:	2301      	movs	r3, #1
 80153aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80153ae:	e000      	b.n	80153b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80153b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80153b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d10a      	bne.n	80153d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80153ba:	4ba5      	ldr	r3, [pc, #660]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80153c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80153c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80153c8:	4aa1      	ldr	r2, [pc, #644]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153ca:	430b      	orrs	r3, r1
 80153cc:	6513      	str	r3, [r2, #80]	; 0x50
 80153ce:	e003      	b.n	80153d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80153d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80153d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80153d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80153dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80153e4:	f04f 0900 	mov.w	r9, #0
 80153e8:	ea58 0309 	orrs.w	r3, r8, r9
 80153ec:	d047      	beq.n	801547e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80153ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80153f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80153f4:	2b04      	cmp	r3, #4
 80153f6:	d82a      	bhi.n	801544e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80153f8:	a201      	add	r2, pc, #4	; (adr r2, 8015400 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80153fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153fe:	bf00      	nop
 8015400:	08015415 	.word	0x08015415
 8015404:	08015423 	.word	0x08015423
 8015408:	08015439 	.word	0x08015439
 801540c:	08015457 	.word	0x08015457
 8015410:	08015457 	.word	0x08015457
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015414:	4b8e      	ldr	r3, [pc, #568]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015418:	4a8d      	ldr	r2, [pc, #564]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801541a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801541e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015420:	e01a      	b.n	8015458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015426:	3308      	adds	r3, #8
 8015428:	2100      	movs	r1, #0
 801542a:	4618      	mov	r0, r3
 801542c:	f001 f97e 	bl	801672c <RCCEx_PLL2_Config>
 8015430:	4603      	mov	r3, r0
 8015432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015436:	e00f      	b.n	8015458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801543c:	3328      	adds	r3, #40	; 0x28
 801543e:	2100      	movs	r1, #0
 8015440:	4618      	mov	r0, r3
 8015442:	f001 fa25 	bl	8016890 <RCCEx_PLL3_Config>
 8015446:	4603      	mov	r3, r0
 8015448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801544c:	e004      	b.n	8015458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801544e:	2301      	movs	r3, #1
 8015450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015454:	e000      	b.n	8015458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8015456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801545c:	2b00      	cmp	r3, #0
 801545e:	d10a      	bne.n	8015476 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015460:	4b7b      	ldr	r3, [pc, #492]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015464:	f023 0107 	bic.w	r1, r3, #7
 8015468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801546c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801546e:	4a78      	ldr	r2, [pc, #480]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015470:	430b      	orrs	r3, r1
 8015472:	6513      	str	r3, [r2, #80]	; 0x50
 8015474:	e003      	b.n	801547e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801547a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015486:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 801548a:	f04f 0b00 	mov.w	fp, #0
 801548e:	ea5a 030b 	orrs.w	r3, sl, fp
 8015492:	d04c      	beq.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8015494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801549a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801549e:	d030      	beq.n	8015502 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80154a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80154a4:	d829      	bhi.n	80154fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80154a6:	2bc0      	cmp	r3, #192	; 0xc0
 80154a8:	d02d      	beq.n	8015506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80154aa:	2bc0      	cmp	r3, #192	; 0xc0
 80154ac:	d825      	bhi.n	80154fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80154ae:	2b80      	cmp	r3, #128	; 0x80
 80154b0:	d018      	beq.n	80154e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80154b2:	2b80      	cmp	r3, #128	; 0x80
 80154b4:	d821      	bhi.n	80154fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d002      	beq.n	80154c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80154ba:	2b40      	cmp	r3, #64	; 0x40
 80154bc:	d007      	beq.n	80154ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80154be:	e01c      	b.n	80154fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80154c0:	4b63      	ldr	r3, [pc, #396]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80154c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154c4:	4a62      	ldr	r2, [pc, #392]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80154c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80154ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80154cc:	e01c      	b.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80154ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80154d2:	3308      	adds	r3, #8
 80154d4:	2100      	movs	r1, #0
 80154d6:	4618      	mov	r0, r3
 80154d8:	f001 f928 	bl	801672c <RCCEx_PLL2_Config>
 80154dc:	4603      	mov	r3, r0
 80154de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80154e2:	e011      	b.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80154e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80154e8:	3328      	adds	r3, #40	; 0x28
 80154ea:	2100      	movs	r1, #0
 80154ec:	4618      	mov	r0, r3
 80154ee:	f001 f9cf 	bl	8016890 <RCCEx_PLL3_Config>
 80154f2:	4603      	mov	r3, r0
 80154f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80154f8:	e006      	b.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80154fa:	2301      	movs	r3, #1
 80154fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015500:	e002      	b.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8015502:	bf00      	nop
 8015504:	e000      	b.n	8015508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8015506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801550c:	2b00      	cmp	r3, #0
 801550e:	d10a      	bne.n	8015526 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015510:	4b4f      	ldr	r3, [pc, #316]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015514:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8015518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801551e:	4a4c      	ldr	r2, [pc, #304]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015520:	430b      	orrs	r3, r1
 8015522:	6513      	str	r3, [r2, #80]	; 0x50
 8015524:	e003      	b.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801552a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015536:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 801553a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801553e:	2300      	movs	r3, #0
 8015540:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015544:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8015548:	460b      	mov	r3, r1
 801554a:	4313      	orrs	r3, r2
 801554c:	d053      	beq.n	80155f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015556:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801555a:	d035      	beq.n	80155c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801555c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015560:	d82e      	bhi.n	80155c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8015562:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015566:	d031      	beq.n	80155cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015568:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801556c:	d828      	bhi.n	80155c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801556e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015572:	d01a      	beq.n	80155aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8015574:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015578:	d822      	bhi.n	80155c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801557a:	2b00      	cmp	r3, #0
 801557c:	d003      	beq.n	8015586 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801557e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015582:	d007      	beq.n	8015594 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8015584:	e01c      	b.n	80155c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015586:	4b32      	ldr	r3, [pc, #200]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801558a:	4a31      	ldr	r2, [pc, #196]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801558c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015590:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015592:	e01c      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015598:	3308      	adds	r3, #8
 801559a:	2100      	movs	r1, #0
 801559c:	4618      	mov	r0, r3
 801559e:	f001 f8c5 	bl	801672c <RCCEx_PLL2_Config>
 80155a2:	4603      	mov	r3, r0
 80155a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80155a8:	e011      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80155aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80155ae:	3328      	adds	r3, #40	; 0x28
 80155b0:	2100      	movs	r1, #0
 80155b2:	4618      	mov	r0, r3
 80155b4:	f001 f96c 	bl	8016890 <RCCEx_PLL3_Config>
 80155b8:	4603      	mov	r3, r0
 80155ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80155be:	e006      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80155c0:	2301      	movs	r3, #1
 80155c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80155c6:	e002      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80155c8:	bf00      	nop
 80155ca:	e000      	b.n	80155ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80155cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80155ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d10b      	bne.n	80155ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80155d6:	4b1e      	ldr	r3, [pc, #120]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155da:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80155de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80155e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80155e6:	4a1a      	ldr	r2, [pc, #104]	; (8015650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155e8:	430b      	orrs	r3, r1
 80155ea:	6593      	str	r3, [r2, #88]	; 0x58
 80155ec:	e003      	b.n	80155f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80155ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80155f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80155f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80155fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8015602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8015606:	2300      	movs	r3, #0
 8015608:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801560c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8015610:	460b      	mov	r3, r1
 8015612:	4313      	orrs	r3, r2
 8015614:	d056      	beq.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8015616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801561a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801561e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015622:	d038      	beq.n	8015696 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8015624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015628:	d831      	bhi.n	801568e <HAL_RCCEx_PeriphCLKConfig+0x376>
 801562a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801562e:	d034      	beq.n	801569a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8015630:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015634:	d82b      	bhi.n	801568e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801563a:	d01d      	beq.n	8015678 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801563c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015640:	d825      	bhi.n	801568e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015642:	2b00      	cmp	r3, #0
 8015644:	d006      	beq.n	8015654 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8015646:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801564a:	d00a      	beq.n	8015662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801564c:	e01f      	b.n	801568e <HAL_RCCEx_PeriphCLKConfig+0x376>
 801564e:	bf00      	nop
 8015650:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015654:	4ba2      	ldr	r3, [pc, #648]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015658:	4aa1      	ldr	r2, [pc, #644]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801565a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801565e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015660:	e01c      	b.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015666:	3308      	adds	r3, #8
 8015668:	2100      	movs	r1, #0
 801566a:	4618      	mov	r0, r3
 801566c:	f001 f85e 	bl	801672c <RCCEx_PLL2_Config>
 8015670:	4603      	mov	r3, r0
 8015672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015676:	e011      	b.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801567c:	3328      	adds	r3, #40	; 0x28
 801567e:	2100      	movs	r1, #0
 8015680:	4618      	mov	r0, r3
 8015682:	f001 f905 	bl	8016890 <RCCEx_PLL3_Config>
 8015686:	4603      	mov	r3, r0
 8015688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801568c:	e006      	b.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801568e:	2301      	movs	r3, #1
 8015690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015694:	e002      	b.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8015696:	bf00      	nop
 8015698:	e000      	b.n	801569c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801569a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801569c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d10b      	bne.n	80156bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80156a4:	4b8e      	ldr	r3, [pc, #568]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80156a8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80156ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80156b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80156b4:	4a8a      	ldr	r2, [pc, #552]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156b6:	430b      	orrs	r3, r1
 80156b8:	6593      	str	r3, [r2, #88]	; 0x58
 80156ba:	e003      	b.n	80156c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80156c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80156c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80156c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156cc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80156d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80156d4:	2300      	movs	r3, #0
 80156d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80156da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80156de:	460b      	mov	r3, r1
 80156e0:	4313      	orrs	r3, r2
 80156e2:	d03a      	beq.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80156e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80156e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80156ea:	2b30      	cmp	r3, #48	; 0x30
 80156ec:	d01f      	beq.n	801572e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80156ee:	2b30      	cmp	r3, #48	; 0x30
 80156f0:	d819      	bhi.n	8015726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80156f2:	2b20      	cmp	r3, #32
 80156f4:	d00c      	beq.n	8015710 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80156f6:	2b20      	cmp	r3, #32
 80156f8:	d815      	bhi.n	8015726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d019      	beq.n	8015732 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80156fe:	2b10      	cmp	r3, #16
 8015700:	d111      	bne.n	8015726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015702:	4b77      	ldr	r3, [pc, #476]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015706:	4a76      	ldr	r2, [pc, #472]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801570c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801570e:	e011      	b.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015714:	3308      	adds	r3, #8
 8015716:	2102      	movs	r1, #2
 8015718:	4618      	mov	r0, r3
 801571a:	f001 f807 	bl	801672c <RCCEx_PLL2_Config>
 801571e:	4603      	mov	r3, r0
 8015720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8015724:	e006      	b.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015726:	2301      	movs	r3, #1
 8015728:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801572c:	e002      	b.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801572e:	bf00      	nop
 8015730:	e000      	b.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8015732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015738:	2b00      	cmp	r3, #0
 801573a:	d10a      	bne.n	8015752 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801573c:	4b68      	ldr	r3, [pc, #416]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015740:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8015744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801574a:	4a65      	ldr	r2, [pc, #404]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801574c:	430b      	orrs	r3, r1
 801574e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015750:	e003      	b.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015756:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015762:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8015766:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801576a:	2300      	movs	r3, #0
 801576c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8015770:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8015774:	460b      	mov	r3, r1
 8015776:	4313      	orrs	r3, r2
 8015778:	d051      	beq.n	801581e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015784:	d035      	beq.n	80157f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801578a:	d82e      	bhi.n	80157ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801578c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015790:	d031      	beq.n	80157f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015796:	d828      	bhi.n	80157ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801579c:	d01a      	beq.n	80157d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80157a2:	d822      	bhi.n	80157ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d003      	beq.n	80157b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80157a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157ac:	d007      	beq.n	80157be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80157ae:	e01c      	b.n	80157ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157b0:	4b4b      	ldr	r3, [pc, #300]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80157b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157b4:	4a4a      	ldr	r2, [pc, #296]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80157b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80157ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80157bc:	e01c      	b.n	80157f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80157be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80157c2:	3308      	adds	r3, #8
 80157c4:	2100      	movs	r1, #0
 80157c6:	4618      	mov	r0, r3
 80157c8:	f000 ffb0 	bl	801672c <RCCEx_PLL2_Config>
 80157cc:	4603      	mov	r3, r0
 80157ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80157d2:	e011      	b.n	80157f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80157d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80157d8:	3328      	adds	r3, #40	; 0x28
 80157da:	2100      	movs	r1, #0
 80157dc:	4618      	mov	r0, r3
 80157de:	f001 f857 	bl	8016890 <RCCEx_PLL3_Config>
 80157e2:	4603      	mov	r3, r0
 80157e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80157e8:	e006      	b.n	80157f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80157ea:	2301      	movs	r3, #1
 80157ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80157f0:	e002      	b.n	80157f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80157f2:	bf00      	nop
 80157f4:	e000      	b.n	80157f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80157f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80157f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d10a      	bne.n	8015816 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015800:	4b37      	ldr	r3, [pc, #220]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015804:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8015808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801580c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801580e:	4a34      	ldr	r2, [pc, #208]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015810:	430b      	orrs	r3, r1
 8015812:	6513      	str	r3, [r2, #80]	; 0x50
 8015814:	e003      	b.n	801581e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801581a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015826:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801582a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801582e:	2300      	movs	r3, #0
 8015830:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8015834:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8015838:	460b      	mov	r3, r1
 801583a:	4313      	orrs	r3, r2
 801583c:	d056      	beq.n	80158ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015848:	d033      	beq.n	80158b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801584a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801584e:	d82c      	bhi.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015854:	d02f      	beq.n	80158b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8015856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801585a:	d826      	bhi.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 801585c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015860:	d02b      	beq.n	80158ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8015862:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015866:	d820      	bhi.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801586c:	d012      	beq.n	8015894 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801586e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015872:	d81a      	bhi.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8015874:	2b00      	cmp	r3, #0
 8015876:	d022      	beq.n	80158be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8015878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801587c:	d115      	bne.n	80158aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015882:	3308      	adds	r3, #8
 8015884:	2101      	movs	r1, #1
 8015886:	4618      	mov	r0, r3
 8015888:	f000 ff50 	bl	801672c <RCCEx_PLL2_Config>
 801588c:	4603      	mov	r3, r0
 801588e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015892:	e015      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015898:	3328      	adds	r3, #40	; 0x28
 801589a:	2101      	movs	r1, #1
 801589c:	4618      	mov	r0, r3
 801589e:	f000 fff7 	bl	8016890 <RCCEx_PLL3_Config>
 80158a2:	4603      	mov	r3, r0
 80158a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80158a8:	e00a      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80158aa:	2301      	movs	r3, #1
 80158ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80158b0:	e006      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80158b2:	bf00      	nop
 80158b4:	e004      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80158b6:	bf00      	nop
 80158b8:	e002      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80158ba:	bf00      	nop
 80158bc:	e000      	b.n	80158c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80158be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80158c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d10d      	bne.n	80158e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80158c8:	4b05      	ldr	r3, [pc, #20]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80158cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80158d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80158d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80158d6:	4a02      	ldr	r2, [pc, #8]	; (80158e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80158d8:	430b      	orrs	r3, r1
 80158da:	6513      	str	r3, [r2, #80]	; 0x50
 80158dc:	e006      	b.n	80158ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80158de:	bf00      	nop
 80158e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80158e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80158ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80158f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80158f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80158fc:	2300      	movs	r3, #0
 80158fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015902:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8015906:	460b      	mov	r3, r1
 8015908:	4313      	orrs	r3, r2
 801590a:	d055      	beq.n	80159b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015918:	d033      	beq.n	8015982 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801591a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801591e:	d82c      	bhi.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015924:	d02f      	beq.n	8015986 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8015926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801592a:	d826      	bhi.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x662>
 801592c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015930:	d02b      	beq.n	801598a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8015932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015936:	d820      	bhi.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801593c:	d012      	beq.n	8015964 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801593e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015942:	d81a      	bhi.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015944:	2b00      	cmp	r3, #0
 8015946:	d022      	beq.n	801598e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8015948:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801594c:	d115      	bne.n	801597a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801594e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015952:	3308      	adds	r3, #8
 8015954:	2101      	movs	r1, #1
 8015956:	4618      	mov	r0, r3
 8015958:	f000 fee8 	bl	801672c <RCCEx_PLL2_Config>
 801595c:	4603      	mov	r3, r0
 801595e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015962:	e015      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015968:	3328      	adds	r3, #40	; 0x28
 801596a:	2101      	movs	r1, #1
 801596c:	4618      	mov	r0, r3
 801596e:	f000 ff8f 	bl	8016890 <RCCEx_PLL3_Config>
 8015972:	4603      	mov	r3, r0
 8015974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8015978:	e00a      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801597a:	2301      	movs	r3, #1
 801597c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015980:	e006      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015982:	bf00      	nop
 8015984:	e004      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8015986:	bf00      	nop
 8015988:	e002      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801598a:	bf00      	nop
 801598c:	e000      	b.n	8015990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801598e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015990:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015994:	2b00      	cmp	r3, #0
 8015996:	d10b      	bne.n	80159b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015998:	4ba3      	ldr	r3, [pc, #652]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801599a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801599c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80159a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80159a8:	4a9f      	ldr	r2, [pc, #636]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159aa:	430b      	orrs	r3, r1
 80159ac:	6593      	str	r3, [r2, #88]	; 0x58
 80159ae:	e003      	b.n	80159b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80159b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80159b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80159c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80159c8:	2300      	movs	r3, #0
 80159ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80159ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80159d2:	460b      	mov	r3, r1
 80159d4:	4313      	orrs	r3, r2
 80159d6:	d037      	beq.n	8015a48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80159d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80159dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80159e2:	d00e      	beq.n	8015a02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80159e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80159e8:	d816      	bhi.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d018      	beq.n	8015a20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80159ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80159f2:	d111      	bne.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80159f4:	4b8c      	ldr	r3, [pc, #560]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159f8:	4a8b      	ldr	r2, [pc, #556]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015a00:	e00f      	b.n	8015a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a06:	3308      	adds	r3, #8
 8015a08:	2101      	movs	r1, #1
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f000 fe8e 	bl	801672c <RCCEx_PLL2_Config>
 8015a10:	4603      	mov	r3, r0
 8015a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015a16:	e004      	b.n	8015a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015a1e:	e000      	b.n	8015a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8015a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d10a      	bne.n	8015a40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015a2a:	4b7f      	ldr	r3, [pc, #508]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a2e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8015a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a38:	4a7b      	ldr	r2, [pc, #492]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a3a:	430b      	orrs	r3, r1
 8015a3c:	6513      	str	r3, [r2, #80]	; 0x50
 8015a3e:	e003      	b.n	8015a48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015a44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a50:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8015a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015a58:	2300      	movs	r3, #0
 8015a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8015a5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8015a62:	460b      	mov	r3, r1
 8015a64:	4313      	orrs	r3, r2
 8015a66:	d039      	beq.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a6e:	2b03      	cmp	r3, #3
 8015a70:	d81c      	bhi.n	8015aac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8015a72:	a201      	add	r2, pc, #4	; (adr r2, 8015a78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8015a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a78:	08015ab5 	.word	0x08015ab5
 8015a7c:	08015a89 	.word	0x08015a89
 8015a80:	08015a97 	.word	0x08015a97
 8015a84:	08015ab5 	.word	0x08015ab5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a88:	4b67      	ldr	r3, [pc, #412]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a8c:	4a66      	ldr	r2, [pc, #408]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015a94:	e00f      	b.n	8015ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015a9a:	3308      	adds	r3, #8
 8015a9c:	2102      	movs	r1, #2
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f000 fe44 	bl	801672c <RCCEx_PLL2_Config>
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015aaa:	e004      	b.n	8015ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015aac:	2301      	movs	r3, #1
 8015aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015ab2:	e000      	b.n	8015ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8015ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d10a      	bne.n	8015ad4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015abe:	4b5a      	ldr	r3, [pc, #360]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015ac2:	f023 0103 	bic.w	r1, r3, #3
 8015ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015acc:	4a56      	ldr	r2, [pc, #344]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ace:	430b      	orrs	r3, r1
 8015ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8015ad2:	e003      	b.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015ad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8015ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8015aec:	2300      	movs	r3, #0
 8015aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8015af2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8015af6:	460b      	mov	r3, r1
 8015af8:	4313      	orrs	r3, r2
 8015afa:	f000 809f 	beq.w	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015afe:	4b4b      	ldr	r3, [pc, #300]	; (8015c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	4a4a      	ldr	r2, [pc, #296]	; (8015c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015b0a:	f7fb f9a9 	bl	8010e60 <HAL_GetTick>
 8015b0e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015b12:	e00b      	b.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b14:	f7fb f9a4 	bl	8010e60 <HAL_GetTick>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015b1e:	1ad3      	subs	r3, r2, r3
 8015b20:	2b64      	cmp	r3, #100	; 0x64
 8015b22:	d903      	bls.n	8015b2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8015b24:	2303      	movs	r3, #3
 8015b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015b2a:	e005      	b.n	8015b38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015b2c:	4b3f      	ldr	r3, [pc, #252]	; (8015c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d0ed      	beq.n	8015b14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8015b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d179      	bne.n	8015c34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015b40:	4b39      	ldr	r3, [pc, #228]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015b4c:	4053      	eors	r3, r2
 8015b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d015      	beq.n	8015b82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015b56:	4b34      	ldr	r3, [pc, #208]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015b5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015b62:	4b31      	ldr	r3, [pc, #196]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b66:	4a30      	ldr	r2, [pc, #192]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015b6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015b6e:	4b2e      	ldr	r3, [pc, #184]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b72:	4a2d      	ldr	r2, [pc, #180]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015b78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015b7a:	4a2b      	ldr	r2, [pc, #172]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8015b80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015b86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b8e:	d118      	bne.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015b90:	f7fb f966 	bl	8010e60 <HAL_GetTick>
 8015b94:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015b98:	e00d      	b.n	8015bb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015b9a:	f7fb f961 	bl	8010e60 <HAL_GetTick>
 8015b9e:	4602      	mov	r2, r0
 8015ba0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015ba4:	1ad2      	subs	r2, r2, r3
 8015ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d903      	bls.n	8015bb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8015bae:	2303      	movs	r3, #3
 8015bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8015bb4:	e005      	b.n	8015bc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015bb6:	4b1c      	ldr	r3, [pc, #112]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bba:	f003 0302 	and.w	r3, r3, #2
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d0eb      	beq.n	8015b9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d129      	bne.n	8015c1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015bda:	d10e      	bne.n	8015bfa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015bdc:	4b12      	ldr	r3, [pc, #72]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bde:	691b      	ldr	r3, [r3, #16]
 8015be0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8015be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015bec:	091a      	lsrs	r2, r3, #4
 8015bee:	4b10      	ldr	r3, [pc, #64]	; (8015c30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015bf0:	4013      	ands	r3, r2
 8015bf2:	4a0d      	ldr	r2, [pc, #52]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bf4:	430b      	orrs	r3, r1
 8015bf6:	6113      	str	r3, [r2, #16]
 8015bf8:	e005      	b.n	8015c06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8015bfa:	4b0b      	ldr	r3, [pc, #44]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bfc:	691b      	ldr	r3, [r3, #16]
 8015bfe:	4a0a      	ldr	r2, [pc, #40]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c00:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015c04:	6113      	str	r3, [r2, #16]
 8015c06:	4b08      	ldr	r3, [pc, #32]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c16:	4a04      	ldr	r2, [pc, #16]	; (8015c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c18:	430b      	orrs	r3, r1
 8015c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8015c1c:	e00e      	b.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8015c26:	e009      	b.n	8015c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8015c28:	58024400 	.word	0x58024400
 8015c2c:	58024800 	.word	0x58024800
 8015c30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c44:	f002 0301 	and.w	r3, r2, #1
 8015c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8015c52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8015c56:	460b      	mov	r3, r1
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	f000 8089 	beq.w	8015d70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8015c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c64:	2b28      	cmp	r3, #40	; 0x28
 8015c66:	d86b      	bhi.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8015c68:	a201      	add	r2, pc, #4	; (adr r2, 8015c70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8015c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c6e:	bf00      	nop
 8015c70:	08015d49 	.word	0x08015d49
 8015c74:	08015d41 	.word	0x08015d41
 8015c78:	08015d41 	.word	0x08015d41
 8015c7c:	08015d41 	.word	0x08015d41
 8015c80:	08015d41 	.word	0x08015d41
 8015c84:	08015d41 	.word	0x08015d41
 8015c88:	08015d41 	.word	0x08015d41
 8015c8c:	08015d41 	.word	0x08015d41
 8015c90:	08015d15 	.word	0x08015d15
 8015c94:	08015d41 	.word	0x08015d41
 8015c98:	08015d41 	.word	0x08015d41
 8015c9c:	08015d41 	.word	0x08015d41
 8015ca0:	08015d41 	.word	0x08015d41
 8015ca4:	08015d41 	.word	0x08015d41
 8015ca8:	08015d41 	.word	0x08015d41
 8015cac:	08015d41 	.word	0x08015d41
 8015cb0:	08015d2b 	.word	0x08015d2b
 8015cb4:	08015d41 	.word	0x08015d41
 8015cb8:	08015d41 	.word	0x08015d41
 8015cbc:	08015d41 	.word	0x08015d41
 8015cc0:	08015d41 	.word	0x08015d41
 8015cc4:	08015d41 	.word	0x08015d41
 8015cc8:	08015d41 	.word	0x08015d41
 8015ccc:	08015d41 	.word	0x08015d41
 8015cd0:	08015d49 	.word	0x08015d49
 8015cd4:	08015d41 	.word	0x08015d41
 8015cd8:	08015d41 	.word	0x08015d41
 8015cdc:	08015d41 	.word	0x08015d41
 8015ce0:	08015d41 	.word	0x08015d41
 8015ce4:	08015d41 	.word	0x08015d41
 8015ce8:	08015d41 	.word	0x08015d41
 8015cec:	08015d41 	.word	0x08015d41
 8015cf0:	08015d49 	.word	0x08015d49
 8015cf4:	08015d41 	.word	0x08015d41
 8015cf8:	08015d41 	.word	0x08015d41
 8015cfc:	08015d41 	.word	0x08015d41
 8015d00:	08015d41 	.word	0x08015d41
 8015d04:	08015d41 	.word	0x08015d41
 8015d08:	08015d41 	.word	0x08015d41
 8015d0c:	08015d41 	.word	0x08015d41
 8015d10:	08015d49 	.word	0x08015d49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015d18:	3308      	adds	r3, #8
 8015d1a:	2101      	movs	r1, #1
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f000 fd05 	bl	801672c <RCCEx_PLL2_Config>
 8015d22:	4603      	mov	r3, r0
 8015d24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015d28:	e00f      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015d2e:	3328      	adds	r3, #40	; 0x28
 8015d30:	2101      	movs	r1, #1
 8015d32:	4618      	mov	r0, r3
 8015d34:	f000 fdac 	bl	8016890 <RCCEx_PLL3_Config>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015d3e:	e004      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015d40:	2301      	movs	r3, #1
 8015d42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015d46:	e000      	b.n	8015d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8015d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d10a      	bne.n	8015d68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015d52:	4bbf      	ldr	r3, [pc, #764]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d56:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8015d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015d60:	4abb      	ldr	r2, [pc, #748]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015d62:	430b      	orrs	r3, r1
 8015d64:	6553      	str	r3, [r2, #84]	; 0x54
 8015d66:	e003      	b.n	8015d70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015d6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d78:	f002 0302 	and.w	r3, r2, #2
 8015d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015d80:	2300      	movs	r3, #0
 8015d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015d86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8015d8a:	460b      	mov	r3, r1
 8015d8c:	4313      	orrs	r3, r2
 8015d8e:	d041      	beq.n	8015e14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8015d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d96:	2b05      	cmp	r3, #5
 8015d98:	d824      	bhi.n	8015de4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8015d9a:	a201      	add	r2, pc, #4	; (adr r2, 8015da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8015d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015da0:	08015ded 	.word	0x08015ded
 8015da4:	08015db9 	.word	0x08015db9
 8015da8:	08015dcf 	.word	0x08015dcf
 8015dac:	08015ded 	.word	0x08015ded
 8015db0:	08015ded 	.word	0x08015ded
 8015db4:	08015ded 	.word	0x08015ded
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015dbc:	3308      	adds	r3, #8
 8015dbe:	2101      	movs	r1, #1
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f000 fcb3 	bl	801672c <RCCEx_PLL2_Config>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015dcc:	e00f      	b.n	8015dee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015dd2:	3328      	adds	r3, #40	; 0x28
 8015dd4:	2101      	movs	r1, #1
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f000 fd5a 	bl	8016890 <RCCEx_PLL3_Config>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015de2:	e004      	b.n	8015dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015de4:	2301      	movs	r3, #1
 8015de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015dea:	e000      	b.n	8015dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8015dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015dee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d10a      	bne.n	8015e0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015df6:	4b96      	ldr	r3, [pc, #600]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015dfa:	f023 0107 	bic.w	r1, r3, #7
 8015dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015e02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e04:	4a92      	ldr	r2, [pc, #584]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015e06:	430b      	orrs	r3, r1
 8015e08:	6553      	str	r3, [r2, #84]	; 0x54
 8015e0a:	e003      	b.n	8015e14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015e10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e1c:	f002 0304 	and.w	r3, r2, #4
 8015e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015e24:	2300      	movs	r3, #0
 8015e26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015e2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8015e2e:	460b      	mov	r3, r1
 8015e30:	4313      	orrs	r3, r2
 8015e32:	d044      	beq.n	8015ebe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8015e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015e3c:	2b05      	cmp	r3, #5
 8015e3e:	d825      	bhi.n	8015e8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8015e40:	a201      	add	r2, pc, #4	; (adr r2, 8015e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8015e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e46:	bf00      	nop
 8015e48:	08015e95 	.word	0x08015e95
 8015e4c:	08015e61 	.word	0x08015e61
 8015e50:	08015e77 	.word	0x08015e77
 8015e54:	08015e95 	.word	0x08015e95
 8015e58:	08015e95 	.word	0x08015e95
 8015e5c:	08015e95 	.word	0x08015e95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015e64:	3308      	adds	r3, #8
 8015e66:	2101      	movs	r1, #1
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f000 fc5f 	bl	801672c <RCCEx_PLL2_Config>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015e74:	e00f      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015e7a:	3328      	adds	r3, #40	; 0x28
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	4618      	mov	r0, r3
 8015e80:	f000 fd06 	bl	8016890 <RCCEx_PLL3_Config>
 8015e84:	4603      	mov	r3, r0
 8015e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015e8a:	e004      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015e92:	e000      	b.n	8015e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8015e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d10b      	bne.n	8015eb6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015e9e:	4b6c      	ldr	r3, [pc, #432]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ea2:	f023 0107 	bic.w	r1, r3, #7
 8015ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015eae:	4a68      	ldr	r2, [pc, #416]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015eb0:	430b      	orrs	r3, r1
 8015eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8015eb4:	e003      	b.n	8015ebe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015eba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec6:	f002 0320 	and.w	r3, r2, #32
 8015eca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015ece:	2300      	movs	r3, #0
 8015ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015ed8:	460b      	mov	r3, r1
 8015eda:	4313      	orrs	r3, r2
 8015edc:	d055      	beq.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8015ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015eea:	d033      	beq.n	8015f54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8015eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015ef0:	d82c      	bhi.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ef6:	d02f      	beq.n	8015f58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8015ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015efc:	d826      	bhi.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015efe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015f02:	d02b      	beq.n	8015f5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8015f04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015f08:	d820      	bhi.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f0e:	d012      	beq.n	8015f36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8015f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f14:	d81a      	bhi.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d022      	beq.n	8015f60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8015f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f1e:	d115      	bne.n	8015f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015f24:	3308      	adds	r3, #8
 8015f26:	2100      	movs	r1, #0
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f000 fbff 	bl	801672c <RCCEx_PLL2_Config>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015f34:	e015      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015f3a:	3328      	adds	r3, #40	; 0x28
 8015f3c:	2102      	movs	r1, #2
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f000 fca6 	bl	8016890 <RCCEx_PLL3_Config>
 8015f44:	4603      	mov	r3, r0
 8015f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015f4a:	e00a      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8015f52:	e006      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015f54:	bf00      	nop
 8015f56:	e004      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015f58:	bf00      	nop
 8015f5a:	e002      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015f5c:	bf00      	nop
 8015f5e:	e000      	b.n	8015f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015f62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d10b      	bne.n	8015f82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015f6a:	4b39      	ldr	r3, [pc, #228]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f6e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8015f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f7a:	4a35      	ldr	r2, [pc, #212]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f7c:	430b      	orrs	r3, r1
 8015f7e:	6553      	str	r3, [r2, #84]	; 0x54
 8015f80:	e003      	b.n	8015f8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8015f86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f92:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8015f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8015fa0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8015fa4:	460b      	mov	r3, r1
 8015fa6:	4313      	orrs	r3, r2
 8015fa8:	d058      	beq.n	801605c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8015faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015fb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015fb6:	d033      	beq.n	8016020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8015fb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015fbc:	d82c      	bhi.n	8016018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fc2:	d02f      	beq.n	8016024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8015fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015fc8:	d826      	bhi.n	8016018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015fce:	d02b      	beq.n	8016028 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8015fd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015fd4:	d820      	bhi.n	8016018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fda:	d012      	beq.n	8016002 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8015fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fe0:	d81a      	bhi.n	8016018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d022      	beq.n	801602c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8015fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fea:	d115      	bne.n	8016018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8015ff0:	3308      	adds	r3, #8
 8015ff2:	2100      	movs	r1, #0
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f000 fb99 	bl	801672c <RCCEx_PLL2_Config>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016000:	e015      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016006:	3328      	adds	r3, #40	; 0x28
 8016008:	2102      	movs	r1, #2
 801600a:	4618      	mov	r0, r3
 801600c:	f000 fc40 	bl	8016890 <RCCEx_PLL3_Config>
 8016010:	4603      	mov	r3, r0
 8016012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016016:	e00a      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016018:	2301      	movs	r3, #1
 801601a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801601e:	e006      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016020:	bf00      	nop
 8016022:	e004      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016024:	bf00      	nop
 8016026:	e002      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016028:	bf00      	nop
 801602a:	e000      	b.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801602c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801602e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016032:	2b00      	cmp	r3, #0
 8016034:	d10e      	bne.n	8016054 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016036:	4b06      	ldr	r3, [pc, #24]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801603a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801603e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016046:	4a02      	ldr	r2, [pc, #8]	; (8016050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016048:	430b      	orrs	r3, r1
 801604a:	6593      	str	r3, [r2, #88]	; 0x58
 801604c:	e006      	b.n	801605c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801604e:	bf00      	nop
 8016050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016064:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8016068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801606c:	2300      	movs	r3, #0
 801606e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016072:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8016076:	460b      	mov	r3, r1
 8016078:	4313      	orrs	r3, r2
 801607a:	d055      	beq.n	8016128 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801607c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016084:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8016088:	d033      	beq.n	80160f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801608a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801608e:	d82c      	bhi.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016094:	d02f      	beq.n	80160f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8016096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801609a:	d826      	bhi.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801609c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80160a0:	d02b      	beq.n	80160fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80160a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80160a6:	d820      	bhi.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80160a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80160ac:	d012      	beq.n	80160d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80160ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80160b2:	d81a      	bhi.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d022      	beq.n	80160fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80160b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80160bc:	d115      	bne.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80160be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80160c2:	3308      	adds	r3, #8
 80160c4:	2100      	movs	r1, #0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f000 fb30 	bl	801672c <RCCEx_PLL2_Config>
 80160cc:	4603      	mov	r3, r0
 80160ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80160d2:	e015      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80160d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80160d8:	3328      	adds	r3, #40	; 0x28
 80160da:	2102      	movs	r1, #2
 80160dc:	4618      	mov	r0, r3
 80160de:	f000 fbd7 	bl	8016890 <RCCEx_PLL3_Config>
 80160e2:	4603      	mov	r3, r0
 80160e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80160e8:	e00a      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80160ea:	2301      	movs	r3, #1
 80160ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80160f0:	e006      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80160f2:	bf00      	nop
 80160f4:	e004      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80160f6:	bf00      	nop
 80160f8:	e002      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80160fa:	bf00      	nop
 80160fc:	e000      	b.n	8016100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80160fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016104:	2b00      	cmp	r3, #0
 8016106:	d10b      	bne.n	8016120 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016108:	4ba1      	ldr	r3, [pc, #644]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801610c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8016110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016118:	4a9d      	ldr	r2, [pc, #628]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801611a:	430b      	orrs	r3, r1
 801611c:	6593      	str	r3, [r2, #88]	; 0x58
 801611e:	e003      	b.n	8016128 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8016128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	f002 0308 	and.w	r3, r2, #8
 8016134:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016138:	2300      	movs	r3, #0
 801613a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801613e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8016142:	460b      	mov	r3, r1
 8016144:	4313      	orrs	r3, r2
 8016146:	d01e      	beq.n	8016186 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8016148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801614c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016154:	d10c      	bne.n	8016170 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801615a:	3328      	adds	r3, #40	; 0x28
 801615c:	2102      	movs	r1, #2
 801615e:	4618      	mov	r0, r3
 8016160:	f000 fb96 	bl	8016890 <RCCEx_PLL3_Config>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d002      	beq.n	8016170 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801616a:	2301      	movs	r3, #1
 801616c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8016170:	4b87      	ldr	r3, [pc, #540]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016174:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801617c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016180:	4a83      	ldr	r2, [pc, #524]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016182:	430b      	orrs	r3, r1
 8016184:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801618e:	f002 0310 	and.w	r3, r2, #16
 8016192:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016196:	2300      	movs	r3, #0
 8016198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801619c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80161a0:	460b      	mov	r3, r1
 80161a2:	4313      	orrs	r3, r2
 80161a4:	d01e      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80161a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80161aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80161ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80161b2:	d10c      	bne.n	80161ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80161b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80161b8:	3328      	adds	r3, #40	; 0x28
 80161ba:	2102      	movs	r1, #2
 80161bc:	4618      	mov	r0, r3
 80161be:	f000 fb67 	bl	8016890 <RCCEx_PLL3_Config>
 80161c2:	4603      	mov	r3, r0
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d002      	beq.n	80161ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80161c8:	2301      	movs	r3, #1
 80161ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80161ce:	4b70      	ldr	r3, [pc, #448]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80161d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80161da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80161de:	4a6c      	ldr	r2, [pc, #432]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161e0:	430b      	orrs	r3, r1
 80161e2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80161e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80161e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ec:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80161f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80161f4:	2300      	movs	r3, #0
 80161f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80161fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80161fe:	460b      	mov	r3, r1
 8016200:	4313      	orrs	r3, r2
 8016202:	d03e      	beq.n	8016282 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8016204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801620c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016210:	d022      	beq.n	8016258 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8016212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016216:	d81b      	bhi.n	8016250 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8016218:	2b00      	cmp	r3, #0
 801621a:	d003      	beq.n	8016224 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016220:	d00b      	beq.n	801623a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8016222:	e015      	b.n	8016250 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016228:	3308      	adds	r3, #8
 801622a:	2100      	movs	r1, #0
 801622c:	4618      	mov	r0, r3
 801622e:	f000 fa7d 	bl	801672c <RCCEx_PLL2_Config>
 8016232:	4603      	mov	r3, r0
 8016234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8016238:	e00f      	b.n	801625a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801623e:	3328      	adds	r3, #40	; 0x28
 8016240:	2102      	movs	r1, #2
 8016242:	4618      	mov	r0, r3
 8016244:	f000 fb24 	bl	8016890 <RCCEx_PLL3_Config>
 8016248:	4603      	mov	r3, r0
 801624a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801624e:	e004      	b.n	801625a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016250:	2301      	movs	r3, #1
 8016252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8016256:	e000      	b.n	801625a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8016258:	bf00      	nop
    }

    if (ret == HAL_OK)
 801625a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801625e:	2b00      	cmp	r3, #0
 8016260:	d10b      	bne.n	801627a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016262:	4b4b      	ldr	r3, [pc, #300]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016266:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801626e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8016272:	4a47      	ldr	r2, [pc, #284]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016274:	430b      	orrs	r3, r1
 8016276:	6593      	str	r3, [r2, #88]	; 0x58
 8016278:	e003      	b.n	8016282 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801627a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801627e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801628a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801628e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016290:	2300      	movs	r3, #0
 8016292:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016294:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8016298:	460b      	mov	r3, r1
 801629a:	4313      	orrs	r3, r2
 801629c:	d03b      	beq.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80162a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80162a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80162aa:	d01f      	beq.n	80162ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80162ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80162b0:	d818      	bhi.n	80162e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80162b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80162b6:	d003      	beq.n	80162c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80162b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80162bc:	d007      	beq.n	80162ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80162be:	e011      	b.n	80162e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80162c0:	4b33      	ldr	r3, [pc, #204]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162c4:	4a32      	ldr	r2, [pc, #200]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80162ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80162cc:	e00f      	b.n	80162ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80162ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80162d2:	3328      	adds	r3, #40	; 0x28
 80162d4:	2101      	movs	r1, #1
 80162d6:	4618      	mov	r0, r3
 80162d8:	f000 fada 	bl	8016890 <RCCEx_PLL3_Config>
 80162dc:	4603      	mov	r3, r0
 80162de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80162e2:	e004      	b.n	80162ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80162e4:	2301      	movs	r3, #1
 80162e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80162ea:	e000      	b.n	80162ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80162ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80162ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d10b      	bne.n	801630e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80162f6:	4b26      	ldr	r3, [pc, #152]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80162fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80162fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016306:	4a22      	ldr	r2, [pc, #136]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016308:	430b      	orrs	r3, r1
 801630a:	6553      	str	r3, [r2, #84]	; 0x54
 801630c:	e003      	b.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801630e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801631e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8016322:	673b      	str	r3, [r7, #112]	; 0x70
 8016324:	2300      	movs	r3, #0
 8016326:	677b      	str	r3, [r7, #116]	; 0x74
 8016328:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801632c:	460b      	mov	r3, r1
 801632e:	4313      	orrs	r3, r2
 8016330:	d034      	beq.n	801639c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8016332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016338:	2b00      	cmp	r3, #0
 801633a:	d003      	beq.n	8016344 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016340:	d007      	beq.n	8016352 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8016342:	e011      	b.n	8016368 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016344:	4b12      	ldr	r3, [pc, #72]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016348:	4a11      	ldr	r2, [pc, #68]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801634a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801634e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8016350:	e00e      	b.n	8016370 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8016352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016356:	3308      	adds	r3, #8
 8016358:	2102      	movs	r1, #2
 801635a:	4618      	mov	r0, r3
 801635c:	f000 f9e6 	bl	801672c <RCCEx_PLL2_Config>
 8016360:	4603      	mov	r3, r0
 8016362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8016366:	e003      	b.n	8016370 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8016368:	2301      	movs	r3, #1
 801636a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801636e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016374:	2b00      	cmp	r3, #0
 8016376:	d10d      	bne.n	8016394 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016378:	4b05      	ldr	r3, [pc, #20]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801637a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801637c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016386:	4a02      	ldr	r2, [pc, #8]	; (8016390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016388:	430b      	orrs	r3, r1
 801638a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801638c:	e006      	b.n	801639c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801638e:	bf00      	nop
 8016390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80163a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80163a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80163aa:	2300      	movs	r3, #0
 80163ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80163ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80163b2:	460b      	mov	r3, r1
 80163b4:	4313      	orrs	r3, r2
 80163b6:	d00c      	beq.n	80163d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80163b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80163bc:	3328      	adds	r3, #40	; 0x28
 80163be:	2102      	movs	r1, #2
 80163c0:	4618      	mov	r0, r3
 80163c2:	f000 fa65 	bl	8016890 <RCCEx_PLL3_Config>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d002      	beq.n	80163d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80163cc:	2301      	movs	r3, #1
 80163ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80163d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80163d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163da:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80163de:	663b      	str	r3, [r7, #96]	; 0x60
 80163e0:	2300      	movs	r3, #0
 80163e2:	667b      	str	r3, [r7, #100]	; 0x64
 80163e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80163e8:	460b      	mov	r3, r1
 80163ea:	4313      	orrs	r3, r2
 80163ec:	d038      	beq.n	8016460 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80163ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80163f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80163fa:	d018      	beq.n	801642e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80163fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016400:	d811      	bhi.n	8016426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8016402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016406:	d014      	beq.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8016408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801640c:	d80b      	bhi.n	8016426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801640e:	2b00      	cmp	r3, #0
 8016410:	d011      	beq.n	8016436 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8016412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016416:	d106      	bne.n	8016426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016418:	4bc3      	ldr	r3, [pc, #780]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801641c:	4ac2      	ldr	r2, [pc, #776]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801641e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8016424:	e008      	b.n	8016438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016426:	2301      	movs	r3, #1
 8016428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801642c:	e004      	b.n	8016438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801642e:	bf00      	nop
 8016430:	e002      	b.n	8016438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8016432:	bf00      	nop
 8016434:	e000      	b.n	8016438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8016436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801643c:	2b00      	cmp	r3, #0
 801643e:	d10b      	bne.n	8016458 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016440:	4bb9      	ldr	r3, [pc, #740]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016444:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8016448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801644c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016450:	4ab5      	ldr	r2, [pc, #724]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016452:	430b      	orrs	r3, r1
 8016454:	6553      	str	r3, [r2, #84]	; 0x54
 8016456:	e003      	b.n	8016460 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801645c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8016460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016468:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801646c:	65bb      	str	r3, [r7, #88]	; 0x58
 801646e:	2300      	movs	r3, #0
 8016470:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016472:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8016476:	460b      	mov	r3, r1
 8016478:	4313      	orrs	r3, r2
 801647a:	d009      	beq.n	8016490 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801647c:	4baa      	ldr	r3, [pc, #680]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801647e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801648a:	4aa7      	ldr	r2, [pc, #668]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801648c:	430b      	orrs	r3, r1
 801648e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8016490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016498:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 801649c:	653b      	str	r3, [r7, #80]	; 0x50
 801649e:	2300      	movs	r3, #0
 80164a0:	657b      	str	r3, [r7, #84]	; 0x54
 80164a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80164a6:	460b      	mov	r3, r1
 80164a8:	4313      	orrs	r3, r2
 80164aa:	d00a      	beq.n	80164c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80164ac:	4b9e      	ldr	r3, [pc, #632]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164ae:	691b      	ldr	r3, [r3, #16]
 80164b0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80164b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80164b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80164bc:	4a9a      	ldr	r2, [pc, #616]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164be:	430b      	orrs	r3, r1
 80164c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80164c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80164c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80164ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80164d0:	2300      	movs	r3, #0
 80164d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80164d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80164d8:	460b      	mov	r3, r1
 80164da:	4313      	orrs	r3, r2
 80164dc:	d009      	beq.n	80164f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80164de:	4b92      	ldr	r3, [pc, #584]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164e2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80164e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80164ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164ec:	4a8e      	ldr	r2, [pc, #568]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164ee:	430b      	orrs	r3, r1
 80164f0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80164f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80164f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164fa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80164fe:	643b      	str	r3, [r7, #64]	; 0x40
 8016500:	2300      	movs	r3, #0
 8016502:	647b      	str	r3, [r7, #68]	; 0x44
 8016504:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8016508:	460b      	mov	r3, r1
 801650a:	4313      	orrs	r3, r2
 801650c:	d00e      	beq.n	801652c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801650e:	4b86      	ldr	r3, [pc, #536]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016510:	691b      	ldr	r3, [r3, #16]
 8016512:	4a85      	ldr	r2, [pc, #532]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016518:	6113      	str	r3, [r2, #16]
 801651a:	4b83      	ldr	r3, [pc, #524]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801651c:	6919      	ldr	r1, [r3, #16]
 801651e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016522:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8016526:	4a80      	ldr	r2, [pc, #512]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016528:	430b      	orrs	r3, r1
 801652a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016534:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8016538:	63bb      	str	r3, [r7, #56]	; 0x38
 801653a:	2300      	movs	r3, #0
 801653c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801653e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8016542:	460b      	mov	r3, r1
 8016544:	4313      	orrs	r3, r2
 8016546:	d009      	beq.n	801655c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8016548:	4b77      	ldr	r3, [pc, #476]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801654a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801654c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8016550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016556:	4a74      	ldr	r2, [pc, #464]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016558:	430b      	orrs	r3, r1
 801655a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801655c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016564:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8016568:	633b      	str	r3, [r7, #48]	; 0x30
 801656a:	2300      	movs	r3, #0
 801656c:	637b      	str	r3, [r7, #52]	; 0x34
 801656e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8016572:	460b      	mov	r3, r1
 8016574:	4313      	orrs	r3, r2
 8016576:	d00a      	beq.n	801658e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8016578:	4b6b      	ldr	r3, [pc, #428]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801657a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801657c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8016580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016588:	4a67      	ldr	r2, [pc, #412]	; (8016728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801658a:	430b      	orrs	r3, r1
 801658c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016596:	2100      	movs	r1, #0
 8016598:	62b9      	str	r1, [r7, #40]	; 0x28
 801659a:	f003 0301 	and.w	r3, r3, #1
 801659e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80165a4:	460b      	mov	r3, r1
 80165a6:	4313      	orrs	r3, r2
 80165a8:	d011      	beq.n	80165ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80165aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80165ae:	3308      	adds	r3, #8
 80165b0:	2100      	movs	r1, #0
 80165b2:	4618      	mov	r0, r3
 80165b4:	f000 f8ba 	bl	801672c <RCCEx_PLL2_Config>
 80165b8:	4603      	mov	r3, r0
 80165ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80165be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d003      	beq.n	80165ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80165ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80165ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80165d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d6:	2100      	movs	r1, #0
 80165d8:	6239      	str	r1, [r7, #32]
 80165da:	f003 0302 	and.w	r3, r3, #2
 80165de:	627b      	str	r3, [r7, #36]	; 0x24
 80165e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80165e4:	460b      	mov	r3, r1
 80165e6:	4313      	orrs	r3, r2
 80165e8:	d011      	beq.n	801660e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80165ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80165ee:	3308      	adds	r3, #8
 80165f0:	2101      	movs	r1, #1
 80165f2:	4618      	mov	r0, r3
 80165f4:	f000 f89a 	bl	801672c <RCCEx_PLL2_Config>
 80165f8:	4603      	mov	r3, r0
 80165fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80165fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016602:	2b00      	cmp	r3, #0
 8016604:	d003      	beq.n	801660e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801660a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801660e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016616:	2100      	movs	r1, #0
 8016618:	61b9      	str	r1, [r7, #24]
 801661a:	f003 0304 	and.w	r3, r3, #4
 801661e:	61fb      	str	r3, [r7, #28]
 8016620:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8016624:	460b      	mov	r3, r1
 8016626:	4313      	orrs	r3, r2
 8016628:	d011      	beq.n	801664e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801662e:	3308      	adds	r3, #8
 8016630:	2102      	movs	r1, #2
 8016632:	4618      	mov	r0, r3
 8016634:	f000 f87a 	bl	801672c <RCCEx_PLL2_Config>
 8016638:	4603      	mov	r3, r0
 801663a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801663e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016642:	2b00      	cmp	r3, #0
 8016644:	d003      	beq.n	801664e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801664a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801664e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016656:	2100      	movs	r1, #0
 8016658:	6139      	str	r1, [r7, #16]
 801665a:	f003 0308 	and.w	r3, r3, #8
 801665e:	617b      	str	r3, [r7, #20]
 8016660:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8016664:	460b      	mov	r3, r1
 8016666:	4313      	orrs	r3, r2
 8016668:	d011      	beq.n	801668e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801666a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801666e:	3328      	adds	r3, #40	; 0x28
 8016670:	2100      	movs	r1, #0
 8016672:	4618      	mov	r0, r3
 8016674:	f000 f90c 	bl	8016890 <RCCEx_PLL3_Config>
 8016678:	4603      	mov	r3, r0
 801667a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 801667e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016682:	2b00      	cmp	r3, #0
 8016684:	d003      	beq.n	801668e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801668a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016696:	2100      	movs	r1, #0
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	f003 0310 	and.w	r3, r3, #16
 801669e:	60fb      	str	r3, [r7, #12]
 80166a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80166a4:	460b      	mov	r3, r1
 80166a6:	4313      	orrs	r3, r2
 80166a8:	d011      	beq.n	80166ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80166aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80166ae:	3328      	adds	r3, #40	; 0x28
 80166b0:	2101      	movs	r1, #1
 80166b2:	4618      	mov	r0, r3
 80166b4:	f000 f8ec 	bl	8016890 <RCCEx_PLL3_Config>
 80166b8:	4603      	mov	r3, r0
 80166ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80166be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d003      	beq.n	80166ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80166ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80166ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80166d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d6:	2100      	movs	r1, #0
 80166d8:	6039      	str	r1, [r7, #0]
 80166da:	f003 0320 	and.w	r3, r3, #32
 80166de:	607b      	str	r3, [r7, #4]
 80166e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80166e4:	460b      	mov	r3, r1
 80166e6:	4313      	orrs	r3, r2
 80166e8:	d011      	beq.n	801670e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80166ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80166ee:	3328      	adds	r3, #40	; 0x28
 80166f0:	2102      	movs	r1, #2
 80166f2:	4618      	mov	r0, r3
 80166f4:	f000 f8cc 	bl	8016890 <RCCEx_PLL3_Config>
 80166f8:	4603      	mov	r3, r0
 80166fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80166fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8016702:	2b00      	cmp	r3, #0
 8016704:	d003      	beq.n	801670e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801670a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 801670e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8016712:	2b00      	cmp	r3, #0
 8016714:	d101      	bne.n	801671a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8016716:	2300      	movs	r3, #0
 8016718:	e000      	b.n	801671c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801671a:	2301      	movs	r3, #1
}
 801671c:	4618      	mov	r0, r3
 801671e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8016722:	46bd      	mov	sp, r7
 8016724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016728:	58024400 	.word	0x58024400

0801672c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b084      	sub	sp, #16
 8016730:	af00      	add	r7, sp, #0
 8016732:	6078      	str	r0, [r7, #4]
 8016734:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016736:	2300      	movs	r3, #0
 8016738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801673a:	4b53      	ldr	r3, [pc, #332]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801673c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801673e:	f003 0303 	and.w	r3, r3, #3
 8016742:	2b03      	cmp	r3, #3
 8016744:	d101      	bne.n	801674a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016746:	2301      	movs	r3, #1
 8016748:	e099      	b.n	801687e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801674a:	4b4f      	ldr	r3, [pc, #316]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4a4e      	ldr	r2, [pc, #312]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016750:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016756:	f7fa fb83 	bl	8010e60 <HAL_GetTick>
 801675a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801675c:	e008      	b.n	8016770 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801675e:	f7fa fb7f 	bl	8010e60 <HAL_GetTick>
 8016762:	4602      	mov	r2, r0
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	1ad3      	subs	r3, r2, r3
 8016768:	2b02      	cmp	r3, #2
 801676a:	d901      	bls.n	8016770 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801676c:	2303      	movs	r3, #3
 801676e:	e086      	b.n	801687e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016770:	4b45      	ldr	r3, [pc, #276]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016778:	2b00      	cmp	r3, #0
 801677a:	d1f0      	bne.n	801675e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801677c:	4b42      	ldr	r3, [pc, #264]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016780:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	031b      	lsls	r3, r3, #12
 801678a:	493f      	ldr	r1, [pc, #252]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801678c:	4313      	orrs	r3, r2
 801678e:	628b      	str	r3, [r1, #40]	; 0x28
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	3b01      	subs	r3, #1
 8016796:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	689b      	ldr	r3, [r3, #8]
 801679e:	3b01      	subs	r3, #1
 80167a0:	025b      	lsls	r3, r3, #9
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	431a      	orrs	r2, r3
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	68db      	ldr	r3, [r3, #12]
 80167aa:	3b01      	subs	r3, #1
 80167ac:	041b      	lsls	r3, r3, #16
 80167ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80167b2:	431a      	orrs	r2, r3
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	691b      	ldr	r3, [r3, #16]
 80167b8:	3b01      	subs	r3, #1
 80167ba:	061b      	lsls	r3, r3, #24
 80167bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80167c0:	4931      	ldr	r1, [pc, #196]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167c2:	4313      	orrs	r3, r2
 80167c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80167c6:	4b30      	ldr	r3, [pc, #192]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	695b      	ldr	r3, [r3, #20]
 80167d2:	492d      	ldr	r1, [pc, #180]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167d4:	4313      	orrs	r3, r2
 80167d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80167d8:	4b2b      	ldr	r3, [pc, #172]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167dc:	f023 0220 	bic.w	r2, r3, #32
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	699b      	ldr	r3, [r3, #24]
 80167e4:	4928      	ldr	r1, [pc, #160]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167e6:	4313      	orrs	r3, r2
 80167e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80167ea:	4b27      	ldr	r3, [pc, #156]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167ee:	4a26      	ldr	r2, [pc, #152]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167f0:	f023 0310 	bic.w	r3, r3, #16
 80167f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80167f6:	4b24      	ldr	r3, [pc, #144]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 80167f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80167fa:	4b24      	ldr	r3, [pc, #144]	; (801688c <RCCEx_PLL2_Config+0x160>)
 80167fc:	4013      	ands	r3, r2
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	69d2      	ldr	r2, [r2, #28]
 8016802:	00d2      	lsls	r2, r2, #3
 8016804:	4920      	ldr	r1, [pc, #128]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016806:	4313      	orrs	r3, r2
 8016808:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801680a:	4b1f      	ldr	r3, [pc, #124]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801680e:	4a1e      	ldr	r2, [pc, #120]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016810:	f043 0310 	orr.w	r3, r3, #16
 8016814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d106      	bne.n	801682a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801681c:	4b1a      	ldr	r3, [pc, #104]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016820:	4a19      	ldr	r2, [pc, #100]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016822:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016828:	e00f      	b.n	801684a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	2b01      	cmp	r3, #1
 801682e:	d106      	bne.n	801683e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016830:	4b15      	ldr	r3, [pc, #84]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016834:	4a14      	ldr	r2, [pc, #80]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801683a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801683c:	e005      	b.n	801684a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801683e:	4b12      	ldr	r3, [pc, #72]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016842:	4a11      	ldr	r2, [pc, #68]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801684a:	4b0f      	ldr	r3, [pc, #60]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	4a0e      	ldr	r2, [pc, #56]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016850:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016856:	f7fa fb03 	bl	8010e60 <HAL_GetTick>
 801685a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801685c:	e008      	b.n	8016870 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801685e:	f7fa faff 	bl	8010e60 <HAL_GetTick>
 8016862:	4602      	mov	r2, r0
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	1ad3      	subs	r3, r2, r3
 8016868:	2b02      	cmp	r3, #2
 801686a:	d901      	bls.n	8016870 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801686c:	2303      	movs	r3, #3
 801686e:	e006      	b.n	801687e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016870:	4b05      	ldr	r3, [pc, #20]	; (8016888 <RCCEx_PLL2_Config+0x15c>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016878:	2b00      	cmp	r3, #0
 801687a:	d0f0      	beq.n	801685e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801687c:	7bfb      	ldrb	r3, [r7, #15]
}
 801687e:	4618      	mov	r0, r3
 8016880:	3710      	adds	r7, #16
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	bf00      	nop
 8016888:	58024400 	.word	0x58024400
 801688c:	ffff0007 	.word	0xffff0007

08016890 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b084      	sub	sp, #16
 8016894:	af00      	add	r7, sp, #0
 8016896:	6078      	str	r0, [r7, #4]
 8016898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801689a:	2300      	movs	r3, #0
 801689c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801689e:	4b53      	ldr	r3, [pc, #332]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168a2:	f003 0303 	and.w	r3, r3, #3
 80168a6:	2b03      	cmp	r3, #3
 80168a8:	d101      	bne.n	80168ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	e099      	b.n	80169e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80168ae:	4b4f      	ldr	r3, [pc, #316]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	4a4e      	ldr	r2, [pc, #312]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80168b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80168ba:	f7fa fad1 	bl	8010e60 <HAL_GetTick>
 80168be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80168c0:	e008      	b.n	80168d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80168c2:	f7fa facd 	bl	8010e60 <HAL_GetTick>
 80168c6:	4602      	mov	r2, r0
 80168c8:	68bb      	ldr	r3, [r7, #8]
 80168ca:	1ad3      	subs	r3, r2, r3
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d901      	bls.n	80168d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80168d0:	2303      	movs	r3, #3
 80168d2:	e086      	b.n	80169e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80168d4:	4b45      	ldr	r3, [pc, #276]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d1f0      	bne.n	80168c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80168e0:	4b42      	ldr	r3, [pc, #264]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80168e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	051b      	lsls	r3, r3, #20
 80168ee:	493f      	ldr	r1, [pc, #252]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80168f0:	4313      	orrs	r3, r2
 80168f2:	628b      	str	r3, [r1, #40]	; 0x28
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	3b01      	subs	r3, #1
 80168fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	689b      	ldr	r3, [r3, #8]
 8016902:	3b01      	subs	r3, #1
 8016904:	025b      	lsls	r3, r3, #9
 8016906:	b29b      	uxth	r3, r3
 8016908:	431a      	orrs	r2, r3
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	3b01      	subs	r3, #1
 8016910:	041b      	lsls	r3, r3, #16
 8016912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016916:	431a      	orrs	r2, r3
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	691b      	ldr	r3, [r3, #16]
 801691c:	3b01      	subs	r3, #1
 801691e:	061b      	lsls	r3, r3, #24
 8016920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016924:	4931      	ldr	r1, [pc, #196]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016926:	4313      	orrs	r3, r2
 8016928:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801692a:	4b30      	ldr	r3, [pc, #192]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801692e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	695b      	ldr	r3, [r3, #20]
 8016936:	492d      	ldr	r1, [pc, #180]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016938:	4313      	orrs	r3, r2
 801693a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801693c:	4b2b      	ldr	r3, [pc, #172]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016940:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	699b      	ldr	r3, [r3, #24]
 8016948:	4928      	ldr	r1, [pc, #160]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801694a:	4313      	orrs	r3, r2
 801694c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801694e:	4b27      	ldr	r3, [pc, #156]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016952:	4a26      	ldr	r2, [pc, #152]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801695a:	4b24      	ldr	r3, [pc, #144]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801695c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801695e:	4b24      	ldr	r3, [pc, #144]	; (80169f0 <RCCEx_PLL3_Config+0x160>)
 8016960:	4013      	ands	r3, r2
 8016962:	687a      	ldr	r2, [r7, #4]
 8016964:	69d2      	ldr	r2, [r2, #28]
 8016966:	00d2      	lsls	r2, r2, #3
 8016968:	4920      	ldr	r1, [pc, #128]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801696a:	4313      	orrs	r3, r2
 801696c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801696e:	4b1f      	ldr	r3, [pc, #124]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016972:	4a1e      	ldr	r2, [pc, #120]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d106      	bne.n	801698e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016980:	4b1a      	ldr	r3, [pc, #104]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016984:	4a19      	ldr	r2, [pc, #100]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016986:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801698a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801698c:	e00f      	b.n	80169ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b01      	cmp	r3, #1
 8016992:	d106      	bne.n	80169a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016994:	4b15      	ldr	r3, [pc, #84]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 8016996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016998:	4a14      	ldr	r2, [pc, #80]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 801699a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801699e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80169a0:	e005      	b.n	80169ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80169a2:	4b12      	ldr	r3, [pc, #72]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80169a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169a6:	4a11      	ldr	r2, [pc, #68]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80169a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80169ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80169ae:	4b0f      	ldr	r3, [pc, #60]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	4a0e      	ldr	r2, [pc, #56]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80169b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80169b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80169ba:	f7fa fa51 	bl	8010e60 <HAL_GetTick>
 80169be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80169c0:	e008      	b.n	80169d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80169c2:	f7fa fa4d 	bl	8010e60 <HAL_GetTick>
 80169c6:	4602      	mov	r2, r0
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	1ad3      	subs	r3, r2, r3
 80169cc:	2b02      	cmp	r3, #2
 80169ce:	d901      	bls.n	80169d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80169d0:	2303      	movs	r3, #3
 80169d2:	e006      	b.n	80169e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80169d4:	4b05      	ldr	r3, [pc, #20]	; (80169ec <RCCEx_PLL3_Config+0x15c>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d0f0      	beq.n	80169c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80169e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80169e2:	4618      	mov	r0, r3
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}
 80169ea:	bf00      	nop
 80169ec:	58024400 	.word	0x58024400
 80169f0:	ffff0007 	.word	0xffff0007

080169f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d101      	bne.n	8016a08 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8016a04:	2301      	movs	r3, #1
 8016a06:	e02b      	b.n	8016a60 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016a0e:	b2db      	uxtb	r3, r3
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d106      	bne.n	8016a22 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2200      	movs	r2, #0
 8016a18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8016a1c:	6878      	ldr	r0, [r7, #4]
 8016a1e:	f7ea fd81 	bl	8001524 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2202      	movs	r2, #2
 8016a26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681a      	ldr	r2, [r3, #0]
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	3304      	adds	r3, #4
 8016a32:	4619      	mov	r1, r3
 8016a34:	4610      	mov	r0, r2
 8016a36:	f000 fd9b 	bl	8017570 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6818      	ldr	r0, [r3, #0]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	685b      	ldr	r3, [r3, #4]
 8016a42:	461a      	mov	r2, r3
 8016a44:	6839      	ldr	r1, [r7, #0]
 8016a46:	f000 fdef 	bl	8017628 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8016a4a:	4b07      	ldr	r3, [pc, #28]	; (8016a68 <HAL_SDRAM_Init+0x74>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	4a06      	ldr	r2, [pc, #24]	; (8016a68 <HAL_SDRAM_Init+0x74>)
 8016a50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8016a54:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	2201      	movs	r2, #1
 8016a5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8016a5e:	2300      	movs	r3, #0
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}
 8016a68:	52004000 	.word	0x52004000

08016a6c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b082      	sub	sp, #8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f7ea fd99 	bl	80015ac <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	685b      	ldr	r3, [r3, #4]
 8016a82:	4619      	mov	r1, r3
 8016a84:	4610      	mov	r0, r2
 8016a86:	f000 fe39 	bl	80176fc <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2200      	movs	r2, #0
 8016a96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  return HAL_OK;
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b086      	sub	sp, #24
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	60f8      	str	r0, [r7, #12]
 8016aac:	60b9      	str	r1, [r7, #8]
 8016aae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016ab6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016ab8:	7dfb      	ldrb	r3, [r7, #23]
 8016aba:	2b02      	cmp	r3, #2
 8016abc:	d101      	bne.n	8016ac2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8016abe:	2302      	movs	r3, #2
 8016ac0:	e021      	b.n	8016b06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8016ac2:	7dfb      	ldrb	r3, [r7, #23]
 8016ac4:	2b01      	cmp	r3, #1
 8016ac6:	d002      	beq.n	8016ace <HAL_SDRAM_SendCommand+0x2a>
 8016ac8:	7dfb      	ldrb	r3, [r7, #23]
 8016aca:	2b05      	cmp	r3, #5
 8016acc:	d118      	bne.n	8016b00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2202      	movs	r2, #2
 8016ad2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	68b9      	ldr	r1, [r7, #8]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f000 fe2e 	bl	8017740 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d104      	bne.n	8016af6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2205      	movs	r2, #5
 8016af0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016af4:	e006      	b.n	8016b04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2201      	movs	r2, #1
 8016afa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016afe:	e001      	b.n	8016b04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8016b00:	2301      	movs	r3, #1
 8016b02:	e000      	b.n	8016b06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8016b04:	2300      	movs	r3, #0
}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3718      	adds	r7, #24
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}

08016b0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8016b0e:	b580      	push	{r7, lr}
 8016b10:	b082      	sub	sp, #8
 8016b12:	af00      	add	r7, sp, #0
 8016b14:	6078      	str	r0, [r7, #4]
 8016b16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	2b02      	cmp	r3, #2
 8016b22:	d101      	bne.n	8016b28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8016b24:	2302      	movs	r3, #2
 8016b26:	e016      	b.n	8016b56 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d10f      	bne.n	8016b54 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2202      	movs	r2, #2
 8016b38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	6839      	ldr	r1, [r7, #0]
 8016b42:	4618      	mov	r0, r3
 8016b44:	f000 fe20 	bl	8017788 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8016b50:	2300      	movs	r3, #0
 8016b52:	e000      	b.n	8016b56 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8016b54:	2301      	movs	r3, #1
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3708      	adds	r7, #8
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d101      	bne.n	8016b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	e049      	b.n	8016c04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d106      	bne.n	8016b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2200      	movs	r2, #0
 8016b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7ea fbc7 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2202      	movs	r2, #2
 8016b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	681a      	ldr	r2, [r3, #0]
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	3304      	adds	r3, #4
 8016b9a:	4619      	mov	r1, r3
 8016b9c:	4610      	mov	r0, r2
 8016b9e:	f000 fa37 	bl	8017010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2201      	movs	r2, #1
 8016bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2201      	movs	r2, #1
 8016bb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	2201      	movs	r2, #1
 8016bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	2201      	movs	r2, #1
 8016bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	2201      	movs	r2, #1
 8016bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2201      	movs	r2, #1
 8016bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2201      	movs	r2, #1
 8016be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2201      	movs	r2, #1
 8016bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2201      	movs	r2, #1
 8016bf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016c02:	2300      	movs	r3, #0
}
 8016c04:	4618      	mov	r0, r3
 8016c06:	3708      	adds	r7, #8
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016c0c:	b480      	push	{r7}
 8016c0e:	b085      	sub	sp, #20
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	2b01      	cmp	r3, #1
 8016c1e:	d001      	beq.n	8016c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016c20:	2301      	movs	r3, #1
 8016c22:	e054      	b.n	8016cce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2202      	movs	r2, #2
 8016c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	68da      	ldr	r2, [r3, #12]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	f042 0201 	orr.w	r2, r2, #1
 8016c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4a26      	ldr	r2, [pc, #152]	; (8016cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d022      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016c4e:	d01d      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	4a22      	ldr	r2, [pc, #136]	; (8016ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8016c56:	4293      	cmp	r3, r2
 8016c58:	d018      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	4a21      	ldr	r2, [pc, #132]	; (8016ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8016c60:	4293      	cmp	r3, r2
 8016c62:	d013      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4a1f      	ldr	r2, [pc, #124]	; (8016ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	d00e      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	4a1e      	ldr	r2, [pc, #120]	; (8016cec <HAL_TIM_Base_Start_IT+0xe0>)
 8016c74:	4293      	cmp	r3, r2
 8016c76:	d009      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	4a1c      	ldr	r2, [pc, #112]	; (8016cf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d004      	beq.n	8016c8c <HAL_TIM_Base_Start_IT+0x80>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	4a1b      	ldr	r2, [pc, #108]	; (8016cf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d115      	bne.n	8016cb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	689a      	ldr	r2, [r3, #8]
 8016c92:	4b19      	ldr	r3, [pc, #100]	; (8016cf8 <HAL_TIM_Base_Start_IT+0xec>)
 8016c94:	4013      	ands	r3, r2
 8016c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	2b06      	cmp	r3, #6
 8016c9c:	d015      	beq.n	8016cca <HAL_TIM_Base_Start_IT+0xbe>
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ca4:	d011      	beq.n	8016cca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	681a      	ldr	r2, [r3, #0]
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	f042 0201 	orr.w	r2, r2, #1
 8016cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016cb6:	e008      	b.n	8016cca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	681a      	ldr	r2, [r3, #0]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f042 0201 	orr.w	r2, r2, #1
 8016cc6:	601a      	str	r2, [r3, #0]
 8016cc8:	e000      	b.n	8016ccc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	3714      	adds	r7, #20
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop
 8016cdc:	40010000 	.word	0x40010000
 8016ce0:	40000400 	.word	0x40000400
 8016ce4:	40000800 	.word	0x40000800
 8016ce8:	40000c00 	.word	0x40000c00
 8016cec:	40010400 	.word	0x40010400
 8016cf0:	40001800 	.word	0x40001800
 8016cf4:	40014000 	.word	0x40014000
 8016cf8:	00010007 	.word	0x00010007

08016cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b082      	sub	sp, #8
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	691b      	ldr	r3, [r3, #16]
 8016d0a:	f003 0302 	and.w	r3, r3, #2
 8016d0e:	2b02      	cmp	r3, #2
 8016d10:	d122      	bne.n	8016d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	f003 0302 	and.w	r3, r3, #2
 8016d1c:	2b02      	cmp	r3, #2
 8016d1e:	d11b      	bne.n	8016d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	f06f 0202 	mvn.w	r2, #2
 8016d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2201      	movs	r2, #1
 8016d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	699b      	ldr	r3, [r3, #24]
 8016d36:	f003 0303 	and.w	r3, r3, #3
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d003      	beq.n	8016d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f000 f947 	bl	8016fd2 <HAL_TIM_IC_CaptureCallback>
 8016d44:	e005      	b.n	8016d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 f939 	bl	8016fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f000 f94a 	bl	8016fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	2200      	movs	r2, #0
 8016d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	691b      	ldr	r3, [r3, #16]
 8016d5e:	f003 0304 	and.w	r3, r3, #4
 8016d62:	2b04      	cmp	r3, #4
 8016d64:	d122      	bne.n	8016dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	68db      	ldr	r3, [r3, #12]
 8016d6c:	f003 0304 	and.w	r3, r3, #4
 8016d70:	2b04      	cmp	r3, #4
 8016d72:	d11b      	bne.n	8016dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f06f 0204 	mvn.w	r2, #4
 8016d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2202      	movs	r2, #2
 8016d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	699b      	ldr	r3, [r3, #24]
 8016d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d003      	beq.n	8016d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016d92:	6878      	ldr	r0, [r7, #4]
 8016d94:	f000 f91d 	bl	8016fd2 <HAL_TIM_IC_CaptureCallback>
 8016d98:	e005      	b.n	8016da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f000 f90f 	bl	8016fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f000 f920 	bl	8016fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2200      	movs	r2, #0
 8016daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	691b      	ldr	r3, [r3, #16]
 8016db2:	f003 0308 	and.w	r3, r3, #8
 8016db6:	2b08      	cmp	r3, #8
 8016db8:	d122      	bne.n	8016e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	68db      	ldr	r3, [r3, #12]
 8016dc0:	f003 0308 	and.w	r3, r3, #8
 8016dc4:	2b08      	cmp	r3, #8
 8016dc6:	d11b      	bne.n	8016e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	f06f 0208 	mvn.w	r2, #8
 8016dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	2204      	movs	r2, #4
 8016dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	69db      	ldr	r3, [r3, #28]
 8016dde:	f003 0303 	and.w	r3, r3, #3
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d003      	beq.n	8016dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f000 f8f3 	bl	8016fd2 <HAL_TIM_IC_CaptureCallback>
 8016dec:	e005      	b.n	8016dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f000 f8e5 	bl	8016fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f000 f8f6 	bl	8016fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	691b      	ldr	r3, [r3, #16]
 8016e06:	f003 0310 	and.w	r3, r3, #16
 8016e0a:	2b10      	cmp	r3, #16
 8016e0c:	d122      	bne.n	8016e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	68db      	ldr	r3, [r3, #12]
 8016e14:	f003 0310 	and.w	r3, r3, #16
 8016e18:	2b10      	cmp	r3, #16
 8016e1a:	d11b      	bne.n	8016e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	f06f 0210 	mvn.w	r2, #16
 8016e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	2208      	movs	r2, #8
 8016e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	69db      	ldr	r3, [r3, #28]
 8016e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d003      	beq.n	8016e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f000 f8c9 	bl	8016fd2 <HAL_TIM_IC_CaptureCallback>
 8016e40:	e005      	b.n	8016e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f000 f8bb 	bl	8016fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f000 f8cc 	bl	8016fe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2200      	movs	r2, #0
 8016e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	691b      	ldr	r3, [r3, #16]
 8016e5a:	f003 0301 	and.w	r3, r3, #1
 8016e5e:	2b01      	cmp	r3, #1
 8016e60:	d10e      	bne.n	8016e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	f003 0301 	and.w	r3, r3, #1
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d107      	bne.n	8016e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	f06f 0201 	mvn.w	r2, #1
 8016e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f7e9 ff20 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	691b      	ldr	r3, [r3, #16]
 8016e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e8a:	2b80      	cmp	r3, #128	; 0x80
 8016e8c:	d10e      	bne.n	8016eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016e98:	2b80      	cmp	r3, #128	; 0x80
 8016e9a:	d107      	bne.n	8016eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f000 fb4e 	bl	8017548 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	691b      	ldr	r3, [r3, #16]
 8016eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016eba:	d10e      	bne.n	8016eda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	68db      	ldr	r3, [r3, #12]
 8016ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ec6:	2b80      	cmp	r3, #128	; 0x80
 8016ec8:	d107      	bne.n	8016eda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f000 fb41 	bl	801755c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	691b      	ldr	r3, [r3, #16]
 8016ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ee4:	2b40      	cmp	r3, #64	; 0x40
 8016ee6:	d10e      	bne.n	8016f06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	68db      	ldr	r3, [r3, #12]
 8016eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ef2:	2b40      	cmp	r3, #64	; 0x40
 8016ef4:	d107      	bne.n	8016f06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016f00:	6878      	ldr	r0, [r7, #4]
 8016f02:	f000 f87a 	bl	8016ffa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	691b      	ldr	r3, [r3, #16]
 8016f0c:	f003 0320 	and.w	r3, r3, #32
 8016f10:	2b20      	cmp	r3, #32
 8016f12:	d10e      	bne.n	8016f32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	68db      	ldr	r3, [r3, #12]
 8016f1a:	f003 0320 	and.w	r3, r3, #32
 8016f1e:	2b20      	cmp	r3, #32
 8016f20:	d107      	bne.n	8016f32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	f06f 0220 	mvn.w	r2, #32
 8016f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016f2c:	6878      	ldr	r0, [r7, #4]
 8016f2e:	f000 fb01 	bl	8017534 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016f32:	bf00      	nop
 8016f34:	3708      	adds	r7, #8
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b082      	sub	sp, #8
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	6078      	str	r0, [r7, #4]
 8016f42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016f4a:	2b01      	cmp	r3, #1
 8016f4c:	d101      	bne.n	8016f52 <HAL_TIM_SlaveConfigSynchro+0x18>
 8016f4e:	2302      	movs	r3, #2
 8016f50:	e031      	b.n	8016fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2201      	movs	r2, #1
 8016f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2202      	movs	r2, #2
 8016f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8016f62:	6839      	ldr	r1, [r7, #0]
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f000 f8ed 	bl	8017144 <TIM_SlaveTimer_SetConfig>
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d009      	beq.n	8016f84 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2201      	movs	r2, #1
 8016f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8016f80:	2301      	movs	r3, #1
 8016f82:	e018      	b.n	8016fb6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	68da      	ldr	r2, [r3, #12]
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016f92:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	68da      	ldr	r2, [r3, #12]
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016fa2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	2201      	movs	r2, #1
 8016fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016fb4:	2300      	movs	r3, #0
}
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	3708      	adds	r7, #8
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd80      	pop	{r7, pc}

08016fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016fbe:	b480      	push	{r7}
 8016fc0:	b083      	sub	sp, #12
 8016fc2:	af00      	add	r7, sp, #0
 8016fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8016fc6:	bf00      	nop
 8016fc8:	370c      	adds	r7, #12
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd0:	4770      	bx	lr

08016fd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8016fd2:	b480      	push	{r7}
 8016fd4:	b083      	sub	sp, #12
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8016fda:	bf00      	nop
 8016fdc:	370c      	adds	r7, #12
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe4:	4770      	bx	lr

08016fe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8016fe6:	b480      	push	{r7}
 8016fe8:	b083      	sub	sp, #12
 8016fea:	af00      	add	r7, sp, #0
 8016fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8016fee:	bf00      	nop
 8016ff0:	370c      	adds	r7, #12
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr

08016ffa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8016ffa:	b480      	push	{r7}
 8016ffc:	b083      	sub	sp, #12
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017002:	bf00      	nop
 8017004:	370c      	adds	r7, #12
 8017006:	46bd      	mov	sp, r7
 8017008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801700c:	4770      	bx	lr
	...

08017010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017010:	b480      	push	{r7}
 8017012:	b085      	sub	sp, #20
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
 8017018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	4a40      	ldr	r2, [pc, #256]	; (8017124 <TIM_Base_SetConfig+0x114>)
 8017024:	4293      	cmp	r3, r2
 8017026:	d013      	beq.n	8017050 <TIM_Base_SetConfig+0x40>
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801702e:	d00f      	beq.n	8017050 <TIM_Base_SetConfig+0x40>
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	4a3d      	ldr	r2, [pc, #244]	; (8017128 <TIM_Base_SetConfig+0x118>)
 8017034:	4293      	cmp	r3, r2
 8017036:	d00b      	beq.n	8017050 <TIM_Base_SetConfig+0x40>
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	4a3c      	ldr	r2, [pc, #240]	; (801712c <TIM_Base_SetConfig+0x11c>)
 801703c:	4293      	cmp	r3, r2
 801703e:	d007      	beq.n	8017050 <TIM_Base_SetConfig+0x40>
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	4a3b      	ldr	r2, [pc, #236]	; (8017130 <TIM_Base_SetConfig+0x120>)
 8017044:	4293      	cmp	r3, r2
 8017046:	d003      	beq.n	8017050 <TIM_Base_SetConfig+0x40>
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	4a3a      	ldr	r2, [pc, #232]	; (8017134 <TIM_Base_SetConfig+0x124>)
 801704c:	4293      	cmp	r3, r2
 801704e:	d108      	bne.n	8017062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	68fa      	ldr	r2, [r7, #12]
 801705e:	4313      	orrs	r3, r2
 8017060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	4a2f      	ldr	r2, [pc, #188]	; (8017124 <TIM_Base_SetConfig+0x114>)
 8017066:	4293      	cmp	r3, r2
 8017068:	d01f      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017070:	d01b      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	4a2c      	ldr	r2, [pc, #176]	; (8017128 <TIM_Base_SetConfig+0x118>)
 8017076:	4293      	cmp	r3, r2
 8017078:	d017      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	4a2b      	ldr	r2, [pc, #172]	; (801712c <TIM_Base_SetConfig+0x11c>)
 801707e:	4293      	cmp	r3, r2
 8017080:	d013      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	4a2a      	ldr	r2, [pc, #168]	; (8017130 <TIM_Base_SetConfig+0x120>)
 8017086:	4293      	cmp	r3, r2
 8017088:	d00f      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	4a29      	ldr	r2, [pc, #164]	; (8017134 <TIM_Base_SetConfig+0x124>)
 801708e:	4293      	cmp	r3, r2
 8017090:	d00b      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	4a28      	ldr	r2, [pc, #160]	; (8017138 <TIM_Base_SetConfig+0x128>)
 8017096:	4293      	cmp	r3, r2
 8017098:	d007      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4a27      	ldr	r2, [pc, #156]	; (801713c <TIM_Base_SetConfig+0x12c>)
 801709e:	4293      	cmp	r3, r2
 80170a0:	d003      	beq.n	80170aa <TIM_Base_SetConfig+0x9a>
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4a26      	ldr	r2, [pc, #152]	; (8017140 <TIM_Base_SetConfig+0x130>)
 80170a6:	4293      	cmp	r3, r2
 80170a8:	d108      	bne.n	80170bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80170b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80170b2:	683b      	ldr	r3, [r7, #0]
 80170b4:	68db      	ldr	r3, [r3, #12]
 80170b6:	68fa      	ldr	r2, [r7, #12]
 80170b8:	4313      	orrs	r3, r2
 80170ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80170c2:	683b      	ldr	r3, [r7, #0]
 80170c4:	695b      	ldr	r3, [r3, #20]
 80170c6:	4313      	orrs	r3, r2
 80170c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	68fa      	ldr	r2, [r7, #12]
 80170ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	689a      	ldr	r2, [r3, #8]
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	4a10      	ldr	r2, [pc, #64]	; (8017124 <TIM_Base_SetConfig+0x114>)
 80170e4:	4293      	cmp	r3, r2
 80170e6:	d00f      	beq.n	8017108 <TIM_Base_SetConfig+0xf8>
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	4a12      	ldr	r2, [pc, #72]	; (8017134 <TIM_Base_SetConfig+0x124>)
 80170ec:	4293      	cmp	r3, r2
 80170ee:	d00b      	beq.n	8017108 <TIM_Base_SetConfig+0xf8>
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4a11      	ldr	r2, [pc, #68]	; (8017138 <TIM_Base_SetConfig+0x128>)
 80170f4:	4293      	cmp	r3, r2
 80170f6:	d007      	beq.n	8017108 <TIM_Base_SetConfig+0xf8>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	4a10      	ldr	r2, [pc, #64]	; (801713c <TIM_Base_SetConfig+0x12c>)
 80170fc:	4293      	cmp	r3, r2
 80170fe:	d003      	beq.n	8017108 <TIM_Base_SetConfig+0xf8>
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	4a0f      	ldr	r2, [pc, #60]	; (8017140 <TIM_Base_SetConfig+0x130>)
 8017104:	4293      	cmp	r3, r2
 8017106:	d103      	bne.n	8017110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	691a      	ldr	r2, [r3, #16]
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2201      	movs	r2, #1
 8017114:	615a      	str	r2, [r3, #20]
}
 8017116:	bf00      	nop
 8017118:	3714      	adds	r7, #20
 801711a:	46bd      	mov	sp, r7
 801711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017120:	4770      	bx	lr
 8017122:	bf00      	nop
 8017124:	40010000 	.word	0x40010000
 8017128:	40000400 	.word	0x40000400
 801712c:	40000800 	.word	0x40000800
 8017130:	40000c00 	.word	0x40000c00
 8017134:	40010400 	.word	0x40010400
 8017138:	40014000 	.word	0x40014000
 801713c:	40014400 	.word	0x40014400
 8017140:	40014800 	.word	0x40014800

08017144 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b086      	sub	sp, #24
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
 801714c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801714e:	2300      	movs	r3, #0
 8017150:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	689b      	ldr	r3, [r3, #8]
 8017158:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801715a:	693a      	ldr	r2, [r7, #16]
 801715c:	4b65      	ldr	r3, [pc, #404]	; (80172f4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 801715e:	4013      	ands	r3, r2
 8017160:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8017162:	683b      	ldr	r3, [r7, #0]
 8017164:	685b      	ldr	r3, [r3, #4]
 8017166:	693a      	ldr	r2, [r7, #16]
 8017168:	4313      	orrs	r3, r2
 801716a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 801716c:	693a      	ldr	r2, [r7, #16]
 801716e:	4b62      	ldr	r3, [pc, #392]	; (80172f8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8017170:	4013      	ands	r3, r2
 8017172:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	693a      	ldr	r2, [r7, #16]
 801717a:	4313      	orrs	r3, r2
 801717c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	693a      	ldr	r2, [r7, #16]
 8017184:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	4a5c      	ldr	r2, [pc, #368]	; (80172fc <TIM_SlaveTimer_SetConfig+0x1b8>)
 801718c:	4293      	cmp	r3, r2
 801718e:	f000 80ab 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017192:	4a5a      	ldr	r2, [pc, #360]	; (80172fc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8017194:	4293      	cmp	r3, r2
 8017196:	f200 80a4 	bhi.w	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 801719a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801719e:	f000 80a3 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171a6:	f200 809c 	bhi.w	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171aa:	4a55      	ldr	r2, [pc, #340]	; (8017300 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80171ac:	4293      	cmp	r3, r2
 80171ae:	f000 809b 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171b2:	4a53      	ldr	r2, [pc, #332]	; (8017300 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	f200 8094 	bhi.w	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171ba:	4a52      	ldr	r2, [pc, #328]	; (8017304 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80171bc:	4293      	cmp	r3, r2
 80171be:	f000 8093 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171c2:	4a50      	ldr	r2, [pc, #320]	; (8017304 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80171c4:	4293      	cmp	r3, r2
 80171c6:	f200 808c 	bhi.w	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171ca:	4a4f      	ldr	r2, [pc, #316]	; (8017308 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80171cc:	4293      	cmp	r3, r2
 80171ce:	f000 808b 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171d2:	4a4d      	ldr	r2, [pc, #308]	; (8017308 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80171d4:	4293      	cmp	r3, r2
 80171d6:	f200 8084 	bhi.w	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171da:	4a4c      	ldr	r2, [pc, #304]	; (801730c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80171dc:	4293      	cmp	r3, r2
 80171de:	f000 8083 	beq.w	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171e2:	4a4a      	ldr	r2, [pc, #296]	; (801730c <TIM_SlaveTimer_SetConfig+0x1c8>)
 80171e4:	4293      	cmp	r3, r2
 80171e6:	d87c      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171e8:	4a49      	ldr	r2, [pc, #292]	; (8017310 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80171ea:	4293      	cmp	r3, r2
 80171ec:	d07c      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171ee:	4a48      	ldr	r2, [pc, #288]	; (8017310 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80171f0:	4293      	cmp	r3, r2
 80171f2:	d876      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 80171f4:	4a47      	ldr	r2, [pc, #284]	; (8017314 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80171f6:	4293      	cmp	r3, r2
 80171f8:	d076      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171fa:	4a46      	ldr	r2, [pc, #280]	; (8017314 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80171fc:	4293      	cmp	r3, r2
 80171fe:	d870      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8017204:	d070      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017206:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801720a:	d86a      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 801720c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017210:	d06a      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017216:	d864      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017218:	2b70      	cmp	r3, #112	; 0x70
 801721a:	d01a      	beq.n	8017252 <TIM_SlaveTimer_SetConfig+0x10e>
 801721c:	2b70      	cmp	r3, #112	; 0x70
 801721e:	d860      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017220:	2b60      	cmp	r3, #96	; 0x60
 8017222:	d054      	beq.n	80172ce <TIM_SlaveTimer_SetConfig+0x18a>
 8017224:	2b60      	cmp	r3, #96	; 0x60
 8017226:	d85c      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017228:	2b50      	cmp	r3, #80	; 0x50
 801722a:	d046      	beq.n	80172ba <TIM_SlaveTimer_SetConfig+0x176>
 801722c:	2b50      	cmp	r3, #80	; 0x50
 801722e:	d858      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017230:	2b40      	cmp	r3, #64	; 0x40
 8017232:	d019      	beq.n	8017268 <TIM_SlaveTimer_SetConfig+0x124>
 8017234:	2b40      	cmp	r3, #64	; 0x40
 8017236:	d854      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017238:	2b30      	cmp	r3, #48	; 0x30
 801723a:	d055      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 801723c:	2b30      	cmp	r3, #48	; 0x30
 801723e:	d850      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017240:	2b20      	cmp	r3, #32
 8017242:	d051      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017244:	2b20      	cmp	r3, #32
 8017246:	d84c      	bhi.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
 8017248:	2b00      	cmp	r3, #0
 801724a:	d04d      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 801724c:	2b10      	cmp	r3, #16
 801724e:	d04b      	beq.n	80172e8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017250:	e047      	b.n	80172e2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 801725e:	683b      	ldr	r3, [r7, #0]
 8017260:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8017262:	f000 f8b8 	bl	80173d6 <TIM_ETR_SetConfig>
      break;
 8017266:	e040      	b.n	80172ea <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	2b05      	cmp	r3, #5
 801726e:	d101      	bne.n	8017274 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8017270:	2301      	movs	r3, #1
 8017272:	e03b      	b.n	80172ec <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	6a1b      	ldr	r3, [r3, #32]
 801727a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	6a1a      	ldr	r2, [r3, #32]
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	f022 0201 	bic.w	r2, r2, #1
 801728a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	699b      	ldr	r3, [r3, #24]
 8017292:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8017294:	68bb      	ldr	r3, [r7, #8]
 8017296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801729a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	691b      	ldr	r3, [r3, #16]
 80172a0:	011b      	lsls	r3, r3, #4
 80172a2:	68ba      	ldr	r2, [r7, #8]
 80172a4:	4313      	orrs	r3, r2
 80172a6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	68ba      	ldr	r2, [r7, #8]
 80172ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	681b      	ldr	r3, [r3, #0]
 80172b4:	68fa      	ldr	r2, [r7, #12]
 80172b6:	621a      	str	r2, [r3, #32]
      break;
 80172b8:	e017      	b.n	80172ea <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80172c2:	683b      	ldr	r3, [r7, #0]
 80172c4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80172c6:	461a      	mov	r2, r3
 80172c8:	f000 f826 	bl	8017318 <TIM_TI1_ConfigInputStage>
      break;
 80172cc:	e00d      	b.n	80172ea <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80172d6:	683b      	ldr	r3, [r7, #0]
 80172d8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80172da:	461a      	mov	r2, r3
 80172dc:	f000 f84b 	bl	8017376 <TIM_TI2_ConfigInputStage>
      break;
 80172e0:	e003      	b.n	80172ea <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80172e2:	2301      	movs	r3, #1
 80172e4:	75fb      	strb	r3, [r7, #23]
      break;
 80172e6:	e000      	b.n	80172ea <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80172e8:	bf00      	nop
  }

  return status;
 80172ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3718      	adds	r7, #24
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	ffcfff8f 	.word	0xffcfff8f
 80172f8:	fffefff8 	.word	0xfffefff8
 80172fc:	00200010 	.word	0x00200010
 8017300:	00100070 	.word	0x00100070
 8017304:	00100060 	.word	0x00100060
 8017308:	00100050 	.word	0x00100050
 801730c:	00100040 	.word	0x00100040
 8017310:	00100030 	.word	0x00100030
 8017314:	00100020 	.word	0x00100020

08017318 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017318:	b480      	push	{r7}
 801731a:	b087      	sub	sp, #28
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	6a1b      	ldr	r3, [r3, #32]
 8017328:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	6a1b      	ldr	r3, [r3, #32]
 801732e:	f023 0201 	bic.w	r2, r3, #1
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	699b      	ldr	r3, [r3, #24]
 801733a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801733c:	693b      	ldr	r3, [r7, #16]
 801733e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8017342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	011b      	lsls	r3, r3, #4
 8017348:	693a      	ldr	r2, [r7, #16]
 801734a:	4313      	orrs	r3, r2
 801734c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	f023 030a 	bic.w	r3, r3, #10
 8017354:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8017356:	697a      	ldr	r2, [r7, #20]
 8017358:	68bb      	ldr	r3, [r7, #8]
 801735a:	4313      	orrs	r3, r2
 801735c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	693a      	ldr	r2, [r7, #16]
 8017362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	697a      	ldr	r2, [r7, #20]
 8017368:	621a      	str	r2, [r3, #32]
}
 801736a:	bf00      	nop
 801736c:	371c      	adds	r7, #28
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr

08017376 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017376:	b480      	push	{r7}
 8017378:	b087      	sub	sp, #28
 801737a:	af00      	add	r7, sp, #0
 801737c:	60f8      	str	r0, [r7, #12]
 801737e:	60b9      	str	r1, [r7, #8]
 8017380:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6a1b      	ldr	r3, [r3, #32]
 8017386:	f023 0210 	bic.w	r2, r3, #16
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	699b      	ldr	r3, [r3, #24]
 8017392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	6a1b      	ldr	r3, [r3, #32]
 8017398:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801739a:	697b      	ldr	r3, [r7, #20]
 801739c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80173a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	031b      	lsls	r3, r3, #12
 80173a6:	697a      	ldr	r2, [r7, #20]
 80173a8:	4313      	orrs	r3, r2
 80173aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80173ac:	693b      	ldr	r3, [r7, #16]
 80173ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80173b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80173b4:	68bb      	ldr	r3, [r7, #8]
 80173b6:	011b      	lsls	r3, r3, #4
 80173b8:	693a      	ldr	r2, [r7, #16]
 80173ba:	4313      	orrs	r3, r2
 80173bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	697a      	ldr	r2, [r7, #20]
 80173c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	693a      	ldr	r2, [r7, #16]
 80173c8:	621a      	str	r2, [r3, #32]
}
 80173ca:	bf00      	nop
 80173cc:	371c      	adds	r7, #28
 80173ce:	46bd      	mov	sp, r7
 80173d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d4:	4770      	bx	lr

080173d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80173d6:	b480      	push	{r7}
 80173d8:	b087      	sub	sp, #28
 80173da:	af00      	add	r7, sp, #0
 80173dc:	60f8      	str	r0, [r7, #12]
 80173de:	60b9      	str	r1, [r7, #8]
 80173e0:	607a      	str	r2, [r7, #4]
 80173e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	689b      	ldr	r3, [r3, #8]
 80173e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80173ea:	697b      	ldr	r3, [r7, #20]
 80173ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80173f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80173f2:	683b      	ldr	r3, [r7, #0]
 80173f4:	021a      	lsls	r2, r3, #8
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	431a      	orrs	r2, r3
 80173fa:	68bb      	ldr	r3, [r7, #8]
 80173fc:	4313      	orrs	r3, r2
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	4313      	orrs	r3, r2
 8017402:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	697a      	ldr	r2, [r7, #20]
 8017408:	609a      	str	r2, [r3, #8]
}
 801740a:	bf00      	nop
 801740c:	371c      	adds	r7, #28
 801740e:	46bd      	mov	sp, r7
 8017410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017414:	4770      	bx	lr
	...

08017418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017418:	b480      	push	{r7}
 801741a:	b085      	sub	sp, #20
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
 8017420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017428:	2b01      	cmp	r3, #1
 801742a:	d101      	bne.n	8017430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801742c:	2302      	movs	r3, #2
 801742e:	e06d      	b.n	801750c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2201      	movs	r2, #1
 8017434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	2202      	movs	r2, #2
 801743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	685b      	ldr	r3, [r3, #4]
 8017446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	689b      	ldr	r3, [r3, #8]
 801744e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	4a30      	ldr	r2, [pc, #192]	; (8017518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017456:	4293      	cmp	r3, r2
 8017458:	d004      	beq.n	8017464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681b      	ldr	r3, [r3, #0]
 801745e:	4a2f      	ldr	r2, [pc, #188]	; (801751c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017460:	4293      	cmp	r3, r2
 8017462:	d108      	bne.n	8017476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801746a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	68fa      	ldr	r2, [r7, #12]
 8017472:	4313      	orrs	r3, r2
 8017474:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017476:	68fb      	ldr	r3, [r7, #12]
 8017478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801747c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	68fa      	ldr	r2, [r7, #12]
 8017484:	4313      	orrs	r3, r2
 8017486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	68fa      	ldr	r2, [r7, #12]
 801748e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	4a20      	ldr	r2, [pc, #128]	; (8017518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017496:	4293      	cmp	r3, r2
 8017498:	d022      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80174a2:	d01d      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	4a1d      	ldr	r2, [pc, #116]	; (8017520 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d018      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	4a1c      	ldr	r2, [pc, #112]	; (8017524 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80174b4:	4293      	cmp	r3, r2
 80174b6:	d013      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	4a1a      	ldr	r2, [pc, #104]	; (8017528 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80174be:	4293      	cmp	r3, r2
 80174c0:	d00e      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	681b      	ldr	r3, [r3, #0]
 80174c6:	4a15      	ldr	r2, [pc, #84]	; (801751c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80174c8:	4293      	cmp	r3, r2
 80174ca:	d009      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	4a16      	ldr	r2, [pc, #88]	; (801752c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80174d2:	4293      	cmp	r3, r2
 80174d4:	d004      	beq.n	80174e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	4a15      	ldr	r2, [pc, #84]	; (8017530 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80174dc:	4293      	cmp	r3, r2
 80174de:	d10c      	bne.n	80174fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80174e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80174e8:	683b      	ldr	r3, [r7, #0]
 80174ea:	689b      	ldr	r3, [r3, #8]
 80174ec:	68ba      	ldr	r2, [r7, #8]
 80174ee:	4313      	orrs	r3, r2
 80174f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	68ba      	ldr	r2, [r7, #8]
 80174f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	2201      	movs	r2, #1
 80174fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	2200      	movs	r2, #0
 8017506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801750a:	2300      	movs	r3, #0
}
 801750c:	4618      	mov	r0, r3
 801750e:	3714      	adds	r7, #20
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr
 8017518:	40010000 	.word	0x40010000
 801751c:	40010400 	.word	0x40010400
 8017520:	40000400 	.word	0x40000400
 8017524:	40000800 	.word	0x40000800
 8017528:	40000c00 	.word	0x40000c00
 801752c:	40001800 	.word	0x40001800
 8017530:	40014000 	.word	0x40014000

08017534 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017534:	b480      	push	{r7}
 8017536:	b083      	sub	sp, #12
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801753c:	bf00      	nop
 801753e:	370c      	adds	r7, #12
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr

08017548 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017550:	bf00      	nop
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017564:	bf00      	nop
 8017566:	370c      	adds	r7, #12
 8017568:	46bd      	mov	sp, r7
 801756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756e:	4770      	bx	lr

08017570 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8017570:	b480      	push	{r7}
 8017572:	b083      	sub	sp, #12
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d121      	bne.n	80175c6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681a      	ldr	r2, [r3, #0]
 8017586:	4b27      	ldr	r3, [pc, #156]	; (8017624 <FMC_SDRAM_Init+0xb4>)
 8017588:	4013      	ands	r3, r2
 801758a:	683a      	ldr	r2, [r7, #0]
 801758c:	6851      	ldr	r1, [r2, #4]
 801758e:	683a      	ldr	r2, [r7, #0]
 8017590:	6892      	ldr	r2, [r2, #8]
 8017592:	4311      	orrs	r1, r2
 8017594:	683a      	ldr	r2, [r7, #0]
 8017596:	68d2      	ldr	r2, [r2, #12]
 8017598:	4311      	orrs	r1, r2
 801759a:	683a      	ldr	r2, [r7, #0]
 801759c:	6912      	ldr	r2, [r2, #16]
 801759e:	4311      	orrs	r1, r2
 80175a0:	683a      	ldr	r2, [r7, #0]
 80175a2:	6952      	ldr	r2, [r2, #20]
 80175a4:	4311      	orrs	r1, r2
 80175a6:	683a      	ldr	r2, [r7, #0]
 80175a8:	6992      	ldr	r2, [r2, #24]
 80175aa:	4311      	orrs	r1, r2
 80175ac:	683a      	ldr	r2, [r7, #0]
 80175ae:	69d2      	ldr	r2, [r2, #28]
 80175b0:	4311      	orrs	r1, r2
 80175b2:	683a      	ldr	r2, [r7, #0]
 80175b4:	6a12      	ldr	r2, [r2, #32]
 80175b6:	4311      	orrs	r1, r2
 80175b8:	683a      	ldr	r2, [r7, #0]
 80175ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80175bc:	430a      	orrs	r2, r1
 80175be:	431a      	orrs	r2, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	601a      	str	r2, [r3, #0]
 80175c4:	e026      	b.n	8017614 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	69d9      	ldr	r1, [r3, #28]
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	6a1b      	ldr	r3, [r3, #32]
 80175d6:	4319      	orrs	r1, r3
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175dc:	430b      	orrs	r3, r1
 80175de:	431a      	orrs	r2, r3
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	685a      	ldr	r2, [r3, #4]
 80175e8:	4b0e      	ldr	r3, [pc, #56]	; (8017624 <FMC_SDRAM_Init+0xb4>)
 80175ea:	4013      	ands	r3, r2
 80175ec:	683a      	ldr	r2, [r7, #0]
 80175ee:	6851      	ldr	r1, [r2, #4]
 80175f0:	683a      	ldr	r2, [r7, #0]
 80175f2:	6892      	ldr	r2, [r2, #8]
 80175f4:	4311      	orrs	r1, r2
 80175f6:	683a      	ldr	r2, [r7, #0]
 80175f8:	68d2      	ldr	r2, [r2, #12]
 80175fa:	4311      	orrs	r1, r2
 80175fc:	683a      	ldr	r2, [r7, #0]
 80175fe:	6912      	ldr	r2, [r2, #16]
 8017600:	4311      	orrs	r1, r2
 8017602:	683a      	ldr	r2, [r7, #0]
 8017604:	6952      	ldr	r2, [r2, #20]
 8017606:	4311      	orrs	r1, r2
 8017608:	683a      	ldr	r2, [r7, #0]
 801760a:	6992      	ldr	r2, [r2, #24]
 801760c:	430a      	orrs	r2, r1
 801760e:	431a      	orrs	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8017614:	2300      	movs	r3, #0
}
 8017616:	4618      	mov	r0, r3
 8017618:	370c      	adds	r7, #12
 801761a:	46bd      	mov	sp, r7
 801761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017620:	4770      	bx	lr
 8017622:	bf00      	nop
 8017624:	ffff8000 	.word	0xffff8000

08017628 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017628:	b480      	push	{r7}
 801762a:	b085      	sub	sp, #20
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d128      	bne.n	801768c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801763a:	68fb      	ldr	r3, [r7, #12]
 801763c:	689b      	ldr	r3, [r3, #8]
 801763e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8017642:	68bb      	ldr	r3, [r7, #8]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	1e59      	subs	r1, r3, #1
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	3b01      	subs	r3, #1
 801764e:	011b      	lsls	r3, r3, #4
 8017650:	4319      	orrs	r1, r3
 8017652:	68bb      	ldr	r3, [r7, #8]
 8017654:	689b      	ldr	r3, [r3, #8]
 8017656:	3b01      	subs	r3, #1
 8017658:	021b      	lsls	r3, r3, #8
 801765a:	4319      	orrs	r1, r3
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	68db      	ldr	r3, [r3, #12]
 8017660:	3b01      	subs	r3, #1
 8017662:	031b      	lsls	r3, r3, #12
 8017664:	4319      	orrs	r1, r3
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	691b      	ldr	r3, [r3, #16]
 801766a:	3b01      	subs	r3, #1
 801766c:	041b      	lsls	r3, r3, #16
 801766e:	4319      	orrs	r1, r3
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	695b      	ldr	r3, [r3, #20]
 8017674:	3b01      	subs	r3, #1
 8017676:	051b      	lsls	r3, r3, #20
 8017678:	4319      	orrs	r1, r3
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	699b      	ldr	r3, [r3, #24]
 801767e:	3b01      	subs	r3, #1
 8017680:	061b      	lsls	r3, r3, #24
 8017682:	430b      	orrs	r3, r1
 8017684:	431a      	orrs	r2, r3
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	609a      	str	r2, [r3, #8]
 801768a:	e02d      	b.n	80176e8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	689a      	ldr	r2, [r3, #8]
 8017690:	4b19      	ldr	r3, [pc, #100]	; (80176f8 <FMC_SDRAM_Timing_Init+0xd0>)
 8017692:	4013      	ands	r3, r2
 8017694:	68ba      	ldr	r2, [r7, #8]
 8017696:	68d2      	ldr	r2, [r2, #12]
 8017698:	3a01      	subs	r2, #1
 801769a:	0311      	lsls	r1, r2, #12
 801769c:	68ba      	ldr	r2, [r7, #8]
 801769e:	6952      	ldr	r2, [r2, #20]
 80176a0:	3a01      	subs	r2, #1
 80176a2:	0512      	lsls	r2, r2, #20
 80176a4:	430a      	orrs	r2, r1
 80176a6:	431a      	orrs	r2, r3
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	68db      	ldr	r3, [r3, #12]
 80176b0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	1e59      	subs	r1, r3, #1
 80176ba:	68bb      	ldr	r3, [r7, #8]
 80176bc:	685b      	ldr	r3, [r3, #4]
 80176be:	3b01      	subs	r3, #1
 80176c0:	011b      	lsls	r3, r3, #4
 80176c2:	4319      	orrs	r1, r3
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	689b      	ldr	r3, [r3, #8]
 80176c8:	3b01      	subs	r3, #1
 80176ca:	021b      	lsls	r3, r3, #8
 80176cc:	4319      	orrs	r1, r3
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	691b      	ldr	r3, [r3, #16]
 80176d2:	3b01      	subs	r3, #1
 80176d4:	041b      	lsls	r3, r3, #16
 80176d6:	4319      	orrs	r1, r3
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	699b      	ldr	r3, [r3, #24]
 80176dc:	3b01      	subs	r3, #1
 80176de:	061b      	lsls	r3, r3, #24
 80176e0:	430b      	orrs	r3, r1
 80176e2:	431a      	orrs	r2, r3
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80176e8:	2300      	movs	r3, #0
}
 80176ea:	4618      	mov	r0, r3
 80176ec:	3714      	adds	r7, #20
 80176ee:	46bd      	mov	sp, r7
 80176f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f4:	4770      	bx	lr
 80176f6:	bf00      	nop
 80176f8:	ff0f0fff 	.word	0xff0f0fff

080176fc <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 80176fc:	b480      	push	{r7}
 80176fe:	b083      	sub	sp, #12
 8017700:	af00      	add	r7, sp, #0
 8017702:	6078      	str	r0, [r7, #4]
 8017704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	683a      	ldr	r2, [r7, #0]
 801770a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 801770e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	683a      	ldr	r2, [r7, #0]
 8017716:	3202      	adds	r2, #2
 8017718:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801771c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	2200      	movs	r2, #0
 8017724:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	2200      	movs	r2, #0
 801772a:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	2200      	movs	r2, #0
 8017730:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8017732:	2300      	movs	r3, #0
}
 8017734:	4618      	mov	r0, r3
 8017736:	370c      	adds	r7, #12
 8017738:	46bd      	mov	sp, r7
 801773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801773e:	4770      	bx	lr

08017740 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8017740:	b480      	push	{r7}
 8017742:	b085      	sub	sp, #20
 8017744:	af00      	add	r7, sp, #0
 8017746:	60f8      	str	r0, [r7, #12]
 8017748:	60b9      	str	r1, [r7, #8]
 801774a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	691a      	ldr	r2, [r3, #16]
 8017750:	4b0c      	ldr	r3, [pc, #48]	; (8017784 <FMC_SDRAM_SendCommand+0x44>)
 8017752:	4013      	ands	r3, r2
 8017754:	68ba      	ldr	r2, [r7, #8]
 8017756:	6811      	ldr	r1, [r2, #0]
 8017758:	68ba      	ldr	r2, [r7, #8]
 801775a:	6852      	ldr	r2, [r2, #4]
 801775c:	4311      	orrs	r1, r2
 801775e:	68ba      	ldr	r2, [r7, #8]
 8017760:	6892      	ldr	r2, [r2, #8]
 8017762:	3a01      	subs	r2, #1
 8017764:	0152      	lsls	r2, r2, #5
 8017766:	4311      	orrs	r1, r2
 8017768:	68ba      	ldr	r2, [r7, #8]
 801776a:	68d2      	ldr	r2, [r2, #12]
 801776c:	0252      	lsls	r2, r2, #9
 801776e:	430a      	orrs	r2, r1
 8017770:	431a      	orrs	r2, r3
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8017776:	2300      	movs	r3, #0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3714      	adds	r7, #20
 801777c:	46bd      	mov	sp, r7
 801777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017782:	4770      	bx	lr
 8017784:	ffc00000 	.word	0xffc00000

08017788 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8017788:	b480      	push	{r7}
 801778a:	b083      	sub	sp, #12
 801778c:	af00      	add	r7, sp, #0
 801778e:	6078      	str	r0, [r7, #4]
 8017790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	695a      	ldr	r2, [r3, #20]
 8017796:	4b07      	ldr	r3, [pc, #28]	; (80177b4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8017798:	4013      	ands	r3, r2
 801779a:	683a      	ldr	r2, [r7, #0]
 801779c:	0052      	lsls	r2, r2, #1
 801779e:	431a      	orrs	r2, r3
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80177a4:	2300      	movs	r3, #0
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	370c      	adds	r7, #12
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr
 80177b2:	bf00      	nop
 80177b4:	ffffc001 	.word	0xffffc001

080177b8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80177b8:	8880      	ldrh	r0, [r0, #4]
 80177ba:	4770      	bx	lr

080177bc <_ZN8touchgfx17AbstractPartition5clearEv>:
 80177bc:	2300      	movs	r3, #0
 80177be:	8083      	strh	r3, [r0, #4]
 80177c0:	4770      	bx	lr
	...

080177c4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80177c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177c6:	6803      	ldr	r3, [r0, #0]
 80177c8:	460e      	mov	r6, r1
 80177ca:	2100      	movs	r1, #0
 80177cc:	4605      	mov	r5, r0
 80177ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d0:	4798      	blx	r3
 80177d2:	4604      	mov	r4, r0
 80177d4:	682b      	ldr	r3, [r5, #0]
 80177d6:	4628      	mov	r0, r5
 80177d8:	1b34      	subs	r4, r6, r4
 80177da:	6a1b      	ldr	r3, [r3, #32]
 80177dc:	b2a4      	uxth	r4, r4
 80177de:	4798      	blx	r3
 80177e0:	88ab      	ldrh	r3, [r5, #4]
 80177e2:	fbb4 f4f0 	udiv	r4, r4, r0
 80177e6:	42a3      	cmp	r3, r4
 80177e8:	d805      	bhi.n	80177f6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 80177ea:	4b0e      	ldr	r3, [pc, #56]	; (8017824 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 80177ec:	211e      	movs	r1, #30
 80177ee:	4a0e      	ldr	r2, [pc, #56]	; (8017828 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 80177f0:	480e      	ldr	r0, [pc, #56]	; (801782c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 80177f2:	f013 fb89 	bl	802af08 <__assert_func>
 80177f6:	682b      	ldr	r3, [r5, #0]
 80177f8:	2100      	movs	r1, #0
 80177fa:	4628      	mov	r0, r5
 80177fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177fe:	4798      	blx	r3
 8017800:	682b      	ldr	r3, [r5, #0]
 8017802:	4607      	mov	r7, r0
 8017804:	4628      	mov	r0, r5
 8017806:	6a1b      	ldr	r3, [r3, #32]
 8017808:	4798      	blx	r3
 801780a:	1bf3      	subs	r3, r6, r7
 801780c:	b29b      	uxth	r3, r3
 801780e:	fbb3 f2f0 	udiv	r2, r3, r0
 8017812:	fb02 3010 	mls	r0, r2, r0, r3
 8017816:	b118      	cbz	r0, 8017820 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017818:	4b05      	ldr	r3, [pc, #20]	; (8017830 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801781a:	211f      	movs	r1, #31
 801781c:	4a02      	ldr	r2, [pc, #8]	; (8017828 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801781e:	e7e7      	b.n	80177f0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017820:	4620      	mov	r0, r4
 8017822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017824:	0802d8f4 	.word	0x0802d8f4
 8017828:	0802da62 	.word	0x0802da62
 801782c:	0802d909 	.word	0x0802d909
 8017830:	0802d937 	.word	0x0802d937

08017834 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017834:	b538      	push	{r3, r4, r5, lr}
 8017836:	6803      	ldr	r3, [r0, #0]
 8017838:	460d      	mov	r5, r1
 801783a:	4604      	mov	r4, r0
 801783c:	6a1b      	ldr	r3, [r3, #32]
 801783e:	4798      	blx	r3
 8017840:	4285      	cmp	r5, r0
 8017842:	d905      	bls.n	8017850 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8017844:	4b0c      	ldr	r3, [pc, #48]	; (8017878 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8017846:	2130      	movs	r1, #48	; 0x30
 8017848:	4a0c      	ldr	r2, [pc, #48]	; (801787c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801784a:	480d      	ldr	r0, [pc, #52]	; (8017880 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801784c:	f013 fb5c 	bl	802af08 <__assert_func>
 8017850:	6823      	ldr	r3, [r4, #0]
 8017852:	4620      	mov	r0, r4
 8017854:	88a5      	ldrh	r5, [r4, #4]
 8017856:	69db      	ldr	r3, [r3, #28]
 8017858:	4798      	blx	r3
 801785a:	4285      	cmp	r5, r0
 801785c:	d303      	bcc.n	8017866 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801785e:	4b09      	ldr	r3, [pc, #36]	; (8017884 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8017860:	2131      	movs	r1, #49	; 0x31
 8017862:	4a06      	ldr	r2, [pc, #24]	; (801787c <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8017864:	e7f1      	b.n	801784a <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8017866:	6823      	ldr	r3, [r4, #0]
 8017868:	4620      	mov	r0, r4
 801786a:	88a1      	ldrh	r1, [r4, #4]
 801786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801786e:	4798      	blx	r3
 8017870:	88a3      	ldrh	r3, [r4, #4]
 8017872:	3301      	adds	r3, #1
 8017874:	80a3      	strh	r3, [r4, #4]
 8017876:	bd38      	pop	{r3, r4, r5, pc}
 8017878:	0802d9b1 	.word	0x0802d9b1
 801787c:	0802daa5 	.word	0x0802daa5
 8017880:	0802d909 	.word	0x0802d909
 8017884:	0802d9c8 	.word	0x0802d9c8

08017888 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8017888:	b570      	push	{r4, r5, r6, lr}
 801788a:	6803      	ldr	r3, [r0, #0]
 801788c:	4616      	mov	r6, r2
 801788e:	4604      	mov	r4, r0
 8017890:	460d      	mov	r5, r1
 8017892:	6a1b      	ldr	r3, [r3, #32]
 8017894:	4798      	blx	r3
 8017896:	4286      	cmp	r6, r0
 8017898:	d905      	bls.n	80178a6 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801789a:	4b06      	ldr	r3, [pc, #24]	; (80178b4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801789c:	213a      	movs	r1, #58	; 0x3a
 801789e:	4a06      	ldr	r2, [pc, #24]	; (80178b8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 80178a0:	4806      	ldr	r0, [pc, #24]	; (80178bc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 80178a2:	f013 fb31 	bl	802af08 <__assert_func>
 80178a6:	6823      	ldr	r3, [r4, #0]
 80178a8:	4629      	mov	r1, r5
 80178aa:	4620      	mov	r0, r4
 80178ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178b2:	4718      	bx	r3
 80178b4:	0802d9b1 	.word	0x0802d9b1
 80178b8:	0802da18 	.word	0x0802da18
 80178bc:	0802d909 	.word	0x0802d909

080178c0 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80178c0:	4770      	bx	lr
	...

080178c4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80178c4:	4a02      	ldr	r2, [pc, #8]	; (80178d0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80178c6:	6002      	str	r2, [r0, #0]
 80178c8:	2200      	movs	r2, #0
 80178ca:	8082      	strh	r2, [r0, #4]
 80178cc:	4770      	bx	lr
 80178ce:	bf00      	nop
 80178d0:	0802d9ec 	.word	0x0802d9ec

080178d4 <_ZN8touchgfx9Container13getFirstChildEv>:
 80178d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80178d6:	4770      	bx	lr

080178d8 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 80178d8:	4a02      	ldr	r2, [pc, #8]	; (80178e4 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 80178da:	6002      	str	r2, [r0, #0]
 80178dc:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	; 0xe0
 80178e0:	8082      	strh	r2, [r0, #4]
 80178e2:	4770      	bx	lr
 80178e4:	0802d390 	.word	0x0802d390

080178e8 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 80178e8:	f8c0 10e4 	str.w	r1, [r0, #228]	; 0xe4
 80178ec:	4770      	bx	lr

080178ee <_ZNK8touchgfx12TextProgress8getColorEv>:
 80178ee:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
 80178f2:	4770      	bx	lr

080178f4 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 80178f4:	2902      	cmp	r1, #2
 80178f6:	b570      	push	{r4, r5, r6, lr}
 80178f8:	bf28      	it	cs
 80178fa:	2102      	movcs	r1, #2
 80178fc:	6803      	ldr	r3, [r0, #0]
 80178fe:	4604      	mov	r4, r0
 8017900:	f8a0 1106 	strh.w	r1, [r0, #262]	; 0x106
 8017904:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8017908:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801790c:	4798      	blx	r3
 801790e:	462b      	mov	r3, r5
 8017910:	4601      	mov	r1, r0
 8017912:	4620      	mov	r0, r4
 8017914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017918:	4718      	bx	r3

0801791a <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 801791a:	f8b0 0106 	ldrh.w	r0, [r0, #262]	; 0x106
 801791e:	4770      	bx	lr

08017920 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 8017920:	30b4      	adds	r0, #180	; 0xb4
 8017922:	f002 b9fa 	b.w	8019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08017926 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8017926:	b538      	push	{r3, r4, r5, lr}
 8017928:	4604      	mov	r4, r0
 801792a:	460d      	mov	r5, r1
 801792c:	f000 f8e7 	bl	8017afe <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8017930:	f884 50ea 	strb.w	r5, [r4, #234]	; 0xea
 8017934:	bd38      	pop	{r3, r4, r5, pc}
	...

08017938 <_ZN8touchgfx12TextProgress8setValueEi>:
 8017938:	b530      	push	{r4, r5, lr}
 801793a:	b087      	sub	sp, #28
 801793c:	4604      	mov	r4, r0
 801793e:	f000 f927 	bl	8017b90 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8017942:	4b1d      	ldr	r3, [pc, #116]	; (80179b8 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 8017944:	f104 05f4 	add.w	r5, r4, #244	; 0xf4
 8017948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801794c:	ab06      	add	r3, sp, #24
 801794e:	e903 0007 	stmdb	r3, {r0, r1, r2}
 8017952:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
 8017956:	aa06      	add	r2, sp, #24
 8017958:	4620      	mov	r0, r4
 801795a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801795e:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8017962:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8017966:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801796a:	0089      	lsls	r1, r1, #2
 801796c:	b289      	uxth	r1, r1
 801796e:	f000 f9a2 	bl	8017cb6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8017972:	f8b4 1106 	ldrh.w	r1, [r4, #262]	; 0x106
 8017976:	b1c1      	cbz	r1, 80179aa <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 8017978:	ab06      	add	r3, sp, #24
 801797a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801797e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 8017982:	fb90 f3f2 	sdiv	r3, r0, r2
 8017986:	fb02 0213 	mls	r2, r2, r3, r0
 801798a:	4628      	mov	r0, r5
 801798c:	e9cd 1200 	strd	r1, r2, [sp]
 8017990:	4a0a      	ldr	r2, [pc, #40]	; (80179bc <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 8017992:	2108      	movs	r1, #8
 8017994:	f007 f966 	bl	801ec64 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017998:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 801799c:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
 80179a0:	b007      	add	sp, #28
 80179a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179a6:	f005 b90b 	b.w	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
 80179aa:	4603      	mov	r3, r0
 80179ac:	4a04      	ldr	r2, [pc, #16]	; (80179c0 <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 80179ae:	2108      	movs	r1, #8
 80179b0:	4628      	mov	r0, r5
 80179b2:	f007 f957 	bl	801ec64 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80179b6:	e7ef      	b.n	8017998 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 80179b8:	0802cd78 	.word	0x0802cd78
 80179bc:	0802dae3 	.word	0x0802dae3
 80179c0:	0802daeb 	.word	0x0802daeb

080179c4 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 80179c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179c8:	461d      	mov	r5, r3
 80179ca:	f100 07b4 	add.w	r7, r0, #180	; 0xb4
 80179ce:	2300      	movs	r3, #0
 80179d0:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 80179d4:	4691      	mov	r9, r2
 80179d6:	4604      	mov	r4, r0
 80179d8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 80179dc:	4688      	mov	r8, r1
 80179de:	4638      	mov	r0, r7
 80179e0:	4629      	mov	r1, r5
 80179e2:	f7ec fb67 	bl	80040b4 <_ZN8touchgfx8Drawable8setWidthEs>
 80179e6:	4631      	mov	r1, r6
 80179e8:	4638      	mov	r0, r7
 80179ea:	f7ec fb72 	bl	80040d2 <_ZN8touchgfx8Drawable9setHeightEs>
 80179ee:	9608      	str	r6, [sp, #32]
 80179f0:	462b      	mov	r3, r5
 80179f2:	464a      	mov	r2, r9
 80179f4:	4641      	mov	r1, r8
 80179f6:	4620      	mov	r0, r4
 80179f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179fc:	f000 b978 	b.w	8017cf0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08017a00 <_ZN8touchgfx12TextProgressC1Ev>:
 8017a00:	b510      	push	{r4, lr}
 8017a02:	4604      	mov	r4, r0
 8017a04:	f000 f9a0 	bl	8017d48 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017a08:	2201      	movs	r2, #1
 8017a0a:	4b20      	ldr	r3, [pc, #128]	; (8017a8c <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 8017a0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a10:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 8017a14:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
 8017a18:	4a1d      	ldr	r2, [pc, #116]	; (8017a90 <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 8017a1a:	6023      	str	r3, [r4, #0]
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
 8017a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017a26:	f8a4 30b8 	strh.w	r3, [r4, #184]	; 0xb8
 8017a2a:	f8a4 20e0 	strh.w	r2, [r4, #224]	; 0xe0
 8017a2e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8017a32:	f8a4 30ba 	strh.w	r3, [r4, #186]	; 0xba
 8017a36:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
 8017a3a:	4a16      	ldr	r2, [pc, #88]	; (8017a94 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8017a3c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
 8017a40:	f8a4 30be 	strh.w	r3, [r4, #190]	; 0xbe
 8017a44:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
 8017a48:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
 8017a4c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8017a50:	f8a4 30c6 	strh.w	r3, [r4, #198]	; 0xc6
 8017a54:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8017a58:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
 8017a5c:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 8017a60:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
 8017a64:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
 8017a68:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8017a6c:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
 8017a70:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 8017a74:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8017a78:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
 8017a7c:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
 8017a80:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
 8017a84:	f000 fa1e 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017a88:	4620      	mov	r0, r4
 8017a8a:	bd10      	pop	{r4, pc}
 8017a8c:	0802daf8 	.word	0x0802daf8
 8017a90:	0802d390 	.word	0x0802d390
 8017a94:	0802f030 	.word	0x0802f030

08017a98 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017a98:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	; 0x5c
 8017a9c:	4770      	bx	lr

08017a9e <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017a9e:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	; 0x5e
 8017aa2:	4770      	bx	lr

08017aa4 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017aa4:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	; 0x60
 8017aa8:	4770      	bx	lr

08017aaa <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017aaa:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	; 0x62
 8017aae:	4770      	bx	lr

08017ab0 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017ab0:	b510      	push	{r4, lr}
 8017ab2:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017ab6:	600c      	str	r4, [r1, #0]
 8017ab8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017abc:	6011      	str	r1, [r2, #0]
 8017abe:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017ac2:	801a      	strh	r2, [r3, #0]
 8017ac4:	9b02      	ldr	r3, [sp, #8]
 8017ac6:	f8b0 2092 	ldrh.w	r2, [r0, #146]	; 0x92
 8017aca:	801a      	strh	r2, [r3, #0]
 8017acc:	bd10      	pop	{r4, pc}

08017ace <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8017ace:	b510      	push	{r4, lr}
 8017ad0:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 8017ad4:	600c      	str	r4, [r1, #0]
 8017ad6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017ada:	6011      	str	r1, [r2, #0]
 8017adc:	f8b0 2090 	ldrh.w	r2, [r0, #144]	; 0x90
 8017ae0:	801a      	strh	r2, [r3, #0]
 8017ae2:	bd10      	pop	{r4, pc}

08017ae4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017ae4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017ae8:	600b      	str	r3, [r1, #0]
 8017aea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017aee:	6013      	str	r3, [r2, #0]
 8017af0:	4770      	bx	lr

08017af2 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8017af2:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
 8017af6:	4770      	bx	lr

08017af8 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017af8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 8017afc:	4770      	bx	lr

08017afe <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8017afe:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
 8017b02:	4770      	bx	lr

08017b04 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017b04:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8017b08:	4770      	bx	lr

08017b0a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017b0a:	b570      	push	{r4, r5, r6, lr}
 8017b0c:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8017b10:	4604      	mov	r4, r0
 8017b12:	4616      	mov	r6, r2
 8017b14:	428d      	cmp	r5, r1
 8017b16:	bfb8      	it	lt
 8017b18:	460d      	movlt	r5, r1
 8017b1a:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8017b1e:	428d      	cmp	r5, r1
 8017b20:	bfa8      	it	ge
 8017b22:	460d      	movge	r5, r1
 8017b24:	b99a      	cbnz	r2, 8017b4e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017b26:	6803      	ldr	r3, [r0, #0]
 8017b28:	4629      	mov	r1, r5
 8017b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017b2e:	4798      	blx	r3
 8017b30:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017b34:	b358      	cbz	r0, 8017b8e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	68db      	ldr	r3, [r3, #12]
 8017b3a:	4798      	blx	r3
 8017b3c:	b338      	cbz	r0, 8017b8e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017b3e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017b42:	4621      	mov	r1, r4
 8017b44:	6803      	ldr	r3, [r0, #0]
 8017b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b4a:	689b      	ldr	r3, [r3, #8]
 8017b4c:	4718      	bx	r3
 8017b4e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	dd07      	ble.n	8017b66 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017b56:	f004 f869 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8017b5a:	4621      	mov	r1, r4
 8017b5c:	f004 f89e 	bl	801bc9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017b60:	2300      	movs	r3, #0
 8017b62:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017b66:	6823      	ldr	r3, [r4, #0]
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017b6e:	4798      	blx	r3
 8017b70:	2300      	movs	r3, #0
 8017b72:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 8017b76:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8017b7a:	e9c4 0527 	strd	r0, r5, [r4, #156]	; 0x9c
 8017b7e:	f004 f855 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8017b82:	4621      	mov	r1, r4
 8017b84:	f004 f858 	bl	801bc38 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017b88:	2301      	movs	r3, #1
 8017b8a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8017b8e:	bd70      	pop	{r4, r5, r6, pc}

08017b90 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017b90:	b510      	push	{r4, lr}
 8017b92:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8017b96:	4604      	mov	r4, r0
 8017b98:	4299      	cmp	r1, r3
 8017b9a:	bfb8      	it	lt
 8017b9c:	4619      	movlt	r1, r3
 8017b9e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8017ba2:	4299      	cmp	r1, r3
 8017ba4:	bfa8      	it	ge
 8017ba6:	4619      	movge	r1, r3
 8017ba8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8017bac:	428b      	cmp	r3, r1
 8017bae:	d010      	beq.n	8017bd2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017bb0:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
 8017bb4:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
 8017bb8:	b158      	cbz	r0, 8017bd2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017bba:	6803      	ldr	r3, [r0, #0]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	4798      	blx	r3
 8017bc0:	b138      	cbz	r0, 8017bd2 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017bc2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8017bc6:	4621      	mov	r1, r4
 8017bc8:	6803      	ldr	r3, [r0, #0]
 8017bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bce:	689b      	ldr	r3, [r3, #8]
 8017bd0:	4718      	bx	r3
 8017bd2:	bd10      	pop	{r4, pc}

08017bd4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017bd4:	4291      	cmp	r1, r2
 8017bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bda:	4604      	mov	r4, r0
 8017bdc:	460e      	mov	r6, r1
 8017bde:	4615      	mov	r5, r2
 8017be0:	4698      	mov	r8, r3
 8017be2:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017be6:	db05      	blt.n	8017bf4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017be8:	4b11      	ldr	r3, [pc, #68]	; (8017c30 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017bea:	214b      	movs	r1, #75	; 0x4b
 8017bec:	4a11      	ldr	r2, [pc, #68]	; (8017c34 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017bee:	4812      	ldr	r0, [pc, #72]	; (8017c38 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8017bf0:	f013 f98a 	bl	802af08 <__assert_func>
 8017bf4:	6803      	ldr	r3, [r0, #0]
 8017bf6:	e9c0 1221 	strd	r1, r2, [r0, #132]	; 0x84
 8017bfa:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8017bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c02:	4798      	blx	r3
 8017c04:	f1b8 0f00 	cmp.w	r8, #0
 8017c08:	d10c      	bne.n	8017c24 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017c0a:	1bad      	subs	r5, r5, r6
 8017c0c:	f8a4 5090 	strh.w	r5, [r4, #144]	; 0x90
 8017c10:	f8b4 3090 	ldrh.w	r3, [r4, #144]	; 0x90
 8017c14:	f8a4 7092 	strh.w	r7, [r4, #146]	; 0x92
 8017c18:	42bb      	cmp	r3, r7
 8017c1a:	d806      	bhi.n	8017c2a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017c1c:	4b07      	ldr	r3, [pc, #28]	; (8017c3c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8017c1e:	2158      	movs	r1, #88	; 0x58
 8017c20:	4a04      	ldr	r2, [pc, #16]	; (8017c34 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017c22:	e7e4      	b.n	8017bee <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017c24:	f8a4 8090 	strh.w	r8, [r4, #144]	; 0x90
 8017c28:	e7f2      	b.n	8017c10 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c2e:	bf00      	nop
 8017c30:	0802dbd8 	.word	0x0802dbd8
 8017c34:	0802dd24 	.word	0x0802dd24
 8017c38:	0802dbe2 	.word	0x0802dbe2
 8017c3c:	0802dc39 	.word	0x0802dc39

08017c40 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8017c40:	b570      	push	{r4, r5, r6, lr}
 8017c42:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8017c46:	4604      	mov	r4, r0
 8017c48:	b3a3      	cbz	r3, 8017cb4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017c4a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
 8017c4e:	2100      	movs	r1, #0
 8017c50:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 8017c54:	3001      	adds	r0, #1
 8017c56:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	; 0x9c
 8017c5a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8017c5e:	b280      	uxth	r0, r0
 8017c60:	1ad2      	subs	r2, r2, r3
 8017c62:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8017c66:	b212      	sxth	r2, r2
 8017c68:	47a8      	blx	r5
 8017c6a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8017c6e:	6823      	ldr	r3, [r4, #0]
 8017c70:	4401      	add	r1, r0
 8017c72:	4620      	mov	r0, r4
 8017c74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8017c78:	4798      	blx	r3
 8017c7a:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	; 0xa4
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	db18      	blt.n	8017cb4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017c82:	2500      	movs	r5, #0
 8017c84:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017c88:	f003 ffd0 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8017c8c:	4621      	mov	r1, r4
 8017c8e:	f004 f805 	bl	801bc9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017c92:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017c96:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017c9a:	b158      	cbz	r0, 8017cb4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	68db      	ldr	r3, [r3, #12]
 8017ca0:	4798      	blx	r3
 8017ca2:	b138      	cbz	r0, 8017cb4 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017ca4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8017ca8:	4621      	mov	r1, r4
 8017caa:	6803      	ldr	r3, [r0, #0]
 8017cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017cb0:	689b      	ldr	r3, [r3, #8]
 8017cb2:	4718      	bx	r3
 8017cb4:	bd70      	pop	{r4, r5, r6, pc}

08017cb6 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cb8:	4604      	mov	r4, r0
 8017cba:	460d      	mov	r5, r1
 8017cbc:	b1a9      	cbz	r1, 8017cea <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8017cbe:	f8b0 6092 	ldrh.w	r6, [r0, #146]	; 0x92
 8017cc2:	ab01      	add	r3, sp, #4
 8017cc4:	f8b4 1090 	ldrh.w	r1, [r4, #144]	; 0x90
 8017cc8:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
 8017ccc:	1b89      	subs	r1, r1, r6
 8017cce:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	; 0x84
 8017cd2:	1a12      	subs	r2, r2, r0
 8017cd4:	1a38      	subs	r0, r7, r0
 8017cd6:	f005 f912 	bl	801cefe <_ZN8touchgfx6muldivElllRl>
 8017cda:	4629      	mov	r1, r5
 8017cdc:	ab01      	add	r3, sp, #4
 8017cde:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
 8017ce2:	4430      	add	r0, r6
 8017ce4:	f005 f90b 	bl	801cefe <_ZN8touchgfx6muldivElllRl>
 8017ce8:	b285      	uxth	r5, r0
 8017cea:	4628      	mov	r0, r5
 8017cec:	b003      	add	sp, #12
 8017cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017cf0 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf4:	4604      	mov	r4, r0
 8017cf6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017cfa:	4698      	mov	r8, r3
 8017cfc:	460e      	mov	r6, r1
 8017cfe:	4615      	mov	r5, r2
 8017d00:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
 8017d04:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8017d08:	4619      	mov	r1, r3
 8017d0a:	463a      	mov	r2, r7
 8017d0c:	3058      	adds	r0, #88	; 0x58
 8017d0e:	f7ec fa0f 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017d12:	4446      	add	r6, r8
 8017d14:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017d18:	443d      	add	r5, r7
 8017d1a:	42b3      	cmp	r3, r6
 8017d1c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017d20:	bfb8      	it	lt
 8017d22:	8126      	strhlt	r6, [r4, #8]
 8017d24:	42ab      	cmp	r3, r5
 8017d26:	bfb8      	it	lt
 8017d28:	8165      	strhlt	r5, [r4, #10]
 8017d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d2e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017d2e:	b510      	push	{r4, lr}
 8017d30:	4604      	mov	r4, r0
 8017d32:	302c      	adds	r0, #44	; 0x2c
 8017d34:	f002 fa6b 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017d38:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
 8017d3c:	4620      	mov	r0, r4
 8017d3e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 8017d42:	f7ec f9f5 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017d46:	bd10      	pop	{r4, pc}

08017d48 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d4a:	4604      	mov	r4, r0
 8017d4c:	2500      	movs	r5, #0
 8017d4e:	f7ec f8d3 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 8017d52:	4b24      	ldr	r3, [pc, #144]	; (8017de4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017d54:	4626      	mov	r6, r4
 8017d56:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8017d5a:	2226      	movs	r2, #38	; 0x26
 8017d5c:	4629      	mov	r1, r5
 8017d5e:	62a5      	str	r5, [r4, #40]	; 0x28
 8017d60:	f846 3b2c 	str.w	r3, [r6], #44
 8017d64:	4630      	mov	r0, r6
 8017d66:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017d6a:	f013 fad2 	bl	802b312 <memset>
 8017d6e:	4630      	mov	r0, r6
 8017d70:	f7ec f8c2 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 8017d74:	a902      	add	r1, sp, #8
 8017d76:	4b1c      	ldr	r3, [pc, #112]	; (8017de8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017d78:	4630      	mov	r0, r6
 8017d7a:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
 8017d7e:	f104 0758 	add.w	r7, r4, #88	; 0x58
 8017d82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d84:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017d88:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8017d8c:	f002 fa3f 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017d90:	4638      	mov	r0, r7
 8017d92:	f7ec f8b1 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 8017d96:	4b15      	ldr	r3, [pc, #84]	; (8017dec <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017d98:	4629      	mov	r1, r5
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	65a3      	str	r3, [r4, #88]	; 0x58
 8017d9e:	2364      	movs	r3, #100	; 0x64
 8017da0:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 8017da4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8017da8:	e9c4 3522 	strd	r3, r5, [r4, #136]	; 0x88
 8017dac:	4b10      	ldr	r3, [pc, #64]	; (8017df0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017dae:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8017db2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8017db6:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8017dba:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8017dbe:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8017dc2:	f7ec f93b 	bl	800403c <_ZN8touchgfx8Drawable4setXEs>
 8017dc6:	4629      	mov	r1, r5
 8017dc8:	4630      	mov	r0, r6
 8017dca:	f7ec f946 	bl	800405a <_ZN8touchgfx8Drawable4setYEs>
 8017dce:	4631      	mov	r1, r6
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f000 f877 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017dd6:	4620      	mov	r0, r4
 8017dd8:	4639      	mov	r1, r7
 8017dda:	f000 f873 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017dde:	4620      	mov	r0, r4
 8017de0:	b003      	add	sp, #12
 8017de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017de4:	0802dc5c 	.word	0x0802dc5c
 8017de8:	0802f13c 	.word	0x0802f13c
 8017dec:	0802de50 	.word	0x0802de50
 8017df0:	0801d5c7 	.word	0x0801d5c7

08017df4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017df6:	2000      	movs	r0, #0
 8017df8:	b12b      	cbz	r3, 8017e06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017dfa:	b920      	cbnz	r0, 8017e06 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017dfc:	1a5a      	subs	r2, r3, r1
 8017dfe:	699b      	ldr	r3, [r3, #24]
 8017e00:	4250      	negs	r0, r2
 8017e02:	4150      	adcs	r0, r2
 8017e04:	e7f8      	b.n	8017df8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017e06:	4770      	bx	lr

08017e08 <_ZN8touchgfx9Container9removeAllEv>:
 8017e08:	2200      	movs	r2, #0
 8017e0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017e0c:	b123      	cbz	r3, 8017e18 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017e0e:	6999      	ldr	r1, [r3, #24]
 8017e10:	6281      	str	r1, [r0, #40]	; 0x28
 8017e12:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017e16:	e7f8      	b.n	8017e0a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017e18:	4770      	bx	lr

08017e1a <_ZN8touchgfx9Container6unlinkEv>:
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	6283      	str	r3, [r0, #40]	; 0x28
 8017e1e:	4770      	bx	lr

08017e20 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017e20:	2200      	movs	r2, #0
 8017e22:	8002      	strh	r2, [r0, #0]
 8017e24:	8042      	strh	r2, [r0, #2]
 8017e26:	8082      	strh	r2, [r0, #4]
 8017e28:	80c2      	strh	r2, [r0, #6]
 8017e2a:	4770      	bx	lr

08017e2c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017e2c:	b570      	push	{r4, r5, r6, lr}
 8017e2e:	460d      	mov	r5, r1
 8017e30:	4616      	mov	r6, r2
 8017e32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017e34:	b13c      	cbz	r4, 8017e46 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017e36:	6823      	ldr	r3, [r4, #0]
 8017e38:	4620      	mov	r0, r4
 8017e3a:	4632      	mov	r2, r6
 8017e3c:	4629      	mov	r1, r5
 8017e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e40:	4798      	blx	r3
 8017e42:	69a4      	ldr	r4, [r4, #24]
 8017e44:	e7f6      	b.n	8017e34 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017e46:	bd70      	pop	{r4, r5, r6, pc}

08017e48 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017e48:	b538      	push	{r3, r4, r5, lr}
 8017e4a:	460d      	mov	r5, r1
 8017e4c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017e4e:	b134      	cbz	r4, 8017e5e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017e50:	682b      	ldr	r3, [r5, #0]
 8017e52:	4621      	mov	r1, r4
 8017e54:	4628      	mov	r0, r5
 8017e56:	689b      	ldr	r3, [r3, #8]
 8017e58:	4798      	blx	r3
 8017e5a:	69a4      	ldr	r4, [r4, #24]
 8017e5c:	e7f7      	b.n	8017e4e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}

08017e60 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017e60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017e62:	b19b      	cbz	r3, 8017e8c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017e64:	428b      	cmp	r3, r1
 8017e66:	d109      	bne.n	8017e7c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017e68:	699a      	ldr	r2, [r3, #24]
 8017e6a:	2100      	movs	r1, #0
 8017e6c:	6159      	str	r1, [r3, #20]
 8017e6e:	6282      	str	r2, [r0, #40]	; 0x28
 8017e70:	b902      	cbnz	r2, 8017e74 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017e72:	4770      	bx	lr
 8017e74:	6199      	str	r1, [r3, #24]
 8017e76:	4770      	bx	lr
 8017e78:	4613      	mov	r3, r2
 8017e7a:	b13a      	cbz	r2, 8017e8c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017e7c:	699a      	ldr	r2, [r3, #24]
 8017e7e:	428a      	cmp	r2, r1
 8017e80:	d1fa      	bne.n	8017e78 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017e82:	698a      	ldr	r2, [r1, #24]
 8017e84:	619a      	str	r2, [r3, #24]
 8017e86:	2300      	movs	r3, #0
 8017e88:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017e8c:	4770      	bx	lr

08017e8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017e8e:	b410      	push	{r4}
 8017e90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017e92:	4604      	mov	r4, r0
 8017e94:	b92b      	cbnz	r3, 8017ea2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017e96:	6803      	ldr	r3, [r0, #0]
 8017e98:	4611      	mov	r1, r2
 8017e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ea0:	4718      	bx	r3
 8017ea2:	b941      	cbnz	r1, 8017eb6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017ea4:	6193      	str	r3, [r2, #24]
 8017ea6:	6282      	str	r2, [r0, #40]	; 0x28
 8017ea8:	6154      	str	r4, [r2, #20]
 8017eaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eae:	4770      	bx	lr
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2800      	cmp	r0, #0
 8017eb4:	d0f9      	beq.n	8017eaa <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017eb6:	4299      	cmp	r1, r3
 8017eb8:	6998      	ldr	r0, [r3, #24]
 8017eba:	d1f9      	bne.n	8017eb0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017ebc:	6190      	str	r0, [r2, #24]
 8017ebe:	618a      	str	r2, [r1, #24]
 8017ec0:	e7f2      	b.n	8017ea8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017ec4:	4288      	cmp	r0, r1
 8017ec6:	b508      	push	{r3, lr}
 8017ec8:	d105      	bne.n	8017ed6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017eca:	4b11      	ldr	r3, [pc, #68]	; (8017f10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017ecc:	2123      	movs	r1, #35	; 0x23
 8017ece:	4a11      	ldr	r2, [pc, #68]	; (8017f14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017ed0:	4811      	ldr	r0, [pc, #68]	; (8017f18 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017ed2:	f013 f819 	bl	802af08 <__assert_func>
 8017ed6:	694b      	ldr	r3, [r1, #20]
 8017ed8:	b11b      	cbz	r3, 8017ee2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017eda:	4b10      	ldr	r3, [pc, #64]	; (8017f1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017edc:	2124      	movs	r1, #36	; 0x24
 8017ede:	4a0d      	ldr	r2, [pc, #52]	; (8017f14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017ee0:	e7f6      	b.n	8017ed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017ee2:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017ee6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017ee8:	b913      	cbnz	r3, 8017ef0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017eea:	6281      	str	r1, [r0, #40]	; 0x28
 8017eec:	bd08      	pop	{r3, pc}
 8017eee:	4613      	mov	r3, r2
 8017ef0:	699a      	ldr	r2, [r3, #24]
 8017ef2:	b12a      	cbz	r2, 8017f00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017ef4:	428b      	cmp	r3, r1
 8017ef6:	d1fa      	bne.n	8017eee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017ef8:	4b09      	ldr	r3, [pc, #36]	; (8017f20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017efa:	2135      	movs	r1, #53	; 0x35
 8017efc:	4a05      	ldr	r2, [pc, #20]	; (8017f14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017efe:	e7e7      	b.n	8017ed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017f00:	428b      	cmp	r3, r1
 8017f02:	d103      	bne.n	8017f0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017f04:	4b06      	ldr	r3, [pc, #24]	; (8017f20 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017f06:	2138      	movs	r1, #56	; 0x38
 8017f08:	4a02      	ldr	r2, [pc, #8]	; (8017f14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017f0a:	e7e1      	b.n	8017ed0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017f0c:	6199      	str	r1, [r3, #24]
 8017f0e:	e7ed      	b.n	8017eec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017f10:	0802dd7d 	.word	0x0802dd7d
 8017f14:	0802ded4 	.word	0x0802ded4
 8017f18:	0802dda9 	.word	0x0802dda9
 8017f1c:	0802dddc 	.word	0x0802dddc
 8017f20:	0802de12 	.word	0x0802de12

08017f24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f28:	461f      	mov	r7, r3
 8017f2a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8017f2e:	460d      	mov	r5, r1
 8017f30:	4616      	mov	r6, r2
 8017f32:	b103      	cbz	r3, 8017f36 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017f34:	6038      	str	r0, [r7, #0]
 8017f36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017f38:	b314      	cbz	r4, 8017f80 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017f3a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017f3e:	b1eb      	cbz	r3, 8017f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f40:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017f44:	428d      	cmp	r5, r1
 8017f46:	db19      	blt.n	8017f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f48:	b289      	uxth	r1, r1
 8017f4a:	8923      	ldrh	r3, [r4, #8]
 8017f4c:	440b      	add	r3, r1
 8017f4e:	b21b      	sxth	r3, r3
 8017f50:	429d      	cmp	r5, r3
 8017f52:	da13      	bge.n	8017f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f54:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017f58:	4296      	cmp	r6, r2
 8017f5a:	db0f      	blt.n	8017f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f5c:	b292      	uxth	r2, r2
 8017f5e:	8963      	ldrh	r3, [r4, #10]
 8017f60:	4413      	add	r3, r2
 8017f62:	b21b      	sxth	r3, r3
 8017f64:	429e      	cmp	r6, r3
 8017f66:	da09      	bge.n	8017f7c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017f68:	6823      	ldr	r3, [r4, #0]
 8017f6a:	1ab2      	subs	r2, r6, r2
 8017f6c:	1a69      	subs	r1, r5, r1
 8017f6e:	4620      	mov	r0, r4
 8017f70:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017f74:	b212      	sxth	r2, r2
 8017f76:	463b      	mov	r3, r7
 8017f78:	b209      	sxth	r1, r1
 8017f7a:	47c0      	blx	r8
 8017f7c:	69a4      	ldr	r4, [r4, #24]
 8017f7e:	e7db      	b.n	8017f38 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f88:	4c6d      	ldr	r4, [pc, #436]	; (8018140 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017f8a:	b0a1      	sub	sp, #132	; 0x84
 8017f8c:	4606      	mov	r6, r0
 8017f8e:	6824      	ldr	r4, [r4, #0]
 8017f90:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017f92:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017f96:	2400      	movs	r4, #0
 8017f98:	9303      	str	r3, [sp, #12]
 8017f9a:	802c      	strh	r4, [r5, #0]
 8017f9c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8017f9e:	802c      	strh	r4, [r5, #0]
 8017fa0:	601c      	str	r4, [r3, #0]
 8017fa2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017fa6:	f7ff ffbd 	bl	8017f24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017faa:	f1b9 0f03 	cmp.w	r9, #3
 8017fae:	f340 80c1 	ble.w	8018134 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017fb2:	4631      	mov	r1, r6
 8017fb4:	a80c      	add	r0, sp, #48	; 0x30
 8017fb6:	f004 fe9b 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fba:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017fbe:	9306      	str	r3, [sp, #24]
 8017fc0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017fc4:	9307      	str	r3, [sp, #28]
 8017fc6:	9b03      	ldr	r3, [sp, #12]
 8017fc8:	f8d3 a000 	ldr.w	sl, [r3]
 8017fcc:	f1ba 0f00 	cmp.w	sl, #0
 8017fd0:	f000 80b3 	beq.w	801813a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017fd4:	4651      	mov	r1, sl
 8017fd6:	a810      	add	r0, sp, #64	; 0x40
 8017fd8:	f004 fe8a 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017fdc:	2002      	movs	r0, #2
 8017fde:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017fe2:	9b01      	ldr	r3, [sp, #4]
 8017fe4:	9a06      	ldr	r2, [sp, #24]
 8017fe6:	fb91 f1f0 	sdiv	r1, r1, r0
 8017fea:	189d      	adds	r5, r3, r2
 8017fec:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017ff0:	9a07      	ldr	r2, [sp, #28]
 8017ff2:	4419      	add	r1, r3
 8017ff4:	9b02      	ldr	r3, [sp, #8]
 8017ff6:	4413      	add	r3, r2
 8017ff8:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8017ffc:	1a6d      	subs	r5, r5, r1
 8017ffe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8018002:	fb92 f2f0 	sdiv	r2, r2, r0
 8018006:	440a      	add	r2, r1
 8018008:	1a9b      	subs	r3, r3, r2
 801800a:	435b      	muls	r3, r3
 801800c:	fb05 3505 	mla	r5, r5, r5, r3
 8018010:	4f4c      	ldr	r7, [pc, #304]	; (8018144 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8018012:	ac10      	add	r4, sp, #64	; 0x40
 8018014:	f1b9 0f0c 	cmp.w	r9, #12
 8018018:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801801a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801801c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801801e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018020:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018024:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018028:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801802c:	f04f 0303 	mov.w	r3, #3
 8018030:	bfd8      	it	le
 8018032:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018036:	f04f 0400 	mov.w	r4, #0
 801803a:	f8cd 9000 	str.w	r9, [sp]
 801803e:	bfcc      	ite	gt
 8018040:	4698      	movgt	r8, r3
 8018042:	fb92 f8f3 	sdivle	r8, r2, r3
 8018046:	1c63      	adds	r3, r4, #1
 8018048:	aa10      	add	r2, sp, #64	; 0x40
 801804a:	f004 0401 	and.w	r4, r4, #1
 801804e:	f04f 0b00 	mov.w	fp, #0
 8018052:	9308      	str	r3, [sp, #32]
 8018054:	9b00      	ldr	r3, [sp, #0]
 8018056:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 801805a:	fb93 f3f8 	sdiv	r3, r3, r8
 801805e:	3404      	adds	r4, #4
 8018060:	b29b      	uxth	r3, r3
 8018062:	9304      	str	r3, [sp, #16]
 8018064:	9a04      	ldr	r2, [sp, #16]
 8018066:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801806a:	fb13 f302 	smulbb	r3, r3, r2
 801806e:	9a01      	ldr	r2, [sp, #4]
 8018070:	b29b      	uxth	r3, r3
 8018072:	1899      	adds	r1, r3, r2
 8018074:	9305      	str	r3, [sp, #20]
 8018076:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801807a:	b209      	sxth	r1, r1
 801807c:	4299      	cmp	r1, r3
 801807e:	db4d      	blt.n	801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018080:	8932      	ldrh	r2, [r6, #8]
 8018082:	4413      	add	r3, r2
 8018084:	b21b      	sxth	r3, r3
 8018086:	4299      	cmp	r1, r3
 8018088:	da48      	bge.n	801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801808a:	9b04      	ldr	r3, [sp, #16]
 801808c:	6827      	ldr	r7, [r4, #0]
 801808e:	fb17 f703 	smulbb	r7, r7, r3
 8018092:	9b02      	ldr	r3, [sp, #8]
 8018094:	b2bf      	uxth	r7, r7
 8018096:	18fa      	adds	r2, r7, r3
 8018098:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801809c:	b212      	sxth	r2, r2
 801809e:	429a      	cmp	r2, r3
 80180a0:	db3c      	blt.n	801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180a2:	8970      	ldrh	r0, [r6, #10]
 80180a4:	4403      	add	r3, r0
 80180a6:	b21b      	sxth	r3, r3
 80180a8:	429a      	cmp	r2, r3
 80180aa:	da37      	bge.n	801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180ac:	2300      	movs	r3, #0
 80180ae:	4630      	mov	r0, r6
 80180b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80180b2:	ab0b      	add	r3, sp, #44	; 0x2c
 80180b4:	f7ff ff36 	bl	8017f24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80180b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180ba:	b37a      	cbz	r2, 801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180bc:	4552      	cmp	r2, sl
 80180be:	d02d      	beq.n	801811c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180c0:	4611      	mov	r1, r2
 80180c2:	a80e      	add	r0, sp, #56	; 0x38
 80180c4:	9209      	str	r2, [sp, #36]	; 0x24
 80180c6:	f004 fe13 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80180ca:	f04f 0e02 	mov.w	lr, #2
 80180ce:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80180d2:	9a06      	ldr	r2, [sp, #24]
 80180d4:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80180d8:	9b01      	ldr	r3, [sp, #4]
 80180da:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80180de:	4413      	add	r3, r2
 80180e0:	9a07      	ldr	r2, [sp, #28]
 80180e2:	fb91 f1fe 	sdiv	r1, r1, lr
 80180e6:	fb9c fcfe 	sdiv	ip, ip, lr
 80180ea:	4401      	add	r1, r0
 80180ec:	1a58      	subs	r0, r3, r1
 80180ee:	9b02      	ldr	r3, [sp, #8]
 80180f0:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80180f4:	4413      	add	r3, r2
 80180f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80180f8:	448c      	add	ip, r1
 80180fa:	eba3 030c 	sub.w	r3, r3, ip
 80180fe:	435b      	muls	r3, r3
 8018100:	fb00 3300 	mla	r3, r0, r0, r3
 8018104:	42ab      	cmp	r3, r5
 8018106:	d208      	bcs.n	801811a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801810a:	461d      	mov	r5, r3
 801810c:	9803      	ldr	r0, [sp, #12]
 801810e:	6001      	str	r1, [r0, #0]
 8018110:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018112:	9805      	ldr	r0, [sp, #20]
 8018114:	8008      	strh	r0, [r1, #0]
 8018116:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018118:	800f      	strh	r7, [r1, #0]
 801811a:	4692      	mov	sl, r2
 801811c:	f10b 0b01 	add.w	fp, fp, #1
 8018120:	3408      	adds	r4, #8
 8018122:	f1bb 0f04 	cmp.w	fp, #4
 8018126:	d19d      	bne.n	8018064 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018128:	9b00      	ldr	r3, [sp, #0]
 801812a:	9c08      	ldr	r4, [sp, #32]
 801812c:	444b      	add	r3, r9
 801812e:	4544      	cmp	r4, r8
 8018130:	9300      	str	r3, [sp, #0]
 8018132:	d188      	bne.n	8018046 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018134:	b021      	add	sp, #132	; 0x84
 8018136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801813a:	f04f 35ff 	mov.w	r5, #4294967295
 801813e:	e767      	b.n	8018010 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8018140:	2400b8cc 	.word	0x2400b8cc
 8018144:	0802cd84 	.word	0x0802cd84

08018148 <_ZN8touchgfx4RectaNERKS0_>:
 8018148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801814c:	f9b1 7000 	ldrsh.w	r7, [r1]
 8018150:	888c      	ldrh	r4, [r1, #4]
 8018152:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018156:	443c      	add	r4, r7
 8018158:	b2a4      	uxth	r4, r4
 801815a:	fa0f f884 	sxth.w	r8, r4
 801815e:	45c1      	cmp	r9, r8
 8018160:	da2f      	bge.n	80181c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018162:	8882      	ldrh	r2, [r0, #4]
 8018164:	444a      	add	r2, r9
 8018166:	b292      	uxth	r2, r2
 8018168:	fa0f fe82 	sxth.w	lr, r2
 801816c:	4577      	cmp	r7, lr
 801816e:	da28      	bge.n	80181c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018170:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8018174:	88cb      	ldrh	r3, [r1, #6]
 8018176:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801817a:	442b      	add	r3, r5
 801817c:	b21b      	sxth	r3, r3
 801817e:	429e      	cmp	r6, r3
 8018180:	da1f      	bge.n	80181c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018182:	88c3      	ldrh	r3, [r0, #6]
 8018184:	4433      	add	r3, r6
 8018186:	b29b      	uxth	r3, r3
 8018188:	fa0f fc83 	sxth.w	ip, r3
 801818c:	4565      	cmp	r5, ip
 801818e:	da18      	bge.n	80181c2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018190:	454f      	cmp	r7, r9
 8018192:	bfb8      	it	lt
 8018194:	464f      	movlt	r7, r9
 8018196:	42b5      	cmp	r5, r6
 8018198:	bfb8      	it	lt
 801819a:	4635      	movlt	r5, r6
 801819c:	45f0      	cmp	r8, lr
 801819e:	bfd8      	it	le
 80181a0:	4622      	movle	r2, r4
 80181a2:	1bd2      	subs	r2, r2, r7
 80181a4:	8082      	strh	r2, [r0, #4]
 80181a6:	884a      	ldrh	r2, [r1, #2]
 80181a8:	88c9      	ldrh	r1, [r1, #6]
 80181aa:	8007      	strh	r7, [r0, #0]
 80181ac:	440a      	add	r2, r1
 80181ae:	8045      	strh	r5, [r0, #2]
 80181b0:	b292      	uxth	r2, r2
 80181b2:	b211      	sxth	r1, r2
 80181b4:	458c      	cmp	ip, r1
 80181b6:	bfa8      	it	ge
 80181b8:	4613      	movge	r3, r2
 80181ba:	1b5b      	subs	r3, r3, r5
 80181bc:	80c3      	strh	r3, [r0, #6]
 80181be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181c2:	2300      	movs	r3, #0
 80181c4:	8003      	strh	r3, [r0, #0]
 80181c6:	8043      	strh	r3, [r0, #2]
 80181c8:	8083      	strh	r3, [r0, #4]
 80181ca:	80c3      	strh	r3, [r0, #6]
 80181cc:	e7f7      	b.n	80181be <_ZN8touchgfx4RectaNERKS0_+0x76>

080181ce <_ZNK8touchgfx4Rect7isEmptyEv>:
 80181ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	dd06      	ble.n	80181e4 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80181d6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80181da:	2800      	cmp	r0, #0
 80181dc:	bfcc      	ite	gt
 80181de:	2000      	movgt	r0, #0
 80181e0:	2001      	movle	r0, #1
 80181e2:	4770      	bx	lr
 80181e4:	2001      	movs	r0, #1
 80181e6:	4770      	bx	lr

080181e8 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80181e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ec:	2300      	movs	r3, #0
 80181ee:	4604      	mov	r4, r0
 80181f0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80181f2:	8003      	strh	r3, [r0, #0]
 80181f4:	8043      	strh	r3, [r0, #2]
 80181f6:	8083      	strh	r3, [r0, #4]
 80181f8:	80c3      	strh	r3, [r0, #6]
 80181fa:	2d00      	cmp	r5, #0
 80181fc:	d040      	beq.n	8018280 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80181fe:	1d28      	adds	r0, r5, #4
 8018200:	f7ff ffe5 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8018204:	b988      	cbnz	r0, 801822a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018206:	4620      	mov	r0, r4
 8018208:	f7ff ffe1 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801820c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018210:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018214:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018218:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801821c:	b138      	cbz	r0, 801822e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801821e:	8022      	strh	r2, [r4, #0]
 8018220:	8063      	strh	r3, [r4, #2]
 8018222:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018226:	f8a4 c006 	strh.w	ip, [r4, #6]
 801822a:	69ad      	ldr	r5, [r5, #24]
 801822c:	e7e5      	b.n	80181fa <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801822e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018232:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018236:	4290      	cmp	r0, r2
 8018238:	4607      	mov	r7, r0
 801823a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801823e:	460e      	mov	r6, r1
 8018240:	bfa8      	it	ge
 8018242:	4617      	movge	r7, r2
 8018244:	4299      	cmp	r1, r3
 8018246:	4472      	add	r2, lr
 8018248:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801824c:	bfa8      	it	ge
 801824e:	461e      	movge	r6, r3
 8018250:	4440      	add	r0, r8
 8018252:	4471      	add	r1, lr
 8018254:	4463      	add	r3, ip
 8018256:	b200      	sxth	r0, r0
 8018258:	8027      	strh	r7, [r4, #0]
 801825a:	b212      	sxth	r2, r2
 801825c:	8066      	strh	r6, [r4, #2]
 801825e:	b209      	sxth	r1, r1
 8018260:	b21b      	sxth	r3, r3
 8018262:	4290      	cmp	r0, r2
 8018264:	bfac      	ite	ge
 8018266:	ebc7 0200 	rsbge	r2, r7, r0
 801826a:	ebc7 0202 	rsblt	r2, r7, r2
 801826e:	4299      	cmp	r1, r3
 8018270:	bfac      	ite	ge
 8018272:	ebc6 0301 	rsbge	r3, r6, r1
 8018276:	ebc6 0303 	rsblt	r3, r6, r3
 801827a:	80a2      	strh	r2, [r4, #4]
 801827c:	80e3      	strh	r3, [r4, #6]
 801827e:	e7d4      	b.n	801822a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018280:	4620      	mov	r0, r4
 8018282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018286 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8018286:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801828a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801828e:	b383      	cbz	r3, 80182f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018290:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018292:	b374      	cbz	r4, 80182f2 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018294:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018298:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801829c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80182a0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80182a4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80182a8:	b303      	cbz	r3, 80182ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80182aa:	4668      	mov	r0, sp
 80182ac:	1d21      	adds	r1, r4, #4
 80182ae:	f8ad 5000 	strh.w	r5, [sp]
 80182b2:	f8ad 6002 	strh.w	r6, [sp, #2]
 80182b6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80182ba:	f8ad 8006 	strh.w	r8, [sp, #6]
 80182be:	f7ff ff43 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 80182c2:	4668      	mov	r0, sp
 80182c4:	f7ff ff83 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 80182c8:	b980      	cbnz	r0, 80182ec <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80182ca:	f8bd 3000 	ldrh.w	r3, [sp]
 80182ce:	4669      	mov	r1, sp
 80182d0:	88a2      	ldrh	r2, [r4, #4]
 80182d2:	4620      	mov	r0, r4
 80182d4:	1a9b      	subs	r3, r3, r2
 80182d6:	88e2      	ldrh	r2, [r4, #6]
 80182d8:	f8ad 3000 	strh.w	r3, [sp]
 80182dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80182e0:	1a9b      	subs	r3, r3, r2
 80182e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80182e6:	6823      	ldr	r3, [r4, #0]
 80182e8:	689b      	ldr	r3, [r3, #8]
 80182ea:	4798      	blx	r3
 80182ec:	69a4      	ldr	r4, [r4, #24]
 80182ee:	2c00      	cmp	r4, #0
 80182f0:	d1d8      	bne.n	80182a4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80182f2:	b002      	add	sp, #8
 80182f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80182f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80182fa:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80182fe:	460d      	mov	r5, r1
 8018300:	4616      	mov	r6, r2
 8018302:	b323      	cbz	r3, 801834e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018304:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018306:	b314      	cbz	r4, 801834e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018308:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801830c:	b1eb      	cbz	r3, 801834a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801830e:	6828      	ldr	r0, [r5, #0]
 8018310:	466b      	mov	r3, sp
 8018312:	6869      	ldr	r1, [r5, #4]
 8018314:	c303      	stmia	r3!, {r0, r1}
 8018316:	4668      	mov	r0, sp
 8018318:	1d21      	adds	r1, r4, #4
 801831a:	f7ff ff15 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801831e:	4668      	mov	r0, sp
 8018320:	f7ff ff55 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8018324:	b988      	cbnz	r0, 801834a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018326:	f8bd 3000 	ldrh.w	r3, [sp]
 801832a:	4669      	mov	r1, sp
 801832c:	88a2      	ldrh	r2, [r4, #4]
 801832e:	4620      	mov	r0, r4
 8018330:	1a9b      	subs	r3, r3, r2
 8018332:	88e2      	ldrh	r2, [r4, #6]
 8018334:	f8ad 3000 	strh.w	r3, [sp]
 8018338:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801833c:	1a9b      	subs	r3, r3, r2
 801833e:	4632      	mov	r2, r6
 8018340:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018344:	6823      	ldr	r3, [r4, #0]
 8018346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018348:	4798      	blx	r3
 801834a:	69a4      	ldr	r4, [r4, #24]
 801834c:	e7db      	b.n	8018306 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801834e:	b002      	add	sp, #8
 8018350:	bd70      	pop	{r4, r5, r6, pc}

08018352 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 8018352:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
 8018356:	4770      	bx	lr

08018358 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 8018358:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
 801835c:	4770      	bx	lr

0801835e <_ZNK8touchgfx6Slider11getMinValueEv>:
 801835e:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8018360:	4770      	bx	lr

08018362 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 8018362:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8018364:	4770      	bx	lr

08018366 <_ZN8touchgfx6Slider8setValueEi>:
 8018366:	b570      	push	{r4, r5, r6, lr}
 8018368:	6803      	ldr	r3, [r0, #0]
 801836a:	4604      	mov	r4, r0
 801836c:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	; 0xa8
 8018370:	4798      	blx	r3
 8018372:	4601      	mov	r1, r0
 8018374:	462b      	mov	r3, r5
 8018376:	4620      	mov	r0, r4
 8018378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801837c:	4718      	bx	r3

0801837e <_ZNK8touchgfx6Slider15valueToPositionEi>:
 801837e:	b538      	push	{r3, r4, r5, lr}
 8018380:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
 8018384:	4605      	mov	r5, r0
 8018386:	428c      	cmp	r4, r1
 8018388:	bfa8      	it	ge
 801838a:	460c      	movge	r4, r1
 801838c:	429c      	cmp	r4, r3
 801838e:	bfac      	ite	ge
 8018390:	ebc3 0404 	rsbge	r4, r3, r4
 8018394:	ebc3 0403 	rsblt	r4, r3, r3
 8018398:	6803      	ldr	r3, [r0, #0]
 801839a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801839e:	4798      	blx	r3
 80183a0:	682b      	ldr	r3, [r5, #0]
 80183a2:	fb00 4404 	mla	r4, r0, r4, r4
 80183a6:	4628      	mov	r0, r5
 80183a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80183ac:	4798      	blx	r3
 80183ae:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80183b2:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
 80183b6:	2a01      	cmp	r2, #1
 80183b8:	fb94 f0f0 	sdiv	r0, r4, r0
 80183bc:	bf08      	it	eq
 80183be:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
 80183c2:	4418      	add	r0, r3
 80183c4:	bf04      	itt	eq
 80183c6:	1a10      	subeq	r0, r2, r0
 80183c8:	18c0      	addeq	r0, r0, r3
 80183ca:	b200      	sxth	r0, r0
 80183cc:	bd38      	pop	{r3, r4, r5, pc}

080183ce <_ZNK8touchgfx6Slider15positionToValueEs>:
 80183ce:	b570      	push	{r4, r5, r6, lr}
 80183d0:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
 80183d4:	4605      	mov	r5, r0
 80183d6:	460c      	mov	r4, r1
 80183d8:	428b      	cmp	r3, r1
 80183da:	d109      	bne.n	80183f0 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 80183dc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80183de:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80183e2:	2b01      	cmp	r3, #1
 80183e4:	bf01      	itttt	eq
 80183e6:	6bab      	ldreq	r3, [r5, #56]	; 0x38
 80183e8:	1a18      	subeq	r0, r3, r0
 80183ea:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 80183ec:	18c0      	addeq	r0, r0, r3
 80183ee:	bd70      	pop	{r4, r5, r6, pc}
 80183f0:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
 80183f4:	428b      	cmp	r3, r1
 80183f6:	d101      	bne.n	80183fc <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 80183f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80183fa:	e7f0      	b.n	80183de <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 80183fc:	6803      	ldr	r3, [r0, #0]
 80183fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018402:	4798      	blx	r3
 8018404:	682b      	ldr	r3, [r5, #0]
 8018406:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
 801840a:	4606      	mov	r6, r0
 801840c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018410:	4628      	mov	r0, r5
 8018412:	1a64      	subs	r4, r4, r1
 8018414:	4798      	blx	r3
 8018416:	2102      	movs	r1, #2
 8018418:	682b      	ldr	r3, [r5, #0]
 801841a:	fb96 f6f1 	sdiv	r6, r6, r1
 801841e:	fb00 6404 	mla	r4, r0, r4, r6
 8018422:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018426:	4628      	mov	r0, r5
 8018428:	4798      	blx	r3
 801842a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801842c:	fb94 f0f0 	sdiv	r0, r4, r0
 8018430:	4418      	add	r0, r3
 8018432:	e7d4      	b.n	80183de <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08018434 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8018434:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8018438:	2302      	movs	r3, #2
 801843a:	b92a      	cbnz	r2, 8018448 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801843c:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
 8018440:	fb90 f0f3 	sdiv	r0, r0, r3
 8018444:	b280      	uxth	r0, r0
 8018446:	4770      	bx	lr
 8018448:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
 801844c:	e7f8      	b.n	8018440 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

0801844e <_ZN8touchgfx6Slider13setValueRangeEii>:
 801844e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018450:	428b      	cmp	r3, r1
 8018452:	b410      	push	{r4}
 8018454:	db09      	blt.n	801846a <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 8018456:	4293      	cmp	r3, r2
 8018458:	bfa8      	it	ge
 801845a:	4613      	movge	r3, r2
 801845c:	6804      	ldr	r4, [r0, #0]
 801845e:	f8d4 4094 	ldr.w	r4, [r4, #148]	; 0x94
 8018462:	46a4      	mov	ip, r4
 8018464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018468:	4760      	bx	ip
 801846a:	460b      	mov	r3, r1
 801846c:	e7f6      	b.n	801845c <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

0801846e <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 801846e:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
 8018472:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
 8018476:	1a10      	subs	r0, r2, r0
 8018478:	4770      	bx	lr

0801847a <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 801847a:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
 801847e:	1a10      	subs	r0, r2, r0
 8018480:	4770      	bx	lr
	...

08018484 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 8018484:	4291      	cmp	r1, r2
 8018486:	b510      	push	{r4, lr}
 8018488:	db06      	blt.n	8018498 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 801848a:	4b08      	ldr	r3, [pc, #32]	; (80184ac <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 801848c:	f240 110d 	movw	r1, #269	; 0x10d
 8018490:	4a07      	ldr	r2, [pc, #28]	; (80184b0 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 8018492:	4808      	ldr	r0, [pc, #32]	; (80184b4 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 8018494:	f012 fd38 	bl	802af08 <__assert_func>
 8018498:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801849c:	6802      	ldr	r2, [r0, #0]
 801849e:	4619      	mov	r1, r3
 80184a0:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 80184a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184a8:	4710      	bx	r2
 80184aa:	bf00      	nop
 80184ac:	0802dfee 	.word	0x0802dfee
 80184b0:	0802e291 	.word	0x0802e291
 80184b4:	0802e046 	.word	0x0802e046

080184b8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 80184b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184bc:	790b      	ldrb	r3, [r1, #4]
 80184be:	4604      	mov	r4, r0
 80184c0:	460d      	mov	r5, r1
 80184c2:	b323      	cbz	r3, 801850e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d135      	bne.n	8018534 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80184c8:	6823      	ldr	r3, [r4, #0]
 80184ca:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80184ce:	f8d3 70a8 	ldr.w	r7, [r3, #168]	; 0xa8
 80184d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80184d6:	2a00      	cmp	r2, #0
 80184d8:	d12a      	bne.n	8018530 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 80184da:	88ee      	ldrh	r6, [r5, #6]
 80184dc:	4620      	mov	r0, r4
 80184de:	4798      	blx	r3
 80184e0:	1a31      	subs	r1, r6, r0
 80184e2:	4620      	mov	r0, r4
 80184e4:	b209      	sxth	r1, r1
 80184e6:	47b8      	blx	r7
 80184e8:	792b      	ldrb	r3, [r5, #4]
 80184ea:	2b01      	cmp	r3, #1
 80184ec:	d122      	bne.n	8018534 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80184ee:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80184f2:	b1f8      	cbz	r0, 8018534 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80184f4:	6803      	ldr	r3, [r0, #0]
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	4798      	blx	r3
 80184fa:	b1d8      	cbz	r0, 8018534 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 80184fc:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8018500:	4621      	mov	r1, r4
 8018502:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018504:	6803      	ldr	r3, [r0, #0]
 8018506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801850a:	689b      	ldr	r3, [r3, #8]
 801850c:	4718      	bx	r3
 801850e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
 8018512:	2800      	cmp	r0, #0
 8018514:	d0d8      	beq.n	80184c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018516:	6803      	ldr	r3, [r0, #0]
 8018518:	68db      	ldr	r3, [r3, #12]
 801851a:	4798      	blx	r3
 801851c:	2800      	cmp	r0, #0
 801851e:	d0d3      	beq.n	80184c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018520:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8018524:	4621      	mov	r1, r4
 8018526:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018528:	6803      	ldr	r3, [r0, #0]
 801852a:	689b      	ldr	r3, [r3, #8]
 801852c:	4798      	blx	r3
 801852e:	e7cb      	b.n	80184c8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018530:	892e      	ldrh	r6, [r5, #8]
 8018532:	e7d3      	b.n	80184dc <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8018534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018538 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8018538:	b570      	push	{r4, r5, r6, lr}
 801853a:	6803      	ldr	r3, [r0, #0]
 801853c:	4604      	mov	r4, r0
 801853e:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8018542:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 8018546:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801854a:	b942      	cbnz	r2, 801855e <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 801854c:	894d      	ldrh	r5, [r1, #10]
 801854e:	4798      	blx	r3
 8018550:	1a29      	subs	r1, r5, r0
 8018552:	4633      	mov	r3, r6
 8018554:	4620      	mov	r0, r4
 8018556:	b209      	sxth	r1, r1
 8018558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801855c:	4718      	bx	r3
 801855e:	898d      	ldrh	r5, [r1, #12]
 8018560:	e7f5      	b.n	801854e <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

08018564 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 8018564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018568:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 801856c:	4604      	mov	r4, r0
 801856e:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
 8018572:	4689      	mov	r9, r1
 8018574:	4690      	mov	r8, r2
 8018576:	461d      	mov	r5, r3
 8018578:	42b7      	cmp	r7, r6
 801857a:	d305      	bcc.n	8018588 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 801857c:	4b26      	ldr	r3, [pc, #152]	; (8018618 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 801857e:	2149      	movs	r1, #73	; 0x49
 8018580:	4a26      	ldr	r2, [pc, #152]	; (801861c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 8018582:	4827      	ldr	r0, [pc, #156]	; (8018620 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 8018584:	f012 fcc0 	bl	802af08 <__assert_func>
 8018588:	f04f 0a00 	mov.w	sl, #0
 801858c:	b213      	sxth	r3, r2
 801858e:	fa0f fb81 	sxth.w	fp, r1
 8018592:	303c      	adds	r0, #60	; 0x3c
 8018594:	f800 ac10 	strb.w	sl, [r0, #-16]
 8018598:	461a      	mov	r2, r3
 801859a:	4659      	mov	r1, fp
 801859c:	9301      	str	r3, [sp, #4]
 801859e:	f7eb fd6b 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 80185a2:	9b01      	ldr	r3, [sp, #4]
 80185a4:	4659      	mov	r1, fp
 80185a6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80185aa:	461a      	mov	r2, r3
 80185ac:	f7eb fd64 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 80185b0:	4652      	mov	r2, sl
 80185b2:	4651      	mov	r1, sl
 80185b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80185b8:	f7eb fd5e 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 80185bc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 80185c0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80185c4:	4620      	mov	r0, r4
 80185c6:	4489      	add	r9, r1
 80185c8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 80185cc:	4490      	add	r8, r2
 80185ce:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 80185d2:	4431      	add	r1, r6
 80185d4:	fa1f f989 	uxth.w	r9, r9
 80185d8:	442a      	add	r2, r5
 80185da:	fa1f f888 	uxth.w	r8, r8
 80185de:	b289      	uxth	r1, r1
 80185e0:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
 80185e4:	b292      	uxth	r2, r2
 80185e6:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 80185ea:	4589      	cmp	r9, r1
 80185ec:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80185f0:	bf8c      	ite	hi
 80185f2:	fa0f f189 	sxthhi.w	r1, r9
 80185f6:	b209      	sxthls	r1, r1
 80185f8:	4590      	cmp	r8, r2
 80185fa:	bf8c      	ite	hi
 80185fc:	fa0f f288 	sxthhi.w	r2, r8
 8018600:	b212      	sxthls	r2, r2
 8018602:	f7eb fd95 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018606:	6823      	ldr	r3, [r4, #0]
 8018608:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801860a:	4620      	mov	r0, r4
 801860c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8018610:	b003      	add	sp, #12
 8018612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018616:	4718      	bx	r3
 8018618:	0802e0e8 	.word	0x0802e0e8
 801861c:	0802e332 	.word	0x0802e332
 8018620:	0802e046 	.word	0x0802e046

08018624 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8018624:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018628:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
 801862c:	4604      	mov	r4, r0
 801862e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
 8018632:	4689      	mov	r9, r1
 8018634:	4690      	mov	r8, r2
 8018636:	461d      	mov	r5, r3
 8018638:	42b7      	cmp	r7, r6
 801863a:	d305      	bcc.n	8018648 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 801863c:	4b22      	ldr	r3, [pc, #136]	; (80186c8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801863e:	2164      	movs	r1, #100	; 0x64
 8018640:	4a22      	ldr	r2, [pc, #136]	; (80186cc <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 8018642:	4823      	ldr	r0, [pc, #140]	; (80186d0 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 8018644:	f012 fc60 	bl	802af08 <__assert_func>
 8018648:	2301      	movs	r3, #1
 801864a:	fa0f fa81 	sxth.w	sl, r1
 801864e:	fa0f fb82 	sxth.w	fp, r2
 8018652:	303c      	adds	r0, #60	; 0x3c
 8018654:	f800 3c10 	strb.w	r3, [r0, #-16]
 8018658:	4651      	mov	r1, sl
 801865a:	465a      	mov	r2, fp
 801865c:	f7eb fd0c 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 8018660:	465a      	mov	r2, fp
 8018662:	4651      	mov	r1, sl
 8018664:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8018668:	f7eb fd06 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 801866c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
 8018670:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8018674:	4620      	mov	r0, r4
 8018676:	4489      	add	r9, r1
 8018678:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
 801867c:	4490      	add	r8, r2
 801867e:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
 8018682:	4429      	add	r1, r5
 8018684:	fa1f f989 	uxth.w	r9, r9
 8018688:	4432      	add	r2, r6
 801868a:	fa1f f888 	uxth.w	r8, r8
 801868e:	b289      	uxth	r1, r1
 8018690:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
 8018694:	b292      	uxth	r2, r2
 8018696:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
 801869a:	4589      	cmp	r9, r1
 801869c:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
 80186a0:	bf8c      	ite	hi
 80186a2:	fa0f f189 	sxthhi.w	r1, r9
 80186a6:	b209      	sxthls	r1, r1
 80186a8:	4590      	cmp	r8, r2
 80186aa:	bf8c      	ite	hi
 80186ac:	fa0f f288 	sxthhi.w	r2, r8
 80186b0:	b212      	sxthls	r2, r2
 80186b2:	f7eb fd3d 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80186b6:	6823      	ldr	r3, [r4, #0]
 80186b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80186ba:	4620      	mov	r0, r4
 80186bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80186c0:	b001      	add	sp, #4
 80186c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c6:	4718      	bx	r3
 80186c8:	0802e076 	.word	0x0802e076
 80186cc:	0802e2cd 	.word	0x0802e2cd
 80186d0:	0802e046 	.word	0x0802e046

080186d4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 80186d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186d8:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
 80186dc:	4604      	mov	r4, r0
 80186de:	3094      	adds	r0, #148	; 0x94
 80186e0:	4588      	cmp	r8, r1
 80186e2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80186e6:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 80186ea:	bfb8      	it	lt
 80186ec:	4688      	movlt	r8, r1
 80186ee:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
 80186f2:	4588      	cmp	r8, r1
 80186f4:	bfa8      	it	ge
 80186f6:	4688      	movge	r8, r1
 80186f8:	fa1f f788 	uxth.w	r7, r8
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d12f      	bne.n	8018760 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 8018700:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 8018704:	4641      	mov	r1, r8
 8018706:	f7eb fd60 	bl	80041ca <_ZN8touchgfx8Drawable6moveToEss>
 801870a:	4630      	mov	r0, r6
 801870c:	f004 fa58 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018710:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8018714:	6823      	ldr	r3, [r4, #0]
 8018716:	4620      	mov	r0, r4
 8018718:	1abf      	subs	r7, r7, r2
 801871a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801871e:	b2bf      	uxth	r7, r7
 8018720:	4798      	blx	r3
 8018722:	4407      	add	r7, r0
 8018724:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
 8018728:	4630      	mov	r0, r6
 801872a:	f004 fa49 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	4641      	mov	r1, r8
 8018732:	4620      	mov	r0, r4
 8018734:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018738:	4798      	blx	r3
 801873a:	6320      	str	r0, [r4, #48]	; 0x30
 801873c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8018740:	2800      	cmp	r0, #0
 8018742:	d03d      	beq.n	80187c0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 8018744:	6803      	ldr	r3, [r0, #0]
 8018746:	68db      	ldr	r3, [r3, #12]
 8018748:	4798      	blx	r3
 801874a:	2800      	cmp	r0, #0
 801874c:	d038      	beq.n	80187c0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 801874e:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 8018752:	4621      	mov	r1, r4
 8018754:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018756:	6803      	ldr	r3, [r0, #0]
 8018758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801875c:	689b      	ldr	r3, [r3, #8]
 801875e:	4718      	bx	r3
 8018760:	4642      	mov	r2, r8
 8018762:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
 8018766:	f7eb fd30 	bl	80041ca <_ZN8touchgfx8Drawable6moveToEss>
 801876a:	4630      	mov	r0, r6
 801876c:	f004 fa28 	bl	801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018770:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
 8018774:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
 8018778:	6823      	ldr	r3, [r4, #0]
 801877a:	4405      	add	r5, r0
 801877c:	4620      	mov	r0, r4
 801877e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018782:	b2ad      	uxth	r5, r5
 8018784:	4798      	blx	r3
 8018786:	6823      	ldr	r3, [r4, #0]
 8018788:	1bed      	subs	r5, r5, r7
 801878a:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
 801878e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018792:	1a2d      	subs	r5, r5, r0
 8018794:	4620      	mov	r0, r4
 8018796:	4798      	blx	r3
 8018798:	4438      	add	r0, r7
 801879a:	b2ad      	uxth	r5, r5
 801879c:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
 80187a0:	b202      	sxth	r2, r0
 80187a2:	4651      	mov	r1, sl
 80187a4:	4630      	mov	r0, r6
 80187a6:	f7eb fc67 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 80187aa:	4630      	mov	r0, r6
 80187ac:	b22a      	sxth	r2, r5
 80187ae:	4649      	mov	r1, r9
 80187b0:	f7eb fcbe 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80187b4:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
 80187b8:	1a2d      	subs	r5, r5, r0
 80187ba:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
 80187be:	e7b3      	b.n	8018728 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 80187c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080187c4 <_ZN8touchgfx6SliderC1Ev>:
 80187c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187c8:	4604      	mov	r4, r0
 80187ca:	2500      	movs	r5, #0
 80187cc:	f7eb fb94 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 80187d0:	ae02      	add	r6, sp, #8
 80187d2:	4b28      	ldr	r3, [pc, #160]	; (8018874 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 80187d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80187d8:	f04f 0b01 	mov.w	fp, #1
 80187dc:	f104 093c 	add.w	r9, r4, #60	; 0x3c
 80187e0:	f104 0a68 	add.w	sl, r4, #104	; 0x68
 80187e4:	6023      	str	r3, [r4, #0]
 80187e6:	f826 7d04 	strh.w	r7, [r6, #-4]!
 80187ea:	4648      	mov	r0, r9
 80187ec:	4631      	mov	r1, r6
 80187ee:	62a5      	str	r5, [r4, #40]	; 0x28
 80187f0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 80187f4:	f104 0894 	add.w	r8, r4, #148	; 0x94
 80187f8:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
 80187fc:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8018800:	f7ed f918 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018804:	4631      	mov	r1, r6
 8018806:	4650      	mov	r0, sl
 8018808:	f8ad 7004 	strh.w	r7, [sp, #4]
 801880c:	f7ed f912 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018810:	4631      	mov	r1, r6
 8018812:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8018816:	4640      	mov	r0, r8
 8018818:	f8ad 7004 	strh.w	r7, [sp, #4]
 801881c:	f7ed f90a 	bl	8005a34 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018820:	4630      	mov	r0, r6
 8018822:	f7eb fb69 	bl	8003ef8 <_ZN8touchgfx8DrawableC1Ev>
 8018826:	4b14      	ldr	r3, [pc, #80]	; (8018878 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 8018828:	4651      	mov	r1, sl
 801882a:	4630      	mov	r0, r6
 801882c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8018830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8018834:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 8018838:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
 801883c:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
 8018840:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
 8018844:	f7ff fb3e 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018848:	4649      	mov	r1, r9
 801884a:	4620      	mov	r0, r4
 801884c:	f7ff fb3a 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018850:	4631      	mov	r1, r6
 8018852:	4620      	mov	r0, r4
 8018854:	f7ff fb36 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018858:	4641      	mov	r1, r8
 801885a:	4620      	mov	r0, r4
 801885c:	f7ff fb32 	bl	8017ec4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8018860:	4620      	mov	r0, r4
 8018862:	2264      	movs	r2, #100	; 0x64
 8018864:	4629      	mov	r1, r5
 8018866:	f7ff fdf2 	bl	801844e <_ZN8touchgfx6Slider13setValueRangeEii>
 801886a:	4620      	mov	r0, r4
 801886c:	b003      	add	sp, #12
 801886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018872:	bf00      	nop
 8018874:	0802e164 	.word	0x0802e164
 8018878:	0802de50 	.word	0x0802de50

0801887c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 801887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018880:	4615      	mov	r5, r2
 8018882:	4604      	mov	r4, r0
 8018884:	4608      	mov	r0, r1
 8018886:	460e      	mov	r6, r1
 8018888:	461f      	mov	r7, r3
 801888a:	f006 facb 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801888e:	4680      	mov	r8, r0
 8018890:	4628      	mov	r0, r5
 8018892:	f006 fac7 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018896:	4580      	cmp	r8, r0
 8018898:	d005      	beq.n	80188a6 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 801889a:	4b14      	ldr	r3, [pc, #80]	; (80188ec <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 801889c:	213a      	movs	r1, #58	; 0x3a
 801889e:	4a14      	ldr	r2, [pc, #80]	; (80188f0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 80188a0:	4814      	ldr	r0, [pc, #80]	; (80188f4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 80188a2:	f012 fb31 	bl	802af08 <__assert_func>
 80188a6:	4630      	mov	r0, r6
 80188a8:	f006 faf6 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188ac:	4680      	mov	r8, r0
 80188ae:	4628      	mov	r0, r5
 80188b0:	f006 faf2 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80188b4:	4580      	cmp	r8, r0
 80188b6:	d1f0      	bne.n	801889a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 80188b8:	4631      	mov	r1, r6
 80188ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80188be:	f001 fca6 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80188c2:	4629      	mov	r1, r5
 80188c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80188c8:	f001 fca1 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80188cc:	4639      	mov	r1, r7
 80188ce:	f104 0094 	add.w	r0, r4, #148	; 0x94
 80188d2:	f001 fc9c 	bl	801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80188d6:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
 80188da:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
 80188de:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80188e2:	f7eb fc25 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80188e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188ea:	bf00      	nop
 80188ec:	0802df0f 	.word	0x0802df0f
 80188f0:	0802e224 	.word	0x0802e224
 80188f4:	0802e046 	.word	0x0802e046

080188f8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80188f8:	4770      	bx	lr

080188fa <_ZN8touchgfx3HAL10FlushCacheEv>:
 80188fa:	4770      	bx	lr

080188fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80188fc:	6803      	ldr	r3, [r0, #0]
 80188fe:	b513      	push	{r0, r1, r4, lr}
 8018900:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8018904:	2300      	movs	r3, #0
 8018906:	e9cd 3300 	strd	r3, r3, [sp]
 801890a:	466b      	mov	r3, sp
 801890c:	47a0      	blx	r4
 801890e:	b002      	add	sp, #8
 8018910:	bd10      	pop	{r4, pc}

08018912 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018912:	2301      	movs	r3, #1
 8018914:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018918:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801891c:	4770      	bx	lr

0801891e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801891e:	2301      	movs	r3, #1
 8018920:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018924:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018928:	4770      	bx	lr

0801892a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801892a:	6843      	ldr	r3, [r0, #4]
 801892c:	2201      	movs	r2, #1
 801892e:	725a      	strb	r2, [r3, #9]
 8018930:	6840      	ldr	r0, [r0, #4]
 8018932:	6803      	ldr	r3, [r0, #0]
 8018934:	691b      	ldr	r3, [r3, #16]
 8018936:	4718      	bx	r3

08018938 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018938:	6840      	ldr	r0, [r0, #4]
 801893a:	6803      	ldr	r3, [r0, #0]
 801893c:	689b      	ldr	r3, [r3, #8]
 801893e:	4718      	bx	r3

08018940 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8018940:	b530      	push	{r4, r5, lr}
 8018942:	b08b      	sub	sp, #44	; 0x2c
 8018944:	6804      	ldr	r4, [r0, #0]
 8018946:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801894a:	9509      	str	r5, [sp, #36]	; 0x24
 801894c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8018950:	9508      	str	r5, [sp, #32]
 8018952:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018956:	9507      	str	r5, [sp, #28]
 8018958:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801895c:	9506      	str	r5, [sp, #24]
 801895e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018962:	9505      	str	r5, [sp, #20]
 8018964:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8018968:	9504      	str	r5, [sp, #16]
 801896a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801896e:	9503      	str	r5, [sp, #12]
 8018970:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018974:	9502      	str	r5, [sp, #8]
 8018976:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801897a:	e9cd 3500 	strd	r3, r5, [sp]
 801897e:	4613      	mov	r3, r2
 8018980:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018982:	2200      	movs	r2, #0
 8018984:	47a0      	blx	r4
 8018986:	b00b      	add	sp, #44	; 0x2c
 8018988:	bd30      	pop	{r4, r5, pc}
	...

0801898c <_ZN8touchgfx3HAL10beginFrameEv>:
 801898c:	4b04      	ldr	r3, [pc, #16]	; (80189a0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801898e:	781b      	ldrb	r3, [r3, #0]
 8018990:	b123      	cbz	r3, 801899c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8018992:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018996:	f080 0001 	eor.w	r0, r0, #1
 801899a:	4770      	bx	lr
 801899c:	2001      	movs	r0, #1
 801899e:	4770      	bx	lr
 80189a0:	2400b8ca 	.word	0x2400b8ca

080189a4 <_ZN8touchgfx3HAL8endFrameEv>:
 80189a4:	b510      	push	{r4, lr}
 80189a6:	4604      	mov	r4, r0
 80189a8:	6840      	ldr	r0, [r0, #4]
 80189aa:	6803      	ldr	r3, [r0, #0]
 80189ac:	689b      	ldr	r3, [r3, #8]
 80189ae:	4798      	blx	r3
 80189b0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80189b4:	b113      	cbz	r3, 80189bc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80189b6:	2301      	movs	r3, #1
 80189b8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80189bc:	bd10      	pop	{r4, pc}

080189be <_ZN8touchgfx3HAL10initializeEv>:
 80189be:	b510      	push	{r4, lr}
 80189c0:	4604      	mov	r4, r0
 80189c2:	f7e9 fac5 	bl	8001f50 <_ZN8touchgfx10OSWrappers10initializeEv>
 80189c6:	6860      	ldr	r0, [r4, #4]
 80189c8:	6803      	ldr	r3, [r0, #0]
 80189ca:	68db      	ldr	r3, [r3, #12]
 80189cc:	4798      	blx	r3
 80189ce:	68e0      	ldr	r0, [r4, #12]
 80189d0:	6803      	ldr	r3, [r0, #0]
 80189d2:	689b      	ldr	r3, [r3, #8]
 80189d4:	4798      	blx	r3
 80189d6:	6823      	ldr	r3, [r4, #0]
 80189d8:	4620      	mov	r0, r4
 80189da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189e0:	4718      	bx	r3

080189e2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80189e2:	b508      	push	{r3, lr}
 80189e4:	6803      	ldr	r3, [r0, #0]
 80189e6:	4604      	mov	r4, r0
 80189e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80189ea:	4798      	blx	r3
 80189ec:	6823      	ldr	r3, [r4, #0]
 80189ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189f0:	4620      	mov	r0, r4
 80189f2:	4798      	blx	r3
 80189f4:	f7e9 fb22 	bl	800203c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80189f8:	6823      	ldr	r3, [r4, #0]
 80189fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189fc:	e7f8      	b.n	80189f0 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018a00 <_ZN8touchgfx3HAL4tickEv>:
 8018a00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018a02:	6803      	ldr	r3, [r0, #0]
 8018a04:	4604      	mov	r4, r0
 8018a06:	4d5c      	ldr	r5, [pc, #368]	; (8018b78 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018a08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8018a0c:	4798      	blx	r3
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	f000 8097 	beq.w	8018b42 <_ZN8touchgfx3HAL4tickEv+0x142>
 8018a14:	2001      	movs	r0, #1
 8018a16:	2600      	movs	r6, #0
 8018a18:	f7e8 ffd8 	bl	80019cc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a1c:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8018a20:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8018a24:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018a28:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018a2c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018a30:	b133      	cbz	r3, 8018a40 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018a32:	6823      	ldr	r3, [r4, #0]
 8018a34:	4620      	mov	r0, r4
 8018a36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8018a3a:	4798      	blx	r3
 8018a3c:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8018a40:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018a44:	2601      	movs	r6, #1
 8018a46:	6862      	ldr	r2, [r4, #4]
 8018a48:	f083 0301 	eor.w	r3, r3, #1
 8018a4c:	702e      	strb	r6, [r5, #0]
 8018a4e:	7253      	strb	r3, [r2, #9]
 8018a50:	f003 f8ec 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8018a54:	6803      	ldr	r3, [r0, #0]
 8018a56:	4631      	mov	r1, r6
 8018a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a5a:	4798      	blx	r3
 8018a5c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018a60:	b90b      	cbnz	r3, 8018a66 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018a62:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018a66:	f003 f8e1 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8018a6a:	6803      	ldr	r3, [r0, #0]
 8018a6c:	695b      	ldr	r3, [r3, #20]
 8018a6e:	4798      	blx	r3
 8018a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a72:	6803      	ldr	r3, [r0, #0]
 8018a74:	691b      	ldr	r3, [r3, #16]
 8018a76:	4798      	blx	r3
 8018a78:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018a7c:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8018a80:	3b01      	subs	r3, #1
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018a88:	b10a      	cbz	r2, 8018a8e <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d1eb      	bne.n	8018a66 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018a8e:	4a3b      	ldr	r2, [pc, #236]	; (8018b7c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018a90:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8018a94:	7813      	ldrb	r3, [r2, #0]
 8018a96:	3301      	adds	r3, #1
 8018a98:	b25b      	sxtb	r3, r3
 8018a9a:	4299      	cmp	r1, r3
 8018a9c:	7013      	strb	r3, [r2, #0]
 8018a9e:	dc10      	bgt.n	8018ac2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	68e0      	ldr	r0, [r4, #12]
 8018aa4:	a902      	add	r1, sp, #8
 8018aa6:	7013      	strb	r3, [r2, #0]
 8018aa8:	aa03      	add	r2, sp, #12
 8018aaa:	6803      	ldr	r3, [r0, #0]
 8018aac:	68db      	ldr	r3, [r3, #12]
 8018aae:	4798      	blx	r3
 8018ab0:	6823      	ldr	r3, [r4, #0]
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d051      	beq.n	8018b5a <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018ab6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018aba:	4620      	mov	r0, r4
 8018abc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018ac0:	4798      	blx	r3
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	6960      	ldr	r0, [r4, #20]
 8018ac6:	f88d 3007 	strb.w	r3, [sp, #7]
 8018aca:	b158      	cbz	r0, 8018ae4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018acc:	6803      	ldr	r3, [r0, #0]
 8018ace:	f10d 0107 	add.w	r1, sp, #7
 8018ad2:	68db      	ldr	r3, [r3, #12]
 8018ad4:	4798      	blx	r3
 8018ad6:	b128      	cbz	r0, 8018ae4 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ada:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018ade:	6803      	ldr	r3, [r0, #0]
 8018ae0:	68db      	ldr	r3, [r3, #12]
 8018ae2:	4798      	blx	r3
 8018ae4:	f104 001c 	add.w	r0, r4, #28
 8018ae8:	f012 f926 	bl	802ad38 <_ZN8touchgfx8Gestures4tickEv>
 8018aec:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8018af0:	b30b      	cbz	r3, 8018b36 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018af2:	6920      	ldr	r0, [r4, #16]
 8018af4:	6803      	ldr	r3, [r0, #0]
 8018af6:	691b      	ldr	r3, [r3, #16]
 8018af8:	4798      	blx	r3
 8018afa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018afc:	4606      	mov	r6, r0
 8018afe:	b903      	cbnz	r3, 8018b02 <_ZN8touchgfx3HAL4tickEv+0x102>
 8018b00:	6720      	str	r0, [r4, #112]	; 0x70
 8018b02:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018b04:	4a1e      	ldr	r2, [pc, #120]	; (8018b80 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018b06:	1af3      	subs	r3, r6, r3
 8018b08:	4293      	cmp	r3, r2
 8018b0a:	d914      	bls.n	8018b36 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018b0c:	6920      	ldr	r0, [r4, #16]
 8018b0e:	6803      	ldr	r3, [r0, #0]
 8018b10:	699b      	ldr	r3, [r3, #24]
 8018b12:	4798      	blx	r3
 8018b14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018b16:	2264      	movs	r2, #100	; 0x64
 8018b18:	1af3      	subs	r3, r6, r3
 8018b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8018b22:	2800      	cmp	r0, #0
 8018b24:	dc1e      	bgt.n	8018b64 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018b26:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018b2a:	6920      	ldr	r0, [r4, #16]
 8018b2c:	2100      	movs	r1, #0
 8018b2e:	6803      	ldr	r3, [r0, #0]
 8018b30:	69db      	ldr	r3, [r3, #28]
 8018b32:	4798      	blx	r3
 8018b34:	6726      	str	r6, [r4, #112]	; 0x70
 8018b36:	f003 f879 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 8018b3a:	6803      	ldr	r3, [r0, #0]
 8018b3c:	2100      	movs	r1, #0
 8018b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b40:	4798      	blx	r3
 8018b42:	6823      	ldr	r3, [r4, #0]
 8018b44:	4620      	mov	r0, r4
 8018b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8018b4a:	4798      	blx	r3
 8018b4c:	2001      	movs	r0, #1
 8018b4e:	f7e8 ff59 	bl	8001a04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018b52:	2300      	movs	r3, #0
 8018b54:	702b      	strb	r3, [r5, #0]
 8018b56:	b004      	add	sp, #16
 8018b58:	bd70      	pop	{r4, r5, r6, pc}
 8018b5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018b5e:	4620      	mov	r0, r4
 8018b60:	4798      	blx	r3
 8018b62:	e7ae      	b.n	8018ac2 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018b64:	2863      	cmp	r0, #99	; 0x63
 8018b66:	bfcb      	itete	gt
 8018b68:	2300      	movgt	r3, #0
 8018b6a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018b6e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8018b72:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8018b76:	e7d8      	b.n	8018b2a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018b78:	2400b8d0 	.word	0x2400b8d0
 8018b7c:	2400b8d1 	.word	0x2400b8d1
 8018b80:	05f5e100 	.word	0x05f5e100

08018b84 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018b84:	f7e9 ba26 	b.w	8001fd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018b88 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018b88:	6581      	str	r1, [r0, #88]	; 0x58
 8018b8a:	301c      	adds	r0, #28
 8018b8c:	f012 b8d2 	b.w	802ad34 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018b90 <_ZN8touchgfx3HAL5touchEll>:
 8018b90:	b530      	push	{r4, r5, lr}
 8018b92:	b087      	sub	sp, #28
 8018b94:	4604      	mov	r4, r0
 8018b96:	a804      	add	r0, sp, #16
 8018b98:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018b9c:	f002 fe06 	bl	801b7ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018ba0:	9b04      	ldr	r3, [sp, #16]
 8018ba2:	a906      	add	r1, sp, #24
 8018ba4:	a803      	add	r0, sp, #12
 8018ba6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018baa:	9b05      	ldr	r3, [sp, #20]
 8018bac:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018bb0:	f002 fe4e 	bl	801b850 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018bb4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8018bb8:	f104 001c 	add.w	r0, r4, #28
 8018bbc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018bc0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018bc4:	b189      	cbz	r1, 8018bea <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018bc6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8018bca:	9300      	str	r3, [sp, #0]
 8018bcc:	4613      	mov	r3, r2
 8018bce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8018bd2:	462a      	mov	r2, r5
 8018bd4:	f012 f8be 	bl	802ad54 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018bd8:	b128      	cbz	r0, 8018be6 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018bda:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018bde:	65e3      	str	r3, [r4, #92]	; 0x5c
 8018be0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018be4:	6623      	str	r3, [r4, #96]	; 0x60
 8018be6:	b007      	add	sp, #28
 8018be8:	bd30      	pop	{r4, r5, pc}
 8018bea:	f012 f8f7 	bl	802addc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018bee:	2301      	movs	r3, #1
 8018bf0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018bf4:	e7f1      	b.n	8018bda <_ZN8touchgfx3HAL5touchEll+0x4a>

08018bf6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018bf6:	b510      	push	{r4, lr}
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d046      	beq.n	8018c8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018bfc:	ea81 0002 	eor.w	r0, r1, r2
 8018c00:	07c4      	lsls	r4, r0, #31
 8018c02:	d508      	bpl.n	8018c16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018c04:	440b      	add	r3, r1
 8018c06:	3a01      	subs	r2, #1
 8018c08:	428b      	cmp	r3, r1
 8018c0a:	d93e      	bls.n	8018c8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c0c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018c10:	f801 0b01 	strb.w	r0, [r1], #1
 8018c14:	e7f8      	b.n	8018c08 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018c16:	07d0      	lsls	r0, r2, #31
 8018c18:	bf42      	ittt	mi
 8018c1a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018c1e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018c22:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018c26:	2b01      	cmp	r3, #1
 8018c28:	d911      	bls.n	8018c4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c2a:	ea81 0402 	eor.w	r4, r1, r2
 8018c2e:	4610      	mov	r0, r2
 8018c30:	07a4      	lsls	r4, r4, #30
 8018c32:	d022      	beq.n	8018c7a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018c34:	f023 0401 	bic.w	r4, r3, #1
 8018c38:	440c      	add	r4, r1
 8018c3a:	428c      	cmp	r4, r1
 8018c3c:	4602      	mov	r2, r0
 8018c3e:	d904      	bls.n	8018c4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018c40:	8812      	ldrh	r2, [r2, #0]
 8018c42:	3002      	adds	r0, #2
 8018c44:	f821 2b02 	strh.w	r2, [r1], #2
 8018c48:	e7f7      	b.n	8018c3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018c4a:	f003 0301 	and.w	r3, r3, #1
 8018c4e:	f023 0003 	bic.w	r0, r3, #3
 8018c52:	4408      	add	r0, r1
 8018c54:	4288      	cmp	r0, r1
 8018c56:	4614      	mov	r4, r2
 8018c58:	d904      	bls.n	8018c64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018c5a:	6824      	ldr	r4, [r4, #0]
 8018c5c:	3204      	adds	r2, #4
 8018c5e:	f841 4b04 	str.w	r4, [r1], #4
 8018c62:	e7f7      	b.n	8018c54 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018c64:	f003 0303 	and.w	r3, r3, #3
 8018c68:	3a01      	subs	r2, #1
 8018c6a:	440b      	add	r3, r1
 8018c6c:	428b      	cmp	r3, r1
 8018c6e:	d90c      	bls.n	8018c8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c70:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018c74:	f801 0b01 	strb.w	r0, [r1], #1
 8018c78:	e7f8      	b.n	8018c6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018c7a:	0790      	lsls	r0, r2, #30
 8018c7c:	d0e7      	beq.n	8018c4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c7e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018c82:	3b02      	subs	r3, #2
 8018c84:	f821 0b02 	strh.w	r0, [r1], #2
 8018c88:	e7e1      	b.n	8018c4e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c8a:	2001      	movs	r0, #1
 8018c8c:	bd10      	pop	{r4, pc}

08018c8e <_ZN8touchgfx3HAL7noTouchEv>:
 8018c8e:	b510      	push	{r4, lr}
 8018c90:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8018c94:	4604      	mov	r4, r0
 8018c96:	b153      	cbz	r3, 8018cae <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018c98:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018c9c:	2101      	movs	r1, #1
 8018c9e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018ca2:	301c      	adds	r0, #28
 8018ca4:	f012 f89a 	bl	802addc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8018cae:	bd10      	pop	{r4, pc}

08018cb0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018cb4:	4604      	mov	r4, r0
 8018cb6:	6980      	ldr	r0, [r0, #24]
 8018cb8:	b085      	sub	sp, #20
 8018cba:	460f      	mov	r7, r1
 8018cbc:	4690      	mov	r8, r2
 8018cbe:	4699      	mov	r9, r3
 8018cc0:	b930      	cbnz	r0, 8018cd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018cc2:	4b1c      	ldr	r3, [pc, #112]	; (8018d34 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018cc4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8018cc8:	4a1b      	ldr	r2, [pc, #108]	; (8018d38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018cca:	481c      	ldr	r0, [pc, #112]	; (8018d3c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018ccc:	f012 f91c 	bl	802af08 <__assert_func>
 8018cd0:	ad04      	add	r5, sp, #16
 8018cd2:	2600      	movs	r6, #0
 8018cd4:	f845 6d04 	str.w	r6, [r5, #-4]!
 8018cd8:	6806      	ldr	r6, [r0, #0]
 8018cda:	9501      	str	r5, [sp, #4]
 8018cdc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8018ce0:	9500      	str	r5, [sp, #0]
 8018ce2:	6835      	ldr	r5, [r6, #0]
 8018ce4:	47a8      	blx	r5
 8018ce6:	4d16      	ldr	r5, [pc, #88]	; (8018d40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018ce8:	4606      	mov	r6, r0
 8018cea:	f8a5 9000 	strh.w	r9, [r5]
 8018cee:	f7eb fab9 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8018cf2:	6803      	ldr	r3, [r0, #0]
 8018cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cf6:	4798      	blx	r3
 8018cf8:	2801      	cmp	r0, #1
 8018cfa:	d012      	beq.n	8018d22 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018cfc:	d306      	bcc.n	8018d0c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8018cfe:	280d      	cmp	r0, #13
 8018d00:	d80b      	bhi.n	8018d1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018d02:	4b10      	ldr	r3, [pc, #64]	; (8018d44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018d04:	f240 1167 	movw	r1, #359	; 0x167
 8018d08:	4a0b      	ldr	r2, [pc, #44]	; (8018d38 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018d0a:	e7de      	b.n	8018cca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018d0c:	882b      	ldrh	r3, [r5, #0]
 8018d0e:	fb08 7203 	mla	r2, r8, r3, r7
 8018d12:	9b03      	ldr	r3, [sp, #12]
 8018d14:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018d18:	63e3      	str	r3, [r4, #60]	; 0x3c
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	b005      	add	sp, #20
 8018d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d22:	882a      	ldrh	r2, [r5, #0]
 8018d24:	9b03      	ldr	r3, [sp, #12]
 8018d26:	fb08 7202 	mla	r2, r8, r2, r7
 8018d2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d2e:	1a9a      	subs	r2, r3, r2
 8018d30:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018d32:	e7f2      	b.n	8018d1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018d34:	0802e506 	.word	0x0802e506
 8018d38:	0802e897 	.word	0x0802e897
 8018d3c:	0802e54b 	.word	0x0802e54b
 8018d40:	2400b8c6 	.word	0x2400b8c6
 8018d44:	0802e571 	.word	0x0802e571

08018d48 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4a:	b08b      	sub	sp, #44	; 0x2c
 8018d4c:	4617      	mov	r7, r2
 8018d4e:	4604      	mov	r4, r0
 8018d50:	460e      	mov	r6, r1
 8018d52:	461d      	mov	r5, r3
 8018d54:	f7eb fa86 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8018d58:	6803      	ldr	r3, [r0, #0]
 8018d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d5c:	4798      	blx	r3
 8018d5e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018d62:	9007      	str	r0, [sp, #28]
 8018d64:	4631      	mov	r1, r6
 8018d66:	6822      	ldr	r2, [r4, #0]
 8018d68:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018d6c:	4b0c      	ldr	r3, [pc, #48]	; (8018da0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018d6e:	4620      	mov	r0, r4
 8018d70:	881b      	ldrh	r3, [r3, #0]
 8018d72:	9306      	str	r3, [sp, #24]
 8018d74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018d78:	9305      	str	r3, [sp, #20]
 8018d7a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018d7e:	9304      	str	r3, [sp, #16]
 8018d80:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018d84:	9303      	str	r3, [sp, #12]
 8018d86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018d8a:	9302      	str	r3, [sp, #8]
 8018d8c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018d90:	e9cd 5300 	strd	r5, r3, [sp]
 8018d94:	463b      	mov	r3, r7
 8018d96:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018d98:	2200      	movs	r2, #0
 8018d9a:	47a8      	blx	r5
 8018d9c:	b00b      	add	sp, #44	; 0x2c
 8018d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018da0:	2400b8c6 	.word	0x2400b8c6

08018da4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018da8:	4698      	mov	r8, r3
 8018daa:	6803      	ldr	r3, [r0, #0]
 8018dac:	b08b      	sub	sp, #44	; 0x2c
 8018dae:	4617      	mov	r7, r2
 8018db0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018db2:	460e      	mov	r6, r1
 8018db4:	4b13      	ldr	r3, [pc, #76]	; (8018e04 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018db6:	4604      	mov	r4, r0
 8018db8:	f8b3 9000 	ldrh.w	r9, [r3]
 8018dbc:	f7eb fa52 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8018dc0:	6803      	ldr	r3, [r0, #0]
 8018dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc4:	4798      	blx	r3
 8018dc6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018dca:	2200      	movs	r2, #0
 8018dcc:	4631      	mov	r1, r6
 8018dce:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018dd2:	2302      	movs	r3, #2
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018dda:	2301      	movs	r3, #1
 8018ddc:	9305      	str	r3, [sp, #20]
 8018dde:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018de2:	9304      	str	r3, [sp, #16]
 8018de4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018de8:	9303      	str	r3, [sp, #12]
 8018dea:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018dee:	9302      	str	r3, [sp, #8]
 8018df0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018df4:	e9cd 8300 	strd	r8, r3, [sp]
 8018df8:	463b      	mov	r3, r7
 8018dfa:	47a8      	blx	r5
 8018dfc:	b00b      	add	sp, #44	; 0x2c
 8018dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e02:	bf00      	nop
 8018e04:	2400b8c6 	.word	0x2400b8c6

08018e08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018e08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e0c:	4698      	mov	r8, r3
 8018e0e:	6803      	ldr	r3, [r0, #0]
 8018e10:	b087      	sub	sp, #28
 8018e12:	460e      	mov	r6, r1
 8018e14:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018e16:	4617      	mov	r7, r2
 8018e18:	4b0f      	ldr	r3, [pc, #60]	; (8018e58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018e1a:	4604      	mov	r4, r0
 8018e1c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018e20:	f7eb fa20 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8018e24:	6803      	ldr	r3, [r0, #0]
 8018e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e28:	4798      	blx	r3
 8018e2a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018e2e:	463a      	mov	r2, r7
 8018e30:	4631      	mov	r1, r6
 8018e32:	f8cd 900c 	str.w	r9, [sp, #12]
 8018e36:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018e3a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018e3e:	4620      	mov	r0, r4
 8018e40:	9302      	str	r3, [sp, #8]
 8018e42:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018e46:	9301      	str	r3, [sp, #4]
 8018e48:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018e4c:	9300      	str	r3, [sp, #0]
 8018e4e:	4643      	mov	r3, r8
 8018e50:	47a8      	blx	r5
 8018e52:	b007      	add	sp, #28
 8018e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e58:	2400b8c6 	.word	0x2400b8c6

08018e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e60:	4604      	mov	r4, r0
 8018e62:	b08f      	sub	sp, #60	; 0x3c
 8018e64:	4610      	mov	r0, r2
 8018e66:	460d      	mov	r5, r1
 8018e68:	4691      	mov	r9, r2
 8018e6a:	461e      	mov	r6, r3
 8018e6c:	f005 ff20 	bl	801ecb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018e70:	2800      	cmp	r0, #0
 8018e72:	f000 809c 	beq.w	8018fae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018e76:	6823      	ldr	r3, [r4, #0]
 8018e78:	4620      	mov	r0, r4
 8018e7a:	f8df b194 	ldr.w	fp, [pc, #404]	; 8019010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8018e7e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018e84:	4798      	blx	r3
 8018e86:	6823      	ldr	r3, [r4, #0]
 8018e88:	4620      	mov	r0, r4
 8018e8a:	f8df a188 	ldr.w	sl, [pc, #392]	; 8019014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e90:	4798      	blx	r3
 8018e92:	f8bb 3000 	ldrh.w	r3, [fp]
 8018e96:	4f5b      	ldr	r7, [pc, #364]	; (8019004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018e98:	9301      	str	r3, [sp, #4]
 8018e9a:	f8ba 3000 	ldrh.w	r3, [sl]
 8018e9e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018ea2:	4640      	mov	r0, r8
 8018ea4:	9302      	str	r3, [sp, #8]
 8018ea6:	883b      	ldrh	r3, [r7, #0]
 8018ea8:	9303      	str	r3, [sp, #12]
 8018eaa:	4b57      	ldr	r3, [pc, #348]	; (8019008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018eac:	881a      	ldrh	r2, [r3, #0]
 8018eae:	9305      	str	r3, [sp, #20]
 8018eb0:	9204      	str	r2, [sp, #16]
 8018eb2:	f005 ffb7 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018eb6:	8038      	strh	r0, [r7, #0]
 8018eb8:	4640      	mov	r0, r8
 8018eba:	f005 ffed 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018ebe:	9b05      	ldr	r3, [sp, #20]
 8018ec0:	8018      	strh	r0, [r3, #0]
 8018ec2:	4b52      	ldr	r3, [pc, #328]	; (801900c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018ec4:	781b      	ldrb	r3, [r3, #0]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d174      	bne.n	8018fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018eca:	883b      	ldrh	r3, [r7, #0]
 8018ecc:	f8aa 0000 	strh.w	r0, [sl]
 8018ed0:	f8ab 3000 	strh.w	r3, [fp]
 8018ed4:	4648      	mov	r0, r9
 8018ed6:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018eda:	f005 fee9 	bl	801ecb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018ede:	2200      	movs	r2, #0
 8018ee0:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018ee4:	4611      	mov	r1, r2
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018eec:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018ef0:	f7eb f8c2 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018efa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018efe:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	dd5c      	ble.n	8018fc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018f06:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	dd58      	ble.n	8018fc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018f0e:	462a      	mov	r2, r5
 8018f10:	ab0a      	add	r3, sp, #40	; 0x28
 8018f12:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018f16:	6851      	ldr	r1, [r2, #4]
 8018f18:	c303      	stmia	r3!, {r0, r1}
 8018f1a:	4631      	mov	r1, r6
 8018f1c:	a80a      	add	r0, sp, #40	; 0x28
 8018f1e:	f7ff f913 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 8018f22:	4b38      	ldr	r3, [pc, #224]	; (8019004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018f24:	2100      	movs	r1, #0
 8018f26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f2a:	4b37      	ldr	r3, [pc, #220]	; (8019008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018f2c:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018f30:	aa0a      	add	r2, sp, #40	; 0x28
 8018f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f36:	910c      	str	r1, [sp, #48]	; 0x30
 8018f38:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018f3c:	ab08      	add	r3, sp, #32
 8018f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f42:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f46:	4618      	mov	r0, r3
 8018f48:	a90c      	add	r1, sp, #48	; 0x30
 8018f4a:	f7ff f8fd 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 8018f4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d13c      	bne.n	8018fce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018f54:	2000      	movs	r0, #0
 8018f56:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018f5a:	2600      	movs	r6, #0
 8018f5c:	696b      	ldr	r3, [r5, #20]
 8018f5e:	a908      	add	r1, sp, #32
 8018f60:	682a      	ldr	r2, [r5, #0]
 8018f62:	4628      	mov	r0, r5
 8018f64:	9305      	str	r3, [sp, #20]
 8018f66:	616e      	str	r6, [r5, #20]
 8018f68:	6892      	ldr	r2, [r2, #8]
 8018f6a:	4790      	blx	r2
 8018f6c:	9b05      	ldr	r3, [sp, #20]
 8018f6e:	4652      	mov	r2, sl
 8018f70:	4649      	mov	r1, r9
 8018f72:	616b      	str	r3, [r5, #20]
 8018f74:	4628      	mov	r0, r5
 8018f76:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018f7a:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018f7e:	f7eb f87b 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 8018f82:	9a01      	ldr	r2, [sp, #4]
 8018f84:	4b22      	ldr	r3, [pc, #136]	; (8019010 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018f86:	4620      	mov	r0, r4
 8018f88:	801a      	strh	r2, [r3, #0]
 8018f8a:	9a02      	ldr	r2, [sp, #8]
 8018f8c:	4b21      	ldr	r3, [pc, #132]	; (8019014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018f8e:	801a      	strh	r2, [r3, #0]
 8018f90:	9a03      	ldr	r2, [sp, #12]
 8018f92:	4b1c      	ldr	r3, [pc, #112]	; (8019004 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018f94:	801a      	strh	r2, [r3, #0]
 8018f96:	4b1c      	ldr	r3, [pc, #112]	; (8019008 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018f98:	9a04      	ldr	r2, [sp, #16]
 8018f9a:	801a      	strh	r2, [r3, #0]
 8018f9c:	6823      	ldr	r3, [r4, #0]
 8018f9e:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fa4:	4798      	blx	r3
 8018fa6:	6823      	ldr	r3, [r4, #0]
 8018fa8:	4620      	mov	r0, r4
 8018faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fac:	4798      	blx	r3
 8018fae:	b00f      	add	sp, #60	; 0x3c
 8018fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb4:	883b      	ldrh	r3, [r7, #0]
 8018fb6:	f8ab 0000 	strh.w	r0, [fp]
 8018fba:	f8aa 3000 	strh.w	r3, [sl]
 8018fbe:	e789      	b.n	8018ed4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8018fc0:	462a      	mov	r2, r5
 8018fc2:	ab0a      	add	r3, sp, #40	; 0x28
 8018fc4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018fc8:	6851      	ldr	r1, [r2, #4]
 8018fca:	c303      	stmia	r3!, {r0, r1}
 8018fcc:	e7a9      	b.n	8018f22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8018fce:	a807      	add	r0, sp, #28
 8018fd0:	f006 f8ba 	bl	801f148 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018fd8:	6803      	ldr	r3, [r0, #0]
 8018fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fdc:	4798      	blx	r3
 8018fde:	4286      	cmp	r6, r0
 8018fe0:	d1b8      	bne.n	8018f54 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8018fe2:	f7eb f93f 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8018fe6:	6803      	ldr	r3, [r0, #0]
 8018fe8:	4606      	mov	r6, r0
 8018fea:	a807      	add	r0, sp, #28
 8018fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fee:	9305      	str	r3, [sp, #20]
 8018ff0:	f006 f8aa 	bl	801f148 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018ff4:	9b05      	ldr	r3, [sp, #20]
 8018ff6:	4601      	mov	r1, r0
 8018ff8:	4630      	mov	r0, r6
 8018ffa:	4798      	blx	r3
 8018ffc:	f080 0001 	eor.w	r0, r0, #1
 8019000:	b2c0      	uxtb	r0, r0
 8019002:	e7a8      	b.n	8018f56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019004:	2400b8c0 	.word	0x2400b8c0
 8019008:	2400b8c2 	.word	0x2400b8c2
 801900c:	2400b8c4 	.word	0x2400b8c4
 8019010:	2400b8c6 	.word	0x2400b8c6
 8019014:	2400b8c8 	.word	0x2400b8c8

08019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019018:	4b07      	ldr	r3, [pc, #28]	; (8019038 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801901a:	b510      	push	{r4, lr}
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	4604      	mov	r4, r0
 8019020:	b13b      	cbz	r3, 8019032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019022:	6803      	ldr	r3, [r0, #0]
 8019024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019026:	4798      	blx	r3
 8019028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801902a:	4283      	cmp	r3, r0
 801902c:	d101      	bne.n	8019032 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801902e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8019030:	bd10      	pop	{r4, pc}
 8019032:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019034:	e7fc      	b.n	8019030 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019036:	bf00      	nop
 8019038:	2400b8ca 	.word	0x2400b8ca

0801903c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801903c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019040:	b088      	sub	sp, #32
 8019042:	4692      	mov	sl, r2
 8019044:	461d      	mov	r5, r3
 8019046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801904a:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801904e:	2400      	movs	r4, #0
 8019050:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8019054:	4606      	mov	r6, r0
 8019056:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 801905a:	fb09 a505 	mla	r5, r9, r5, sl
 801905e:	9403      	str	r4, [sp, #12]
 8019060:	f8ad 8014 	strh.w	r8, [sp, #20]
 8019064:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019068:	f88d 401c 	strb.w	r4, [sp, #28]
 801906c:	e9cd 3100 	strd	r3, r1, [sp]
 8019070:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019074:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019078:	f7ff ffce 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801907c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019080:	f8ad 901a 	strh.w	r9, [sp, #26]
 8019084:	f88d 401e 	strb.w	r4, [sp, #30]
 8019088:	9504      	str	r5, [sp, #16]
 801908a:	f88d 401d 	strb.w	r4, [sp, #29]
 801908e:	f88d 401f 	strb.w	r4, [sp, #31]
 8019092:	f1b8 0f00 	cmp.w	r8, #0
 8019096:	d000      	beq.n	801909a <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8019098:	b937      	cbnz	r7, 80190a8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 801909a:	4b0d      	ldr	r3, [pc, #52]	; (80190d0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 801909c:	f240 210b 	movw	r1, #523	; 0x20b
 80190a0:	4a0c      	ldr	r2, [pc, #48]	; (80190d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80190a2:	480d      	ldr	r0, [pc, #52]	; (80190d8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 80190a4:	f011 ff30 	bl	802af08 <__assert_func>
 80190a8:	6833      	ldr	r3, [r6, #0]
 80190aa:	4630      	mov	r0, r6
 80190ac:	9c00      	ldr	r4, [sp, #0]
 80190ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80190b0:	4798      	blx	r3
 80190b2:	4220      	tst	r0, r4
 80190b4:	d104      	bne.n	80190c0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 80190b6:	4b09      	ldr	r3, [pc, #36]	; (80190dc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 80190b8:	f44f 7103 	mov.w	r1, #524	; 0x20c
 80190bc:	4a05      	ldr	r2, [pc, #20]	; (80190d4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 80190be:	e7f0      	b.n	80190a2 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 80190c0:	6870      	ldr	r0, [r6, #4]
 80190c2:	4669      	mov	r1, sp
 80190c4:	6803      	ldr	r3, [r0, #0]
 80190c6:	685b      	ldr	r3, [r3, #4]
 80190c8:	4798      	blx	r3
 80190ca:	b008      	add	sp, #32
 80190cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190d0:	0802e399 	.word	0x0802e399
 80190d4:	0802e6cc 	.word	0x0802e6cc
 80190d8:	0802e54b 	.word	0x0802e54b
 80190dc:	0802e3d1 	.word	0x0802e3d1

080190e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80190e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190e4:	b089      	sub	sp, #36	; 0x24
 80190e6:	4693      	mov	fp, r2
 80190e8:	461d      	mov	r5, r3
 80190ea:	2400      	movs	r4, #0
 80190ec:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 80190f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80190f4:	468a      	mov	sl, r1
 80190f6:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 80190fa:	fb09 b505 	mla	r5, r9, r5, fp
 80190fe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8019102:	4606      	mov	r6, r0
 8019104:	9403      	str	r4, [sp, #12]
 8019106:	e9cd 3400 	strd	r3, r4, [sp]
 801910a:	f7ff ff85 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801910e:	f8ad 8014 	strh.w	r8, [sp, #20]
 8019112:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019116:	f8ad 7016 	strh.w	r7, [sp, #22]
 801911a:	f8ad 4018 	strh.w	r4, [sp, #24]
 801911e:	9504      	str	r5, [sp, #16]
 8019120:	f8ad 901a 	strh.w	r9, [sp, #26]
 8019124:	f8cd a00c 	str.w	sl, [sp, #12]
 8019128:	f8ad 401c 	strh.w	r4, [sp, #28]
 801912c:	f88d 401e 	strb.w	r4, [sp, #30]
 8019130:	f88d 401f 	strb.w	r4, [sp, #31]
 8019134:	f1b8 0f00 	cmp.w	r8, #0
 8019138:	d000      	beq.n	801913c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 801913a:	b937      	cbnz	r7, 801914a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 801913c:	4b0d      	ldr	r3, [pc, #52]	; (8019174 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 801913e:	f240 2121 	movw	r1, #545	; 0x221
 8019142:	4a0d      	ldr	r2, [pc, #52]	; (8019178 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8019144:	480d      	ldr	r0, [pc, #52]	; (801917c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8019146:	f011 fedf 	bl	802af08 <__assert_func>
 801914a:	6833      	ldr	r3, [r6, #0]
 801914c:	4630      	mov	r0, r6
 801914e:	9c00      	ldr	r4, [sp, #0]
 8019150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019152:	4798      	blx	r3
 8019154:	4220      	tst	r0, r4
 8019156:	d104      	bne.n	8019162 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8019158:	4b09      	ldr	r3, [pc, #36]	; (8019180 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 801915a:	f240 2122 	movw	r1, #546	; 0x222
 801915e:	4a06      	ldr	r2, [pc, #24]	; (8019178 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8019160:	e7f0      	b.n	8019144 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8019162:	6870      	ldr	r0, [r6, #4]
 8019164:	4669      	mov	r1, sp
 8019166:	6803      	ldr	r3, [r0, #0]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	4798      	blx	r3
 801916c:	b009      	add	sp, #36	; 0x24
 801916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019172:	bf00      	nop
 8019174:	0802e416 	.word	0x0802e416
 8019178:	0802e742 	.word	0x0802e742
 801917c:	0802e54b 	.word	0x0802e54b
 8019180:	0802e44e 	.word	0x0802e44e

08019184 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019184:	b508      	push	{r3, lr}
 8019186:	290d      	cmp	r1, #13
 8019188:	d817      	bhi.n	80191ba <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801918a:	e8df f001 	tbb	[pc, r1]
 801918e:	090b      	.short	0x090b
 8019190:	0d0d0d07 	.word	0x0d0d0d07
 8019194:	1414140d 	.word	0x1414140d
 8019198:	0d0d1414 	.word	0x0d0d1414
 801919c:	2020      	movs	r0, #32
 801919e:	bd08      	pop	{r3, pc}
 80191a0:	2018      	movs	r0, #24
 80191a2:	e7fc      	b.n	801919e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80191a4:	2010      	movs	r0, #16
 80191a6:	e7fa      	b.n	801919e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80191a8:	4b05      	ldr	r3, [pc, #20]	; (80191c0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 80191aa:	f240 2182 	movw	r1, #642	; 0x282
 80191ae:	4a05      	ldr	r2, [pc, #20]	; (80191c4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 80191b0:	4805      	ldr	r0, [pc, #20]	; (80191c8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 80191b2:	f011 fea9 	bl	802af08 <__assert_func>
 80191b6:	2008      	movs	r0, #8
 80191b8:	e7f1      	b.n	801919e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80191ba:	2000      	movs	r0, #0
 80191bc:	e7ef      	b.n	801919e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80191be:	bf00      	nop
 80191c0:	0802e5c7 	.word	0x0802e5c7
 80191c4:	0802ea6d 	.word	0x0802ea6d
 80191c8:	0802e54b 	.word	0x0802e54b

080191cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80191cc:	b570      	push	{r4, r5, r6, lr}
 80191ce:	460d      	mov	r5, r1
 80191d0:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80191d4:	4616      	mov	r6, r2
 80191d6:	461c      	mov	r4, r3
 80191d8:	f7ff ffd4 	bl	8019184 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80191dc:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80191e0:	10c0      	asrs	r0, r0, #3
 80191e2:	fb06 5101 	mla	r1, r6, r1, r5
 80191e6:	fb00 4001 	mla	r0, r0, r1, r4
 80191ea:	bd70      	pop	{r4, r5, r6, pc}

080191ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80191ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191f0:	b08a      	sub	sp, #40	; 0x28
 80191f2:	f04f 0c00 	mov.w	ip, #0
 80191f6:	4604      	mov	r4, r0
 80191f8:	469a      	mov	sl, r3
 80191fa:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80191fe:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8019202:	2d0b      	cmp	r5, #11
 8019204:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8019208:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801920c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8019210:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8019214:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8019218:	f8cd c014 	str.w	ip, [sp, #20]
 801921c:	d12d      	bne.n	801927a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801921e:	2080      	movs	r0, #128	; 0x80
 8019220:	9204      	str	r2, [sp, #16]
 8019222:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8019226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801922a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801922e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8019232:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019236:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801923a:	4620      	mov	r0, r4
 801923c:	f7ff feec 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019240:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8019244:	4603      	mov	r3, r0
 8019246:	4651      	mov	r1, sl
 8019248:	4620      	mov	r0, r4
 801924a:	e9cd 9800 	strd	r9, r8, [sp]
 801924e:	f7ff ffbd 	bl	80191cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019252:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8019256:	9006      	str	r0, [sp, #24]
 8019258:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 801925c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8019260:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8019264:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8019268:	b107      	cbz	r7, 801926c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 801926a:	b9d6      	cbnz	r6, 80192a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 801926c:	4b17      	ldr	r3, [pc, #92]	; (80192cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 801926e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8019272:	4a17      	ldr	r2, [pc, #92]	; (80192d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8019274:	4817      	ldr	r0, [pc, #92]	; (80192d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8019276:	f011 fe47 	bl	802af08 <__assert_func>
 801927a:	2d02      	cmp	r5, #2
 801927c:	d108      	bne.n	8019290 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 801927e:	2bff      	cmp	r3, #255	; 0xff
 8019280:	d104      	bne.n	801928c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 8019282:	2800      	cmp	r0, #0
 8019284:	bf14      	ite	ne
 8019286:	2040      	movne	r0, #64	; 0x40
 8019288:	2020      	moveq	r0, #32
 801928a:	e7c9      	b.n	8019220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801928c:	2040      	movs	r0, #64	; 0x40
 801928e:	e7c7      	b.n	8019220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019290:	2bff      	cmp	r3, #255	; 0xff
 8019292:	d104      	bne.n	801929e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 8019294:	2800      	cmp	r0, #0
 8019296:	bf14      	ite	ne
 8019298:	2004      	movne	r0, #4
 801929a:	2001      	moveq	r0, #1
 801929c:	e7c0      	b.n	8019220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801929e:	2004      	movs	r0, #4
 80192a0:	e7be      	b.n	8019220 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80192a2:	6823      	ldr	r3, [r4, #0]
 80192a4:	4620      	mov	r0, r4
 80192a6:	9d02      	ldr	r5, [sp, #8]
 80192a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192aa:	4798      	blx	r3
 80192ac:	4228      	tst	r0, r5
 80192ae:	d104      	bne.n	80192ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 80192b0:	4b09      	ldr	r3, [pc, #36]	; (80192d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 80192b2:	f240 11d5 	movw	r1, #469	; 0x1d5
 80192b6:	4a06      	ldr	r2, [pc, #24]	; (80192d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80192b8:	e7dc      	b.n	8019274 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 80192ba:	6860      	ldr	r0, [r4, #4]
 80192bc:	a902      	add	r1, sp, #8
 80192be:	6803      	ldr	r3, [r0, #0]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	4798      	blx	r3
 80192c4:	b00a      	add	sp, #40	; 0x28
 80192c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ca:	bf00      	nop
 80192cc:	0802e399 	.word	0x0802e399
 80192d0:	0802e8fb 	.word	0x0802e8fb
 80192d4:	0802e54b 	.word	0x0802e54b
 80192d8:	0802e3d1 	.word	0x0802e3d1

080192dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80192dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192e0:	b08b      	sub	sp, #44	; 0x2c
 80192e2:	469b      	mov	fp, r3
 80192e4:	4604      	mov	r4, r0
 80192e6:	4692      	mov	sl, r2
 80192e8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80192ec:	2600      	movs	r6, #0
 80192ee:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80192f2:	4689      	mov	r9, r1
 80192f4:	2fff      	cmp	r7, #255	; 0xff
 80192f6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80192fa:	9605      	str	r6, [sp, #20]
 80192fc:	bf14      	ite	ne
 80192fe:	2308      	movne	r3, #8
 8019300:	2302      	moveq	r3, #2
 8019302:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019306:	f7ff fe87 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801930a:	465a      	mov	r2, fp
 801930c:	4603      	mov	r3, r0
 801930e:	4651      	mov	r1, sl
 8019310:	4620      	mov	r0, r4
 8019312:	e9cd 8500 	strd	r8, r5, [sp]
 8019316:	f7ff ff59 	bl	80191cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801931a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801931e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8019322:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019326:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801932a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801932e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019332:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8019336:	9d02      	ldr	r5, [sp, #8]
 8019338:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 801933c:	6823      	ldr	r3, [r4, #0]
 801933e:	9006      	str	r0, [sp, #24]
 8019340:	4620      	mov	r0, r4
 8019342:	f8ad 6020 	strh.w	r6, [sp, #32]
 8019346:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801934a:	f8cd 9014 	str.w	r9, [sp, #20]
 801934e:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8019352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019354:	4798      	blx	r3
 8019356:	4228      	tst	r0, r5
 8019358:	d106      	bne.n	8019368 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 801935a:	4b07      	ldr	r3, [pc, #28]	; (8019378 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 801935c:	f240 2137 	movw	r1, #567	; 0x237
 8019360:	4a06      	ldr	r2, [pc, #24]	; (801937c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 8019362:	4807      	ldr	r0, [pc, #28]	; (8019380 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8019364:	f011 fdd0 	bl	802af08 <__assert_func>
 8019368:	6860      	ldr	r0, [r4, #4]
 801936a:	a902      	add	r1, sp, #8
 801936c:	6803      	ldr	r3, [r0, #0]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	4798      	blx	r3
 8019372:	b00b      	add	sp, #44	; 0x2c
 8019374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019378:	0802e3d1 	.word	0x0802e3d1
 801937c:	0802e9d2 	.word	0x0802e9d2
 8019380:	0802e54b 	.word	0x0802e54b

08019384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019384:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8019388:	461f      	mov	r7, r3
 801938a:	4b0b      	ldr	r3, [pc, #44]	; (80193b8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801938c:	460d      	mov	r5, r1
 801938e:	4616      	mov	r6, r2
 8019390:	f8b3 8000 	ldrh.w	r8, [r3]
 8019394:	4604      	mov	r4, r0
 8019396:	f7ea ff65 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 801939a:	6803      	ldr	r3, [r0, #0]
 801939c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801939e:	4798      	blx	r3
 80193a0:	463b      	mov	r3, r7
 80193a2:	4632      	mov	r2, r6
 80193a4:	4629      	mov	r1, r5
 80193a6:	e9cd 8000 	strd	r8, r0, [sp]
 80193aa:	4620      	mov	r0, r4
 80193ac:	f7ff ff0e 	bl	80191cc <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80193b0:	b002      	add	sp, #8
 80193b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b6:	bf00      	nop
 80193b8:	2400b8c6 	.word	0x2400b8c6

080193bc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80193bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193c0:	4698      	mov	r8, r3
 80193c2:	b088      	sub	sp, #32
 80193c4:	2300      	movs	r3, #0
 80193c6:	4617      	mov	r7, r2
 80193c8:	4604      	mov	r4, r0
 80193ca:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80193ce:	9303      	str	r3, [sp, #12]
 80193d0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80193d4:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80193d8:	f8ad 6014 	strh.w	r6, [sp, #20]
 80193dc:	f8ad 5016 	strh.w	r5, [sp, #22]
 80193e0:	e9cd 3100 	strd	r3, r1, [sp]
 80193e4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80193e8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80193ec:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80193f0:	f88d 301c 	strb.w	r3, [sp, #28]
 80193f4:	f7ff fe10 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80193f8:	4642      	mov	r2, r8
 80193fa:	4603      	mov	r3, r0
 80193fc:	4639      	mov	r1, r7
 80193fe:	4620      	mov	r0, r4
 8019400:	f7ff ffc0 	bl	8019384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019404:	4b18      	ldr	r3, [pc, #96]	; (8019468 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8019406:	9004      	str	r0, [sp, #16]
 8019408:	881b      	ldrh	r3, [r3, #0]
 801940a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801940e:	f7ea ff29 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8019412:	6803      	ldr	r3, [r0, #0]
 8019414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019416:	4798      	blx	r3
 8019418:	f88d 001e 	strb.w	r0, [sp, #30]
 801941c:	f88d 001d 	strb.w	r0, [sp, #29]
 8019420:	b106      	cbz	r6, 8019424 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8019422:	b935      	cbnz	r5, 8019432 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8019424:	4b11      	ldr	r3, [pc, #68]	; (801946c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8019426:	f240 11f1 	movw	r1, #497	; 0x1f1
 801942a:	4a11      	ldr	r2, [pc, #68]	; (8019470 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801942c:	4811      	ldr	r0, [pc, #68]	; (8019474 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801942e:	f011 fd6b 	bl	802af08 <__assert_func>
 8019432:	6823      	ldr	r3, [r4, #0]
 8019434:	4620      	mov	r0, r4
 8019436:	9d00      	ldr	r5, [sp, #0]
 8019438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801943a:	4798      	blx	r3
 801943c:	4228      	tst	r0, r5
 801943e:	d104      	bne.n	801944a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 8019440:	4b0d      	ldr	r3, [pc, #52]	; (8019478 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 8019442:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8019446:	4a0a      	ldr	r2, [pc, #40]	; (8019470 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8019448:	e7f0      	b.n	801942c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 801944a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801944c:	4669      	mov	r1, sp
 801944e:	6860      	ldr	r0, [r4, #4]
 8019450:	9303      	str	r3, [sp, #12]
 8019452:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019456:	f88d 301f 	strb.w	r3, [sp, #31]
 801945a:	6803      	ldr	r3, [r0, #0]
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	4798      	blx	r3
 8019460:	b008      	add	sp, #32
 8019462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019466:	bf00      	nop
 8019468:	2400b8c6 	.word	0x2400b8c6
 801946c:	0802e399 	.word	0x0802e399
 8019470:	0802e7a7 	.word	0x0802e7a7
 8019474:	0802e54b 	.word	0x0802e54b
 8019478:	0802e3d1 	.word	0x0802e3d1

0801947c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801947e:	b08b      	sub	sp, #44	; 0x2c
 8019480:	4604      	mov	r4, r0
 8019482:	466b      	mov	r3, sp
 8019484:	e883 0006 	stmia.w	r3, {r1, r2}
 8019488:	4b20      	ldr	r3, [pc, #128]	; (801950c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 801948a:	781b      	ldrb	r3, [r3, #0]
 801948c:	b933      	cbnz	r3, 801949c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801948e:	4b20      	ldr	r3, [pc, #128]	; (8019510 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019490:	f44f 7112 	mov.w	r1, #584	; 0x248
 8019494:	4a1f      	ldr	r2, [pc, #124]	; (8019514 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019496:	4820      	ldr	r0, [pc, #128]	; (8019518 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019498:	f011 fd36 	bl	802af08 <__assert_func>
 801949c:	2301      	movs	r3, #1
 801949e:	2500      	movs	r5, #0
 80194a0:	f8bd 6000 	ldrh.w	r6, [sp]
 80194a4:	9302      	str	r3, [sp, #8]
 80194a6:	6803      	ldr	r3, [r0, #0]
 80194a8:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80194ac:	9505      	str	r5, [sp, #20]
 80194ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194b0:	4798      	blx	r3
 80194b2:	463a      	mov	r2, r7
 80194b4:	4631      	mov	r1, r6
 80194b6:	4603      	mov	r3, r0
 80194b8:	4620      	mov	r0, r4
 80194ba:	f7ff ff63 	bl	8019384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80194be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80194c0:	9003      	str	r0, [sp, #12]
 80194c2:	9306      	str	r3, [sp, #24]
 80194c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80194c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80194cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80194d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80194d4:	4b11      	ldr	r3, [pc, #68]	; (801951c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 80194d6:	881b      	ldrh	r3, [r3, #0]
 80194d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80194dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80194e0:	f7ea fec0 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 80194e4:	6803      	ldr	r3, [r0, #0]
 80194e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194e8:	4798      	blx	r3
 80194ea:	23ff      	movs	r3, #255	; 0xff
 80194ec:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80194f0:	a902      	add	r1, sp, #8
 80194f2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 80194f6:	6860      	ldr	r0, [r4, #4]
 80194f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80194fc:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 8019500:	6803      	ldr	r3, [r0, #0]
 8019502:	685b      	ldr	r3, [r3, #4]
 8019504:	4798      	blx	r3
 8019506:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019508:	b00b      	add	sp, #44	; 0x2c
 801950a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801950c:	2400b8cb 	.word	0x2400b8cb
 8019510:	0802e498 	.word	0x0802e498
 8019514:	0802e851 	.word	0x0802e851
 8019518:	0802e54b 	.word	0x0802e54b
 801951c:	2400b8c6 	.word	0x2400b8c6

08019520 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019524:	b08a      	sub	sp, #40	; 0x28
 8019526:	2600      	movs	r6, #0
 8019528:	4604      	mov	r4, r0
 801952a:	466d      	mov	r5, sp
 801952c:	9605      	str	r6, [sp, #20]
 801952e:	e885 0006 	stmia.w	r5, {r1, r2}
 8019532:	461d      	mov	r5, r3
 8019534:	2301      	movs	r3, #1
 8019536:	f8bd 7000 	ldrh.w	r7, [sp]
 801953a:	9302      	str	r3, [sp, #8]
 801953c:	6803      	ldr	r3, [r0, #0]
 801953e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8019542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019544:	4798      	blx	r3
 8019546:	4642      	mov	r2, r8
 8019548:	4639      	mov	r1, r7
 801954a:	4603      	mov	r3, r0
 801954c:	4620      	mov	r0, r4
 801954e:	f7ff ff19 	bl	8019384 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019552:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019556:	9003      	str	r0, [sp, #12]
 8019558:	f8ad 301c 	strh.w	r3, [sp, #28]
 801955c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019560:	9506      	str	r5, [sp, #24]
 8019562:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019566:	4b0f      	ldr	r3, [pc, #60]	; (80195a4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8019568:	881b      	ldrh	r3, [r3, #0]
 801956a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801956e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019570:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019574:	f7ea fe76 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 8019578:	6803      	ldr	r3, [r0, #0]
 801957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801957c:	4798      	blx	r3
 801957e:	23ff      	movs	r3, #255	; 0xff
 8019580:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019584:	a902      	add	r1, sp, #8
 8019586:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 801958a:	6860      	ldr	r0, [r4, #4]
 801958c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019590:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 8019594:	6803      	ldr	r3, [r0, #0]
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	4798      	blx	r3
 801959a:	4628      	mov	r0, r5
 801959c:	b00a      	add	sp, #40	; 0x28
 801959e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195a2:	bf00      	nop
 80195a4:	2400b8c6 	.word	0x2400b8c6

080195a8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80195a8:	b570      	push	{r4, r5, r6, lr}
 80195aa:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80195ae:	4604      	mov	r4, r0
 80195b0:	b19b      	cbz	r3, 80195da <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80195b2:	2002      	movs	r0, #2
 80195b4:	f7e8 fa42 	bl	8001a3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80195b8:	2300      	movs	r3, #0
 80195ba:	4620      	mov	r0, r4
 80195bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80195c0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80195c4:	6823      	ldr	r3, [r4, #0]
 80195c6:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80195ca:	f7ff fd25 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80195ce:	4601      	mov	r1, r0
 80195d0:	4620      	mov	r0, r4
 80195d2:	462b      	mov	r3, r5
 80195d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80195d8:	4718      	bx	r3
 80195da:	bd70      	pop	{r4, r5, r6, pc}

080195dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 80195dc:	b538      	push	{r3, r4, r5, lr}
 80195de:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 80195e2:	4604      	mov	r4, r0
 80195e4:	460d      	mov	r5, r1
 80195e6:	428a      	cmp	r2, r1
 80195e8:	d008      	beq.n	80195fc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 80195ea:	2a01      	cmp	r2, #1
 80195ec:	6803      	ldr	r3, [r0, #0]
 80195ee:	d106      	bne.n	80195fe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80195f0:	b929      	cbnz	r1, 80195fe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 80195f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80195f6:	4798      	blx	r3
 80195f8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80195fc:	bd38      	pop	{r3, r4, r5, pc}
 80195fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019602:	4620      	mov	r0, r4
 8019604:	e7f7      	b.n	80195f6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08019608 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019608:	4b0d      	ldr	r3, [pc, #52]	; (8019640 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801960a:	b510      	push	{r4, lr}
 801960c:	781b      	ldrb	r3, [r3, #0]
 801960e:	4604      	mov	r4, r0
 8019610:	b95b      	cbnz	r3, 801962a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019612:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8019616:	2b02      	cmp	r3, #2
 8019618:	d007      	beq.n	801962a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801961a:	6840      	ldr	r0, [r0, #4]
 801961c:	f000 f936 	bl	801988c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019620:	b118      	cbz	r0, 801962a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019622:	6862      	ldr	r2, [r4, #4]
 8019624:	7a53      	ldrb	r3, [r2, #9]
 8019626:	2b00      	cmp	r3, #0
 8019628:	d0fc      	beq.n	8019624 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801962a:	f7e8 fcc5 	bl	8001fb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801962e:	4620      	mov	r0, r4
 8019630:	2100      	movs	r1, #0
 8019632:	f7ff ffd3 	bl	80195dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019636:	4620      	mov	r0, r4
 8019638:	f7ff fcee 	bl	8019018 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801963c:	bd10      	pop	{r4, pc}
 801963e:	bf00      	nop
 8019640:	2400b8ca 	.word	0x2400b8ca

08019644 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019644:	4770      	bx	lr

08019646 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8019646:	2000      	movs	r0, #0
 8019648:	4770      	bx	lr

0801964a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801964a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801964e:	1a13      	subs	r3, r2, r0
 8019650:	4258      	negs	r0, r3
 8019652:	4158      	adcs	r0, r3
 8019654:	4770      	bx	lr

08019656 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019656:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801965a:	1a9b      	subs	r3, r3, r2
 801965c:	2b00      	cmp	r3, #0
 801965e:	bfdc      	itt	le
 8019660:	6882      	ldrle	r2, [r0, #8]
 8019662:	189b      	addle	r3, r3, r2
 8019664:	2b01      	cmp	r3, #1
 8019666:	bfcc      	ite	gt
 8019668:	2000      	movgt	r0, #0
 801966a:	2001      	movle	r0, #1
 801966c:	4770      	bx	lr

0801966e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801966e:	6902      	ldr	r2, [r0, #16]
 8019670:	6840      	ldr	r0, [r0, #4]
 8019672:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019676:	4770      	bx	lr

08019678 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019678:	6803      	ldr	r3, [r0, #0]
 801967a:	691b      	ldr	r3, [r3, #16]
 801967c:	4718      	bx	r3

0801967e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801967e:	4770      	bx	lr

08019680 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019680:	4770      	bx	lr
	...

08019684 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019684:	2301      	movs	r3, #1
 8019686:	b570      	push	{r4, r5, r6, lr}
 8019688:	7203      	strb	r3, [r0, #8]
 801968a:	4604      	mov	r4, r0
 801968c:	6840      	ldr	r0, [r0, #4]
 801968e:	6803      	ldr	r3, [r0, #0]
 8019690:	699b      	ldr	r3, [r3, #24]
 8019692:	4798      	blx	r3
 8019694:	6803      	ldr	r3, [r0, #0]
 8019696:	4605      	mov	r5, r0
 8019698:	2b40      	cmp	r3, #64	; 0x40
 801969a:	d039      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801969c:	d815      	bhi.n	80196ca <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801969e:	2b04      	cmp	r3, #4
 80196a0:	d022      	beq.n	80196e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80196a2:	d808      	bhi.n	80196b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d033      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196a8:	2b02      	cmp	r3, #2
 80196aa:	d108      	bne.n	80196be <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80196ac:	6823      	ldr	r3, [r4, #0]
 80196ae:	4620      	mov	r0, r4
 80196b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196b2:	4798      	blx	r3
 80196b4:	e025      	b.n	8019702 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80196b6:	2b08      	cmp	r3, #8
 80196b8:	d01e      	beq.n	80196f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80196ba:	2b20      	cmp	r3, #32
 80196bc:	d028      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196be:	4b17      	ldr	r3, [pc, #92]	; (801971c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80196c0:	218b      	movs	r1, #139	; 0x8b
 80196c2:	4a17      	ldr	r2, [pc, #92]	; (8019720 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80196c4:	4817      	ldr	r0, [pc, #92]	; (8019724 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80196c6:	f011 fc1f 	bl	802af08 <__assert_func>
 80196ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80196ce:	d01f      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196d0:	d804      	bhi.n	80196dc <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 80196d2:	2b80      	cmp	r3, #128	; 0x80
 80196d4:	d01c      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80196da:	e7ef      	b.n	80196bc <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 80196dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80196e0:	d016      	beq.n	8019710 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80196e6:	e7e0      	b.n	80196aa <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	7f01      	ldrb	r1, [r0, #28]
 80196ec:	4620      	mov	r0, r4
 80196ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196f0:	4798      	blx	r3
 80196f2:	6823      	ldr	r3, [r4, #0]
 80196f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196f6:	e006      	b.n	8019706 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	7f01      	ldrb	r1, [r0, #28]
 80196fc:	4620      	mov	r0, r4
 80196fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019700:	4798      	blx	r3
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019706:	4629      	mov	r1, r5
 8019708:	4620      	mov	r0, r4
 801970a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801970e:	4718      	bx	r3
 8019710:	6823      	ldr	r3, [r4, #0]
 8019712:	4620      	mov	r0, r4
 8019714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019716:	4798      	blx	r3
 8019718:	e7eb      	b.n	80196f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801971a:	bf00      	nop
 801971c:	0802eab6 	.word	0x0802eab6
 8019720:	0802ebc8 	.word	0x0802ebc8
 8019724:	0802eadb 	.word	0x0802eadb

08019728 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019728:	b570      	push	{r4, r5, r6, lr}
 801972a:	4604      	mov	r4, r0
 801972c:	460e      	mov	r6, r1
 801972e:	6860      	ldr	r0, [r4, #4]
 8019730:	6803      	ldr	r3, [r0, #0]
 8019732:	685b      	ldr	r3, [r3, #4]
 8019734:	4798      	blx	r3
 8019736:	2800      	cmp	r0, #0
 8019738:	d1f9      	bne.n	801972e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801973a:	4d0d      	ldr	r5, [pc, #52]	; (8019770 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801973c:	6828      	ldr	r0, [r5, #0]
 801973e:	6803      	ldr	r3, [r0, #0]
 8019740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019742:	4798      	blx	r3
 8019744:	f7e8 fc52 	bl	8001fec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019748:	6828      	ldr	r0, [r5, #0]
 801974a:	2101      	movs	r1, #1
 801974c:	f7ff ff46 	bl	80195dc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019750:	6860      	ldr	r0, [r4, #4]
 8019752:	4631      	mov	r1, r6
 8019754:	6803      	ldr	r3, [r0, #0]
 8019756:	689b      	ldr	r3, [r3, #8]
 8019758:	4798      	blx	r3
 801975a:	6823      	ldr	r3, [r4, #0]
 801975c:	4620      	mov	r0, r4
 801975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019760:	4798      	blx	r3
 8019762:	6828      	ldr	r0, [r5, #0]
 8019764:	6803      	ldr	r3, [r0, #0]
 8019766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801976a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801976c:	4718      	bx	r3
 801976e:	bf00      	nop
 8019770:	2400b8cc 	.word	0x2400b8cc

08019774 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019774:	b508      	push	{r3, lr}
 8019776:	f7e8 fc1f 	bl	8001fb8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801977a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801977e:	f7e8 bc29 	b.w	8001fd4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019782 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019782:	b510      	push	{r4, lr}
 8019784:	4604      	mov	r4, r0
 8019786:	6840      	ldr	r0, [r0, #4]
 8019788:	6803      	ldr	r3, [r0, #0]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4798      	blx	r3
 801978e:	b948      	cbnz	r0, 80197a4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019790:	7a63      	ldrb	r3, [r4, #9]
 8019792:	b13b      	cbz	r3, 80197a4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019794:	7a23      	ldrb	r3, [r4, #8]
 8019796:	b92b      	cbnz	r3, 80197a4 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019798:	6823      	ldr	r3, [r4, #0]
 801979a:	4620      	mov	r0, r4
 801979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197a2:	4718      	bx	r3
 80197a4:	bd10      	pop	{r4, pc}
	...

080197a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80197a8:	b570      	push	{r4, r5, r6, lr}
 80197aa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80197ae:	4606      	mov	r6, r0
 80197b0:	1a9b      	subs	r3, r3, r2
 80197b2:	2b00      	cmp	r3, #0
 80197b4:	bfdc      	itt	le
 80197b6:	6880      	ldrle	r0, [r0, #8]
 80197b8:	181b      	addle	r3, r3, r0
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	dd13      	ble.n	80197e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 80197be:	6874      	ldr	r4, [r6, #4]
 80197c0:	460d      	mov	r5, r1
 80197c2:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 80197c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80197ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80197d2:	68f3      	ldr	r3, [r6, #12]
 80197d4:	68b2      	ldr	r2, [r6, #8]
 80197d6:	f3bf 8f5b 	dmb	ish
 80197da:	3301      	adds	r3, #1
 80197dc:	429a      	cmp	r2, r3
 80197de:	bfd8      	it	le
 80197e0:	1a9b      	suble	r3, r3, r2
 80197e2:	60f3      	str	r3, [r6, #12]
 80197e4:	bd70      	pop	{r4, r5, r6, pc}
 80197e6:	4b03      	ldr	r3, [pc, #12]	; (80197f4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 80197e8:	2139      	movs	r1, #57	; 0x39
 80197ea:	4a03      	ldr	r2, [pc, #12]	; (80197f8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 80197ec:	4803      	ldr	r0, [pc, #12]	; (80197fc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 80197ee:	f011 fb8b 	bl	802af08 <__assert_func>
 80197f2:	bf00      	nop
 80197f4:	0802eb01 	.word	0x0802eb01
 80197f8:	0802ebf8 	.word	0x0802ebf8
 80197fc:	0802eadb 	.word	0x0802eadb

08019800 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019800:	b510      	push	{r4, lr}
 8019802:	6803      	ldr	r3, [r0, #0]
 8019804:	4604      	mov	r4, r0
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	4798      	blx	r3
 801980a:	b128      	cbz	r0, 8019818 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801980c:	4b07      	ldr	r3, [pc, #28]	; (801982c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801980e:	213f      	movs	r1, #63	; 0x3f
 8019810:	4a07      	ldr	r2, [pc, #28]	; (8019830 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019812:	4808      	ldr	r0, [pc, #32]	; (8019834 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019814:	f011 fb78 	bl	802af08 <__assert_func>
 8019818:	6923      	ldr	r3, [r4, #16]
 801981a:	68a2      	ldr	r2, [r4, #8]
 801981c:	f3bf 8f5b 	dmb	ish
 8019820:	3301      	adds	r3, #1
 8019822:	429a      	cmp	r2, r3
 8019824:	bfd8      	it	le
 8019826:	1a9b      	suble	r3, r3, r2
 8019828:	6123      	str	r3, [r4, #16]
 801982a:	bd10      	pop	{r4, pc}
 801982c:	0802eb24 	.word	0x0802eb24
 8019830:	0802ec46 	.word	0x0802ec46
 8019834:	0802eadb 	.word	0x0802eadb

08019838 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019838:	b570      	push	{r4, r5, r6, lr}
 801983a:	4604      	mov	r4, r0
 801983c:	6840      	ldr	r0, [r0, #4]
 801983e:	6803      	ldr	r3, [r0, #0]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	4798      	blx	r3
 8019844:	4605      	mov	r5, r0
 8019846:	b930      	cbnz	r0, 8019856 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8019848:	7a23      	ldrb	r3, [r4, #8]
 801984a:	b123      	cbz	r3, 8019856 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801984c:	6860      	ldr	r0, [r4, #4]
 801984e:	6803      	ldr	r3, [r0, #0]
 8019850:	695b      	ldr	r3, [r3, #20]
 8019852:	4798      	blx	r3
 8019854:	7225      	strb	r5, [r4, #8]
 8019856:	6860      	ldr	r0, [r4, #4]
 8019858:	6803      	ldr	r3, [r0, #0]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	4798      	blx	r3
 801985e:	b928      	cbnz	r0, 801986c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8019860:	6823      	ldr	r3, [r4, #0]
 8019862:	4620      	mov	r0, r4
 8019864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019866:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801986a:	4718      	bx	r3
 801986c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019870:	f7e8 bbc8 	b.w	8002004 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08019874 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019874:	b510      	push	{r4, lr}
 8019876:	6082      	str	r2, [r0, #8]
 8019878:	2200      	movs	r2, #0
 801987a:	4c03      	ldr	r4, [pc, #12]	; (8019888 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801987c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019880:	e9c0 4100 	strd	r4, r1, [r0]
 8019884:	bd10      	pop	{r4, pc}
 8019886:	bf00      	nop
 8019888:	0802ebac 	.word	0x0802ebac

0801988c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801988c:	6840      	ldr	r0, [r0, #4]
 801988e:	6803      	ldr	r3, [r0, #0]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	4718      	bx	r3

08019894 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8019894:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8019898:	4770      	bx	lr

0801989a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801989a:	b510      	push	{r4, lr}
 801989c:	4604      	mov	r4, r0
 801989e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80198a0:	b150      	cbz	r0, 80198b8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80198a2:	6803      	ldr	r3, [r0, #0]
 80198a4:	68db      	ldr	r3, [r3, #12]
 80198a6:	4798      	blx	r3
 80198a8:	b130      	cbz	r0, 80198b8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80198aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80198ac:	4621      	mov	r1, r4
 80198ae:	6803      	ldr	r3, [r0, #0]
 80198b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198b4:	689b      	ldr	r3, [r3, #8]
 80198b6:	4718      	bx	r3
 80198b8:	bd10      	pop	{r4, pc}

080198ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80198ba:	790b      	ldrb	r3, [r1, #4]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	bf0c      	ite	eq
 80198c0:	2301      	moveq	r3, #1
 80198c2:	2300      	movne	r3, #0
 80198c4:	b570      	push	{r4, r5, r6, lr}
 80198c6:	4604      	mov	r4, r0
 80198c8:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80198cc:	460e      	mov	r6, r1
 80198ce:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80198d2:	d109      	bne.n	80198e8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80198d4:	b14d      	cbz	r5, 80198ea <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80198d6:	7933      	ldrb	r3, [r6, #4]
 80198d8:	2b01      	cmp	r3, #1
 80198da:	d10c      	bne.n	80198f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80198dc:	6823      	ldr	r3, [r4, #0]
 80198de:	4620      	mov	r0, r4
 80198e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198e6:	4718      	bx	r3
 80198e8:	b12d      	cbz	r5, 80198f6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80198ea:	6823      	ldr	r3, [r4, #0]
 80198ec:	4620      	mov	r0, r4
 80198ee:	695b      	ldr	r3, [r3, #20]
 80198f0:	4798      	blx	r3
 80198f2:	2d00      	cmp	r5, #0
 80198f4:	d1ef      	bne.n	80198d6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80198f6:	bd70      	pop	{r4, r5, r6, pc}

080198f8 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 80198f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80198fc:	b133      	cbz	r3, 801990c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 80198fe:	790b      	ldrb	r3, [r1, #4]
 8019900:	2b01      	cmp	r3, #1
 8019902:	bf01      	itttt	eq
 8019904:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 8019906:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 8019908:	8603      	strheq	r3, [r0, #48]	; 0x30
 801990a:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801990c:	f7ff bfd5 	b.w	80198ba <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08019910 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 8019910:	b570      	push	{r4, r5, r6, lr}
 8019912:	4604      	mov	r4, r0
 8019914:	f100 0534 	add.w	r5, r0, #52	; 0x34
 8019918:	b169      	cbz	r1, 8019936 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 801991a:	302e      	adds	r0, #46	; 0x2e
 801991c:	f7f0 fdfe 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019920:	4606      	mov	r6, r0
 8019922:	4628      	mov	r0, r5
 8019924:	f7f0 fdfa 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019928:	4286      	cmp	r6, r0
 801992a:	d003      	beq.n	8019934 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 801992c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801992e:	8623      	strh	r3, [r4, #48]	; 0x30
 8019930:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019932:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8019934:	bd70      	pop	{r4, r5, r6, pc}
 8019936:	3030      	adds	r0, #48	; 0x30
 8019938:	f7f0 fdf0 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 801993c:	4606      	mov	r6, r0
 801993e:	4628      	mov	r0, r5
 8019940:	f7f0 fdec 	bl	800a51c <_ZNK8touchgfx6Bitmap5getIdEv>
 8019944:	4286      	cmp	r6, r0
 8019946:	bf1f      	itttt	ne
 8019948:	8e23      	ldrhne	r3, [r4, #48]	; 0x30
 801994a:	85e3      	strhne	r3, [r4, #46]	; 0x2e
 801994c:	8ea3      	ldrhne	r3, [r4, #52]	; 0x34
 801994e:	8623      	strhne	r3, [r4, #48]	; 0x30
 8019950:	e7f0      	b.n	8019934 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

08019952 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8019952:	2200      	movs	r2, #0
 8019954:	8002      	strh	r2, [r0, #0]
 8019956:	8042      	strh	r2, [r0, #2]
 8019958:	8082      	strh	r2, [r0, #4]
 801995a:	80c2      	strh	r2, [r0, #6]
 801995c:	4770      	bx	lr

0801995e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 801995e:	b570      	push	{r4, r5, r6, lr}
 8019960:	6803      	ldr	r3, [r0, #0]
 8019962:	4604      	mov	r4, r0
 8019964:	4615      	mov	r5, r2
 8019966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019968:	4798      	blx	r3
 801996a:	6823      	ldr	r3, [r4, #0]
 801996c:	4629      	mov	r1, r5
 801996e:	4620      	mov	r0, r4
 8019970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019976:	4718      	bx	r3

08019978 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8019978:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801997a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801997e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019980:	4299      	cmp	r1, r3
 8019982:	d029      	beq.n	80199d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 8019984:	4b15      	ldr	r3, [pc, #84]	; (80199dc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	b92b      	cbnz	r3, 8019996 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 801998a:	4b15      	ldr	r3, [pc, #84]	; (80199e0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801998c:	21ae      	movs	r1, #174	; 0xae
 801998e:	4a15      	ldr	r2, [pc, #84]	; (80199e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019990:	4815      	ldr	r0, [pc, #84]	; (80199e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8019992:	f011 fab9 	bl	802af08 <__assert_func>
 8019996:	4a15      	ldr	r2, [pc, #84]	; (80199ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8019998:	8812      	ldrh	r2, [r2, #0]
 801999a:	428a      	cmp	r2, r1
 801999c:	d803      	bhi.n	80199a6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 801999e:	4b14      	ldr	r3, [pc, #80]	; (80199f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 80199a0:	21af      	movs	r1, #175	; 0xaf
 80199a2:	4a10      	ldr	r2, [pc, #64]	; (80199e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80199a4:	e7f4      	b.n	8019990 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 80199a6:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80199aa:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80199ae:	4b11      	ldr	r3, [pc, #68]	; (80199f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 80199b0:	7854      	ldrb	r4, [r2, #1]
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	f3c4 0481 	ubfx	r4, r4, #2, #2
 80199b8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80199bc:	682b      	ldr	r3, [r5, #0]
 80199be:	69de      	ldr	r6, [r3, #28]
 80199c0:	4b0d      	ldr	r3, [pc, #52]	; (80199f8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 80199c2:	6818      	ldr	r0, [r3, #0]
 80199c4:	f7f0 fb9e 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 80199c8:	2300      	movs	r3, #0
 80199ca:	4602      	mov	r2, r0
 80199cc:	4621      	mov	r1, r4
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	4628      	mov	r0, r5
 80199d2:	47b0      	blx	r6
 80199d4:	b002      	add	sp, #8
 80199d6:	bd70      	pop	{r4, r5, r6, pc}
 80199d8:	2000      	movs	r0, #0
 80199da:	e7fb      	b.n	80199d4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 80199dc:	2400b91c 	.word	0x2400b91c
 80199e0:	0802ed54 	.word	0x0802ed54
 80199e4:	0802ee8c 	.word	0x0802ee8c
 80199e8:	0802ed96 	.word	0x0802ed96
 80199ec:	2400b920 	.word	0x2400b920
 80199f0:	0802edbf 	.word	0x0802edbf
 80199f4:	2400b924 	.word	0x2400b924
 80199f8:	2400b928 	.word	0x2400b928

080199fc <_ZN8touchgfx8TextArea12setBaselineYEs>:
 80199fc:	b570      	push	{r4, r5, r6, lr}
 80199fe:	6803      	ldr	r3, [r0, #0]
 8019a00:	4604      	mov	r4, r0
 8019a02:	b28d      	uxth	r5, r1
 8019a04:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019a06:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8019a08:	4b10      	ldr	r3, [pc, #64]	; (8019a4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	b92b      	cbnz	r3, 8019a1a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019a0e:	4b10      	ldr	r3, [pc, #64]	; (8019a50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019a10:	21ae      	movs	r1, #174	; 0xae
 8019a12:	4a10      	ldr	r2, [pc, #64]	; (8019a54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019a14:	4810      	ldr	r0, [pc, #64]	; (8019a58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019a16:	f011 fa77 	bl	802af08 <__assert_func>
 8019a1a:	4910      	ldr	r1, [pc, #64]	; (8019a5c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019a1c:	8809      	ldrh	r1, [r1, #0]
 8019a1e:	4291      	cmp	r1, r2
 8019a20:	d803      	bhi.n	8019a2a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019a22:	4b0f      	ldr	r3, [pc, #60]	; (8019a60 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019a24:	21af      	movs	r1, #175	; 0xaf
 8019a26:	4a0b      	ldr	r2, [pc, #44]	; (8019a54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019a28:	e7f4      	b.n	8019a14 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019a2a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019a2e:	4b0d      	ldr	r3, [pc, #52]	; (8019a64 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019a36:	6803      	ldr	r3, [r0, #0]
 8019a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a3a:	4798      	blx	r3
 8019a3c:	1a29      	subs	r1, r5, r0
 8019a3e:	4633      	mov	r3, r6
 8019a40:	4620      	mov	r0, r4
 8019a42:	b209      	sxth	r1, r1
 8019a44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a48:	4718      	bx	r3
 8019a4a:	bf00      	nop
 8019a4c:	2400b91c 	.word	0x2400b91c
 8019a50:	0802ed54 	.word	0x0802ed54
 8019a54:	0802ee8c 	.word	0x0802ee8c
 8019a58:	0802ed96 	.word	0x0802ed96
 8019a5c:	2400b920 	.word	0x2400b920
 8019a60:	0802edbf 	.word	0x0802edbf
 8019a64:	2400b924 	.word	0x2400b924

08019a68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a70:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019a72:	b08c      	sub	sp, #48	; 0x30
 8019a74:	4604      	mov	r4, r0
 8019a76:	4293      	cmp	r3, r2
 8019a78:	4688      	mov	r8, r1
 8019a7a:	d05f      	beq.n	8019b3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019a7c:	4e31      	ldr	r6, [pc, #196]	; (8019b44 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019a7e:	6832      	ldr	r2, [r6, #0]
 8019a80:	b92a      	cbnz	r2, 8019a8e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019a82:	4b31      	ldr	r3, [pc, #196]	; (8019b48 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019a84:	21ae      	movs	r1, #174	; 0xae
 8019a86:	4a31      	ldr	r2, [pc, #196]	; (8019b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019a88:	4831      	ldr	r0, [pc, #196]	; (8019b50 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019a8a:	f011 fa3d 	bl	802af08 <__assert_func>
 8019a8e:	4d31      	ldr	r5, [pc, #196]	; (8019b54 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019a90:	8829      	ldrh	r1, [r5, #0]
 8019a92:	4299      	cmp	r1, r3
 8019a94:	d803      	bhi.n	8019a9e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019a96:	4b30      	ldr	r3, [pc, #192]	; (8019b58 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019a98:	21af      	movs	r1, #175	; 0xaf
 8019a9a:	4a2c      	ldr	r2, [pc, #176]	; (8019b4c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019a9c:	e7f4      	b.n	8019a88 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019a9e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019aa2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019aa6:	4b2d      	ldr	r3, [pc, #180]	; (8019b5c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019aae:	2a00      	cmp	r2, #0
 8019ab0:	d044      	beq.n	8019b3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019ab2:	784b      	ldrb	r3, [r1, #1]
 8019ab4:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8019ab8:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019abc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019ac0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8019ac4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8019ac8:	4b25      	ldr	r3, [pc, #148]	; (8019b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019aca:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8019ace:	681b      	ldr	r3, [r3, #0]
 8019ad0:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8019ad4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8019ad8:	9207      	str	r2, [sp, #28]
 8019ada:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019adc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019ae0:	f88d a020 	strb.w	sl, [sp, #32]
 8019ae4:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8019ae8:	9009      	str	r0, [sp, #36]	; 0x24
 8019aea:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8019aee:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8019af2:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 8019af6:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8019afa:	b10a      	cbz	r2, 8019b00 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019afc:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8019afe:	b907      	cbnz	r7, 8019b02 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019b00:	689f      	ldr	r7, [r3, #8]
 8019b02:	f10d 0914 	add.w	r9, sp, #20
 8019b06:	4621      	mov	r1, r4
 8019b08:	4648      	mov	r0, r9
 8019b0a:	f003 f8f1 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b0e:	6833      	ldr	r3, [r6, #0]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d0b6      	beq.n	8019a82 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019b14:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8019b16:	882b      	ldrh	r3, [r5, #0]
 8019b18:	428b      	cmp	r3, r1
 8019b1a:	d9bc      	bls.n	8019a96 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019b1c:	4b11      	ldr	r3, [pc, #68]	; (8019b64 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019b1e:	6818      	ldr	r0, [r3, #0]
 8019b20:	f7f0 faf0 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 8019b24:	2300      	movs	r3, #0
 8019b26:	9001      	str	r0, [sp, #4]
 8019b28:	4638      	mov	r0, r7
 8019b2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019b2e:	ab07      	add	r3, sp, #28
 8019b30:	9300      	str	r3, [sp, #0]
 8019b32:	4643      	mov	r3, r8
 8019b34:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019b38:	f7f0 fa75 	bl	800a026 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019b3c:	b00c      	add	sp, #48	; 0x30
 8019b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b42:	bf00      	nop
 8019b44:	2400b91c 	.word	0x2400b91c
 8019b48:	0802ed54 	.word	0x0802ed54
 8019b4c:	0802ee8c 	.word	0x0802ee8c
 8019b50:	0802ed96 	.word	0x0802ed96
 8019b54:	2400b920 	.word	0x2400b920
 8019b58:	0802edbf 	.word	0x0802edbf
 8019b5c:	2400b924 	.word	0x2400b924
 8019b60:	2400b8cc 	.word	0x2400b8cc
 8019b64:	2400b928 	.word	0x2400b928

08019b68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019b68:	b40e      	push	{r1, r2, r3}
 8019b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b72:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8019b74:	b09c      	sub	sp, #112	; 0x70
 8019b76:	4604      	mov	r4, r0
 8019b78:	4293      	cmp	r3, r2
 8019b7a:	d06b      	beq.n	8019c54 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019b7c:	aa26      	add	r2, sp, #152	; 0x98
 8019b7e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8019c68 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8019b82:	9202      	str	r2, [sp, #8]
 8019b84:	f8da 2000 	ldr.w	r2, [sl]
 8019b88:	b92a      	cbnz	r2, 8019b96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019b8a:	4b33      	ldr	r3, [pc, #204]	; (8019c58 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019b8c:	21ae      	movs	r1, #174	; 0xae
 8019b8e:	4a33      	ldr	r2, [pc, #204]	; (8019c5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019b90:	4833      	ldr	r0, [pc, #204]	; (8019c60 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8019b92:	f011 f9b9 	bl	802af08 <__assert_func>
 8019b96:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8019c6c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019b9a:	f8b8 1000 	ldrh.w	r1, [r8]
 8019b9e:	4299      	cmp	r1, r3
 8019ba0:	d803      	bhi.n	8019baa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019ba2:	4b30      	ldr	r3, [pc, #192]	; (8019c64 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019ba4:	21af      	movs	r1, #175	; 0xaf
 8019ba6:	4a2d      	ldr	r2, [pc, #180]	; (8019c5c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019ba8:	e7f2      	b.n	8019b90 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019baa:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8019c70 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019bae:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019bb2:	f8d9 3000 	ldr.w	r3, [r9]
 8019bb6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019bba:	682b      	ldr	r3, [r5, #0]
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bc0:	4798      	blx	r3
 8019bc2:	4606      	mov	r6, r0
 8019bc4:	b207      	sxth	r7, r0
 8019bc6:	a803      	add	r0, sp, #12
 8019bc8:	f003 fd2a 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 8019bcc:	682b      	ldr	r3, [r5, #0]
 8019bce:	4628      	mov	r0, r5
 8019bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019bd2:	4798      	blx	r3
 8019bd4:	682b      	ldr	r3, [r5, #0]
 8019bd6:	4683      	mov	fp, r0
 8019bd8:	4628      	mov	r0, r5
 8019bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019bdc:	4798      	blx	r3
 8019bde:	465b      	mov	r3, fp
 8019be0:	9000      	str	r0, [sp, #0]
 8019be2:	a803      	add	r0, sp, #12
 8019be4:	9925      	ldr	r1, [sp, #148]	; 0x94
 8019be6:	9a02      	ldr	r2, [sp, #8]
 8019be8:	f003 fd6d 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019bec:	f8da 3000 	ldr.w	r3, [sl]
 8019bf0:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d0c8      	beq.n	8019b8a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019bf8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8019bfa:	f8b8 0000 	ldrh.w	r0, [r8]
 8019bfe:	4290      	cmp	r0, r2
 8019c00:	d9cf      	bls.n	8019ba2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019c02:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019c06:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019c0a:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8019c0e:	786a      	ldrb	r2, [r5, #1]
 8019c10:	8925      	ldrh	r5, [r4, #8]
 8019c12:	f8d9 3000 	ldr.w	r3, [r9]
 8019c16:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019c1a:	eba5 050c 	sub.w	r5, r5, ip
 8019c1e:	b22d      	sxth	r5, r5
 8019c20:	9500      	str	r5, [sp, #0]
 8019c22:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019c26:	a803      	add	r0, sp, #12
 8019c28:	f001 fb5b 	bl	801b2e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019c2c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8019c30:	b203      	sxth	r3, r0
 8019c32:	18b9      	adds	r1, r7, r2
 8019c34:	2900      	cmp	r1, #0
 8019c36:	dd0b      	ble.n	8019c50 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019c38:	3b01      	subs	r3, #1
 8019c3a:	fb13 f302 	smulbb	r3, r3, r2
 8019c3e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019c42:	b21f      	sxth	r7, r3
 8019c44:	4638      	mov	r0, r7
 8019c46:	b01c      	add	sp, #112	; 0x70
 8019c48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	b003      	add	sp, #12
 8019c4e:	4770      	bx	lr
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	dcf7      	bgt.n	8019c44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019c54:	2700      	movs	r7, #0
 8019c56:	e7f5      	b.n	8019c44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019c58:	0802ed54 	.word	0x0802ed54
 8019c5c:	0802ee8c 	.word	0x0802ee8c
 8019c60:	0802ed96 	.word	0x0802ed96
 8019c64:	0802edbf 	.word	0x0802edbf
 8019c68:	2400b91c 	.word	0x2400b91c
 8019c6c:	2400b920 	.word	0x2400b920
 8019c70:	2400b924 	.word	0x2400b924

08019c74 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019c74:	b570      	push	{r4, r5, r6, lr}
 8019c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019c7a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019c7c:	4604      	mov	r4, r0
 8019c7e:	4299      	cmp	r1, r3
 8019c80:	d01e      	beq.n	8019cc0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019c82:	6803      	ldr	r3, [r0, #0]
 8019c84:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019c86:	4b0f      	ldr	r3, [pc, #60]	; (8019cc4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	b92b      	cbnz	r3, 8019c98 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019c8c:	4b0e      	ldr	r3, [pc, #56]	; (8019cc8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8019c8e:	21ae      	movs	r1, #174	; 0xae
 8019c90:	4a0e      	ldr	r2, [pc, #56]	; (8019ccc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019c92:	480f      	ldr	r0, [pc, #60]	; (8019cd0 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019c94:	f011 f938 	bl	802af08 <__assert_func>
 8019c98:	4b0e      	ldr	r3, [pc, #56]	; (8019cd4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019c9a:	881b      	ldrh	r3, [r3, #0]
 8019c9c:	428b      	cmp	r3, r1
 8019c9e:	d803      	bhi.n	8019ca8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019ca0:	4b0d      	ldr	r3, [pc, #52]	; (8019cd8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019ca2:	21af      	movs	r1, #175	; 0xaf
 8019ca4:	4a09      	ldr	r2, [pc, #36]	; (8019ccc <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019ca6:	e7f4      	b.n	8019c92 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019ca8:	4b0c      	ldr	r3, [pc, #48]	; (8019cdc <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019caa:	6818      	ldr	r0, [r3, #0]
 8019cac:	f7f0 fa2a 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	4601      	mov	r1, r0
 8019cb4:	46ac      	mov	ip, r5
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	461a      	mov	r2, r3
 8019cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cbe:	4760      	bx	ip
 8019cc0:	2000      	movs	r0, #0
 8019cc2:	bd70      	pop	{r4, r5, r6, pc}
 8019cc4:	2400b91c 	.word	0x2400b91c
 8019cc8:	0802ed54 	.word	0x0802ed54
 8019ccc:	0802ee8c 	.word	0x0802ee8c
 8019cd0:	0802ed96 	.word	0x0802ed96
 8019cd4:	2400b920 	.word	0x2400b920
 8019cd8:	0802edbf 	.word	0x0802edbf
 8019cdc:	2400b928 	.word	0x2400b928

08019ce0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019ce0:	b538      	push	{r3, r4, r5, lr}
 8019ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019ce6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8019ce8:	4604      	mov	r4, r0
 8019cea:	429a      	cmp	r2, r3
 8019cec:	d014      	beq.n	8019d18 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019cee:	6803      	ldr	r3, [r0, #0]
 8019cf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019cf2:	4798      	blx	r3
 8019cf4:	6823      	ldr	r3, [r4, #0]
 8019cf6:	4605      	mov	r5, r0
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019cfc:	4798      	blx	r3
 8019cfe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8019d02:	b22d      	sxth	r5, r5
 8019d04:	4601      	mov	r1, r0
 8019d06:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8019d0a:	bf06      	itte	eq
 8019d0c:	4602      	moveq	r2, r0
 8019d0e:	4629      	moveq	r1, r5
 8019d10:	462a      	movne	r2, r5
 8019d12:	4620      	mov	r0, r4
 8019d14:	f7ea fa0c 	bl	8004130 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019d18:	bd38      	pop	{r3, r4, r5, pc}

08019d1a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019d1a:	888a      	ldrh	r2, [r1, #4]
 8019d1c:	8582      	strh	r2, [r0, #44]	; 0x2c
 8019d1e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019d22:	b922      	cbnz	r2, 8019d2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019d24:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019d28:	b90b      	cbnz	r3, 8019d2e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019d2a:	f7ff bfd9 	b.w	8019ce0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019d2e:	4770      	bx	lr

08019d30 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019d30:	2300      	movs	r3, #0
 8019d32:	8083      	strh	r3, [r0, #4]
 8019d34:	80c3      	strh	r3, [r0, #6]
 8019d36:	8003      	strh	r3, [r0, #0]
 8019d38:	8043      	strh	r3, [r0, #2]
 8019d3a:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019d3e:	2bff      	cmp	r3, #255	; 0xff
 8019d40:	bf01      	itttt	eq
 8019d42:	890b      	ldrheq	r3, [r1, #8]
 8019d44:	8083      	strheq	r3, [r0, #4]
 8019d46:	894b      	ldrheq	r3, [r1, #10]
 8019d48:	80c3      	strheq	r3, [r0, #6]
 8019d4a:	4770      	bx	lr

08019d4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019d4e:	4604      	mov	r4, r0
 8019d50:	466b      	mov	r3, sp
 8019d52:	6808      	ldr	r0, [r1, #0]
 8019d54:	6849      	ldr	r1, [r1, #4]
 8019d56:	c303      	stmia	r3!, {r0, r1}
 8019d58:	6823      	ldr	r3, [r4, #0]
 8019d5a:	4669      	mov	r1, sp
 8019d5c:	4620      	mov	r0, r4
 8019d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d60:	4798      	blx	r3
 8019d62:	4b08      	ldr	r3, [pc, #32]	; (8019d84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019d6a:	b10a      	cbz	r2, 8019d70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019d6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019d6e:	b900      	cbnz	r0, 8019d72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019d70:	6898      	ldr	r0, [r3, #8]
 8019d72:	6803      	ldr	r3, [r0, #0]
 8019d74:	4669      	mov	r1, sp
 8019d76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8019d78:	699d      	ldr	r5, [r3, #24]
 8019d7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8019d7e:	47a8      	blx	r5
 8019d80:	b003      	add	sp, #12
 8019d82:	bd30      	pop	{r4, r5, pc}
 8019d84:	2400b8cc 	.word	0x2400b8cc

08019d88 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019d88:	b570      	push	{r4, r5, r6, lr}
 8019d8a:	880b      	ldrh	r3, [r1, #0]
 8019d8c:	4605      	mov	r5, r0
 8019d8e:	4604      	mov	r4, r0
 8019d90:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8019d92:	8813      	ldrh	r3, [r2, #0]
 8019d94:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019d98:	4628      	mov	r0, r5
 8019d9a:	f005 f843 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019d9e:	4606      	mov	r6, r0
 8019da0:	4628      	mov	r0, r5
 8019da2:	f005 f879 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	4605      	mov	r5, r0
 8019daa:	b231      	sxth	r1, r6
 8019dac:	4620      	mov	r0, r4
 8019dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019db0:	4798      	blx	r3
 8019db2:	6823      	ldr	r3, [r4, #0]
 8019db4:	b229      	sxth	r1, r5
 8019db6:	4620      	mov	r0, r4
 8019db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dbe:	4718      	bx	r3

08019dc0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019dc0:	b510      	push	{r4, lr}
 8019dc2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019dc6:	4604      	mov	r4, r0
 8019dc8:	2bff      	cmp	r3, #255	; 0xff
 8019dca:	d006      	beq.n	8019dda <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019dcc:	2300      	movs	r3, #0
 8019dce:	8003      	strh	r3, [r0, #0]
 8019dd0:	8043      	strh	r3, [r0, #2]
 8019dd2:	8083      	strh	r3, [r0, #4]
 8019dd4:	80c3      	strh	r3, [r0, #6]
 8019dd6:	4620      	mov	r0, r4
 8019dd8:	bd10      	pop	{r4, pc}
 8019dda:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8019dde:	b11b      	cbz	r3, 8019de8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019de0:	3130      	adds	r1, #48	; 0x30
 8019de2:	f005 f893 	bl	801ef0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019de6:	e7f6      	b.n	8019dd6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019de8:	312e      	adds	r1, #46	; 0x2e
 8019dea:	e7fa      	b.n	8019de2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019dec <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019df0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019df4:	b08a      	sub	sp, #40	; 0x28
 8019df6:	4604      	mov	r4, r0
 8019df8:	4688      	mov	r8, r1
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	d044      	beq.n	8019e88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8019dfe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8019e00:	a805      	add	r0, sp, #20
 8019e02:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e06:	f005 f80d 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e0a:	4605      	mov	r5, r0
 8019e0c:	b206      	sxth	r6, r0
 8019e0e:	a805      	add	r0, sp, #20
 8019e10:	f005 f842 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e14:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019e18:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	fa0f fc80 	sxth.w	ip, r0
 8019e22:	4417      	add	r7, r2
 8019e24:	9306      	str	r3, [sp, #24]
 8019e26:	b2bf      	uxth	r7, r7
 8019e28:	fa0f fe87 	sxth.w	lr, r7
 8019e2c:	459e      	cmp	lr, r3
 8019e2e:	dd2d      	ble.n	8019e8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e30:	4296      	cmp	r6, r2
 8019e32:	dd2b      	ble.n	8019e8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e34:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019e38:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019e3c:	4419      	add	r1, r3
 8019e3e:	b289      	uxth	r1, r1
 8019e40:	fa0f f881 	sxth.w	r8, r1
 8019e44:	f1b8 0f00 	cmp.w	r8, #0
 8019e48:	dd20      	ble.n	8019e8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e4a:	459c      	cmp	ip, r3
 8019e4c:	dd1e      	ble.n	8019e8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e4e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019e52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019e56:	4576      	cmp	r6, lr
 8019e58:	bfa8      	it	ge
 8019e5a:	463d      	movge	r5, r7
 8019e5c:	45c4      	cmp	ip, r8
 8019e5e:	bfa8      	it	ge
 8019e60:	4608      	movge	r0, r1
 8019e62:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019e66:	1aad      	subs	r5, r5, r2
 8019e68:	1ac0      	subs	r0, r0, r3
 8019e6a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019e6e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8019e72:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019e76:	4b1f      	ldr	r3, [pc, #124]	; (8019ef4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	b953      	cbnz	r3, 8019e92 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8019e7c:	4b1e      	ldr	r3, [pc, #120]	; (8019ef8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8019e7e:	2187      	movs	r1, #135	; 0x87
 8019e80:	4a1e      	ldr	r2, [pc, #120]	; (8019efc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8019e82:	481f      	ldr	r0, [pc, #124]	; (8019f00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8019e84:	f011 f840 	bl	802af08 <__assert_func>
 8019e88:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8019e8a:	e7b9      	b.n	8019e00 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	9307      	str	r3, [sp, #28]
 8019e90:	e7f1      	b.n	8019e76 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8019e92:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	d026      	beq.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019e9e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	dd22      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019ea6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	dd1e      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019eae:	2300      	movs	r3, #0
 8019eb0:	a908      	add	r1, sp, #32
 8019eb2:	4620      	mov	r0, r4
 8019eb4:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019eb8:	6823      	ldr	r3, [r4, #0]
 8019eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ebc:	4798      	blx	r3
 8019ebe:	4b11      	ldr	r3, [pc, #68]	; (8019f04 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019ec6:	b10a      	cbz	r2, 8019ecc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019ec8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019eca:	b900      	cbnz	r0, 8019ece <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019ecc:	6898      	ldr	r0, [r3, #8]
 8019ece:	2501      	movs	r5, #1
 8019ed0:	6801      	ldr	r1, [r0, #0]
 8019ed2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8019ed6:	9502      	str	r5, [sp, #8]
 8019ed8:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019edc:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019ee0:	9401      	str	r4, [sp, #4]
 8019ee2:	ac06      	add	r4, sp, #24
 8019ee4:	9400      	str	r4, [sp, #0]
 8019ee6:	688c      	ldr	r4, [r1, #8]
 8019ee8:	a905      	add	r1, sp, #20
 8019eea:	47a0      	blx	r4
 8019eec:	b00a      	add	sp, #40	; 0x28
 8019eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ef2:	bf00      	nop
 8019ef4:	2400b954 	.word	0x2400b954
 8019ef8:	0802ef20 	.word	0x0802ef20
 8019efc:	0802eff4 	.word	0x0802eff4
 8019f00:	0802ef5c 	.word	0x0802ef5c
 8019f04:	2400b8cc 	.word	0x2400b8cc

08019f08 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f0e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019f10:	4606      	mov	r6, r0
 8019f12:	4299      	cmp	r1, r3
 8019f14:	d02a      	beq.n	8019f6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8019f16:	4b16      	ldr	r3, [pc, #88]	; (8019f70 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	b92b      	cbnz	r3, 8019f28 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019f1c:	4b15      	ldr	r3, [pc, #84]	; (8019f74 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8019f1e:	21ae      	movs	r1, #174	; 0xae
 8019f20:	4a15      	ldr	r2, [pc, #84]	; (8019f78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019f22:	4816      	ldr	r0, [pc, #88]	; (8019f7c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019f24:	f010 fff0 	bl	802af08 <__assert_func>
 8019f28:	4a15      	ldr	r2, [pc, #84]	; (8019f80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019f2a:	8812      	ldrh	r2, [r2, #0]
 8019f2c:	428a      	cmp	r2, r1
 8019f2e:	d803      	bhi.n	8019f38 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8019f30:	4b14      	ldr	r3, [pc, #80]	; (8019f84 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8019f32:	21af      	movs	r1, #175	; 0xaf
 8019f34:	4a10      	ldr	r2, [pc, #64]	; (8019f78 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019f36:	e7f4      	b.n	8019f22 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019f38:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019f3c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019f40:	4b11      	ldr	r3, [pc, #68]	; (8019f88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8019f42:	7854      	ldrb	r4, [r2, #1]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019f4a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019f4e:	682b      	ldr	r3, [r5, #0]
 8019f50:	69df      	ldr	r7, [r3, #28]
 8019f52:	4b0e      	ldr	r3, [pc, #56]	; (8019f8c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019f54:	6818      	ldr	r0, [r3, #0]
 8019f56:	f7f0 f8d5 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	4621      	mov	r1, r4
 8019f60:	9300      	str	r3, [sp, #0]
 8019f62:	4628      	mov	r0, r5
 8019f64:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8019f66:	47b8      	blx	r7
 8019f68:	b003      	add	sp, #12
 8019f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f6c:	2000      	movs	r0, #0
 8019f6e:	e7fb      	b.n	8019f68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8019f70:	2400b91c 	.word	0x2400b91c
 8019f74:	0802ed54 	.word	0x0802ed54
 8019f78:	0802f0a0 	.word	0x0802f0a0
 8019f7c:	0802ed96 	.word	0x0802ed96
 8019f80:	2400b920 	.word	0x2400b920
 8019f84:	0802edbf 	.word	0x0802edbf
 8019f88:	2400b924 	.word	0x2400b924
 8019f8c:	2400b928 	.word	0x2400b928

08019f90 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019f90:	b570      	push	{r4, r5, r6, lr}
 8019f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f96:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8019f98:	4604      	mov	r4, r0
 8019f9a:	4299      	cmp	r1, r3
 8019f9c:	d01e      	beq.n	8019fdc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8019f9e:	6803      	ldr	r3, [r0, #0]
 8019fa0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8019fa2:	4b0f      	ldr	r3, [pc, #60]	; (8019fe0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	b92b      	cbnz	r3, 8019fb4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8019fa8:	4b0e      	ldr	r3, [pc, #56]	; (8019fe4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8019faa:	21ae      	movs	r1, #174	; 0xae
 8019fac:	4a0e      	ldr	r2, [pc, #56]	; (8019fe8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019fae:	480f      	ldr	r0, [pc, #60]	; (8019fec <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8019fb0:	f010 ffaa 	bl	802af08 <__assert_func>
 8019fb4:	4b0e      	ldr	r3, [pc, #56]	; (8019ff0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8019fb6:	881b      	ldrh	r3, [r3, #0]
 8019fb8:	428b      	cmp	r3, r1
 8019fba:	d803      	bhi.n	8019fc4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8019fbc:	4b0d      	ldr	r3, [pc, #52]	; (8019ff4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8019fbe:	21af      	movs	r1, #175	; 0xaf
 8019fc0:	4a09      	ldr	r2, [pc, #36]	; (8019fe8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8019fc2:	e7f4      	b.n	8019fae <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8019fc4:	4b0c      	ldr	r3, [pc, #48]	; (8019ff8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8019fc6:	6818      	ldr	r0, [r3, #0]
 8019fc8:	f7f0 f89c 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 8019fcc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019fce:	4601      	mov	r1, r0
 8019fd0:	46ac      	mov	ip, r5
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019fda:	4760      	bx	ip
 8019fdc:	2000      	movs	r0, #0
 8019fde:	bd70      	pop	{r4, r5, r6, pc}
 8019fe0:	2400b91c 	.word	0x2400b91c
 8019fe4:	0802ed54 	.word	0x0802ed54
 8019fe8:	0802f0a0 	.word	0x0802f0a0
 8019fec:	0802ed96 	.word	0x0802ed96
 8019ff0:	2400b920 	.word	0x2400b920
 8019ff4:	0802edbf 	.word	0x0802edbf
 8019ff8:	2400b928 	.word	0x2400b928

08019ffc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8019ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a004:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801a006:	b08c      	sub	sp, #48	; 0x30
 801a008:	4604      	mov	r4, r0
 801a00a:	4293      	cmp	r3, r2
 801a00c:	460e      	mov	r6, r1
 801a00e:	d05d      	beq.n	801a0cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a010:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 801a0f0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a014:	f8d8 2000 	ldr.w	r2, [r8]
 801a018:	b92a      	cbnz	r2, 801a026 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a01a:	4b2e      	ldr	r3, [pc, #184]	; (801a0d4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a01c:	21ae      	movs	r1, #174	; 0xae
 801a01e:	4a2e      	ldr	r2, [pc, #184]	; (801a0d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a020:	482e      	ldr	r0, [pc, #184]	; (801a0dc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a022:	f010 ff71 	bl	802af08 <__assert_func>
 801a026:	4f2e      	ldr	r7, [pc, #184]	; (801a0e0 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a028:	8839      	ldrh	r1, [r7, #0]
 801a02a:	4299      	cmp	r1, r3
 801a02c:	d803      	bhi.n	801a036 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a02e:	4b2d      	ldr	r3, [pc, #180]	; (801a0e4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a030:	21af      	movs	r1, #175	; 0xaf
 801a032:	4a29      	ldr	r2, [pc, #164]	; (801a0d8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a034:	e7f4      	b.n	801a020 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a036:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a03a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a03e:	4b2a      	ldr	r3, [pc, #168]	; (801a0e8 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a046:	2a00      	cmp	r2, #0
 801a048:	d040      	beq.n	801a0cc <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a04a:	784b      	ldrb	r3, [r1, #1]
 801a04c:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 801a050:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801a054:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a058:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 801a05c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a060:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801a064:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 801a068:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a06c:	ad05      	add	r5, sp, #20
 801a06e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801a070:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801a074:	9207      	str	r2, [sp, #28]
 801a076:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 801a07a:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 801a07e:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801a082:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801a086:	f88d a020 	strb.w	sl, [sp, #32]
 801a08a:	9009      	str	r0, [sp, #36]	; 0x24
 801a08c:	f7ea f8ea 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 801a090:	4621      	mov	r1, r4
 801a092:	4681      	mov	r9, r0
 801a094:	4628      	mov	r0, r5
 801a096:	f002 fe2b 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a09a:	f8d8 3000 	ldr.w	r3, [r8]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d0bb      	beq.n	801a01a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a0a2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801a0a4:	883b      	ldrh	r3, [r7, #0]
 801a0a6:	428b      	cmp	r3, r1
 801a0a8:	d9c1      	bls.n	801a02e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a0aa:	4b10      	ldr	r3, [pc, #64]	; (801a0ec <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a0ac:	6818      	ldr	r0, [r3, #0]
 801a0ae:	f7f0 f829 	bl	800a104 <_ZNK8touchgfx5Texts7getTextEt>
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	9303      	str	r3, [sp, #12]
 801a0b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a0b8:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a0bc:	ab07      	add	r3, sp, #28
 801a0be:	4648      	mov	r0, r9
 801a0c0:	9300      	str	r3, [sp, #0]
 801a0c2:	4633      	mov	r3, r6
 801a0c4:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a0c8:	f7ef ffad 	bl	800a026 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a0cc:	b00c      	add	sp, #48	; 0x30
 801a0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0d2:	bf00      	nop
 801a0d4:	0802ed54 	.word	0x0802ed54
 801a0d8:	0802f0a0 	.word	0x0802f0a0
 801a0dc:	0802ed96 	.word	0x0802ed96
 801a0e0:	2400b920 	.word	0x2400b920
 801a0e4:	0802edbf 	.word	0x0802edbf
 801a0e8:	2400b924 	.word	0x2400b924
 801a0ec:	2400b928 	.word	0x2400b928
 801a0f0:	2400b91c 	.word	0x2400b91c

0801a0f4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801a0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801a0fa:	4604      	mov	r4, r0
 801a0fc:	460e      	mov	r6, r1
 801a0fe:	b08e      	sub	sp, #56	; 0x38
 801a100:	b218      	sxth	r0, r3
 801a102:	8921      	ldrh	r1, [r4, #8]
 801a104:	005b      	lsls	r3, r3, #1
 801a106:	8962      	ldrh	r2, [r4, #10]
 801a108:	f8ad 0000 	strh.w	r0, [sp]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	f8ad 0002 	strh.w	r0, [sp, #2]
 801a112:	1ac9      	subs	r1, r1, r3
 801a114:	1ad3      	subs	r3, r2, r3
 801a116:	b209      	sxth	r1, r1
 801a118:	b21b      	sxth	r3, r3
 801a11a:	2900      	cmp	r1, #0
 801a11c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a120:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a124:	dd5e      	ble.n	801a1e4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a126:	2b00      	cmp	r3, #0
 801a128:	dd5c      	ble.n	801a1e4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a12a:	6830      	ldr	r0, [r6, #0]
 801a12c:	ab02      	add	r3, sp, #8
 801a12e:	6871      	ldr	r1, [r6, #4]
 801a130:	c303      	stmia	r3!, {r0, r1}
 801a132:	4669      	mov	r1, sp
 801a134:	a802      	add	r0, sp, #8
 801a136:	f7fe f807 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801a13a:	4620      	mov	r0, r4
 801a13c:	a902      	add	r1, sp, #8
 801a13e:	f7ff fe05 	bl	8019d4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801a142:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801a144:	2800      	cmp	r0, #0
 801a146:	d05f      	beq.n	801a208 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a148:	8963      	ldrh	r3, [r4, #10]
 801a14a:	b202      	sxth	r2, r0
 801a14c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801a150:	2500      	movs	r5, #0
 801a152:	1a1f      	subs	r7, r3, r0
 801a154:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 801a158:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a15c:	b21b      	sxth	r3, r3
 801a15e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a162:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801a166:	af04      	add	r7, sp, #16
 801a168:	1a09      	subs	r1, r1, r0
 801a16a:	9506      	str	r5, [sp, #24]
 801a16c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a170:	f8ad 5020 	strh.w	r5, [sp, #32]
 801a174:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801a178:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801a17c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a180:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a184:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a188:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801a18c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801a190:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a194:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a198:	ab06      	add	r3, sp, #24
 801a19a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a19e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1a2:	e887 0003 	stmia.w	r7, {r0, r1}
 801a1a6:	4631      	mov	r1, r6
 801a1a8:	4638      	mov	r0, r7
 801a1aa:	f7fd ffcd 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801a1ae:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	dd12      	ble.n	801a1dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a1b6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	dd0e      	ble.n	801a1dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a1be:	6823      	ldr	r3, [r4, #0]
 801a1c0:	4639      	mov	r1, r7
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1c6:	4798      	blx	r3
 801a1c8:	f7ea f84c 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 801a1cc:	6803      	ldr	r3, [r0, #0]
 801a1ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a1d0:	4639      	mov	r1, r7
 801a1d2:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a1d6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a1da:	47c0      	blx	r8
 801a1dc:	3501      	adds	r5, #1
 801a1de:	2d04      	cmp	r5, #4
 801a1e0:	d1da      	bne.n	801a198 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801a1e2:	e011      	b.n	801a208 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a1e4:	6830      	ldr	r0, [r6, #0]
 801a1e6:	ab06      	add	r3, sp, #24
 801a1e8:	6871      	ldr	r1, [r6, #4]
 801a1ea:	c303      	stmia	r3!, {r0, r1}
 801a1ec:	6823      	ldr	r3, [r4, #0]
 801a1ee:	a906      	add	r1, sp, #24
 801a1f0:	4620      	mov	r0, r4
 801a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a1f4:	4798      	blx	r3
 801a1f6:	f7ea f835 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 801a1fa:	6803      	ldr	r3, [r0, #0]
 801a1fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a1fe:	a906      	add	r1, sp, #24
 801a200:	699d      	ldr	r5, [r3, #24]
 801a202:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801a206:	47a8      	blx	r5
 801a208:	b00e      	add	sp, #56	; 0x38
 801a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a20e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a20e:	b570      	push	{r4, r5, r6, lr}
 801a210:	880b      	ldrh	r3, [r1, #0]
 801a212:	460d      	mov	r5, r1
 801a214:	4604      	mov	r4, r0
 801a216:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a218:	4608      	mov	r0, r1
 801a21a:	f004 fe03 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a21e:	4606      	mov	r6, r0
 801a220:	4628      	mov	r0, r5
 801a222:	f004 fe39 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a226:	6823      	ldr	r3, [r4, #0]
 801a228:	4605      	mov	r5, r0
 801a22a:	b231      	sxth	r1, r6
 801a22c:	4620      	mov	r0, r4
 801a22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a230:	4798      	blx	r3
 801a232:	6823      	ldr	r3, [r4, #0]
 801a234:	b229      	sxth	r1, r5
 801a236:	4620      	mov	r0, r4
 801a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a23e:	4718      	bx	r3

0801a240 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a240:	b510      	push	{r4, lr}
 801a242:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801a246:	4604      	mov	r4, r0
 801a248:	2bff      	cmp	r3, #255	; 0xff
 801a24a:	d006      	beq.n	801a25a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a24c:	2300      	movs	r3, #0
 801a24e:	8003      	strh	r3, [r0, #0]
 801a250:	8043      	strh	r3, [r0, #2]
 801a252:	8083      	strh	r3, [r0, #4]
 801a254:	80c3      	strh	r3, [r0, #6]
 801a256:	4620      	mov	r0, r4
 801a258:	bd10      	pop	{r4, pc}
 801a25a:	3126      	adds	r1, #38	; 0x26
 801a25c:	f004 fe56 	bl	801ef0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a260:	e7f9      	b.n	801a256 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801a264 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a268:	4604      	mov	r4, r0
 801a26a:	b088      	sub	sp, #32
 801a26c:	2500      	movs	r5, #0
 801a26e:	460f      	mov	r7, r1
 801a270:	f854 3b26 	ldr.w	r3, [r4], #38
 801a274:	a904      	add	r1, sp, #16
 801a276:	4606      	mov	r6, r0
 801a278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a27a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a27e:	4798      	blx	r3
 801a280:	4620      	mov	r0, r4
 801a282:	f004 fdcf 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a286:	4680      	mov	r8, r0
 801a288:	4620      	mov	r0, r4
 801a28a:	f004 fe05 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a28e:	9506      	str	r5, [sp, #24]
 801a290:	ad06      	add	r5, sp, #24
 801a292:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a296:	4639      	mov	r1, r7
 801a298:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a29c:	4628      	mov	r0, r5
 801a29e:	f7fd ff53 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801a2a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	dd19      	ble.n	801a2de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a2aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	dd15      	ble.n	801a2de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a2b2:	4b0c      	ldr	r3, [pc, #48]	; (801a2e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801a2ba:	b10a      	cbz	r2, 801a2c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a2bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801a2be:	b900      	cbnz	r0, 801a2c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a2c0:	6898      	ldr	r0, [r3, #8]
 801a2c2:	2701      	movs	r7, #1
 801a2c4:	6801      	ldr	r1, [r0, #0]
 801a2c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a2ca:	9702      	str	r7, [sp, #8]
 801a2cc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 801a2d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a2d4:	e9cd 5600 	strd	r5, r6, [sp]
 801a2d8:	688d      	ldr	r5, [r1, #8]
 801a2da:	4621      	mov	r1, r4
 801a2dc:	47a8      	blx	r5
 801a2de:	b008      	add	sp, #32
 801a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2e4:	2400b8cc 	.word	0x2400b8cc

0801a2e8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a2e8:	b510      	push	{r4, lr}
 801a2ea:	6803      	ldr	r3, [r0, #0]
 801a2ec:	460c      	mov	r4, r1
 801a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f0:	4798      	blx	r3
 801a2f2:	1b03      	subs	r3, r0, r4
 801a2f4:	4258      	negs	r0, r3
 801a2f6:	4158      	adcs	r0, r3
 801a2f8:	bd10      	pop	{r4, pc}
	...

0801a2fc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a2fc:	4b01      	ldr	r3, [pc, #4]	; (801a304 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a2fe:	6019      	str	r1, [r3, #0]
 801a300:	4770      	bx	lr
 801a302:	bf00      	nop
 801a304:	2400b8d4 	.word	0x2400b8d4

0801a308 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	4696      	mov	lr, r2
 801a30e:	b097      	sub	sp, #92	; 0x5c
 801a310:	4605      	mov	r5, r0
 801a312:	4614      	mov	r4, r2
 801a314:	460e      	mov	r6, r1
 801a316:	461f      	mov	r7, r3
 801a318:	f10d 0c1c 	add.w	ip, sp, #28
 801a31c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801a320:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801a324:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801a328:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a32c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a330:	f8de 3000 	ldr.w	r3, [lr]
 801a334:	f104 0e14 	add.w	lr, r4, #20
 801a338:	f8cc 3000 	str.w	r3, [ip]
 801a33c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a340:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a344:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a348:	f8de 3000 	ldr.w	r3, [lr]
 801a34c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a350:	f8cc 3000 	str.w	r3, [ip]
 801a354:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a35c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a360:	f8de 3000 	ldr.w	r3, [lr]
 801a364:	4631      	mov	r1, r6
 801a366:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a368:	4628      	mov	r0, r5
 801a36a:	f8cc 3000 	str.w	r3, [ip]
 801a36e:	682b      	ldr	r3, [r5, #0]
 801a370:	9201      	str	r2, [sp, #4]
 801a372:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a374:	f8cd 8008 	str.w	r8, [sp, #8]
 801a378:	9200      	str	r2, [sp, #0]
 801a37a:	aa07      	add	r2, sp, #28
 801a37c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a380:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 801a384:	463b      	mov	r3, r7
 801a386:	47d8      	blx	fp
 801a388:	46a6      	mov	lr, r4
 801a38a:	f10d 0c1c 	add.w	ip, sp, #28
 801a38e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a392:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a396:	f8de 3000 	ldr.w	r3, [lr]
 801a39a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801a39e:	343c      	adds	r4, #60	; 0x3c
 801a3a0:	f8cc 3000 	str.w	r3, [ip]
 801a3a4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a3a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3b0:	f8de 3000 	ldr.w	r3, [lr]
 801a3b4:	f8cc 3000 	str.w	r3, [ip]
 801a3b8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801a3bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3c2:	6823      	ldr	r3, [r4, #0]
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	4628      	mov	r0, r5
 801a3c8:	f8cc 3000 	str.w	r3, [ip]
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a3d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801a3d4:	f8cd 8008 	str.w	r8, [sp, #8]
 801a3d8:	9201      	str	r2, [sp, #4]
 801a3da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a3dc:	9200      	str	r2, [sp, #0]
 801a3de:	aa07      	add	r2, sp, #28
 801a3e0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801a3e2:	463b      	mov	r3, r7
 801a3e4:	47a0      	blx	r4
 801a3e6:	b017      	add	sp, #92	; 0x5c
 801a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a3ec <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	4770      	bx	lr

0801a3f0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f4:	b08d      	sub	sp, #52	; 0x34
 801a3f6:	4688      	mov	r8, r1
 801a3f8:	f8d3 c000 	ldr.w	ip, [r3]
 801a3fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a3fe:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801a402:	680f      	ldr	r7, [r1, #0]
 801a404:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801a408:	eba7 070c 	sub.w	r7, r7, ip
 801a40c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801a410:	edd3 6a07 	vldr	s13, [r3, #28]
 801a414:	42bc      	cmp	r4, r7
 801a416:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a418:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801a41c:	bfa8      	it	ge
 801a41e:	463c      	movge	r4, r7
 801a420:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a424:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a428:	ee07 4a90 	vmov	s15, r4
 801a42c:	eb09 0e0c 	add.w	lr, r9, ip
 801a430:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801a434:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a438:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801a43c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801a440:	4571      	cmp	r1, lr
 801a442:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a446:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a44a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a44e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a452:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a456:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a45a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a45e:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a462:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a466:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a46a:	f340 808c 	ble.w	801a586 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a46e:	eba1 060e 	sub.w	r6, r1, lr
 801a472:	fb96 f5f4 	sdiv	r5, r6, r4
 801a476:	ee07 5a10 	vmov	s14, r5
 801a47a:	2d00      	cmp	r5, #0
 801a47c:	fb04 6615 	mls	r6, r4, r5, r6
 801a480:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a484:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a488:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a48c:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a490:	dd12      	ble.n	801a4b8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a492:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a496:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a49a:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a49e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a6:	bf14      	ite	ne
 801a4a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a4ac:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a4b0:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a4b4:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a4b8:	fb05 f204 	mul.w	r2, r5, r4
 801a4bc:	1abf      	subs	r7, r7, r2
 801a4be:	4494      	add	ip, r2
 801a4c0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a4c4:	4411      	add	r1, r2
 801a4c6:	eb09 020c 	add.w	r2, r9, ip
 801a4ca:	b209      	sxth	r1, r1
 801a4cc:	443a      	add	r2, r7
 801a4ce:	428a      	cmp	r2, r1
 801a4d0:	bfc4      	itt	gt
 801a4d2:	eba1 0209 	subgt.w	r2, r1, r9
 801a4d6:	eba2 070c 	subgt.w	r7, r2, ip
 801a4da:	2f00      	cmp	r7, #0
 801a4dc:	dd50      	ble.n	801a580 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a4de:	fb97 f1f4 	sdiv	r1, r7, r4
 801a4e2:	fb04 7211 	mls	r2, r4, r1, r7
 801a4e6:	b90a      	cbnz	r2, 801a4ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a4e8:	3901      	subs	r1, #1
 801a4ea:	4622      	mov	r2, r4
 801a4ec:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a4f0:	6840      	ldr	r0, [r0, #4]
 801a4f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801a4f6:	44b6      	add	lr, r6
 801a4f8:	f8d0 a000 	ldr.w	sl, [r0]
 801a4fc:	2900      	cmp	r1, #0
 801a4fe:	bfcc      	ite	gt
 801a500:	46a1      	movgt	r9, r4
 801a502:	4691      	movle	r9, r2
 801a504:	900b      	str	r0, [sp, #44]	; 0x2c
 801a506:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a508:	fb04 e505 	mla	r5, r4, r5, lr
 801a50c:	eef0 6a42 	vmov.f32	s13, s4
 801a510:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a514:	9008      	str	r0, [sp, #32]
 801a516:	eeb0 7a61 	vmov.f32	s14, s3
 801a51a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801a51c:	695b      	ldr	r3, [r3, #20]
 801a51e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a522:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a526:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a52a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a52c:	445b      	add	r3, fp
 801a52e:	9307      	str	r3, [sp, #28]
 801a530:	ee16 3a90 	vmov	r3, s13
 801a534:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a538:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a53c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a540:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a544:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a548:	ee17 7a90 	vmov	r7, s15
 801a54c:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a550:	fb97 f7f4 	sdiv	r7, r7, r4
 801a554:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a558:	ee17 ca90 	vmov	ip, s15
 801a55c:	fb9c fcf4 	sdiv	ip, ip, r4
 801a560:	fb0c 3306 	mla	r3, ip, r6, r3
 801a564:	9302      	str	r3, [sp, #8]
 801a566:	ee17 3a10 	vmov	r3, s14
 801a56a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a56e:	fb07 3706 	mla	r7, r7, r6, r3
 801a572:	eba9 0306 	sub.w	r3, r9, r6
 801a576:	e9cd 4700 	strd	r4, r7, [sp]
 801a57a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a57e:	47a0      	blx	r4
 801a580:	b00d      	add	sp, #52	; 0x34
 801a582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a586:	2500      	movs	r5, #0
 801a588:	462e      	mov	r6, r5
 801a58a:	e799      	b.n	801a4c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a58c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a590:	b0db      	sub	sp, #364	; 0x16c
 801a592:	461d      	mov	r5, r3
 801a594:	4614      	mov	r4, r2
 801a596:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801a59a:	910f      	str	r1, [sp, #60]	; 0x3c
 801a59c:	4629      	mov	r1, r5
 801a59e:	930a      	str	r3, [sp, #40]	; 0x28
 801a5a0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801a5a4:	9009      	str	r0, [sp, #36]	; 0x24
 801a5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 801a5a8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801a5ac:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801a5b0:	9310      	str	r3, [sp, #64]	; 0x40
 801a5b2:	6803      	ldr	r3, [r0, #0]
 801a5b4:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 801a5b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a5ba:	47b8      	blx	r7
 801a5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5be:	6058      	str	r0, [r3, #4]
 801a5c0:	2800      	cmp	r0, #0
 801a5c2:	f000 83a1 	beq.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5c6:	682b      	ldr	r3, [r5, #0]
 801a5c8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801a5cc:	ed94 7a02 	vldr	s14, [r4, #8]
 801a5d0:	9314      	str	r3, [sp, #80]	; 0x50
 801a5d2:	686b      	ldr	r3, [r5, #4]
 801a5d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a5d8:	9315      	str	r3, [sp, #84]	; 0x54
 801a5da:	4bc1      	ldr	r3, [pc, #772]	; (801a8e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a5dc:	7819      	ldrb	r1, [r3, #0]
 801a5de:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a5e2:	2900      	cmp	r1, #0
 801a5e4:	bf16      	itet	ne
 801a5e6:	4619      	movne	r1, r3
 801a5e8:	4611      	moveq	r1, r2
 801a5ea:	4613      	movne	r3, r2
 801a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f0:	9116      	str	r1, [sp, #88]	; 0x58
 801a5f2:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801a5f6:	f240 8387 	bls.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a5fa:	ed94 7a07 	vldr	s14, [r4, #28]
 801a5fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a606:	f240 837f 	bls.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a60a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801a60e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a616:	f240 8377 	bls.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a61a:	6822      	ldr	r2, [r4, #0]
 801a61c:	4bb1      	ldr	r3, [pc, #708]	; (801a8e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a61e:	429a      	cmp	r2, r3
 801a620:	f2c0 8372 	blt.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a624:	49b0      	ldr	r1, [pc, #704]	; (801a8e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a626:	6963      	ldr	r3, [r4, #20]
 801a628:	428a      	cmp	r2, r1
 801a62a:	f300 836d 	bgt.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a62e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a632:	48ae      	ldr	r0, [pc, #696]	; (801a8ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a634:	33ff      	adds	r3, #255	; 0xff
 801a636:	4283      	cmp	r3, r0
 801a638:	f200 8366 	bhi.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a63c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a63e:	4dac      	ldr	r5, [pc, #688]	; (801a8f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a640:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801a644:	33ff      	adds	r3, #255	; 0xff
 801a646:	42ab      	cmp	r3, r5
 801a648:	f200 835e 	bhi.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a64c:	6862      	ldr	r2, [r4, #4]
 801a64e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801a652:	33ff      	adds	r3, #255	; 0xff
 801a654:	4283      	cmp	r3, r0
 801a656:	f200 8357 	bhi.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a65a:	69a1      	ldr	r1, [r4, #24]
 801a65c:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801a660:	33ff      	adds	r3, #255	; 0xff
 801a662:	4283      	cmp	r3, r0
 801a664:	f200 8350 	bhi.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a66a:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801a66e:	30ff      	adds	r0, #255	; 0xff
 801a670:	42a8      	cmp	r0, r5
 801a672:	f200 8349 	bhi.w	801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a676:	428a      	cmp	r2, r1
 801a678:	f280 8110 	bge.w	801a89c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a67c:	429a      	cmp	r2, r3
 801a67e:	f300 8119 	bgt.w	801a8b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a682:	4299      	cmp	r1, r3
 801a684:	f280 811d 	bge.w	801a8c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a688:	2502      	movs	r5, #2
 801a68a:	2701      	movs	r7, #1
 801a68c:	46a9      	mov	r9, r5
 801a68e:	46b8      	mov	r8, r7
 801a690:	f04f 0a00 	mov.w	sl, #0
 801a694:	4621      	mov	r1, r4
 801a696:	a849      	add	r0, sp, #292	; 0x124
 801a698:	f003 fd92 	bl	801e1c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a69c:	4622      	mov	r2, r4
 801a69e:	4653      	mov	r3, sl
 801a6a0:	a949      	add	r1, sp, #292	; 0x124
 801a6a2:	f8cd 9000 	str.w	r9, [sp]
 801a6a6:	a819      	add	r0, sp, #100	; 0x64
 801a6a8:	f003 feba 	bl	801e420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6ac:	4622      	mov	r2, r4
 801a6ae:	4653      	mov	r3, sl
 801a6b0:	a949      	add	r1, sp, #292	; 0x124
 801a6b2:	f8cd 8000 	str.w	r8, [sp]
 801a6b6:	a829      	add	r0, sp, #164	; 0xa4
 801a6b8:	f003 feb2 	bl	801e420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6bc:	4643      	mov	r3, r8
 801a6be:	4622      	mov	r2, r4
 801a6c0:	a949      	add	r1, sp, #292	; 0x124
 801a6c2:	f8cd 9000 	str.w	r9, [sp]
 801a6c6:	a839      	add	r0, sp, #228	; 0xe4
 801a6c8:	f003 feaa 	bl	801e420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a6cc:	42af      	cmp	r7, r5
 801a6ce:	af12      	add	r7, sp, #72	; 0x48
 801a6d0:	bfb7      	itett	lt
 801a6d2:	2300      	movlt	r3, #0
 801a6d4:	2301      	movge	r3, #1
 801a6d6:	ad29      	addlt	r5, sp, #164	; 0xa4
 801a6d8:	ac19      	addlt	r4, sp, #100	; 0x64
 801a6da:	bfb1      	iteee	lt
 801a6dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801a6de:	ad19      	addge	r5, sp, #100	; 0x64
 801a6e0:	930e      	strge	r3, [sp, #56]	; 0x38
 801a6e2:	ac29      	addge	r4, sp, #164	; 0xa4
 801a6e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a6e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a6ea:	e887 0003 	stmia.w	r7, {r0, r1}
 801a6ee:	b928      	cbnz	r0, 801a6fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a6f0:	4b80      	ldr	r3, [pc, #512]	; (801a8f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a6f2:	6818      	ldr	r0, [r3, #0]
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6f8:	4798      	blx	r3
 801a6fa:	6038      	str	r0, [r7, #0]
 801a6fc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a6fe:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a702:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a706:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801a708:	930c      	str	r3, [sp, #48]	; 0x30
 801a70a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a70c:	6963      	ldr	r3, [r4, #20]
 801a70e:	440b      	add	r3, r1
 801a710:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a714:	4408      	add	r0, r1
 801a716:	b200      	sxth	r0, r0
 801a718:	4283      	cmp	r3, r0
 801a71a:	900d      	str	r0, [sp, #52]	; 0x34
 801a71c:	f280 80dd 	bge.w	801a8da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a720:	428b      	cmp	r3, r1
 801a722:	da08      	bge.n	801a736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a724:	2a00      	cmp	r2, #0
 801a726:	dd06      	ble.n	801a736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a728:	1acb      	subs	r3, r1, r3
 801a72a:	429a      	cmp	r2, r3
 801a72c:	f2c0 80e4 	blt.w	801a8f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a730:	2b00      	cmp	r3, #0
 801a732:	f300 80e2 	bgt.w	801a8fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a736:	6967      	ldr	r7, [r4, #20]
 801a738:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a73c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a73e:	443b      	add	r3, r7
 801a740:	461f      	mov	r7, r3
 801a742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a744:	1bdf      	subs	r7, r3, r7
 801a746:	4297      	cmp	r7, r2
 801a748:	bfa8      	it	ge
 801a74a:	4617      	movge	r7, r2
 801a74c:	2f00      	cmp	r7, #0
 801a74e:	f340 8166 	ble.w	801aa1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a752:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a754:	6829      	ldr	r1, [r5, #0]
 801a756:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a75a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a75e:	4411      	add	r1, r2
 801a760:	6820      	ldr	r0, [r4, #0]
 801a762:	4299      	cmp	r1, r3
 801a764:	dd1a      	ble.n	801a79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a766:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a76a:	4402      	add	r2, r0
 801a76c:	440b      	add	r3, r1
 801a76e:	b21b      	sxth	r3, r3
 801a770:	429a      	cmp	r2, r3
 801a772:	dc13      	bgt.n	801a79c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a776:	a912      	add	r1, sp, #72	; 0x48
 801a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a77a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	9206      	str	r2, [sp, #24]
 801a780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a782:	9500      	str	r5, [sp, #0]
 801a784:	9205      	str	r2, [sp, #20]
 801a786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a788:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a78c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a78e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a792:	aa49      	add	r2, sp, #292	; 0x124
 801a794:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801a798:	4623      	mov	r3, r4
 801a79a:	47c8      	blx	r9
 801a79c:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a7a0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a7a4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a7a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a7ac:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a7b0:	68a1      	ldr	r1, [r4, #8]
 801a7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a7b6:	ed94 6a08 	vldr	s12, [r4, #32]
 801a7ba:	edd4 6a07 	vldr	s13, [r4, #28]
 801a7be:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a7c2:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a7c6:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a7ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a7ce:	edc4 6a07 	vstr	s13, [r4, #28]
 801a7d2:	441a      	add	r2, r3
 801a7d4:	6963      	ldr	r3, [r4, #20]
 801a7d6:	3301      	adds	r3, #1
 801a7d8:	6022      	str	r2, [r4, #0]
 801a7da:	6163      	str	r3, [r4, #20]
 801a7dc:	69a3      	ldr	r3, [r4, #24]
 801a7de:	3b01      	subs	r3, #1
 801a7e0:	61a3      	str	r3, [r4, #24]
 801a7e2:	6923      	ldr	r3, [r4, #16]
 801a7e4:	440b      	add	r3, r1
 801a7e6:	68e1      	ldr	r1, [r4, #12]
 801a7e8:	428b      	cmp	r3, r1
 801a7ea:	6123      	str	r3, [r4, #16]
 801a7ec:	db15      	blt.n	801a81a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a7ee:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a7f2:	3201      	adds	r2, #1
 801a7f4:	1a5b      	subs	r3, r3, r1
 801a7f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a7fa:	6022      	str	r2, [r4, #0]
 801a7fc:	6123      	str	r3, [r4, #16]
 801a7fe:	edc4 6a07 	vstr	s13, [r4, #28]
 801a802:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a806:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a80a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a80e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a812:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a816:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a81a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a81e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a822:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a826:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a82a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a82e:	68a9      	ldr	r1, [r5, #8]
 801a830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a834:	ed95 6a08 	vldr	s12, [r5, #32]
 801a838:	edd5 6a07 	vldr	s13, [r5, #28]
 801a83c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a840:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a844:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a848:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a84c:	edc5 6a07 	vstr	s13, [r5, #28]
 801a850:	441a      	add	r2, r3
 801a852:	696b      	ldr	r3, [r5, #20]
 801a854:	3301      	adds	r3, #1
 801a856:	602a      	str	r2, [r5, #0]
 801a858:	616b      	str	r3, [r5, #20]
 801a85a:	69ab      	ldr	r3, [r5, #24]
 801a85c:	3b01      	subs	r3, #1
 801a85e:	61ab      	str	r3, [r5, #24]
 801a860:	692b      	ldr	r3, [r5, #16]
 801a862:	440b      	add	r3, r1
 801a864:	68e9      	ldr	r1, [r5, #12]
 801a866:	428b      	cmp	r3, r1
 801a868:	612b      	str	r3, [r5, #16]
 801a86a:	db15      	blt.n	801a898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a86c:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a870:	3201      	adds	r2, #1
 801a872:	1a5b      	subs	r3, r3, r1
 801a874:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a878:	602a      	str	r2, [r5, #0]
 801a87a:	612b      	str	r3, [r5, #16]
 801a87c:	edc5 6a07 	vstr	s13, [r5, #28]
 801a880:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a884:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a888:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a88c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a890:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a894:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a898:	3f01      	subs	r7, #1
 801a89a:	e757      	b.n	801a74c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a89c:	4299      	cmp	r1, r3
 801a89e:	dc13      	bgt.n	801a8c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a8a0:	429a      	cmp	r2, r3
 801a8a2:	da14      	bge.n	801a8ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a8a4:	2502      	movs	r5, #2
 801a8a6:	2703      	movs	r7, #3
 801a8a8:	f04f 0800 	mov.w	r8, #0
 801a8ac:	46a9      	mov	r9, r5
 801a8ae:	f04f 0a01 	mov.w	sl, #1
 801a8b2:	e6ef      	b.n	801a694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a8b4:	2501      	movs	r5, #1
 801a8b6:	2700      	movs	r7, #0
 801a8b8:	46a9      	mov	r9, r5
 801a8ba:	46b8      	mov	r8, r7
 801a8bc:	f04f 0a02 	mov.w	sl, #2
 801a8c0:	e6e8      	b.n	801a694 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a8c2:	2501      	movs	r5, #1
 801a8c4:	2702      	movs	r7, #2
 801a8c6:	e6e1      	b.n	801a68c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a8c8:	2500      	movs	r5, #0
 801a8ca:	2701      	movs	r7, #1
 801a8cc:	e7f4      	b.n	801a8b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a8ce:	2702      	movs	r7, #2
 801a8d0:	2503      	movs	r5, #3
 801a8d2:	f04f 0900 	mov.w	r9, #0
 801a8d6:	46b8      	mov	r8, r7
 801a8d8:	e7e9      	b.n	801a8ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a8da:	4613      	mov	r3, r2
 801a8dc:	e728      	b.n	801a730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a8de:	bf00      	nop
 801a8e0:	2400b8c4 	.word	0x2400b8c4
 801a8e4:	fffd8f01 	.word	0xfffd8f01
 801a8e8:	00027100 	.word	0x00027100
 801a8ec:	0004e1ff 	.word	0x0004e1ff
 801a8f0:	0004e1fe 	.word	0x0004e1fe
 801a8f4:	2400b8cc 	.word	0x2400b8cc
 801a8f8:	4613      	mov	r3, r2
 801a8fa:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a8fc:	469e      	mov	lr, r3
 801a8fe:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a900:	469c      	mov	ip, r3
 801a902:	9111      	str	r1, [sp, #68]	; 0x44
 801a904:	f04f 0900 	mov.w	r9, #0
 801a908:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a90c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a910:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a914:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a918:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a91c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a920:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a924:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a928:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a92c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a930:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a934:	f1bc 0f00 	cmp.w	ip, #0
 801a938:	d147      	bne.n	801a9ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a93a:	eb03 0c07 	add.w	ip, r3, r7
 801a93e:	1ad7      	subs	r7, r2, r3
 801a940:	f1b9 0f00 	cmp.w	r9, #0
 801a944:	d009      	beq.n	801a95a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a946:	9029      	str	r0, [sp, #164]	; 0xa4
 801a948:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a94c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a950:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a954:	912d      	str	r1, [sp, #180]	; 0xb4
 801a956:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a95a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a95c:	f04f 0800 	mov.w	r8, #0
 801a960:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a964:	9111      	str	r1, [sp, #68]	; 0x44
 801a966:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a96a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a96e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a972:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a976:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a97a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a97e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a982:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a986:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a98a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a98e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a992:	f1be 0f00 	cmp.w	lr, #0
 801a996:	d031      	beq.n	801a9fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a998:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a99a:	4450      	add	r0, sl
 801a99c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a9a0:	4431      	add	r1, r6
 801a9a2:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a9a6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a9aa:	4549      	cmp	r1, r9
 801a9ac:	db08      	blt.n	801a9c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a9ae:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a9b2:	3001      	adds	r0, #1
 801a9b4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a9b8:	eba1 0109 	sub.w	r1, r1, r9
 801a9bc:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a9c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a9c4:	f04f 0801 	mov.w	r8, #1
 801a9c8:	e7e3      	b.n	801a992 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a9ca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a9cc:	4450      	add	r0, sl
 801a9ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a9d2:	4431      	add	r1, r6
 801a9d4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a9d8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a9dc:	4541      	cmp	r1, r8
 801a9de:	db08      	blt.n	801a9f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a9e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a9e4:	3001      	adds	r0, #1
 801a9e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a9ea:	eba1 0108 	sub.w	r1, r1, r8
 801a9ee:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a9f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a9f6:	f04f 0901 	mov.w	r9, #1
 801a9fa:	e79b      	b.n	801a934 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a9fc:	449c      	add	ip, r3
 801a9fe:	1aff      	subs	r7, r7, r3
 801aa00:	f1b8 0f00 	cmp.w	r8, #0
 801aa04:	d009      	beq.n	801aa1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801aa06:	9019      	str	r0, [sp, #100]	; 0x64
 801aa08:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801aa0c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801aa10:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801aa14:	911d      	str	r1, [sp, #116]	; 0x74
 801aa16:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801aa1a:	1ad2      	subs	r2, r2, r3
 801aa1c:	e68b      	b.n	801a736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aa1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aa20:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	f000 80d1 	beq.w	801abca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801aa28:	ad19      	add	r5, sp, #100	; 0x64
 801aa2a:	ac39      	add	r4, sp, #228	; 0xe4
 801aa2c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa2e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aa32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aa36:	930c      	str	r3, [sp, #48]	; 0x30
 801aa38:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa3a:	6963      	ldr	r3, [r4, #20]
 801aa3c:	440b      	add	r3, r1
 801aa3e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aa42:	4408      	add	r0, r1
 801aa44:	b200      	sxth	r0, r0
 801aa46:	4283      	cmp	r3, r0
 801aa48:	900d      	str	r0, [sp, #52]	; 0x34
 801aa4a:	f280 80c1 	bge.w	801abd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801aa4e:	428b      	cmp	r3, r1
 801aa50:	da08      	bge.n	801aa64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa52:	2a00      	cmp	r2, #0
 801aa54:	dd06      	ble.n	801aa64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aa56:	1acb      	subs	r3, r1, r3
 801aa58:	429a      	cmp	r2, r3
 801aa5a:	f2c0 80bb 	blt.w	801abd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	f300 80b9 	bgt.w	801abd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801aa64:	6967      	ldr	r7, [r4, #20]
 801aa66:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801aa6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa6c:	443b      	add	r3, r7
 801aa6e:	461f      	mov	r7, r3
 801aa70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa72:	1bdf      	subs	r7, r3, r7
 801aa74:	4297      	cmp	r7, r2
 801aa76:	bfa8      	it	ge
 801aa78:	4617      	movge	r7, r2
 801aa7a:	2f00      	cmp	r7, #0
 801aa7c:	f340 813c 	ble.w	801acf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801aa80:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801aa82:	6829      	ldr	r1, [r5, #0]
 801aa84:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa88:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aa8c:	4411      	add	r1, r2
 801aa8e:	6820      	ldr	r0, [r4, #0]
 801aa90:	4299      	cmp	r1, r3
 801aa92:	dd1a      	ble.n	801aaca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aa94:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801aa98:	4402      	add	r2, r0
 801aa9a:	440b      	add	r3, r1
 801aa9c:	b21b      	sxth	r3, r3
 801aa9e:	429a      	cmp	r2, r3
 801aaa0:	dc13      	bgt.n	801aaca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aaa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801aaa4:	a912      	add	r1, sp, #72	; 0x48
 801aaa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	9206      	str	r2, [sp, #24]
 801aaae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801aab0:	9500      	str	r5, [sp, #0]
 801aab2:	9205      	str	r2, [sp, #20]
 801aab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aab6:	e9cd b203 	strd	fp, r2, [sp, #12]
 801aaba:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aabc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801aac0:	aa49      	add	r2, sp, #292	; 0x124
 801aac2:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801aac6:	4623      	mov	r3, r4
 801aac8:	47c8      	blx	r9
 801aaca:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801aace:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801aad2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801aad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aada:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801aade:	68a1      	ldr	r1, [r4, #8]
 801aae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aae4:	ed94 6a08 	vldr	s12, [r4, #32]
 801aae8:	edd4 6a07 	vldr	s13, [r4, #28]
 801aaec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801aaf0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801aaf4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801aaf8:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aafc:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab00:	441a      	add	r2, r3
 801ab02:	6963      	ldr	r3, [r4, #20]
 801ab04:	3301      	adds	r3, #1
 801ab06:	6022      	str	r2, [r4, #0]
 801ab08:	6163      	str	r3, [r4, #20]
 801ab0a:	69a3      	ldr	r3, [r4, #24]
 801ab0c:	3b01      	subs	r3, #1
 801ab0e:	61a3      	str	r3, [r4, #24]
 801ab10:	6923      	ldr	r3, [r4, #16]
 801ab12:	440b      	add	r3, r1
 801ab14:	68e1      	ldr	r1, [r4, #12]
 801ab16:	428b      	cmp	r3, r1
 801ab18:	6123      	str	r3, [r4, #16]
 801ab1a:	db15      	blt.n	801ab48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ab1c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801ab20:	3201      	adds	r2, #1
 801ab22:	1a5b      	subs	r3, r3, r1
 801ab24:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ab28:	6022      	str	r2, [r4, #0]
 801ab2a:	6123      	str	r3, [r4, #16]
 801ab2c:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab30:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ab34:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ab38:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ab3c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ab40:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ab44:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ab48:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ab4c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ab50:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ab54:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab58:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ab5c:	68a9      	ldr	r1, [r5, #8]
 801ab5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab62:	ed95 6a08 	vldr	s12, [r5, #32]
 801ab66:	edd5 6a07 	vldr	s13, [r5, #28]
 801ab6a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ab6e:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ab72:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ab76:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab7a:	edc5 6a07 	vstr	s13, [r5, #28]
 801ab7e:	441a      	add	r2, r3
 801ab80:	696b      	ldr	r3, [r5, #20]
 801ab82:	3301      	adds	r3, #1
 801ab84:	602a      	str	r2, [r5, #0]
 801ab86:	616b      	str	r3, [r5, #20]
 801ab88:	69ab      	ldr	r3, [r5, #24]
 801ab8a:	3b01      	subs	r3, #1
 801ab8c:	61ab      	str	r3, [r5, #24]
 801ab8e:	692b      	ldr	r3, [r5, #16]
 801ab90:	440b      	add	r3, r1
 801ab92:	68e9      	ldr	r1, [r5, #12]
 801ab94:	428b      	cmp	r3, r1
 801ab96:	612b      	str	r3, [r5, #16]
 801ab98:	db15      	blt.n	801abc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801ab9a:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ab9e:	3201      	adds	r2, #1
 801aba0:	1a5b      	subs	r3, r3, r1
 801aba2:	ee76 6a26 	vadd.f32	s13, s12, s13
 801aba6:	602a      	str	r2, [r5, #0]
 801aba8:	612b      	str	r3, [r5, #16]
 801abaa:	edc5 6a07 	vstr	s13, [r5, #28]
 801abae:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801abb2:	ee36 7a87 	vadd.f32	s14, s13, s14
 801abb6:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801abba:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801abbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 801abc2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801abc6:	3f01      	subs	r7, #1
 801abc8:	e757      	b.n	801aa7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801abca:	ad39      	add	r5, sp, #228	; 0xe4
 801abcc:	ac19      	add	r4, sp, #100	; 0x64
 801abce:	e72d      	b.n	801aa2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801abd0:	4613      	mov	r3, r2
 801abd2:	e744      	b.n	801aa5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801abd4:	4613      	mov	r3, r2
 801abd6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801abd8:	469e      	mov	lr, r3
 801abda:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801abde:	461f      	mov	r7, r3
 801abe0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801abe4:	f04f 0900 	mov.w	r9, #0
 801abe8:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801abec:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801abf0:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801abf4:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801abf8:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801abfc:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801abfe:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801ac02:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801ac06:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801ac0a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801ac0e:	960e      	str	r6, [sp, #56]	; 0x38
 801ac10:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801ac14:	2f00      	cmp	r7, #0
 801ac16:	d146      	bne.n	801aca6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ac18:	449c      	add	ip, r3
 801ac1a:	1ad7      	subs	r7, r2, r3
 801ac1c:	f1b9 0f00 	cmp.w	r9, #0
 801ac20:	d009      	beq.n	801ac36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ac22:	9039      	str	r0, [sp, #228]	; 0xe4
 801ac24:	913d      	str	r1, [sp, #244]	; 0xf4
 801ac26:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801ac2a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801ac2e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801ac32:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801ac36:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801ac38:	f04f 0800 	mov.w	r8, #0
 801ac3c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801ac40:	910e      	str	r1, [sp, #56]	; 0x38
 801ac42:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801ac46:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801ac4a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801ac4e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801ac52:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801ac56:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801ac5a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801ac5e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801ac62:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801ac66:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801ac6a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801ac6e:	f1be 0f00 	cmp.w	lr, #0
 801ac72:	d030      	beq.n	801acd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801ac74:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ac76:	4450      	add	r0, sl
 801ac78:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801ac7c:	4431      	add	r1, r6
 801ac7e:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ac82:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ac86:	4549      	cmp	r1, r9
 801ac88:	db08      	blt.n	801ac9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801ac8a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801ac8e:	3001      	adds	r0, #1
 801ac90:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801ac94:	eba1 0109 	sub.w	r1, r1, r9
 801ac98:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ac9c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aca0:	f04f 0801 	mov.w	r8, #1
 801aca4:	e7e3      	b.n	801ac6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801aca6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801aca8:	4450      	add	r0, sl
 801acaa:	ee37 7a24 	vadd.f32	s14, s14, s9
 801acae:	4431      	add	r1, r6
 801acb0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801acb4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801acb8:	4541      	cmp	r1, r8
 801acba:	db08      	blt.n	801acce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801acbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801acc0:	3001      	adds	r0, #1
 801acc2:	ee37 7a25 	vadd.f32	s14, s14, s11
 801acc6:	eba1 0108 	sub.w	r1, r1, r8
 801acca:	ee77 7a86 	vadd.f32	s15, s15, s12
 801acce:	3f01      	subs	r7, #1
 801acd0:	f04f 0901 	mov.w	r9, #1
 801acd4:	e79e      	b.n	801ac14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801acd6:	449c      	add	ip, r3
 801acd8:	1aff      	subs	r7, r7, r3
 801acda:	f1b8 0f00 	cmp.w	r8, #0
 801acde:	d009      	beq.n	801acf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801ace0:	9019      	str	r0, [sp, #100]	; 0x64
 801ace2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801ace6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801acea:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801acee:	911d      	str	r1, [sp, #116]	; 0x74
 801acf0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801acf4:	1ad2      	subs	r2, r2, r3
 801acf6:	e6b5      	b.n	801aa64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801acf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	b923      	cbnz	r3, 801ad08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801acfe:	4b04      	ldr	r3, [pc, #16]	; (801ad10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801ad00:	6818      	ldr	r0, [r3, #0]
 801ad02:	6803      	ldr	r3, [r0, #0]
 801ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ad06:	4798      	blx	r3
 801ad08:	b05b      	add	sp, #364	; 0x16c
 801ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad0e:	bf00      	nop
 801ad10:	2400b8cc 	.word	0x2400b8cc

0801ad14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801ad14:	b570      	push	{r4, r5, r6, lr}
 801ad16:	4604      	mov	r4, r0
 801ad18:	2500      	movs	r5, #0
 801ad1a:	9804      	ldr	r0, [sp, #16]
 801ad1c:	7223      	strb	r3, [r4, #8]
 801ad1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ad22:	8025      	strh	r5, [r4, #0]
 801ad24:	6061      	str	r1, [r4, #4]
 801ad26:	7263      	strb	r3, [r4, #9]
 801ad28:	60e0      	str	r0, [r4, #12]
 801ad2a:	8222      	strh	r2, [r4, #16]
 801ad2c:	8265      	strh	r5, [r4, #18]
 801ad2e:	82a5      	strh	r5, [r4, #20]
 801ad30:	82e5      	strh	r5, [r4, #22]
 801ad32:	8325      	strh	r5, [r4, #24]
 801ad34:	8365      	strh	r5, [r4, #26]
 801ad36:	83a5      	strh	r5, [r4, #28]
 801ad38:	77a5      	strb	r5, [r4, #30]
 801ad3a:	6803      	ldr	r3, [r0, #0]
 801ad3c:	695b      	ldr	r3, [r3, #20]
 801ad3e:	4798      	blx	r3
 801ad40:	4606      	mov	r6, r0
 801ad42:	b1f8      	cbz	r0, 801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801ad44:	68e0      	ldr	r0, [r4, #12]
 801ad46:	4631      	mov	r1, r6
 801ad48:	6803      	ldr	r3, [r0, #0]
 801ad4a:	68db      	ldr	r3, [r3, #12]
 801ad4c:	4798      	blx	r3
 801ad4e:	7b43      	ldrb	r3, [r0, #13]
 801ad50:	7a82      	ldrb	r2, [r0, #10]
 801ad52:	4605      	mov	r5, r0
 801ad54:	005b      	lsls	r3, r3, #1
 801ad56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ad5a:	4313      	orrs	r3, r2
 801ad5c:	83a3      	strh	r3, [r4, #28]
 801ad5e:	7a63      	ldrb	r3, [r4, #9]
 801ad60:	2b04      	cmp	r3, #4
 801ad62:	d10f      	bne.n	801ad84 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801ad64:	68e0      	ldr	r0, [r4, #12]
 801ad66:	462a      	mov	r2, r5
 801ad68:	4631      	mov	r1, r6
 801ad6a:	6803      	ldr	r3, [r0, #0]
 801ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad6e:	4798      	blx	r3
 801ad70:	7b6b      	ldrb	r3, [r5, #13]
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ad78:	7aab      	ldrb	r3, [r5, #10]
 801ad7a:	4313      	orrs	r3, r2
 801ad7c:	4418      	add	r0, r3
 801ad7e:	8ba3      	ldrh	r3, [r4, #28]
 801ad80:	4418      	add	r0, r3
 801ad82:	83a0      	strh	r0, [r4, #28]
 801ad84:	4620      	mov	r0, r4
 801ad86:	bd70      	pop	{r4, r5, r6, pc}

0801ad88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad8c:	2400      	movs	r4, #0
 801ad8e:	b085      	sub	sp, #20
 801ad90:	4681      	mov	r9, r0
 801ad92:	4688      	mov	r8, r1
 801ad94:	4692      	mov	sl, r2
 801ad96:	469b      	mov	fp, r3
 801ad98:	4627      	mov	r7, r4
 801ad9a:	4625      	mov	r5, r4
 801ad9c:	4626      	mov	r6, r4
 801ad9e:	4554      	cmp	r4, sl
 801ada0:	da2a      	bge.n	801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ada2:	2300      	movs	r3, #0
 801ada4:	9303      	str	r3, [sp, #12]
 801ada6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801adaa:	429d      	cmp	r5, r3
 801adac:	d004      	beq.n	801adb8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801adae:	f242 030b 	movw	r3, #8203	; 0x200b
 801adb2:	429d      	cmp	r5, r3
 801adb4:	bf18      	it	ne
 801adb6:	462f      	movne	r7, r5
 801adb8:	ab03      	add	r3, sp, #12
 801adba:	4642      	mov	r2, r8
 801adbc:	4659      	mov	r1, fp
 801adbe:	4648      	mov	r0, r9
 801adc0:	f002 ff82 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adc4:	4605      	mov	r5, r0
 801adc6:	b1b8      	cbz	r0, 801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801adc8:	280a      	cmp	r0, #10
 801adca:	d015      	beq.n	801adf8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801adcc:	9a03      	ldr	r2, [sp, #12]
 801adce:	b18a      	cbz	r2, 801adf4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801add0:	7b50      	ldrb	r0, [r2, #13]
 801add2:	4639      	mov	r1, r7
 801add4:	7a93      	ldrb	r3, [r2, #10]
 801add6:	0040      	lsls	r0, r0, #1
 801add8:	8895      	ldrh	r5, [r2, #4]
 801adda:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801adde:	4303      	orrs	r3, r0
 801ade0:	4640      	mov	r0, r8
 801ade2:	9301      	str	r3, [sp, #4]
 801ade4:	f8d8 3000 	ldr.w	r3, [r8]
 801ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801adea:	4798      	blx	r3
 801adec:	9b01      	ldr	r3, [sp, #4]
 801adee:	4418      	add	r0, r3
 801adf0:	4406      	add	r6, r0
 801adf2:	b2b6      	uxth	r6, r6
 801adf4:	3401      	adds	r4, #1
 801adf6:	e7d2      	b.n	801ad9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801adf8:	4630      	mov	r0, r6
 801adfa:	b005      	add	sp, #20
 801adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ae00:	2a02      	cmp	r2, #2
 801ae02:	b530      	push	{r4, r5, lr}
 801ae04:	d011      	beq.n	801ae2a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ae06:	2a03      	cmp	r2, #3
 801ae08:	d01c      	beq.n	801ae44 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ae0a:	2a01      	cmp	r2, #1
 801ae0c:	d10c      	bne.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ae0e:	888b      	ldrh	r3, [r1, #4]
 801ae10:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ae14:	8801      	ldrh	r1, [r0, #0]
 801ae16:	1a9b      	subs	r3, r3, r2
 801ae18:	8844      	ldrh	r4, [r0, #2]
 801ae1a:	1a5b      	subs	r3, r3, r1
 801ae1c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ae20:	8004      	strh	r4, [r0, #0]
 801ae22:	8043      	strh	r3, [r0, #2]
 801ae24:	8081      	strh	r1, [r0, #4]
 801ae26:	80c2      	strh	r2, [r0, #6]
 801ae28:	bd30      	pop	{r4, r5, pc}
 801ae2a:	88cb      	ldrh	r3, [r1, #6]
 801ae2c:	88c2      	ldrh	r2, [r0, #6]
 801ae2e:	1a9b      	subs	r3, r3, r2
 801ae30:	8842      	ldrh	r2, [r0, #2]
 801ae32:	1a9b      	subs	r3, r3, r2
 801ae34:	888a      	ldrh	r2, [r1, #4]
 801ae36:	8881      	ldrh	r1, [r0, #4]
 801ae38:	8043      	strh	r3, [r0, #2]
 801ae3a:	1a52      	subs	r2, r2, r1
 801ae3c:	8801      	ldrh	r1, [r0, #0]
 801ae3e:	1a52      	subs	r2, r2, r1
 801ae40:	8002      	strh	r2, [r0, #0]
 801ae42:	e7f1      	b.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ae44:	88cb      	ldrh	r3, [r1, #6]
 801ae46:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801ae4a:	8841      	ldrh	r1, [r0, #2]
 801ae4c:	1a9b      	subs	r3, r3, r2
 801ae4e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ae52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ae56:	1a5b      	subs	r3, r3, r1
 801ae58:	8045      	strh	r5, [r0, #2]
 801ae5a:	8082      	strh	r2, [r0, #4]
 801ae5c:	8003      	strh	r3, [r0, #0]
 801ae5e:	80c4      	strh	r4, [r0, #6]
 801ae60:	e7e2      	b.n	801ae28 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801ae62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801ae62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae66:	b09f      	sub	sp, #124	; 0x7c
 801ae68:	9116      	str	r1, [sp, #88]	; 0x58
 801ae6a:	9317      	str	r3, [sp, #92]	; 0x5c
 801ae6c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ae6e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ae70:	8809      	ldrh	r1, [r1, #0]
 801ae72:	889b      	ldrh	r3, [r3, #4]
 801ae74:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801ae78:	440b      	add	r3, r1
 801ae7a:	9212      	str	r2, [sp, #72]	; 0x48
 801ae7c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801ae80:	b21b      	sxth	r3, r3
 801ae82:	9011      	str	r0, [sp, #68]	; 0x44
 801ae84:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801ae88:	9310      	str	r3, [sp, #64]	; 0x40
 801ae8a:	f8d8 3000 	ldr.w	r3, [r8]
 801ae8e:	7a59      	ldrb	r1, [r3, #9]
 801ae90:	7a1b      	ldrb	r3, [r3, #8]
 801ae92:	9114      	str	r1, [sp, #80]	; 0x50
 801ae94:	9315      	str	r3, [sp, #84]	; 0x54
 801ae96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae98:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ae9c:	2a00      	cmp	r2, #0
 801ae9e:	d067      	beq.n	801af70 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801aea0:	f898 3010 	ldrb.w	r3, [r8, #16]
 801aea4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801aea6:	2b04      	cmp	r3, #4
 801aea8:	bf14      	ite	ne
 801aeaa:	2301      	movne	r3, #1
 801aeac:	2302      	moveq	r3, #2
 801aeae:	4413      	add	r3, r2
 801aeb0:	f04f 0900 	mov.w	r9, #0
 801aeb4:	930f      	str	r3, [sp, #60]	; 0x3c
 801aeb6:	464c      	mov	r4, r9
 801aeb8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801aebc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801aec0:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801aec4:	4293      	cmp	r3, r2
 801aec6:	f280 808c 	bge.w	801afe2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801aeca:	2300      	movs	r3, #0
 801aecc:	931c      	str	r3, [sp, #112]	; 0x70
 801aece:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801aed2:	429c      	cmp	r4, r3
 801aed4:	d006      	beq.n	801aee4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801aed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aed8:	f242 020b 	movw	r2, #8203	; 0x200b
 801aedc:	4294      	cmp	r4, r2
 801aede:	bf18      	it	ne
 801aee0:	4623      	movne	r3, r4
 801aee2:	930d      	str	r3, [sp, #52]	; 0x34
 801aee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aee6:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801aee8:	f8d8 2000 	ldr.w	r2, [r8]
 801aeec:	428b      	cmp	r3, r1
 801aeee:	db41      	blt.n	801af74 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801aef0:	6813      	ldr	r3, [r2, #0]
 801aef2:	4610      	mov	r0, r2
 801aef4:	695b      	ldr	r3, [r3, #20]
 801aef6:	4798      	blx	r3
 801aef8:	4604      	mov	r4, r0
 801aefa:	f8d8 0000 	ldr.w	r0, [r8]
 801aefe:	aa1d      	add	r2, sp, #116	; 0x74
 801af00:	4621      	mov	r1, r4
 801af02:	6803      	ldr	r3, [r0, #0]
 801af04:	689e      	ldr	r6, [r3, #8]
 801af06:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801af0a:	47b0      	blx	r6
 801af0c:	901c      	str	r0, [sp, #112]	; 0x70
 801af0e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af12:	429c      	cmp	r4, r3
 801af14:	f000 80ea 	beq.w	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801af18:	f242 030b 	movw	r3, #8203	; 0x200b
 801af1c:	429c      	cmp	r4, r3
 801af1e:	f000 80e5 	beq.w	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801af22:	2c00      	cmp	r4, #0
 801af24:	f000 80f7 	beq.w	801b116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801af28:	2c0a      	cmp	r4, #10
 801af2a:	d060      	beq.n	801afee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801af2c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801af2e:	b36a      	cbz	r2, 801af8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801af30:	8894      	ldrh	r4, [r2, #4]
 801af32:	f1bb 0f00 	cmp.w	fp, #0
 801af36:	d03b      	beq.n	801afb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801af38:	f892 900d 	ldrb.w	r9, [r2, #13]
 801af3c:	f1bb 0f01 	cmp.w	fp, #1
 801af40:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801af44:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801af48:	f892 900a 	ldrb.w	r9, [r2, #10]
 801af4c:	ea49 0903 	orr.w	r9, r9, r3
 801af50:	d134      	bne.n	801afbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801af52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af54:	eba5 0509 	sub.w	r5, r5, r9
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d14f      	bne.n	801affc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801af5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801af5e:	eb09 0305 	add.w	r3, r9, r5
 801af62:	4413      	add	r3, r2
 801af64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801af66:	f9b2 2000 	ldrsh.w	r2, [r2]
 801af6a:	4293      	cmp	r3, r2
 801af6c:	da51      	bge.n	801b012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801af6e:	e038      	b.n	801afe2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801af70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801af72:	e79d      	b.n	801aeb0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801af74:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801af78:	4659      	mov	r1, fp
 801af7a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801af7c:	9301      	str	r3, [sp, #4]
 801af7e:	ab1d      	add	r3, sp, #116	; 0x74
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	ab1c      	add	r3, sp, #112	; 0x70
 801af84:	f002 fef8 	bl	801dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801af88:	4604      	mov	r4, r0
 801af8a:	e7c0      	b.n	801af0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801af8c:	f8d8 0000 	ldr.w	r0, [r8]
 801af90:	6803      	ldr	r3, [r0, #0]
 801af92:	691b      	ldr	r3, [r3, #16]
 801af94:	4798      	blx	r3
 801af96:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801af9a:	4298      	cmp	r0, r3
 801af9c:	f000 80a6 	beq.w	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801afa0:	f242 030b 	movw	r3, #8203	; 0x200b
 801afa4:	4298      	cmp	r0, r3
 801afa6:	f000 80a1 	beq.w	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801afaa:	f1bb 0f00 	cmp.w	fp, #0
 801afae:	d100      	bne.n	801afb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801afb0:	444d      	add	r5, r9
 801afb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801afb4:	2a00      	cmp	r2, #0
 801afb6:	d1bf      	bne.n	801af38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801afb8:	4691      	mov	r9, r2
 801afba:	e097      	b.n	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801afbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	f000 80ab 	beq.w	801b11a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801afc4:	f1bb 0f00 	cmp.w	fp, #0
 801afc8:	d118      	bne.n	801affc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801afca:	f8d8 0000 	ldr.w	r0, [r8]
 801afce:	990d      	ldr	r1, [sp, #52]	; 0x34
 801afd0:	6803      	ldr	r3, [r0, #0]
 801afd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801afd4:	4798      	blx	r3
 801afd6:	4405      	add	r5, r0
 801afd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801afda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801afdc:	1aeb      	subs	r3, r5, r3
 801afde:	4293      	cmp	r3, r2
 801afe0:	dd17      	ble.n	801b012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801afe2:	2c00      	cmp	r4, #0
 801afe4:	f000 8097 	beq.w	801b116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801afe8:	2c0a      	cmp	r4, #10
 801afea:	f040 8085 	bne.w	801b0f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801afee:	240a      	movs	r4, #10
 801aff0:	fab4 f084 	clz	r0, r4
 801aff4:	0940      	lsrs	r0, r0, #5
 801aff6:	b01f      	add	sp, #124	; 0x7c
 801aff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801affc:	f8d8 0000 	ldr.w	r0, [r8]
 801b000:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b002:	6803      	ldr	r3, [r0, #0]
 801b004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b006:	4798      	blx	r3
 801b008:	f1bb 0f01 	cmp.w	fp, #1
 801b00c:	eba5 0500 	sub.w	r5, r5, r0
 801b010:	d0a4      	beq.n	801af5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b012:	981c      	ldr	r0, [sp, #112]	; 0x70
 801b014:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b016:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b01a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b01e:	7b43      	ldrb	r3, [r0, #13]
 801b020:	4429      	add	r1, r5
 801b022:	015b      	lsls	r3, r3, #5
 801b024:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b028:	7983      	ldrb	r3, [r0, #6]
 801b02a:	4313      	orrs	r3, r2
 801b02c:	440b      	add	r3, r1
 801b02e:	42b3      	cmp	r3, r6
 801b030:	db5c      	blt.n	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b034:	4299      	cmp	r1, r3
 801b036:	da59      	bge.n	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b038:	f8d8 0000 	ldr.w	r0, [r8]
 801b03c:	42ae      	cmp	r6, r5
 801b03e:	6803      	ldr	r3, [r0, #0]
 801b040:	bfcc      	ite	gt
 801b042:	1b76      	subgt	r6, r6, r5
 801b044:	2600      	movle	r6, #0
 801b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b048:	bfc8      	it	gt
 801b04a:	b2b6      	uxthgt	r6, r6
 801b04c:	4798      	blx	r3
 801b04e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b050:	7b5a      	ldrb	r2, [r3, #13]
 801b052:	00d1      	lsls	r1, r2, #3
 801b054:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801b058:	7a19      	ldrb	r1, [r3, #8]
 801b05a:	4339      	orrs	r1, r7
 801b05c:	0657      	lsls	r7, r2, #25
 801b05e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b060:	bf48      	it	mi
 801b062:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801b066:	4407      	add	r7, r0
 801b068:	bf48      	it	mi
 801b06a:	b209      	sxthmi	r1, r1
 801b06c:	1a7f      	subs	r7, r7, r1
 801b06e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b070:	b2bf      	uxth	r7, r7
 801b072:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b076:	fa0f fa87 	sxth.w	sl, r7
 801b07a:	4551      	cmp	r1, sl
 801b07c:	dd3a      	ble.n	801b0f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b07e:	0112      	lsls	r2, r2, #4
 801b080:	79d8      	ldrb	r0, [r3, #7]
 801b082:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801b086:	4302      	orrs	r2, r0
 801b088:	4492      	add	sl, r2
 801b08a:	4551      	cmp	r1, sl
 801b08c:	dc2e      	bgt.n	801b0ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b08e:	1bcf      	subs	r7, r1, r7
 801b090:	468a      	mov	sl, r1
 801b092:	b2bf      	uxth	r7, r7
 801b094:	9319      	str	r3, [sp, #100]	; 0x64
 801b096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b098:	f8d8 0000 	ldr.w	r0, [r8]
 801b09c:	681a      	ldr	r2, [r3, #0]
 801b09e:	6801      	ldr	r1, [r0, #0]
 801b0a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801b0a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b0a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801b0a6:	9218      	str	r2, [sp, #96]	; 0x60
 801b0a8:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801b0aa:	4788      	blx	r1
 801b0ac:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b0b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b0b2:	910b      	str	r1, [sp, #44]	; 0x2c
 801b0b4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b0b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b0ba:	910a      	str	r1, [sp, #40]	; 0x28
 801b0bc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801b0c0:	9109      	str	r1, [sp, #36]	; 0x24
 801b0c2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b0c6:	9305      	str	r3, [sp, #20]
 801b0c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b0ca:	9206      	str	r2, [sp, #24]
 801b0cc:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b0d0:	442e      	add	r6, r5
 801b0d2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b0d6:	b236      	sxth	r6, r6
 801b0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b0da:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b0de:	9600      	str	r6, [sp, #0]
 801b0e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b0e2:	681a      	ldr	r2, [r3, #0]
 801b0e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b0e6:	685b      	ldr	r3, [r3, #4]
 801b0e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801b0ea:	47b0      	blx	r6
 801b0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0ee:	3301      	adds	r3, #1
 801b0f0:	930e      	str	r3, [sp, #56]	; 0x38
 801b0f2:	e6e5      	b.n	801aec0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b0f4:	2700      	movs	r7, #0
 801b0f6:	e7cd      	b.n	801b094 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801b0f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b0fa:	3501      	adds	r5, #1
 801b0fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b0fe:	429d      	cmp	r5, r3
 801b100:	f6bf af76 	bge.w	801aff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b104:	4659      	mov	r1, fp
 801b106:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b108:	f7ee fedc 	bl	8009ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b10c:	4604      	mov	r4, r0
 801b10e:	b110      	cbz	r0, 801b116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b110:	280a      	cmp	r0, #10
 801b112:	d1f2      	bne.n	801b0fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801b114:	e76b      	b.n	801afee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b116:	2400      	movs	r4, #0
 801b118:	e76a      	b.n	801aff0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b11a:	f1bb 0f00 	cmp.w	fp, #0
 801b11e:	f43f af5b 	beq.w	801afd8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b122:	e776      	b.n	801b012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b124 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b124:	b530      	push	{r4, r5, lr}
 801b126:	8a44      	ldrh	r4, [r0, #18]
 801b128:	8ac5      	ldrh	r5, [r0, #22]
 801b12a:	82c3      	strh	r3, [r0, #22]
 801b12c:	442c      	add	r4, r5
 801b12e:	1ae4      	subs	r4, r4, r3
 801b130:	8b03      	ldrh	r3, [r0, #24]
 801b132:	8244      	strh	r4, [r0, #18]
 801b134:	8a84      	ldrh	r4, [r0, #20]
 801b136:	4422      	add	r2, r4
 801b138:	440c      	add	r4, r1
 801b13a:	1a59      	subs	r1, r3, r1
 801b13c:	8342      	strh	r2, [r0, #26]
 801b13e:	8284      	strh	r4, [r0, #20]
 801b140:	8301      	strh	r1, [r0, #24]
 801b142:	bd30      	pop	{r4, r5, pc}

0801b144 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b148:	7a43      	ldrb	r3, [r0, #9]
 801b14a:	b087      	sub	sp, #28
 801b14c:	4604      	mov	r4, r0
 801b14e:	460f      	mov	r7, r1
 801b150:	1eda      	subs	r2, r3, #3
 801b152:	b2d2      	uxtb	r2, r2
 801b154:	2900      	cmp	r1, #0
 801b156:	d036      	beq.n	801b1c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b158:	2a01      	cmp	r2, #1
 801b15a:	d932      	bls.n	801b1c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b15c:	1e58      	subs	r0, r3, #1
 801b15e:	f1d0 0b00 	rsbs	fp, r0, #0
 801b162:	eb4b 0b00 	adc.w	fp, fp, r0
 801b166:	1e99      	subs	r1, r3, #2
 801b168:	424b      	negs	r3, r1
 801b16a:	414b      	adcs	r3, r1
 801b16c:	9303      	str	r3, [sp, #12]
 801b16e:	2300      	movs	r3, #0
 801b170:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b174:	2500      	movs	r5, #0
 801b176:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801b17a:	46a9      	mov	r9, r5
 801b17c:	8265      	strh	r5, [r4, #18]
 801b17e:	82a5      	strh	r5, [r4, #20]
 801b180:	2300      	movs	r3, #0
 801b182:	9305      	str	r3, [sp, #20]
 801b184:	8823      	ldrh	r3, [r4, #0]
 801b186:	2b20      	cmp	r3, #32
 801b188:	d02b      	beq.n	801b1e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b18a:	eba3 020a 	sub.w	r2, r3, sl
 801b18e:	4256      	negs	r6, r2
 801b190:	4156      	adcs	r6, r2
 801b192:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b196:	4293      	cmp	r3, r2
 801b198:	d004      	beq.n	801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b19a:	4553      	cmp	r3, sl
 801b19c:	bf16      	itet	ne
 801b19e:	4699      	movne	r9, r3
 801b1a0:	2601      	moveq	r6, #1
 801b1a2:	2600      	movne	r6, #0
 801b1a4:	ab05      	add	r3, sp, #20
 801b1a6:	68e2      	ldr	r2, [r4, #12]
 801b1a8:	7a21      	ldrb	r1, [r4, #8]
 801b1aa:	6860      	ldr	r0, [r4, #4]
 801b1ac:	f002 fd8c 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b1b0:	8020      	strh	r0, [r4, #0]
 801b1b2:	b9c8      	cbnz	r0, 801b1e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b1b4:	8b22      	ldrh	r2, [r4, #24]
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	4611      	mov	r1, r2
 801b1ba:	4620      	mov	r0, r4
 801b1bc:	f7ff ffb2 	bl	801b124 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b1c0:	e066      	b.n	801b290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b1c2:	468b      	mov	fp, r1
 801b1c4:	e7cf      	b.n	801b166 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b1c6:	3b01      	subs	r3, #1
 801b1c8:	2a01      	cmp	r2, #1
 801b1ca:	9103      	str	r1, [sp, #12]
 801b1cc:	468b      	mov	fp, r1
 801b1ce:	bf8c      	ite	hi
 801b1d0:	2200      	movhi	r2, #0
 801b1d2:	2201      	movls	r2, #1
 801b1d4:	2b01      	cmp	r3, #1
 801b1d6:	9202      	str	r2, [sp, #8]
 801b1d8:	bf8c      	ite	hi
 801b1da:	2300      	movhi	r3, #0
 801b1dc:	2301      	movls	r3, #1
 801b1de:	9301      	str	r3, [sp, #4]
 801b1e0:	e7c8      	b.n	801b174 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b1e2:	4699      	mov	r9, r3
 801b1e4:	2601      	movs	r6, #1
 801b1e6:	e7dd      	b.n	801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b1e8:	8ae3      	ldrh	r3, [r4, #22]
 801b1ea:	280a      	cmp	r0, #10
 801b1ec:	f103 0301 	add.w	r3, r3, #1
 801b1f0:	82e3      	strh	r3, [r4, #22]
 801b1f2:	d0df      	beq.n	801b1b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b1f4:	9a05      	ldr	r2, [sp, #20]
 801b1f6:	bb42      	cbnz	r2, 801b24a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b1f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801b1fc:	4298      	cmp	r0, r3
 801b1fe:	d001      	beq.n	801b204 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b200:	4550      	cmp	r0, sl
 801b202:	d1bd      	bne.n	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b204:	8823      	ldrh	r3, [r4, #0]
 801b206:	8b21      	ldrh	r1, [r4, #24]
 801b208:	2b20      	cmp	r3, #32
 801b20a:	d001      	beq.n	801b210 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b20c:	4553      	cmp	r3, sl
 801b20e:	d131      	bne.n	801b274 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b210:	2e00      	cmp	r6, #0
 801b212:	bf0a      	itet	eq
 801b214:	460d      	moveq	r5, r1
 801b216:	4630      	movne	r0, r6
 801b218:	2001      	moveq	r0, #1
 801b21a:	440a      	add	r2, r1
 801b21c:	8aa3      	ldrh	r3, [r4, #20]
 801b21e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b222:	b292      	uxth	r2, r2
 801b224:	8322      	strh	r2, [r4, #24]
 801b226:	4413      	add	r3, r2
 801b228:	2f00      	cmp	r7, #0
 801b22a:	d03a      	beq.n	801b2a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b22c:	f1bb 0f00 	cmp.w	fp, #0
 801b230:	d102      	bne.n	801b238 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b232:	9903      	ldr	r1, [sp, #12]
 801b234:	b301      	cbz	r1, 801b278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b236:	b1f8      	cbz	r0, 801b278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b238:	8ba1      	ldrh	r1, [r4, #28]
 801b23a:	4419      	add	r1, r3
 801b23c:	458c      	cmp	ip, r1
 801b23e:	da2a      	bge.n	801b296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b240:	8a61      	ldrh	r1, [r4, #18]
 801b242:	b341      	cbz	r1, 801b296 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b244:	4563      	cmp	r3, ip
 801b246:	dd9b      	ble.n	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b248:	e01c      	b.n	801b284 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b24a:	8893      	ldrh	r3, [r2, #4]
 801b24c:	4649      	mov	r1, r9
 801b24e:	8023      	strh	r3, [r4, #0]
 801b250:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b254:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b258:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801b25c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b260:	ea48 0800 	orr.w	r8, r8, r0
 801b264:	68e0      	ldr	r0, [r4, #12]
 801b266:	6803      	ldr	r3, [r0, #0]
 801b268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b26a:	4798      	blx	r3
 801b26c:	eb08 0200 	add.w	r2, r8, r0
 801b270:	b292      	uxth	r2, r2
 801b272:	e7c7      	b.n	801b204 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b274:	2000      	movs	r0, #0
 801b276:	e7d0      	b.n	801b21a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b278:	4563      	cmp	r3, ip
 801b27a:	dd81      	ble.n	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b27c:	8a63      	ldrh	r3, [r4, #18]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	f43f af7e 	beq.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b284:	2301      	movs	r3, #1
 801b286:	8ba2      	ldrh	r2, [r4, #28]
 801b288:	77a3      	strb	r3, [r4, #30]
 801b28a:	8b63      	ldrh	r3, [r4, #26]
 801b28c:	4413      	add	r3, r2
 801b28e:	8363      	strh	r3, [r4, #26]
 801b290:	b007      	add	sp, #28
 801b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b296:	2300      	movs	r3, #0
 801b298:	4611      	mov	r1, r2
 801b29a:	4620      	mov	r0, r4
 801b29c:	f7ff ff42 	bl	801b124 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b2a0:	e76e      	b.n	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2a2:	4563      	cmp	r3, ip
 801b2a4:	dd14      	ble.n	801b2d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b2a6:	9b02      	ldr	r3, [sp, #8]
 801b2a8:	b113      	cbz	r3, 801b2b0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b2aa:	2301      	movs	r3, #1
 801b2ac:	460a      	mov	r2, r1
 801b2ae:	e783      	b.n	801b1b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b2b0:	9b01      	ldr	r3, [sp, #4]
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	f43f af64 	beq.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	f47f af61 	bne.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2be:	b116      	cbz	r6, 801b2c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b2c0:	2301      	movs	r3, #1
 801b2c2:	462a      	mov	r2, r5
 801b2c4:	e779      	b.n	801b1ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b2c6:	8a63      	ldrh	r3, [r4, #18]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	f43f af59 	beq.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2ce:	e7df      	b.n	801b290 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b2d0:	2800      	cmp	r0, #0
 801b2d2:	f47f af55 	bne.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2d6:	2e00      	cmp	r6, #0
 801b2d8:	f43f af52 	beq.w	801b180 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2dc:	2301      	movs	r3, #1
 801b2de:	462a      	mov	r2, r5
 801b2e0:	e7db      	b.n	801b29a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b2e2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b2e2:	b530      	push	{r4, r5, lr}
 801b2e4:	4605      	mov	r5, r0
 801b2e6:	b08b      	sub	sp, #44	; 0x2c
 801b2e8:	b191      	cbz	r1, 801b310 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b2ea:	2401      	movs	r4, #1
 801b2ec:	e9cd 3100 	strd	r3, r1, [sp]
 801b2f0:	4613      	mov	r3, r2
 801b2f2:	4601      	mov	r1, r0
 801b2f4:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801b2f8:	a802      	add	r0, sp, #8
 801b2fa:	f7ff fd0b 	bl	801ad14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b2fe:	2100      	movs	r1, #0
 801b300:	a802      	add	r0, sp, #8
 801b302:	f7ff ff1f 	bl	801b144 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b306:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b30a:	b163      	cbz	r3, 801b326 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b30c:	3401      	adds	r4, #1
 801b30e:	e7f6      	b.n	801b2fe <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b310:	2401      	movs	r4, #1
 801b312:	f002 fdd3 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b316:	280a      	cmp	r0, #10
 801b318:	4628      	mov	r0, r5
 801b31a:	bf08      	it	eq
 801b31c:	3401      	addeq	r4, #1
 801b31e:	f002 fdcd 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b322:	2800      	cmp	r0, #0
 801b324:	d1f7      	bne.n	801b316 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b326:	b2a0      	uxth	r0, r4
 801b328:	b00b      	add	sp, #44	; 0x2c
 801b32a:	bd30      	pop	{r4, r5, pc}

0801b32c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b330:	b0e5      	sub	sp, #404	; 0x194
 801b332:	4689      	mov	r9, r1
 801b334:	461c      	mov	r4, r3
 801b336:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801b33a:	900a      	str	r0, [sp, #40]	; 0x28
 801b33c:	f1ba 0f00 	cmp.w	sl, #0
 801b340:	f000 80b4 	beq.w	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	f000 80b0 	beq.w	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b34c:	7ba3      	ldrb	r3, [r4, #14]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	f000 80ac 	beq.w	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b354:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801b358:	6810      	ldr	r0, [r2, #0]
 801b35a:	6851      	ldr	r1, [r2, #4]
 801b35c:	2500      	movs	r5, #0
 801b35e:	4643      	mov	r3, r8
 801b360:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b364:	950f      	str	r5, [sp, #60]	; 0x3c
 801b366:	af19      	add	r7, sp, #100	; 0x64
 801b368:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801b36c:	79a2      	ldrb	r2, [r4, #6]
 801b36e:	c303      	stmia	r3!, {r0, r1}
 801b370:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b374:	a90f      	add	r1, sp, #60	; 0x3c
 801b376:	4640      	mov	r0, r8
 801b378:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b37c:	f7ff fd40 	bl	801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b380:	a90f      	add	r1, sp, #60	; 0x3c
 801b382:	79a2      	ldrb	r2, [r4, #6]
 801b384:	4608      	mov	r0, r1
 801b386:	f7ff fd3b 	bl	801ae00 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b38a:	4638      	mov	r0, r7
 801b38c:	f002 f948 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801b390:	6820      	ldr	r0, [r4, #0]
 801b392:	6803      	ldr	r3, [r0, #0]
 801b394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b396:	4798      	blx	r3
 801b398:	4606      	mov	r6, r0
 801b39a:	6820      	ldr	r0, [r4, #0]
 801b39c:	6803      	ldr	r3, [r0, #0]
 801b39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3a0:	4798      	blx	r3
 801b3a2:	4633      	mov	r3, r6
 801b3a4:	9000      	str	r0, [sp, #0]
 801b3a6:	4651      	mov	r1, sl
 801b3a8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b3aa:	4638      	mov	r0, r7
 801b3ac:	f002 f98b 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b3b0:	7923      	ldrb	r3, [r4, #4]
 801b3b2:	6820      	ldr	r0, [r4, #0]
 801b3b4:	9308      	str	r3, [sp, #32]
 801b3b6:	6803      	ldr	r3, [r0, #0]
 801b3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3ba:	4798      	blx	r3
 801b3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b3c0:	181e      	adds	r6, r3, r0
 801b3c2:	42ae      	cmp	r6, r5
 801b3c4:	dd06      	ble.n	801b3d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b3c6:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b3ca:	4282      	cmp	r2, r0
 801b3cc:	bfa4      	itt	ge
 801b3ce:	189d      	addge	r5, r3, r2
 801b3d0:	fb95 f5f6 	sdivge	r5, r5, r6
 801b3d4:	a832      	add	r0, sp, #200	; 0xc8
 801b3d6:	f002 f923 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801b3da:	7c23      	ldrb	r3, [r4, #16]
 801b3dc:	b17b      	cbz	r3, 801b3fe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b3de:	6820      	ldr	r0, [r4, #0]
 801b3e0:	6803      	ldr	r3, [r0, #0]
 801b3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3e4:	4798      	blx	r3
 801b3e6:	4683      	mov	fp, r0
 801b3e8:	6820      	ldr	r0, [r4, #0]
 801b3ea:	6803      	ldr	r3, [r0, #0]
 801b3ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3ee:	4798      	blx	r3
 801b3f0:	465b      	mov	r3, fp
 801b3f2:	9000      	str	r0, [sp, #0]
 801b3f4:	4651      	mov	r1, sl
 801b3f6:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801b3f8:	a832      	add	r0, sp, #200	; 0xc8
 801b3fa:	f002 f964 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b3fe:	7be1      	ldrb	r1, [r4, #15]
 801b400:	a811      	add	r0, sp, #68	; 0x44
 801b402:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801b406:	7963      	ldrb	r3, [r4, #5]
 801b408:	1a52      	subs	r2, r2, r1
 801b40a:	7c21      	ldrb	r1, [r4, #16]
 801b40c:	9101      	str	r1, [sp, #4]
 801b40e:	b292      	uxth	r2, r2
 801b410:	6821      	ldr	r1, [r4, #0]
 801b412:	9100      	str	r1, [sp, #0]
 801b414:	a932      	add	r1, sp, #200	; 0xc8
 801b416:	f7ff fc7d 	bl	801ad14 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b41a:	7c23      	ldrb	r3, [r4, #16]
 801b41c:	b9bb      	cbnz	r3, 801b44e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b41e:	fa1f fa86 	uxth.w	sl, r6
 801b422:	2d00      	cmp	r5, #0
 801b424:	dd45      	ble.n	801b4b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b426:	4638      	mov	r0, r7
 801b428:	f002 fd48 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b42c:	2800      	cmp	r0, #0
 801b42e:	d03d      	beq.n	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b430:	280a      	cmp	r0, #10
 801b432:	d1f6      	bne.n	801b422 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b434:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b438:	3d01      	subs	r5, #1
 801b43a:	4453      	add	r3, sl
 801b43c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b440:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b444:	eba3 030a 	sub.w	r3, r3, sl
 801b448:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b44c:	e7e9      	b.n	801b422 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b44e:	0073      	lsls	r3, r6, #1
 801b450:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801b454:	fa1f fa86 	uxth.w	sl, r6
 801b458:	9309      	str	r3, [sp, #36]	; 0x24
 801b45a:	2d00      	cmp	r5, #0
 801b45c:	dd29      	ble.n	801b4b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b45e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b462:	a811      	add	r0, sp, #68	; 0x44
 801b464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b466:	428b      	cmp	r3, r1
 801b468:	bfd4      	ite	le
 801b46a:	2100      	movle	r1, #0
 801b46c:	2101      	movgt	r1, #1
 801b46e:	f7ff fe69 	bl	801b144 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b472:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801b476:	3b01      	subs	r3, #1
 801b478:	b29b      	uxth	r3, r3
 801b47a:	455b      	cmp	r3, fp
 801b47c:	930b      	str	r3, [sp, #44]	; 0x2c
 801b47e:	d005      	beq.n	801b48c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b480:	7961      	ldrb	r1, [r4, #5]
 801b482:	4638      	mov	r0, r7
 801b484:	f7ee fd1e 	bl	8009ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b48a:	e7f4      	b.n	801b476 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b48c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b490:	3d01      	subs	r5, #1
 801b492:	4453      	add	r3, sl
 801b494:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b498:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801b49c:	eba3 030a 	sub.w	r3, r3, sl
 801b4a0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801b4a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d1d6      	bne.n	801b45a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b4ac:	b065      	add	sp, #404	; 0x194
 801b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4b2:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b4b6:	ad4b      	add	r5, sp, #300	; 0x12c
 801b4b8:	f04f 0b00 	mov.w	fp, #0
 801b4bc:	7c23      	ldrb	r3, [r4, #16]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d067      	beq.n	801b592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b4c2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801b4c6:	a811      	add	r0, sp, #68	; 0x44
 801b4c8:	458a      	cmp	sl, r1
 801b4ca:	bfd4      	ite	le
 801b4cc:	2100      	movle	r1, #0
 801b4ce:	2101      	movgt	r1, #1
 801b4d0:	f7ff fe38 	bl	801b144 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b4d4:	9b08      	ldr	r3, [sp, #32]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d056      	beq.n	801b588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b4da:	7c23      	ldrb	r3, [r4, #16]
 801b4dc:	2264      	movs	r2, #100	; 0x64
 801b4de:	4639      	mov	r1, r7
 801b4e0:	4628      	mov	r0, r5
 801b4e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b4e4:	f010 f83b 	bl	802b55e <memcpy>
 801b4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	d059      	beq.n	801b5a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b4ee:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801b4f2:	7922      	ldrb	r2, [r4, #4]
 801b4f4:	2a01      	cmp	r2, #1
 801b4f6:	d13d      	bne.n	801b574 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b4f8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801b4fc:	1ac0      	subs	r0, r0, r3
 801b4fe:	2302      	movs	r3, #2
 801b500:	fb90 f0f3 	sdiv	r0, r0, r3
 801b504:	b200      	sxth	r0, r0
 801b506:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801b50a:	4418      	add	r0, r3
 801b50c:	7c23      	ldrb	r3, [r4, #16]
 801b50e:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801b512:	2b00      	cmp	r3, #0
 801b514:	d03a      	beq.n	801b58c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b516:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801b51a:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801b51e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801b522:	9500      	str	r5, [sp, #0]
 801b524:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b526:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b52a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b52e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b532:	464a      	mov	r2, r9
 801b534:	2100      	movs	r1, #0
 801b536:	f7ff fc94 	bl	801ae62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b53a:	2800      	cmp	r0, #0
 801b53c:	d1b6      	bne.n	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b53e:	b2b2      	uxth	r2, r6
 801b540:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b544:	4611      	mov	r1, r2
 801b546:	4413      	add	r3, r2
 801b548:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801b54c:	b21b      	sxth	r3, r3
 801b54e:	1a52      	subs	r2, r2, r1
 801b550:	7c21      	ldrb	r1, [r4, #16]
 801b552:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801b556:	b212      	sxth	r2, r2
 801b558:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801b55c:	b109      	cbz	r1, 801b562 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801b55e:	42b2      	cmp	r2, r6
 801b560:	dba4      	blt.n	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b562:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b566:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b56a:	440a      	add	r2, r1
 801b56c:	b212      	sxth	r2, r2
 801b56e:	4293      	cmp	r3, r2
 801b570:	dda4      	ble.n	801b4bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801b572:	e79b      	b.n	801b4ac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b574:	2a02      	cmp	r2, #2
 801b576:	d105      	bne.n	801b584 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b578:	7be2      	ldrb	r2, [r4, #15]
 801b57a:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801b57e:	1a80      	subs	r0, r0, r2
 801b580:	1ac0      	subs	r0, r0, r3
 801b582:	e7bf      	b.n	801b504 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801b584:	2000      	movs	r0, #0
 801b586:	e7be      	b.n	801b506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b588:	7be0      	ldrb	r0, [r4, #15]
 801b58a:	e7bc      	b.n	801b506 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b58c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b590:	e7c3      	b.n	801b51a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b592:	9b08      	ldr	r3, [sp, #32]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d0f7      	beq.n	801b588 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b598:	2264      	movs	r2, #100	; 0x64
 801b59a:	4639      	mov	r1, r7
 801b59c:	4628      	mov	r0, r5
 801b59e:	f00f ffde 	bl	802b55e <memcpy>
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b5a8:	6821      	ldr	r1, [r4, #0]
 801b5aa:	4628      	mov	r0, r5
 801b5ac:	f7ff fbec 	bl	801ad88 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b5b0:	b203      	sxth	r3, r0
 801b5b2:	e79e      	b.n	801b4f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801b5b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b5b4:	2b02      	cmp	r3, #2
 801b5b6:	b510      	push	{r4, lr}
 801b5b8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b5bc:	d00b      	beq.n	801b5d6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b5be:	2b03      	cmp	r3, #3
 801b5c0:	d00e      	beq.n	801b5e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d001      	beq.n	801b5ca <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b5c6:	1860      	adds	r0, r4, r1
 801b5c8:	bd10      	pop	{r4, pc}
 801b5ca:	8880      	ldrh	r0, [r0, #4]
 801b5cc:	4420      	add	r0, r4
 801b5ce:	b200      	sxth	r0, r0
 801b5d0:	1a80      	subs	r0, r0, r2
 801b5d2:	3801      	subs	r0, #1
 801b5d4:	e7f8      	b.n	801b5c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b5d6:	8880      	ldrh	r0, [r0, #4]
 801b5d8:	4420      	add	r0, r4
 801b5da:	b200      	sxth	r0, r0
 801b5dc:	1a40      	subs	r0, r0, r1
 801b5de:	e7f8      	b.n	801b5d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b5e0:	18a0      	adds	r0, r4, r2
 801b5e2:	e7f1      	b.n	801b5c8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b5e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b5e4:	2b02      	cmp	r3, #2
 801b5e6:	b510      	push	{r4, lr}
 801b5e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b5ec:	d006      	beq.n	801b5fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b5ee:	2b03      	cmp	r3, #3
 801b5f0:	d00a      	beq.n	801b608 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b5f2:	2b01      	cmp	r3, #1
 801b5f4:	bf14      	ite	ne
 801b5f6:	18a0      	addne	r0, r4, r2
 801b5f8:	1860      	addeq	r0, r4, r1
 801b5fa:	bd10      	pop	{r4, pc}
 801b5fc:	88c0      	ldrh	r0, [r0, #6]
 801b5fe:	4420      	add	r0, r4
 801b600:	b200      	sxth	r0, r0
 801b602:	1a80      	subs	r0, r0, r2
 801b604:	3801      	subs	r0, #1
 801b606:	e7f8      	b.n	801b5fa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b608:	88c0      	ldrh	r0, [r0, #6]
 801b60a:	4420      	add	r0, r4
 801b60c:	b200      	sxth	r0, r0
 801b60e:	1a40      	subs	r0, r0, r1
 801b610:	e7f8      	b.n	801b604 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b614 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b614:	4b01      	ldr	r3, [pc, #4]	; (801b61c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b616:	2200      	movs	r2, #0
 801b618:	601a      	str	r2, [r3, #0]
 801b61a:	4770      	bx	lr
 801b61c:	2400b8d4 	.word	0x2400b8d4

0801b620 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b620:	4603      	mov	r3, r0
 801b622:	b1c8      	cbz	r0, 801b658 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b624:	0c02      	lsrs	r2, r0, #16
 801b626:	0412      	lsls	r2, r2, #16
 801b628:	b9a2      	cbnz	r2, 801b654 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b62a:	0403      	lsls	r3, r0, #16
 801b62c:	2010      	movs	r0, #16
 801b62e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b632:	bf04      	itt	eq
 801b634:	021b      	lsleq	r3, r3, #8
 801b636:	3008      	addeq	r0, #8
 801b638:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b63c:	bf04      	itt	eq
 801b63e:	011b      	lsleq	r3, r3, #4
 801b640:	3004      	addeq	r0, #4
 801b642:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b646:	bf04      	itt	eq
 801b648:	009b      	lsleq	r3, r3, #2
 801b64a:	3002      	addeq	r0, #2
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	db04      	blt.n	801b65a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b650:	3001      	adds	r0, #1
 801b652:	4770      	bx	lr
 801b654:	2000      	movs	r0, #0
 801b656:	e7ea      	b.n	801b62e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b658:	2020      	movs	r0, #32
 801b65a:	4770      	bx	lr

0801b65c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b660:	b087      	sub	sp, #28
 801b662:	4681      	mov	r9, r0
 801b664:	4698      	mov	r8, r3
 801b666:	4610      	mov	r0, r2
 801b668:	460d      	mov	r5, r1
 801b66a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801b66e:	b981      	cbnz	r1, 801b692 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b670:	b14b      	cbz	r3, 801b686 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b672:	460b      	mov	r3, r1
 801b674:	464a      	mov	r2, r9
 801b676:	4641      	mov	r1, r8
 801b678:	e9cd 4700 	strd	r4, r7, [sp]
 801b67c:	f7ff ffee 	bl	801b65c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b680:	b007      	add	sp, #28
 801b682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b686:	f04f 33ff 	mov.w	r3, #4294967295
 801b68a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b68e:	603b      	str	r3, [r7, #0]
 801b690:	e7f6      	b.n	801b680 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b692:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b696:	d107      	bne.n	801b6a8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b698:	fb09 f602 	mul.w	r6, r9, r2
 801b69c:	fbb6 f0f4 	udiv	r0, r6, r4
 801b6a0:	fb04 6610 	mls	r6, r4, r0, r6
 801b6a4:	603e      	str	r6, [r7, #0]
 801b6a6:	e7eb      	b.n	801b680 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b6a8:	2601      	movs	r6, #1
 801b6aa:	fa09 fb01 	lsl.w	fp, r9, r1
 801b6ae:	408e      	lsls	r6, r1
 801b6b0:	fbbb f3f4 	udiv	r3, fp, r4
 801b6b4:	3e01      	subs	r6, #1
 801b6b6:	9302      	str	r3, [sp, #8]
 801b6b8:	fb0a f303 	mul.w	r3, sl, r3
 801b6bc:	4016      	ands	r6, r2
 801b6be:	9303      	str	r3, [sp, #12]
 801b6c0:	4630      	mov	r0, r6
 801b6c2:	f7ff ffad 	bl	801b620 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b6c6:	464a      	mov	r2, r9
 801b6c8:	460b      	mov	r3, r1
 801b6ca:	4601      	mov	r1, r0
 801b6cc:	4630      	mov	r0, r6
 801b6ce:	e9cd 4700 	strd	r4, r7, [sp]
 801b6d2:	f7ff ffc3 	bl	801b65c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b6d6:	9b02      	ldr	r3, [sp, #8]
 801b6d8:	4606      	mov	r6, r0
 801b6da:	eb05 0108 	add.w	r1, r5, r8
 801b6de:	fb04 bb13 	mls	fp, r4, r3, fp
 801b6e2:	4658      	mov	r0, fp
 801b6e4:	f7ff ff9c 	bl	801b620 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b6e8:	ab05      	add	r3, sp, #20
 801b6ea:	465a      	mov	r2, fp
 801b6ec:	e9cd 4300 	strd	r4, r3, [sp]
 801b6f0:	4603      	mov	r3, r0
 801b6f2:	4650      	mov	r0, sl
 801b6f4:	f7ff ffb2 	bl	801b65c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b6f8:	6839      	ldr	r1, [r7, #0]
 801b6fa:	9a05      	ldr	r2, [sp, #20]
 801b6fc:	9b03      	ldr	r3, [sp, #12]
 801b6fe:	4411      	add	r1, r2
 801b700:	fbb1 f2f4 	udiv	r2, r1, r4
 801b704:	18d3      	adds	r3, r2, r3
 801b706:	fb04 1412 	mls	r4, r4, r2, r1
 801b70a:	441e      	add	r6, r3
 801b70c:	603c      	str	r4, [r7, #0]
 801b70e:	4430      	add	r0, r6
 801b710:	e7b6      	b.n	801b680 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b712 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b716:	b085      	sub	sp, #20
 801b718:	f1b0 0900 	subs.w	r9, r0, #0
 801b71c:	461d      	mov	r5, r3
 801b71e:	4617      	mov	r7, r2
 801b720:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b722:	bfbb      	ittet	lt
 801b724:	f1c9 0900 	rsblt	r9, r9, #0
 801b728:	f04f 36ff 	movlt.w	r6, #4294967295
 801b72c:	2601      	movge	r6, #1
 801b72e:	6823      	ldrlt	r3, [r4, #0]
 801b730:	bfbc      	itt	lt
 801b732:	425b      	neglt	r3, r3
 801b734:	6023      	strlt	r3, [r4, #0]
 801b736:	2a00      	cmp	r2, #0
 801b738:	da04      	bge.n	801b744 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b73a:	6823      	ldr	r3, [r4, #0]
 801b73c:	4257      	negs	r7, r2
 801b73e:	4276      	negs	r6, r6
 801b740:	425b      	negs	r3, r3
 801b742:	6023      	str	r3, [r4, #0]
 801b744:	2d00      	cmp	r5, #0
 801b746:	4638      	mov	r0, r7
 801b748:	bfba      	itte	lt
 801b74a:	426d      	neglt	r5, r5
 801b74c:	f04f 38ff 	movlt.w	r8, #4294967295
 801b750:	f04f 0801 	movge.w	r8, #1
 801b754:	f7ff ff64 	bl	801b620 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b758:	ab03      	add	r3, sp, #12
 801b75a:	463a      	mov	r2, r7
 801b75c:	e9cd 5300 	strd	r5, r3, [sp]
 801b760:	4603      	mov	r3, r0
 801b762:	4648      	mov	r0, r9
 801b764:	f7ff ff7a 	bl	801b65c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b768:	6823      	ldr	r3, [r4, #0]
 801b76a:	9a03      	ldr	r2, [sp, #12]
 801b76c:	4546      	cmp	r6, r8
 801b76e:	441a      	add	r2, r3
 801b770:	fb92 f3f5 	sdiv	r3, r2, r5
 801b774:	4418      	add	r0, r3
 801b776:	fb05 2313 	mls	r3, r5, r3, r2
 801b77a:	bf18      	it	ne
 801b77c:	4240      	negne	r0, r0
 801b77e:	1c72      	adds	r2, r6, #1
 801b780:	6023      	str	r3, [r4, #0]
 801b782:	d105      	bne.n	801b790 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b784:	2b00      	cmp	r3, #0
 801b786:	f1c3 0200 	rsb	r2, r3, #0
 801b78a:	db0b      	blt.n	801b7a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b78c:	6022      	str	r2, [r4, #0]
 801b78e:	e006      	b.n	801b79e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b790:	2e01      	cmp	r6, #1
 801b792:	d104      	bne.n	801b79e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b794:	2b00      	cmp	r3, #0
 801b796:	da02      	bge.n	801b79e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b798:	442b      	add	r3, r5
 801b79a:	3801      	subs	r0, #1
 801b79c:	6023      	str	r3, [r4, #0]
 801b79e:	b005      	add	sp, #20
 801b7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b7a4:	3801      	subs	r0, #1
 801b7a6:	1b52      	subs	r2, r2, r5
 801b7a8:	e7f0      	b.n	801b78c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b7ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b7ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b7b0:	4c1c      	ldr	r4, [pc, #112]	; (801b824 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b7b2:	4605      	mov	r5, r0
 801b7b4:	6807      	ldr	r7, [r0, #0]
 801b7b6:	69a3      	ldr	r3, [r4, #24]
 801b7b8:	b92b      	cbnz	r3, 801b7c6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b7ba:	6840      	ldr	r0, [r0, #4]
 801b7bc:	e9c5 7000 	strd	r7, r0, [r5]
 801b7c0:	b004      	add	sp, #16
 801b7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7c6:	f04f 0802 	mov.w	r8, #2
 801b7ca:	68a2      	ldr	r2, [r4, #8]
 801b7cc:	ae04      	add	r6, sp, #16
 801b7ce:	6820      	ldr	r0, [r4, #0]
 801b7d0:	fb93 f1f8 	sdiv	r1, r3, r8
 801b7d4:	440a      	add	r2, r1
 801b7d6:	69e1      	ldr	r1, [r4, #28]
 801b7d8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b7dc:	463a      	mov	r2, r7
 801b7de:	9600      	str	r6, [sp, #0]
 801b7e0:	f7ff ff97 	bl	801b712 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b7e4:	69a3      	ldr	r3, [r4, #24]
 801b7e6:	4607      	mov	r7, r0
 801b7e8:	686a      	ldr	r2, [r5, #4]
 801b7ea:	6a21      	ldr	r1, [r4, #32]
 801b7ec:	9600      	str	r6, [sp, #0]
 801b7ee:	6860      	ldr	r0, [r4, #4]
 801b7f0:	f7ff ff8f 	bl	801b712 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b7f4:	69a3      	ldr	r3, [r4, #24]
 801b7f6:	6962      	ldr	r2, [r4, #20]
 801b7f8:	4407      	add	r7, r0
 801b7fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b7fc:	9600      	str	r6, [sp, #0]
 801b7fe:	68e0      	ldr	r0, [r4, #12]
 801b800:	fb93 f8f8 	sdiv	r8, r3, r8
 801b804:	4442      	add	r2, r8
 801b806:	9203      	str	r2, [sp, #12]
 801b808:	682a      	ldr	r2, [r5, #0]
 801b80a:	f7ff ff82 	bl	801b712 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b80e:	4680      	mov	r8, r0
 801b810:	9600      	str	r6, [sp, #0]
 801b812:	69a3      	ldr	r3, [r4, #24]
 801b814:	686a      	ldr	r2, [r5, #4]
 801b816:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801b818:	6920      	ldr	r0, [r4, #16]
 801b81a:	f7ff ff7a 	bl	801b712 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b81e:	4440      	add	r0, r8
 801b820:	e7cc      	b.n	801b7bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b822:	bf00      	nop
 801b824:	2400b8d8 	.word	0x2400b8d8

0801b828 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b828:	4b07      	ldr	r3, [pc, #28]	; (801b848 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	2b01      	cmp	r3, #1
 801b82e:	d109      	bne.n	801b844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b830:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b834:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b838:	8003      	strh	r3, [r0, #0]
 801b83a:	4b04      	ldr	r3, [pc, #16]	; (801b84c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b83c:	881b      	ldrh	r3, [r3, #0]
 801b83e:	3b01      	subs	r3, #1
 801b840:	1a9b      	subs	r3, r3, r2
 801b842:	800b      	strh	r3, [r1, #0]
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	2400b8c4 	.word	0x2400b8c4
 801b84c:	2400b8c8 	.word	0x2400b8c8

0801b850 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b850:	4b07      	ldr	r3, [pc, #28]	; (801b870 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b852:	b510      	push	{r4, lr}
 801b854:	781b      	ldrb	r3, [r3, #0]
 801b856:	2b01      	cmp	r3, #1
 801b858:	d108      	bne.n	801b86c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b85a:	4b06      	ldr	r3, [pc, #24]	; (801b874 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b85c:	880c      	ldrh	r4, [r1, #0]
 801b85e:	881b      	ldrh	r3, [r3, #0]
 801b860:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b864:	3b01      	subs	r3, #1
 801b866:	1b1b      	subs	r3, r3, r4
 801b868:	8003      	strh	r3, [r0, #0]
 801b86a:	800a      	strh	r2, [r1, #0]
 801b86c:	bd10      	pop	{r4, pc}
 801b86e:	bf00      	nop
 801b870:	2400b8c4 	.word	0x2400b8c4
 801b874:	2400b8c8 	.word	0x2400b8c8

0801b878 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b878:	4b0a      	ldr	r3, [pc, #40]	; (801b8a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b87a:	b510      	push	{r4, lr}
 801b87c:	781b      	ldrb	r3, [r3, #0]
 801b87e:	2b01      	cmp	r3, #1
 801b880:	d10e      	bne.n	801b8a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b882:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b886:	8843      	ldrh	r3, [r0, #2]
 801b888:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b88c:	18ca      	adds	r2, r1, r3
 801b88e:	4b06      	ldr	r3, [pc, #24]	; (801b8a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b890:	8044      	strh	r4, [r0, #2]
 801b892:	881b      	ldrh	r3, [r3, #0]
 801b894:	1a9b      	subs	r3, r3, r2
 801b896:	8003      	strh	r3, [r0, #0]
 801b898:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b89c:	8081      	strh	r1, [r0, #4]
 801b89e:	80c3      	strh	r3, [r0, #6]
 801b8a0:	bd10      	pop	{r4, pc}
 801b8a2:	bf00      	nop
 801b8a4:	2400b8c4 	.word	0x2400b8c4
 801b8a8:	2400b8c8 	.word	0x2400b8c8

0801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b8ac:	4b08      	ldr	r3, [pc, #32]	; (801b8d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	2b01      	cmp	r3, #1
 801b8b2:	d10c      	bne.n	801b8ce <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b8b4:	8803      	ldrh	r3, [r0, #0]
 801b8b6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b8ba:	8842      	ldrh	r2, [r0, #2]
 801b8bc:	8002      	strh	r2, [r0, #0]
 801b8be:	185a      	adds	r2, r3, r1
 801b8c0:	4b04      	ldr	r3, [pc, #16]	; (801b8d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b8c2:	881b      	ldrh	r3, [r3, #0]
 801b8c4:	1a9b      	subs	r3, r3, r2
 801b8c6:	8043      	strh	r3, [r0, #2]
 801b8c8:	88c3      	ldrh	r3, [r0, #6]
 801b8ca:	80c1      	strh	r1, [r0, #6]
 801b8cc:	8083      	strh	r3, [r0, #4]
 801b8ce:	4770      	bx	lr
 801b8d0:	2400b8c4 	.word	0x2400b8c4
 801b8d4:	2400b8c8 	.word	0x2400b8c8

0801b8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b8d8:	4b07      	ldr	r3, [pc, #28]	; (801b8f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b8da:	b510      	push	{r4, lr}
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	2b01      	cmp	r3, #1
 801b8e0:	d108      	bne.n	801b8f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b8e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b8e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b8ea:	8003      	strh	r3, [r0, #0]
 801b8ec:	8893      	ldrh	r3, [r2, #4]
 801b8ee:	3b01      	subs	r3, #1
 801b8f0:	1b1b      	subs	r3, r3, r4
 801b8f2:	800b      	strh	r3, [r1, #0]
 801b8f4:	bd10      	pop	{r4, pc}
 801b8f6:	bf00      	nop
 801b8f8:	2400b8c4 	.word	0x2400b8c4

0801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b8fc:	4b0a      	ldr	r3, [pc, #40]	; (801b928 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b8fe:	460a      	mov	r2, r1
 801b900:	b510      	push	{r4, lr}
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	2b01      	cmp	r3, #1
 801b906:	d10d      	bne.n	801b924 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b908:	8881      	ldrh	r1, [r0, #4]
 801b90a:	8803      	ldrh	r3, [r0, #0]
 801b90c:	440b      	add	r3, r1
 801b90e:	4601      	mov	r1, r0
 801b910:	3b01      	subs	r3, #1
 801b912:	f821 3b02 	strh.w	r3, [r1], #2
 801b916:	f7ff ffdf 	bl	801b8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b91a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b91e:	88c2      	ldrh	r2, [r0, #6]
 801b920:	80c3      	strh	r3, [r0, #6]
 801b922:	8082      	strh	r2, [r0, #4]
 801b924:	bd10      	pop	{r4, pc}
 801b926:	bf00      	nop
 801b928:	2400b8c4 	.word	0x2400b8c4

0801b92c <_ZN8touchgfx11Application13requestRedrawEv>:
 801b92c:	4b06      	ldr	r3, [pc, #24]	; (801b948 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b92e:	2100      	movs	r1, #0
 801b930:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b934:	4b05      	ldr	r3, [pc, #20]	; (801b94c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b936:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b93a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b93e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b942:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b946:	4770      	bx	lr
 801b948:	2400b8c0 	.word	0x2400b8c0
 801b94c:	2400b8c2 	.word	0x2400b8c2

0801b950 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b950:	4b03      	ldr	r3, [pc, #12]	; (801b960 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b952:	6818      	ldr	r0, [r3, #0]
 801b954:	b110      	cbz	r0, 801b95c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b956:	6803      	ldr	r3, [r0, #0]
 801b958:	699b      	ldr	r3, [r3, #24]
 801b95a:	4718      	bx	r3
 801b95c:	4770      	bx	lr
 801b95e:	bf00      	nop
 801b960:	2400b908 	.word	0x2400b908

0801b964 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b964:	4770      	bx	lr
	...

0801b968 <_ZN8touchgfx11Application4drawEv>:
 801b968:	4b09      	ldr	r3, [pc, #36]	; (801b990 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b96a:	b507      	push	{r0, r1, r2, lr}
 801b96c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b970:	2100      	movs	r1, #0
 801b972:	4b08      	ldr	r3, [pc, #32]	; (801b994 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b974:	9100      	str	r1, [sp, #0]
 801b976:	4669      	mov	r1, sp
 801b978:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b97c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b980:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b984:	6803      	ldr	r3, [r0, #0]
 801b986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b988:	4798      	blx	r3
 801b98a:	b003      	add	sp, #12
 801b98c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b990:	2400b8c0 	.word	0x2400b8c0
 801b994:	2400b8c2 	.word	0x2400b8c2

0801b998 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b998:	4b03      	ldr	r3, [pc, #12]	; (801b9a8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b99a:	6818      	ldr	r0, [r3, #0]
 801b99c:	b110      	cbz	r0, 801b9a4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b99e:	6803      	ldr	r3, [r0, #0]
 801b9a0:	69db      	ldr	r3, [r3, #28]
 801b9a2:	4718      	bx	r3
 801b9a4:	4770      	bx	lr
 801b9a6:	bf00      	nop
 801b9a8:	2400b908 	.word	0x2400b908

0801b9ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b9ac:	4b03      	ldr	r3, [pc, #12]	; (801b9bc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b9ae:	6818      	ldr	r0, [r3, #0]
 801b9b0:	b110      	cbz	r0, 801b9b8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b9b2:	6803      	ldr	r3, [r0, #0]
 801b9b4:	6a1b      	ldr	r3, [r3, #32]
 801b9b6:	4718      	bx	r3
 801b9b8:	4770      	bx	lr
 801b9ba:	bf00      	nop
 801b9bc:	2400b908 	.word	0x2400b908

0801b9c0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b9c0:	4b03      	ldr	r3, [pc, #12]	; (801b9d0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b9c2:	6818      	ldr	r0, [r3, #0]
 801b9c4:	b110      	cbz	r0, 801b9cc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b9c6:	6803      	ldr	r3, [r0, #0]
 801b9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9ca:	4718      	bx	r3
 801b9cc:	4770      	bx	lr
 801b9ce:	bf00      	nop
 801b9d0:	2400b908 	.word	0x2400b908

0801b9d4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801b9d4:	b570      	push	{r4, r5, r6, lr}
 801b9d6:	4d38      	ldr	r5, [pc, #224]	; (801bab8 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801b9d8:	4604      	mov	r4, r0
 801b9da:	6828      	ldr	r0, [r5, #0]
 801b9dc:	b140      	cbz	r0, 801b9f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b9de:	7a03      	ldrb	r3, [r0, #8]
 801b9e0:	b933      	cbnz	r3, 801b9f0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b9e2:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801b9e6:	6803      	ldr	r3, [r0, #0]
 801b9e8:	689b      	ldr	r3, [r3, #8]
 801b9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b9ee:	4718      	bx	r3
 801b9f0:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801b9f4:	b97b      	cbnz	r3, 801ba16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b9f6:	b170      	cbz	r0, 801ba16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b9f8:	7a03      	ldrb	r3, [r0, #8]
 801b9fa:	b163      	cbz	r3, 801ba16 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b9fc:	4b2f      	ldr	r3, [pc, #188]	; (801babc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801b9fe:	6818      	ldr	r0, [r3, #0]
 801ba00:	b110      	cbz	r0, 801ba08 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ba02:	6803      	ldr	r3, [r0, #0]
 801ba04:	691b      	ldr	r3, [r3, #16]
 801ba06:	4798      	blx	r3
 801ba08:	6828      	ldr	r0, [r5, #0]
 801ba0a:	6803      	ldr	r3, [r0, #0]
 801ba0c:	68db      	ldr	r3, [r3, #12]
 801ba0e:	4798      	blx	r3
 801ba10:	2301      	movs	r3, #1
 801ba12:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ba16:	2500      	movs	r5, #0
 801ba18:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ba1c:	42a8      	cmp	r0, r5
 801ba1e:	dd0c      	ble.n	801ba3a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ba20:	1963      	adds	r3, r4, r5
 801ba22:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ba26:	b132      	cbz	r2, 801ba36 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ba28:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ba2c:	4413      	add	r3, r2
 801ba2e:	6858      	ldr	r0, [r3, #4]
 801ba30:	6803      	ldr	r3, [r0, #0]
 801ba32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ba34:	4798      	blx	r3
 801ba36:	3501      	adds	r5, #1
 801ba38:	e7ee      	b.n	801ba18 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	461a      	mov	r2, r3
 801ba3e:	4298      	cmp	r0, r3
 801ba40:	d10f      	bne.n	801ba62 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801ba42:	1d25      	adds	r5, r4, #4
 801ba44:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ba48:	4291      	cmp	r1, r2
 801ba4a:	dd2d      	ble.n	801baa8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ba4c:	1e48      	subs	r0, r1, #1
 801ba4e:	b280      	uxth	r0, r0
 801ba50:	4288      	cmp	r0, r1
 801ba52:	d31a      	bcc.n	801ba8a <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ba54:	4b1a      	ldr	r3, [pc, #104]	; (801bac0 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801ba56:	f240 11a9 	movw	r1, #425	; 0x1a9
 801ba5a:	4a1a      	ldr	r2, [pc, #104]	; (801bac4 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801ba5c:	481a      	ldr	r0, [pc, #104]	; (801bac8 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801ba5e:	f00f fa53 	bl	802af08 <__assert_func>
 801ba62:	18e1      	adds	r1, r4, r3
 801ba64:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ba68:	b16d      	cbz	r5, 801ba86 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d00a      	beq.n	801ba84 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801ba6e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801ba72:	4431      	add	r1, r6
 801ba74:	684e      	ldr	r6, [r1, #4]
 801ba76:	b291      	uxth	r1, r2
 801ba78:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801ba7c:	604e      	str	r6, [r1, #4]
 801ba7e:	18a1      	adds	r1, r4, r2
 801ba80:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801ba84:	3201      	adds	r2, #1
 801ba86:	3301      	adds	r3, #1
 801ba88:	e7d9      	b.n	801ba3e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801ba8a:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801ba8e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801ba92:	3304      	adds	r3, #4
 801ba94:	428b      	cmp	r3, r1
 801ba96:	d004      	beq.n	801baa2 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801ba98:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801ba9c:	f843 6c04 	str.w	r6, [r3, #-4]
 801baa0:	e7f8      	b.n	801ba94 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801baa2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801baa6:	e7cd      	b.n	801ba44 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801baa8:	4b04      	ldr	r3, [pc, #16]	; (801babc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801baaa:	6818      	ldr	r0, [r3, #0]
 801baac:	b110      	cbz	r0, 801bab4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801baae:	6803      	ldr	r3, [r0, #0]
 801bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bab2:	e79a      	b.n	801b9ea <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bab4:	bd70      	pop	{r4, r5, r6, pc}
 801bab6:	bf00      	nop
 801bab8:	2400b90c 	.word	0x2400b90c
 801babc:	2400b908 	.word	0x2400b908
 801bac0:	0802f220 	.word	0x0802f220
 801bac4:	0802f479 	.word	0x0802f479
 801bac8:	0802f22e 	.word	0x0802f22e

0801bacc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bacc:	b570      	push	{r4, r5, r6, lr}
 801bace:	4606      	mov	r6, r0
 801bad0:	460c      	mov	r4, r1
 801bad2:	b929      	cbnz	r1, 801bae0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bad4:	4b0c      	ldr	r3, [pc, #48]	; (801bb08 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bad6:	2167      	movs	r1, #103	; 0x67
 801bad8:	4a0c      	ldr	r2, [pc, #48]	; (801bb0c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bada:	480d      	ldr	r0, [pc, #52]	; (801bb10 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801badc:	f00f fa14 	bl	802af08 <__assert_func>
 801bae0:	2300      	movs	r3, #0
 801bae2:	4d0c      	ldr	r5, [pc, #48]	; (801bb14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bae4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801bae8:	6828      	ldr	r0, [r5, #0]
 801baea:	b110      	cbz	r0, 801baf2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801baec:	6803      	ldr	r3, [r0, #0]
 801baee:	695b      	ldr	r3, [r3, #20]
 801baf0:	4798      	blx	r3
 801baf2:	602c      	str	r4, [r5, #0]
 801baf4:	4620      	mov	r0, r4
 801baf6:	6823      	ldr	r3, [r4, #0]
 801baf8:	68db      	ldr	r3, [r3, #12]
 801bafa:	4798      	blx	r3
 801bafc:	6833      	ldr	r3, [r6, #0]
 801bafe:	4630      	mov	r0, r6
 801bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb06:	4718      	bx	r3
 801bb08:	0802f1ec 	.word	0x0802f1ec
 801bb0c:	0802f2f4 	.word	0x0802f2f4
 801bb10:	0802f1f6 	.word	0x0802f1f6
 801bb14:	2400b908 	.word	0x2400b908

0801bb18 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bb18:	b510      	push	{r4, lr}
 801bb1a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bb1e:	888a      	ldrh	r2, [r1, #4]
 801bb20:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bb24:	4422      	add	r2, r4
 801bb26:	b212      	sxth	r2, r2
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	da15      	bge.n	801bb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb2c:	8882      	ldrh	r2, [r0, #4]
 801bb2e:	4413      	add	r3, r2
 801bb30:	b21b      	sxth	r3, r3
 801bb32:	429c      	cmp	r4, r3
 801bb34:	da10      	bge.n	801bb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb36:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bb3a:	88c9      	ldrh	r1, [r1, #6]
 801bb3c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bb40:	4419      	add	r1, r3
 801bb42:	b209      	sxth	r1, r1
 801bb44:	428a      	cmp	r2, r1
 801bb46:	da07      	bge.n	801bb58 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb48:	88c0      	ldrh	r0, [r0, #6]
 801bb4a:	4410      	add	r0, r2
 801bb4c:	b200      	sxth	r0, r0
 801bb4e:	4283      	cmp	r3, r0
 801bb50:	bfac      	ite	ge
 801bb52:	2000      	movge	r0, #0
 801bb54:	2001      	movlt	r0, #1
 801bb56:	bd10      	pop	{r4, pc}
 801bb58:	2000      	movs	r0, #0
 801bb5a:	e7fc      	b.n	801bb56 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bb5c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bb5c:	b570      	push	{r4, r5, r6, lr}
 801bb5e:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bb62:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bb66:	42ac      	cmp	r4, r5
 801bb68:	db18      	blt.n	801bb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bb6a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bb6e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bb72:	429a      	cmp	r2, r3
 801bb74:	db12      	blt.n	801bb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bb76:	8886      	ldrh	r6, [r0, #4]
 801bb78:	4435      	add	r5, r6
 801bb7a:	888e      	ldrh	r6, [r1, #4]
 801bb7c:	4434      	add	r4, r6
 801bb7e:	b22d      	sxth	r5, r5
 801bb80:	b224      	sxth	r4, r4
 801bb82:	42a5      	cmp	r5, r4
 801bb84:	db0a      	blt.n	801bb9c <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bb86:	88c0      	ldrh	r0, [r0, #6]
 801bb88:	4418      	add	r0, r3
 801bb8a:	88cb      	ldrh	r3, [r1, #6]
 801bb8c:	441a      	add	r2, r3
 801bb8e:	b200      	sxth	r0, r0
 801bb90:	b212      	sxth	r2, r2
 801bb92:	4290      	cmp	r0, r2
 801bb94:	bfb4      	ite	lt
 801bb96:	2000      	movlt	r0, #0
 801bb98:	2001      	movge	r0, #1
 801bb9a:	bd70      	pop	{r4, r5, r6, pc}
 801bb9c:	2000      	movs	r0, #0
 801bb9e:	e7fc      	b.n	801bb9a <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bba2:	4604      	mov	r4, r0
 801bba4:	4608      	mov	r0, r1
 801bba6:	460d      	mov	r5, r1
 801bba8:	f7fc fb11 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbac:	b978      	cbnz	r0, 801bbce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bbae:	4620      	mov	r0, r4
 801bbb0:	f7fc fb0d 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbb4:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bbb8:	b150      	cbz	r0, 801bbd0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bbba:	8026      	strh	r6, [r4, #0]
 801bbbc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bbc0:	8063      	strh	r3, [r4, #2]
 801bbc2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bbc6:	80a3      	strh	r3, [r4, #4]
 801bbc8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bbcc:	80e3      	strh	r3, [r4, #6]
 801bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbd0:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bbd4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bbd8:	42b1      	cmp	r1, r6
 801bbda:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bbde:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bbe2:	460f      	mov	r7, r1
 801bbe4:	88ed      	ldrh	r5, [r5, #6]
 801bbe6:	bfa8      	it	ge
 801bbe8:	4637      	movge	r7, r6
 801bbea:	4293      	cmp	r3, r2
 801bbec:	4618      	mov	r0, r3
 801bbee:	4466      	add	r6, ip
 801bbf0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bbf4:	bfa8      	it	ge
 801bbf6:	4610      	movge	r0, r2
 801bbf8:	442a      	add	r2, r5
 801bbfa:	88e5      	ldrh	r5, [r4, #6]
 801bbfc:	4461      	add	r1, ip
 801bbfe:	b236      	sxth	r6, r6
 801bc00:	8027      	strh	r7, [r4, #0]
 801bc02:	442b      	add	r3, r5
 801bc04:	b209      	sxth	r1, r1
 801bc06:	b212      	sxth	r2, r2
 801bc08:	8060      	strh	r0, [r4, #2]
 801bc0a:	b21b      	sxth	r3, r3
 801bc0c:	428e      	cmp	r6, r1
 801bc0e:	bfac      	ite	ge
 801bc10:	ebc7 0106 	rsbge	r1, r7, r6
 801bc14:	ebc7 0101 	rsblt	r1, r7, r1
 801bc18:	429a      	cmp	r2, r3
 801bc1a:	bfac      	ite	ge
 801bc1c:	ebc0 0202 	rsbge	r2, r0, r2
 801bc20:	ebc0 0203 	rsblt	r2, r0, r3
 801bc24:	80a1      	strh	r1, [r4, #4]
 801bc26:	80e2      	strh	r2, [r4, #6]
 801bc28:	e7d1      	b.n	801bbce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801bc2c <_ZN8touchgfx11Application11getInstanceEv>:
 801bc2c:	4b01      	ldr	r3, [pc, #4]	; (801bc34 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bc2e:	6818      	ldr	r0, [r3, #0]
 801bc30:	4770      	bx	lr
 801bc32:	bf00      	nop
 801bc34:	2400b918 	.word	0x2400b918

0801bc38 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801bc38:	b570      	push	{r4, r5, r6, lr}
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801bc40:	1d04      	adds	r4, r0, #4
 801bc42:	b295      	uxth	r5, r2
 801bc44:	42ab      	cmp	r3, r5
 801bc46:	d90e      	bls.n	801bc66 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801bc48:	f854 6b04 	ldr.w	r6, [r4], #4
 801bc4c:	4615      	mov	r5, r2
 801bc4e:	3201      	adds	r2, #1
 801bc50:	428e      	cmp	r6, r1
 801bc52:	d1f6      	bne.n	801bc42 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801bc54:	4428      	add	r0, r5
 801bc56:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801bc5a:	2bff      	cmp	r3, #255	; 0xff
 801bc5c:	d002      	beq.n	801bc64 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801bc5e:	3301      	adds	r3, #1
 801bc60:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801bc64:	bd70      	pop	{r4, r5, r6, pc}
 801bc66:	2b20      	cmp	r3, #32
 801bc68:	d106      	bne.n	801bc78 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801bc6a:	4b09      	ldr	r3, [pc, #36]	; (801bc90 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801bc6c:	f240 215f 	movw	r1, #607	; 0x25f
 801bc70:	4a08      	ldr	r2, [pc, #32]	; (801bc94 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801bc72:	4809      	ldr	r0, [pc, #36]	; (801bc98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801bc74:	f00f f948 	bl	802af08 <__assert_func>
 801bc78:	18c2      	adds	r2, r0, r3
 801bc7a:	2401      	movs	r4, #1
 801bc7c:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801bc80:	191a      	adds	r2, r3, r4
 801bc82:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801bc86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801bc8a:	6041      	str	r1, [r0, #4]
 801bc8c:	e7ea      	b.n	801bc64 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801bc8e:	bf00      	nop
 801bc90:	0802f257 	.word	0x0802f257
 801bc94:	0802f338 	.word	0x0802f338
 801bc98:	0802f1f6 	.word	0x0802f1f6

0801bc9c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801bc9c:	b570      	push	{r4, r5, r6, lr}
 801bc9e:	2300      	movs	r3, #0
 801bca0:	f8b0 6084 	ldrh.w	r6, [r0, #132]	; 0x84
 801bca4:	1d04      	adds	r4, r0, #4
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	4296      	cmp	r6, r2
 801bcaa:	d90a      	bls.n	801bcc2 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801bcac:	f854 2b04 	ldr.w	r2, [r4], #4
 801bcb0:	428a      	cmp	r2, r1
 801bcb2:	d107      	bne.n	801bcc4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bcb4:	18c5      	adds	r5, r0, r3
 801bcb6:	f895 2088 	ldrb.w	r2, [r5, #136]	; 0x88
 801bcba:	b11a      	cbz	r2, 801bcc4 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bcbc:	3a01      	subs	r2, #1
 801bcbe:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
 801bcc2:	bd70      	pop	{r4, r5, r6, pc}
 801bcc4:	3301      	adds	r3, #1
 801bcc6:	e7ee      	b.n	801bca6 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801bcc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bcc8:	2300      	movs	r3, #0
 801bcca:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801bcce:	30a8      	adds	r0, #168	; 0xa8
 801bcd0:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bcd4:	f802 3b01 	strb.w	r3, [r2], #1
 801bcd8:	4282      	cmp	r2, r0
 801bcda:	d1fb      	bne.n	801bcd4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801bcdc:	4770      	bx	lr

0801bcde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bcde:	4603      	mov	r3, r0
 801bce0:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801bce4:	2200      	movs	r2, #0
 801bce6:	801a      	strh	r2, [r3, #0]
 801bce8:	3308      	adds	r3, #8
 801bcea:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bcee:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bcf2:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bcf6:	428b      	cmp	r3, r1
 801bcf8:	d1f5      	bne.n	801bce6 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bcfa:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801bcfe:	4770      	bx	lr

0801bd00 <_ZN8touchgfx11ApplicationC1Ev>:
 801bd00:	b570      	push	{r4, r5, r6, lr}
 801bd02:	4b1a      	ldr	r3, [pc, #104]	; (801bd6c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bd04:	2500      	movs	r5, #0
 801bd06:	4604      	mov	r4, r0
 801bd08:	30a8      	adds	r0, #168	; 0xa8
 801bd0a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bd0e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bd12:	f7ff ffe4 	bl	801bcde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd16:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bd1a:	f7ff ffe0 	bl	801bcde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd1e:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801bd22:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801bd26:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801bd2a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801bd2e:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801bd32:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801bd36:	490e      	ldr	r1, [pc, #56]	; (801bd70 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bd38:	480e      	ldr	r0, [pc, #56]	; (801bd74 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bd3a:	f00e ffa9 	bl	802ac90 <CRC_Lock>
 801bd3e:	4e0e      	ldr	r6, [pc, #56]	; (801bd78 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bd40:	4b0e      	ldr	r3, [pc, #56]	; (801bd7c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bd42:	b158      	cbz	r0, 801bd5c <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801bd44:	801d      	strh	r5, [r3, #0]
 801bd46:	2300      	movs	r3, #0
 801bd48:	4a0d      	ldr	r2, [pc, #52]	; (801bd80 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bd4a:	4620      	mov	r0, r4
 801bd4c:	6013      	str	r3, [r2, #0]
 801bd4e:	4a0d      	ldr	r2, [pc, #52]	; (801bd84 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bd50:	6033      	str	r3, [r6, #0]
 801bd52:	6013      	str	r3, [r2, #0]
 801bd54:	f7ff ffb8 	bl	801bcc8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bd58:	4620      	mov	r0, r4
 801bd5a:	bd70      	pop	{r4, r5, r6, pc}
 801bd5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bd60:	2002      	movs	r0, #2
 801bd62:	801a      	strh	r2, [r3, #0]
 801bd64:	6030      	str	r0, [r6, #0]
 801bd66:	f001 fa81 	bl	801d26c <_ZN8touchgfx6Screen4drawEv>
 801bd6a:	e7ec      	b.n	801bd46 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801bd6c:	0802f2b8 	.word	0x0802f2b8
 801bd70:	b5e8b5cd 	.word	0xb5e8b5cd
 801bd74:	f407a5c2 	.word	0xf407a5c2
 801bd78:	2400b908 	.word	0x2400b908
 801bd7c:	24000056 	.word	0x24000056
 801bd80:	2400b918 	.word	0x2400b918
 801bd84:	2400b90c 	.word	0x2400b90c

0801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bd88:	b510      	push	{r4, lr}
 801bd8a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801bd8e:	428b      	cmp	r3, r1
 801bd90:	d806      	bhi.n	801bda0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801bd92:	4b0b      	ldr	r3, [pc, #44]	; (801bdc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801bd94:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801bd98:	4a0a      	ldr	r2, [pc, #40]	; (801bdc4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801bd9a:	480b      	ldr	r0, [pc, #44]	; (801bdc8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801bd9c:	f00f f8b4 	bl	802af08 <__assert_func>
 801bda0:	3b01      	subs	r3, #1
 801bda2:	b29b      	uxth	r3, r3
 801bda4:	428b      	cmp	r3, r1
 801bda6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801bdaa:	d908      	bls.n	801bdbe <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801bdac:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801bdb0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801bdb4:	681a      	ldr	r2, [r3, #0]
 801bdb6:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801bdba:	685a      	ldr	r2, [r3, #4]
 801bdbc:	6062      	str	r2, [r4, #4]
 801bdbe:	bd10      	pop	{r4, pc}
 801bdc0:	0802f220 	.word	0x0802f220
 801bdc4:	0802f37d 	.word	0x0802f37d
 801bdc8:	0802f22e 	.word	0x0802f22e

0801bdcc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801bdcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bdce:	466b      	mov	r3, sp
 801bdd0:	4604      	mov	r4, r0
 801bdd2:	e883 0006 	stmia.w	r3, {r1, r2}
 801bdd6:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801bdda:	2a07      	cmp	r2, #7
 801bddc:	d906      	bls.n	801bdec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801bdde:	4b09      	ldr	r3, [pc, #36]	; (801be04 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801bde0:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801bde4:	4a08      	ldr	r2, [pc, #32]	; (801be08 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801bde6:	4809      	ldr	r0, [pc, #36]	; (801be0c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801bde8:	f00f f88e 	bl	802af08 <__assert_func>
 801bdec:	1c51      	adds	r1, r2, #1
 801bdee:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801bdf2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801bdf6:	cb03      	ldmia	r3!, {r0, r1}
 801bdf8:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801bdfc:	6069      	str	r1, [r5, #4]
 801bdfe:	b003      	add	sp, #12
 801be00:	bd30      	pop	{r4, r5, pc}
 801be02:	bf00      	nop
 801be04:	0802f27f 	.word	0x0802f27f
 801be08:	0802f413 	.word	0x0802f413
 801be0c:	0802f22e 	.word	0x0802f22e

0801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be14:	b08d      	sub	sp, #52	; 0x34
 801be16:	4683      	mov	fp, r0
 801be18:	ac08      	add	r4, sp, #32
 801be1a:	4620      	mov	r0, r4
 801be1c:	e884 0006 	stmia.w	r4, {r1, r2}
 801be20:	f7fc f9d5 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801be24:	2800      	cmp	r0, #0
 801be26:	d16a      	bne.n	801befe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801be28:	9402      	str	r4, [sp, #8]
 801be2a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801be2e:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801be32:	2400      	movs	r4, #0
 801be34:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801be38:	9301      	str	r3, [sp, #4]
 801be3a:	36a0      	adds	r6, #160	; 0xa0
 801be3c:	42a5      	cmp	r5, r4
 801be3e:	d00d      	beq.n	801be5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801be40:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801be44:	9802      	ldr	r0, [sp, #8]
 801be46:	f7ff fe89 	bl	801bb5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801be4a:	b128      	cbz	r0, 801be58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801be4c:	1e69      	subs	r1, r5, #1
 801be4e:	9801      	ldr	r0, [sp, #4]
 801be50:	1b09      	subs	r1, r1, r4
 801be52:	b289      	uxth	r1, r1
 801be54:	f7ff ff98 	bl	801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801be58:	3401      	adds	r4, #1
 801be5a:	e7ef      	b.n	801be3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801be5c:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801be60:	1e7b      	subs	r3, r7, #1
 801be62:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801be66:	9703      	str	r7, [sp, #12]
 801be68:	9300      	str	r3, [sp, #0]
 801be6a:	2400      	movs	r4, #0
 801be6c:	4655      	mov	r5, sl
 801be6e:	9704      	str	r7, [sp, #16]
 801be70:	4626      	mov	r6, r4
 801be72:	9b04      	ldr	r3, [sp, #16]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d078      	beq.n	801bf6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801be78:	9902      	ldr	r1, [sp, #8]
 801be7a:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801be7e:	f7ff fe4b 	bl	801bb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801be82:	b360      	cbz	r0, 801bede <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801be84:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801be88:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801be8c:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801be90:	45e6      	cmp	lr, ip
 801be92:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801be96:	db35      	blt.n	801bf04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801be98:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801be9c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801bea0:	4472      	add	r2, lr
 801bea2:	4463      	add	r3, ip
 801bea4:	b212      	sxth	r2, r2
 801bea6:	b21b      	sxth	r3, r3
 801bea8:	429a      	cmp	r2, r3
 801beaa:	dc2b      	bgt.n	801bf04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801beac:	fa1f f288 	uxth.w	r2, r8
 801beb0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801beb4:	45c1      	cmp	r9, r8
 801beb6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801beba:	4413      	add	r3, r2
 801bebc:	fa1f fc89 	uxth.w	ip, r9
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	fa0f fe83 	sxth.w	lr, r3
 801bec6:	db0f      	blt.n	801bee8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801bec8:	eba3 030c 	sub.w	r3, r3, ip
 801becc:	1ac9      	subs	r1, r1, r3
 801bece:	b209      	sxth	r1, r1
 801bed0:	2900      	cmp	r1, #0
 801bed2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801bed6:	dd12      	ble.n	801befe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bed8:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801bedc:	4604      	mov	r4, r0
 801bede:	9b04      	ldr	r3, [sp, #16]
 801bee0:	3d08      	subs	r5, #8
 801bee2:	3b01      	subs	r3, #1
 801bee4:	9304      	str	r3, [sp, #16]
 801bee6:	e7c4      	b.n	801be72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801bee8:	4461      	add	r1, ip
 801beea:	b209      	sxth	r1, r1
 801beec:	4571      	cmp	r1, lr
 801beee:	dc3a      	bgt.n	801bf66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bef0:	eba2 020c 	sub.w	r2, r2, ip
 801bef4:	b212      	sxth	r2, r2
 801bef6:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801befa:	2a00      	cmp	r2, #0
 801befc:	dcee      	bgt.n	801bedc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801befe:	b00d      	add	sp, #52	; 0x34
 801bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf04:	45c1      	cmp	r9, r8
 801bf06:	db2e      	blt.n	801bf66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf08:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801bf0c:	4499      	add	r9, r3
 801bf0e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801bf12:	4498      	add	r8, r3
 801bf14:	fa0f f989 	sxth.w	r9, r9
 801bf18:	fa0f f888 	sxth.w	r8, r8
 801bf1c:	45c1      	cmp	r9, r8
 801bf1e:	dc22      	bgt.n	801bf66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf20:	fa1f f28c 	uxth.w	r2, ip
 801bf24:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801bf28:	45e6      	cmp	lr, ip
 801bf2a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801bf2e:	4413      	add	r3, r2
 801bf30:	fa1f f88e 	uxth.w	r8, lr
 801bf34:	b29b      	uxth	r3, r3
 801bf36:	fa0f f983 	sxth.w	r9, r3
 801bf3a:	db0a      	blt.n	801bf52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801bf3c:	eba3 0308 	sub.w	r3, r3, r8
 801bf40:	1ac9      	subs	r1, r1, r3
 801bf42:	b209      	sxth	r1, r1
 801bf44:	2900      	cmp	r1, #0
 801bf46:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801bf4a:	ddd8      	ble.n	801befe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bf4c:	f8ad 9020 	strh.w	r9, [sp, #32]
 801bf50:	e7c4      	b.n	801bedc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801bf52:	4441      	add	r1, r8
 801bf54:	b209      	sxth	r1, r1
 801bf56:	4549      	cmp	r1, r9
 801bf58:	dc05      	bgt.n	801bf66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf5a:	eba2 0208 	sub.w	r2, r2, r8
 801bf5e:	b212      	sxth	r2, r2
 801bf60:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801bf64:	e7c9      	b.n	801befa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801bf66:	4606      	mov	r6, r0
 801bf68:	e7b9      	b.n	801bede <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801bf6a:	2c00      	cmp	r4, #0
 801bf6c:	f47f af7d 	bne.w	801be6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801bf70:	2e00      	cmp	r6, #0
 801bf72:	f000 81dc 	beq.w	801c32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801bf76:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801bf7a:	4655      	mov	r5, sl
 801bf7c:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801bf80:	b2b9      	uxth	r1, r7
 801bf82:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801bf86:	b2b3      	uxth	r3, r6
 801bf88:	9104      	str	r1, [sp, #16]
 801bf8a:	9804      	ldr	r0, [sp, #16]
 801bf8c:	441a      	add	r2, r3
 801bf8e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801bf92:	b292      	uxth	r2, r2
 801bf94:	4401      	add	r1, r0
 801bf96:	fa0f f882 	sxth.w	r8, r2
 801bf9a:	b289      	uxth	r1, r1
 801bf9c:	9105      	str	r1, [sp, #20]
 801bf9e:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801bfa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801bfa6:	9b03      	ldr	r3, [sp, #12]
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d054      	beq.n	801c056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801bfac:	9902      	ldr	r1, [sp, #8]
 801bfae:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801bfb2:	f7ff fdb1 	bl	801bb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bfb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bfba:	b1d8      	cbz	r0, 801bff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801bfbc:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801bfc0:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801bfc4:	4576      	cmp	r6, lr
 801bfc6:	dc26      	bgt.n	801c016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bfc8:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801bfcc:	44f4      	add	ip, lr
 801bfce:	fa0f fc8c 	sxth.w	ip, ip
 801bfd2:	45e0      	cmp	r8, ip
 801bfd4:	db1f      	blt.n	801c016 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801bfd6:	428f      	cmp	r7, r1
 801bfd8:	fa1f fc81 	uxth.w	ip, r1
 801bfdc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801bfe0:	dc0f      	bgt.n	801c002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801bfe2:	9805      	ldr	r0, [sp, #20]
 801bfe4:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801bfe8:	eba0 0c0c 	sub.w	ip, r0, ip
 801bfec:	eba1 010c 	sub.w	r1, r1, ip
 801bff0:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801bff4:	4620      	mov	r0, r4
 801bff6:	9903      	ldr	r1, [sp, #12]
 801bff8:	3d08      	subs	r5, #8
 801bffa:	4604      	mov	r4, r0
 801bffc:	3901      	subs	r1, #1
 801bffe:	9103      	str	r1, [sp, #12]
 801c000:	e7cf      	b.n	801bfa2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c002:	4461      	add	r1, ip
 801c004:	b209      	sxth	r1, r1
 801c006:	4549      	cmp	r1, r9
 801c008:	dcf5      	bgt.n	801bff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c00a:	9904      	ldr	r1, [sp, #16]
 801c00c:	eba1 0c0c 	sub.w	ip, r1, ip
 801c010:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801c014:	e7ee      	b.n	801bff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c016:	428f      	cmp	r7, r1
 801c018:	dced      	bgt.n	801bff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c01a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801c01e:	4461      	add	r1, ip
 801c020:	b209      	sxth	r1, r1
 801c022:	4589      	cmp	r9, r1
 801c024:	dbe7      	blt.n	801bff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c026:	4576      	cmp	r6, lr
 801c028:	fa1f fc8e 	uxth.w	ip, lr
 801c02c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801c030:	dc08      	bgt.n	801c044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c032:	eba2 0c0c 	sub.w	ip, r2, ip
 801c036:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801c03a:	eba1 010c 	sub.w	r1, r1, ip
 801c03e:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801c042:	e7d7      	b.n	801bff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c044:	4461      	add	r1, ip
 801c046:	b209      	sxth	r1, r1
 801c048:	4588      	cmp	r8, r1
 801c04a:	dbd4      	blt.n	801bff6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c04c:	eba3 0c0c 	sub.w	ip, r3, ip
 801c050:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801c054:	e7ce      	b.n	801bff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c056:	2c00      	cmp	r4, #0
 801c058:	f000 8169 	beq.w	801c32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801c05c:	9b00      	ldr	r3, [sp, #0]
 801c05e:	3301      	adds	r3, #1
 801c060:	f000 8165 	beq.w	801c32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801c064:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801c068:	9802      	ldr	r0, [sp, #8]
 801c06a:	4621      	mov	r1, r4
 801c06c:	f7ff fd76 	bl	801bb5c <_ZNK8touchgfx4Rect8includesERKS0_>
 801c070:	b120      	cbz	r0, 801c07c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c072:	f8bd 1000 	ldrh.w	r1, [sp]
 801c076:	9801      	ldr	r0, [sp, #4]
 801c078:	f7ff fe86 	bl	801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c07c:	9902      	ldr	r1, [sp, #8]
 801c07e:	4620      	mov	r0, r4
 801c080:	f7ff fd4a 	bl	801bb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c084:	2800      	cmp	r0, #0
 801c086:	f000 809b 	beq.w	801c1c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c08a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c08e:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801c092:	fa1f f288 	uxth.w	r2, r8
 801c096:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801c09a:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801c09e:	19d5      	adds	r5, r2, r7
 801c0a0:	b2a1      	uxth	r1, r4
 801c0a2:	45a0      	cmp	r8, r4
 801c0a4:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c0a8:	fa1f f985 	uxth.w	r9, r5
 801c0ac:	440b      	add	r3, r1
 801c0ae:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801c0b2:	fa0f f589 	sxth.w	r5, r9
 801c0b6:	b29b      	uxth	r3, r3
 801c0b8:	9503      	str	r5, [sp, #12]
 801c0ba:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801c0be:	9507      	str	r5, [sp, #28]
 801c0c0:	f340 809d 	ble.w	801c1fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c0c4:	1a52      	subs	r2, r2, r1
 801c0c6:	4584      	cmp	ip, r0
 801c0c8:	fa0f fe83 	sxth.w	lr, r3
 801c0cc:	b292      	uxth	r2, r2
 801c0ce:	b215      	sxth	r5, r2
 801c0d0:	dd2f      	ble.n	801c132 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c0d2:	9e00      	ldr	r6, [sp, #0]
 801c0d4:	fa1f fc8c 	uxth.w	ip, ip
 801c0d8:	b280      	uxth	r0, r0
 801c0da:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801c0de:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c0e2:	9e03      	ldr	r6, [sp, #12]
 801c0e4:	ebac 0300 	sub.w	r3, ip, r0
 801c0e8:	448c      	add	ip, r1
 801c0ea:	eba6 060e 	sub.w	r6, r6, lr
 801c0ee:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801c0f2:	b29b      	uxth	r3, r3
 801c0f4:	4470      	add	r0, lr
 801c0f6:	fa0f fc8c 	sxth.w	ip, ip
 801c0fa:	b21c      	sxth	r4, r3
 801c0fc:	b200      	sxth	r0, r0
 801c0fe:	4366      	muls	r6, r4
 801c100:	ebac 0000 	sub.w	r0, ip, r0
 801c104:	4368      	muls	r0, r5
 801c106:	4286      	cmp	r6, r0
 801c108:	db09      	blt.n	801c11e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c10a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801c10e:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801c112:	4417      	add	r7, r2
 801c114:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c118:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c11c:	e685      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c11e:	440b      	add	r3, r1
 801c120:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801c124:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c128:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801c12c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c130:	e67b      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c132:	9e03      	ldr	r6, [sp, #12]
 801c134:	45b6      	cmp	lr, r6
 801c136:	da28      	bge.n	801c18a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c138:	9b00      	ldr	r3, [sp, #0]
 801c13a:	eba6 060e 	sub.w	r6, r6, lr
 801c13e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801c142:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c146:	eb04 030c 	add.w	r3, r4, ip
 801c14a:	fa1f f883 	uxth.w	r8, r3
 801c14e:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801c152:	4403      	add	r3, r0
 801c154:	fa0f f988 	sxth.w	r9, r8
 801c158:	eba0 000c 	sub.w	r0, r0, ip
 801c15c:	eba3 0308 	sub.w	r3, r3, r8
 801c160:	4368      	muls	r0, r5
 801c162:	b29b      	uxth	r3, r3
 801c164:	fa0f f883 	sxth.w	r8, r3
 801c168:	fb08 f606 	mul.w	r6, r8, r6
 801c16c:	42b0      	cmp	r0, r6
 801c16e:	dc06      	bgt.n	801c17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c170:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801c174:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801c178:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801c17c:	e7c9      	b.n	801c112 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c17e:	4423      	add	r3, r4
 801c180:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801c184:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801c188:	e64f      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c18a:	eba3 0309 	sub.w	r3, r3, r9
 801c18e:	9807      	ldr	r0, [sp, #28]
 801c190:	b29b      	uxth	r3, r3
 801c192:	2806      	cmp	r0, #6
 801c194:	fa0f fc83 	sxth.w	ip, r3
 801c198:	d818      	bhi.n	801c1cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c19a:	4652      	mov	r2, sl
 801c19c:	ab0a      	add	r3, sp, #40	; 0x28
 801c19e:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c1a2:	6851      	ldr	r1, [r2, #4]
 801c1a4:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801c1a8:	c303      	stmia	r3!, {r0, r1}
 801c1aa:	9b03      	ldr	r3, [sp, #12]
 801c1ac:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801c1b0:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801c1b4:	ab0a      	add	r3, sp, #40	; 0x28
 801c1b6:	9801      	ldr	r0, [sp, #4]
 801c1b8:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c1bc:	f7ff fe06 	bl	801bdcc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c1c0:	9b00      	ldr	r3, [sp, #0]
 801c1c2:	f1aa 0a08 	sub.w	sl, sl, #8
 801c1c6:	3b01      	subs	r3, #1
 801c1c8:	9300      	str	r3, [sp, #0]
 801c1ca:	e747      	b.n	801c05c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c1cc:	9800      	ldr	r0, [sp, #0]
 801c1ce:	45ac      	cmp	ip, r5
 801c1d0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c1d4:	db0c      	blt.n	801c1f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c1d6:	4417      	add	r7, r2
 801c1d8:	4458      	add	r0, fp
 801c1da:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c1de:	b2bf      	uxth	r7, r7
 801c1e0:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801c1e4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801c1e8:	440f      	add	r7, r1
 801c1ea:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801c1ee:	e61c      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c1f0:	4458      	add	r0, fp
 801c1f2:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801c1f6:	443b      	add	r3, r7
 801c1f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801c1fc:	e615      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c1fe:	fa1f f18c 	uxth.w	r1, ip
 801c202:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801c206:	b282      	uxth	r2, r0
 801c208:	4584      	cmp	ip, r0
 801c20a:	eb01 0e05 	add.w	lr, r1, r5
 801c20e:	9204      	str	r2, [sp, #16]
 801c210:	fa1f fe8e 	uxth.w	lr, lr
 801c214:	9e04      	ldr	r6, [sp, #16]
 801c216:	fa0f f28e 	sxth.w	r2, lr
 801c21a:	9205      	str	r2, [sp, #20]
 801c21c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801c220:	4432      	add	r2, r6
 801c222:	b292      	uxth	r2, r2
 801c224:	9206      	str	r2, [sp, #24]
 801c226:	da26      	bge.n	801c276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c228:	eba3 0309 	sub.w	r3, r3, r9
 801c22c:	eba2 020e 	sub.w	r2, r2, lr
 801c230:	eba0 000c 	sub.w	r0, r0, ip
 801c234:	eba4 0408 	sub.w	r4, r4, r8
 801c238:	b29b      	uxth	r3, r3
 801c23a:	b292      	uxth	r2, r2
 801c23c:	fa0f fa83 	sxth.w	sl, r3
 801c240:	b211      	sxth	r1, r2
 801c242:	fb0a f000 	mul.w	r0, sl, r0
 801c246:	434c      	muls	r4, r1
 801c248:	42a0      	cmp	r0, r4
 801c24a:	9800      	ldr	r0, [sp, #0]
 801c24c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c250:	dc06      	bgt.n	801c260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c252:	4458      	add	r0, fp
 801c254:	9a05      	ldr	r2, [sp, #20]
 801c256:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801c25a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801c25e:	e7ca      	b.n	801c1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c260:	eb0b 0300 	add.w	r3, fp, r0
 801c264:	9903      	ldr	r1, [sp, #12]
 801c266:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801c26a:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801c26e:	442a      	add	r2, r5
 801c270:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801c274:	e5d9      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c276:	9e04      	ldr	r6, [sp, #16]
 801c278:	9a03      	ldr	r2, [sp, #12]
 801c27a:	1b89      	subs	r1, r1, r6
 801c27c:	b21e      	sxth	r6, r3
 801c27e:	b289      	uxth	r1, r1
 801c280:	4296      	cmp	r6, r2
 801c282:	fa0f fc81 	sxth.w	ip, r1
 801c286:	dd25      	ble.n	801c2d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801c288:	eba3 0309 	sub.w	r3, r3, r9
 801c28c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c290:	9e05      	ldr	r6, [sp, #20]
 801c292:	eba4 0408 	sub.w	r4, r4, r8
 801c296:	b29b      	uxth	r3, r3
 801c298:	eba6 0902 	sub.w	r9, r6, r2
 801c29c:	fb0c f404 	mul.w	r4, ip, r4
 801c2a0:	b218      	sxth	r0, r3
 801c2a2:	9a00      	ldr	r2, [sp, #0]
 801c2a4:	fb00 f909 	mul.w	r9, r0, r9
 801c2a8:	00d2      	lsls	r2, r2, #3
 801c2aa:	454c      	cmp	r4, r9
 801c2ac:	db03      	blt.n	801c2b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801c2ae:	445a      	add	r2, fp
 801c2b0:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801c2b4:	e79f      	b.n	801c1f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c2b6:	eb0b 0302 	add.w	r3, fp, r2
 801c2ba:	9a03      	ldr	r2, [sp, #12]
 801c2bc:	4429      	add	r1, r5
 801c2be:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801c2c2:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801c2c6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801c2ca:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c2ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801c2d2:	e5aa      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c2d4:	9b06      	ldr	r3, [sp, #24]
 801c2d6:	9c07      	ldr	r4, [sp, #28]
 801c2d8:	eba3 020e 	sub.w	r2, r3, lr
 801c2dc:	2c06      	cmp	r4, #6
 801c2de:	b292      	uxth	r2, r2
 801c2e0:	b213      	sxth	r3, r2
 801c2e2:	d80d      	bhi.n	801c300 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801c2e4:	4651      	mov	r1, sl
 801c2e6:	aa0a      	add	r2, sp, #40	; 0x28
 801c2e8:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c2ec:	6849      	ldr	r1, [r1, #4]
 801c2ee:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801c2f2:	9b05      	ldr	r3, [sp, #20]
 801c2f4:	c203      	stmia	r2!, {r0, r1}
 801c2f6:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801c2fa:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801c2fe:	e759      	b.n	801c1b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c300:	9c00      	ldr	r4, [sp, #0]
 801c302:	4563      	cmp	r3, ip
 801c304:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c308:	db0d      	blt.n	801c326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801c30a:	4429      	add	r1, r5
 801c30c:	9a04      	ldr	r2, [sp, #16]
 801c30e:	445c      	add	r4, fp
 801c310:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c314:	b289      	uxth	r1, r1
 801c316:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801c31a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801c31e:	4411      	add	r1, r2
 801c320:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801c324:	e581      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c326:	445c      	add	r4, fp
 801c328:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801c32c:	e79f      	b.n	801c26e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c32e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801c332:	2f07      	cmp	r7, #7
 801c334:	d806      	bhi.n	801c344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801c336:	ab08      	add	r3, sp, #32
 801c338:	9801      	ldr	r0, [sp, #4]
 801c33a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c33e:	f7ff fd45 	bl	801bdcc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c342:	e5dc      	b.n	801befe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c344:	f107 39ff 	add.w	r9, r7, #4294967295
 801c348:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801c34c:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c350:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801c354:	f04f 35ff 	mov.w	r5, #4294967295
 801c358:	2400      	movs	r4, #0
 801c35a:	9304      	str	r3, [sp, #16]
 801c35c:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801c360:	f109 32ff 	add.w	r2, r9, #4294967295
 801c364:	9300      	str	r3, [sp, #0]
 801c366:	4690      	mov	r8, r2
 801c368:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801c36c:	9303      	str	r3, [sp, #12]
 801c36e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c372:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c376:	6818      	ldr	r0, [r3, #0]
 801c378:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801c37c:	9206      	str	r2, [sp, #24]
 801c37e:	bf16      	itet	ne
 801c380:	9904      	ldrne	r1, [sp, #16]
 801c382:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c386:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c38a:	9305      	str	r3, [sp, #20]
 801c38c:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c390:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c394:	fb16 f601 	smulbb	r6, r6, r1
 801c398:	6859      	ldr	r1, [r3, #4]
 801c39a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c39e:	4671      	mov	r1, lr
 801c3a0:	a80a      	add	r0, sp, #40	; 0x28
 801c3a2:	f7ff fbfd 	bl	801bba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c3a6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801c3aa:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801c3ae:	9b03      	ldr	r3, [sp, #12]
 801c3b0:	9a00      	ldr	r2, [sp, #0]
 801c3b2:	fb11 f100 	smulbb	r1, r1, r0
 801c3b6:	2008      	movs	r0, #8
 801c3b8:	fb02 6603 	mla	r6, r2, r3, r6
 801c3bc:	1b8e      	subs	r6, r1, r6
 801c3be:	fb91 f1f0 	sdiv	r1, r1, r0
 801c3c2:	42b1      	cmp	r1, r6
 801c3c4:	dc21      	bgt.n	801c40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c3c6:	4556      	cmp	r6, sl
 801c3c8:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c3cc:	da03      	bge.n	801c3d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801c3ce:	b1e6      	cbz	r6, 801c40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c3d0:	46b2      	mov	sl, r6
 801c3d2:	4645      	mov	r5, r8
 801c3d4:	464c      	mov	r4, r9
 801c3d6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c3da:	f118 0f02 	cmn.w	r8, #2
 801c3de:	d1c8      	bne.n	801c372 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801c3e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c3e4:	f1a7 0708 	sub.w	r7, r7, #8
 801c3e8:	4691      	mov	r9, r2
 801c3ea:	d1b7      	bne.n	801c35c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801c3ec:	9b01      	ldr	r3, [sp, #4]
 801c3ee:	b2a6      	uxth	r6, r4
 801c3f0:	00e4      	lsls	r4, r4, #3
 801c3f2:	1918      	adds	r0, r3, r4
 801c3f4:	1c6b      	adds	r3, r5, #1
 801c3f6:	d10b      	bne.n	801c410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801c3f8:	4601      	mov	r1, r0
 801c3fa:	9802      	ldr	r0, [sp, #8]
 801c3fc:	f7ff fbd0 	bl	801bba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c400:	4631      	mov	r1, r6
 801c402:	9801      	ldr	r0, [sp, #4]
 801c404:	f7ff fcc0 	bl	801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c408:	e50f      	b.n	801be2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c40a:	4645      	mov	r5, r8
 801c40c:	464c      	mov	r4, r9
 801c40e:	e7ed      	b.n	801c3ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801c410:	9b01      	ldr	r3, [sp, #4]
 801c412:	00ed      	lsls	r5, r5, #3
 801c414:	445c      	add	r4, fp
 801c416:	1959      	adds	r1, r3, r5
 801c418:	445d      	add	r5, fp
 801c41a:	f7ff fbc1 	bl	801bba0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c41e:	9b02      	ldr	r3, [sp, #8]
 801c420:	cb03      	ldmia	r3!, {r0, r1}
 801c422:	9b02      	ldr	r3, [sp, #8]
 801c424:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801c428:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801c42c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c430:	6861      	ldr	r1, [r4, #4]
 801c432:	c303      	stmia	r3!, {r0, r1}
 801c434:	e7e4      	b.n	801c400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801c438 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c438:	4b1d      	ldr	r3, [pc, #116]	; (801c4b0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c43a:	b530      	push	{r4, r5, lr}
 801c43c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c440:	b085      	sub	sp, #20
 801c442:	4b1c      	ldr	r3, [pc, #112]	; (801c4b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c444:	460c      	mov	r4, r1
 801c446:	2100      	movs	r1, #0
 801c448:	4605      	mov	r5, r0
 801c44a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c44e:	6820      	ldr	r0, [r4, #0]
 801c450:	9100      	str	r1, [sp, #0]
 801c452:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c456:	ab02      	add	r3, sp, #8
 801c458:	6861      	ldr	r1, [r4, #4]
 801c45a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c45e:	c303      	stmia	r3!, {r0, r1}
 801c460:	4669      	mov	r1, sp
 801c462:	a802      	add	r0, sp, #8
 801c464:	f7fb fe70 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801c468:	ab02      	add	r3, sp, #8
 801c46a:	cb03      	ldmia	r3!, {r0, r1}
 801c46c:	4b12      	ldr	r3, [pc, #72]	; (801c4b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c46e:	6020      	str	r0, [r4, #0]
 801c470:	6818      	ldr	r0, [r3, #0]
 801c472:	6061      	str	r1, [r4, #4]
 801c474:	b138      	cbz	r0, 801c486 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c476:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801c47a:	b133      	cbz	r3, 801c48a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c47c:	6821      	ldr	r1, [r4, #0]
 801c47e:	4628      	mov	r0, r5
 801c480:	6862      	ldr	r2, [r4, #4]
 801c482:	f7ff fcc5 	bl	801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c486:	b005      	add	sp, #20
 801c488:	bd30      	pop	{r4, r5, pc}
 801c48a:	6803      	ldr	r3, [r0, #0]
 801c48c:	4621      	mov	r1, r4
 801c48e:	689b      	ldr	r3, [r3, #8]
 801c490:	4798      	blx	r3
 801c492:	4b0a      	ldr	r3, [pc, #40]	; (801c4bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c494:	6818      	ldr	r0, [r3, #0]
 801c496:	b118      	cbz	r0, 801c4a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c498:	6803      	ldr	r3, [r0, #0]
 801c49a:	4621      	mov	r1, r4
 801c49c:	689b      	ldr	r3, [r3, #8]
 801c49e:	4798      	blx	r3
 801c4a0:	4b07      	ldr	r3, [pc, #28]	; (801c4c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c4a2:	4621      	mov	r1, r4
 801c4a4:	6818      	ldr	r0, [r3, #0]
 801c4a6:	6803      	ldr	r3, [r0, #0]
 801c4a8:	69db      	ldr	r3, [r3, #28]
 801c4aa:	4798      	blx	r3
 801c4ac:	e7eb      	b.n	801c486 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c4ae:	bf00      	nop
 801c4b0:	2400b8c0 	.word	0x2400b8c0
 801c4b4:	2400b8c2 	.word	0x2400b8c2
 801c4b8:	2400b908 	.word	0x2400b908
 801c4bc:	2400b904 	.word	0x2400b904
 801c4c0:	2400b8cc 	.word	0x2400b8cc

0801c4c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4c8:	4604      	mov	r4, r0
 801c4ca:	b09b      	sub	sp, #108	; 0x6c
 801c4cc:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801c4d0:	b129      	cbz	r1, 801c4de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801c4d8:	b01b      	add	sp, #108	; 0x6c
 801c4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4de:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801c4e2:	4630      	mov	r0, r6
 801c4e4:	f7fb fe73 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c4e8:	4605      	mov	r5, r0
 801c4ea:	b940      	cbnz	r0, 801c4fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c4ec:	4620      	mov	r0, r4
 801c4ee:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c4f2:	f7ff fc8d 	bl	801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c4f6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801c4fa:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801c4fe:	4ba6      	ldr	r3, [pc, #664]	; (801c798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	b33b      	cbz	r3, 801c554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c504:	4da5      	ldr	r5, [pc, #660]	; (801c79c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c506:	4628      	mov	r0, r5
 801c508:	f7fb fe61 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c50c:	4606      	mov	r6, r0
 801c50e:	bb08      	cbnz	r0, 801c554 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c510:	4628      	mov	r0, r5
 801c512:	f7ff f9b1 	bl	801b878 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c516:	6829      	ldr	r1, [r5, #0]
 801c518:	686a      	ldr	r2, [r5, #4]
 801c51a:	4620      	mov	r0, r4
 801c51c:	f7ff fc78 	bl	801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c520:	802e      	strh	r6, [r5, #0]
 801c522:	806e      	strh	r6, [r5, #2]
 801c524:	80ae      	strh	r6, [r5, #4]
 801c526:	80ee      	strh	r6, [r5, #6]
 801c528:	4f9d      	ldr	r7, [pc, #628]	; (801c7a0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c52a:	a809      	add	r0, sp, #36	; 0x24
 801c52c:	f7ff fbd7 	bl	801bcde <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c530:	883d      	ldrh	r5, [r7, #0]
 801c532:	462e      	mov	r6, r5
 801c534:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c538:	42b3      	cmp	r3, r6
 801c53a:	d910      	bls.n	801c55e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c53c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c540:	3601      	adds	r6, #1
 801c542:	a809      	add	r0, sp, #36	; 0x24
 801c544:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801c548:	b2b6      	uxth	r6, r6
 801c54a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801c54e:	f7ff fc3d 	bl	801bdcc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c552:	e7ef      	b.n	801c534 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c554:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d1e5      	bne.n	801c528 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c55c:	e7bc      	b.n	801c4d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c55e:	462e      	mov	r6, r5
 801c560:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801c564:	42b3      	cmp	r3, r6
 801c566:	d90b      	bls.n	801c580 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c568:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c56c:	3601      	adds	r6, #1
 801c56e:	4620      	mov	r0, r4
 801c570:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801c574:	b2b6      	uxth	r6, r6
 801c576:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801c57a:	f7ff fc49 	bl	801be10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c57e:	e7ef      	b.n	801c560 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c580:	4a88      	ldr	r2, [pc, #544]	; (801c7a4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c582:	6813      	ldr	r3, [r2, #0]
 801c584:	4690      	mov	r8, r2
 801c586:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801c58a:	2b01      	cmp	r3, #1
 801c58c:	f040 8094 	bne.w	801c6b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801c590:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c594:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801c598:	f04f 0900 	mov.w	r9, #0
 801c59c:	33aa      	adds	r3, #170	; 0xaa
 801c59e:	42a8      	cmp	r0, r5
 801c5a0:	f103 0308 	add.w	r3, r3, #8
 801c5a4:	dd0a      	ble.n	801c5bc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801c5a6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c5aa:	3501      	adds	r5, #1
 801c5ac:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c5b0:	440a      	add	r2, r1
 801c5b2:	b212      	sxth	r2, r2
 801c5b4:	4591      	cmp	r9, r2
 801c5b6:	bfb8      	it	lt
 801c5b8:	4691      	movlt	r9, r2
 801c5ba:	e7f0      	b.n	801c59e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801c5bc:	4b7a      	ldr	r3, [pc, #488]	; (801c7a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c5be:	4e7b      	ldr	r6, [pc, #492]	; (801c7ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c5c0:	881d      	ldrh	r5, [r3, #0]
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	2d0f      	cmp	r5, #15
 801c5c6:	bf8c      	ite	hi
 801c5c8:	08ed      	lsrhi	r5, r5, #3
 801c5ca:	2501      	movls	r5, #1
 801c5cc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c5d0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c5d4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c5d8:	f8d8 0000 	ldr.w	r0, [r8]
 801c5dc:	440b      	add	r3, r1
 801c5de:	6802      	ldr	r2, [r0, #0]
 801c5e0:	b21b      	sxth	r3, r3
 801c5e2:	4599      	cmp	r9, r3
 801c5e4:	dd4b      	ble.n	801c67e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801c5e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801c5ea:	4798      	blx	r3
 801c5ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c5f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c5f4:	4413      	add	r3, r2
 801c5f6:	b21b      	sxth	r3, r3
 801c5f8:	195a      	adds	r2, r3, r5
 801c5fa:	4290      	cmp	r0, r2
 801c5fc:	da07      	bge.n	801c60e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c5fe:	4581      	cmp	r9, r0
 801c600:	dd05      	ble.n	801c60e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c602:	4298      	cmp	r0, r3
 801c604:	da33      	bge.n	801c66e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c606:	2b00      	cmp	r3, #0
 801c608:	dd31      	ble.n	801c66e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c60a:	4648      	mov	r0, r9
 801c60c:	e004      	b.n	801c618 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801c60e:	4298      	cmp	r0, r3
 801c610:	dbfb      	blt.n	801c60a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801c612:	4548      	cmp	r0, r9
 801c614:	bfa8      	it	ge
 801c616:	4648      	movge	r0, r9
 801c618:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c61c:	2100      	movs	r1, #0
 801c61e:	1ac0      	subs	r0, r0, r3
 801c620:	f8b7 a000 	ldrh.w	sl, [r7]
 801c624:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c628:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c62c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c630:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c634:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c638:	4553      	cmp	r3, sl
 801c63a:	d9c9      	bls.n	801c5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c63c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c640:	ab07      	add	r3, sp, #28
 801c642:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c646:	6851      	ldr	r1, [r2, #4]
 801c648:	c303      	stmia	r3!, {r0, r1}
 801c64a:	a807      	add	r0, sp, #28
 801c64c:	a905      	add	r1, sp, #20
 801c64e:	f7fb fd7b 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801c652:	a807      	add	r0, sp, #28
 801c654:	f7fb fdbb 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c658:	b920      	cbnz	r0, 801c664 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801c65a:	6823      	ldr	r3, [r4, #0]
 801c65c:	a907      	add	r1, sp, #28
 801c65e:	4620      	mov	r0, r4
 801c660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c662:	4798      	blx	r3
 801c664:	f10a 0a01 	add.w	sl, sl, #1
 801c668:	fa1f fa8a 	uxth.w	sl, sl
 801c66c:	e7e2      	b.n	801c634 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c66e:	f8d8 0000 	ldr.w	r0, [r8]
 801c672:	2101      	movs	r1, #1
 801c674:	6803      	ldr	r3, [r0, #0]
 801c676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c67a:	4798      	blx	r3
 801c67c:	e7a8      	b.n	801c5d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c67e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801c680:	4798      	blx	r3
 801c682:	4b4b      	ldr	r3, [pc, #300]	; (801c7b0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c684:	781b      	ldrb	r3, [r3, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	f43f af26 	beq.w	801c4d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c68c:	2300      	movs	r3, #0
 801c68e:	883d      	ldrh	r5, [r7, #0]
 801c690:	34ea      	adds	r4, #234	; 0xea
 801c692:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801c696:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801c69a:	42ab      	cmp	r3, r5
 801c69c:	f67f af1c 	bls.w	801c4d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c6a0:	ab1a      	add	r3, sp, #104	; 0x68
 801c6a2:	4620      	mov	r0, r4
 801c6a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c6a8:	3501      	adds	r5, #1
 801c6aa:	3b44      	subs	r3, #68	; 0x44
 801c6ac:	b2ad      	uxth	r5, r5
 801c6ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c6b2:	f7ff fb8b 	bl	801bdcc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c6b6:	e7ee      	b.n	801c696 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801c6b8:	2b02      	cmp	r3, #2
 801c6ba:	f040 813d 	bne.w	801c938 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801c6be:	4b3d      	ldr	r3, [pc, #244]	; (801c7b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801c6c0:	781b      	ldrb	r3, [r3, #0]
 801c6c2:	2b01      	cmp	r3, #1
 801c6c4:	d02c      	beq.n	801c720 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801c6c6:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801c6ca:	883a      	ldrh	r2, [r7, #0]
 801c6cc:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801c6d0:	3201      	adds	r2, #1
 801c6d2:	b292      	uxth	r2, r2
 801c6d4:	2900      	cmp	r1, #0
 801c6d6:	d0d4      	beq.n	801c682 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c6d8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801c6dc:	4610      	mov	r0, r2
 801c6de:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801c6e2:	f04f 0a00 	mov.w	sl, #0
 801c6e6:	441d      	add	r5, r3
 801c6e8:	b22d      	sxth	r5, r5
 801c6ea:	b283      	uxth	r3, r0
 801c6ec:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801c6f0:	4299      	cmp	r1, r3
 801c6f2:	f240 80c3 	bls.w	801c87c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801c6f6:	4426      	add	r6, r4
 801c6f8:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801c6fc:	4684      	mov	ip, r0
 801c6fe:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801c702:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801c706:	4573      	cmp	r3, lr
 801c708:	f340 80a5 	ble.w	801c856 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801c70c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801c710:	4475      	add	r5, lr
 801c712:	b22d      	sxth	r5, r5
 801c714:	429d      	cmp	r5, r3
 801c716:	bfa8      	it	ge
 801c718:	461d      	movge	r5, r3
 801c71a:	3001      	adds	r0, #1
 801c71c:	46e2      	mov	sl, ip
 801c71e:	e7e4      	b.n	801c6ea <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801c720:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801c724:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801c728:	f1bb 0f00 	cmp.w	fp, #0
 801c72c:	d0a9      	beq.n	801c682 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c72e:	883b      	ldrh	r3, [r7, #0]
 801c730:	2600      	movs	r6, #0
 801c732:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801c736:	3301      	adds	r3, #1
 801c738:	b29b      	uxth	r3, r3
 801c73a:	b299      	uxth	r1, r3
 801c73c:	00f5      	lsls	r5, r6, #3
 801c73e:	458b      	cmp	fp, r1
 801c740:	d93a      	bls.n	801c7b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c742:	4425      	add	r5, r4
 801c744:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c748:	469c      	mov	ip, r3
 801c74a:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801c74e:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801c752:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801c756:	4408      	add	r0, r1
 801c758:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801c75c:	4471      	add	r1, lr
 801c75e:	b200      	sxth	r0, r0
 801c760:	b209      	sxth	r1, r1
 801c762:	4288      	cmp	r0, r1
 801c764:	da06      	bge.n	801c774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801c766:	4586      	cmp	lr, r0
 801c768:	4672      	mov	r2, lr
 801c76a:	bfb8      	it	lt
 801c76c:	4602      	movlt	r2, r0
 801c76e:	3301      	adds	r3, #1
 801c770:	4666      	mov	r6, ip
 801c772:	e7e2      	b.n	801c73a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c774:	d10b      	bne.n	801c78e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801c776:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801c77a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801c77e:	458c      	cmp	ip, r1
 801c780:	bfb4      	ite	lt
 801c782:	469c      	movlt	ip, r3
 801c784:	46b4      	movge	ip, r6
 801c786:	4572      	cmp	r2, lr
 801c788:	bfb8      	it	lt
 801c78a:	4672      	movlt	r2, lr
 801c78c:	e7ef      	b.n	801c76e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c78e:	428a      	cmp	r2, r1
 801c790:	46b4      	mov	ip, r6
 801c792:	bfb8      	it	lt
 801c794:	460a      	movlt	r2, r1
 801c796:	e7ea      	b.n	801c76e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c798:	2400b904 	.word	0x2400b904
 801c79c:	2400b910 	.word	0x2400b910
 801c7a0:	24000056 	.word	0x24000056
 801c7a4:	2400b8cc 	.word	0x2400b8cc
 801c7a8:	2400b8c2 	.word	0x2400b8c2
 801c7ac:	2400b8c0 	.word	0x2400b8c0
 801c7b0:	2400b8ca 	.word	0x2400b8ca
 801c7b4:	2400b8c4 	.word	0x2400b8c4
 801c7b8:	1961      	adds	r1, r4, r5
 801c7ba:	ab07      	add	r3, sp, #28
 801c7bc:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c7c0:	6849      	ldr	r1, [r1, #4]
 801c7c2:	c303      	stmia	r3!, {r0, r1}
 801c7c4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c7c8:	a807      	add	r0, sp, #28
 801c7ca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c7ce:	2b13      	cmp	r3, #19
 801c7d0:	440b      	add	r3, r1
 801c7d2:	bfd8      	it	le
 801c7d4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c7d8:	1a9b      	subs	r3, r3, r2
 801c7da:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c7de:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c7e2:	f7ff f863 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c7e6:	a807      	add	r0, sp, #28
 801c7e8:	f7fb fcf1 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c7ec:	2800      	cmp	r0, #0
 801c7ee:	d199      	bne.n	801c724 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c7f0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801c7f4:	4425      	add	r5, r4
 801c7f6:	f8d8 0000 	ldr.w	r0, [r8]
 801c7fa:	f1bc 0f14 	cmp.w	ip, #20
 801c7fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c802:	f8d0 e000 	ldr.w	lr, [r0]
 801c806:	bfa8      	it	ge
 801c808:	f04f 0c14 	movge.w	ip, #20
 801c80c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c810:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c814:	fa1f fc8c 	uxth.w	ip, ip
 801c818:	f8cd c000 	str.w	ip, [sp]
 801c81c:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801c820:	47d0      	blx	sl
 801c822:	4682      	mov	sl, r0
 801c824:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c828:	a807      	add	r0, sp, #28
 801c82a:	f7ff f825 	bl	801b878 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c82e:	6823      	ldr	r3, [r4, #0]
 801c830:	4620      	mov	r0, r4
 801c832:	a907      	add	r1, sp, #28
 801c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c836:	4798      	blx	r3
 801c838:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801c83c:	eba0 000a 	sub.w	r0, r0, sl
 801c840:	b200      	sxth	r0, r0
 801c842:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801c846:	2800      	cmp	r0, #0
 801c848:	f47f af6c 	bne.w	801c724 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c84c:	b2b1      	uxth	r1, r6
 801c84e:	4648      	mov	r0, r9
 801c850:	f7ff fa9a 	bl	801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c854:	e766      	b.n	801c724 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c856:	d10c      	bne.n	801c872 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801c858:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801c85c:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801c860:	45b4      	cmp	ip, r6
 801c862:	bfb4      	ite	lt
 801c864:	4684      	movlt	ip, r0
 801c866:	46d4      	movge	ip, sl
 801c868:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801c86c:	4433      	add	r3, r6
 801c86e:	b21b      	sxth	r3, r3
 801c870:	e750      	b.n	801c714 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801c872:	4575      	cmp	r5, lr
 801c874:	46d4      	mov	ip, sl
 801c876:	bfa8      	it	ge
 801c878:	4675      	movge	r5, lr
 801c87a:	e74e      	b.n	801c71a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801c87c:	eb0b 0006 	add.w	r0, fp, r6
 801c880:	4426      	add	r6, r4
 801c882:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801c886:	f1b9 0f13 	cmp.w	r9, #19
 801c88a:	bfdc      	itt	le
 801c88c:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801c890:	444d      	addle	r5, r9
 801c892:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c896:	bfd8      	it	le
 801c898:	b22d      	sxthle	r5, r5
 801c89a:	f7fb fc98 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c89e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c8a2:	2800      	cmp	r0, #0
 801c8a4:	f47f af16 	bne.w	801c6d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801c8a8:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801c8ac:	fa1f f989 	uxth.w	r9, r9
 801c8b0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c8b4:	eba5 050c 	sub.w	r5, r5, ip
 801c8b8:	fa1f f28c 	uxth.w	r2, ip
 801c8bc:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801c8c0:	eb02 0009 	add.w	r0, r2, r9
 801c8c4:	2d14      	cmp	r5, #20
 801c8c6:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801c8ca:	bfa8      	it	ge
 801c8cc:	2514      	movge	r5, #20
 801c8ce:	b200      	sxth	r0, r0
 801c8d0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c8d4:	b289      	uxth	r1, r1
 801c8d6:	fa1f fe85 	uxth.w	lr, r5
 801c8da:	eba0 000c 	sub.w	r0, r0, ip
 801c8de:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c8e2:	4586      	cmp	lr, r0
 801c8e4:	f8d8 0000 	ldr.w	r0, [r8]
 801c8e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c8ec:	b29b      	uxth	r3, r3
 801c8ee:	bfb8      	it	lt
 801c8f0:	46f1      	movlt	r9, lr
 801c8f2:	6805      	ldr	r5, [r0, #0]
 801c8f4:	f8cd 9000 	str.w	r9, [sp]
 801c8f8:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801c8fc:	47a8      	blx	r5
 801c8fe:	6823      	ldr	r3, [r4, #0]
 801c900:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c904:	a907      	add	r1, sp, #28
 801c906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c908:	4620      	mov	r0, r4
 801c90a:	4798      	blx	r3
 801c90c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c910:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801c914:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801c918:	1a5b      	subs	r3, r3, r1
 801c91a:	440a      	add	r2, r1
 801c91c:	b21b      	sxth	r3, r3
 801c91e:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801c922:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801c926:	2b00      	cmp	r3, #0
 801c928:	f47f aecf 	bne.w	801c6ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c92c:	fa1f f18a 	uxth.w	r1, sl
 801c930:	4658      	mov	r0, fp
 801c932:	f7ff fa29 	bl	801bd88 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c936:	e6c8      	b.n	801c6ca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c938:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c93c:	42ab      	cmp	r3, r5
 801c93e:	f67f aea0 	bls.w	801c682 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c942:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c946:	ab07      	add	r3, sp, #28
 801c948:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c94c:	6851      	ldr	r1, [r2, #4]
 801c94e:	c303      	stmia	r3!, {r0, r1}
 801c950:	a807      	add	r0, sp, #28
 801c952:	f7fb fc3c 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 801c956:	b920      	cbnz	r0, 801c962 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801c958:	6823      	ldr	r3, [r4, #0]
 801c95a:	a907      	add	r1, sp, #28
 801c95c:	4620      	mov	r0, r4
 801c95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c960:	4798      	blx	r3
 801c962:	3501      	adds	r5, #1
 801c964:	b2ad      	uxth	r5, r5
 801c966:	e7e7      	b.n	801c938 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801c968 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c968:	4b03      	ldr	r3, [pc, #12]	; (801c978 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c96a:	2200      	movs	r2, #0
 801c96c:	801a      	strh	r2, [r3, #0]
 801c96e:	805a      	strh	r2, [r3, #2]
 801c970:	809a      	strh	r2, [r3, #4]
 801c972:	80da      	strh	r2, [r3, #6]
 801c974:	4770      	bx	lr
 801c976:	bf00      	nop
 801c978:	2400b910 	.word	0x2400b910

0801c97c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c980:	b09d      	sub	sp, #116	; 0x74
 801c982:	4606      	mov	r6, r0
 801c984:	4614      	mov	r4, r2
 801c986:	468a      	mov	sl, r1
 801c988:	a803      	add	r0, sp, #12
 801c98a:	461d      	mov	r5, r3
 801c98c:	f000 fe48 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801c990:	6833      	ldr	r3, [r6, #0]
 801c992:	4630      	mov	r0, r6
 801c994:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c99a:	4798      	blx	r3
 801c99c:	6833      	ldr	r3, [r6, #0]
 801c99e:	4607      	mov	r7, r0
 801c9a0:	4630      	mov	r0, r6
 801c9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c9a4:	4798      	blx	r3
 801c9a6:	462a      	mov	r2, r5
 801c9a8:	2500      	movs	r5, #0
 801c9aa:	4621      	mov	r1, r4
 801c9ac:	9000      	str	r0, [sp, #0]
 801c9ae:	463b      	mov	r3, r7
 801c9b0:	462c      	mov	r4, r5
 801c9b2:	46a9      	mov	r9, r5
 801c9b4:	46a8      	mov	r8, r5
 801c9b6:	a803      	add	r0, sp, #12
 801c9b8:	f000 fe85 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c9bc:	2300      	movs	r3, #0
 801c9be:	9302      	str	r3, [sp, #8]
 801c9c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c9c4:	429c      	cmp	r4, r3
 801c9c6:	d002      	beq.n	801c9ce <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c9c8:	455c      	cmp	r4, fp
 801c9ca:	bf18      	it	ne
 801c9cc:	4625      	movne	r5, r4
 801c9ce:	ab02      	add	r3, sp, #8
 801c9d0:	4632      	mov	r2, r6
 801c9d2:	4651      	mov	r1, sl
 801c9d4:	a803      	add	r0, sp, #12
 801c9d6:	f001 f977 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c9da:	4604      	mov	r4, r0
 801c9dc:	b108      	cbz	r0, 801c9e2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c9de:	280a      	cmp	r0, #10
 801c9e0:	d10a      	bne.n	801c9f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c9e2:	45c1      	cmp	r9, r8
 801c9e4:	bf38      	it	cc
 801c9e6:	46c1      	movcc	r9, r8
 801c9e8:	f04f 0800 	mov.w	r8, #0
 801c9ec:	2c00      	cmp	r4, #0
 801c9ee:	d1e5      	bne.n	801c9bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c9f0:	4648      	mov	r0, r9
 801c9f2:	b01d      	add	sp, #116	; 0x74
 801c9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9f8:	9a02      	ldr	r2, [sp, #8]
 801c9fa:	2a00      	cmp	r2, #0
 801c9fc:	d0de      	beq.n	801c9bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c9fe:	7b57      	ldrb	r7, [r2, #13]
 801ca00:	4629      	mov	r1, r5
 801ca02:	6833      	ldr	r3, [r6, #0]
 801ca04:	007f      	lsls	r7, r7, #1
 801ca06:	8894      	ldrh	r4, [r2, #4]
 801ca08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ca0a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801ca0e:	7a97      	ldrb	r7, [r2, #10]
 801ca10:	4307      	orrs	r7, r0
 801ca12:	4630      	mov	r0, r6
 801ca14:	4798      	blx	r3
 801ca16:	4438      	add	r0, r7
 801ca18:	4480      	add	r8, r0
 801ca1a:	fa1f f888 	uxth.w	r8, r8
 801ca1e:	e7e5      	b.n	801c9ec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ca20 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ca20:	b508      	push	{r3, lr}
 801ca22:	6803      	ldr	r3, [r0, #0]
 801ca24:	68db      	ldr	r3, [r3, #12]
 801ca26:	4798      	blx	r3
 801ca28:	b128      	cbz	r0, 801ca36 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ca2a:	7b43      	ldrb	r3, [r0, #13]
 801ca2c:	7a80      	ldrb	r0, [r0, #10]
 801ca2e:	005b      	lsls	r3, r3, #1
 801ca30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ca34:	4318      	orrs	r0, r3
 801ca36:	bd08      	pop	{r3, pc}

0801ca38 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ca38:	b40e      	push	{r1, r2, r3}
 801ca3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca3c:	b09e      	sub	sp, #120	; 0x78
 801ca3e:	4605      	mov	r5, r0
 801ca40:	ab23      	add	r3, sp, #140	; 0x8c
 801ca42:	a805      	add	r0, sp, #20
 801ca44:	f853 4b04 	ldr.w	r4, [r3], #4
 801ca48:	9303      	str	r3, [sp, #12]
 801ca4a:	f000 fde9 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801ca4e:	682b      	ldr	r3, [r5, #0]
 801ca50:	4628      	mov	r0, r5
 801ca52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca54:	4798      	blx	r3
 801ca56:	682b      	ldr	r3, [r5, #0]
 801ca58:	4606      	mov	r6, r0
 801ca5a:	4628      	mov	r0, r5
 801ca5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ca5e:	4798      	blx	r3
 801ca60:	4633      	mov	r3, r6
 801ca62:	4621      	mov	r1, r4
 801ca64:	ae1e      	add	r6, sp, #120	; 0x78
 801ca66:	2400      	movs	r4, #0
 801ca68:	9000      	str	r0, [sp, #0]
 801ca6a:	9a03      	ldr	r2, [sp, #12]
 801ca6c:	a805      	add	r0, sp, #20
 801ca6e:	f000 fe2a 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ca72:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ca76:	462a      	mov	r2, r5
 801ca78:	4633      	mov	r3, r6
 801ca7a:	4621      	mov	r1, r4
 801ca7c:	a805      	add	r0, sp, #20
 801ca7e:	f001 f923 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ca82:	b300      	cbz	r0, 801cac6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ca84:	280a      	cmp	r0, #10
 801ca86:	d01a      	beq.n	801cabe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca88:	9f04      	ldr	r7, [sp, #16]
 801ca8a:	b1c7      	cbz	r7, 801cabe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ca8c:	7b78      	ldrb	r0, [r7, #13]
 801ca8e:	7a3b      	ldrb	r3, [r7, #8]
 801ca90:	00c1      	lsls	r1, r0, #3
 801ca92:	88aa      	ldrh	r2, [r5, #4]
 801ca94:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ca98:	4319      	orrs	r1, r3
 801ca9a:	0643      	lsls	r3, r0, #25
 801ca9c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801caa0:	bf48      	it	mi
 801caa2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801caa6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801caaa:	bf48      	it	mi
 801caac:	b219      	sxthmi	r1, r3
 801caae:	79fb      	ldrb	r3, [r7, #7]
 801cab0:	4303      	orrs	r3, r0
 801cab2:	4413      	add	r3, r2
 801cab4:	1a5b      	subs	r3, r3, r1
 801cab6:	b29b      	uxth	r3, r3
 801cab8:	42a3      	cmp	r3, r4
 801caba:	bfc8      	it	gt
 801cabc:	b21c      	sxthgt	r4, r3
 801cabe:	4633      	mov	r3, r6
 801cac0:	462a      	mov	r2, r5
 801cac2:	2100      	movs	r1, #0
 801cac4:	e7da      	b.n	801ca7c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cac6:	b2a0      	uxth	r0, r4
 801cac8:	b01e      	add	sp, #120	; 0x78
 801caca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cace:	b003      	add	sp, #12
 801cad0:	4770      	bx	lr

0801cad2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cad2:	b40e      	push	{r1, r2, r3}
 801cad4:	b570      	push	{r4, r5, r6, lr}
 801cad6:	b09d      	sub	sp, #116	; 0x74
 801cad8:	4604      	mov	r4, r0
 801cada:	ab21      	add	r3, sp, #132	; 0x84
 801cadc:	a803      	add	r0, sp, #12
 801cade:	f853 5b04 	ldr.w	r5, [r3], #4
 801cae2:	9302      	str	r3, [sp, #8]
 801cae4:	f000 fd9c 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801cae8:	6823      	ldr	r3, [r4, #0]
 801caea:	4620      	mov	r0, r4
 801caec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801caee:	4798      	blx	r3
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	4606      	mov	r6, r0
 801caf4:	4620      	mov	r0, r4
 801caf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801caf8:	2401      	movs	r4, #1
 801cafa:	4798      	blx	r3
 801cafc:	4633      	mov	r3, r6
 801cafe:	9000      	str	r0, [sp, #0]
 801cb00:	4629      	mov	r1, r5
 801cb02:	9a02      	ldr	r2, [sp, #8]
 801cb04:	a803      	add	r0, sp, #12
 801cb06:	f000 fdde 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb0a:	a803      	add	r0, sp, #12
 801cb0c:	f001 f9d6 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb10:	b2a3      	uxth	r3, r4
 801cb12:	b138      	cbz	r0, 801cb24 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cb14:	280a      	cmp	r0, #10
 801cb16:	a803      	add	r0, sp, #12
 801cb18:	bf04      	itt	eq
 801cb1a:	3301      	addeq	r3, #1
 801cb1c:	b21c      	sxtheq	r4, r3
 801cb1e:	f001 f9cd 	bl	801debc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb22:	e7f5      	b.n	801cb10 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cb24:	4618      	mov	r0, r3
 801cb26:	b01d      	add	sp, #116	; 0x74
 801cb28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb2c:	b003      	add	sp, #12
 801cb2e:	4770      	bx	lr

0801cb30 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cb30:	b40e      	push	{r1, r2, r3}
 801cb32:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb34:	b09e      	sub	sp, #120	; 0x78
 801cb36:	4604      	mov	r4, r0
 801cb38:	ab23      	add	r3, sp, #140	; 0x8c
 801cb3a:	a805      	add	r0, sp, #20
 801cb3c:	f853 5b04 	ldr.w	r5, [r3], #4
 801cb40:	9303      	str	r3, [sp, #12]
 801cb42:	f000 fd6d 	bl	801d620 <_ZN8touchgfx12TextProviderC1Ev>
 801cb46:	6823      	ldr	r3, [r4, #0]
 801cb48:	4620      	mov	r0, r4
 801cb4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cb4c:	4798      	blx	r3
 801cb4e:	6823      	ldr	r3, [r4, #0]
 801cb50:	4606      	mov	r6, r0
 801cb52:	4620      	mov	r0, r4
 801cb54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb56:	4798      	blx	r3
 801cb58:	4633      	mov	r3, r6
 801cb5a:	4629      	mov	r1, r5
 801cb5c:	9000      	str	r0, [sp, #0]
 801cb5e:	9a03      	ldr	r2, [sp, #12]
 801cb60:	a805      	add	r0, sp, #20
 801cb62:	f000 fdb0 	bl	801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb66:	ad1e      	add	r5, sp, #120	; 0x78
 801cb68:	2100      	movs	r1, #0
 801cb6a:	26ff      	movs	r6, #255	; 0xff
 801cb6c:	4622      	mov	r2, r4
 801cb6e:	a805      	add	r0, sp, #20
 801cb70:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cb74:	462b      	mov	r3, r5
 801cb76:	f001 f8a7 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cb7a:	b1d8      	cbz	r0, 801cbb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801cb7c:	280a      	cmp	r0, #10
 801cb7e:	d012      	beq.n	801cba6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cb80:	9804      	ldr	r0, [sp, #16]
 801cb82:	b180      	cbz	r0, 801cba6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cb84:	7b47      	ldrb	r7, [r0, #13]
 801cb86:	7922      	ldrb	r2, [r4, #4]
 801cb88:	00fb      	lsls	r3, r7, #3
 801cb8a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cb8e:	7a03      	ldrb	r3, [r0, #8]
 801cb90:	430b      	orrs	r3, r1
 801cb92:	0679      	lsls	r1, r7, #25
 801cb94:	bf44      	itt	mi
 801cb96:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb9a:	b21b      	sxthmi	r3, r3
 801cb9c:	1ad3      	subs	r3, r2, r3
 801cb9e:	b2db      	uxtb	r3, r3
 801cba0:	429e      	cmp	r6, r3
 801cba2:	bf28      	it	cs
 801cba4:	461e      	movcs	r6, r3
 801cba6:	462b      	mov	r3, r5
 801cba8:	4622      	mov	r2, r4
 801cbaa:	2100      	movs	r1, #0
 801cbac:	a805      	add	r0, sp, #20
 801cbae:	f001 f88b 	bl	801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbb2:	e7e2      	b.n	801cb7a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801cbb4:	4630      	mov	r0, r6
 801cbb6:	b01e      	add	sp, #120	; 0x78
 801cbb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cbbc:	b003      	add	sp, #12
 801cbbe:	4770      	bx	lr

0801cbc0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cbc0:	b513      	push	{r0, r1, r4, lr}
 801cbc2:	6803      	ldr	r3, [r0, #0]
 801cbc4:	2400      	movs	r4, #0
 801cbc6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cbca:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cbce:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cbd2:	4669      	mov	r1, sp
 801cbd4:	691b      	ldr	r3, [r3, #16]
 801cbd6:	9400      	str	r4, [sp, #0]
 801cbd8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cbdc:	4798      	blx	r3
 801cbde:	b002      	add	sp, #8
 801cbe0:	bd10      	pop	{r4, pc}

0801cbe2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cbe2:	b538      	push	{r3, r4, r5, lr}
 801cbe4:	680b      	ldr	r3, [r1, #0]
 801cbe6:	460c      	mov	r4, r1
 801cbe8:	4605      	mov	r5, r0
 801cbea:	68db      	ldr	r3, [r3, #12]
 801cbec:	4798      	blx	r3
 801cbee:	6823      	ldr	r3, [r4, #0]
 801cbf0:	4620      	mov	r0, r4
 801cbf2:	4629      	mov	r1, r5
 801cbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbf6:	4798      	blx	r3
 801cbf8:	4628      	mov	r0, r5
 801cbfa:	bd38      	pop	{r3, r4, r5, pc}

0801cbfc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cbfc:	b410      	push	{r4}
 801cbfe:	880a      	ldrh	r2, [r1, #0]
 801cc00:	8884      	ldrh	r4, [r0, #4]
 801cc02:	4422      	add	r2, r4
 801cc04:	800a      	strh	r2, [r1, #0]
 801cc06:	884a      	ldrh	r2, [r1, #2]
 801cc08:	88c4      	ldrh	r4, [r0, #6]
 801cc0a:	4422      	add	r2, r4
 801cc0c:	804a      	strh	r2, [r1, #2]
 801cc0e:	6940      	ldr	r0, [r0, #20]
 801cc10:	b120      	cbz	r0, 801cc1c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cc12:	6803      	ldr	r3, [r0, #0]
 801cc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cc1a:	4718      	bx	r3
 801cc1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc20:	4770      	bx	lr

0801cc22 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cc22:	b570      	push	{r4, r5, r6, lr}
 801cc24:	8882      	ldrh	r2, [r0, #4]
 801cc26:	460c      	mov	r4, r1
 801cc28:	880b      	ldrh	r3, [r1, #0]
 801cc2a:	4605      	mov	r5, r0
 801cc2c:	4413      	add	r3, r2
 801cc2e:	800b      	strh	r3, [r1, #0]
 801cc30:	884b      	ldrh	r3, [r1, #2]
 801cc32:	88c2      	ldrh	r2, [r0, #6]
 801cc34:	4413      	add	r3, r2
 801cc36:	804b      	strh	r3, [r1, #2]
 801cc38:	1d01      	adds	r1, r0, #4
 801cc3a:	4620      	mov	r0, r4
 801cc3c:	f7fb fa84 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801cc40:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	dd0b      	ble.n	801cc60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc48:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	dd07      	ble.n	801cc60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc50:	6968      	ldr	r0, [r5, #20]
 801cc52:	b128      	cbz	r0, 801cc60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cc54:	6803      	ldr	r3, [r0, #0]
 801cc56:	4621      	mov	r1, r4
 801cc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc5e:	4718      	bx	r3
 801cc60:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cc64 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801cc64:	b570      	push	{r4, r5, r6, lr}
 801cc66:	8882      	ldrh	r2, [r0, #4]
 801cc68:	460c      	mov	r4, r1
 801cc6a:	880b      	ldrh	r3, [r1, #0]
 801cc6c:	4605      	mov	r5, r0
 801cc6e:	4413      	add	r3, r2
 801cc70:	800b      	strh	r3, [r1, #0]
 801cc72:	884b      	ldrh	r3, [r1, #2]
 801cc74:	88c2      	ldrh	r2, [r0, #6]
 801cc76:	4413      	add	r3, r2
 801cc78:	804b      	strh	r3, [r1, #2]
 801cc7a:	1d01      	adds	r1, r0, #4
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f7fb fa63 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801cc82:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	dd15      	ble.n	801ccb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801cc8a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	dd11      	ble.n	801ccb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801cc92:	6968      	ldr	r0, [r5, #20]
 801cc94:	b128      	cbz	r0, 801cca2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801cc96:	6803      	ldr	r3, [r0, #0]
 801cc98:	691b      	ldr	r3, [r3, #16]
 801cc9a:	4621      	mov	r1, r4
 801cc9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cca0:	4718      	bx	r3
 801cca2:	4b05      	ldr	r3, [pc, #20]	; (801ccb8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	3304      	adds	r3, #4
 801cca8:	429d      	cmp	r5, r3
 801ccaa:	d104      	bne.n	801ccb6 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801ccac:	f7fe ffbe 	bl	801bc2c <_ZN8touchgfx11Application11getInstanceEv>
 801ccb0:	6803      	ldr	r3, [r0, #0]
 801ccb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ccb4:	e7f1      	b.n	801cc9a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801ccb6:	bd70      	pop	{r4, r5, r6, pc}
 801ccb8:	2400b908 	.word	0x2400b908

0801ccbc <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ccbc:	b570      	push	{r4, r5, r6, lr}
 801ccbe:	4604      	mov	r4, r0
 801ccc0:	4616      	mov	r6, r2
 801ccc2:	460d      	mov	r5, r1
 801ccc4:	b901      	cbnz	r1, 801ccc8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ccc6:	b192      	cbz	r2, 801ccee <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ccc8:	6823      	ldr	r3, [r4, #0]
 801ccca:	4620      	mov	r0, r4
 801cccc:	695b      	ldr	r3, [r3, #20]
 801ccce:	4798      	blx	r3
 801ccd0:	88e2      	ldrh	r2, [r4, #6]
 801ccd2:	88a1      	ldrh	r1, [r4, #4]
 801ccd4:	4620      	mov	r0, r4
 801ccd6:	4432      	add	r2, r6
 801ccd8:	4429      	add	r1, r5
 801ccda:	b212      	sxth	r2, r2
 801ccdc:	b209      	sxth	r1, r1
 801ccde:	f7e7 f9cb 	bl	8004078 <_ZN8touchgfx8Drawable5setXYEss>
 801cce2:	6823      	ldr	r3, [r4, #0]
 801cce4:	4620      	mov	r0, r4
 801cce6:	695b      	ldr	r3, [r3, #20]
 801cce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ccec:	4718      	bx	r3
 801ccee:	bd70      	pop	{r4, r5, r6, pc}

0801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801ccf0:	b510      	push	{r4, lr}
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	4604      	mov	r4, r0
 801ccf6:	4608      	mov	r0, r1
 801ccf8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801ccfc:	8023      	strh	r3, [r4, #0]
 801ccfe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd02:	8063      	strh	r3, [r4, #2]
 801cd04:	6803      	ldr	r3, [r0, #0]
 801cd06:	80a1      	strh	r1, [r4, #4]
 801cd08:	4621      	mov	r1, r4
 801cd0a:	80e2      	strh	r2, [r4, #6]
 801cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd0e:	4798      	blx	r3
 801cd10:	4620      	mov	r0, r4
 801cd12:	bd10      	pop	{r4, pc}

0801cd14 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cd14:	b530      	push	{r4, r5, lr}
 801cd16:	8083      	strh	r3, [r0, #4]
 801cd18:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cd1c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cd20:	7183      	strb	r3, [r0, #6]
 801cd22:	79c3      	ldrb	r3, [r0, #7]
 801cd24:	6101      	str	r1, [r0, #16]
 801cd26:	f365 0306 	bfi	r3, r5, #0, #7
 801cd2a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cd2e:	8282      	strh	r2, [r0, #20]
 801cd30:	f365 13c7 	bfi	r3, r5, #7, #1
 801cd34:	71c3      	strb	r3, [r0, #7]
 801cd36:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cd3a:	7203      	strb	r3, [r0, #8]
 801cd3c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cd40:	7243      	strb	r3, [r0, #9]
 801cd42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cd46:	8143      	strh	r3, [r0, #10]
 801cd48:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801cd4c:	8183      	strh	r3, [r0, #12]
 801cd4e:	4b01      	ldr	r3, [pc, #4]	; (801cd54 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cd50:	6003      	str	r3, [r0, #0]
 801cd52:	bd30      	pop	{r4, r5, pc}
 801cd54:	0802f57c 	.word	0x0802f57c

0801cd58 <_ZNK8touchgfx9ConstFont4findEt>:
 801cd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd5a:	6904      	ldr	r4, [r0, #16]
 801cd5c:	b3bc      	cbz	r4, 801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd5e:	88a3      	ldrh	r3, [r4, #4]
 801cd60:	8a82      	ldrh	r2, [r0, #20]
 801cd62:	1acb      	subs	r3, r1, r3
 801cd64:	f102 32ff 	add.w	r2, r2, #4294967295
 801cd68:	d431      	bmi.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd6a:	4293      	cmp	r3, r2
 801cd6c:	dd0c      	ble.n	801cd88 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cd6e:	230e      	movs	r3, #14
 801cd70:	fb03 4302 	mla	r3, r3, r2, r4
 801cd74:	889b      	ldrh	r3, [r3, #4]
 801cd76:	1a5b      	subs	r3, r3, r1
 801cd78:	1ad3      	subs	r3, r2, r3
 801cd7a:	429a      	cmp	r2, r3
 801cd7c:	db27      	blt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	bfbc      	itt	lt
 801cd82:	2302      	movlt	r3, #2
 801cd84:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cd88:	2500      	movs	r5, #0
 801cd8a:	260e      	movs	r6, #14
 801cd8c:	4295      	cmp	r5, r2
 801cd8e:	dc1e      	bgt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cd90:	fb06 4003 	mla	r0, r6, r3, r4
 801cd94:	8887      	ldrh	r7, [r0, #4]
 801cd96:	42b9      	cmp	r1, r7
 801cd98:	d01a      	beq.n	801cdd0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cd9a:	d20d      	bcs.n	801cdb8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cd9c:	1e5a      	subs	r2, r3, #1
 801cd9e:	4295      	cmp	r5, r2
 801cda0:	dc15      	bgt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cda2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801cda6:	1a5b      	subs	r3, r3, r1
 801cda8:	1ad3      	subs	r3, r2, r3
 801cdaa:	429a      	cmp	r2, r3
 801cdac:	db0f      	blt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdae:	429d      	cmp	r5, r3
 801cdb0:	ddec      	ble.n	801cd8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cdb2:	1953      	adds	r3, r2, r5
 801cdb4:	105b      	asrs	r3, r3, #1
 801cdb6:	e7e9      	b.n	801cd8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cdb8:	1c5d      	adds	r5, r3, #1
 801cdba:	42aa      	cmp	r2, r5
 801cdbc:	db07      	blt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdbe:	8a43      	ldrh	r3, [r0, #18]
 801cdc0:	1acb      	subs	r3, r1, r3
 801cdc2:	442b      	add	r3, r5
 801cdc4:	429d      	cmp	r5, r3
 801cdc6:	dc02      	bgt.n	801cdce <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdc8:	429a      	cmp	r2, r3
 801cdca:	dadf      	bge.n	801cd8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801cdcc:	e7f1      	b.n	801cdb2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801cdce:	2000      	movs	r0, #0
 801cdd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cdd2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801cdd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdd4:	4604      	mov	r4, r0
 801cdd6:	4617      	mov	r7, r2
 801cdd8:	461e      	mov	r6, r3
 801cdda:	b911      	cbnz	r1, 801cde2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801cddc:	2500      	movs	r5, #0
 801cdde:	4628      	mov	r0, r5
 801cde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cde2:	290a      	cmp	r1, #10
 801cde4:	d0fa      	beq.n	801cddc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cde6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801cdea:	4291      	cmp	r1, r2
 801cdec:	d0f6      	beq.n	801cddc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cdee:	f242 020b 	movw	r2, #8203	; 0x200b
 801cdf2:	4291      	cmp	r1, r2
 801cdf4:	d0f2      	beq.n	801cddc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801cdf6:	f7ff ffaf 	bl	801cd58 <_ZNK8touchgfx9ConstFont4findEt>
 801cdfa:	4605      	mov	r5, r0
 801cdfc:	b950      	cbnz	r0, 801ce14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801cdfe:	6823      	ldr	r3, [r4, #0]
 801ce00:	4620      	mov	r0, r4
 801ce02:	691b      	ldr	r3, [r3, #16]
 801ce04:	4798      	blx	r3
 801ce06:	4601      	mov	r1, r0
 801ce08:	4620      	mov	r0, r4
 801ce0a:	f7ff ffa5 	bl	801cd58 <_ZNK8touchgfx9ConstFont4findEt>
 801ce0e:	4605      	mov	r5, r0
 801ce10:	2800      	cmp	r0, #0
 801ce12:	d0e3      	beq.n	801cddc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce14:	6823      	ldr	r3, [r4, #0]
 801ce16:	4629      	mov	r1, r5
 801ce18:	4620      	mov	r0, r4
 801ce1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce1c:	4798      	blx	r3
 801ce1e:	6038      	str	r0, [r7, #0]
 801ce20:	6823      	ldr	r3, [r4, #0]
 801ce22:	4620      	mov	r0, r4
 801ce24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce26:	4798      	blx	r3
 801ce28:	7030      	strb	r0, [r6, #0]
 801ce2a:	e7d8      	b.n	801cdde <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801ce2c <_ZN8touchgfx4clzuEm>:
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	b1c8      	cbz	r0, 801ce64 <_ZN8touchgfx4clzuEm+0x38>
 801ce30:	0c02      	lsrs	r2, r0, #16
 801ce32:	0412      	lsls	r2, r2, #16
 801ce34:	b9a2      	cbnz	r2, 801ce60 <_ZN8touchgfx4clzuEm+0x34>
 801ce36:	0403      	lsls	r3, r0, #16
 801ce38:	2010      	movs	r0, #16
 801ce3a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ce3e:	bf04      	itt	eq
 801ce40:	021b      	lsleq	r3, r3, #8
 801ce42:	3008      	addeq	r0, #8
 801ce44:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ce48:	bf04      	itt	eq
 801ce4a:	011b      	lsleq	r3, r3, #4
 801ce4c:	3004      	addeq	r0, #4
 801ce4e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801ce52:	bf04      	itt	eq
 801ce54:	009b      	lsleq	r3, r3, #2
 801ce56:	3002      	addeq	r0, #2
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	db04      	blt.n	801ce66 <_ZN8touchgfx4clzuEm+0x3a>
 801ce5c:	3001      	adds	r0, #1
 801ce5e:	4770      	bx	lr
 801ce60:	2000      	movs	r0, #0
 801ce62:	e7ea      	b.n	801ce3a <_ZN8touchgfx4clzuEm+0xe>
 801ce64:	2020      	movs	r0, #32
 801ce66:	4770      	bx	lr

0801ce68 <_ZN8touchgfx7muldivuEmmmRm>:
 801ce68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce6c:	4680      	mov	r8, r0
 801ce6e:	460f      	mov	r7, r1
 801ce70:	4615      	mov	r5, r2
 801ce72:	461e      	mov	r6, r3
 801ce74:	f7ff ffda 	bl	801ce2c <_ZN8touchgfx4clzuEm>
 801ce78:	b998      	cbnz	r0, 801cea2 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801ce7a:	4608      	mov	r0, r1
 801ce7c:	f7ff ffd6 	bl	801ce2c <_ZN8touchgfx4clzuEm>
 801ce80:	2800      	cmp	r0, #0
 801ce82:	dd08      	ble.n	801ce96 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801ce84:	4633      	mov	r3, r6
 801ce86:	462a      	mov	r2, r5
 801ce88:	4641      	mov	r1, r8
 801ce8a:	4638      	mov	r0, r7
 801ce8c:	f7ff ffec 	bl	801ce68 <_ZN8touchgfx7muldivuEmmmRm>
 801ce90:	b003      	add	sp, #12
 801ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce96:	f04f 33ff 	mov.w	r3, #4294967295
 801ce9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801ce9e:	6033      	str	r3, [r6, #0]
 801cea0:	e7f6      	b.n	801ce90 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801cea2:	fa31 f900 	lsrs.w	r9, r1, r0
 801cea6:	fb01 f308 	mul.w	r3, r1, r8
 801ceaa:	d105      	bne.n	801ceb8 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801ceac:	fbb3 f0f5 	udiv	r0, r3, r5
 801ceb0:	fb05 3510 	mls	r5, r5, r0, r3
 801ceb4:	6035      	str	r5, [r6, #0]
 801ceb6:	e7eb      	b.n	801ce90 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801ceb8:	2301      	movs	r3, #1
 801ceba:	fa08 fb00 	lsl.w	fp, r8, r0
 801cebe:	462a      	mov	r2, r5
 801cec0:	4641      	mov	r1, r8
 801cec2:	fa03 f000 	lsl.w	r0, r3, r0
 801cec6:	4633      	mov	r3, r6
 801cec8:	fbbb faf5 	udiv	sl, fp, r5
 801cecc:	3801      	subs	r0, #1
 801cece:	fb09 f40a 	mul.w	r4, r9, sl
 801ced2:	4038      	ands	r0, r7
 801ced4:	f7ff ffc8 	bl	801ce68 <_ZN8touchgfx7muldivuEmmmRm>
 801ced8:	462a      	mov	r2, r5
 801ceda:	4607      	mov	r7, r0
 801cedc:	ab01      	add	r3, sp, #4
 801cede:	fb05 b11a 	mls	r1, r5, sl, fp
 801cee2:	4648      	mov	r0, r9
 801cee4:	f7ff ffc0 	bl	801ce68 <_ZN8touchgfx7muldivuEmmmRm>
 801cee8:	9b01      	ldr	r3, [sp, #4]
 801ceea:	6832      	ldr	r2, [r6, #0]
 801ceec:	441a      	add	r2, r3
 801ceee:	fbb2 f3f5 	udiv	r3, r2, r5
 801cef2:	441c      	add	r4, r3
 801cef4:	fb05 2513 	mls	r5, r5, r3, r2
 801cef8:	443c      	add	r4, r7
 801cefa:	4420      	add	r0, r4
 801cefc:	e7da      	b.n	801ceb4 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801cefe <_ZN8touchgfx6muldivElllRl>:
 801cefe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf00:	2800      	cmp	r0, #0
 801cf02:	461e      	mov	r6, r3
 801cf04:	bfba      	itte	lt
 801cf06:	4240      	neglt	r0, r0
 801cf08:	f04f 34ff 	movlt.w	r4, #4294967295
 801cf0c:	2401      	movge	r4, #1
 801cf0e:	2900      	cmp	r1, #0
 801cf10:	bfbc      	itt	lt
 801cf12:	4249      	neglt	r1, r1
 801cf14:	4264      	neglt	r4, r4
 801cf16:	2a00      	cmp	r2, #0
 801cf18:	bfb6      	itet	lt
 801cf1a:	4265      	neglt	r5, r4
 801cf1c:	4625      	movge	r5, r4
 801cf1e:	4252      	neglt	r2, r2
 801cf20:	4288      	cmp	r0, r1
 801cf22:	bfc2      	ittt	gt
 801cf24:	4603      	movgt	r3, r0
 801cf26:	4608      	movgt	r0, r1
 801cf28:	4619      	movgt	r1, r3
 801cf2a:	ab01      	add	r3, sp, #4
 801cf2c:	f7ff ff9c 	bl	801ce68 <_ZN8touchgfx7muldivuEmmmRm>
 801cf30:	9b01      	ldr	r3, [sp, #4]
 801cf32:	4368      	muls	r0, r5
 801cf34:	435c      	muls	r4, r3
 801cf36:	6034      	str	r4, [r6, #0]
 801cf38:	b002      	add	sp, #8
 801cf3a:	bd70      	pop	{r4, r5, r6, pc}

0801cf3c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801cf3c:	2000      	movs	r0, #0
 801cf3e:	4770      	bx	lr

0801cf40 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801cf40:	2001      	movs	r0, #1
 801cf42:	4770      	bx	lr

0801cf44 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801cf44:	2002      	movs	r0, #2
 801cf46:	4770      	bx	lr

0801cf48 <_ZN8touchgfx12GestureEventD1Ev>:
 801cf48:	4770      	bx	lr

0801cf4a <_ZN8touchgfx9DragEventD1Ev>:
 801cf4a:	4770      	bx	lr

0801cf4c <_ZN8touchgfx10ClickEventD1Ev>:
 801cf4c:	4770      	bx	lr

0801cf4e <_ZN8touchgfx10ClickEventD0Ev>:
 801cf4e:	b510      	push	{r4, lr}
 801cf50:	4604      	mov	r4, r0
 801cf52:	210c      	movs	r1, #12
 801cf54:	f00d ffa9 	bl	802aeaa <_ZdlPvj>
 801cf58:	4620      	mov	r0, r4
 801cf5a:	bd10      	pop	{r4, pc}

0801cf5c <_ZN8touchgfx9DragEventD0Ev>:
 801cf5c:	b510      	push	{r4, lr}
 801cf5e:	4604      	mov	r4, r0
 801cf60:	2110      	movs	r1, #16
 801cf62:	f00d ffa2 	bl	802aeaa <_ZdlPvj>
 801cf66:	4620      	mov	r0, r4
 801cf68:	bd10      	pop	{r4, pc}

0801cf6a <_ZN8touchgfx12GestureEventD0Ev>:
 801cf6a:	b510      	push	{r4, lr}
 801cf6c:	4604      	mov	r4, r0
 801cf6e:	210c      	movs	r1, #12
 801cf70:	f00d ff9b 	bl	802aeaa <_ZdlPvj>
 801cf74:	4620      	mov	r0, r4
 801cf76:	bd10      	pop	{r4, pc}

0801cf78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cf78:	b530      	push	{r4, r5, lr}
 801cf7a:	460d      	mov	r5, r1
 801cf7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801cf7e:	b087      	sub	sp, #28
 801cf80:	4604      	mov	r4, r0
 801cf82:	b301      	cbz	r1, 801cfc6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cf84:	a801      	add	r0, sp, #4
 801cf86:	f7ff feb3 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cf8a:	892a      	ldrh	r2, [r5, #8]
 801cf8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cf90:	7928      	ldrb	r0, [r5, #4]
 801cf92:	1ad2      	subs	r2, r2, r3
 801cf94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801cf96:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cf9a:	441a      	add	r2, r3
 801cf9c:	896b      	ldrh	r3, [r5, #10]
 801cf9e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801cfa2:	f88d 0010 	strb.w	r0, [sp, #16]
 801cfa6:	1b5b      	subs	r3, r3, r5
 801cfa8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801cfaa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801cfac:	442b      	add	r3, r5
 801cfae:	4d07      	ldr	r5, [pc, #28]	; (801cfcc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801cfb0:	f8ad 1012 	strh.w	r1, [sp, #18]
 801cfb4:	a903      	add	r1, sp, #12
 801cfb6:	9503      	str	r5, [sp, #12]
 801cfb8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801cfbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801cfc0:	6803      	ldr	r3, [r0, #0]
 801cfc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cfc4:	4798      	blx	r3
 801cfc6:	b007      	add	sp, #28
 801cfc8:	bd30      	pop	{r4, r5, pc}
 801cfca:	bf00      	nop
 801cfcc:	0802f5fc 	.word	0x0802f5fc

0801cfd0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfd4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801cfd6:	b08a      	sub	sp, #40	; 0x28
 801cfd8:	4604      	mov	r4, r0
 801cfda:	460d      	mov	r5, r1
 801cfdc:	b113      	cbz	r3, 801cfe4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801cfde:	790b      	ldrb	r3, [r1, #4]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d044      	beq.n	801d06e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801cfe4:	f104 0804 	add.w	r8, r4, #4
 801cfe8:	a803      	add	r0, sp, #12
 801cfea:	4641      	mov	r1, r8
 801cfec:	f7ff fe80 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cff0:	792b      	ldrb	r3, [r5, #4]
 801cff2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801cff6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801cffa:	b983      	cbnz	r3, 801d01e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801cffc:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801d000:	892a      	ldrh	r2, [r5, #8]
 801d002:	88e9      	ldrh	r1, [r5, #6]
 801d004:	4640      	mov	r0, r8
 801d006:	1b92      	subs	r2, r2, r6
 801d008:	9301      	str	r3, [sp, #4]
 801d00a:	1bc9      	subs	r1, r1, r7
 801d00c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801d010:	b212      	sxth	r2, r2
 801d012:	9300      	str	r3, [sp, #0]
 801d014:	b209      	sxth	r1, r1
 801d016:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801d01a:	f7fa ffb3 	bl	8017f84 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d01e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d020:	b329      	cbz	r1, 801d06e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d022:	a805      	add	r0, sp, #20
 801d024:	f7ff fe64 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d028:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d02c:	792b      	ldrb	r3, [r5, #4]
 801d02e:	a907      	add	r1, sp, #28
 801d030:	1abf      	subs	r7, r7, r2
 801d032:	88ea      	ldrh	r2, [r5, #6]
 801d034:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801d036:	4417      	add	r7, r2
 801d038:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801d03a:	f88d 3020 	strb.w	r3, [sp, #32]
 801d03e:	4417      	add	r7, r2
 801d040:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d044:	1ab6      	subs	r6, r6, r2
 801d046:	892a      	ldrh	r2, [r5, #8]
 801d048:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801d04c:	4416      	add	r6, r2
 801d04e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d050:	4416      	add	r6, r2
 801d052:	4a08      	ldr	r2, [pc, #32]	; (801d074 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d054:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801d058:	2600      	movs	r6, #0
 801d05a:	9207      	str	r2, [sp, #28]
 801d05c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801d060:	6803      	ldr	r3, [r0, #0]
 801d062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d064:	4798      	blx	r3
 801d066:	792b      	ldrb	r3, [r5, #4]
 801d068:	b10b      	cbz	r3, 801d06e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d06a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801d06e:	b00a      	add	sp, #40	; 0x28
 801d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d074:	0802f5d4 	.word	0x0802f5d4

0801d078 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d07c:	460c      	mov	r4, r1
 801d07e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801d080:	b088      	sub	sp, #32
 801d082:	4605      	mov	r5, r0
 801d084:	2900      	cmp	r1, #0
 801d086:	d06d      	beq.n	801d164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d088:	4668      	mov	r0, sp
 801d08a:	f7ff fe31 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d08e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801d090:	88e3      	ldrh	r3, [r4, #6]
 801d092:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d096:	440b      	add	r3, r1
 801d098:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d09c:	b21b      	sxth	r3, r3
 801d09e:	4543      	cmp	r3, r8
 801d0a0:	db31      	blt.n	801d106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0a2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d0a6:	44c4      	add	ip, r8
 801d0a8:	fa0f fc8c 	sxth.w	ip, ip
 801d0ac:	4563      	cmp	r3, ip
 801d0ae:	da2a      	bge.n	801d106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0b0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801d0b2:	8926      	ldrh	r6, [r4, #8]
 801d0b4:	4416      	add	r6, r2
 801d0b6:	b236      	sxth	r6, r6
 801d0b8:	42be      	cmp	r6, r7
 801d0ba:	db24      	blt.n	801d106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0bc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d0c0:	4438      	add	r0, r7
 801d0c2:	b200      	sxth	r0, r0
 801d0c4:	4286      	cmp	r6, r0
 801d0c6:	da1e      	bge.n	801d106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0c8:	8963      	ldrh	r3, [r4, #10]
 801d0ca:	4419      	add	r1, r3
 801d0cc:	b209      	sxth	r1, r1
 801d0ce:	4541      	cmp	r1, r8
 801d0d0:	db08      	blt.n	801d0e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d0d2:	4561      	cmp	r1, ip
 801d0d4:	da06      	bge.n	801d0e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d0d6:	89a3      	ldrh	r3, [r4, #12]
 801d0d8:	441a      	add	r2, r3
 801d0da:	b212      	sxth	r2, r2
 801d0dc:	42ba      	cmp	r2, r7
 801d0de:	db01      	blt.n	801d0e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d0e0:	4282      	cmp	r2, r0
 801d0e2:	db10      	blt.n	801d106 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d0e4:	4b21      	ldr	r3, [pc, #132]	; (801d16c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d0e6:	a904      	add	r1, sp, #16
 801d0e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d0ea:	9304      	str	r3, [sp, #16]
 801d0ec:	2302      	movs	r3, #2
 801d0ee:	f88d 3014 	strb.w	r3, [sp, #20]
 801d0f2:	2300      	movs	r3, #0
 801d0f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d0f8:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d0fc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d100:	6803      	ldr	r3, [r0, #0]
 801d102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d104:	4798      	blx	r3
 801d106:	1d29      	adds	r1, r5, #4
 801d108:	a802      	add	r0, sp, #8
 801d10a:	f7ff fdf1 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d10e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d112:	88e0      	ldrh	r0, [r4, #6]
 801d114:	eba3 0808 	sub.w	r8, r3, r8
 801d118:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d11c:	7921      	ldrb	r1, [r4, #4]
 801d11e:	fa1f f888 	uxth.w	r8, r8
 801d122:	1bdf      	subs	r7, r3, r7
 801d124:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801d128:	b2bb      	uxth	r3, r7
 801d12a:	4440      	add	r0, r8
 801d12c:	8922      	ldrh	r2, [r4, #8]
 801d12e:	8967      	ldrh	r7, [r4, #10]
 801d130:	4460      	add	r0, ip
 801d132:	89a4      	ldrh	r4, [r4, #12]
 801d134:	441a      	add	r2, r3
 801d136:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801d138:	44b8      	add	r8, r7
 801d13a:	4423      	add	r3, r4
 801d13c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d140:	4432      	add	r2, r6
 801d142:	44e0      	add	r8, ip
 801d144:	4433      	add	r3, r6
 801d146:	4c0a      	ldr	r4, [pc, #40]	; (801d170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d148:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801d14a:	f88d 1014 	strb.w	r1, [sp, #20]
 801d14e:	a904      	add	r1, sp, #16
 801d150:	9404      	str	r4, [sp, #16]
 801d152:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d156:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d15a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d15e:	6803      	ldr	r3, [r0, #0]
 801d160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d162:	4798      	blx	r3
 801d164:	b008      	add	sp, #32
 801d166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d16a:	bf00      	nop
 801d16c:	0802f5d4 	.word	0x0802f5d4
 801d170:	0802f5e8 	.word	0x0802f5e8

0801d174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d176:	4604      	mov	r4, r0
 801d178:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d17c:	3201      	adds	r2, #1
 801d17e:	d112      	bne.n	801d1a6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d180:	2500      	movs	r5, #0
 801d182:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d186:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d18a:	6803      	ldr	r3, [r0, #0]
 801d18c:	9500      	str	r5, [sp, #0]
 801d18e:	466d      	mov	r5, sp
 801d190:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d194:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d198:	4629      	mov	r1, r5
 801d19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d19c:	4798      	blx	r3
 801d19e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d1a2:	e884 0003 	stmia.w	r4, {r0, r1}
 801d1a6:	4620      	mov	r0, r4
 801d1a8:	b003      	add	sp, #12
 801d1aa:	bd30      	pop	{r4, r5, pc}

0801d1ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d1ac:	b513      	push	{r0, r1, r4, lr}
 801d1ae:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d1b2:	4604      	mov	r4, r0
 801d1b4:	3301      	adds	r3, #1
 801d1b6:	d109      	bne.n	801d1cc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d1b8:	4601      	mov	r1, r0
 801d1ba:	4668      	mov	r0, sp
 801d1bc:	f7ff fd98 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1c0:	f8bd 3000 	ldrh.w	r3, [sp]
 801d1c4:	8423      	strh	r3, [r4, #32]
 801d1c6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d1ca:	8463      	strh	r3, [r4, #34]	; 0x22
 801d1cc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d1d0:	b002      	add	sp, #8
 801d1d2:	bd10      	pop	{r4, pc}

0801d1d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d1d4:	b513      	push	{r0, r1, r4, lr}
 801d1d6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801d1da:	4604      	mov	r4, r0
 801d1dc:	3301      	adds	r3, #1
 801d1de:	d109      	bne.n	801d1f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d1e0:	4601      	mov	r1, r0
 801d1e2:	4668      	mov	r0, sp
 801d1e4:	f7ff fd84 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d1e8:	f8bd 3000 	ldrh.w	r3, [sp]
 801d1ec:	8423      	strh	r3, [r4, #32]
 801d1ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d1f2:	8463      	strh	r3, [r4, #34]	; 0x22
 801d1f4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801d1f8:	b002      	add	sp, #8
 801d1fa:	bd10      	pop	{r4, pc}

0801d1fc <_ZN8touchgfx6ScreenC1Ev>:
 801d1fc:	b570      	push	{r4, r5, r6, lr}
 801d1fe:	4b17      	ldr	r3, [pc, #92]	; (801d25c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d200:	4605      	mov	r5, r0
 801d202:	4a17      	ldr	r2, [pc, #92]	; (801d260 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d204:	2101      	movs	r1, #1
 801d206:	f845 3b04 	str.w	r3, [r5], #4
 801d20a:	2300      	movs	r3, #0
 801d20c:	6042      	str	r2, [r0, #4]
 801d20e:	4604      	mov	r4, r0
 801d210:	8103      	strh	r3, [r0, #8]
 801d212:	8143      	strh	r3, [r0, #10]
 801d214:	8183      	strh	r3, [r0, #12]
 801d216:	81c3      	strh	r3, [r0, #14]
 801d218:	8203      	strh	r3, [r0, #16]
 801d21a:	8243      	strh	r3, [r0, #18]
 801d21c:	8283      	strh	r3, [r0, #20]
 801d21e:	82c3      	strh	r3, [r0, #22]
 801d220:	6203      	str	r3, [r0, #32]
 801d222:	8483      	strh	r3, [r0, #36]	; 0x24
 801d224:	84c3      	strh	r3, [r0, #38]	; 0x26
 801d226:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801d22a:	6343      	str	r3, [r0, #52]	; 0x34
 801d22c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801d230:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801d234:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d238:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801d23c:	4b09      	ldr	r3, [pc, #36]	; (801d264 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d23e:	4628      	mov	r0, r5
 801d240:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d244:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801d246:	4a08      	ldr	r2, [pc, #32]	; (801d268 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d248:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d24c:	4798      	blx	r3
 801d24e:	6863      	ldr	r3, [r4, #4]
 801d250:	4628      	mov	r0, r5
 801d252:	4631      	mov	r1, r6
 801d254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d256:	4798      	blx	r3
 801d258:	4620      	mov	r0, r4
 801d25a:	bd70      	pop	{r4, r5, r6, pc}
 801d25c:	0802f610 	.word	0x0802f610
 801d260:	0802de50 	.word	0x0802de50
 801d264:	2400b8c2 	.word	0x2400b8c2
 801d268:	2400b8c0 	.word	0x2400b8c0

0801d26c <_ZN8touchgfx6Screen4drawEv>:
 801d26c:	4b09      	ldr	r3, [pc, #36]	; (801d294 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d26e:	b507      	push	{r0, r1, r2, lr}
 801d270:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d274:	2100      	movs	r1, #0
 801d276:	4b08      	ldr	r3, [pc, #32]	; (801d298 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d278:	9100      	str	r1, [sp, #0]
 801d27a:	4669      	mov	r1, sp
 801d27c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d280:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d284:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d288:	6803      	ldr	r3, [r0, #0]
 801d28a:	689b      	ldr	r3, [r3, #8]
 801d28c:	4798      	blx	r3
 801d28e:	b003      	add	sp, #12
 801d290:	f85d fb04 	ldr.w	pc, [sp], #4
 801d294:	2400b8c0 	.word	0x2400b8c0
 801d298:	2400b8c2 	.word	0x2400b8c2

0801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d2a4:	b089      	sub	sp, #36	; 0x24
 801d2a6:	4680      	mov	r8, r0
 801d2a8:	460c      	mov	r4, r1
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	4615      	mov	r5, r2
 801d2ae:	dd0e      	ble.n	801d2ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d2b0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d2b4:	2b00      	cmp	r3, #0
 801d2b6:	dd0a      	ble.n	801d2ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d2b8:	4628      	mov	r0, r5
 801d2ba:	f7ff ff5b 	bl	801d174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d2be:	4621      	mov	r1, r4
 801d2c0:	f7fe fc2a 	bl	801bb18 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d2c4:	69eb      	ldr	r3, [r5, #28]
 801d2c6:	b928      	cbnz	r0, 801d2d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d2c8:	461d      	mov	r5, r3
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d1f4      	bne.n	801d2b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d2ce:	b009      	add	sp, #36	; 0x24
 801d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d4:	ae04      	add	r6, sp, #16
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	f000 80b5 	beq.w	801d446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d2dc:	682b      	ldr	r3, [r5, #0]
 801d2de:	4629      	mov	r1, r5
 801d2e0:	a802      	add	r0, sp, #8
 801d2e2:	68db      	ldr	r3, [r3, #12]
 801d2e4:	4798      	blx	r3
 801d2e6:	4628      	mov	r0, r5
 801d2e8:	f7ff ff60 	bl	801d1ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d2ec:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d2f0:	4407      	add	r7, r0
 801d2f2:	4628      	mov	r0, r5
 801d2f4:	f7ff ff6e 	bl	801d1d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d2f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d2fc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d300:	b23f      	sxth	r7, r7
 801d302:	4418      	add	r0, r3
 801d304:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d308:	4621      	mov	r1, r4
 801d30a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d30e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d312:	4630      	mov	r0, r6
 801d314:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d318:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d31c:	f7fa ff14 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801d320:	4628      	mov	r0, r5
 801d322:	f7ff ff27 	bl	801d174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d326:	ab06      	add	r3, sp, #24
 801d328:	4602      	mov	r2, r0
 801d32a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d32e:	e883 0003 	stmia.w	r3, {r0, r1}
 801d332:	4611      	mov	r1, r2
 801d334:	4618      	mov	r0, r3
 801d336:	f7fa ff07 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801d33a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d33e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d342:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d346:	4299      	cmp	r1, r3
 801d348:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d34c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d350:	d10b      	bne.n	801d36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d352:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d356:	4552      	cmp	r2, sl
 801d358:	d107      	bne.n	801d36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d35a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d35e:	455a      	cmp	r2, fp
 801d360:	d103      	bne.n	801d36a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d362:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d366:	454a      	cmp	r2, r9
 801d368:	d06d      	beq.n	801d446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d36a:	f1bb 0f00 	cmp.w	fp, #0
 801d36e:	dd65      	ble.n	801d43c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d370:	f1b9 0f00 	cmp.w	r9, #0
 801d374:	dd62      	ble.n	801d43c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d376:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d37a:	fa1f f08a 	uxth.w	r0, sl
 801d37e:	4552      	cmp	r2, sl
 801d380:	9000      	str	r0, [sp, #0]
 801d382:	da12      	bge.n	801d3aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d384:	9301      	str	r3, [sp, #4]
 801d386:	9b00      	ldr	r3, [sp, #0]
 801d388:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d38c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d390:	1a9a      	subs	r2, r3, r2
 801d392:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d396:	4631      	mov	r1, r6
 801d398:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d39c:	4640      	mov	r0, r8
 801d39e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d3a2:	69ea      	ldr	r2, [r5, #28]
 801d3a4:	f7ff ff7a 	bl	801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d3a8:	9b01      	ldr	r3, [sp, #4]
 801d3aa:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d3ae:	b29f      	uxth	r7, r3
 801d3b0:	429a      	cmp	r2, r3
 801d3b2:	da0d      	bge.n	801d3d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d3b4:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3b8:	1aba      	subs	r2, r7, r2
 801d3ba:	f8ad a012 	strh.w	sl, [sp, #18]
 801d3be:	4631      	mov	r1, r6
 801d3c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d3c4:	4640      	mov	r0, r8
 801d3c6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d3ca:	69ea      	ldr	r2, [r5, #28]
 801d3cc:	f7ff ff66 	bl	801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d3d0:	8822      	ldrh	r2, [r4, #0]
 801d3d2:	445f      	add	r7, fp
 801d3d4:	88a3      	ldrh	r3, [r4, #4]
 801d3d6:	b2bf      	uxth	r7, r7
 801d3d8:	4413      	add	r3, r2
 801d3da:	b23a      	sxth	r2, r7
 801d3dc:	b29b      	uxth	r3, r3
 801d3de:	b219      	sxth	r1, r3
 801d3e0:	4291      	cmp	r1, r2
 801d3e2:	dd0d      	ble.n	801d400 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d3e4:	1bdb      	subs	r3, r3, r7
 801d3e6:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d3ea:	f8ad a012 	strh.w	sl, [sp, #18]
 801d3ee:	4631      	mov	r1, r6
 801d3f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d3f4:	4640      	mov	r0, r8
 801d3f6:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d3fa:	69ea      	ldr	r2, [r5, #28]
 801d3fc:	f7ff ff4e 	bl	801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d400:	88e2      	ldrh	r2, [r4, #6]
 801d402:	8863      	ldrh	r3, [r4, #2]
 801d404:	4413      	add	r3, r2
 801d406:	9a00      	ldr	r2, [sp, #0]
 801d408:	444a      	add	r2, r9
 801d40a:	b29b      	uxth	r3, r3
 801d40c:	fa1f f982 	uxth.w	r9, r2
 801d410:	b219      	sxth	r1, r3
 801d412:	fa0f f289 	sxth.w	r2, r9
 801d416:	428a      	cmp	r2, r1
 801d418:	da15      	bge.n	801d446 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d41a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d41e:	eba3 0309 	sub.w	r3, r3, r9
 801d422:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d426:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d42a:	4631      	mov	r1, r6
 801d42c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d430:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d434:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d438:	69ea      	ldr	r2, [r5, #28]
 801d43a:	e001      	b.n	801d440 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d43c:	69ea      	ldr	r2, [r5, #28]
 801d43e:	4621      	mov	r1, r4
 801d440:	4640      	mov	r0, r8
 801d442:	f7ff ff2b 	bl	801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d446:	4628      	mov	r0, r5
 801d448:	f7ff fe94 	bl	801d174 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d44c:	6861      	ldr	r1, [r4, #4]
 801d44e:	4602      	mov	r2, r0
 801d450:	4633      	mov	r3, r6
 801d452:	6820      	ldr	r0, [r4, #0]
 801d454:	c303      	stmia	r3!, {r0, r1}
 801d456:	4611      	mov	r1, r2
 801d458:	4630      	mov	r0, r6
 801d45a:	f7fa fe75 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801d45e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d462:	2b00      	cmp	r3, #0
 801d464:	f77f af33 	ble.w	801d2ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d468:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d46c:	2b00      	cmp	r3, #0
 801d46e:	f77f af2e 	ble.w	801d2ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d472:	4628      	mov	r0, r5
 801d474:	f7ff fe9a 	bl	801d1ac <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d478:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d47c:	1a18      	subs	r0, r3, r0
 801d47e:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d482:	4628      	mov	r0, r5
 801d484:	f7ff fea6 	bl	801d1d4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d488:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d48c:	4631      	mov	r1, r6
 801d48e:	1a18      	subs	r0, r3, r0
 801d490:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d494:	4628      	mov	r0, r5
 801d496:	682b      	ldr	r3, [r5, #0]
 801d498:	689b      	ldr	r3, [r3, #8]
 801d49a:	4798      	blx	r3
 801d49c:	e717      	b.n	801d2ce <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d49e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d49e:	b570      	push	{r4, r5, r6, lr}
 801d4a0:	1d06      	adds	r6, r0, #4
 801d4a2:	b086      	sub	sp, #24
 801d4a4:	460c      	mov	r4, r1
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	4631      	mov	r1, r6
 801d4aa:	4605      	mov	r5, r0
 801d4ac:	a802      	add	r0, sp, #8
 801d4ae:	9301      	str	r3, [sp, #4]
 801d4b0:	f7ff fc1e 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d4b4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d4b8:	8822      	ldrh	r2, [r4, #0]
 801d4ba:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d4be:	1ad2      	subs	r2, r2, r3
 801d4c0:	8863      	ldrh	r3, [r4, #2]
 801d4c2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d4c6:	1a5b      	subs	r3, r3, r1
 801d4c8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d4cc:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d4d0:	aa01      	add	r2, sp, #4
 801d4d2:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d4d6:	4630      	mov	r0, r6
 801d4d8:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d4dc:	a904      	add	r1, sp, #16
 801d4de:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d4e2:	f7fa ff09 	bl	80182f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d4e6:	9a01      	ldr	r2, [sp, #4]
 801d4e8:	b11a      	cbz	r2, 801d4f2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d4ea:	4621      	mov	r1, r4
 801d4ec:	4628      	mov	r0, r5
 801d4ee:	f7ff fed5 	bl	801d29c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d4f2:	b006      	add	sp, #24
 801d4f4:	bd70      	pop	{r4, r5, r6, pc}

0801d4f6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d4f6:	4602      	mov	r2, r0
 801d4f8:	b530      	push	{r4, r5, lr}
 801d4fa:	4604      	mov	r4, r0
 801d4fc:	b085      	sub	sp, #20
 801d4fe:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d502:	460d      	mov	r5, r1
 801d504:	466b      	mov	r3, sp
 801d506:	6851      	ldr	r1, [r2, #4]
 801d508:	c303      	stmia	r3!, {r0, r1}
 801d50a:	4629      	mov	r1, r5
 801d50c:	4668      	mov	r0, sp
 801d50e:	f7fa fe1b 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 801d512:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801d516:	b12b      	cbz	r3, 801d524 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d518:	4669      	mov	r1, sp
 801d51a:	4620      	mov	r0, r4
 801d51c:	f7ff ffbf 	bl	801d49e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d520:	b005      	add	sp, #20
 801d522:	bd30      	pop	{r4, r5, pc}
 801d524:	3404      	adds	r4, #4
 801d526:	a802      	add	r0, sp, #8
 801d528:	4621      	mov	r1, r4
 801d52a:	f7ff fbe1 	bl	801ccf0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d52e:	f8bd 3000 	ldrh.w	r3, [sp]
 801d532:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d536:	4669      	mov	r1, sp
 801d538:	4620      	mov	r0, r4
 801d53a:	1a9b      	subs	r3, r3, r2
 801d53c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d540:	f8ad 3000 	strh.w	r3, [sp]
 801d544:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d548:	1a9b      	subs	r3, r3, r2
 801d54a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d54e:	f7fa fe9a 	bl	8018286 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d552:	e7e5      	b.n	801d520 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d554 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d554:	460b      	mov	r3, r1
 801d556:	680a      	ldr	r2, [r1, #0]
 801d558:	1d01      	adds	r1, r0, #4
 801d55a:	6992      	ldr	r2, [r2, #24]
 801d55c:	4618      	mov	r0, r3
 801d55e:	4710      	bx	r2

0801d560 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d560:	4298      	cmp	r0, r3
 801d562:	d200      	bcs.n	801d566 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d564:	b913      	cbnz	r3, 801d56c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d566:	440a      	add	r2, r1
 801d568:	b210      	sxth	r0, r2
 801d56a:	4770      	bx	lr
 801d56c:	ee07 0a90 	vmov	s15, r0
 801d570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d574:	ee07 3a90 	vmov	s15, r3
 801d578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d57c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d580:	ee07 2a90 	vmov	s15, r2
 801d584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d588:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d58c:	ee07 1a90 	vmov	s15, r1
 801d590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d594:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d598:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d59c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d5a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d5a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d5a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5b0:	bfcc      	ite	gt
 801d5b2:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d5b6:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d5ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d5be:	ee17 3a90 	vmov	r3, s15
 801d5c2:	b218      	sxth	r0, r3
 801d5c4:	4770      	bx	lr

0801d5c6 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d5c6:	4298      	cmp	r0, r3
 801d5c8:	d200      	bcs.n	801d5cc <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d5ca:	b913      	cbnz	r3, 801d5d2 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d5cc:	440a      	add	r2, r1
 801d5ce:	b210      	sxth	r0, r2
 801d5d0:	4770      	bx	lr
 801d5d2:	ee07 2a90 	vmov	s15, r2
 801d5d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d5da:	ee07 0a90 	vmov	s15, r0
 801d5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5e6:	ee07 3a10 	vmov	s14, r3
 801d5ea:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d5ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d5f2:	ee07 1a90 	vmov	s15, r1
 801d5f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d5fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801d602:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d60a:	bfcc      	ite	gt
 801d60c:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d610:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d618:	ee17 3a90 	vmov	r3, s15
 801d61c:	b218      	sxth	r0, r3
 801d61e:	4770      	bx	lr

0801d620 <_ZN8touchgfx12TextProviderC1Ev>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	2500      	movs	r5, #0
 801d624:	2302      	movs	r3, #2
 801d626:	4604      	mov	r4, r0
 801d628:	220e      	movs	r2, #14
 801d62a:	7403      	strb	r3, [r0, #16]
 801d62c:	4629      	mov	r1, r5
 801d62e:	6145      	str	r5, [r0, #20]
 801d630:	7605      	strb	r5, [r0, #24]
 801d632:	83c5      	strh	r5, [r0, #30]
 801d634:	8405      	strh	r5, [r0, #32]
 801d636:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d638:	8705      	strh	r5, [r0, #56]	; 0x38
 801d63a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801d63c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801d640:	e9c0 5500 	strd	r5, r5, [r0]
 801d644:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801d648:	304c      	adds	r0, #76	; 0x4c
 801d64a:	f00d fe62 	bl	802b312 <memset>
 801d64e:	2301      	movs	r3, #1
 801d650:	4620      	mov	r0, r4
 801d652:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801d656:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d65a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801d65e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801d662:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801d666:	f7ec fcd3 	bl	800a010 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d66a:	4620      	mov	r0, r4
 801d66c:	bd38      	pop	{r3, r4, r5, pc}

0801d66e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d66e:	b530      	push	{r4, r5, lr}
 801d670:	2500      	movs	r5, #0
 801d672:	2401      	movs	r4, #1
 801d674:	6843      	ldr	r3, [r0, #4]
 801d676:	b913      	cbnz	r3, 801d67e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d678:	6803      	ldr	r3, [r0, #0]
 801d67a:	b313      	cbz	r3, 801d6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d67c:	6043      	str	r3, [r0, #4]
 801d67e:	7e03      	ldrb	r3, [r0, #24]
 801d680:	b143      	cbz	r3, 801d694 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d682:	6943      	ldr	r3, [r0, #20]
 801d684:	b12b      	cbz	r3, 801d692 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d686:	881a      	ldrh	r2, [r3, #0]
 801d688:	b11a      	cbz	r2, 801d692 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d68a:	1c9a      	adds	r2, r3, #2
 801d68c:	6142      	str	r2, [r0, #20]
 801d68e:	8818      	ldrh	r0, [r3, #0]
 801d690:	bd30      	pop	{r4, r5, pc}
 801d692:	7605      	strb	r5, [r0, #24]
 801d694:	6843      	ldr	r3, [r0, #4]
 801d696:	8819      	ldrh	r1, [r3, #0]
 801d698:	b199      	cbz	r1, 801d6c2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d69a:	1c9a      	adds	r2, r3, #2
 801d69c:	2902      	cmp	r1, #2
 801d69e:	6042      	str	r2, [r0, #4]
 801d6a0:	d1f5      	bne.n	801d68e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d6a2:	7c03      	ldrb	r3, [r0, #16]
 801d6a4:	2b01      	cmp	r3, #1
 801d6a6:	d8e5      	bhi.n	801d674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d6a8:	1c5a      	adds	r2, r3, #1
 801d6aa:	3302      	adds	r3, #2
 801d6ac:	7402      	strb	r2, [r0, #16]
 801d6ae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d6b2:	6143      	str	r3, [r0, #20]
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d0dd      	beq.n	801d674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d6b8:	881b      	ldrh	r3, [r3, #0]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d0da      	beq.n	801d674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d6be:	7604      	strb	r4, [r0, #24]
 801d6c0:	e7d8      	b.n	801d674 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d6c2:	2000      	movs	r0, #0
 801d6c4:	e7e4      	b.n	801d690 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d6c6 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d6c6:	b430      	push	{r4, r5}
 801d6c8:	6815      	ldr	r5, [r2, #0]
 801d6ca:	6085      	str	r5, [r0, #8]
 801d6cc:	6852      	ldr	r2, [r2, #4]
 801d6ce:	6443      	str	r3, [r0, #68]	; 0x44
 801d6d0:	60c2      	str	r2, [r0, #12]
 801d6d2:	2200      	movs	r2, #0
 801d6d4:	9b02      	ldr	r3, [sp, #8]
 801d6d6:	7402      	strb	r2, [r0, #16]
 801d6d8:	6001      	str	r1, [r0, #0]
 801d6da:	6483      	str	r3, [r0, #72]	; 0x48
 801d6dc:	6042      	str	r2, [r0, #4]
 801d6de:	6142      	str	r2, [r0, #20]
 801d6e0:	7602      	strb	r2, [r0, #24]
 801d6e2:	8702      	strh	r2, [r0, #56]	; 0x38
 801d6e4:	8402      	strh	r2, [r0, #32]
 801d6e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801d6ea:	bc30      	pop	{r4, r5}
 801d6ec:	f7ec bc90 	b.w	800a010 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d6f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6f2:	4605      	mov	r5, r0
 801d6f4:	4608      	mov	r0, r1
 801d6f6:	b1f1      	cbz	r1, 801d736 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d6f8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801d6fc:	460b      	mov	r3, r1
 801d6fe:	f101 0708 	add.w	r7, r1, #8
 801d702:	4622      	mov	r2, r4
 801d704:	6818      	ldr	r0, [r3, #0]
 801d706:	3308      	adds	r3, #8
 801d708:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d70c:	4626      	mov	r6, r4
 801d70e:	42bb      	cmp	r3, r7
 801d710:	c603      	stmia	r6!, {r0, r1}
 801d712:	4634      	mov	r4, r6
 801d714:	d1f6      	bne.n	801d704 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d716:	6818      	ldr	r0, [r3, #0]
 801d718:	6030      	str	r0, [r6, #0]
 801d71a:	4610      	mov	r0, r2
 801d71c:	889b      	ldrh	r3, [r3, #4]
 801d71e:	80b3      	strh	r3, [r6, #4]
 801d720:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801d724:	015b      	lsls	r3, r3, #5
 801d726:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d72a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801d72e:	430b      	orrs	r3, r1
 801d730:	425b      	negs	r3, r3
 801d732:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801d736:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d738:	b538      	push	{r3, r4, r5, lr}
 801d73a:	460c      	mov	r4, r1
 801d73c:	6811      	ldr	r1, [r2, #0]
 801d73e:	4610      	mov	r0, r2
 801d740:	68cd      	ldr	r5, [r1, #12]
 801d742:	4619      	mov	r1, r3
 801d744:	47a8      	blx	r5
 801d746:	2800      	cmp	r0, #0
 801d748:	bf08      	it	eq
 801d74a:	4620      	moveq	r0, r4
 801d74c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d752:	4604      	mov	r4, r0
 801d754:	4615      	mov	r5, r2
 801d756:	4608      	mov	r0, r1
 801d758:	b93a      	cbnz	r2, 801d76a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d75a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d75e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801d762:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801d766:	4628      	mov	r0, r5
 801d768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d76a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d76e:	8893      	ldrh	r3, [r2, #4]
 801d770:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d774:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d778:	79ee      	ldrb	r6, [r5, #7]
 801d77a:	4316      	orrs	r6, r2
 801d77c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801d780:	189a      	adds	r2, r3, r2
 801d782:	b2b7      	uxth	r7, r6
 801d784:	b291      	uxth	r1, r2
 801d786:	291d      	cmp	r1, #29
 801d788:	f200 8084 	bhi.w	801d894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d78c:	2201      	movs	r2, #1
 801d78e:	10f6      	asrs	r6, r6, #3
 801d790:	408a      	lsls	r2, r1
 801d792:	4978      	ldr	r1, [pc, #480]	; (801d974 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d794:	420a      	tst	r2, r1
 801d796:	d12e      	bne.n	801d7f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d798:	f412 7f60 	tst.w	r2, #896	; 0x380
 801d79c:	d07a      	beq.n	801d894 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d79e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801d7a2:	462b      	mov	r3, r5
 801d7a4:	f105 0e08 	add.w	lr, r5, #8
 801d7a8:	4615      	mov	r5, r2
 801d7aa:	6818      	ldr	r0, [r3, #0]
 801d7ac:	3308      	adds	r3, #8
 801d7ae:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d7b2:	4694      	mov	ip, r2
 801d7b4:	4573      	cmp	r3, lr
 801d7b6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d7ba:	4662      	mov	r2, ip
 801d7bc:	d1f5      	bne.n	801d7aa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d7be:	6818      	ldr	r0, [r3, #0]
 801d7c0:	f8cc 0000 	str.w	r0, [ip]
 801d7c4:	889b      	ldrh	r3, [r3, #4]
 801d7c6:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d7ca:	b2b3      	uxth	r3, r6
 801d7cc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801d7d0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801d7d4:	1aca      	subs	r2, r1, r3
 801d7d6:	1bcf      	subs	r7, r1, r7
 801d7d8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801d7dc:	b292      	uxth	r2, r2
 801d7de:	1afb      	subs	r3, r7, r3
 801d7e0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801d7e4:	10d2      	asrs	r2, r2, #3
 801d7e6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801d7ea:	4302      	orrs	r2, r0
 801d7ec:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801d7f0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d7f4:	e7b7      	b.n	801d766 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d7f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d7f8:	b92b      	cbnz	r3, 801d806 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d7fa:	4b5f      	ldr	r3, [pc, #380]	; (801d978 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d7fc:	21c0      	movs	r1, #192	; 0xc0
 801d7fe:	4a5f      	ldr	r2, [pc, #380]	; (801d97c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d800:	485f      	ldr	r0, [pc, #380]	; (801d980 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d802:	f00d fb81 	bl	802af08 <__assert_func>
 801d806:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d808:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d80c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801d80e:	f640 6333 	movw	r3, #3635	; 0xe33
 801d812:	4299      	cmp	r1, r3
 801d814:	d110      	bne.n	801d838 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d816:	6803      	ldr	r3, [r0, #0]
 801d818:	68db      	ldr	r3, [r3, #12]
 801d81a:	4798      	blx	r3
 801d81c:	7b41      	ldrb	r1, [r0, #13]
 801d81e:	00cb      	lsls	r3, r1, #3
 801d820:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d824:	7a03      	ldrb	r3, [r0, #8]
 801d826:	0648      	lsls	r0, r1, #25
 801d828:	ea43 0302 	orr.w	r3, r3, r2
 801d82c:	bf44      	itt	mi
 801d82e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d832:	b21b      	sxthmi	r3, r3
 801d834:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d838:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801d83c:	462a      	mov	r2, r5
 801d83e:	f105 0c08 	add.w	ip, r5, #8
 801d842:	443b      	add	r3, r7
 801d844:	4433      	add	r3, r6
 801d846:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801d84a:	b29b      	uxth	r3, r3
 801d84c:	4635      	mov	r5, r6
 801d84e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d852:	6810      	ldr	r0, [r2, #0]
 801d854:	3208      	adds	r2, #8
 801d856:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d85a:	4637      	mov	r7, r6
 801d85c:	4562      	cmp	r2, ip
 801d85e:	c703      	stmia	r7!, {r0, r1}
 801d860:	463e      	mov	r6, r7
 801d862:	d1f6      	bne.n	801d852 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d864:	6810      	ldr	r0, [r2, #0]
 801d866:	6038      	str	r0, [r7, #0]
 801d868:	8892      	ldrh	r2, [r2, #4]
 801d86a:	80ba      	strh	r2, [r7, #4]
 801d86c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d870:	10db      	asrs	r3, r3, #3
 801d872:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d87a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d87e:	4313      	orrs	r3, r2
 801d880:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801d884:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d888:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801d88c:	1a9b      	subs	r3, r3, r2
 801d88e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801d892:	e768      	b.n	801d766 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d894:	f023 0204 	bic.w	r2, r3, #4
 801d898:	f640 611b 	movw	r1, #3611	; 0xe1b
 801d89c:	428a      	cmp	r2, r1
 801d89e:	d003      	beq.n	801d8a8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d8a0:	f640 621d 	movw	r2, #3613	; 0xe1d
 801d8a4:	4293      	cmp	r3, r2
 801d8a6:	d120      	bne.n	801d8ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d8a8:	3b01      	subs	r3, #1
 801d8aa:	4602      	mov	r2, r0
 801d8ac:	4629      	mov	r1, r5
 801d8ae:	4620      	mov	r0, r4
 801d8b0:	b29b      	uxth	r3, r3
 801d8b2:	f7ff ff41 	bl	801d738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d8b6:	7b41      	ldrb	r1, [r0, #13]
 801d8b8:	00cb      	lsls	r3, r1, #3
 801d8ba:	0649      	lsls	r1, r1, #25
 801d8bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d8c0:	7a03      	ldrb	r3, [r0, #8]
 801d8c2:	ea43 0302 	orr.w	r3, r3, r2
 801d8c6:	bf44      	itt	mi
 801d8c8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d8cc:	b21b      	sxthmi	r3, r3
 801d8ce:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d8d2:	7b6b      	ldrb	r3, [r5, #13]
 801d8d4:	7aaa      	ldrb	r2, [r5, #10]
 801d8d6:	005b      	lsls	r3, r3, #1
 801d8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d8dc:	4313      	orrs	r3, r2
 801d8de:	115a      	asrs	r2, r3, #5
 801d8e0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d8e4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d8e8:	e035      	b.n	801d956 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d8ea:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d8ee:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801d8f2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801d8f6:	7a2a      	ldrb	r2, [r5, #8]
 801d8f8:	ea42 0201 	orr.w	r2, r2, r1
 801d8fc:	f640 6109 	movw	r1, #3593	; 0xe09
 801d900:	bf1c      	itt	ne
 801d902:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801d906:	b212      	sxthne	r2, r2
 801d908:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801d90c:	f023 0210 	bic.w	r2, r3, #16
 801d910:	428a      	cmp	r2, r1
 801d912:	d003      	beq.n	801d91c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d914:	f640 6213 	movw	r2, #3603	; 0xe13
 801d918:	4293      	cmp	r3, r2
 801d91a:	d129      	bne.n	801d970 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d91c:	7b6e      	ldrb	r6, [r5, #13]
 801d91e:	4629      	mov	r1, r5
 801d920:	0076      	lsls	r6, r6, #1
 801d922:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801d926:	7aae      	ldrb	r6, [r5, #10]
 801d928:	4316      	orrs	r6, r2
 801d92a:	f640 6213 	movw	r2, #3603	; 0xe13
 801d92e:	4293      	cmp	r3, r2
 801d930:	4602      	mov	r2, r0
 801d932:	4620      	mov	r0, r4
 801d934:	bf16      	itet	ne
 801d936:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d93a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801d93e:	b29b      	uxthne	r3, r3
 801d940:	f7ff fefa 	bl	801d738 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d944:	7b43      	ldrb	r3, [r0, #13]
 801d946:	7a82      	ldrb	r2, [r0, #10]
 801d948:	005b      	lsls	r3, r3, #1
 801d94a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d94e:	4313      	orrs	r3, r2
 801d950:	1af6      	subs	r6, r6, r3
 801d952:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801d956:	7b69      	ldrb	r1, [r5, #13]
 801d958:	00cb      	lsls	r3, r1, #3
 801d95a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d95e:	7a2b      	ldrb	r3, [r5, #8]
 801d960:	4313      	orrs	r3, r2
 801d962:	064a      	lsls	r2, r1, #25
 801d964:	bf44      	itt	mi
 801d966:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d96a:	b21b      	sxthmi	r3, r3
 801d96c:	1bdb      	subs	r3, r3, r7
 801d96e:	e73f      	b.n	801d7f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d970:	2300      	movs	r3, #0
 801d972:	e7b7      	b.n	801d8e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d974:	3fc00079 	.word	0x3fc00079
 801d978:	0802f63c 	.word	0x0802f63c
 801d97c:	0802f8ae 	.word	0x0802f8ae
 801d980:	0802f645 	.word	0x0802f645

0801d984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d988:	4604      	mov	r4, r0
 801d98a:	b942      	cbnz	r2, 801d99e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d98c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d990:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801d994:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801d998:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801d99c:	e046      	b.n	801da2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d99e:	7b51      	ldrb	r1, [r2, #13]
 801d9a0:	8893      	ldrh	r3, [r2, #4]
 801d9a2:	010f      	lsls	r7, r1, #4
 801d9a4:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801d9a8:	79d7      	ldrb	r7, [r2, #7]
 801d9aa:	4307      	orrs	r7, r0
 801d9ac:	2f04      	cmp	r7, #4
 801d9ae:	b2bd      	uxth	r5, r7
 801d9b0:	bfcc      	ite	gt
 801d9b2:	08bf      	lsrgt	r7, r7, #2
 801d9b4:	2701      	movle	r7, #1
 801d9b6:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801d9ba:	f200 80ab 	bhi.w	801db14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801d9be:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801d9c2:	4283      	cmp	r3, r0
 801d9c4:	d216      	bcs.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d9c6:	f240 605b 	movw	r0, #1627	; 0x65b
 801d9ca:	4283      	cmp	r3, r0
 801d9cc:	d859      	bhi.n	801da82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801d9ce:	f240 6057 	movw	r0, #1623	; 0x657
 801d9d2:	4283      	cmp	r3, r0
 801d9d4:	d20e      	bcs.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d9d6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d9da:	d24a      	bcs.n	801da72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801d9dc:	f240 604e 	movw	r0, #1614	; 0x64e
 801d9e0:	4283      	cmp	r3, r0
 801d9e2:	d207      	bcs.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801d9e4:	f240 601a 	movw	r0, #1562	; 0x61a
 801d9e8:	4283      	cmp	r3, r0
 801d9ea:	d02a      	beq.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801d9ec:	d821      	bhi.n	801da32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801d9ee:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801d9f2:	d35b      	bcc.n	801daac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d9f4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801d9f8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d9fc:	f040 80d0 	bne.w	801dba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801da00:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801da04:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da08:	f040 80ca 	bne.w	801dba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801da0c:	00cb      	lsls	r3, r1, #3
 801da0e:	0649      	lsls	r1, r1, #25
 801da10:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801da14:	7a13      	ldrb	r3, [r2, #8]
 801da16:	ea43 0300 	orr.w	r3, r3, r0
 801da1a:	bf44      	itt	mi
 801da1c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da20:	b21b      	sxthmi	r3, r3
 801da22:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801da26:	1b5d      	subs	r5, r3, r5
 801da28:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801da2c:	4610      	mov	r0, r2
 801da2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da32:	f240 604b 	movw	r0, #1611	; 0x64b
 801da36:	4283      	cmp	r3, r0
 801da38:	d338      	bcc.n	801daac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801da3a:	f240 604c 	movw	r0, #1612	; 0x64c
 801da3e:	4283      	cmp	r3, r0
 801da40:	d9d8      	bls.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da42:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801da46:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801da4a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801da4e:	f040 80f2 	bne.w	801dc36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801da52:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801da56:	f040 80ee 	bne.w	801dc36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801da5a:	00cb      	lsls	r3, r1, #3
 801da5c:	064e      	lsls	r6, r1, #25
 801da5e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801da62:	7a13      	ldrb	r3, [r2, #8]
 801da64:	ea43 0300 	orr.w	r3, r3, r0
 801da68:	bf44      	itt	mi
 801da6a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801da6e:	b21b      	sxthmi	r3, r3
 801da70:	e7d9      	b.n	801da26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801da72:	f240 6054 	movw	r0, #1620	; 0x654
 801da76:	4283      	cmp	r3, r0
 801da78:	d8e3      	bhi.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801da7a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801da7e:	d9e0      	bls.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801da80:	e7b8      	b.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da82:	f240 6074 	movw	r0, #1652	; 0x674
 801da86:	4283      	cmp	r3, r0
 801da88:	d0b4      	beq.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da8a:	d82d      	bhi.n	801dae8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801da8c:	f240 605e 	movw	r0, #1630	; 0x65e
 801da90:	4283      	cmp	r3, r0
 801da92:	d804      	bhi.n	801da9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801da94:	f240 605d 	movw	r0, #1629	; 0x65d
 801da98:	4283      	cmp	r3, r0
 801da9a:	d3d2      	bcc.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801da9c:	e7aa      	b.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da9e:	f240 605f 	movw	r0, #1631	; 0x65f
 801daa2:	4283      	cmp	r3, r0
 801daa4:	d0cd      	beq.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801daa6:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801daaa:	d0a3      	beq.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801daac:	00cb      	lsls	r3, r1, #3
 801daae:	0649      	lsls	r1, r1, #25
 801dab0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801dab4:	7a13      	ldrb	r3, [r2, #8]
 801dab6:	ea43 0300 	orr.w	r3, r3, r0
 801daba:	bf44      	itt	mi
 801dabc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dac0:	b21b      	sxthmi	r3, r3
 801dac2:	1b5d      	subs	r5, r3, r5
 801dac4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dac8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dacc:	7b53      	ldrb	r3, [r2, #13]
 801dace:	015b      	lsls	r3, r3, #5
 801dad0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801dad4:	7993      	ldrb	r3, [r2, #6]
 801dad6:	430b      	orrs	r3, r1
 801dad8:	2105      	movs	r1, #5
 801dada:	005b      	lsls	r3, r3, #1
 801dadc:	fb93 f3f1 	sdiv	r3, r3, r1
 801dae0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801dae4:	440b      	add	r3, r1
 801dae6:	e757      	b.n	801d998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801dae8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801daec:	4283      	cmp	r3, r0
 801daee:	d809      	bhi.n	801db04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801daf0:	f240 60df 	movw	r0, #1759	; 0x6df
 801daf4:	4283      	cmp	r3, r0
 801daf6:	f4bf af7d 	bcs.w	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dafa:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801dafe:	2b05      	cmp	r3, #5
 801db00:	d8d4      	bhi.n	801daac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801db02:	e777      	b.n	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db04:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801db08:	4283      	cmp	r3, r0
 801db0a:	d09a      	beq.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db0c:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801db10:	4283      	cmp	r3, r0
 801db12:	e7ca      	b.n	801daaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801db14:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801db18:	d22b      	bcs.n	801db72 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801db1a:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801db1e:	4283      	cmp	r3, r0
 801db20:	d28f      	bcs.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db22:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db26:	4283      	cmp	r3, r0
 801db28:	d816      	bhi.n	801db58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801db2a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801db2e:	4283      	cmp	r3, r0
 801db30:	f4bf af60 	bcs.w	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db34:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801db38:	4283      	cmp	r3, r0
 801db3a:	d80a      	bhi.n	801db52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801db3c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801db40:	4283      	cmp	r3, r0
 801db42:	f4bf af57 	bcs.w	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db46:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801db4a:	4283      	cmp	r3, r0
 801db4c:	f43f af79 	beq.w	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db50:	e7ac      	b.n	801daac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801db52:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801db56:	e7f8      	b.n	801db4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801db58:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801db5c:	4283      	cmp	r3, r0
 801db5e:	d802      	bhi.n	801db66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801db60:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801db64:	e798      	b.n	801da98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801db66:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801db6a:	4283      	cmp	r3, r0
 801db6c:	f47f af42 	bne.w	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db70:	e767      	b.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db72:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801db76:	4283      	cmp	r3, r0
 801db78:	f43f af63 	beq.w	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db7c:	d802      	bhi.n	801db84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801db7e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801db82:	e7f2      	b.n	801db6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801db84:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801db88:	4283      	cmp	r3, r0
 801db8a:	d805      	bhi.n	801db98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801db8c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801db90:	4283      	cmp	r3, r0
 801db92:	f4ff af2f 	bcc.w	801d9f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db96:	e754      	b.n	801da42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db98:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801db9c:	4283      	cmp	r3, r0
 801db9e:	e7af      	b.n	801db00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801dba0:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dba4:	4617      	mov	r7, r2
 801dba6:	f102 0808 	add.w	r8, r2, #8
 801dbaa:	4666      	mov	r6, ip
 801dbac:	6838      	ldr	r0, [r7, #0]
 801dbae:	3708      	adds	r7, #8
 801dbb0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dbb4:	46e6      	mov	lr, ip
 801dbb6:	4547      	cmp	r7, r8
 801dbb8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801dbbc:	46f4      	mov	ip, lr
 801dbbe:	d1f5      	bne.n	801dbac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801dbc0:	6838      	ldr	r0, [r7, #0]
 801dbc2:	f8ce 0000 	str.w	r0, [lr]
 801dbc6:	88b9      	ldrh	r1, [r7, #4]
 801dbc8:	f8ae 1004 	strh.w	r1, [lr, #4]
 801dbcc:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dbd0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dbd4:	d009      	beq.n	801dbea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801dbd6:	7b51      	ldrb	r1, [r2, #13]
 801dbd8:	7992      	ldrb	r2, [r2, #6]
 801dbda:	0149      	lsls	r1, r1, #5
 801dbdc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dbe0:	4311      	orrs	r1, r2
 801dbe2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dbe6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dbea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dbee:	d00d      	beq.n	801dc0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801dbf0:	442b      	add	r3, r5
 801dbf2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dbf6:	b29b      	uxth	r3, r3
 801dbf8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dbfc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc00:	10db      	asrs	r3, r3, #3
 801dc02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dc06:	4313      	orrs	r3, r2
 801dc08:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dc0c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dc10:	00cb      	lsls	r3, r1, #3
 801dc12:	064f      	lsls	r7, r1, #25
 801dc14:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dc18:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dc1c:	ea43 0302 	orr.w	r3, r3, r2
 801dc20:	bf44      	itt	mi
 801dc22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dc26:	b21b      	sxthmi	r3, r3
 801dc28:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801dc2c:	1b5d      	subs	r5, r3, r5
 801dc2e:	4632      	mov	r2, r6
 801dc30:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801dc34:	e6fa      	b.n	801da2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801dc36:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801dc3a:	4694      	mov	ip, r2
 801dc3c:	f102 0908 	add.w	r9, r2, #8
 801dc40:	4676      	mov	r6, lr
 801dc42:	f8dc 0000 	ldr.w	r0, [ip]
 801dc46:	f10c 0c08 	add.w	ip, ip, #8
 801dc4a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801dc4e:	46f0      	mov	r8, lr
 801dc50:	45cc      	cmp	ip, r9
 801dc52:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801dc56:	46c6      	mov	lr, r8
 801dc58:	d1f3      	bne.n	801dc42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801dc5a:	f8dc 0000 	ldr.w	r0, [ip]
 801dc5e:	f8c8 0000 	str.w	r0, [r8]
 801dc62:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801dc66:	f8a8 1004 	strh.w	r1, [r8, #4]
 801dc6a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801dc6e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801dc72:	d009      	beq.n	801dc88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801dc74:	7b51      	ldrb	r1, [r2, #13]
 801dc76:	7992      	ldrb	r2, [r2, #6]
 801dc78:	0149      	lsls	r1, r1, #5
 801dc7a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801dc7e:	4311      	orrs	r1, r2
 801dc80:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dc84:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801dc88:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801dc8c:	d00d      	beq.n	801dcaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801dc8e:	1bdb      	subs	r3, r3, r7
 801dc90:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801dc94:	b29b      	uxth	r3, r3
 801dc96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801dc9a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801dc9e:	10db      	asrs	r3, r3, #3
 801dca0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801dca4:	4313      	orrs	r3, r2
 801dca6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801dcaa:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801dcae:	00cb      	lsls	r3, r1, #3
 801dcb0:	0648      	lsls	r0, r1, #25
 801dcb2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801dcb6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801dcba:	ea43 0302 	orr.w	r3, r3, r2
 801dcbe:	bf44      	itt	mi
 801dcc0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801dcc4:	b21b      	sxthmi	r3, r3
 801dcc6:	e7b1      	b.n	801dc2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801dcc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dccc:	461e      	mov	r6, r3
 801dcce:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801dcd0:	4604      	mov	r4, r0
 801dcd2:	4617      	mov	r7, r2
 801dcd4:	b92b      	cbnz	r3, 801dce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801dcd6:	4b25      	ldr	r3, [pc, #148]	; (801dd6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801dcd8:	21c0      	movs	r1, #192	; 0xc0
 801dcda:	4a25      	ldr	r2, [pc, #148]	; (801dd70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801dcdc:	4825      	ldr	r0, [pc, #148]	; (801dd74 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801dcde:	f00d f913 	bl	802af08 <__assert_func>
 801dce2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dce4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dce8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dcec:	f7ec f8ea 	bl	8009ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dcf0:	4605      	mov	r5, r0
 801dcf2:	b918      	cbnz	r0, 801dcfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801dcf4:	6030      	str	r0, [r6, #0]
 801dcf6:	4628      	mov	r0, r5
 801dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcfc:	683b      	ldr	r3, [r7, #0]
 801dcfe:	4601      	mov	r1, r0
 801dd00:	4638      	mov	r0, r7
 801dd02:	68db      	ldr	r3, [r3, #12]
 801dd04:	4798      	blx	r3
 801dd06:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801dd0a:	4602      	mov	r2, r0
 801dd0c:	6030      	str	r0, [r6, #0]
 801dd0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801dd12:	d213      	bcs.n	801dd3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801dd14:	4643      	mov	r3, r8
 801dd16:	4639      	mov	r1, r7
 801dd18:	4620      	mov	r0, r4
 801dd1a:	f7ff fe33 	bl	801d984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dd1e:	6030      	str	r0, [r6, #0]
 801dd20:	6833      	ldr	r3, [r6, #0]
 801dd22:	b143      	cbz	r3, 801dd36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801dd24:	7b5a      	ldrb	r2, [r3, #13]
 801dd26:	7a9b      	ldrb	r3, [r3, #10]
 801dd28:	0052      	lsls	r2, r2, #1
 801dd2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dd2e:	4313      	orrs	r3, r2
 801dd30:	bf0c      	ite	eq
 801dd32:	2301      	moveq	r3, #1
 801dd34:	2300      	movne	r3, #0
 801dd36:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801dd3a:	e7dc      	b.n	801dcf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801dd3c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801dd40:	b29b      	uxth	r3, r3
 801dd42:	2b7f      	cmp	r3, #127	; 0x7f
 801dd44:	d804      	bhi.n	801dd50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801dd46:	4639      	mov	r1, r7
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f7ff fd01 	bl	801d750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801dd4e:	e7e6      	b.n	801dd1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801dd50:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	d0e3      	beq.n	801dd20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801dd58:	f640 1302 	movw	r3, #2306	; 0x902
 801dd5c:	429d      	cmp	r5, r3
 801dd5e:	d1df      	bne.n	801dd20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801dd60:	4601      	mov	r1, r0
 801dd62:	4620      	mov	r0, r4
 801dd64:	f7ff fcc4 	bl	801d6f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801dd68:	e7d9      	b.n	801dd1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801dd6a:	bf00      	nop
 801dd6c:	0802f63c 	.word	0x0802f63c
 801dd70:	0802f8ae 	.word	0x0802f8ae
 801dd74:	0802f645 	.word	0x0802f645

0801dd78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd7c:	461e      	mov	r6, r3
 801dd7e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801dd80:	4604      	mov	r4, r0
 801dd82:	4617      	mov	r7, r2
 801dd84:	b92b      	cbnz	r3, 801dd92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801dd86:	4b26      	ldr	r3, [pc, #152]	; (801de20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801dd88:	21c0      	movs	r1, #192	; 0xc0
 801dd8a:	4a26      	ldr	r2, [pc, #152]	; (801de24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801dd8c:	4826      	ldr	r0, [pc, #152]	; (801de28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801dd8e:	f00d f8bb 	bl	802af08 <__assert_func>
 801dd92:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801dd94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd98:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801dd9c:	f7ec f892 	bl	8009ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dda0:	4605      	mov	r5, r0
 801dda2:	b918      	cbnz	r0, 801ddac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801dda4:	6030      	str	r0, [r6, #0]
 801dda6:	4628      	mov	r0, r5
 801dda8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ddac:	683b      	ldr	r3, [r7, #0]
 801ddae:	4601      	mov	r1, r0
 801ddb0:	4638      	mov	r0, r7
 801ddb2:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ddb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ddba:	47c8      	blx	r9
 801ddbc:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ddc0:	4602      	mov	r2, r0
 801ddc2:	6030      	str	r0, [r6, #0]
 801ddc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ddc8:	d213      	bcs.n	801ddf2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ddca:	4643      	mov	r3, r8
 801ddcc:	4639      	mov	r1, r7
 801ddce:	4620      	mov	r0, r4
 801ddd0:	f7ff fdd8 	bl	801d984 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ddd4:	6030      	str	r0, [r6, #0]
 801ddd6:	6833      	ldr	r3, [r6, #0]
 801ddd8:	b143      	cbz	r3, 801ddec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ddda:	7b5a      	ldrb	r2, [r3, #13]
 801dddc:	7a9b      	ldrb	r3, [r3, #10]
 801ddde:	0052      	lsls	r2, r2, #1
 801dde0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801dde4:	4313      	orrs	r3, r2
 801dde6:	bf0c      	ite	eq
 801dde8:	2301      	moveq	r3, #1
 801ddea:	2300      	movne	r3, #0
 801ddec:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ddf0:	e7d9      	b.n	801dda6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ddf2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ddf6:	b29b      	uxth	r3, r3
 801ddf8:	2b7f      	cmp	r3, #127	; 0x7f
 801ddfa:	d804      	bhi.n	801de06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ddfc:	4639      	mov	r1, r7
 801ddfe:	4620      	mov	r0, r4
 801de00:	f7ff fca6 	bl	801d750 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801de04:	e7e6      	b.n	801ddd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801de06:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d0e3      	beq.n	801ddd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801de0e:	f640 1302 	movw	r3, #2306	; 0x902
 801de12:	429d      	cmp	r5, r3
 801de14:	d1df      	bne.n	801ddd6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801de16:	4601      	mov	r1, r0
 801de18:	4620      	mov	r0, r4
 801de1a:	f7ff fc69 	bl	801d6f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de1e:	e7d9      	b.n	801ddd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801de20:	0802f63c 	.word	0x0802f63c
 801de24:	0802f8ae 	.word	0x0802f8ae
 801de28:	0802f645 	.word	0x0802f645

0801de2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801de2c:	b510      	push	{r4, lr}
 801de2e:	4604      	mov	r4, r0
 801de30:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801de34:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de36:	b9d9      	cbnz	r1, 801de70 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801de38:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de3a:	2b0a      	cmp	r3, #10
 801de3c:	d037      	beq.n	801deae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801de3e:	4620      	mov	r0, r4
 801de40:	f7ff fc15 	bl	801d66e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801de44:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801de46:	2b09      	cmp	r3, #9
 801de48:	d906      	bls.n	801de58 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801de4a:	4b19      	ldr	r3, [pc, #100]	; (801deb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801de4c:	f44f 7182 	mov.w	r1, #260	; 0x104
 801de50:	4a18      	ldr	r2, [pc, #96]	; (801deb4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801de52:	4819      	ldr	r0, [pc, #100]	; (801deb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801de54:	f00d f858 	bl	802af08 <__assert_func>
 801de58:	1c5a      	adds	r2, r3, #1
 801de5a:	8722      	strh	r2, [r4, #56]	; 0x38
 801de5c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801de5e:	4413      	add	r3, r2
 801de60:	b29b      	uxth	r3, r3
 801de62:	2b09      	cmp	r3, #9
 801de64:	bf88      	it	hi
 801de66:	3b0a      	subhi	r3, #10
 801de68:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801de6c:	8458      	strh	r0, [r3, #34]	; 0x22
 801de6e:	e7e3      	b.n	801de38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801de70:	2b0a      	cmp	r3, #10
 801de72:	d01c      	beq.n	801deae <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801de74:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801de76:	3901      	subs	r1, #1
 801de78:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801de7c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801de7e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801de82:	1c51      	adds	r1, r2, #1
 801de84:	b289      	uxth	r1, r1
 801de86:	2901      	cmp	r1, #1
 801de88:	bf8a      	itet	hi
 801de8a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801de8e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801de90:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801de92:	2b09      	cmp	r3, #9
 801de94:	d8d9      	bhi.n	801de4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801de96:	1c5a      	adds	r2, r3, #1
 801de98:	8722      	strh	r2, [r4, #56]	; 0x38
 801de9a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801de9c:	4413      	add	r3, r2
 801de9e:	b29b      	uxth	r3, r3
 801dea0:	2b09      	cmp	r3, #9
 801dea2:	bf88      	it	hi
 801dea4:	3b0a      	subhi	r3, #10
 801dea6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801deaa:	8458      	strh	r0, [r3, #34]	; 0x22
 801deac:	e7c0      	b.n	801de30 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801deae:	bd10      	pop	{r4, pc}
 801deb0:	0802f671 	.word	0x0802f671
 801deb4:	0802fa04 	.word	0x0802fa04
 801deb8:	0802f645 	.word	0x0802f645

0801debc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801debc:	b538      	push	{r3, r4, r5, lr}
 801debe:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801dec0:	4604      	mov	r4, r0
 801dec2:	b92a      	cbnz	r2, 801ded0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801dec4:	4b13      	ldr	r3, [pc, #76]	; (801df14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801dec6:	21d5      	movs	r1, #213	; 0xd5
 801dec8:	4a13      	ldr	r2, [pc, #76]	; (801df18 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801deca:	4814      	ldr	r0, [pc, #80]	; (801df1c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801decc:	f00d f81c 	bl	802af08 <__assert_func>
 801ded0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ded2:	3a01      	subs	r2, #1
 801ded4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801ded8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801deda:	8702      	strh	r2, [r0, #56]	; 0x38
 801dedc:	1c5a      	adds	r2, r3, #1
 801dede:	b292      	uxth	r2, r2
 801dee0:	2a09      	cmp	r2, #9
 801dee2:	bf8a      	itet	hi
 801dee4:	3b09      	subhi	r3, #9
 801dee6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801dee8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801deea:	f7ff ff9f 	bl	801de2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801deee:	8c23      	ldrh	r3, [r4, #32]
 801def0:	2b01      	cmp	r3, #1
 801def2:	bf9c      	itt	ls
 801def4:	3301      	addls	r3, #1
 801def6:	8423      	strhls	r3, [r4, #32]
 801def8:	8be3      	ldrh	r3, [r4, #30]
 801defa:	b90b      	cbnz	r3, 801df00 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801defc:	2302      	movs	r3, #2
 801defe:	83e3      	strh	r3, [r4, #30]
 801df00:	8be3      	ldrh	r3, [r4, #30]
 801df02:	4628      	mov	r0, r5
 801df04:	3b01      	subs	r3, #1
 801df06:	b29b      	uxth	r3, r3
 801df08:	83e3      	strh	r3, [r4, #30]
 801df0a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df0e:	8365      	strh	r5, [r4, #26]
 801df10:	bd38      	pop	{r3, r4, r5, pc}
 801df12:	bf00      	nop
 801df14:	0802f63c 	.word	0x0802f63c
 801df18:	0802f959 	.word	0x0802f959
 801df1c:	0802f645 	.word	0x0802f645

0801df20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801df20:	428a      	cmp	r2, r1
 801df22:	b538      	push	{r3, r4, r5, lr}
 801df24:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801df26:	d90c      	bls.n	801df42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801df28:	b92c      	cbnz	r4, 801df36 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801df2a:	4b1c      	ldr	r3, [pc, #112]	; (801df9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801df2c:	21e1      	movs	r1, #225	; 0xe1
 801df2e:	4a1c      	ldr	r2, [pc, #112]	; (801dfa0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801df30:	481c      	ldr	r0, [pc, #112]	; (801dfa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801df32:	f00c ffe9 	bl	802af08 <__assert_func>
 801df36:	3c01      	subs	r4, #1
 801df38:	4b1b      	ldr	r3, [pc, #108]	; (801dfa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801df3a:	4a1c      	ldr	r2, [pc, #112]	; (801dfac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801df3c:	21c5      	movs	r1, #197	; 0xc5
 801df3e:	8704      	strh	r4, [r0, #56]	; 0x38
 801df40:	e7f6      	b.n	801df30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801df42:	428c      	cmp	r4, r1
 801df44:	d203      	bcs.n	801df4e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801df46:	4b1a      	ldr	r3, [pc, #104]	; (801dfb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801df48:	21cb      	movs	r1, #203	; 0xcb
 801df4a:	4a1a      	ldr	r2, [pc, #104]	; (801dfb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801df4c:	e7f0      	b.n	801df30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801df4e:	1a64      	subs	r4, r4, r1
 801df50:	250a      	movs	r5, #10
 801df52:	8704      	strh	r4, [r0, #56]	; 0x38
 801df54:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801df56:	4421      	add	r1, r4
 801df58:	b289      	uxth	r1, r1
 801df5a:	2909      	cmp	r1, #9
 801df5c:	bf88      	it	hi
 801df5e:	390a      	subhi	r1, #10
 801df60:	86c1      	strh	r1, [r0, #54]	; 0x36
 801df62:	b1ba      	cbz	r2, 801df94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801df64:	3a01      	subs	r2, #1
 801df66:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801df68:	b292      	uxth	r2, r2
 801df6a:	2909      	cmp	r1, #9
 801df6c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801df70:	d903      	bls.n	801df7a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801df72:	4b11      	ldr	r3, [pc, #68]	; (801dfb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801df74:	21e6      	movs	r1, #230	; 0xe6
 801df76:	4a11      	ldr	r2, [pc, #68]	; (801dfbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801df78:	e7da      	b.n	801df30 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801df7a:	3101      	adds	r1, #1
 801df7c:	8701      	strh	r1, [r0, #56]	; 0x38
 801df7e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801df80:	b901      	cbnz	r1, 801df84 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801df82:	86c5      	strh	r5, [r0, #54]	; 0x36
 801df84:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801df86:	3901      	subs	r1, #1
 801df88:	b289      	uxth	r1, r1
 801df8a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801df8c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801df90:	844c      	strh	r4, [r1, #34]	; 0x22
 801df92:	e7e6      	b.n	801df62 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801df94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df98:	f7ff bf48 	b.w	801de2c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801df9c:	0802f63c 	.word	0x0802f63c
 801dfa0:	0802f732 	.word	0x0802f732
 801dfa4:	0802f645 	.word	0x0802f645
 801dfa8:	0802f67d 	.word	0x0802f67d
 801dfac:	0802f7dc 	.word	0x0802f7dc
 801dfb0:	0802f68b 	.word	0x0802f68b
 801dfb4:	0802fab3 	.word	0x0802fab3
 801dfb8:	0802f697 	.word	0x0802f697
 801dfbc:	0802f6aa 	.word	0x0802f6aa

0801dfc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801dfc0:	3a01      	subs	r2, #1
 801dfc2:	b570      	push	{r4, r5, r6, lr}
 801dfc4:	b292      	uxth	r2, r2
 801dfc6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801dfca:	42b2      	cmp	r2, r6
 801dfcc:	d019      	beq.n	801e002 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801dfce:	8c04      	ldrh	r4, [r0, #32]
 801dfd0:	f831 5b02 	ldrh.w	r5, [r1], #2
 801dfd4:	4294      	cmp	r4, r2
 801dfd6:	d805      	bhi.n	801dfe4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801dfd8:	4b19      	ldr	r3, [pc, #100]	; (801e040 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801dfda:	4a1a      	ldr	r2, [pc, #104]	; (801e044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801dfdc:	21c5      	movs	r1, #197	; 0xc5
 801dfde:	481a      	ldr	r0, [pc, #104]	; (801e048 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801dfe0:	f00c ff92 	bl	802af08 <__assert_func>
 801dfe4:	8bc4      	ldrh	r4, [r0, #30]
 801dfe6:	4414      	add	r4, r2
 801dfe8:	3a01      	subs	r2, #1
 801dfea:	b2a4      	uxth	r4, r4
 801dfec:	b292      	uxth	r2, r2
 801dfee:	2c01      	cmp	r4, #1
 801dff0:	bf88      	it	hi
 801dff2:	3c02      	subhi	r4, #2
 801dff4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801dff8:	8b64      	ldrh	r4, [r4, #26]
 801dffa:	42ac      	cmp	r4, r5
 801dffc:	d0e5      	beq.n	801dfca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801dffe:	2000      	movs	r0, #0
 801e000:	bd70      	pop	{r4, r5, r6, pc}
 801e002:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e006:	2400      	movs	r4, #0
 801e008:	4413      	add	r3, r2
 801e00a:	b2a2      	uxth	r2, r4
 801e00c:	429a      	cmp	r2, r3
 801e00e:	da14      	bge.n	801e03a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e010:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801e012:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e016:	4296      	cmp	r6, r2
 801e018:	d802      	bhi.n	801e020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e01a:	4b09      	ldr	r3, [pc, #36]	; (801e040 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e01c:	4a0b      	ldr	r2, [pc, #44]	; (801e04c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e01e:	e7dd      	b.n	801dfdc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e020:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801e022:	3401      	adds	r4, #1
 801e024:	4432      	add	r2, r6
 801e026:	b292      	uxth	r2, r2
 801e028:	2a09      	cmp	r2, #9
 801e02a:	bf88      	it	hi
 801e02c:	3a0a      	subhi	r2, #10
 801e02e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e032:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801e034:	42aa      	cmp	r2, r5
 801e036:	d0e8      	beq.n	801e00a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e038:	e7e1      	b.n	801dffe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e03a:	2001      	movs	r0, #1
 801e03c:	e7e0      	b.n	801e000 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e03e:	bf00      	nop
 801e040:	0802f67d 	.word	0x0802f67d
 801e044:	0802fb37 	.word	0x0802fb37
 801e048:	0802f645 	.word	0x0802f645
 801e04c:	0802f7dc 	.word	0x0802f7dc

0801e050 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e054:	4605      	mov	r5, r0
 801e056:	4616      	mov	r6, r2
 801e058:	1c8c      	adds	r4, r1, #2
 801e05a:	8809      	ldrh	r1, [r1, #0]
 801e05c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e060:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e064:	42b3      	cmp	r3, r6
 801e066:	d124      	bne.n	801e0b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e068:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e06c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e070:	f001 070f 	and.w	r7, r1, #15
 801e074:	4652      	mov	r2, sl
 801e076:	f8cd 8000 	str.w	r8, [sp]
 801e07a:	464b      	mov	r3, r9
 801e07c:	4621      	mov	r1, r4
 801e07e:	4628      	mov	r0, r5
 801e080:	f7ff ff9e 	bl	801dfc0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e084:	4683      	mov	fp, r0
 801e086:	b168      	cbz	r0, 801e0a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e088:	eb0a 0109 	add.w	r1, sl, r9
 801e08c:	463a      	mov	r2, r7
 801e08e:	4628      	mov	r0, r5
 801e090:	4441      	add	r1, r8
 801e092:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e096:	4649      	mov	r1, r9
 801e098:	f7ff ff42 	bl	801df20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e09c:	4658      	mov	r0, fp
 801e09e:	b003      	add	sp, #12
 801e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0a4:	eb07 010a 	add.w	r1, r7, sl
 801e0a8:	4449      	add	r1, r9
 801e0aa:	4441      	add	r1, r8
 801e0ac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e0b0:	e7d2      	b.n	801e058 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e0b2:	f04f 0b00 	mov.w	fp, #0
 801e0b6:	e7f1      	b.n	801e09c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e0b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e0b8:	b570      	push	{r4, r5, r6, lr}
 801e0ba:	8810      	ldrh	r0, [r2, #0]
 801e0bc:	4298      	cmp	r0, r3
 801e0be:	d817      	bhi.n	801e0f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0c0:	1e48      	subs	r0, r1, #1
 801e0c2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e0c6:	4298      	cmp	r0, r3
 801e0c8:	d312      	bcc.n	801e0f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0ca:	2400      	movs	r4, #0
 801e0cc:	428c      	cmp	r4, r1
 801e0ce:	d20f      	bcs.n	801e0f0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e0d0:	1860      	adds	r0, r4, r1
 801e0d2:	1040      	asrs	r0, r0, #1
 801e0d4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e0d8:	0085      	lsls	r5, r0, #2
 801e0da:	42b3      	cmp	r3, r6
 801e0dc:	d902      	bls.n	801e0e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e0de:	3001      	adds	r0, #1
 801e0e0:	b284      	uxth	r4, r0
 801e0e2:	e7f3      	b.n	801e0cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0e4:	d201      	bcs.n	801e0ea <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e0e6:	b281      	uxth	r1, r0
 801e0e8:	e7f0      	b.n	801e0cc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e0ea:	442a      	add	r2, r5
 801e0ec:	8850      	ldrh	r0, [r2, #2]
 801e0ee:	bd70      	pop	{r4, r5, r6, pc}
 801e0f0:	2000      	movs	r0, #0
 801e0f2:	e7fc      	b.n	801e0ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e0f4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0f8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801e0fa:	4604      	mov	r4, r0
 801e0fc:	260b      	movs	r6, #11
 801e0fe:	886f      	ldrh	r7, [r5, #2]
 801e100:	087f      	lsrs	r7, r7, #1
 801e102:	3e01      	subs	r6, #1
 801e104:	d01b      	beq.n	801e13e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e106:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801e108:	b92b      	cbnz	r3, 801e116 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e10a:	4b0e      	ldr	r3, [pc, #56]	; (801e144 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e10c:	21c0      	movs	r1, #192	; 0xc0
 801e10e:	4a0e      	ldr	r2, [pc, #56]	; (801e148 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e110:	480e      	ldr	r0, [pc, #56]	; (801e14c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e112:	f00c fef9 	bl	802af08 <__assert_func>
 801e116:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801e118:	462a      	mov	r2, r5
 801e11a:	4639      	mov	r1, r7
 801e11c:	4620      	mov	r0, r4
 801e11e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e122:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801e126:	4643      	mov	r3, r8
 801e128:	f7ff ffc6 	bl	801e0b8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e12c:	b138      	cbz	r0, 801e13e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e12e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e132:	4642      	mov	r2, r8
 801e134:	4620      	mov	r0, r4
 801e136:	f7ff ff8b 	bl	801e050 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e13a:	2800      	cmp	r0, #0
 801e13c:	d1e1      	bne.n	801e102 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e142:	bf00      	nop
 801e144:	0802f63c 	.word	0x0802f63c
 801e148:	0802f8ae 	.word	0x0802f8ae
 801e14c:	0802f645 	.word	0x0802f645

0801e150 <_ZN8touchgfx8ceil28_4El>:
 801e150:	f110 030f 	adds.w	r3, r0, #15
 801e154:	d401      	bmi.n	801e15a <_ZN8touchgfx8ceil28_4El+0xa>
 801e156:	1118      	asrs	r0, r3, #4
 801e158:	4770      	bx	lr
 801e15a:	2210      	movs	r2, #16
 801e15c:	f1c0 0001 	rsb	r0, r0, #1
 801e160:	fb93 f3f2 	sdiv	r3, r3, r2
 801e164:	f010 000f 	ands.w	r0, r0, #15
 801e168:	bf18      	it	ne
 801e16a:	2001      	movne	r0, #1
 801e16c:	1a18      	subs	r0, r3, r0
 801e16e:	4770      	bx	lr

0801e170 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801e170:	2900      	cmp	r1, #0
 801e172:	b538      	push	{r3, r4, r5, lr}
 801e174:	dc05      	bgt.n	801e182 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801e176:	4b0f      	ldr	r3, [pc, #60]	; (801e1b4 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801e178:	21f7      	movs	r1, #247	; 0xf7
 801e17a:	4a0f      	ldr	r2, [pc, #60]	; (801e1b8 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801e17c:	480f      	ldr	r0, [pc, #60]	; (801e1bc <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801e17e:	f00c fec3 	bl	802af08 <__assert_func>
 801e182:	2800      	cmp	r0, #0
 801e184:	db06      	blt.n	801e194 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801e186:	fb90 f4f1 	sdiv	r4, r0, r1
 801e18a:	fb01 0114 	mls	r1, r1, r4, r0
 801e18e:	6014      	str	r4, [r2, #0]
 801e190:	6019      	str	r1, [r3, #0]
 801e192:	bd38      	pop	{r3, r4, r5, pc}
 801e194:	4240      	negs	r0, r0
 801e196:	fb90 f4f1 	sdiv	r4, r0, r1
 801e19a:	4265      	negs	r5, r4
 801e19c:	fb01 0014 	mls	r0, r1, r4, r0
 801e1a0:	6015      	str	r5, [r2, #0]
 801e1a2:	6018      	str	r0, [r3, #0]
 801e1a4:	2800      	cmp	r0, #0
 801e1a6:	d0f4      	beq.n	801e192 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801e1a8:	6810      	ldr	r0, [r2, #0]
 801e1aa:	3801      	subs	r0, #1
 801e1ac:	6010      	str	r0, [r2, #0]
 801e1ae:	6818      	ldr	r0, [r3, #0]
 801e1b0:	1a09      	subs	r1, r1, r0
 801e1b2:	e7ed      	b.n	801e190 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801e1b4:	0802fc08 	.word	0x0802fc08
 801e1b8:	0802fc47 	.word	0x0802fc47
 801e1bc:	0802fc18 	.word	0x0802fc18

0801e1c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e1c0:	b570      	push	{r4, r5, r6, lr}
 801e1c2:	694a      	ldr	r2, [r1, #20]
 801e1c4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801e1c6:	684b      	ldr	r3, [r1, #4]
 801e1c8:	1b54      	subs	r4, r2, r5
 801e1ca:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801e1cc:	f000 8106 	beq.w	801e3dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e1d0:	1b9b      	subs	r3, r3, r6
 801e1d2:	d003      	beq.n	801e1dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e1d4:	4363      	muls	r3, r4
 801e1d6:	2210      	movs	r2, #16
 801e1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 801e1dc:	680c      	ldr	r4, [r1, #0]
 801e1de:	698a      	ldr	r2, [r1, #24]
 801e1e0:	1b65      	subs	r5, r4, r5
 801e1e2:	f000 80fd 	beq.w	801e3e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e1e6:	1b92      	subs	r2, r2, r6
 801e1e8:	d003      	beq.n	801e1f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e1ea:	436a      	muls	r2, r5
 801e1ec:	2410      	movs	r4, #16
 801e1ee:	fb92 f2f4 	sdiv	r2, r2, r4
 801e1f2:	1a9b      	subs	r3, r3, r2
 801e1f4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801e41c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e1f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e1fc:	460a      	mov	r2, r1
 801e1fe:	ee07 3a90 	vmov	s15, r3
 801e202:	f100 040c 	add.w	r4, r0, #12
 801e206:	4603      	mov	r3, r0
 801e208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e20c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e210:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e214:	eeb1 6a43 	vneg.f32	s12, s6
 801e218:	edd2 7a02 	vldr	s15, [r2, #8]
 801e21c:	3214      	adds	r2, #20
 801e21e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e222:	ece3 6a01 	vstmia	r3!, {s13}
 801e226:	429c      	cmp	r4, r3
 801e228:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e22c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e230:	edc3 7a02 	vstr	s15, [r3, #8]
 801e234:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e238:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e23c:	edc3 7a05 	vstr	s15, [r3, #20]
 801e240:	d1ea      	bne.n	801e218 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e242:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e244:	698b      	ldr	r3, [r1, #24]
 801e246:	edd0 4a02 	vldr	s9, [r0, #8]
 801e24a:	1a9b      	subs	r3, r3, r2
 801e24c:	edd0 3a00 	vldr	s7, [r0]
 801e250:	edd0 6a01 	vldr	s13, [r0, #4]
 801e254:	ee07 3a90 	vmov	s15, r3
 801e258:	684b      	ldr	r3, [r1, #4]
 801e25a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e25e:	ed90 5a05 	vldr	s10, [r0, #20]
 801e262:	1a9b      	subs	r3, r3, r2
 801e264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e268:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e26c:	ed90 2a03 	vldr	s4, [r0, #12]
 801e270:	ee07 3a10 	vmov	s14, r3
 801e274:	edd0 5a04 	vldr	s11, [r0, #16]
 801e278:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e27c:	ed90 1a07 	vldr	s2, [r0, #28]
 801e280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e284:	edd0 2a06 	vldr	s5, [r0, #24]
 801e288:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e28c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e290:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e294:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e298:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e29c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e2a0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801e2a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e2a6:	694a      	ldr	r2, [r1, #20]
 801e2a8:	1b13      	subs	r3, r2, r4
 801e2aa:	ee07 3a10 	vmov	s14, r3
 801e2ae:	680b      	ldr	r3, [r1, #0]
 801e2b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2b4:	1b1b      	subs	r3, r3, r4
 801e2b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e2ba:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e2be:	ee07 3a10 	vmov	s14, r3
 801e2c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2c6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e2ca:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e2ce:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e2d2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801e2d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e2d8:	698b      	ldr	r3, [r1, #24]
 801e2da:	1a9b      	subs	r3, r3, r2
 801e2dc:	ee06 3a90 	vmov	s13, r3
 801e2e0:	684b      	ldr	r3, [r1, #4]
 801e2e2:	1a9b      	subs	r3, r3, r2
 801e2e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e2e8:	ee07 3a10 	vmov	s14, r3
 801e2ec:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e2f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2f4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e2f8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e2fc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e300:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e304:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801e308:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e30a:	694a      	ldr	r2, [r1, #20]
 801e30c:	1b13      	subs	r3, r2, r4
 801e30e:	ee07 3a10 	vmov	s14, r3
 801e312:	680b      	ldr	r3, [r1, #0]
 801e314:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e318:	1b1b      	subs	r3, r3, r4
 801e31a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e31e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e322:	ee07 3a10 	vmov	s14, r3
 801e326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e32a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e32e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e332:	edd0 5a08 	vldr	s11, [r0, #32]
 801e336:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e33a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e33e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e342:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801e346:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801e348:	698b      	ldr	r3, [r1, #24]
 801e34a:	1a9b      	subs	r3, r3, r2
 801e34c:	ee07 3a10 	vmov	s14, r3
 801e350:	684b      	ldr	r3, [r1, #4]
 801e352:	1a9b      	subs	r3, r3, r2
 801e354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e358:	ee01 3a90 	vmov	s3, r3
 801e35c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e360:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e364:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e368:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e36c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e370:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e374:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801e378:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e37a:	694a      	ldr	r2, [r1, #20]
 801e37c:	1b13      	subs	r3, r2, r4
 801e37e:	ee03 3a10 	vmov	s6, r3
 801e382:	680b      	ldr	r3, [r1, #0]
 801e384:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e388:	1b1b      	subs	r3, r3, r4
 801e38a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e38e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e392:	ee03 3a10 	vmov	s6, r3
 801e396:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e39a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e39e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e3a2:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e3a6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e3aa:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801e3ae:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e3b2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3ba:	dd13      	ble.n	801e3e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e3bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e3c0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e3c4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801e3c6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e3ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d2:	dd15      	ble.n	801e400 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e3d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e3d8:	6403      	str	r3, [r0, #64]	; 0x40
 801e3da:	bd70      	pop	{r4, r5, r6, pc}
 801e3dc:	4623      	mov	r3, r4
 801e3de:	e6fd      	b.n	801e1dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e3e0:	462a      	mov	r2, r5
 801e3e2:	e706      	b.n	801e1f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e3e4:	d502      	bpl.n	801e3ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e3e6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e3ea:	e7e9      	b.n	801e3c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e3ec:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e3f0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e3f4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3fc:	dade      	bge.n	801e3bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e3fe:	e7f2      	b.n	801e3e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e400:	d502      	bpl.n	801e408 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e402:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e406:	e7e7      	b.n	801e3d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e408:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e40c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e410:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e418:	dadc      	bge.n	801e3d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e41a:	e7f2      	b.n	801e402 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e41c:	3d800000 	.word	0x3d800000

0801e420 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e420:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e424:	f04f 0814 	mov.w	r8, #20
 801e428:	4604      	mov	r4, r0
 801e42a:	4617      	mov	r7, r2
 801e42c:	460d      	mov	r5, r1
 801e42e:	fb08 f903 	mul.w	r9, r8, r3
 801e432:	461e      	mov	r6, r3
 801e434:	eb02 0a09 	add.w	sl, r2, r9
 801e438:	f8da 0004 	ldr.w	r0, [sl, #4]
 801e43c:	f7ff fe88 	bl	801e150 <_ZN8touchgfx8ceil28_4El>
 801e440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e442:	6160      	str	r0, [r4, #20]
 801e444:	fb08 f803 	mul.w	r8, r8, r3
 801e448:	9001      	str	r0, [sp, #4]
 801e44a:	eb07 0b08 	add.w	fp, r7, r8
 801e44e:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e452:	f7ff fe7d 	bl	801e150 <_ZN8touchgfx8ceil28_4El>
 801e456:	9a01      	ldr	r2, [sp, #4]
 801e458:	1a80      	subs	r0, r0, r2
 801e45a:	61a0      	str	r0, [r4, #24]
 801e45c:	2800      	cmp	r0, #0
 801e45e:	f000 8088 	beq.w	801e572 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801e462:	f857 3009 	ldr.w	r3, [r7, r9]
 801e466:	f857 c008 	ldr.w	ip, [r7, r8]
 801e46a:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e46e:	ebac 0c03 	sub.w	ip, ip, r3
 801e472:	f8da 1004 	ldr.w	r1, [sl, #4]
 801e476:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801e47a:	1a40      	subs	r0, r0, r1
 801e47c:	fb0b f202 	mul.w	r2, fp, r2
 801e480:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801e484:	fb0c 2211 	mls	r2, ip, r1, r2
 801e488:	4641      	mov	r1, r8
 801e48a:	fb00 2003 	mla	r0, r0, r3, r2
 801e48e:	f104 0310 	add.w	r3, r4, #16
 801e492:	4622      	mov	r2, r4
 801e494:	3801      	subs	r0, #1
 801e496:	4440      	add	r0, r8
 801e498:	f7ff fe6a 	bl	801e170 <_ZN8touchgfx11floorDivModEllRlS0_>
 801e49c:	f104 0308 	add.w	r3, r4, #8
 801e4a0:	1d22      	adds	r2, r4, #4
 801e4a2:	4641      	mov	r1, r8
 801e4a4:	4658      	mov	r0, fp
 801e4a6:	f7ff fe63 	bl	801e170 <_ZN8touchgfx11floorDivModEllRlS0_>
 801e4aa:	f8c4 800c 	str.w	r8, [r4, #12]
 801e4ae:	6962      	ldr	r2, [r4, #20]
 801e4b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e4b4:	eddf 6a31 	vldr	s13, [pc, #196]	; 801e57c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e4b8:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e4bc:	6822      	ldr	r2, [r4, #0]
 801e4be:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801e4c2:	ee07 3a10 	vmov	s14, r3
 801e4c6:	f857 3009 	ldr.w	r3, [r7, r9]
 801e4ca:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e4ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e4d2:	ee07 3a90 	vmov	s15, r3
 801e4d6:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801e4da:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e4e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e4e6:	edd3 6a00 	vldr	s13, [r3]
 801e4ea:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e4ee:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801e4f2:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e4f6:	edc4 6a07 	vstr	s13, [r4, #28]
 801e4fa:	edd4 6a01 	vldr	s13, [r4, #4]
 801e4fe:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801e502:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e506:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801e50a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e50e:	ed84 6a08 	vstr	s12, [r4, #32]
 801e512:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801e514:	6262      	str	r2, [r4, #36]	; 0x24
 801e516:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801e51a:	ed93 6a03 	vldr	s12, [r3, #12]
 801e51e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e522:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801e526:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e52a:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801e52e:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801e532:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801e536:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e53a:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801e53e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801e540:	6322      	str	r2, [r4, #48]	; 0x30
 801e542:	ed93 6a06 	vldr	s12, [r3, #24]
 801e546:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801e54a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e54e:	eeb0 7a46 	vmov.f32	s14, s12
 801e552:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801e556:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e55a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801e55e:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801e562:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801e566:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e56a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801e56e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801e570:	63e3      	str	r3, [r4, #60]	; 0x3c
 801e572:	4620      	mov	r0, r4
 801e574:	b003      	add	sp, #12
 801e576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e57a:	bf00      	nop
 801e57c:	3d800000 	.word	0x3d800000

0801e580 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e580:	4602      	mov	r2, r0
 801e582:	b148      	cbz	r0, 801e598 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e584:	2300      	movs	r3, #0
 801e586:	b298      	uxth	r0, r3
 801e588:	3301      	adds	r3, #1
 801e58a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e58e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e592:	2900      	cmp	r1, #0
 801e594:	d1f7      	bne.n	801e586 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e596:	4770      	bx	lr
 801e598:	4770      	bx	lr

0801e59a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e59a:	b530      	push	{r4, r5, lr}
 801e59c:	4604      	mov	r4, r0
 801e59e:	b159      	cbz	r1, 801e5b8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e5a0:	b148      	cbz	r0, 801e5b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e5a2:	2300      	movs	r3, #0
 801e5a4:	b298      	uxth	r0, r3
 801e5a6:	4282      	cmp	r2, r0
 801e5a8:	d905      	bls.n	801e5b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e5aa:	5ccd      	ldrb	r5, [r1, r3]
 801e5ac:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e5b0:	3301      	adds	r3, #1
 801e5b2:	2d00      	cmp	r5, #0
 801e5b4:	d1f6      	bne.n	801e5a4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e5b6:	bd30      	pop	{r4, r5, pc}
 801e5b8:	4608      	mov	r0, r1
 801e5ba:	e7fc      	b.n	801e5b6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e5bc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5be:	468c      	mov	ip, r1
 801e5c0:	b08b      	sub	sp, #44	; 0x2c
 801e5c2:	2100      	movs	r1, #0
 801e5c4:	ae01      	add	r6, sp, #4
 801e5c6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e5ca:	211f      	movs	r1, #31
 801e5cc:	fbb0 f7f3 	udiv	r7, r0, r3
 801e5d0:	fb03 0517 	mls	r5, r3, r7, r0
 801e5d4:	4638      	mov	r0, r7
 801e5d6:	b2ec      	uxtb	r4, r5
 801e5d8:	2d09      	cmp	r5, #9
 801e5da:	bfd4      	ite	le
 801e5dc:	3430      	addle	r4, #48	; 0x30
 801e5de:	3457      	addgt	r4, #87	; 0x57
 801e5e0:	b2e4      	uxtb	r4, r4
 801e5e2:	558c      	strb	r4, [r1, r6]
 801e5e4:	1e4c      	subs	r4, r1, #1
 801e5e6:	b92f      	cbnz	r7, 801e5f4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e5e8:	4431      	add	r1, r6
 801e5ea:	4660      	mov	r0, ip
 801e5ec:	f7ff ffd5 	bl	801e59a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e5f0:	b00b      	add	sp, #44	; 0x2c
 801e5f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5f4:	4621      	mov	r1, r4
 801e5f6:	e7e9      	b.n	801e5cc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e5f8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5fa:	4607      	mov	r7, r0
 801e5fc:	b08b      	sub	sp, #44	; 0x2c
 801e5fe:	4608      	mov	r0, r1
 801e600:	b341      	cbz	r1, 801e654 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e602:	1e99      	subs	r1, r3, #2
 801e604:	2922      	cmp	r1, #34	; 0x22
 801e606:	d825      	bhi.n	801e654 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e608:	2100      	movs	r1, #0
 801e60a:	463c      	mov	r4, r7
 801e60c:	261f      	movs	r6, #31
 801e60e:	f10d 0c04 	add.w	ip, sp, #4
 801e612:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801e616:	1e71      	subs	r1, r6, #1
 801e618:	fb94 fef3 	sdiv	lr, r4, r3
 801e61c:	fb03 441e 	mls	r4, r3, lr, r4
 801e620:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e624:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e628:	b2ec      	uxtb	r4, r5
 801e62a:	2d09      	cmp	r5, #9
 801e62c:	bfd4      	ite	le
 801e62e:	3430      	addle	r4, #48	; 0x30
 801e630:	3457      	addgt	r4, #87	; 0x57
 801e632:	b2e4      	uxtb	r4, r4
 801e634:	f80c 4006 	strb.w	r4, [ip, r6]
 801e638:	4674      	mov	r4, lr
 801e63a:	b96c      	cbnz	r4, 801e658 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e63c:	2f00      	cmp	r7, #0
 801e63e:	da05      	bge.n	801e64c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e640:	ab0a      	add	r3, sp, #40	; 0x28
 801e642:	4419      	add	r1, r3
 801e644:	232d      	movs	r3, #45	; 0x2d
 801e646:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e64a:	1eb1      	subs	r1, r6, #2
 801e64c:	3101      	adds	r1, #1
 801e64e:	4461      	add	r1, ip
 801e650:	f7ff ffa3 	bl	801e59a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e654:	b00b      	add	sp, #44	; 0x2c
 801e656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e658:	460e      	mov	r6, r1
 801e65a:	e7dc      	b.n	801e616 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e65c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e660:	b085      	sub	sp, #20
 801e662:	4691      	mov	r9, r2
 801e664:	6802      	ldr	r2, [r0, #0]
 801e666:	4688      	mov	r8, r1
 801e668:	461c      	mov	r4, r3
 801e66a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801e66e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801e672:	4683      	mov	fp, r0
 801e674:	4610      	mov	r0, r2
 801e676:	9103      	str	r1, [sp, #12]
 801e678:	9302      	str	r3, [sp, #8]
 801e67a:	9201      	str	r2, [sp, #4]
 801e67c:	f7ff ff80 	bl	801e580 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e680:	f1b8 0f00 	cmp.w	r8, #0
 801e684:	bf0c      	ite	eq
 801e686:	4684      	moveq	ip, r0
 801e688:	f100 0c01 	addne.w	ip, r0, #1
 801e68c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801e690:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801e694:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e696:	fa1f fc8c 	uxth.w	ip, ip
 801e69a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e69c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801e6a0:	9903      	ldr	r1, [sp, #12]
 801e6a2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e6a6:	d041      	beq.n	801e72c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e6a8:	d834      	bhi.n	801e714 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e6aa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801e6ae:	d059      	beq.n	801e764 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e6b0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801e6b4:	d03a      	beq.n	801e72c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e6b6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801e6ba:	d034      	beq.n	801e726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e6bc:	2400      	movs	r4, #0
 801e6be:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801e6c2:	3a01      	subs	r2, #1
 801e6c4:	b169      	cbz	r1, 801e6e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e6c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e6c8:	458c      	cmp	ip, r1
 801e6ca:	da09      	bge.n	801e6e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e6cc:	eba1 010c 	sub.w	r1, r1, ip
 801e6d0:	b289      	uxth	r1, r1
 801e6d2:	b933      	cbnz	r3, 801e6e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e6d4:	2e00      	cmp	r6, #0
 801e6d6:	d051      	beq.n	801e77c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e6d8:	2800      	cmp	r0, #0
 801e6da:	d04f      	beq.n	801e77c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e6dc:	440c      	add	r4, r1
 801e6de:	b2a4      	uxth	r4, r4
 801e6e0:	2100      	movs	r1, #0
 801e6e2:	682b      	ldr	r3, [r5, #0]
 801e6e4:	4293      	cmp	r3, r2
 801e6e6:	da07      	bge.n	801e6f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e6e8:	f1b8 0f00 	cmp.w	r8, #0
 801e6ec:	d004      	beq.n	801e6f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e6ee:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e6f2:	682b      	ldr	r3, [r5, #0]
 801e6f4:	3301      	adds	r3, #1
 801e6f6:	602b      	str	r3, [r5, #0]
 801e6f8:	2730      	movs	r7, #48	; 0x30
 801e6fa:	2c00      	cmp	r4, #0
 801e6fc:	d04e      	beq.n	801e79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e6fe:	682e      	ldr	r6, [r5, #0]
 801e700:	3c01      	subs	r4, #1
 801e702:	42b2      	cmp	r2, r6
 801e704:	b2a4      	uxth	r4, r4
 801e706:	dd49      	ble.n	801e79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e708:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e70c:	682b      	ldr	r3, [r5, #0]
 801e70e:	3301      	adds	r3, #1
 801e710:	602b      	str	r3, [r5, #0]
 801e712:	e7f2      	b.n	801e6fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e714:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801e718:	d01d      	beq.n	801e756 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e71a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801e71e:	d002      	beq.n	801e726 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e720:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801e724:	e7c9      	b.n	801e6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e726:	4684      	mov	ip, r0
 801e728:	f04f 0800 	mov.w	r8, #0
 801e72c:	2c00      	cmp	r4, #0
 801e72e:	d0c6      	beq.n	801e6be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e730:	b947      	cbnz	r7, 801e744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e732:	2801      	cmp	r0, #1
 801e734:	d106      	bne.n	801e744 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e736:	8814      	ldrh	r4, [r2, #0]
 801e738:	2c30      	cmp	r4, #48	; 0x30
 801e73a:	bf02      	ittt	eq
 801e73c:	3202      	addeq	r2, #2
 801e73e:	4638      	moveq	r0, r7
 801e740:	f8cb 2000 	streq.w	r2, [fp]
 801e744:	45bc      	cmp	ip, r7
 801e746:	da14      	bge.n	801e772 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e748:	b2bf      	uxth	r7, r7
 801e74a:	eba7 040c 	sub.w	r4, r7, ip
 801e74e:	46bc      	mov	ip, r7
 801e750:	b2a4      	uxth	r4, r4
 801e752:	2600      	movs	r6, #0
 801e754:	e7b3      	b.n	801e6be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e756:	4684      	mov	ip, r0
 801e758:	b16c      	cbz	r4, 801e776 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e75a:	42b8      	cmp	r0, r7
 801e75c:	dd00      	ble.n	801e760 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e75e:	b2b8      	uxth	r0, r7
 801e760:	2400      	movs	r4, #0
 801e762:	e003      	b.n	801e76c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e764:	f04f 0c01 	mov.w	ip, #1
 801e768:	2400      	movs	r4, #0
 801e76a:	4660      	mov	r0, ip
 801e76c:	4626      	mov	r6, r4
 801e76e:	46a0      	mov	r8, r4
 801e770:	e7a5      	b.n	801e6be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e772:	2400      	movs	r4, #0
 801e774:	e7ed      	b.n	801e752 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e776:	4626      	mov	r6, r4
 801e778:	46a0      	mov	r8, r4
 801e77a:	e7a0      	b.n	801e6be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e77c:	2900      	cmp	r1, #0
 801e77e:	d0b0      	beq.n	801e6e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e780:	2720      	movs	r7, #32
 801e782:	682e      	ldr	r6, [r5, #0]
 801e784:	2900      	cmp	r1, #0
 801e786:	d0ac      	beq.n	801e6e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e788:	3901      	subs	r1, #1
 801e78a:	4296      	cmp	r6, r2
 801e78c:	b289      	uxth	r1, r1
 801e78e:	daa7      	bge.n	801e6e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e790:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e794:	682b      	ldr	r3, [r5, #0]
 801e796:	3301      	adds	r3, #1
 801e798:	602b      	str	r3, [r5, #0]
 801e79a:	e7f2      	b.n	801e782 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e79c:	b188      	cbz	r0, 801e7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e79e:	682b      	ldr	r3, [r5, #0]
 801e7a0:	3801      	subs	r0, #1
 801e7a2:	429a      	cmp	r2, r3
 801e7a4:	b280      	uxth	r0, r0
 801e7a6:	dd0c      	ble.n	801e7c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e7a8:	f8db 3000 	ldr.w	r3, [fp]
 801e7ac:	1c9c      	adds	r4, r3, #2
 801e7ae:	f8cb 4000 	str.w	r4, [fp]
 801e7b2:	881c      	ldrh	r4, [r3, #0]
 801e7b4:	682b      	ldr	r3, [r5, #0]
 801e7b6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e7ba:	682b      	ldr	r3, [r5, #0]
 801e7bc:	3301      	adds	r3, #1
 801e7be:	602b      	str	r3, [r5, #0]
 801e7c0:	e7ec      	b.n	801e79c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e7c2:	2620      	movs	r6, #32
 801e7c4:	b151      	cbz	r1, 801e7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e7c6:	6828      	ldr	r0, [r5, #0]
 801e7c8:	3901      	subs	r1, #1
 801e7ca:	4282      	cmp	r2, r0
 801e7cc:	b289      	uxth	r1, r1
 801e7ce:	dd05      	ble.n	801e7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e7d0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e7d4:	682b      	ldr	r3, [r5, #0]
 801e7d6:	3301      	adds	r3, #1
 801e7d8:	602b      	str	r3, [r5, #0]
 801e7da:	e7f3      	b.n	801e7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e7dc:	b005      	add	sp, #20
 801e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e7e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e7e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e7e6:	2400      	movs	r4, #0
 801e7e8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e7ec:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801e7f0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801e7f4:	8014      	strh	r4, [r2, #0]
 801e7f6:	701c      	strb	r4, [r3, #0]
 801e7f8:	f888 4000 	strb.w	r4, [r8]
 801e7fc:	f88c 4000 	strb.w	r4, [ip]
 801e800:	f88e 4000 	strb.w	r4, [lr]
 801e804:	703c      	strb	r4, [r7, #0]
 801e806:	6804      	ldr	r4, [r0, #0]
 801e808:	b1a4      	cbz	r4, 801e834 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e80a:	8824      	ldrh	r4, [r4, #0]
 801e80c:	f04f 0901 	mov.w	r9, #1
 801e810:	b314      	cbz	r4, 801e858 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e812:	2c2b      	cmp	r4, #43	; 0x2b
 801e814:	d001      	beq.n	801e81a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e816:	2c20      	cmp	r4, #32
 801e818:	d110      	bne.n	801e83c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e81a:	8014      	strh	r4, [r2, #0]
 801e81c:	6804      	ldr	r4, [r0, #0]
 801e81e:	b10c      	cbz	r4, 801e824 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e820:	3402      	adds	r4, #2
 801e822:	6004      	str	r4, [r0, #0]
 801e824:	680c      	ldr	r4, [r1, #0]
 801e826:	b10c      	cbz	r4, 801e82c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e828:	3401      	adds	r4, #1
 801e82a:	600c      	str	r4, [r1, #0]
 801e82c:	6804      	ldr	r4, [r0, #0]
 801e82e:	b17c      	cbz	r4, 801e850 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e830:	8824      	ldrh	r4, [r4, #0]
 801e832:	e7ed      	b.n	801e810 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e834:	680c      	ldr	r4, [r1, #0]
 801e836:	b17c      	cbz	r4, 801e858 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e838:	7824      	ldrb	r4, [r4, #0]
 801e83a:	e7e7      	b.n	801e80c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e83c:	2c2d      	cmp	r4, #45	; 0x2d
 801e83e:	d102      	bne.n	801e846 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e840:	f883 9000 	strb.w	r9, [r3]
 801e844:	e7ea      	b.n	801e81c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e846:	2c23      	cmp	r4, #35	; 0x23
 801e848:	d107      	bne.n	801e85a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e84a:	f888 9000 	strb.w	r9, [r8]
 801e84e:	e7e5      	b.n	801e81c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e850:	680c      	ldr	r4, [r1, #0]
 801e852:	b10c      	cbz	r4, 801e858 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e854:	7824      	ldrb	r4, [r4, #0]
 801e856:	e7db      	b.n	801e810 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e858:	2400      	movs	r4, #0
 801e85a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801e85e:	2b09      	cmp	r3, #9
 801e860:	d901      	bls.n	801e866 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e862:	2c2a      	cmp	r4, #42	; 0x2a
 801e864:	d122      	bne.n	801e8ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e866:	2301      	movs	r3, #1
 801e868:	2c30      	cmp	r4, #48	; 0x30
 801e86a:	f88e 3000 	strb.w	r3, [lr]
 801e86e:	d10d      	bne.n	801e88c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e870:	f88c 3000 	strb.w	r3, [ip]
 801e874:	6803      	ldr	r3, [r0, #0]
 801e876:	b10b      	cbz	r3, 801e87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e878:	3302      	adds	r3, #2
 801e87a:	6003      	str	r3, [r0, #0]
 801e87c:	680b      	ldr	r3, [r1, #0]
 801e87e:	b10b      	cbz	r3, 801e884 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e880:	3301      	adds	r3, #1
 801e882:	600b      	str	r3, [r1, #0]
 801e884:	6803      	ldr	r3, [r0, #0]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d02f      	beq.n	801e8ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e88a:	881c      	ldrh	r4, [r3, #0]
 801e88c:	2c2a      	cmp	r4, #42	; 0x2a
 801e88e:	d135      	bne.n	801e8fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e890:	f04f 33ff 	mov.w	r3, #4294967295
 801e894:	6033      	str	r3, [r6, #0]
 801e896:	6803      	ldr	r3, [r0, #0]
 801e898:	b10b      	cbz	r3, 801e89e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e89a:	3302      	adds	r3, #2
 801e89c:	6003      	str	r3, [r0, #0]
 801e89e:	680b      	ldr	r3, [r1, #0]
 801e8a0:	b10b      	cbz	r3, 801e8a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e8a2:	3301      	adds	r3, #1
 801e8a4:	600b      	str	r3, [r1, #0]
 801e8a6:	6803      	ldr	r3, [r0, #0]
 801e8a8:	b31b      	cbz	r3, 801e8f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e8aa:	881c      	ldrh	r4, [r3, #0]
 801e8ac:	2c2e      	cmp	r4, #46	; 0x2e
 801e8ae:	d11a      	bne.n	801e8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8b0:	2301      	movs	r3, #1
 801e8b2:	703b      	strb	r3, [r7, #0]
 801e8b4:	6803      	ldr	r3, [r0, #0]
 801e8b6:	b10b      	cbz	r3, 801e8bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e8b8:	3302      	adds	r3, #2
 801e8ba:	6003      	str	r3, [r0, #0]
 801e8bc:	680b      	ldr	r3, [r1, #0]
 801e8be:	b10b      	cbz	r3, 801e8c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e8c0:	3301      	adds	r3, #1
 801e8c2:	600b      	str	r3, [r1, #0]
 801e8c4:	6803      	ldr	r3, [r0, #0]
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d036      	beq.n	801e938 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e8ca:	881b      	ldrh	r3, [r3, #0]
 801e8cc:	2b2a      	cmp	r3, #42	; 0x2a
 801e8ce:	d137      	bne.n	801e940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 801e8d4:	602b      	str	r3, [r5, #0]
 801e8d6:	6803      	ldr	r3, [r0, #0]
 801e8d8:	b10b      	cbz	r3, 801e8de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e8da:	3302      	adds	r3, #2
 801e8dc:	6003      	str	r3, [r0, #0]
 801e8de:	680b      	ldr	r3, [r1, #0]
 801e8e0:	b10b      	cbz	r3, 801e8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	600b      	str	r3, [r1, #0]
 801e8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e8ea:	680c      	ldr	r4, [r1, #0]
 801e8ec:	b134      	cbz	r4, 801e8fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e8ee:	7824      	ldrb	r4, [r4, #0]
 801e8f0:	e7cc      	b.n	801e88c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e8f2:	680b      	ldr	r3, [r1, #0]
 801e8f4:	2b00      	cmp	r3, #0
 801e8f6:	d0f6      	beq.n	801e8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e8f8:	781c      	ldrb	r4, [r3, #0]
 801e8fa:	e7d7      	b.n	801e8ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	220a      	movs	r2, #10
 801e900:	6033      	str	r3, [r6, #0]
 801e902:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801e906:	fa1f f38c 	uxth.w	r3, ip
 801e90a:	2b09      	cmp	r3, #9
 801e90c:	d8ce      	bhi.n	801e8ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e90e:	6833      	ldr	r3, [r6, #0]
 801e910:	fb02 c303 	mla	r3, r2, r3, ip
 801e914:	6033      	str	r3, [r6, #0]
 801e916:	6803      	ldr	r3, [r0, #0]
 801e918:	b10b      	cbz	r3, 801e91e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e91a:	3302      	adds	r3, #2
 801e91c:	6003      	str	r3, [r0, #0]
 801e91e:	680b      	ldr	r3, [r1, #0]
 801e920:	b10b      	cbz	r3, 801e926 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e922:	3301      	adds	r3, #1
 801e924:	600b      	str	r3, [r1, #0]
 801e926:	6803      	ldr	r3, [r0, #0]
 801e928:	b10b      	cbz	r3, 801e92e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e92a:	881c      	ldrh	r4, [r3, #0]
 801e92c:	e7e9      	b.n	801e902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e92e:	680c      	ldr	r4, [r1, #0]
 801e930:	2c00      	cmp	r4, #0
 801e932:	d0e6      	beq.n	801e902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e934:	7824      	ldrb	r4, [r4, #0]
 801e936:	e7e4      	b.n	801e902 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e938:	680b      	ldr	r3, [r1, #0]
 801e93a:	b10b      	cbz	r3, 801e940 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e93c:	781b      	ldrb	r3, [r3, #0]
 801e93e:	e7c5      	b.n	801e8cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e940:	2200      	movs	r2, #0
 801e942:	240a      	movs	r4, #10
 801e944:	602a      	str	r2, [r5, #0]
 801e946:	3b30      	subs	r3, #48	; 0x30
 801e948:	682a      	ldr	r2, [r5, #0]
 801e94a:	b29e      	uxth	r6, r3
 801e94c:	2e09      	cmp	r6, #9
 801e94e:	d813      	bhi.n	801e978 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e950:	fb04 3302 	mla	r3, r4, r2, r3
 801e954:	602b      	str	r3, [r5, #0]
 801e956:	6803      	ldr	r3, [r0, #0]
 801e958:	b10b      	cbz	r3, 801e95e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e95a:	3302      	adds	r3, #2
 801e95c:	6003      	str	r3, [r0, #0]
 801e95e:	680b      	ldr	r3, [r1, #0]
 801e960:	b10b      	cbz	r3, 801e966 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e962:	3301      	adds	r3, #1
 801e964:	600b      	str	r3, [r1, #0]
 801e966:	6803      	ldr	r3, [r0, #0]
 801e968:	b10b      	cbz	r3, 801e96e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e96a:	881b      	ldrh	r3, [r3, #0]
 801e96c:	e7eb      	b.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e96e:	680b      	ldr	r3, [r1, #0]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d0e8      	beq.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e974:	781b      	ldrb	r3, [r3, #0]
 801e976:	e7e6      	b.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e978:	2a06      	cmp	r2, #6
 801e97a:	bfa8      	it	ge
 801e97c:	2206      	movge	r2, #6
 801e97e:	602a      	str	r2, [r5, #0]
 801e980:	e7b1      	b.n	801e8e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e986:	b0a3      	sub	sp, #140	; 0x8c
 801e988:	2600      	movs	r6, #0
 801e98a:	4607      	mov	r7, r0
 801e98c:	4688      	mov	r8, r1
 801e98e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801e992:	4631      	mov	r1, r6
 801e994:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801e996:	4648      	mov	r0, r9
 801e998:	960d      	str	r6, [sp, #52]	; 0x34
 801e99a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e99e:	2242      	movs	r2, #66	; 0x42
 801e9a0:	f00c fcb7 	bl	802b312 <memset>
 801e9a4:	b15f      	cbz	r7, 801e9be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801e9a6:	f108 3aff 	add.w	sl, r8, #4294967295
 801e9aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e9ae:	b152      	cbz	r2, 801e9c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801e9b0:	8812      	ldrh	r2, [r2, #0]
 801e9b2:	b10a      	cbz	r2, 801e9b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e9b4:	459a      	cmp	sl, r3
 801e9b6:	dc2e      	bgt.n	801ea16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801e9b8:	2200      	movs	r2, #0
 801e9ba:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801e9be:	4638      	mov	r0, r7
 801e9c0:	b023      	add	sp, #140	; 0x8c
 801e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9c6:	9a08      	ldr	r2, [sp, #32]
 801e9c8:	2a00      	cmp	r2, #0
 801e9ca:	d0f5      	beq.n	801e9b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801e9cc:	7812      	ldrb	r2, [r2, #0]
 801e9ce:	e7f0      	b.n	801e9b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801e9d0:	2d00      	cmp	r5, #0
 801e9d2:	d0ea      	beq.n	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9d4:	782a      	ldrb	r2, [r5, #0]
 801e9d6:	b142      	cbz	r2, 801e9ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801e9d8:	2a25      	cmp	r2, #37	; 0x25
 801e9da:	d001      	beq.n	801e9e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801e9dc:	459a      	cmp	sl, r3
 801e9de:	dc08      	bgt.n	801e9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801e9e0:	f1bb 0f00 	cmp.w	fp, #0
 801e9e4:	d121      	bne.n	801ea2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801e9e6:	2d00      	cmp	r5, #0
 801e9e8:	d0df      	beq.n	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801e9ea:	782a      	ldrb	r2, [r5, #0]
 801e9ec:	f04f 0b00 	mov.w	fp, #0
 801e9f0:	e01d      	b.n	801ea2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801e9f2:	f1bb 0f00 	cmp.w	fp, #0
 801e9f6:	d077      	beq.n	801eae8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801e9f8:	f8bb 2000 	ldrh.w	r2, [fp]
 801e9fc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ea00:	f1bb 0f00 	cmp.w	fp, #0
 801ea04:	d002      	beq.n	801ea0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ea06:	f10b 0202 	add.w	r2, fp, #2
 801ea0a:	9209      	str	r2, [sp, #36]	; 0x24
 801ea0c:	b10d      	cbz	r5, 801ea12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ea0e:	3501      	adds	r5, #1
 801ea10:	9508      	str	r5, [sp, #32]
 801ea12:	3301      	adds	r3, #1
 801ea14:	930d      	str	r3, [sp, #52]	; 0x34
 801ea16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ea18:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ea1c:	f1bb 0f00 	cmp.w	fp, #0
 801ea20:	d0d6      	beq.n	801e9d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ea22:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea26:	2a00      	cmp	r2, #0
 801ea28:	d1d6      	bne.n	801e9d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ea2a:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea2e:	2a00      	cmp	r2, #0
 801ea30:	d0bb      	beq.n	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea32:	459a      	cmp	sl, r3
 801ea34:	ddb9      	ble.n	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea36:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801ea3a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801ea3e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801ea42:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801ea46:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801ea4a:	960e      	str	r6, [sp, #56]	; 0x38
 801ea4c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801ea50:	960f      	str	r6, [sp, #60]	; 0x3c
 801ea52:	f1bb 0f00 	cmp.w	fp, #0
 801ea56:	d002      	beq.n	801ea5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801ea58:	f10b 0302 	add.w	r3, fp, #2
 801ea5c:	9309      	str	r3, [sp, #36]	; 0x24
 801ea5e:	b10d      	cbz	r5, 801ea64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801ea60:	1c6b      	adds	r3, r5, #1
 801ea62:	9308      	str	r3, [sp, #32]
 801ea64:	ab0f      	add	r3, sp, #60	; 0x3c
 801ea66:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801ea6a:	a908      	add	r1, sp, #32
 801ea6c:	a809      	add	r0, sp, #36	; 0x24
 801ea6e:	9305      	str	r3, [sp, #20]
 801ea70:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ea74:	9304      	str	r3, [sp, #16]
 801ea76:	ab0e      	add	r3, sp, #56	; 0x38
 801ea78:	9303      	str	r3, [sp, #12]
 801ea7a:	ab0c      	add	r3, sp, #48	; 0x30
 801ea7c:	9302      	str	r3, [sp, #8]
 801ea7e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ea82:	9301      	str	r3, [sp, #4]
 801ea84:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ea88:	9300      	str	r3, [sp, #0]
 801ea8a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801ea8e:	f7ff fea8 	bl	801e7e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801ea92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	bfbf      	itttt	lt
 801ea98:	6823      	ldrlt	r3, [r4, #0]
 801ea9a:	3404      	addlt	r4, #4
 801ea9c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801eaa0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801eaa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	bfbe      	ittt	lt
 801eaa8:	6823      	ldrlt	r3, [r4, #0]
 801eaaa:	3404      	addlt	r4, #4
 801eaac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801eab0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801eab4:	bfb8      	it	lt
 801eab6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801eab8:	b1d9      	cbz	r1, 801eaf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801eaba:	880b      	ldrh	r3, [r1, #0]
 801eabc:	2b69      	cmp	r3, #105	; 0x69
 801eabe:	d01f      	beq.n	801eb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eac0:	d82f      	bhi.n	801eb22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801eac2:	2b58      	cmp	r3, #88	; 0x58
 801eac4:	d01c      	beq.n	801eb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eac6:	d818      	bhi.n	801eafa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801eac8:	2b25      	cmp	r3, #37	; 0x25
 801eaca:	d034      	beq.n	801eb36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801eacc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eace:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801ead2:	f1bb 0f00 	cmp.w	fp, #0
 801ead6:	f000 80b7 	beq.w	801ec48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801eada:	f8bb 5000 	ldrh.w	r5, [fp]
 801eade:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801eae2:	3301      	adds	r3, #1
 801eae4:	930d      	str	r3, [sp, #52]	; 0x34
 801eae6:	e029      	b.n	801eb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801eae8:	b10d      	cbz	r5, 801eaee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801eaea:	782a      	ldrb	r2, [r5, #0]
 801eaec:	e786      	b.n	801e9fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801eaee:	462a      	mov	r2, r5
 801eaf0:	e784      	b.n	801e9fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801eaf2:	2a00      	cmp	r2, #0
 801eaf4:	d0ea      	beq.n	801eacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eaf6:	7813      	ldrb	r3, [r2, #0]
 801eaf8:	e7e0      	b.n	801eabc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801eafa:	3b63      	subs	r3, #99	; 0x63
 801eafc:	2b01      	cmp	r3, #1
 801eafe:	d8e5      	bhi.n	801eacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb00:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801eb04:	b329      	cbz	r1, 801eb52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801eb06:	880b      	ldrh	r3, [r1, #0]
 801eb08:	2b69      	cmp	r3, #105	; 0x69
 801eb0a:	d063      	beq.n	801ebd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eb0c:	d825      	bhi.n	801eb5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801eb0e:	2b63      	cmp	r3, #99	; 0x63
 801eb10:	d038      	beq.n	801eb84 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801eb12:	2b64      	cmp	r3, #100	; 0x64
 801eb14:	d05e      	beq.n	801ebd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eb16:	2b58      	cmp	r3, #88	; 0x58
 801eb18:	d07a      	beq.n	801ec10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801eb1a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801eb1e:	4625      	mov	r5, r4
 801eb20:	e036      	b.n	801eb90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eb22:	2b73      	cmp	r3, #115	; 0x73
 801eb24:	d0ec      	beq.n	801eb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb26:	d802      	bhi.n	801eb2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801eb28:	2b6f      	cmp	r3, #111	; 0x6f
 801eb2a:	d1cf      	bne.n	801eacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb2c:	e7e8      	b.n	801eb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb2e:	2b75      	cmp	r3, #117	; 0x75
 801eb30:	d0e6      	beq.n	801eb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb32:	2b78      	cmp	r3, #120	; 0x78
 801eb34:	e7f9      	b.n	801eb2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801eb36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb38:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801eb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb3e:	b10b      	cbz	r3, 801eb44 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801eb40:	3302      	adds	r3, #2
 801eb42:	9309      	str	r3, [sp, #36]	; 0x24
 801eb44:	9b08      	ldr	r3, [sp, #32]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	f43f af2f 	beq.w	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eb4c:	3301      	adds	r3, #1
 801eb4e:	9308      	str	r3, [sp, #32]
 801eb50:	e72b      	b.n	801e9aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801eb52:	2a00      	cmp	r2, #0
 801eb54:	d0e1      	beq.n	801eb1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb56:	7813      	ldrb	r3, [r2, #0]
 801eb58:	e7d6      	b.n	801eb08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801eb5a:	2b73      	cmp	r3, #115	; 0x73
 801eb5c:	d036      	beq.n	801ebcc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801eb5e:	d807      	bhi.n	801eb70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801eb60:	2b6f      	cmp	r3, #111	; 0x6f
 801eb62:	d1da      	bne.n	801eb1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb66:	1d25      	adds	r5, r4, #4
 801eb68:	2308      	movs	r3, #8
 801eb6a:	eba8 0202 	sub.w	r2, r8, r2
 801eb6e:	e049      	b.n	801ec04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb70:	2b75      	cmp	r3, #117	; 0x75
 801eb72:	d042      	beq.n	801ebfa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801eb74:	2b78      	cmp	r3, #120	; 0x78
 801eb76:	d1d0      	bne.n	801eb1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801eb78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eb7a:	1d25      	adds	r5, r4, #4
 801eb7c:	2310      	movs	r3, #16
 801eb7e:	eba8 0202 	sub.w	r2, r8, r2
 801eb82:	e03f      	b.n	801ec04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801eb84:	7823      	ldrb	r3, [r4, #0]
 801eb86:	1d25      	adds	r5, r4, #4
 801eb88:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801eb8c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801eb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eb92:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d051      	beq.n	801ec3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801eb9a:	881a      	ldrh	r2, [r3, #0]
 801eb9c:	a80d      	add	r0, sp, #52	; 0x34
 801eb9e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801eba2:	462c      	mov	r4, r5
 801eba4:	9005      	str	r0, [sp, #20]
 801eba6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801ebaa:	9004      	str	r0, [sp, #16]
 801ebac:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ebae:	9003      	str	r0, [sp, #12]
 801ebb0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801ebb4:	9002      	str	r0, [sp, #8]
 801ebb6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ebb8:	9001      	str	r0, [sp, #4]
 801ebba:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ebbe:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ebc2:	9000      	str	r0, [sp, #0]
 801ebc4:	a810      	add	r0, sp, #64	; 0x40
 801ebc6:	f7ff fd49 	bl	801e65c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ebca:	e7b7      	b.n	801eb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ebcc:	1d25      	adds	r5, r4, #4
 801ebce:	6823      	ldr	r3, [r4, #0]
 801ebd0:	9310      	str	r3, [sp, #64]	; 0x40
 801ebd2:	e7dd      	b.n	801eb90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebd6:	230a      	movs	r3, #10
 801ebd8:	4649      	mov	r1, r9
 801ebda:	6820      	ldr	r0, [r4, #0]
 801ebdc:	eba8 0202 	sub.w	r2, r8, r2
 801ebe0:	1d25      	adds	r5, r4, #4
 801ebe2:	b292      	uxth	r2, r2
 801ebe4:	f7ff fd08 	bl	801e5f8 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ebe8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ebec:	2b2d      	cmp	r3, #45	; 0x2d
 801ebee:	d1cf      	bne.n	801eb90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ebf0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ebf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebf6:	3302      	adds	r3, #2
 801ebf8:	e7ea      	b.n	801ebd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ebfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ebfc:	1d25      	adds	r5, r4, #4
 801ebfe:	230a      	movs	r3, #10
 801ec00:	eba8 0202 	sub.w	r2, r8, r2
 801ec04:	b292      	uxth	r2, r2
 801ec06:	4649      	mov	r1, r9
 801ec08:	6820      	ldr	r0, [r4, #0]
 801ec0a:	f7ff fcd7 	bl	801e5bc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ec0e:	e7bf      	b.n	801eb90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ec12:	2310      	movs	r3, #16
 801ec14:	4649      	mov	r1, r9
 801ec16:	6820      	ldr	r0, [r4, #0]
 801ec18:	eba8 0202 	sub.w	r2, r8, r2
 801ec1c:	1d25      	adds	r5, r4, #4
 801ec1e:	b292      	uxth	r2, r2
 801ec20:	f7ff fccc 	bl	801e5bc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ec24:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801ec28:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d0af      	beq.n	801eb90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec30:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ec34:	2919      	cmp	r1, #25
 801ec36:	d8f7      	bhi.n	801ec28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec38:	3b20      	subs	r3, #32
 801ec3a:	8013      	strh	r3, [r2, #0]
 801ec3c:	e7f4      	b.n	801ec28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec3e:	9a08      	ldr	r2, [sp, #32]
 801ec40:	2a00      	cmp	r2, #0
 801ec42:	d0ab      	beq.n	801eb9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ec44:	7812      	ldrb	r2, [r2, #0]
 801ec46:	e7a9      	b.n	801eb9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801ec48:	2d00      	cmp	r5, #0
 801ec4a:	f43f af48 	beq.w	801eade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ec4e:	782d      	ldrb	r5, [r5, #0]
 801ec50:	e745      	b.n	801eade <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ec52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ec52:	b507      	push	{r0, r1, r2, lr}
 801ec54:	9300      	str	r3, [sp, #0]
 801ec56:	4613      	mov	r3, r2
 801ec58:	2200      	movs	r2, #0
 801ec5a:	f7ff fe92 	bl	801e982 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ec5e:	b003      	add	sp, #12
 801ec60:	f85d fb04 	ldr.w	pc, [sp], #4

0801ec64 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ec64:	b40c      	push	{r2, r3}
 801ec66:	b507      	push	{r0, r1, r2, lr}
 801ec68:	ab04      	add	r3, sp, #16
 801ec6a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ec6e:	9301      	str	r3, [sp, #4]
 801ec70:	f7ff ffef 	bl	801ec52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ec74:	b003      	add	sp, #12
 801ec76:	f85d eb04 	ldr.w	lr, [sp], #4
 801ec7a:	b002      	add	sp, #8
 801ec7c:	4770      	bx	lr
	...

0801ec80 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ec80:	4b01      	ldr	r3, [pc, #4]	; (801ec88 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ec82:	6018      	str	r0, [r3, #0]
 801ec84:	4770      	bx	lr
 801ec86:	bf00      	nop
 801ec88:	2400b92c 	.word	0x2400b92c

0801ec8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ec8c:	4b06      	ldr	r3, [pc, #24]	; (801eca8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ec8e:	881a      	ldrh	r2, [r3, #0]
 801ec90:	4282      	cmp	r2, r0
 801ec92:	d807      	bhi.n	801eca4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ec94:	4b05      	ldr	r3, [pc, #20]	; (801ecac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ec96:	881b      	ldrh	r3, [r3, #0]
 801ec98:	4413      	add	r3, r2
 801ec9a:	4298      	cmp	r0, r3
 801ec9c:	bfac      	ite	ge
 801ec9e:	2000      	movge	r0, #0
 801eca0:	2001      	movlt	r0, #1
 801eca2:	4770      	bx	lr
 801eca4:	2000      	movs	r0, #0
 801eca6:	4770      	bx	lr
 801eca8:	2400b94c 	.word	0x2400b94c
 801ecac:	2400b950 	.word	0x2400b950

0801ecb0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ecb0:	b508      	push	{r3, lr}
 801ecb2:	4601      	mov	r1, r0
 801ecb4:	f7ff ffea 	bl	801ec8c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ecb8:	b118      	cbz	r0, 801ecc2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ecba:	4b02      	ldr	r3, [pc, #8]	; (801ecc4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ecbc:	681b      	ldr	r3, [r3, #0]
 801ecbe:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ecc2:	bd08      	pop	{r3, pc}
 801ecc4:	2400b930 	.word	0x2400b930

0801ecc8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eccc:	4d28      	ldr	r5, [pc, #160]	; (801ed70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ecce:	682b      	ldr	r3, [r5, #0]
 801ecd0:	2b00      	cmp	r3, #0
 801ecd2:	d04a      	beq.n	801ed6a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ecd4:	4a27      	ldr	r2, [pc, #156]	; (801ed74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ecd6:	4e28      	ldr	r6, [pc, #160]	; (801ed78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ecd8:	8810      	ldrh	r0, [r2, #0]
 801ecda:	f8b6 8000 	ldrh.w	r8, [r6]
 801ecde:	4c27      	ldr	r4, [pc, #156]	; (801ed7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ece0:	4440      	add	r0, r8
 801ece2:	4f27      	ldr	r7, [pc, #156]	; (801ed80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ece4:	1c41      	adds	r1, r0, #1
 801ece6:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801ecea:	f021 0101 	bic.w	r1, r1, #1
 801ecee:	eb03 020e 	add.w	r2, r3, lr
 801ecf2:	0409      	lsls	r1, r1, #16
 801ecf4:	6022      	str	r2, [r4, #0]
 801ecf6:	0c09      	lsrs	r1, r1, #16
 801ecf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ecfc:	eb0e 010c 	add.w	r1, lr, ip
 801ed00:	185a      	adds	r2, r3, r1
 801ed02:	603a      	str	r2, [r7, #0]
 801ed04:	220e      	movs	r2, #14
 801ed06:	fb02 f208 	mul.w	r2, r2, r8
 801ed0a:	3203      	adds	r2, #3
 801ed0c:	f022 0203 	bic.w	r2, r2, #3
 801ed10:	4411      	add	r1, r2
 801ed12:	440b      	add	r3, r1
 801ed14:	491b      	ldr	r1, [pc, #108]	; (801ed84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ed16:	600b      	str	r3, [r1, #0]
 801ed18:	2300      	movs	r3, #0
 801ed1a:	491b      	ldr	r1, [pc, #108]	; (801ed88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ed1c:	800b      	strh	r3, [r1, #0]
 801ed1e:	491b      	ldr	r1, [pc, #108]	; (801ed8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ed20:	6809      	ldr	r1, [r1, #0]
 801ed22:	eba1 010e 	sub.w	r1, r1, lr
 801ed26:	eba1 010c 	sub.w	r1, r1, ip
 801ed2a:	469c      	mov	ip, r3
 801ed2c:	1a8a      	subs	r2, r1, r2
 801ed2e:	4918      	ldr	r1, [pc, #96]	; (801ed90 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ed30:	600a      	str	r2, [r1, #0]
 801ed32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ed36:	4a17      	ldr	r2, [pc, #92]	; (801ed94 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ed38:	8013      	strh	r3, [r2, #0]
 801ed3a:	4283      	cmp	r3, r0
 801ed3c:	d10d      	bne.n	801ed5a <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ed3e:	8835      	ldrh	r5, [r6, #0]
 801ed40:	2300      	movs	r3, #0
 801ed42:	6838      	ldr	r0, [r7, #0]
 801ed44:	240e      	movs	r4, #14
 801ed46:	429d      	cmp	r5, r3
 801ed48:	d90f      	bls.n	801ed6a <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ed4a:	fb04 0203 	mla	r2, r4, r3, r0
 801ed4e:	3301      	adds	r3, #1
 801ed50:	7b11      	ldrb	r1, [r2, #12]
 801ed52:	f36f 1145 	bfc	r1, #5, #1
 801ed56:	7311      	strb	r1, [r2, #12]
 801ed58:	e7f5      	b.n	801ed46 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801ed5a:	682a      	ldr	r2, [r5, #0]
 801ed5c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801ed60:	6822      	ldr	r2, [r4, #0]
 801ed62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ed66:	3301      	adds	r3, #1
 801ed68:	e7e7      	b.n	801ed3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801ed6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ed6e:	bf00      	nop
 801ed70:	2400b930 	.word	0x2400b930
 801ed74:	2400b94c 	.word	0x2400b94c
 801ed78:	2400b950 	.word	0x2400b950
 801ed7c:	2400b944 	.word	0x2400b944
 801ed80:	2400b934 	.word	0x2400b934
 801ed84:	2400b93c 	.word	0x2400b93c
 801ed88:	2400b94e 	.word	0x2400b94e
 801ed8c:	2400b938 	.word	0x2400b938
 801ed90:	2400b948 	.word	0x2400b948
 801ed94:	2400b940 	.word	0x2400b940

0801ed98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801ed98:	4b10      	ldr	r3, [pc, #64]	; (801eddc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801ed9a:	b510      	push	{r4, lr}
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	b9db      	cbnz	r3, 801edd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eda0:	b1d1      	cbz	r1, 801edd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801eda2:	4b0f      	ldr	r3, [pc, #60]	; (801ede0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801eda4:	240e      	movs	r4, #14
 801eda6:	801a      	strh	r2, [r3, #0]
 801eda8:	b292      	uxth	r2, r2
 801edaa:	4b0e      	ldr	r3, [pc, #56]	; (801ede4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801edac:	881b      	ldrh	r3, [r3, #0]
 801edae:	4413      	add	r3, r2
 801edb0:	4362      	muls	r2, r4
 801edb2:	2406      	movs	r4, #6
 801edb4:	fb04 2203 	mla	r2, r4, r3, r2
 801edb8:	428a      	cmp	r2, r1
 801edba:	d305      	bcc.n	801edc8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801edbc:	4b0a      	ldr	r3, [pc, #40]	; (801ede8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801edbe:	2135      	movs	r1, #53	; 0x35
 801edc0:	4a0a      	ldr	r2, [pc, #40]	; (801edec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801edc2:	480b      	ldr	r0, [pc, #44]	; (801edf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801edc4:	f00c f8a0 	bl	802af08 <__assert_func>
 801edc8:	4b0a      	ldr	r3, [pc, #40]	; (801edf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801edca:	6019      	str	r1, [r3, #0]
 801edcc:	4b0a      	ldr	r3, [pc, #40]	; (801edf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801edce:	6018      	str	r0, [r3, #0]
 801edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801edd4:	f7ff bf78 	b.w	801ecc8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801edd8:	bd10      	pop	{r4, pc}
 801edda:	bf00      	nop
 801eddc:	2400b93c 	.word	0x2400b93c
 801ede0:	2400b950 	.word	0x2400b950
 801ede4:	2400b94c 	.word	0x2400b94c
 801ede8:	0802fce5 	.word	0x0802fce5
 801edec:	0802fd3e 	.word	0x0802fd3e
 801edf0:	0802fcc0 	.word	0x0802fcc0
 801edf4:	2400b938 	.word	0x2400b938
 801edf8:	2400b930 	.word	0x2400b930

0801edfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801edfc:	b470      	push	{r4, r5, r6}
 801edfe:	4c07      	ldr	r4, [pc, #28]	; (801ee1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ee00:	4605      	mov	r5, r0
 801ee02:	4610      	mov	r0, r2
 801ee04:	9a03      	ldr	r2, [sp, #12]
 801ee06:	6826      	ldr	r6, [r4, #0]
 801ee08:	b936      	cbnz	r6, 801ee18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ee0a:	6025      	str	r5, [r4, #0]
 801ee0c:	4c04      	ldr	r4, [pc, #16]	; (801ee20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ee0e:	8021      	strh	r1, [r4, #0]
 801ee10:	4619      	mov	r1, r3
 801ee12:	bc70      	pop	{r4, r5, r6}
 801ee14:	f7ff bfc0 	b.w	801ed98 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ee18:	bc70      	pop	{r4, r5, r6}
 801ee1a:	4770      	bx	lr
 801ee1c:	2400b954 	.word	0x2400b954
 801ee20:	2400b94c 	.word	0x2400b94c

0801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ee24:	b508      	push	{r3, lr}
 801ee26:	4b14      	ldr	r3, [pc, #80]	; (801ee78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ee28:	6819      	ldr	r1, [r3, #0]
 801ee2a:	b931      	cbnz	r1, 801ee3a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ee2c:	4b13      	ldr	r3, [pc, #76]	; (801ee7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ee2e:	f240 4185 	movw	r1, #1157	; 0x485
 801ee32:	4a13      	ldr	r2, [pc, #76]	; (801ee80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ee34:	4813      	ldr	r0, [pc, #76]	; (801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ee36:	f00c f867 	bl	802af08 <__assert_func>
 801ee3a:	4a13      	ldr	r2, [pc, #76]	; (801ee88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ee3c:	8803      	ldrh	r3, [r0, #0]
 801ee3e:	8812      	ldrh	r2, [r2, #0]
 801ee40:	4293      	cmp	r3, r2
 801ee42:	d204      	bcs.n	801ee4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801ee44:	2214      	movs	r2, #20
 801ee46:	fb02 1303 	mla	r3, r2, r3, r1
 801ee4a:	8918      	ldrh	r0, [r3, #8]
 801ee4c:	bd08      	pop	{r3, pc}
 801ee4e:	490f      	ldr	r1, [pc, #60]	; (801ee8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801ee50:	8809      	ldrh	r1, [r1, #0]
 801ee52:	4411      	add	r1, r2
 801ee54:	428b      	cmp	r3, r1
 801ee56:	da06      	bge.n	801ee66 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801ee58:	1a9b      	subs	r3, r3, r2
 801ee5a:	4a0d      	ldr	r2, [pc, #52]	; (801ee90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801ee5c:	210e      	movs	r1, #14
 801ee5e:	6812      	ldr	r2, [r2, #0]
 801ee60:	fb01 2303 	mla	r3, r1, r3, r2
 801ee64:	e7f1      	b.n	801ee4a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801ee66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ee6a:	4293      	cmp	r3, r2
 801ee6c:	bf0a      	itet	eq
 801ee6e:	4b09      	ldreq	r3, [pc, #36]	; (801ee94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801ee70:	2000      	movne	r0, #0
 801ee72:	8818      	ldrheq	r0, [r3, #0]
 801ee74:	e7ea      	b.n	801ee4c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801ee76:	bf00      	nop
 801ee78:	2400b954 	.word	0x2400b954
 801ee7c:	0802ef20 	.word	0x0802ef20
 801ee80:	0802fdeb 	.word	0x0802fdeb
 801ee84:	0802fcc0 	.word	0x0802fcc0
 801ee88:	2400b94c 	.word	0x2400b94c
 801ee8c:	2400b950 	.word	0x2400b950
 801ee90:	2400b934 	.word	0x2400b934
 801ee94:	2400b8c0 	.word	0x2400b8c0

0801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801ee98:	b508      	push	{r3, lr}
 801ee9a:	4b14      	ldr	r3, [pc, #80]	; (801eeec <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801ee9c:	6819      	ldr	r1, [r3, #0]
 801ee9e:	b931      	cbnz	r1, 801eeae <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801eea0:	4b13      	ldr	r3, [pc, #76]	; (801eef0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801eea2:	f240 4199 	movw	r1, #1177	; 0x499
 801eea6:	4a13      	ldr	r2, [pc, #76]	; (801eef4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801eea8:	4813      	ldr	r0, [pc, #76]	; (801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801eeaa:	f00c f82d 	bl	802af08 <__assert_func>
 801eeae:	4a13      	ldr	r2, [pc, #76]	; (801eefc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801eeb0:	8803      	ldrh	r3, [r0, #0]
 801eeb2:	8812      	ldrh	r2, [r2, #0]
 801eeb4:	4293      	cmp	r3, r2
 801eeb6:	d204      	bcs.n	801eec2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801eeb8:	2214      	movs	r2, #20
 801eeba:	fb02 1303 	mla	r3, r2, r3, r1
 801eebe:	8958      	ldrh	r0, [r3, #10]
 801eec0:	bd08      	pop	{r3, pc}
 801eec2:	490f      	ldr	r1, [pc, #60]	; (801ef00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801eec4:	8809      	ldrh	r1, [r1, #0]
 801eec6:	4411      	add	r1, r2
 801eec8:	428b      	cmp	r3, r1
 801eeca:	da06      	bge.n	801eeda <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801eecc:	1a9b      	subs	r3, r3, r2
 801eece:	4a0d      	ldr	r2, [pc, #52]	; (801ef04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801eed0:	210e      	movs	r1, #14
 801eed2:	6812      	ldr	r2, [r2, #0]
 801eed4:	fb01 2303 	mla	r3, r1, r3, r2
 801eed8:	e7f1      	b.n	801eebe <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801eeda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801eede:	4293      	cmp	r3, r2
 801eee0:	bf0a      	itet	eq
 801eee2:	4b09      	ldreq	r3, [pc, #36]	; (801ef08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801eee4:	2000      	movne	r0, #0
 801eee6:	8818      	ldrheq	r0, [r3, #0]
 801eee8:	e7ea      	b.n	801eec0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801eeea:	bf00      	nop
 801eeec:	2400b954 	.word	0x2400b954
 801eef0:	0802ef20 	.word	0x0802ef20
 801eef4:	0802fe17 	.word	0x0802fe17
 801eef8:	0802fcc0 	.word	0x0802fcc0
 801eefc:	2400b94c 	.word	0x2400b94c
 801ef00:	2400b950 	.word	0x2400b950
 801ef04:	2400b934 	.word	0x2400b934
 801ef08:	2400b8c2 	.word	0x2400b8c2

0801ef0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ef0c:	4b23      	ldr	r3, [pc, #140]	; (801ef9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ef0e:	b510      	push	{r4, lr}
 801ef10:	681c      	ldr	r4, [r3, #0]
 801ef12:	b934      	cbnz	r4, 801ef22 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ef14:	4b22      	ldr	r3, [pc, #136]	; (801efa0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ef16:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801ef1a:	4a22      	ldr	r2, [pc, #136]	; (801efa4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ef1c:	4822      	ldr	r0, [pc, #136]	; (801efa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ef1e:	f00b fff3 	bl	802af08 <__assert_func>
 801ef22:	4a22      	ldr	r2, [pc, #136]	; (801efac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ef24:	880b      	ldrh	r3, [r1, #0]
 801ef26:	8812      	ldrh	r2, [r2, #0]
 801ef28:	4293      	cmp	r3, r2
 801ef2a:	d211      	bcs.n	801ef50 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ef2c:	2214      	movs	r2, #20
 801ef2e:	fb02 4303 	mla	r3, r2, r3, r4
 801ef32:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ef36:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ef3a:	8a1a      	ldrh	r2, [r3, #16]
 801ef3c:	8a5b      	ldrh	r3, [r3, #18]
 801ef3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ef42:	8004      	strh	r4, [r0, #0]
 801ef44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ef48:	8041      	strh	r1, [r0, #2]
 801ef4a:	8082      	strh	r2, [r0, #4]
 801ef4c:	80c3      	strh	r3, [r0, #6]
 801ef4e:	e00e      	b.n	801ef6e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ef50:	4917      	ldr	r1, [pc, #92]	; (801efb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801ef52:	8809      	ldrh	r1, [r1, #0]
 801ef54:	4411      	add	r1, r2
 801ef56:	428b      	cmp	r3, r1
 801ef58:	da0a      	bge.n	801ef70 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801ef5a:	1a9b      	subs	r3, r3, r2
 801ef5c:	4a15      	ldr	r2, [pc, #84]	; (801efb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801ef5e:	210e      	movs	r1, #14
 801ef60:	6812      	ldr	r2, [r2, #0]
 801ef62:	fb01 2303 	mla	r3, r1, r3, r2
 801ef66:	681a      	ldr	r2, [r3, #0]
 801ef68:	6002      	str	r2, [r0, #0]
 801ef6a:	685a      	ldr	r2, [r3, #4]
 801ef6c:	6042      	str	r2, [r0, #4]
 801ef6e:	bd10      	pop	{r4, pc}
 801ef70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ef74:	4293      	cmp	r3, r2
 801ef76:	d10b      	bne.n	801ef90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801ef78:	4b0f      	ldr	r3, [pc, #60]	; (801efb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801ef7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ef7e:	4b0f      	ldr	r3, [pc, #60]	; (801efbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801ef80:	8081      	strh	r1, [r0, #4]
 801ef82:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ef86:	2300      	movs	r3, #0
 801ef88:	80c2      	strh	r2, [r0, #6]
 801ef8a:	8003      	strh	r3, [r0, #0]
 801ef8c:	8043      	strh	r3, [r0, #2]
 801ef8e:	e7ee      	b.n	801ef6e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801ef90:	2300      	movs	r3, #0
 801ef92:	8003      	strh	r3, [r0, #0]
 801ef94:	8043      	strh	r3, [r0, #2]
 801ef96:	8083      	strh	r3, [r0, #4]
 801ef98:	e7d8      	b.n	801ef4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801ef9a:	bf00      	nop
 801ef9c:	2400b954 	.word	0x2400b954
 801efa0:	0802ef20 	.word	0x0802ef20
 801efa4:	0802fd84 	.word	0x0802fd84
 801efa8:	0802fcc0 	.word	0x0802fcc0
 801efac:	2400b94c 	.word	0x2400b94c
 801efb0:	2400b950 	.word	0x2400b950
 801efb4:	2400b934 	.word	0x2400b934
 801efb8:	2400b8c0 	.word	0x2400b8c0
 801efbc:	2400b8c2 	.word	0x2400b8c2

0801efc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801efc0:	4b18      	ldr	r3, [pc, #96]	; (801f024 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801efc2:	681b      	ldr	r3, [r3, #0]
 801efc4:	b34b      	cbz	r3, 801f01a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801efc6:	4a18      	ldr	r2, [pc, #96]	; (801f028 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801efc8:	8800      	ldrh	r0, [r0, #0]
 801efca:	8812      	ldrh	r2, [r2, #0]
 801efcc:	4290      	cmp	r0, r2
 801efce:	d211      	bcs.n	801eff4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801efd0:	2214      	movs	r2, #20
 801efd2:	fb02 3300 	mla	r3, r2, r0, r3
 801efd6:	8a1a      	ldrh	r2, [r3, #16]
 801efd8:	8919      	ldrh	r1, [r3, #8]
 801efda:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801efde:	428a      	cmp	r2, r1
 801efe0:	db1d      	blt.n	801f01e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801efe2:	8a58      	ldrh	r0, [r3, #18]
 801efe4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801efe8:	895b      	ldrh	r3, [r3, #10]
 801efea:	4298      	cmp	r0, r3
 801efec:	bfac      	ite	ge
 801efee:	2000      	movge	r0, #0
 801eff0:	2001      	movlt	r0, #1
 801eff2:	4770      	bx	lr
 801eff4:	4b0d      	ldr	r3, [pc, #52]	; (801f02c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801eff6:	881b      	ldrh	r3, [r3, #0]
 801eff8:	4413      	add	r3, r2
 801effa:	4298      	cmp	r0, r3
 801effc:	da0d      	bge.n	801f01a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801effe:	4b0c      	ldr	r3, [pc, #48]	; (801f030 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801f000:	1a80      	subs	r0, r0, r2
 801f002:	220e      	movs	r2, #14
 801f004:	681b      	ldr	r3, [r3, #0]
 801f006:	fb02 3300 	mla	r3, r2, r0, r3
 801f00a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f00e:	891a      	ldrh	r2, [r3, #8]
 801f010:	4291      	cmp	r1, r2
 801f012:	db04      	blt.n	801f01e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801f014:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f018:	e7e6      	b.n	801efe8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801f01a:	2000      	movs	r0, #0
 801f01c:	4770      	bx	lr
 801f01e:	2001      	movs	r0, #1
 801f020:	4770      	bx	lr
 801f022:	bf00      	nop
 801f024:	2400b954 	.word	0x2400b954
 801f028:	2400b94c 	.word	0x2400b94c
 801f02c:	2400b950 	.word	0x2400b950
 801f030:	2400b934 	.word	0x2400b934

0801f034 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f034:	b508      	push	{r3, lr}
 801f036:	4b12      	ldr	r3, [pc, #72]	; (801f080 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f038:	6819      	ldr	r1, [r3, #0]
 801f03a:	b931      	cbnz	r1, 801f04a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f03c:	4b11      	ldr	r3, [pc, #68]	; (801f084 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f03e:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801f042:	4a11      	ldr	r2, [pc, #68]	; (801f088 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f044:	4811      	ldr	r0, [pc, #68]	; (801f08c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f046:	f00b ff5f 	bl	802af08 <__assert_func>
 801f04a:	8803      	ldrh	r3, [r0, #0]
 801f04c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f050:	4293      	cmp	r3, r2
 801f052:	d012      	beq.n	801f07a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f054:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f058:	4293      	cmp	r3, r2
 801f05a:	d103      	bne.n	801f064 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801f05c:	4b0c      	ldr	r3, [pc, #48]	; (801f090 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f05e:	681b      	ldr	r3, [r3, #0]
 801f060:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801f062:	bd08      	pop	{r3, pc}
 801f064:	4a0b      	ldr	r2, [pc, #44]	; (801f094 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801f066:	6812      	ldr	r2, [r2, #0]
 801f068:	b11a      	cbz	r2, 801f072 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801f06a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f06e:	2800      	cmp	r0, #0
 801f070:	d1f7      	bne.n	801f062 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f072:	2214      	movs	r2, #20
 801f074:	4353      	muls	r3, r2
 801f076:	58c8      	ldr	r0, [r1, r3]
 801f078:	e7f3      	b.n	801f062 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f07a:	2000      	movs	r0, #0
 801f07c:	e7f1      	b.n	801f062 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f07e:	bf00      	nop
 801f080:	2400b954 	.word	0x2400b954
 801f084:	0802ef20 	.word	0x0802ef20
 801f088:	0802fdba 	.word	0x0802fdba
 801f08c:	0802fcc0 	.word	0x0802fcc0
 801f090:	2400b8cc 	.word	0x2400b8cc
 801f094:	2400b930 	.word	0x2400b930

0801f098 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f098:	8802      	ldrh	r2, [r0, #0]
 801f09a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801f09e:	429a      	cmp	r2, r3
 801f0a0:	d845      	bhi.n	801f12e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f0a2:	4b24      	ldr	r3, [pc, #144]	; (801f134 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f0a4:	8818      	ldrh	r0, [r3, #0]
 801f0a6:	4282      	cmp	r2, r0
 801f0a8:	d221      	bcs.n	801f0ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801f0aa:	4b23      	ldr	r3, [pc, #140]	; (801f138 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f0ac:	6819      	ldr	r1, [r3, #0]
 801f0ae:	2314      	movs	r3, #20
 801f0b0:	fb03 1302 	mla	r3, r3, r2, r1
 801f0b4:	6858      	ldr	r0, [r3, #4]
 801f0b6:	2800      	cmp	r0, #0
 801f0b8:	d03a      	beq.n	801f130 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f0ba:	4920      	ldr	r1, [pc, #128]	; (801f13c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f0bc:	6809      	ldr	r1, [r1, #0]
 801f0be:	2900      	cmp	r1, #0
 801f0c0:	d036      	beq.n	801f130 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f0c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f0c6:	2900      	cmp	r1, #0
 801f0c8:	d032      	beq.n	801f130 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f0ca:	891a      	ldrh	r2, [r3, #8]
 801f0cc:	8958      	ldrh	r0, [r3, #10]
 801f0ce:	4350      	muls	r0, r2
 801f0d0:	7c5a      	ldrb	r2, [r3, #17]
 801f0d2:	7cdb      	ldrb	r3, [r3, #19]
 801f0d4:	0952      	lsrs	r2, r2, #5
 801f0d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f0da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f0de:	2b0b      	cmp	r3, #11
 801f0e0:	bf18      	it	ne
 801f0e2:	0040      	lslne	r0, r0, #1
 801f0e4:	3003      	adds	r0, #3
 801f0e6:	f020 0003 	bic.w	r0, r0, #3
 801f0ea:	4408      	add	r0, r1
 801f0ec:	4770      	bx	lr
 801f0ee:	4b14      	ldr	r3, [pc, #80]	; (801f140 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801f0f0:	881b      	ldrh	r3, [r3, #0]
 801f0f2:	4403      	add	r3, r0
 801f0f4:	429a      	cmp	r2, r3
 801f0f6:	da1a      	bge.n	801f12e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f0f8:	4b12      	ldr	r3, [pc, #72]	; (801f144 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801f0fa:	1a10      	subs	r0, r2, r0
 801f0fc:	210e      	movs	r1, #14
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	fb01 3000 	mla	r0, r1, r0, r3
 801f104:	7b03      	ldrb	r3, [r0, #12]
 801f106:	f003 031f 	and.w	r3, r3, #31
 801f10a:	2b0b      	cmp	r3, #11
 801f10c:	d10b      	bne.n	801f126 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f10e:	8903      	ldrh	r3, [r0, #8]
 801f110:	8940      	ldrh	r0, [r0, #10]
 801f112:	4358      	muls	r0, r3
 801f114:	4b09      	ldr	r3, [pc, #36]	; (801f13c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f116:	3003      	adds	r0, #3
 801f118:	6819      	ldr	r1, [r3, #0]
 801f11a:	f020 0303 	bic.w	r3, r0, #3
 801f11e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f122:	4418      	add	r0, r3
 801f124:	4770      	bx	lr
 801f126:	2b0d      	cmp	r3, #13
 801f128:	d101      	bne.n	801f12e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f12a:	300d      	adds	r0, #13
 801f12c:	4770      	bx	lr
 801f12e:	2000      	movs	r0, #0
 801f130:	4770      	bx	lr
 801f132:	bf00      	nop
 801f134:	2400b94c 	.word	0x2400b94c
 801f138:	2400b954 	.word	0x2400b954
 801f13c:	2400b930 	.word	0x2400b930
 801f140:	2400b950 	.word	0x2400b950
 801f144:	2400b934 	.word	0x2400b934

0801f148 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f148:	4b17      	ldr	r3, [pc, #92]	; (801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f14a:	b510      	push	{r4, lr}
 801f14c:	6819      	ldr	r1, [r3, #0]
 801f14e:	8803      	ldrh	r3, [r0, #0]
 801f150:	b1e9      	cbz	r1, 801f18e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801f152:	4a16      	ldr	r2, [pc, #88]	; (801f1ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f154:	8812      	ldrh	r2, [r2, #0]
 801f156:	429a      	cmp	r2, r3
 801f158:	d90a      	bls.n	801f170 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801f15a:	2214      	movs	r2, #20
 801f15c:	fb02 1303 	mla	r3, r2, r3, r1
 801f160:	7c58      	ldrb	r0, [r3, #17]
 801f162:	0942      	lsrs	r2, r0, #5
 801f164:	7cd8      	ldrb	r0, [r3, #19]
 801f166:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f16a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f16e:	bd10      	pop	{r4, pc}
 801f170:	490f      	ldr	r1, [pc, #60]	; (801f1b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f172:	8809      	ldrh	r1, [r1, #0]
 801f174:	4411      	add	r1, r2
 801f176:	428b      	cmp	r3, r1
 801f178:	da09      	bge.n	801f18e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801f17a:	1a9b      	subs	r3, r3, r2
 801f17c:	4a0d      	ldr	r2, [pc, #52]	; (801f1b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f17e:	210e      	movs	r1, #14
 801f180:	6812      	ldr	r2, [r2, #0]
 801f182:	fb01 2303 	mla	r3, r1, r3, r2
 801f186:	7b18      	ldrb	r0, [r3, #12]
 801f188:	f000 001f 	and.w	r0, r0, #31
 801f18c:	e7ef      	b.n	801f16e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f18e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801f192:	4293      	cmp	r3, r2
 801f194:	d106      	bne.n	801f1a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801f196:	f7e5 f865 	bl	8004264 <_ZN8touchgfx3HAL3lcdEv>
 801f19a:	6803      	ldr	r3, [r0, #0]
 801f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1a2:	4718      	bx	r3
 801f1a4:	2000      	movs	r0, #0
 801f1a6:	e7e2      	b.n	801f16e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f1a8:	2400b954 	.word	0x2400b954
 801f1ac:	2400b94c 	.word	0x2400b94c
 801f1b0:	2400b950 	.word	0x2400b950
 801f1b4:	2400b934 	.word	0x2400b934

0801f1b8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801f1b8:	2010      	movs	r0, #16
 801f1ba:	4770      	bx	lr

0801f1bc <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801f1bc:	2000      	movs	r0, #0
 801f1be:	4770      	bx	lr

0801f1c0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f1c0:	2bff      	cmp	r3, #255	; 0xff
 801f1c2:	d050      	beq.n	801f266 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f1c4:	2a0b      	cmp	r2, #11
 801f1c6:	d04a      	beq.n	801f25e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f1c8:	d80e      	bhi.n	801f1e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f1ca:	2a03      	cmp	r2, #3
 801f1cc:	d03f      	beq.n	801f24e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f1ce:	d804      	bhi.n	801f1da <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f1d0:	2a01      	cmp	r2, #1
 801f1d2:	d03e      	beq.n	801f252 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f1d4:	d93f      	bls.n	801f256 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f1d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801f1d8:	4770      	bx	lr
 801f1da:	2a09      	cmp	r2, #9
 801f1dc:	d03f      	beq.n	801f25e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f1de:	d83c      	bhi.n	801f25a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f1e0:	2a08      	cmp	r2, #8
 801f1e2:	d03a      	beq.n	801f25a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f1e4:	2000      	movs	r0, #0
 801f1e6:	4770      	bx	lr
 801f1e8:	2a2f      	cmp	r2, #47	; 0x2f
 801f1ea:	d024      	beq.n	801f236 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f1ec:	d80d      	bhi.n	801f20a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801f1ee:	2a2d      	cmp	r2, #45	; 0x2d
 801f1f0:	d014      	beq.n	801f21c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801f1f2:	d826      	bhi.n	801f242 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f1f4:	2a2c      	cmp	r2, #44	; 0x2c
 801f1f6:	d1f5      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f1f8:	684b      	ldr	r3, [r1, #4]
 801f1fa:	781b      	ldrb	r3, [r3, #0]
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d018      	beq.n	801f232 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f200:	d323      	bcc.n	801f24a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f202:	2b02      	cmp	r3, #2
 801f204:	d1ee      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f206:	6880      	ldr	r0, [r0, #8]
 801f208:	4770      	bx	lr
 801f20a:	2a31      	cmp	r2, #49	; 0x31
 801f20c:	d004      	beq.n	801f218 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801f20e:	d328      	bcc.n	801f262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f210:	2a32      	cmp	r2, #50	; 0x32
 801f212:	d026      	beq.n	801f262 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f214:	2a33      	cmp	r2, #51	; 0x33
 801f216:	d1e5      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f218:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801f21a:	4770      	bx	lr
 801f21c:	684b      	ldr	r3, [r1, #4]
 801f21e:	781b      	ldrb	r3, [r3, #0]
 801f220:	2b01      	cmp	r3, #1
 801f222:	d004      	beq.n	801f22e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f224:	d30b      	bcc.n	801f23e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f226:	2b02      	cmp	r3, #2
 801f228:	d1dc      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f22a:	6900      	ldr	r0, [r0, #16]
 801f22c:	4770      	bx	lr
 801f22e:	6a00      	ldr	r0, [r0, #32]
 801f230:	4770      	bx	lr
 801f232:	6980      	ldr	r0, [r0, #24]
 801f234:	4770      	bx	lr
 801f236:	684b      	ldr	r3, [r1, #4]
 801f238:	781b      	ldrb	r3, [r3, #0]
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	d1d2      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f23e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801f240:	4770      	bx	lr
 801f242:	684b      	ldr	r3, [r1, #4]
 801f244:	781b      	ldrb	r3, [r3, #0]
 801f246:	2b00      	cmp	r3, #0
 801f248:	d1cc      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f24a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801f24c:	4770      	bx	lr
 801f24e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801f250:	4770      	bx	lr
 801f252:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801f254:	4770      	bx	lr
 801f256:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801f258:	4770      	bx	lr
 801f25a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801f25c:	4770      	bx	lr
 801f25e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801f260:	4770      	bx	lr
 801f262:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801f264:	4770      	bx	lr
 801f266:	2a0b      	cmp	r2, #11
 801f268:	d049      	beq.n	801f2fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f26a:	d80e      	bhi.n	801f28a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f26c:	2a03      	cmp	r2, #3
 801f26e:	d040      	beq.n	801f2f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f270:	d804      	bhi.n	801f27c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f272:	2a01      	cmp	r2, #1
 801f274:	d03f      	beq.n	801f2f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f276:	d940      	bls.n	801f2fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f278:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801f27a:	4770      	bx	lr
 801f27c:	2a09      	cmp	r2, #9
 801f27e:	d03e      	beq.n	801f2fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f280:	d801      	bhi.n	801f286 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f282:	2a08      	cmp	r2, #8
 801f284:	d1ae      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f286:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801f288:	4770      	bx	lr
 801f28a:	2a2f      	cmp	r2, #47	; 0x2f
 801f28c:	d024      	beq.n	801f2d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f28e:	d80d      	bhi.n	801f2ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f290:	2a2d      	cmp	r2, #45	; 0x2d
 801f292:	d014      	beq.n	801f2be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f294:	d826      	bhi.n	801f2e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f296:	2a2c      	cmp	r2, #44	; 0x2c
 801f298:	d1a4      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f29a:	684b      	ldr	r3, [r1, #4]
 801f29c:	781b      	ldrb	r3, [r3, #0]
 801f29e:	2b01      	cmp	r3, #1
 801f2a0:	d018      	beq.n	801f2d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f2a2:	d324      	bcc.n	801f2ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f2a4:	2b02      	cmp	r3, #2
 801f2a6:	d19d      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2a8:	68c0      	ldr	r0, [r0, #12]
 801f2aa:	4770      	bx	lr
 801f2ac:	2a31      	cmp	r2, #49	; 0x31
 801f2ae:	d004      	beq.n	801f2ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f2b0:	d327      	bcc.n	801f302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f2b2:	2a32      	cmp	r2, #50	; 0x32
 801f2b4:	d025      	beq.n	801f302 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f2b6:	2a33      	cmp	r2, #51	; 0x33
 801f2b8:	d194      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2ba:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801f2bc:	4770      	bx	lr
 801f2be:	684b      	ldr	r3, [r1, #4]
 801f2c0:	781b      	ldrb	r3, [r3, #0]
 801f2c2:	2b01      	cmp	r3, #1
 801f2c4:	d004      	beq.n	801f2d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f2c6:	d30b      	bcc.n	801f2e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f2c8:	2b02      	cmp	r3, #2
 801f2ca:	d18b      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2cc:	6940      	ldr	r0, [r0, #20]
 801f2ce:	4770      	bx	lr
 801f2d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801f2d2:	4770      	bx	lr
 801f2d4:	69c0      	ldr	r0, [r0, #28]
 801f2d6:	4770      	bx	lr
 801f2d8:	684b      	ldr	r3, [r1, #4]
 801f2da:	781b      	ldrb	r3, [r3, #0]
 801f2dc:	2b00      	cmp	r3, #0
 801f2de:	d181      	bne.n	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801f2e2:	4770      	bx	lr
 801f2e4:	684b      	ldr	r3, [r1, #4]
 801f2e6:	781b      	ldrb	r3, [r3, #0]
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	f47f af7b 	bne.w	801f1e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2ee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801f2f0:	4770      	bx	lr
 801f2f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801f2f4:	4770      	bx	lr
 801f2f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801f2f8:	4770      	bx	lr
 801f2fa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801f2fc:	4770      	bx	lr
 801f2fe:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801f300:	4770      	bx	lr
 801f302:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801f304:	4770      	bx	lr

0801f306 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f30a:	b087      	sub	sp, #28
 801f30c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f30e:	9205      	str	r2, [sp, #20]
 801f310:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f314:	9101      	str	r1, [sp, #4]
 801f316:	9202      	str	r2, [sp, #8]
 801f318:	6841      	ldr	r1, [r0, #4]
 801f31a:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f31e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801f322:	fb01 2404 	mla	r4, r1, r4, r2
 801f326:	6802      	ldr	r2, [r0, #0]
 801f328:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f32c:	f8de 2000 	ldr.w	r2, [lr]
 801f330:	9203      	str	r2, [sp, #12]
 801f332:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f336:	3204      	adds	r2, #4
 801f338:	9204      	str	r2, [sp, #16]
 801f33a:	9a02      	ldr	r2, [sp, #8]
 801f33c:	43d6      	mvns	r6, r2
 801f33e:	b2f6      	uxtb	r6, r6
 801f340:	9a01      	ldr	r2, [sp, #4]
 801f342:	2a00      	cmp	r2, #0
 801f344:	dc03      	bgt.n	801f34e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f346:	9a05      	ldr	r2, [sp, #20]
 801f348:	2a00      	cmp	r2, #0
 801f34a:	f340 8129 	ble.w	801f5a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f34e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f350:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f354:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f35a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f35e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f362:	2b00      	cmp	r3, #0
 801f364:	dd0e      	ble.n	801f384 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f366:	1408      	asrs	r0, r1, #16
 801f368:	d405      	bmi.n	801f376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f36a:	4560      	cmp	r0, ip
 801f36c:	da03      	bge.n	801f376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f36e:	1410      	asrs	r0, r2, #16
 801f370:	d401      	bmi.n	801f376 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f372:	42b8      	cmp	r0, r7
 801f374:	db07      	blt.n	801f386 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f376:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f378:	3b01      	subs	r3, #1
 801f37a:	3402      	adds	r4, #2
 801f37c:	4401      	add	r1, r0
 801f37e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f380:	4402      	add	r2, r0
 801f382:	e7ee      	b.n	801f362 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f384:	d071      	beq.n	801f46a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f386:	1e58      	subs	r0, r3, #1
 801f388:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f38a:	fb05 1500 	mla	r5, r5, r0, r1
 801f38e:	142d      	asrs	r5, r5, #16
 801f390:	d45f      	bmi.n	801f452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f392:	4565      	cmp	r5, ip
 801f394:	da5d      	bge.n	801f452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f396:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f398:	fb05 2000 	mla	r0, r5, r0, r2
 801f39c:	1400      	asrs	r0, r0, #16
 801f39e:	d458      	bmi.n	801f452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f3a0:	42b8      	cmp	r0, r7
 801f3a2:	da56      	bge.n	801f452 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f3a4:	4699      	mov	r9, r3
 801f3a6:	46a2      	mov	sl, r4
 801f3a8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f3ac:	f1b9 0f00 	cmp.w	r9, #0
 801f3b0:	dd57      	ble.n	801f462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f3b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f3b6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f3ba:	9803      	ldr	r0, [sp, #12]
 801f3bc:	140d      	asrs	r5, r1, #16
 801f3be:	f109 39ff 	add.w	r9, r9, #4294967295
 801f3c2:	fb07 000c 	mla	r0, r7, ip, r0
 801f3c6:	5d40      	ldrb	r0, [r0, r5]
 801f3c8:	9d04      	ldr	r5, [sp, #16]
 801f3ca:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f3ce:	f8ba 5000 	ldrh.w	r5, [sl]
 801f3d2:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f3d6:	122f      	asrs	r7, r5, #8
 801f3d8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f3dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f3e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f3e4:	00ed      	lsls	r5, r5, #3
 801f3e6:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f3ea:	fb17 f706 	smulbb	r7, r7, r6
 801f3ee:	b2ed      	uxtb	r5, r5
 801f3f0:	fb18 f806 	smulbb	r8, r8, r6
 801f3f4:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f3f8:	10c7      	asrs	r7, r0, #3
 801f3fa:	fb15 f506 	smulbb	r5, r5, r6
 801f3fe:	00c0      	lsls	r0, r0, #3
 801f400:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f404:	fa1f fc8c 	uxth.w	ip, ip
 801f408:	b2c0      	uxtb	r0, r0
 801f40a:	fb07 870b 	mla	r7, r7, fp, r8
 801f40e:	fb00 500b 	mla	r0, r0, fp, r5
 801f412:	f10c 0501 	add.w	r5, ip, #1
 801f416:	b2bf      	uxth	r7, r7
 801f418:	b280      	uxth	r0, r0
 801f41a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f41e:	f107 0801 	add.w	r8, r7, #1
 801f422:	1c45      	adds	r5, r0, #1
 801f424:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f428:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f42c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f430:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f432:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f436:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f43a:	4401      	add	r1, r0
 801f43c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f440:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f442:	ea45 0c0c 	orr.w	ip, r5, ip
 801f446:	4402      	add	r2, r0
 801f448:	ea4c 0c08 	orr.w	ip, ip, r8
 801f44c:	f82a cb02 	strh.w	ip, [sl], #2
 801f450:	e7ac      	b.n	801f3ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f452:	f04f 0800 	mov.w	r8, #0
 801f456:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f45a:	eb03 0008 	add.w	r0, r3, r8
 801f45e:	2800      	cmp	r0, #0
 801f460:	dc41      	bgt.n	801f4e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f462:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f466:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f46a:	9b01      	ldr	r3, [sp, #4]
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	f340 8097 	ble.w	801f5a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f476:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f478:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f47c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f480:	eef0 6a62 	vmov.f32	s13, s5
 801f484:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f488:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f48c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f490:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f494:	eef0 6a43 	vmov.f32	s13, s6
 801f498:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f49c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f4a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f4a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f4a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f4ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f4b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f4b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f4b8:	ee12 2a90 	vmov	r2, s5
 801f4bc:	eef0 2a47 	vmov.f32	s5, s14
 801f4c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4c4:	ee13 2a10 	vmov	r2, s6
 801f4c8:	9313      	str	r3, [sp, #76]	; 0x4c
 801f4ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4cc:	eeb0 3a67 	vmov.f32	s6, s15
 801f4d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801f4d4:	9314      	str	r3, [sp, #80]	; 0x50
 801f4d6:	9b01      	ldr	r3, [sp, #4]
 801f4d8:	9a05      	ldr	r2, [sp, #20]
 801f4da:	3b01      	subs	r3, #1
 801f4dc:	9301      	str	r3, [sp, #4]
 801f4de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4e0:	bf08      	it	eq
 801f4e2:	4613      	moveq	r3, r2
 801f4e4:	e72c      	b.n	801f340 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f4e6:	140f      	asrs	r7, r1, #16
 801f4e8:	d453      	bmi.n	801f592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f4ea:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f4ee:	42bd      	cmp	r5, r7
 801f4f0:	dd4f      	ble.n	801f592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f4f2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f4f6:	d44c      	bmi.n	801f592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f4f8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f4fc:	4560      	cmp	r0, ip
 801f4fe:	dd48      	ble.n	801f592 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f500:	9803      	ldr	r0, [sp, #12]
 801f502:	b22d      	sxth	r5, r5
 801f504:	fb0c 0505 	mla	r5, ip, r5, r0
 801f508:	5de8      	ldrb	r0, [r5, r7]
 801f50a:	9d04      	ldr	r5, [sp, #16]
 801f50c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f510:	f06f 0501 	mvn.w	r5, #1
 801f514:	fb05 fb08 	mul.w	fp, r5, r8
 801f518:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f51c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f520:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f524:	122f      	asrs	r7, r5, #8
 801f526:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f52a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f52e:	00ed      	lsls	r5, r5, #3
 801f530:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f534:	fb17 f706 	smulbb	r7, r7, r6
 801f538:	b2ed      	uxtb	r5, r5
 801f53a:	fb19 f906 	smulbb	r9, r9, r6
 801f53e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f542:	10c7      	asrs	r7, r0, #3
 801f544:	fb15 f506 	smulbb	r5, r5, r6
 801f548:	00c0      	lsls	r0, r0, #3
 801f54a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f54e:	fa1f fc8c 	uxth.w	ip, ip
 801f552:	b2c0      	uxtb	r0, r0
 801f554:	fb07 970a 	mla	r7, r7, sl, r9
 801f558:	fb00 500a 	mla	r0, r0, sl, r5
 801f55c:	f10c 0501 	add.w	r5, ip, #1
 801f560:	b2bf      	uxth	r7, r7
 801f562:	b280      	uxth	r0, r0
 801f564:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f568:	f107 0901 	add.w	r9, r7, #1
 801f56c:	1c45      	adds	r5, r0, #1
 801f56e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f572:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f576:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f57a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f57e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f582:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f586:	ea45 0c0c 	orr.w	ip, r5, ip
 801f58a:	ea4c 0c09 	orr.w	ip, ip, r9
 801f58e:	f824 c00b 	strh.w	ip, [r4, fp]
 801f592:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f594:	f108 38ff 	add.w	r8, r8, #4294967295
 801f598:	4401      	add	r1, r0
 801f59a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f59c:	4402      	add	r2, r0
 801f59e:	e75c      	b.n	801f45a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f5a0:	b007      	add	sp, #28
 801f5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5aa:	b085      	sub	sp, #20
 801f5ac:	4693      	mov	fp, r2
 801f5ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5b2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f5b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f5b6:	6870      	ldr	r0, [r6, #4]
 801f5b8:	9100      	str	r1, [sp, #0]
 801f5ba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f5be:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f5c2:	fb00 2404 	mla	r4, r0, r4, r2
 801f5c6:	6832      	ldr	r2, [r6, #0]
 801f5c8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f5cc:	682a      	ldr	r2, [r5, #0]
 801f5ce:	9201      	str	r2, [sp, #4]
 801f5d0:	686a      	ldr	r2, [r5, #4]
 801f5d2:	3204      	adds	r2, #4
 801f5d4:	9202      	str	r2, [sp, #8]
 801f5d6:	9a00      	ldr	r2, [sp, #0]
 801f5d8:	2a00      	cmp	r2, #0
 801f5da:	dc03      	bgt.n	801f5e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f5dc:	f1bb 0f00 	cmp.w	fp, #0
 801f5e0:	f340 80a0 	ble.w	801f724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f5e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f5e6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f5ea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f5ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f5f0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f5f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	dd0c      	ble.n	801f616 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f5fc:	1406      	asrs	r6, r0, #16
 801f5fe:	d405      	bmi.n	801f60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f600:	454e      	cmp	r6, r9
 801f602:	da03      	bge.n	801f60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f604:	1416      	asrs	r6, r2, #16
 801f606:	d401      	bmi.n	801f60c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f608:	4546      	cmp	r6, r8
 801f60a:	db05      	blt.n	801f618 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f60c:	4470      	add	r0, lr
 801f60e:	4462      	add	r2, ip
 801f610:	3b01      	subs	r3, #1
 801f612:	3402      	adds	r4, #2
 801f614:	e7f0      	b.n	801f5f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f616:	d00f      	beq.n	801f638 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f618:	1e5e      	subs	r6, r3, #1
 801f61a:	fb0e 0706 	mla	r7, lr, r6, r0
 801f61e:	143f      	asrs	r7, r7, #16
 801f620:	d541      	bpl.n	801f6a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f622:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f626:	4698      	mov	r8, r3
 801f628:	9603      	str	r6, [sp, #12]
 801f62a:	f1b8 0f00 	cmp.w	r8, #0
 801f62e:	dc59      	bgt.n	801f6e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f630:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f634:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f638:	9b00      	ldr	r3, [sp, #0]
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	dd72      	ble.n	801f724 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f63e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f644:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f648:	eeb0 6a62 	vmov.f32	s12, s5
 801f64c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f650:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f654:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f658:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f65c:	eeb0 6a43 	vmov.f32	s12, s6
 801f660:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f664:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f668:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f66c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f670:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f674:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f678:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f67c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f680:	ee12 2a90 	vmov	r2, s5
 801f684:	eef0 2a47 	vmov.f32	s5, s14
 801f688:	fb92 fef3 	sdiv	lr, r2, r3
 801f68c:	ee13 2a10 	vmov	r2, s6
 801f690:	eeb0 3a67 	vmov.f32	s6, s15
 801f694:	fb92 fcf3 	sdiv	ip, r2, r3
 801f698:	9b00      	ldr	r3, [sp, #0]
 801f69a:	3b01      	subs	r3, #1
 801f69c:	9300      	str	r3, [sp, #0]
 801f69e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f6a0:	bf08      	it	eq
 801f6a2:	465b      	moveq	r3, fp
 801f6a4:	e797      	b.n	801f5d6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f6a6:	454f      	cmp	r7, r9
 801f6a8:	dabb      	bge.n	801f622 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6aa:	fb0c 2606 	mla	r6, ip, r6, r2
 801f6ae:	1436      	asrs	r6, r6, #16
 801f6b0:	d4b7      	bmi.n	801f622 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6b2:	4546      	cmp	r6, r8
 801f6b4:	dab5      	bge.n	801f622 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f6b6:	461e      	mov	r6, r3
 801f6b8:	46a0      	mov	r8, r4
 801f6ba:	2e00      	cmp	r6, #0
 801f6bc:	ddb8      	ble.n	801f630 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f6be:	1417      	asrs	r7, r2, #16
 801f6c0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f6c4:	9901      	ldr	r1, [sp, #4]
 801f6c6:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f6ca:	4462      	add	r2, ip
 801f6cc:	4470      	add	r0, lr
 801f6ce:	fb0a 1707 	mla	r7, sl, r7, r1
 801f6d2:	9902      	ldr	r1, [sp, #8]
 801f6d4:	3e01      	subs	r6, #1
 801f6d6:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f6da:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f6de:	f828 7b02 	strh.w	r7, [r8], #2
 801f6e2:	e7ea      	b.n	801f6ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f6e4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f6e8:	d417      	bmi.n	801f71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f6ea:	68ae      	ldr	r6, [r5, #8]
 801f6ec:	454e      	cmp	r6, r9
 801f6ee:	dd14      	ble.n	801f71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f6f0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f6f4:	d411      	bmi.n	801f71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f6f6:	68ef      	ldr	r7, [r5, #12]
 801f6f8:	4557      	cmp	r7, sl
 801f6fa:	dd0e      	ble.n	801f71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f6fc:	9f01      	ldr	r7, [sp, #4]
 801f6fe:	b236      	sxth	r6, r6
 801f700:	f06f 0101 	mvn.w	r1, #1
 801f704:	fb0a 7606 	mla	r6, sl, r6, r7
 801f708:	9f02      	ldr	r7, [sp, #8]
 801f70a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f70e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f712:	fb01 f608 	mul.w	r6, r1, r8
 801f716:	9903      	ldr	r1, [sp, #12]
 801f718:	538f      	strh	r7, [r1, r6]
 801f71a:	4470      	add	r0, lr
 801f71c:	4462      	add	r2, ip
 801f71e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f722:	e782      	b.n	801f62a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f724:	b005      	add	sp, #20
 801f726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f72a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f72a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f72e:	b087      	sub	sp, #28
 801f730:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f732:	9205      	str	r2, [sp, #20]
 801f734:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f738:	9102      	str	r1, [sp, #8]
 801f73a:	9203      	str	r2, [sp, #12]
 801f73c:	6861      	ldr	r1, [r4, #4]
 801f73e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801f742:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f746:	fb01 2000 	mla	r0, r1, r0, r2
 801f74a:	6822      	ldr	r2, [r4, #0]
 801f74c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f750:	9200      	str	r2, [sp, #0]
 801f752:	f8dc 2000 	ldr.w	r2, [ip]
 801f756:	9204      	str	r2, [sp, #16]
 801f758:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f75c:	3204      	adds	r2, #4
 801f75e:	9201      	str	r2, [sp, #4]
 801f760:	9a03      	ldr	r2, [sp, #12]
 801f762:	43d5      	mvns	r5, r2
 801f764:	b2ed      	uxtb	r5, r5
 801f766:	9a02      	ldr	r2, [sp, #8]
 801f768:	2a00      	cmp	r2, #0
 801f76a:	dc03      	bgt.n	801f774 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f76c:	9a05      	ldr	r2, [sp, #20]
 801f76e:	2a00      	cmp	r2, #0
 801f770:	f340 812c 	ble.w	801f9cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f776:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f77a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f77e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f780:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f784:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f788:	2b00      	cmp	r3, #0
 801f78a:	dd10      	ble.n	801f7ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f78c:	140c      	asrs	r4, r1, #16
 801f78e:	d405      	bmi.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f790:	4574      	cmp	r4, lr
 801f792:	da03      	bge.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f794:	1414      	asrs	r4, r2, #16
 801f796:	d401      	bmi.n	801f79c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f798:	42bc      	cmp	r4, r7
 801f79a:	db09      	blt.n	801f7b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f79c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f79e:	3b01      	subs	r3, #1
 801f7a0:	9800      	ldr	r0, [sp, #0]
 801f7a2:	4421      	add	r1, r4
 801f7a4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f7a6:	3002      	adds	r0, #2
 801f7a8:	4422      	add	r2, r4
 801f7aa:	9000      	str	r0, [sp, #0]
 801f7ac:	e7ec      	b.n	801f788 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f7ae:	d071      	beq.n	801f894 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f7b0:	1e5c      	subs	r4, r3, #1
 801f7b2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f7b4:	fb06 1604 	mla	r6, r6, r4, r1
 801f7b8:	1436      	asrs	r6, r6, #16
 801f7ba:	d45d      	bmi.n	801f878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f7bc:	4576      	cmp	r6, lr
 801f7be:	da5b      	bge.n	801f878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f7c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801f7c2:	fb06 2404 	mla	r4, r6, r4, r2
 801f7c6:	1424      	asrs	r4, r4, #16
 801f7c8:	d456      	bmi.n	801f878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f7ca:	42bc      	cmp	r4, r7
 801f7cc:	da54      	bge.n	801f878 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f7ce:	4698      	mov	r8, r3
 801f7d0:	f8dd 9000 	ldr.w	r9, [sp]
 801f7d4:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f7d8:	f1b8 0f00 	cmp.w	r8, #0
 801f7dc:	dd54      	ble.n	801f888 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f7de:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f7e2:	1414      	asrs	r4, r2, #16
 801f7e4:	9804      	ldr	r0, [sp, #16]
 801f7e6:	140e      	asrs	r6, r1, #16
 801f7e8:	f108 38ff 	add.w	r8, r8, #4294967295
 801f7ec:	fb07 0404 	mla	r4, r7, r4, r0
 801f7f0:	9801      	ldr	r0, [sp, #4]
 801f7f2:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f7f6:	f8b9 4000 	ldrh.w	r4, [r9]
 801f7fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f7fe:	1227      	asrs	r7, r4, #8
 801f800:	eb00 0b0e 	add.w	fp, r0, lr
 801f804:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f808:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f80c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f80e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f812:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f816:	4401      	add	r1, r0
 801f818:	fb16 f60a 	smulbb	r6, r6, sl
 801f81c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f81e:	fb1b fb0a 	smulbb	fp, fp, sl
 801f822:	fb07 6705 	mla	r7, r7, r5, r6
 801f826:	10e6      	asrs	r6, r4, #3
 801f828:	00e4      	lsls	r4, r4, #3
 801f82a:	4402      	add	r2, r0
 801f82c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f830:	b2bf      	uxth	r7, r7
 801f832:	b2e4      	uxtb	r4, r4
 801f834:	fb06 b605 	mla	r6, r6, r5, fp
 801f838:	fb14 f405 	smulbb	r4, r4, r5
 801f83c:	b2b6      	uxth	r6, r6
 801f83e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f842:	1c7c      	adds	r4, r7, #1
 801f844:	f106 0b01 	add.w	fp, r6, #1
 801f848:	fa1f fe8e 	uxth.w	lr, lr
 801f84c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f850:	f10e 0401 	add.w	r4, lr, #1
 801f854:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f858:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f85c:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f860:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f864:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f868:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f86c:	4327      	orrs	r7, r4
 801f86e:	ea47 070b 	orr.w	r7, r7, fp
 801f872:	f829 7b02 	strh.w	r7, [r9], #2
 801f876:	e7af      	b.n	801f7d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f878:	f04f 0e00 	mov.w	lr, #0
 801f87c:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f880:	eb03 040e 	add.w	r4, r3, lr
 801f884:	2c00      	cmp	r4, #0
 801f886:	dc43      	bgt.n	801f910 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f888:	9a00      	ldr	r2, [sp, #0]
 801f88a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f88e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f892:	9300      	str	r3, [sp, #0]
 801f894:	9b02      	ldr	r3, [sp, #8]
 801f896:	2b00      	cmp	r3, #0
 801f898:	f340 8098 	ble.w	801f9cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f89c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f8a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8aa:	eef0 6a62 	vmov.f32	s13, s5
 801f8ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f8b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f8b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8ba:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801f8be:	eef0 6a43 	vmov.f32	s13, s6
 801f8c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f8c6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801f8ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f8ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f8d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f8d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f8da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f8de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f8e2:	ee12 2a90 	vmov	r2, s5
 801f8e6:	eef0 2a47 	vmov.f32	s5, s14
 801f8ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8ee:	ee13 2a10 	vmov	r2, s6
 801f8f2:	9313      	str	r3, [sp, #76]	; 0x4c
 801f8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f8f6:	eeb0 3a67 	vmov.f32	s6, s15
 801f8fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8fe:	9314      	str	r3, [sp, #80]	; 0x50
 801f900:	9b02      	ldr	r3, [sp, #8]
 801f902:	9a05      	ldr	r2, [sp, #20]
 801f904:	3b01      	subs	r3, #1
 801f906:	9302      	str	r3, [sp, #8]
 801f908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f90a:	bf08      	it	eq
 801f90c:	4613      	moveq	r3, r2
 801f90e:	e72a      	b.n	801f766 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f910:	140f      	asrs	r7, r1, #16
 801f912:	d454      	bmi.n	801f9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f914:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f918:	42be      	cmp	r6, r7
 801f91a:	dd50      	ble.n	801f9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f91c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f920:	d44d      	bmi.n	801f9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f922:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f926:	4544      	cmp	r4, r8
 801f928:	dd49      	ble.n	801f9be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f92a:	9c04      	ldr	r4, [sp, #16]
 801f92c:	b236      	sxth	r6, r6
 801f92e:	f06f 0001 	mvn.w	r0, #1
 801f932:	fb08 4606 	mla	r6, r8, r6, r4
 801f936:	9c01      	ldr	r4, [sp, #4]
 801f938:	fb00 fa0e 	mul.w	sl, r0, lr
 801f93c:	9800      	ldr	r0, [sp, #0]
 801f93e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f942:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f946:	eb04 0b08 	add.w	fp, r4, r8
 801f94a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f94e:	9801      	ldr	r0, [sp, #4]
 801f950:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f954:	1227      	asrs	r7, r4, #8
 801f956:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f95a:	fb16 f609 	smulbb	r6, r6, r9
 801f95e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f962:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f966:	fb1b fb09 	smulbb	fp, fp, r9
 801f96a:	fb07 6705 	mla	r7, r7, r5, r6
 801f96e:	10e6      	asrs	r6, r4, #3
 801f970:	00e4      	lsls	r4, r4, #3
 801f972:	9800      	ldr	r0, [sp, #0]
 801f974:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f978:	b2bf      	uxth	r7, r7
 801f97a:	b2e4      	uxtb	r4, r4
 801f97c:	fb06 b605 	mla	r6, r6, r5, fp
 801f980:	fb14 f405 	smulbb	r4, r4, r5
 801f984:	b2b6      	uxth	r6, r6
 801f986:	fb08 4809 	mla	r8, r8, r9, r4
 801f98a:	1c7c      	adds	r4, r7, #1
 801f98c:	f106 0b01 	add.w	fp, r6, #1
 801f990:	fa1f f888 	uxth.w	r8, r8
 801f994:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f998:	f108 0401 	add.w	r4, r8, #1
 801f99c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f9a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f9a4:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801f9a8:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f9ac:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f9b0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f9b4:	4327      	orrs	r7, r4
 801f9b6:	ea47 070b 	orr.w	r7, r7, fp
 801f9ba:	f820 700a 	strh.w	r7, [r0, sl]
 801f9be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f9c0:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f9c4:	4401      	add	r1, r0
 801f9c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f9c8:	4402      	add	r2, r0
 801f9ca:	e759      	b.n	801f880 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f9cc:	b007      	add	sp, #28
 801f9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f9d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d8:	b085      	sub	sp, #20
 801f9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f9de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f9e0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f9e2:	9203      	str	r2, [sp, #12]
 801f9e4:	6870      	ldr	r0, [r6, #4]
 801f9e6:	686f      	ldr	r7, [r5, #4]
 801f9e8:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801f9ec:	3704      	adds	r7, #4
 801f9ee:	9101      	str	r1, [sp, #4]
 801f9f0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f9f4:	fb00 2404 	mla	r4, r0, r4, r2
 801f9f8:	6832      	ldr	r2, [r6, #0]
 801f9fa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f9fe:	682a      	ldr	r2, [r5, #0]
 801fa00:	9202      	str	r2, [sp, #8]
 801fa02:	9a01      	ldr	r2, [sp, #4]
 801fa04:	2a00      	cmp	r2, #0
 801fa06:	dc03      	bgt.n	801fa10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa08:	9a03      	ldr	r2, [sp, #12]
 801fa0a:	2a00      	cmp	r2, #0
 801fa0c:	f340 80cc 	ble.w	801fba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fa10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fa12:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fa16:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fa1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa1c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fa20:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fa24:	2b00      	cmp	r3, #0
 801fa26:	dd0d      	ble.n	801fa44 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fa28:	1406      	asrs	r6, r0, #16
 801fa2a:	d405      	bmi.n	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa2c:	454e      	cmp	r6, r9
 801fa2e:	da03      	bge.n	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa30:	1416      	asrs	r6, r2, #16
 801fa32:	d401      	bmi.n	801fa38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa34:	4546      	cmp	r6, r8
 801fa36:	db06      	blt.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa38:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fa3a:	4460      	add	r0, ip
 801fa3c:	3b01      	subs	r3, #1
 801fa3e:	3402      	adds	r4, #2
 801fa40:	4432      	add	r2, r6
 801fa42:	e7ef      	b.n	801fa24 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801fa44:	d00f      	beq.n	801fa66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fa46:	1e5e      	subs	r6, r3, #1
 801fa48:	fb0c 0e06 	mla	lr, ip, r6, r0
 801fa4c:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801fa50:	d543      	bpl.n	801fada <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801fa52:	4698      	mov	r8, r3
 801fa54:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801fa58:	f1b8 0f00 	cmp.w	r8, #0
 801fa5c:	dc71      	bgt.n	801fb42 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801fa5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fa66:	9b01      	ldr	r3, [sp, #4]
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	f340 809d 	ble.w	801fba8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fa6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa78:	eeb0 6a62 	vmov.f32	s12, s5
 801fa7c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa80:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa88:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fa8c:	eeb0 6a43 	vmov.f32	s12, s6
 801fa90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa94:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fa98:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa9c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801faa0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801faa4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801faa8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801faac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fab0:	ee12 2a90 	vmov	r2, s5
 801fab4:	eef0 2a47 	vmov.f32	s5, s14
 801fab8:	fb92 fcf3 	sdiv	ip, r2, r3
 801fabc:	ee13 2a10 	vmov	r2, s6
 801fac0:	eeb0 3a67 	vmov.f32	s6, s15
 801fac4:	fb92 f3f3 	sdiv	r3, r2, r3
 801fac8:	9312      	str	r3, [sp, #72]	; 0x48
 801faca:	9b01      	ldr	r3, [sp, #4]
 801facc:	9a03      	ldr	r2, [sp, #12]
 801face:	3b01      	subs	r3, #1
 801fad0:	9301      	str	r3, [sp, #4]
 801fad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fad4:	bf08      	it	eq
 801fad6:	4613      	moveq	r3, r2
 801fad8:	e793      	b.n	801fa02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fada:	45ce      	cmp	lr, r9
 801fadc:	dab9      	bge.n	801fa52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fade:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fae0:	fb01 2606 	mla	r6, r1, r6, r2
 801fae4:	1436      	asrs	r6, r6, #16
 801fae6:	d4b4      	bmi.n	801fa52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fae8:	4546      	cmp	r6, r8
 801faea:	dab2      	bge.n	801fa52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801faec:	4698      	mov	r8, r3
 801faee:	46a2      	mov	sl, r4
 801faf0:	f1b8 0f00 	cmp.w	r8, #0
 801faf4:	ddb3      	ble.n	801fa5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801faf6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fafa:	1416      	asrs	r6, r2, #16
 801fafc:	9902      	ldr	r1, [sp, #8]
 801fafe:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801fb02:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb06:	4460      	add	r0, ip
 801fb08:	fb09 1606 	mla	r6, r9, r6, r1
 801fb0c:	4928      	ldr	r1, [pc, #160]	; (801fbb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801fb0e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801fb12:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fb16:	eb07 0b0e 	add.w	fp, r7, lr
 801fb1a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801fb1e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fb22:	00f6      	lsls	r6, r6, #3
 801fb24:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801fb28:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fb2a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fb2e:	440a      	add	r2, r1
 801fb30:	ea49 0606 	orr.w	r6, r9, r6
 801fb34:	f817 900e 	ldrb.w	r9, [r7, lr]
 801fb38:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801fb3c:	f82a 6b02 	strh.w	r6, [sl], #2
 801fb40:	e7d6      	b.n	801faf0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fb42:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fb46:	d429      	bmi.n	801fb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fb48:	68ae      	ldr	r6, [r5, #8]
 801fb4a:	454e      	cmp	r6, r9
 801fb4c:	dd26      	ble.n	801fb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fb4e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fb52:	d423      	bmi.n	801fb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fb54:	68e9      	ldr	r1, [r5, #12]
 801fb56:	4559      	cmp	r1, fp
 801fb58:	dd20      	ble.n	801fb9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fb5a:	fa0f fe86 	sxth.w	lr, r6
 801fb5e:	9902      	ldr	r1, [sp, #8]
 801fb60:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801fb64:	f06f 0101 	mvn.w	r1, #1
 801fb68:	f81e e009 	ldrb.w	lr, [lr, r9]
 801fb6c:	fb01 f908 	mul.w	r9, r1, r8
 801fb70:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801fb74:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fb78:	eb07 060e 	add.w	r6, r7, lr
 801fb7c:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fb80:	7876      	ldrb	r6, [r6, #1]
 801fb82:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801fb86:	00f6      	lsls	r6, r6, #3
 801fb88:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fb8c:	ea4b 0606 	orr.w	r6, fp, r6
 801fb90:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801fb94:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801fb98:	f82a 6009 	strh.w	r6, [sl, r9]
 801fb9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fb9e:	4460      	add	r0, ip
 801fba0:	f108 38ff 	add.w	r8, r8, #4294967295
 801fba4:	440a      	add	r2, r1
 801fba6:	e757      	b.n	801fa58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fba8:	b005      	add	sp, #20
 801fbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbae:	bf00      	nop
 801fbb0:	fffff800 	.word	0xfffff800

0801fbb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbb8:	b087      	sub	sp, #28
 801fbba:	468b      	mov	fp, r1
 801fbbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbc0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fbc2:	9204      	str	r2, [sp, #16]
 801fbc4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fbc8:	6841      	ldr	r1, [r0, #4]
 801fbca:	9205      	str	r2, [sp, #20]
 801fbcc:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801fbd0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801fbd4:	fb01 2404 	mla	r4, r1, r4, r2
 801fbd8:	6802      	ldr	r2, [r0, #0]
 801fbda:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fbde:	f8dc 2000 	ldr.w	r2, [ip]
 801fbe2:	9201      	str	r2, [sp, #4]
 801fbe4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fbe8:	3204      	adds	r2, #4
 801fbea:	9202      	str	r2, [sp, #8]
 801fbec:	f1bb 0f00 	cmp.w	fp, #0
 801fbf0:	dc03      	bgt.n	801fbfa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fbf2:	9a04      	ldr	r2, [sp, #16]
 801fbf4:	2a00      	cmp	r2, #0
 801fbf6:	f340 8138 	ble.w	801fe6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fbfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fbfc:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801fc00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fc04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc06:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801fc0a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	dd0e      	ble.n	801fc30 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fc12:	1402      	asrs	r2, r0, #16
 801fc14:	d405      	bmi.n	801fc22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc16:	42ba      	cmp	r2, r7
 801fc18:	da03      	bge.n	801fc22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc1a:	140a      	asrs	r2, r1, #16
 801fc1c:	d401      	bmi.n	801fc22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc1e:	42b2      	cmp	r2, r6
 801fc20:	db07      	blt.n	801fc32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fc22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc24:	3b01      	subs	r3, #1
 801fc26:	3402      	adds	r4, #2
 801fc28:	4410      	add	r0, r2
 801fc2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc2c:	4411      	add	r1, r2
 801fc2e:	e7ee      	b.n	801fc0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fc30:	d019      	beq.n	801fc66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fc32:	1e5a      	subs	r2, r3, #1
 801fc34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fc36:	fb05 0502 	mla	r5, r5, r2, r0
 801fc3a:	142d      	asrs	r5, r5, #16
 801fc3c:	d409      	bmi.n	801fc52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc3e:	42bd      	cmp	r5, r7
 801fc40:	da07      	bge.n	801fc52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc42:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fc44:	fb05 1202 	mla	r2, r5, r2, r1
 801fc48:	1412      	asrs	r2, r2, #16
 801fc4a:	d402      	bmi.n	801fc52 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc4c:	42b2      	cmp	r2, r6
 801fc4e:	f2c0 80ac 	blt.w	801fdaa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fc52:	f04f 0e00 	mov.w	lr, #0
 801fc56:	eb03 020e 	add.w	r2, r3, lr
 801fc5a:	2a00      	cmp	r2, #0
 801fc5c:	dc3e      	bgt.n	801fcdc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fc5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc66:	f1bb 0f00 	cmp.w	fp, #0
 801fc6a:	f340 80fe 	ble.w	801fe6a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fc6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc74:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc78:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc7c:	eeb0 6a62 	vmov.f32	s12, s5
 801fc80:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc8c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fc90:	eeb0 6a43 	vmov.f32	s12, s6
 801fc94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc98:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fc9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fca0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fca4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fca8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fcac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fcb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcb4:	ee12 2a90 	vmov	r2, s5
 801fcb8:	eef0 2a47 	vmov.f32	s5, s14
 801fcbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcc0:	ee13 2a10 	vmov	r2, s6
 801fcc4:	9313      	str	r3, [sp, #76]	; 0x4c
 801fcc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcc8:	eeb0 3a67 	vmov.f32	s6, s15
 801fccc:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcd0:	9a04      	ldr	r2, [sp, #16]
 801fcd2:	9314      	str	r3, [sp, #80]	; 0x50
 801fcd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fcd6:	bf08      	it	eq
 801fcd8:	4613      	moveq	r3, r2
 801fcda:	e787      	b.n	801fbec <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fcdc:	1406      	asrs	r6, r0, #16
 801fcde:	d45d      	bmi.n	801fd9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fce0:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fce4:	42b5      	cmp	r5, r6
 801fce6:	dd59      	ble.n	801fd9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fce8:	140f      	asrs	r7, r1, #16
 801fcea:	d457      	bmi.n	801fd9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fcec:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fcf0:	42ba      	cmp	r2, r7
 801fcf2:	dd53      	ble.n	801fd9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fcf4:	9a01      	ldr	r2, [sp, #4]
 801fcf6:	b22d      	sxth	r5, r5
 801fcf8:	fb07 2505 	mla	r5, r7, r5, r2
 801fcfc:	5daa      	ldrb	r2, [r5, r6]
 801fcfe:	9d02      	ldr	r5, [sp, #8]
 801fd00:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fd04:	0e2e      	lsrs	r6, r5, #24
 801fd06:	d049      	beq.n	801fd9c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd08:	f06f 0201 	mvn.w	r2, #1
 801fd0c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fd10:	fb02 f20e 	mul.w	r2, r2, lr
 801fd14:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fd18:	9203      	str	r2, [sp, #12]
 801fd1a:	9a05      	ldr	r2, [sp, #20]
 801fd1c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fd20:	4356      	muls	r6, r2
 801fd22:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fd26:	1c72      	adds	r2, r6, #1
 801fd28:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fd2c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd30:	b2ed      	uxtb	r5, r5
 801fd32:	1212      	asrs	r2, r2, #8
 801fd34:	fa1f f982 	uxth.w	r9, r2
 801fd38:	43d2      	mvns	r2, r2
 801fd3a:	fb16 f609 	smulbb	r6, r6, r9
 801fd3e:	b2d2      	uxtb	r2, r2
 801fd40:	fb15 f509 	smulbb	r5, r5, r9
 801fd44:	fb07 6702 	mla	r7, r7, r2, r6
 801fd48:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fd4c:	fb1a fa09 	smulbb	sl, sl, r9
 801fd50:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fd54:	b2bf      	uxth	r7, r7
 801fd56:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fd5a:	fa5f f888 	uxtb.w	r8, r8
 801fd5e:	fb06 a602 	mla	r6, r6, r2, sl
 801fd62:	fb08 5502 	mla	r5, r8, r2, r5
 801fd66:	1c7a      	adds	r2, r7, #1
 801fd68:	b2b6      	uxth	r6, r6
 801fd6a:	b2ad      	uxth	r5, r5
 801fd6c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fd70:	9a03      	ldr	r2, [sp, #12]
 801fd72:	f105 0a01 	add.w	sl, r5, #1
 801fd76:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fd7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fd7e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd82:	ea4a 0707 	orr.w	r7, sl, r7
 801fd86:	f106 0a01 	add.w	sl, r6, #1
 801fd8a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fd8e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fd92:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fd96:	ea47 070a 	orr.w	r7, r7, sl
 801fd9a:	52a7      	strh	r7, [r4, r2]
 801fd9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fd9e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fda2:	4410      	add	r0, r2
 801fda4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fda6:	4411      	add	r1, r2
 801fda8:	e755      	b.n	801fc56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fdaa:	f04f 0800 	mov.w	r8, #0
 801fdae:	eba3 0208 	sub.w	r2, r3, r8
 801fdb2:	2a00      	cmp	r2, #0
 801fdb4:	f77f af53 	ble.w	801fc5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fdb8:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801fdbc:	140a      	asrs	r2, r1, #16
 801fdbe:	9f01      	ldr	r7, [sp, #4]
 801fdc0:	1405      	asrs	r5, r0, #16
 801fdc2:	fb06 7202 	mla	r2, r6, r2, r7
 801fdc6:	5d52      	ldrb	r2, [r2, r5]
 801fdc8:	9d02      	ldr	r5, [sp, #8]
 801fdca:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fdce:	0e2e      	lsrs	r6, r5, #24
 801fdd0:	d044      	beq.n	801fe5c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fdd2:	9a05      	ldr	r2, [sp, #20]
 801fdd4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fdd8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fddc:	4356      	muls	r6, r2
 801fdde:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fde2:	1c72      	adds	r2, r6, #1
 801fde4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fde8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fdec:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fdf0:	b2ed      	uxtb	r5, r5
 801fdf2:	1212      	asrs	r2, r2, #8
 801fdf4:	fa1f f982 	uxth.w	r9, r2
 801fdf8:	43d2      	mvns	r2, r2
 801fdfa:	fb16 f609 	smulbb	r6, r6, r9
 801fdfe:	b2d2      	uxtb	r2, r2
 801fe00:	fb15 f509 	smulbb	r5, r5, r9
 801fe04:	fb07 6702 	mla	r7, r7, r2, r6
 801fe08:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fe0c:	fb1a fa09 	smulbb	sl, sl, r9
 801fe10:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe14:	b2bf      	uxth	r7, r7
 801fe16:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fe1a:	fa5f fe8e 	uxtb.w	lr, lr
 801fe1e:	fb06 a602 	mla	r6, r6, r2, sl
 801fe22:	fb0e 5502 	mla	r5, lr, r2, r5
 801fe26:	1c7a      	adds	r2, r7, #1
 801fe28:	b2b6      	uxth	r6, r6
 801fe2a:	b2ad      	uxth	r5, r5
 801fe2c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fe30:	f105 0a01 	add.w	sl, r5, #1
 801fe34:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fe38:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe3c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe40:	ea4a 0707 	orr.w	r7, sl, r7
 801fe44:	f106 0a01 	add.w	sl, r6, #1
 801fe48:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fe4c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe50:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe54:	ea47 070a 	orr.w	r7, r7, sl
 801fe58:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801fe5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fe5e:	f108 0801 	add.w	r8, r8, #1
 801fe62:	4410      	add	r0, r2
 801fe64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fe66:	4411      	add	r1, r2
 801fe68:	e7a1      	b.n	801fdae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fe6a:	b007      	add	sp, #28
 801fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe74:	b085      	sub	sp, #20
 801fe76:	468b      	mov	fp, r1
 801fe78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe7c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fe7e:	9203      	str	r2, [sp, #12]
 801fe80:	6841      	ldr	r1, [r0, #4]
 801fe82:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801fe86:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fe8a:	fb01 2404 	mla	r4, r1, r4, r2
 801fe8e:	6802      	ldr	r2, [r0, #0]
 801fe90:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fe94:	f8de 2000 	ldr.w	r2, [lr]
 801fe98:	9200      	str	r2, [sp, #0]
 801fe9a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fe9e:	3204      	adds	r2, #4
 801fea0:	9201      	str	r2, [sp, #4]
 801fea2:	f1bb 0f00 	cmp.w	fp, #0
 801fea6:	dc03      	bgt.n	801feb0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801fea8:	9a03      	ldr	r2, [sp, #12]
 801feaa:	2a00      	cmp	r2, #0
 801feac:	f340 8153 	ble.w	8020156 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801feb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801feb2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801feb6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801feba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801febc:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801fec0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	dd0e      	ble.n	801fee6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fec8:	1408      	asrs	r0, r1, #16
 801feca:	d405      	bmi.n	801fed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fecc:	42b8      	cmp	r0, r7
 801fece:	da03      	bge.n	801fed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fed0:	1410      	asrs	r0, r2, #16
 801fed2:	d401      	bmi.n	801fed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801fed4:	42b0      	cmp	r0, r6
 801fed6:	db07      	blt.n	801fee8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801fed8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801feda:	3b01      	subs	r3, #1
 801fedc:	3402      	adds	r4, #2
 801fede:	4401      	add	r1, r0
 801fee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fee2:	4402      	add	r2, r0
 801fee4:	e7ee      	b.n	801fec4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fee6:	d017      	beq.n	801ff18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801fee8:	1e58      	subs	r0, r3, #1
 801feea:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801feec:	fb05 1500 	mla	r5, r5, r0, r1
 801fef0:	142d      	asrs	r5, r5, #16
 801fef2:	d409      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fef4:	42bd      	cmp	r5, r7
 801fef6:	da07      	bge.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fef8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fefa:	fb05 2000 	mla	r0, r5, r0, r2
 801fefe:	1400      	asrs	r0, r0, #16
 801ff00:	d402      	bmi.n	801ff08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ff02:	42b0      	cmp	r0, r6
 801ff04:	f2c0 80bc 	blt.w	8020080 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ff08:	2600      	movs	r6, #0
 801ff0a:	1998      	adds	r0, r3, r6
 801ff0c:	2800      	cmp	r0, #0
 801ff0e:	dc3e      	bgt.n	801ff8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ff10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff18:	f1bb 0f00 	cmp.w	fp, #0
 801ff1c:	f340 811b 	ble.w	8020156 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ff20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff2a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff2e:	eeb0 6a62 	vmov.f32	s12, s5
 801ff32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff3e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ff42:	eeb0 6a43 	vmov.f32	s12, s6
 801ff46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff4a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ff4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff66:	ee12 2a90 	vmov	r2, s5
 801ff6a:	eef0 2a47 	vmov.f32	s5, s14
 801ff6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff72:	ee13 2a10 	vmov	r2, s6
 801ff76:	9311      	str	r3, [sp, #68]	; 0x44
 801ff78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff7a:	eeb0 3a67 	vmov.f32	s6, s15
 801ff7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff82:	9a03      	ldr	r2, [sp, #12]
 801ff84:	9312      	str	r3, [sp, #72]	; 0x48
 801ff86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff88:	bf08      	it	eq
 801ff8a:	4613      	moveq	r3, r2
 801ff8c:	e789      	b.n	801fea2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ff8e:	140f      	asrs	r7, r1, #16
 801ff90:	d426      	bmi.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff92:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ff96:	42bd      	cmp	r5, r7
 801ff98:	dd22      	ble.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ff9a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ff9e:	d41f      	bmi.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ffa0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ffa4:	4560      	cmp	r0, ip
 801ffa6:	dd1b      	ble.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ffa8:	9800      	ldr	r0, [sp, #0]
 801ffaa:	b22d      	sxth	r5, r5
 801ffac:	fb0c 0505 	mla	r5, ip, r5, r0
 801ffb0:	5de8      	ldrb	r0, [r5, r7]
 801ffb2:	9d01      	ldr	r5, [sp, #4]
 801ffb4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ffb8:	0e07      	lsrs	r7, r0, #24
 801ffba:	2fff      	cmp	r7, #255	; 0xff
 801ffbc:	d116      	bne.n	801ffec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ffbe:	f06f 0501 	mvn.w	r5, #1
 801ffc2:	fb05 f706 	mul.w	r7, r5, r6
 801ffc6:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ffca:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ffce:	0945      	lsrs	r5, r0, #5
 801ffd0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ffd4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ffd8:	ea4c 0505 	orr.w	r5, ip, r5
 801ffdc:	4305      	orrs	r5, r0
 801ffde:	53e5      	strh	r5, [r4, r7]
 801ffe0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ffe2:	3e01      	subs	r6, #1
 801ffe4:	4401      	add	r1, r0
 801ffe6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ffe8:	4402      	add	r2, r0
 801ffea:	e78e      	b.n	801ff0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ffec:	b2fd      	uxtb	r5, r7
 801ffee:	2f00      	cmp	r7, #0
 801fff0:	d0f6      	beq.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fff2:	f06f 0701 	mvn.w	r7, #1
 801fff6:	fa1f f985 	uxth.w	r9, r5
 801fffa:	43ed      	mvns	r5, r5
 801fffc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020000:	4377      	muls	r7, r6
 8020002:	fb1a fa09 	smulbb	sl, sl, r9
 8020006:	b2ed      	uxtb	r5, r5
 8020008:	f834 8007 	ldrh.w	r8, [r4, r7]
 802000c:	9702      	str	r7, [sp, #8]
 802000e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020012:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020016:	fb17 f709 	smulbb	r7, r7, r9
 802001a:	b2c0      	uxtb	r0, r0
 802001c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020020:	fb10 f009 	smulbb	r0, r0, r9
 8020024:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020028:	ea4f 07e8 	mov.w	r7, r8, asr #3
 802002c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020030:	fa1f fc8c 	uxth.w	ip, ip
 8020034:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020038:	fa5f f888 	uxtb.w	r8, r8
 802003c:	fb07 a705 	mla	r7, r7, r5, sl
 8020040:	fb08 0005 	mla	r0, r8, r5, r0
 8020044:	f10c 0501 	add.w	r5, ip, #1
 8020048:	b2bf      	uxth	r7, r7
 802004a:	b280      	uxth	r0, r0
 802004c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020050:	f100 0a01 	add.w	sl, r0, #1
 8020054:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020058:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 802005c:	9802      	ldr	r0, [sp, #8]
 802005e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020062:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020066:	f107 0a01 	add.w	sl, r7, #1
 802006a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 802006e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020072:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020076:	ea4c 0c0a 	orr.w	ip, ip, sl
 802007a:	f824 c000 	strh.w	ip, [r4, r0]
 802007e:	e7af      	b.n	801ffe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020080:	f04f 0800 	mov.w	r8, #0
 8020084:	eba3 0008 	sub.w	r0, r3, r8
 8020088:	2800      	cmp	r0, #0
 802008a:	f77f af41 	ble.w	801ff10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802008e:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020092:	1410      	asrs	r0, r2, #16
 8020094:	9f00      	ldr	r7, [sp, #0]
 8020096:	140d      	asrs	r5, r1, #16
 8020098:	fb06 7000 	mla	r0, r6, r0, r7
 802009c:	5d40      	ldrb	r0, [r0, r5]
 802009e:	9d01      	ldr	r5, [sp, #4]
 80200a0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80200a4:	0e2e      	lsrs	r6, r5, #24
 80200a6:	2eff      	cmp	r6, #255	; 0xff
 80200a8:	d112      	bne.n	80200d0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80200aa:	482c      	ldr	r0, [pc, #176]	; (802015c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80200ac:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80200b0:	0968      	lsrs	r0, r5, #5
 80200b2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80200b6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80200ba:	4330      	orrs	r0, r6
 80200bc:	4328      	orrs	r0, r5
 80200be:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80200c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80200c4:	f108 0801 	add.w	r8, r8, #1
 80200c8:	4401      	add	r1, r0
 80200ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80200cc:	4402      	add	r2, r0
 80200ce:	e7d9      	b.n	8020084 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80200d0:	b2f0      	uxtb	r0, r6
 80200d2:	2e00      	cmp	r6, #0
 80200d4:	d0f5      	beq.n	80200c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80200d6:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80200da:	fa1f f980 	uxth.w	r9, r0
 80200de:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80200e2:	43c0      	mvns	r0, r0
 80200e4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80200e8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80200ec:	fb16 f609 	smulbb	r6, r6, r9
 80200f0:	b2c0      	uxtb	r0, r0
 80200f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80200f6:	b2ed      	uxtb	r5, r5
 80200f8:	fb1a fa09 	smulbb	sl, sl, r9
 80200fc:	fb07 6700 	mla	r7, r7, r0, r6
 8020100:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020104:	fb15 f509 	smulbb	r5, r5, r9
 8020108:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802010c:	b2bf      	uxth	r7, r7
 802010e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020112:	fa5f fc8c 	uxtb.w	ip, ip
 8020116:	fb06 a600 	mla	r6, r6, r0, sl
 802011a:	fb0c 5500 	mla	r5, ip, r0, r5
 802011e:	1c78      	adds	r0, r7, #1
 8020120:	b2b6      	uxth	r6, r6
 8020122:	b2ad      	uxth	r5, r5
 8020124:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020128:	f105 0a01 	add.w	sl, r5, #1
 802012c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8020130:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020134:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020138:	ea4a 0707 	orr.w	r7, sl, r7
 802013c:	f106 0a01 	add.w	sl, r6, #1
 8020140:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020144:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020148:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802014c:	ea47 070a 	orr.w	r7, r7, sl
 8020150:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8020154:	e7b5      	b.n	80200c2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020156:	b005      	add	sp, #20
 8020158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802015c:	fffff800 	.word	0xfffff800

08020160 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020164:	b087      	sub	sp, #28
 8020166:	468b      	mov	fp, r1
 8020168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802016c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802016e:	9204      	str	r2, [sp, #16]
 8020170:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020174:	6861      	ldr	r1, [r4, #4]
 8020176:	9205      	str	r2, [sp, #20]
 8020178:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 802017c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020180:	fb01 2000 	mla	r0, r1, r0, r2
 8020184:	6822      	ldr	r2, [r4, #0]
 8020186:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 802018a:	f8de 2000 	ldr.w	r2, [lr]
 802018e:	9201      	str	r2, [sp, #4]
 8020190:	f8de 2004 	ldr.w	r2, [lr, #4]
 8020194:	9202      	str	r2, [sp, #8]
 8020196:	f1bb 0f00 	cmp.w	fp, #0
 802019a:	dc03      	bgt.n	80201a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802019c:	9a04      	ldr	r2, [sp, #16]
 802019e:	2a00      	cmp	r2, #0
 80201a0:	f340 8142 	ble.w	8020428 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80201a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80201a6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80201aa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80201ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80201b0:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80201b4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	dd0e      	ble.n	80201da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80201bc:	140c      	asrs	r4, r1, #16
 80201be:	d405      	bmi.n	80201cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80201c0:	42bc      	cmp	r4, r7
 80201c2:	da03      	bge.n	80201cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80201c4:	1414      	asrs	r4, r2, #16
 80201c6:	d401      	bmi.n	80201cc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80201c8:	42b4      	cmp	r4, r6
 80201ca:	db07      	blt.n	80201dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80201cc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80201ce:	3b01      	subs	r3, #1
 80201d0:	3002      	adds	r0, #2
 80201d2:	4421      	add	r1, r4
 80201d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80201d6:	4422      	add	r2, r4
 80201d8:	e7ee      	b.n	80201b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80201da:	d019      	beq.n	8020210 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80201dc:	1e5c      	subs	r4, r3, #1
 80201de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80201e0:	fb05 1504 	mla	r5, r5, r4, r1
 80201e4:	142d      	asrs	r5, r5, #16
 80201e6:	d409      	bmi.n	80201fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80201e8:	42bd      	cmp	r5, r7
 80201ea:	da07      	bge.n	80201fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80201ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80201ee:	fb05 2404 	mla	r4, r5, r4, r2
 80201f2:	1424      	asrs	r4, r4, #16
 80201f4:	d402      	bmi.n	80201fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80201f6:	42b4      	cmp	r4, r6
 80201f8:	f2c0 80b1 	blt.w	802035e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80201fc:	f04f 0800 	mov.w	r8, #0
 8020200:	eb03 0408 	add.w	r4, r3, r8
 8020204:	2c00      	cmp	r4, #0
 8020206:	dc3e      	bgt.n	8020286 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020208:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802020c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020210:	f1bb 0f00 	cmp.w	fp, #0
 8020214:	f340 8108 	ble.w	8020428 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020218:	ee30 0a04 	vadd.f32	s0, s0, s8
 802021c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802021e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020222:	f1bb 0b01 	subs.w	fp, fp, #1
 8020226:	eeb0 6a62 	vmov.f32	s12, s5
 802022a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802022e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020232:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020236:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802023a:	eeb0 6a43 	vmov.f32	s12, s6
 802023e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020242:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020246:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802024a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802024e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020252:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020256:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802025a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802025e:	ee12 2a90 	vmov	r2, s5
 8020262:	eef0 2a47 	vmov.f32	s5, s14
 8020266:	fb92 f3f3 	sdiv	r3, r2, r3
 802026a:	ee13 2a10 	vmov	r2, s6
 802026e:	9313      	str	r3, [sp, #76]	; 0x4c
 8020270:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020272:	eeb0 3a67 	vmov.f32	s6, s15
 8020276:	fb92 f3f3 	sdiv	r3, r2, r3
 802027a:	9a04      	ldr	r2, [sp, #16]
 802027c:	9314      	str	r3, [sp, #80]	; 0x50
 802027e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020280:	bf08      	it	eq
 8020282:	4613      	moveq	r3, r2
 8020284:	e787      	b.n	8020196 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020286:	140e      	asrs	r6, r1, #16
 8020288:	d462      	bmi.n	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802028a:	f8de 5008 	ldr.w	r5, [lr, #8]
 802028e:	42b5      	cmp	r5, r6
 8020290:	dd5e      	ble.n	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020292:	1417      	asrs	r7, r2, #16
 8020294:	d45c      	bmi.n	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020296:	f8de 400c 	ldr.w	r4, [lr, #12]
 802029a:	42bc      	cmp	r4, r7
 802029c:	dd58      	ble.n	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802029e:	b22d      	sxth	r5, r5
 80202a0:	9c02      	ldr	r4, [sp, #8]
 80202a2:	fb07 6505 	mla	r5, r7, r5, r6
 80202a6:	5d66      	ldrb	r6, [r4, r5]
 80202a8:	2e00      	cmp	r6, #0
 80202aa:	d051      	beq.n	8020350 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202ac:	9c01      	ldr	r4, [sp, #4]
 80202ae:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80202b2:	f06f 0401 	mvn.w	r4, #1
 80202b6:	fb04 f408 	mul.w	r4, r4, r8
 80202ba:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80202be:	5b05      	ldrh	r5, [r0, r4]
 80202c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80202c4:	9403      	str	r4, [sp, #12]
 80202c6:	9c05      	ldr	r4, [sp, #20]
 80202c8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80202cc:	4366      	muls	r6, r4
 80202ce:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80202d2:	1c74      	adds	r4, r6, #1
 80202d4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80202d8:	122e      	asrs	r6, r5, #8
 80202da:	1224      	asrs	r4, r4, #8
 80202dc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80202e0:	00ed      	lsls	r5, r5, #3
 80202e2:	b2a7      	uxth	r7, r4
 80202e4:	43e4      	mvns	r4, r4
 80202e6:	b2ed      	uxtb	r5, r5
 80202e8:	b2e4      	uxtb	r4, r4
 80202ea:	fb16 f604 	smulbb	r6, r6, r4
 80202ee:	fb15 f504 	smulbb	r5, r5, r4
 80202f2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80202f6:	ea4f 06e9 	mov.w	r6, r9, asr #3
 80202fa:	fb1a fa04 	smulbb	sl, sl, r4
 80202fe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020302:	fa1f fc8c 	uxth.w	ip, ip
 8020306:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802030a:	fa5f f989 	uxtb.w	r9, r9
 802030e:	fb06 a607 	mla	r6, r6, r7, sl
 8020312:	f10c 0401 	add.w	r4, ip, #1
 8020316:	fb09 5507 	mla	r5, r9, r7, r5
 802031a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802031e:	9c03      	ldr	r4, [sp, #12]
 8020320:	b2ad      	uxth	r5, r5
 8020322:	b2b6      	uxth	r6, r6
 8020324:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020328:	f105 0a01 	add.w	sl, r5, #1
 802032c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020330:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020334:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020338:	f106 0a01 	add.w	sl, r6, #1
 802033c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020340:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020344:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020348:	ea4c 0c0a 	orr.w	ip, ip, sl
 802034c:	f820 c004 	strh.w	ip, [r0, r4]
 8020350:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020352:	f108 38ff 	add.w	r8, r8, #4294967295
 8020356:	4421      	add	r1, r4
 8020358:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802035a:	4422      	add	r2, r4
 802035c:	e750      	b.n	8020200 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802035e:	f04f 0900 	mov.w	r9, #0
 8020362:	eba3 0409 	sub.w	r4, r3, r9
 8020366:	2c00      	cmp	r4, #0
 8020368:	f77f af4e 	ble.w	8020208 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802036c:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8020370:	140d      	asrs	r5, r1, #16
 8020372:	1414      	asrs	r4, r2, #16
 8020374:	fb06 5404 	mla	r4, r6, r4, r5
 8020378:	9d02      	ldr	r5, [sp, #8]
 802037a:	5d2e      	ldrb	r6, [r5, r4]
 802037c:	2e00      	cmp	r6, #0
 802037e:	d04c      	beq.n	802041a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8020380:	9d01      	ldr	r5, [sp, #4]
 8020382:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8020386:	9c05      	ldr	r4, [sp, #20]
 8020388:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 802038c:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020390:	4366      	muls	r6, r4
 8020392:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020396:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802039a:	1c74      	adds	r4, r6, #1
 802039c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80203a0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80203a4:	122e      	asrs	r6, r5, #8
 80203a6:	1224      	asrs	r4, r4, #8
 80203a8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80203ac:	00ed      	lsls	r5, r5, #3
 80203ae:	b2a7      	uxth	r7, r4
 80203b0:	43e4      	mvns	r4, r4
 80203b2:	b2ed      	uxtb	r5, r5
 80203b4:	b2e4      	uxtb	r4, r4
 80203b6:	fb16 f604 	smulbb	r6, r6, r4
 80203ba:	fb15 f504 	smulbb	r5, r5, r4
 80203be:	fb0c 6c07 	mla	ip, ip, r7, r6
 80203c2:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80203c6:	fb1a fa04 	smulbb	sl, sl, r4
 80203ca:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80203ce:	fa1f fc8c 	uxth.w	ip, ip
 80203d2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203d6:	fa5f f888 	uxtb.w	r8, r8
 80203da:	fb06 a607 	mla	r6, r6, r7, sl
 80203de:	f10c 0401 	add.w	r4, ip, #1
 80203e2:	fb08 5507 	mla	r5, r8, r7, r5
 80203e6:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80203ea:	b2ad      	uxth	r5, r5
 80203ec:	b2b6      	uxth	r6, r6
 80203ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80203f2:	f105 0a01 	add.w	sl, r5, #1
 80203f6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80203fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203fe:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020402:	f106 0a01 	add.w	sl, r6, #1
 8020406:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802040a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802040e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020412:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020416:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802041a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802041c:	f109 0901 	add.w	r9, r9, #1
 8020420:	4421      	add	r1, r4
 8020422:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020424:	4422      	add	r2, r4
 8020426:	e79c      	b.n	8020362 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020428:	b007      	add	sp, #28
 802042a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802042e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802042e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020432:	b085      	sub	sp, #20
 8020434:	468b      	mov	fp, r1
 8020436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802043a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802043c:	9203      	str	r2, [sp, #12]
 802043e:	6861      	ldr	r1, [r4, #4]
 8020440:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020444:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8020448:	fb01 2000 	mla	r0, r1, r0, r2
 802044c:	6822      	ldr	r2, [r4, #0]
 802044e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8020452:	f8d8 2000 	ldr.w	r2, [r8]
 8020456:	9200      	str	r2, [sp, #0]
 8020458:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802045c:	9201      	str	r2, [sp, #4]
 802045e:	f1bb 0f00 	cmp.w	fp, #0
 8020462:	dc03      	bgt.n	802046c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020464:	9a03      	ldr	r2, [sp, #12]
 8020466:	2a00      	cmp	r2, #0
 8020468:	f340 8146 	ble.w	80206f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802046c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802046e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020472:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020476:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020478:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802047c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020480:	2b00      	cmp	r3, #0
 8020482:	dd0e      	ble.n	80204a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020484:	140c      	asrs	r4, r1, #16
 8020486:	d405      	bmi.n	8020494 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020488:	42bc      	cmp	r4, r7
 802048a:	da03      	bge.n	8020494 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802048c:	1414      	asrs	r4, r2, #16
 802048e:	d401      	bmi.n	8020494 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020490:	42b4      	cmp	r4, r6
 8020492:	db07      	blt.n	80204a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020494:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020496:	3b01      	subs	r3, #1
 8020498:	3002      	adds	r0, #2
 802049a:	4421      	add	r1, r4
 802049c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802049e:	4422      	add	r2, r4
 80204a0:	e7ee      	b.n	8020480 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80204a2:	d017      	beq.n	80204d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80204a4:	1e5c      	subs	r4, r3, #1
 80204a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80204a8:	fb05 1504 	mla	r5, r5, r4, r1
 80204ac:	142d      	asrs	r5, r5, #16
 80204ae:	d409      	bmi.n	80204c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80204b0:	42bd      	cmp	r5, r7
 80204b2:	da07      	bge.n	80204c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80204b4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204b6:	fb05 2404 	mla	r4, r5, r4, r2
 80204ba:	1424      	asrs	r4, r4, #16
 80204bc:	d402      	bmi.n	80204c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80204be:	42b4      	cmp	r4, r6
 80204c0:	f2c0 80b3 	blt.w	802062a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80204c4:	2600      	movs	r6, #0
 80204c6:	199c      	adds	r4, r3, r6
 80204c8:	2c00      	cmp	r4, #0
 80204ca:	dc3e      	bgt.n	802054a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80204cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80204d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80204d4:	f1bb 0f00 	cmp.w	fp, #0
 80204d8:	f340 810e 	ble.w	80206f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80204dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80204e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80204e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80204e6:	f1bb 0b01 	subs.w	fp, fp, #1
 80204ea:	eeb0 6a62 	vmov.f32	s12, s5
 80204ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80204f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80204f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80204fa:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80204fe:	eeb0 6a43 	vmov.f32	s12, s6
 8020502:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020506:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802050a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802050e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020512:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020516:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802051a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802051e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020522:	ee12 2a90 	vmov	r2, s5
 8020526:	eef0 2a47 	vmov.f32	s5, s14
 802052a:	fb92 f3f3 	sdiv	r3, r2, r3
 802052e:	ee13 2a10 	vmov	r2, s6
 8020532:	9311      	str	r3, [sp, #68]	; 0x44
 8020534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020536:	eeb0 3a67 	vmov.f32	s6, s15
 802053a:	fb92 f3f3 	sdiv	r3, r2, r3
 802053e:	9a03      	ldr	r2, [sp, #12]
 8020540:	9312      	str	r3, [sp, #72]	; 0x48
 8020542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020544:	bf08      	it	eq
 8020546:	4613      	moveq	r3, r2
 8020548:	e789      	b.n	802045e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802054a:	140f      	asrs	r7, r1, #16
 802054c:	d418      	bmi.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802054e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020552:	42bd      	cmp	r5, r7
 8020554:	dd14      	ble.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020556:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802055a:	d411      	bmi.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802055c:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8020560:	4564      	cmp	r4, ip
 8020562:	dd0d      	ble.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020564:	b22d      	sxth	r5, r5
 8020566:	9c01      	ldr	r4, [sp, #4]
 8020568:	fb0c 7505 	mla	r5, ip, r5, r7
 802056c:	5d64      	ldrb	r4, [r4, r5]
 802056e:	2cff      	cmp	r4, #255	; 0xff
 8020570:	d10c      	bne.n	802058c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8020572:	9c00      	ldr	r4, [sp, #0]
 8020574:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8020578:	f06f 0401 	mvn.w	r4, #1
 802057c:	4374      	muls	r4, r6
 802057e:	5305      	strh	r5, [r0, r4]
 8020580:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020582:	3e01      	subs	r6, #1
 8020584:	4421      	add	r1, r4
 8020586:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020588:	4422      	add	r2, r4
 802058a:	e79c      	b.n	80204c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802058c:	2c00      	cmp	r4, #0
 802058e:	d0f7      	beq.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8020590:	9f00      	ldr	r7, [sp, #0]
 8020592:	fa1f fc84 	uxth.w	ip, r4
 8020596:	43e4      	mvns	r4, r4
 8020598:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 802059c:	f06f 0501 	mvn.w	r5, #1
 80205a0:	b2e4      	uxtb	r4, r4
 80205a2:	4375      	muls	r5, r6
 80205a4:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80205a8:	9502      	str	r5, [sp, #8]
 80205aa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80205ae:	5b45      	ldrh	r5, [r0, r5]
 80205b0:	122f      	asrs	r7, r5, #8
 80205b2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80205b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80205ba:	00ed      	lsls	r5, r5, #3
 80205bc:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80205c0:	fb17 f704 	smulbb	r7, r7, r4
 80205c4:	b2ed      	uxtb	r5, r5
 80205c6:	fb1a fa04 	smulbb	sl, sl, r4
 80205ca:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80205ce:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80205d2:	fb15 f504 	smulbb	r5, r5, r4
 80205d6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80205da:	fa1f fe8e 	uxth.w	lr, lr
 80205de:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80205e2:	fa5f f989 	uxtb.w	r9, r9
 80205e6:	fb07 a70c 	mla	r7, r7, ip, sl
 80205ea:	f10e 0401 	add.w	r4, lr, #1
 80205ee:	fb09 550c 	mla	r5, r9, ip, r5
 80205f2:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 80205f6:	9c02      	ldr	r4, [sp, #8]
 80205f8:	b2ad      	uxth	r5, r5
 80205fa:	b2bf      	uxth	r7, r7
 80205fc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020600:	f105 0a01 	add.w	sl, r5, #1
 8020604:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020608:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802060c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020610:	f107 0a01 	add.w	sl, r7, #1
 8020614:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020618:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802061c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020620:	ea4e 0e0a 	orr.w	lr, lr, sl
 8020624:	f820 e004 	strh.w	lr, [r0, r4]
 8020628:	e7aa      	b.n	8020580 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802062a:	f04f 0900 	mov.w	r9, #0
 802062e:	eba3 0409 	sub.w	r4, r3, r9
 8020632:	2c00      	cmp	r4, #0
 8020634:	f77f af4a 	ble.w	80204cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020638:	1414      	asrs	r4, r2, #16
 802063a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802063e:	140d      	asrs	r5, r1, #16
 8020640:	fb06 5504 	mla	r5, r6, r4, r5
 8020644:	9c01      	ldr	r4, [sp, #4]
 8020646:	5d64      	ldrb	r4, [r4, r5]
 8020648:	2cff      	cmp	r4, #255	; 0xff
 802064a:	d10b      	bne.n	8020664 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802064c:	9c00      	ldr	r4, [sp, #0]
 802064e:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8020652:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8020656:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020658:	f109 0901 	add.w	r9, r9, #1
 802065c:	4421      	add	r1, r4
 802065e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020660:	4422      	add	r2, r4
 8020662:	e7e4      	b.n	802062e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8020664:	2c00      	cmp	r4, #0
 8020666:	d0f6      	beq.n	8020656 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020668:	9e00      	ldr	r6, [sp, #0]
 802066a:	b2a7      	uxth	r7, r4
 802066c:	43e4      	mvns	r4, r4
 802066e:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8020672:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8020676:	b2e4      	uxtb	r4, r4
 8020678:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802067c:	122e      	asrs	r6, r5, #8
 802067e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020682:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020686:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802068a:	00ed      	lsls	r5, r5, #3
 802068c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020690:	fb16 f604 	smulbb	r6, r6, r4
 8020694:	b2ed      	uxtb	r5, r5
 8020696:	fb1a fa04 	smulbb	sl, sl, r4
 802069a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802069e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80206a2:	fb15 f504 	smulbb	r5, r5, r4
 80206a6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80206aa:	fa1f fc8c 	uxth.w	ip, ip
 80206ae:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80206b2:	fa5f fe8e 	uxtb.w	lr, lr
 80206b6:	fb06 a607 	mla	r6, r6, r7, sl
 80206ba:	f10c 0401 	add.w	r4, ip, #1
 80206be:	fb0e 5507 	mla	r5, lr, r7, r5
 80206c2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80206c6:	b2ad      	uxth	r5, r5
 80206c8:	b2b6      	uxth	r6, r6
 80206ca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80206ce:	f105 0a01 	add.w	sl, r5, #1
 80206d2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80206d6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80206da:	ea4a 0c0c 	orr.w	ip, sl, ip
 80206de:	f106 0a01 	add.w	sl, r6, #1
 80206e2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80206e6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80206ea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80206ee:	ea4c 0c0a 	orr.w	ip, ip, sl
 80206f2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80206f6:	e7ae      	b.n	8020656 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80206f8:	b005      	add	sp, #20
 80206fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080206fe <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80206fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020702:	b085      	sub	sp, #20
 8020704:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020706:	9203      	str	r2, [sp, #12]
 8020708:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 802070c:	9100      	str	r1, [sp, #0]
 802070e:	9201      	str	r2, [sp, #4]
 8020710:	6841      	ldr	r1, [r0, #4]
 8020712:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8020716:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802071a:	fb01 2404 	mla	r4, r1, r4, r2
 802071e:	6802      	ldr	r2, [r0, #0]
 8020720:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020724:	f8de 2000 	ldr.w	r2, [lr]
 8020728:	9202      	str	r2, [sp, #8]
 802072a:	9a01      	ldr	r2, [sp, #4]
 802072c:	43d6      	mvns	r6, r2
 802072e:	b2f6      	uxtb	r6, r6
 8020730:	9a00      	ldr	r2, [sp, #0]
 8020732:	2a00      	cmp	r2, #0
 8020734:	dc03      	bgt.n	802073e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020736:	9a03      	ldr	r2, [sp, #12]
 8020738:	2a00      	cmp	r2, #0
 802073a:	f340 8124 	ble.w	8020986 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802073e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020740:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8020744:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020748:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802074a:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 802074e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020752:	2b00      	cmp	r3, #0
 8020754:	dd0e      	ble.n	8020774 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020756:	1408      	asrs	r0, r1, #16
 8020758:	d405      	bmi.n	8020766 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802075a:	4560      	cmp	r0, ip
 802075c:	da03      	bge.n	8020766 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802075e:	1410      	asrs	r0, r2, #16
 8020760:	d401      	bmi.n	8020766 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8020762:	42b8      	cmp	r0, r7
 8020764:	db07      	blt.n	8020776 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020766:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020768:	3b01      	subs	r3, #1
 802076a:	3402      	adds	r4, #2
 802076c:	4401      	add	r1, r0
 802076e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020770:	4402      	add	r2, r0
 8020772:	e7ee      	b.n	8020752 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8020774:	d06e      	beq.n	8020854 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8020776:	1e58      	subs	r0, r3, #1
 8020778:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802077a:	fb05 1500 	mla	r5, r5, r0, r1
 802077e:	142d      	asrs	r5, r5, #16
 8020780:	d45c      	bmi.n	802083c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020782:	4565      	cmp	r5, ip
 8020784:	da5a      	bge.n	802083c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020786:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020788:	fb05 2000 	mla	r0, r5, r0, r2
 802078c:	1400      	asrs	r0, r0, #16
 802078e:	d455      	bmi.n	802083c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020790:	42b8      	cmp	r0, r7
 8020792:	da53      	bge.n	802083c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020794:	4699      	mov	r9, r3
 8020796:	46a2      	mov	sl, r4
 8020798:	f8bd b004 	ldrh.w	fp, [sp, #4]
 802079c:	f1b9 0f00 	cmp.w	r9, #0
 80207a0:	dd54      	ble.n	802084c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80207a2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80207a6:	140d      	asrs	r5, r1, #16
 80207a8:	1410      	asrs	r0, r2, #16
 80207aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80207ae:	fb07 5000 	mla	r0, r7, r0, r5
 80207b2:	9d02      	ldr	r5, [sp, #8]
 80207b4:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80207b8:	f8ba 5000 	ldrh.w	r5, [sl]
 80207bc:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80207c0:	122f      	asrs	r7, r5, #8
 80207c2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80207c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80207ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80207ce:	00ed      	lsls	r5, r5, #3
 80207d0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80207d4:	fb17 f706 	smulbb	r7, r7, r6
 80207d8:	b2ed      	uxtb	r5, r5
 80207da:	fb18 f806 	smulbb	r8, r8, r6
 80207de:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80207e2:	10c7      	asrs	r7, r0, #3
 80207e4:	fb15 f506 	smulbb	r5, r5, r6
 80207e8:	00c0      	lsls	r0, r0, #3
 80207ea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80207ee:	fa1f fc8c 	uxth.w	ip, ip
 80207f2:	b2c0      	uxtb	r0, r0
 80207f4:	fb07 870b 	mla	r7, r7, fp, r8
 80207f8:	fb00 500b 	mla	r0, r0, fp, r5
 80207fc:	f10c 0501 	add.w	r5, ip, #1
 8020800:	b2bf      	uxth	r7, r7
 8020802:	b280      	uxth	r0, r0
 8020804:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020808:	f107 0801 	add.w	r8, r7, #1
 802080c:	1c45      	adds	r5, r0, #1
 802080e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8020812:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020816:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802081a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802081c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020820:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020824:	4401      	add	r1, r0
 8020826:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802082a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802082c:	ea45 0c0c 	orr.w	ip, r5, ip
 8020830:	4402      	add	r2, r0
 8020832:	ea4c 0c08 	orr.w	ip, ip, r8
 8020836:	f82a cb02 	strh.w	ip, [sl], #2
 802083a:	e7af      	b.n	802079c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802083c:	f04f 0800 	mov.w	r8, #0
 8020840:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8020844:	eb03 0008 	add.w	r0, r3, r8
 8020848:	2800      	cmp	r0, #0
 802084a:	dc41      	bgt.n	80208d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802084c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020850:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020854:	9b00      	ldr	r3, [sp, #0]
 8020856:	2b00      	cmp	r3, #0
 8020858:	f340 8095 	ble.w	8020986 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802085c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020862:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020866:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802086a:	eef0 6a62 	vmov.f32	s13, s5
 802086e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020872:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802087a:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 802087e:	eef0 6a43 	vmov.f32	s13, s6
 8020882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020886:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 802088a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802088e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020892:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020896:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802089a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802089e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80208a2:	ee12 2a90 	vmov	r2, s5
 80208a6:	eef0 2a47 	vmov.f32	s5, s14
 80208aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80208ae:	ee13 2a10 	vmov	r2, s6
 80208b2:	9311      	str	r3, [sp, #68]	; 0x44
 80208b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208b6:	eeb0 3a67 	vmov.f32	s6, s15
 80208ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80208be:	9312      	str	r3, [sp, #72]	; 0x48
 80208c0:	9b00      	ldr	r3, [sp, #0]
 80208c2:	9a03      	ldr	r2, [sp, #12]
 80208c4:	3b01      	subs	r3, #1
 80208c6:	9300      	str	r3, [sp, #0]
 80208c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80208ca:	bf08      	it	eq
 80208cc:	4613      	moveq	r3, r2
 80208ce:	e72f      	b.n	8020730 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80208d0:	140f      	asrs	r7, r1, #16
 80208d2:	d451      	bmi.n	8020978 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80208d4:	f8de 5008 	ldr.w	r5, [lr, #8]
 80208d8:	42bd      	cmp	r5, r7
 80208da:	dd4d      	ble.n	8020978 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80208dc:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80208e0:	d44a      	bmi.n	8020978 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80208e2:	f8de 000c 	ldr.w	r0, [lr, #12]
 80208e6:	4560      	cmp	r0, ip
 80208e8:	dd46      	ble.n	8020978 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80208ea:	b22d      	sxth	r5, r5
 80208ec:	9802      	ldr	r0, [sp, #8]
 80208ee:	fb0c 7505 	mla	r5, ip, r5, r7
 80208f2:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80208f6:	f06f 0501 	mvn.w	r5, #1
 80208fa:	fb05 fb08 	mul.w	fp, r5, r8
 80208fe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020902:	f834 500b 	ldrh.w	r5, [r4, fp]
 8020906:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802090a:	122f      	asrs	r7, r5, #8
 802090c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020910:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020914:	00ed      	lsls	r5, r5, #3
 8020916:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 802091a:	fb17 f706 	smulbb	r7, r7, r6
 802091e:	b2ed      	uxtb	r5, r5
 8020920:	fb19 f906 	smulbb	r9, r9, r6
 8020924:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020928:	10c7      	asrs	r7, r0, #3
 802092a:	fb15 f506 	smulbb	r5, r5, r6
 802092e:	00c0      	lsls	r0, r0, #3
 8020930:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020934:	fa1f fc8c 	uxth.w	ip, ip
 8020938:	b2c0      	uxtb	r0, r0
 802093a:	fb07 970a 	mla	r7, r7, sl, r9
 802093e:	fb00 500a 	mla	r0, r0, sl, r5
 8020942:	f10c 0501 	add.w	r5, ip, #1
 8020946:	b2bf      	uxth	r7, r7
 8020948:	b280      	uxth	r0, r0
 802094a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 802094e:	f107 0901 	add.w	r9, r7, #1
 8020952:	1c45      	adds	r5, r0, #1
 8020954:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8020958:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802095c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8020960:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8020964:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020968:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802096c:	ea45 0c0c 	orr.w	ip, r5, ip
 8020970:	ea4c 0c09 	orr.w	ip, ip, r9
 8020974:	f824 c00b 	strh.w	ip, [r4, fp]
 8020978:	9811      	ldr	r0, [sp, #68]	; 0x44
 802097a:	f108 38ff 	add.w	r8, r8, #4294967295
 802097e:	4401      	add	r1, r0
 8020980:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020982:	4402      	add	r2, r0
 8020984:	e75e      	b.n	8020844 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8020986:	b005      	add	sp, #20
 8020988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802098c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020990:	b085      	sub	sp, #20
 8020992:	4693      	mov	fp, r2
 8020994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020998:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 802099a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802099c:	6870      	ldr	r0, [r6, #4]
 802099e:	9101      	str	r1, [sp, #4]
 80209a0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80209a4:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80209a8:	fb00 2404 	mla	r4, r0, r4, r2
 80209ac:	6832      	ldr	r2, [r6, #0]
 80209ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80209b2:	682a      	ldr	r2, [r5, #0]
 80209b4:	9202      	str	r2, [sp, #8]
 80209b6:	9a01      	ldr	r2, [sp, #4]
 80209b8:	2a00      	cmp	r2, #0
 80209ba:	dc03      	bgt.n	80209c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80209bc:	f1bb 0f00 	cmp.w	fp, #0
 80209c0:	f340 809a 	ble.w	8020af8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80209c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80209c6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80209ca:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80209ce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80209d0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80209d4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80209d8:	2b00      	cmp	r3, #0
 80209da:	dd0c      	ble.n	80209f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80209dc:	1406      	asrs	r6, r0, #16
 80209de:	d405      	bmi.n	80209ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80209e0:	454e      	cmp	r6, r9
 80209e2:	da03      	bge.n	80209ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80209e4:	1416      	asrs	r6, r2, #16
 80209e6:	d401      	bmi.n	80209ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80209e8:	4546      	cmp	r6, r8
 80209ea:	db05      	blt.n	80209f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80209ec:	4470      	add	r0, lr
 80209ee:	4462      	add	r2, ip
 80209f0:	3b01      	subs	r3, #1
 80209f2:	3402      	adds	r4, #2
 80209f4:	e7f0      	b.n	80209d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80209f6:	d00f      	beq.n	8020a18 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80209f8:	1e5e      	subs	r6, r3, #1
 80209fa:	fb0e 0706 	mla	r7, lr, r6, r0
 80209fe:	143f      	asrs	r7, r7, #16
 8020a00:	d541      	bpl.n	8020a86 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8020a02:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020a06:	4698      	mov	r8, r3
 8020a08:	9603      	str	r6, [sp, #12]
 8020a0a:	f1b8 0f00 	cmp.w	r8, #0
 8020a0e:	dc56      	bgt.n	8020abe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020a10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020a18:	9b01      	ldr	r3, [sp, #4]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	dd6c      	ble.n	8020af8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020a1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a28:	eeb0 6a62 	vmov.f32	s12, s5
 8020a2c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020a30:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a38:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020a3c:	eeb0 6a43 	vmov.f32	s12, s6
 8020a40:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a44:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020a48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020a4c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020a50:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020a54:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020a58:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020a5c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020a60:	ee12 2a90 	vmov	r2, s5
 8020a64:	eef0 2a47 	vmov.f32	s5, s14
 8020a68:	fb92 fef3 	sdiv	lr, r2, r3
 8020a6c:	ee13 2a10 	vmov	r2, s6
 8020a70:	eeb0 3a67 	vmov.f32	s6, s15
 8020a74:	fb92 fcf3 	sdiv	ip, r2, r3
 8020a78:	9b01      	ldr	r3, [sp, #4]
 8020a7a:	3b01      	subs	r3, #1
 8020a7c:	9301      	str	r3, [sp, #4]
 8020a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020a80:	bf08      	it	eq
 8020a82:	465b      	moveq	r3, fp
 8020a84:	e797      	b.n	80209b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020a86:	454f      	cmp	r7, r9
 8020a88:	dabb      	bge.n	8020a02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a8a:	fb0c 2606 	mla	r6, ip, r6, r2
 8020a8e:	1436      	asrs	r6, r6, #16
 8020a90:	d4b7      	bmi.n	8020a02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a92:	4546      	cmp	r6, r8
 8020a94:	dab5      	bge.n	8020a02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020a96:	461e      	mov	r6, r3
 8020a98:	46a0      	mov	r8, r4
 8020a9a:	2e00      	cmp	r6, #0
 8020a9c:	ddb8      	ble.n	8020a10 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020a9e:	1417      	asrs	r7, r2, #16
 8020aa0:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020aa4:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020aa8:	9902      	ldr	r1, [sp, #8]
 8020aaa:	4470      	add	r0, lr
 8020aac:	4462      	add	r2, ip
 8020aae:	fb0a 9707 	mla	r7, sl, r7, r9
 8020ab2:	3e01      	subs	r6, #1
 8020ab4:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020ab8:	f828 7b02 	strh.w	r7, [r8], #2
 8020abc:	e7ed      	b.n	8020a9a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020abe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020ac2:	d414      	bmi.n	8020aee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020ac4:	68ae      	ldr	r6, [r5, #8]
 8020ac6:	454e      	cmp	r6, r9
 8020ac8:	dd11      	ble.n	8020aee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020aca:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020ace:	d40e      	bmi.n	8020aee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020ad0:	68ef      	ldr	r7, [r5, #12]
 8020ad2:	4557      	cmp	r7, sl
 8020ad4:	dd0b      	ble.n	8020aee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020ad6:	b236      	sxth	r6, r6
 8020ad8:	f06f 0101 	mvn.w	r1, #1
 8020adc:	9f02      	ldr	r7, [sp, #8]
 8020ade:	fb0a 9606 	mla	r6, sl, r6, r9
 8020ae2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020ae6:	fb01 f608 	mul.w	r6, r1, r8
 8020aea:	9903      	ldr	r1, [sp, #12]
 8020aec:	538f      	strh	r7, [r1, r6]
 8020aee:	4470      	add	r0, lr
 8020af0:	4462      	add	r2, ip
 8020af2:	f108 38ff 	add.w	r8, r8, #4294967295
 8020af6:	e788      	b.n	8020a0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020af8:	b005      	add	sp, #20
 8020afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020afe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b02:	b087      	sub	sp, #28
 8020b04:	468b      	mov	fp, r1
 8020b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020b0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020b0c:	9203      	str	r2, [sp, #12]
 8020b0e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020b12:	6841      	ldr	r1, [r0, #4]
 8020b14:	9204      	str	r2, [sp, #16]
 8020b16:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8020b1a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8020b1e:	fb01 2505 	mla	r5, r1, r5, r2
 8020b22:	6802      	ldr	r2, [r0, #0]
 8020b24:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020b28:	f8d9 2000 	ldr.w	r2, [r9]
 8020b2c:	9201      	str	r2, [sp, #4]
 8020b2e:	f1bb 0f00 	cmp.w	fp, #0
 8020b32:	dc03      	bgt.n	8020b3c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020b34:	9a03      	ldr	r2, [sp, #12]
 8020b36:	2a00      	cmp	r2, #0
 8020b38:	f340 8158 	ble.w	8020dec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020b3e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020b42:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020b46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020b48:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020b4c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	dd0e      	ble.n	8020b72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020b54:	1402      	asrs	r2, r0, #16
 8020b56:	d405      	bmi.n	8020b64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020b58:	42ba      	cmp	r2, r7
 8020b5a:	da03      	bge.n	8020b64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020b5c:	140a      	asrs	r2, r1, #16
 8020b5e:	d401      	bmi.n	8020b64 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020b60:	42b2      	cmp	r2, r6
 8020b62:	db07      	blt.n	8020b74 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020b66:	3b01      	subs	r3, #1
 8020b68:	3502      	adds	r5, #2
 8020b6a:	4410      	add	r0, r2
 8020b6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020b6e:	4411      	add	r1, r2
 8020b70:	e7ee      	b.n	8020b50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020b72:	d017      	beq.n	8020ba4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020b74:	1e5a      	subs	r2, r3, #1
 8020b76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020b78:	fb04 0402 	mla	r4, r4, r2, r0
 8020b7c:	1424      	asrs	r4, r4, #16
 8020b7e:	d409      	bmi.n	8020b94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020b80:	42bc      	cmp	r4, r7
 8020b82:	da07      	bge.n	8020b94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020b84:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020b86:	fb04 1202 	mla	r2, r4, r2, r1
 8020b8a:	1412      	asrs	r2, r2, #16
 8020b8c:	d402      	bmi.n	8020b94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020b8e:	42b2      	cmp	r2, r6
 8020b90:	f2c0 80bf 	blt.w	8020d12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020b94:	2700      	movs	r7, #0
 8020b96:	19da      	adds	r2, r3, r7
 8020b98:	2a00      	cmp	r2, #0
 8020b9a:	dc3e      	bgt.n	8020c1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020b9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ba0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020ba4:	f1bb 0f00 	cmp.w	fp, #0
 8020ba8:	f340 8120 	ble.w	8020dec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020bac:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020bb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020bb2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020bb6:	f1bb 0b01 	subs.w	fp, fp, #1
 8020bba:	eeb0 6a62 	vmov.f32	s12, s5
 8020bbe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020bc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020bc6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020bca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8020bce:	eeb0 6a43 	vmov.f32	s12, s6
 8020bd2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020bd6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8020bda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020bde:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020be2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020be6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020bea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020bee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020bf2:	ee12 2a90 	vmov	r2, s5
 8020bf6:	eef0 2a47 	vmov.f32	s5, s14
 8020bfa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020bfe:	ee13 2a10 	vmov	r2, s6
 8020c02:	9313      	str	r3, [sp, #76]	; 0x4c
 8020c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c06:	eeb0 3a67 	vmov.f32	s6, s15
 8020c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c0e:	9a03      	ldr	r2, [sp, #12]
 8020c10:	9314      	str	r3, [sp, #80]	; 0x50
 8020c12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020c14:	bf08      	it	eq
 8020c16:	4613      	moveq	r3, r2
 8020c18:	e789      	b.n	8020b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020c1a:	1406      	asrs	r6, r0, #16
 8020c1c:	d42d      	bmi.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c1e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020c22:	42b4      	cmp	r4, r6
 8020c24:	dd29      	ble.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c26:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020c2a:	d426      	bmi.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c2c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020c30:	4562      	cmp	r2, ip
 8020c32:	dd22      	ble.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c34:	b224      	sxth	r4, r4
 8020c36:	9a01      	ldr	r2, [sp, #4]
 8020c38:	fb0c 6404 	mla	r4, ip, r4, r6
 8020c3c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020c40:	0e22      	lsrs	r2, r4, #24
 8020c42:	d01a      	beq.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c44:	9e04      	ldr	r6, [sp, #16]
 8020c46:	4372      	muls	r2, r6
 8020c48:	1c56      	adds	r6, r2, #1
 8020c4a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020c4e:	0a26      	lsrs	r6, r4, #8
 8020c50:	1212      	asrs	r2, r2, #8
 8020c52:	9605      	str	r6, [sp, #20]
 8020c54:	2aff      	cmp	r2, #255	; 0xff
 8020c56:	d116      	bne.n	8020c86 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020c58:	f06f 0201 	mvn.w	r2, #1
 8020c5c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020c60:	fb02 fc07 	mul.w	ip, r2, r7
 8020c64:	0962      	lsrs	r2, r4, #5
 8020c66:	f026 0607 	bic.w	r6, r6, #7
 8020c6a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020c6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020c72:	4316      	orrs	r6, r2
 8020c74:	4326      	orrs	r6, r4
 8020c76:	f825 600c 	strh.w	r6, [r5, ip]
 8020c7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020c7c:	3f01      	subs	r7, #1
 8020c7e:	4410      	add	r0, r2
 8020c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020c82:	4411      	add	r1, r2
 8020c84:	e787      	b.n	8020b96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020c86:	f06f 0601 	mvn.w	r6, #1
 8020c8a:	fa1f fa82 	uxth.w	sl, r2
 8020c8e:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020c92:	43d2      	mvns	r2, r2
 8020c94:	437e      	muls	r6, r7
 8020c96:	b2e4      	uxtb	r4, r4
 8020c98:	fb1c fc0a 	smulbb	ip, ip, sl
 8020c9c:	b2d2      	uxtb	r2, r2
 8020c9e:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020ca2:	fb14 f40a 	smulbb	r4, r4, sl
 8020ca6:	9602      	str	r6, [sp, #8]
 8020ca8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020cac:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020cb0:	fb16 f60a 	smulbb	r6, r6, sl
 8020cb4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020cb8:	fb0e ce02 	mla	lr, lr, r2, ip
 8020cbc:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020cc0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020cc4:	fa1f fe8e 	uxth.w	lr, lr
 8020cc8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020ccc:	fa5f f888 	uxtb.w	r8, r8
 8020cd0:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020cd4:	fb08 4402 	mla	r4, r8, r2, r4
 8020cd8:	f10e 0201 	add.w	r2, lr, #1
 8020cdc:	fa1f fc8c 	uxth.w	ip, ip
 8020ce0:	b2a4      	uxth	r4, r4
 8020ce2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020ce6:	9a02      	ldr	r2, [sp, #8]
 8020ce8:	1c66      	adds	r6, r4, #1
 8020cea:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020cee:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020cf2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020cf6:	ea46 0e0e 	orr.w	lr, r6, lr
 8020cfa:	f10c 0601 	add.w	r6, ip, #1
 8020cfe:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020d02:	0976      	lsrs	r6, r6, #5
 8020d04:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020d08:	ea4e 0e06 	orr.w	lr, lr, r6
 8020d0c:	f825 e002 	strh.w	lr, [r5, r2]
 8020d10:	e7b3      	b.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020d12:	f04f 0800 	mov.w	r8, #0
 8020d16:	eba3 0208 	sub.w	r2, r3, r8
 8020d1a:	2a00      	cmp	r2, #0
 8020d1c:	f77f af3e 	ble.w	8020b9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020d20:	1404      	asrs	r4, r0, #16
 8020d22:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020d26:	140a      	asrs	r2, r1, #16
 8020d28:	fb06 4202 	mla	r2, r6, r2, r4
 8020d2c:	9c01      	ldr	r4, [sp, #4]
 8020d2e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020d32:	0e22      	lsrs	r2, r4, #24
 8020d34:	d015      	beq.n	8020d62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020d36:	9e04      	ldr	r6, [sp, #16]
 8020d38:	4372      	muls	r2, r6
 8020d3a:	1c56      	adds	r6, r2, #1
 8020d3c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020d40:	0a26      	lsrs	r6, r4, #8
 8020d42:	1212      	asrs	r2, r2, #8
 8020d44:	2aff      	cmp	r2, #255	; 0xff
 8020d46:	d113      	bne.n	8020d70 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020d48:	0962      	lsrs	r2, r4, #5
 8020d4a:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020d4e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020d52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020d56:	f026 0607 	bic.w	r6, r6, #7
 8020d5a:	4316      	orrs	r6, r2
 8020d5c:	4326      	orrs	r6, r4
 8020d5e:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020d64:	f108 0801 	add.w	r8, r8, #1
 8020d68:	4410      	add	r0, r2
 8020d6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020d6c:	4411      	add	r1, r2
 8020d6e:	e7d2      	b.n	8020d16 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020d70:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020d74:	fa1f fa82 	uxth.w	sl, r2
 8020d78:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020d7c:	43d2      	mvns	r2, r2
 8020d7e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020d82:	fb17 f70a 	smulbb	r7, r7, sl
 8020d86:	b2d2      	uxtb	r2, r2
 8020d88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020d8c:	b2e4      	uxtb	r4, r4
 8020d8e:	b2f6      	uxtb	r6, r6
 8020d90:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020d94:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020d98:	fb14 f40a 	smulbb	r4, r4, sl
 8020d9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020da0:	fa1f fc8c 	uxth.w	ip, ip
 8020da4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020da8:	fb16 f60a 	smulbb	r6, r6, sl
 8020dac:	fa5f fe8e 	uxtb.w	lr, lr
 8020db0:	fb0e 4402 	mla	r4, lr, r2, r4
 8020db4:	fb07 6702 	mla	r7, r7, r2, r6
 8020db8:	f10c 0201 	add.w	r2, ip, #1
 8020dbc:	b2a4      	uxth	r4, r4
 8020dbe:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020dc2:	1c66      	adds	r6, r4, #1
 8020dc4:	b2bf      	uxth	r7, r7
 8020dc6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020dca:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020dce:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020dd2:	ea46 0c0c 	orr.w	ip, r6, ip
 8020dd6:	1c7e      	adds	r6, r7, #1
 8020dd8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020ddc:	0976      	lsrs	r6, r6, #5
 8020dde:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020de2:	ea4c 0c06 	orr.w	ip, ip, r6
 8020de6:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020dea:	e7ba      	b.n	8020d62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020dec:	b007      	add	sp, #28
 8020dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020df4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020df8:	b085      	sub	sp, #20
 8020dfa:	468b      	mov	fp, r1
 8020dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020e00:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8020e02:	9203      	str	r2, [sp, #12]
 8020e04:	6841      	ldr	r1, [r0, #4]
 8020e06:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8020e0a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8020e0e:	fb01 2404 	mla	r4, r1, r4, r2
 8020e12:	6802      	ldr	r2, [r0, #0]
 8020e14:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020e18:	f8d8 2000 	ldr.w	r2, [r8]
 8020e1c:	9201      	str	r2, [sp, #4]
 8020e1e:	f1bb 0f00 	cmp.w	fp, #0
 8020e22:	dc03      	bgt.n	8020e2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020e24:	9a03      	ldr	r2, [sp, #12]
 8020e26:	2a00      	cmp	r2, #0
 8020e28:	f340 814f 	ble.w	80210ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020e2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e2e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020e32:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020e36:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020e38:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020e3c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	dd0e      	ble.n	8020e62 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020e44:	1408      	asrs	r0, r1, #16
 8020e46:	d405      	bmi.n	8020e54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020e48:	42b8      	cmp	r0, r7
 8020e4a:	da03      	bge.n	8020e54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020e4c:	1410      	asrs	r0, r2, #16
 8020e4e:	d401      	bmi.n	8020e54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020e50:	42b0      	cmp	r0, r6
 8020e52:	db07      	blt.n	8020e64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020e54:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020e56:	3b01      	subs	r3, #1
 8020e58:	3402      	adds	r4, #2
 8020e5a:	4401      	add	r1, r0
 8020e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020e5e:	4402      	add	r2, r0
 8020e60:	e7ee      	b.n	8020e40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020e62:	d017      	beq.n	8020e94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020e64:	1e58      	subs	r0, r3, #1
 8020e66:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020e68:	fb05 1500 	mla	r5, r5, r0, r1
 8020e6c:	142d      	asrs	r5, r5, #16
 8020e6e:	d409      	bmi.n	8020e84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e70:	42bd      	cmp	r5, r7
 8020e72:	da07      	bge.n	8020e84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020e76:	fb05 2000 	mla	r0, r5, r0, r2
 8020e7a:	1400      	asrs	r0, r0, #16
 8020e7c:	d402      	bmi.n	8020e84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020e7e:	42b0      	cmp	r0, r6
 8020e80:	f2c0 80ba 	blt.w	8020ff8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020e84:	2600      	movs	r6, #0
 8020e86:	1998      	adds	r0, r3, r6
 8020e88:	2800      	cmp	r0, #0
 8020e8a:	dc3e      	bgt.n	8020f0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020e90:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e94:	f1bb 0f00 	cmp.w	fp, #0
 8020e98:	f340 8117 	ble.w	80210ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020e9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ea2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ea6:	f1bb 0b01 	subs.w	fp, fp, #1
 8020eaa:	eeb0 6a62 	vmov.f32	s12, s5
 8020eae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020eb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020eb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020eba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8020ebe:	eeb0 6a43 	vmov.f32	s12, s6
 8020ec2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020ec6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8020eca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ece:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ed2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020ed6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020eda:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ede:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ee2:	ee12 2a90 	vmov	r2, s5
 8020ee6:	eef0 2a47 	vmov.f32	s5, s14
 8020eea:	fb92 f3f3 	sdiv	r3, r2, r3
 8020eee:	ee13 2a10 	vmov	r2, s6
 8020ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8020ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ef6:	eeb0 3a67 	vmov.f32	s6, s15
 8020efa:	fb92 f3f3 	sdiv	r3, r2, r3
 8020efe:	9a03      	ldr	r2, [sp, #12]
 8020f00:	9312      	str	r3, [sp, #72]	; 0x48
 8020f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020f04:	bf08      	it	eq
 8020f06:	4613      	moveq	r3, r2
 8020f08:	e789      	b.n	8020e1e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020f0a:	140f      	asrs	r7, r1, #16
 8020f0c:	d424      	bmi.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f0e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020f12:	42bd      	cmp	r5, r7
 8020f14:	dd20      	ble.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f16:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020f1a:	d41d      	bmi.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f1c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020f20:	4560      	cmp	r0, ip
 8020f22:	dd19      	ble.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f24:	b22d      	sxth	r5, r5
 8020f26:	9801      	ldr	r0, [sp, #4]
 8020f28:	fb0c 7505 	mla	r5, ip, r5, r7
 8020f2c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020f30:	0e07      	lsrs	r7, r0, #24
 8020f32:	2fff      	cmp	r7, #255	; 0xff
 8020f34:	d116      	bne.n	8020f64 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020f36:	f06f 0501 	mvn.w	r5, #1
 8020f3a:	fb05 f706 	mul.w	r7, r5, r6
 8020f3e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8020f42:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020f46:	0945      	lsrs	r5, r0, #5
 8020f48:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020f4c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020f50:	ea4c 0505 	orr.w	r5, ip, r5
 8020f54:	4305      	orrs	r5, r0
 8020f56:	53e5      	strh	r5, [r4, r7]
 8020f58:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020f5a:	3e01      	subs	r6, #1
 8020f5c:	4401      	add	r1, r0
 8020f5e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8020f60:	4402      	add	r2, r0
 8020f62:	e790      	b.n	8020e86 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020f64:	b2fd      	uxtb	r5, r7
 8020f66:	2f00      	cmp	r7, #0
 8020f68:	d0f6      	beq.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f6a:	f06f 0701 	mvn.w	r7, #1
 8020f6e:	fa1f f985 	uxth.w	r9, r5
 8020f72:	43ed      	mvns	r5, r5
 8020f74:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020f78:	4377      	muls	r7, r6
 8020f7a:	fb1a fa09 	smulbb	sl, sl, r9
 8020f7e:	b2ed      	uxtb	r5, r5
 8020f80:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020f84:	9702      	str	r7, [sp, #8]
 8020f86:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020f8a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020f8e:	fb17 f709 	smulbb	r7, r7, r9
 8020f92:	b2c0      	uxtb	r0, r0
 8020f94:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020f98:	fb10 f009 	smulbb	r0, r0, r9
 8020f9c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020fa0:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020fa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020fa8:	fa1f fc8c 	uxth.w	ip, ip
 8020fac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020fb0:	fa5f fe8e 	uxtb.w	lr, lr
 8020fb4:	fb07 a705 	mla	r7, r7, r5, sl
 8020fb8:	fb0e 0005 	mla	r0, lr, r5, r0
 8020fbc:	f10c 0501 	add.w	r5, ip, #1
 8020fc0:	b2bf      	uxth	r7, r7
 8020fc2:	b280      	uxth	r0, r0
 8020fc4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020fc8:	f100 0a01 	add.w	sl, r0, #1
 8020fcc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8020fd0:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8020fd4:	9802      	ldr	r0, [sp, #8]
 8020fd6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020fda:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020fde:	f107 0a01 	add.w	sl, r7, #1
 8020fe2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020fe6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020fea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020fee:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020ff2:	f824 c000 	strh.w	ip, [r4, r0]
 8020ff6:	e7af      	b.n	8020f58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ff8:	f04f 0e00 	mov.w	lr, #0
 8020ffc:	eba3 000e 	sub.w	r0, r3, lr
 8021000:	2800      	cmp	r0, #0
 8021002:	f77f af43 	ble.w	8020e8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021006:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802100a:	140d      	asrs	r5, r1, #16
 802100c:	1410      	asrs	r0, r2, #16
 802100e:	fb06 5000 	mla	r0, r6, r0, r5
 8021012:	9d01      	ldr	r5, [sp, #4]
 8021014:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021018:	0e2e      	lsrs	r6, r5, #24
 802101a:	2eff      	cmp	r6, #255	; 0xff
 802101c:	d112      	bne.n	8021044 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802101e:	482c      	ldr	r0, [pc, #176]	; (80210d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021020:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021024:	0968      	lsrs	r0, r5, #5
 8021026:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802102a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802102e:	4330      	orrs	r0, r6
 8021030:	4328      	orrs	r0, r5
 8021032:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021036:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021038:	f10e 0e01 	add.w	lr, lr, #1
 802103c:	4401      	add	r1, r0
 802103e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021040:	4402      	add	r2, r0
 8021042:	e7db      	b.n	8020ffc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8021044:	b2f0      	uxtb	r0, r6
 8021046:	2e00      	cmp	r6, #0
 8021048:	d0f5      	beq.n	8021036 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802104a:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 802104e:	fa1f f980 	uxth.w	r9, r0
 8021052:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8021056:	43c0      	mvns	r0, r0
 8021058:	ea4f 272c 	mov.w	r7, ip, asr #8
 802105c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8021060:	fb16 f609 	smulbb	r6, r6, r9
 8021064:	b2c0      	uxtb	r0, r0
 8021066:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802106a:	b2ed      	uxtb	r5, r5
 802106c:	fb1a fa09 	smulbb	sl, sl, r9
 8021070:	fb07 6700 	mla	r7, r7, r0, r6
 8021074:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8021078:	fb15 f509 	smulbb	r5, r5, r9
 802107c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021080:	b2bf      	uxth	r7, r7
 8021082:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021086:	fa5f fc8c 	uxtb.w	ip, ip
 802108a:	fb06 a600 	mla	r6, r6, r0, sl
 802108e:	fb0c 5500 	mla	r5, ip, r0, r5
 8021092:	1c78      	adds	r0, r7, #1
 8021094:	b2b6      	uxth	r6, r6
 8021096:	b2ad      	uxth	r5, r5
 8021098:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 802109c:	f105 0a01 	add.w	sl, r5, #1
 80210a0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80210a4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80210a8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80210ac:	ea4a 0707 	orr.w	r7, sl, r7
 80210b0:	f106 0a01 	add.w	sl, r6, #1
 80210b4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80210b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80210bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80210c0:	ea47 070a 	orr.w	r7, r7, sl
 80210c4:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80210c8:	e7b5      	b.n	8021036 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80210ca:	b005      	add	sp, #20
 80210cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210d0:	fffff800 	.word	0xfffff800

080210d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80210d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210d8:	b087      	sub	sp, #28
 80210da:	468b      	mov	fp, r1
 80210dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80210e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80210e2:	9203      	str	r2, [sp, #12]
 80210e4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80210e8:	6841      	ldr	r1, [r0, #4]
 80210ea:	9204      	str	r2, [sp, #16]
 80210ec:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80210f0:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80210f4:	fb01 2404 	mla	r4, r1, r4, r2
 80210f8:	6802      	ldr	r2, [r0, #0]
 80210fa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80210fe:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021102:	3201      	adds	r2, #1
 8021104:	f022 0201 	bic.w	r2, r2, #1
 8021108:	9200      	str	r2, [sp, #0]
 802110a:	f8d9 2000 	ldr.w	r2, [r9]
 802110e:	9201      	str	r2, [sp, #4]
 8021110:	f1bb 0f00 	cmp.w	fp, #0
 8021114:	dc03      	bgt.n	802111e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021116:	9a03      	ldr	r2, [sp, #12]
 8021118:	2a00      	cmp	r2, #0
 802111a:	f340 816a 	ble.w	80213f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802111e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021120:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021124:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802112a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802112e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021132:	2b00      	cmp	r3, #0
 8021134:	dd0e      	ble.n	8021154 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021136:	1402      	asrs	r2, r0, #16
 8021138:	d405      	bmi.n	8021146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802113a:	42ba      	cmp	r2, r7
 802113c:	da03      	bge.n	8021146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802113e:	140a      	asrs	r2, r1, #16
 8021140:	d401      	bmi.n	8021146 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021142:	42b2      	cmp	r2, r6
 8021144:	db07      	blt.n	8021156 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021146:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021148:	3b01      	subs	r3, #1
 802114a:	3402      	adds	r4, #2
 802114c:	4410      	add	r0, r2
 802114e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021150:	4411      	add	r1, r2
 8021152:	e7ee      	b.n	8021132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8021154:	d017      	beq.n	8021186 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8021156:	1e5a      	subs	r2, r3, #1
 8021158:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802115a:	fb05 0502 	mla	r5, r5, r2, r0
 802115e:	142d      	asrs	r5, r5, #16
 8021160:	d409      	bmi.n	8021176 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021162:	42bd      	cmp	r5, r7
 8021164:	da07      	bge.n	8021176 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021166:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021168:	fb05 1202 	mla	r2, r5, r2, r1
 802116c:	1412      	asrs	r2, r2, #16
 802116e:	d402      	bmi.n	8021176 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8021170:	42b2      	cmp	r2, r6
 8021172:	f2c0 80c8 	blt.w	8021306 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8021176:	2700      	movs	r7, #0
 8021178:	19da      	adds	r2, r3, r7
 802117a:	2a00      	cmp	r2, #0
 802117c:	dc3e      	bgt.n	80211fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802117e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021182:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021186:	f1bb 0f00 	cmp.w	fp, #0
 802118a:	f340 8132 	ble.w	80213f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802118e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021192:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021194:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021198:	f1bb 0b01 	subs.w	fp, fp, #1
 802119c:	eeb0 6a62 	vmov.f32	s12, s5
 80211a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80211a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80211a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211ac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80211b0:	eeb0 6a43 	vmov.f32	s12, s6
 80211b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80211b8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80211bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211d4:	ee12 2a90 	vmov	r2, s5
 80211d8:	eef0 2a47 	vmov.f32	s5, s14
 80211dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80211e0:	ee13 2a10 	vmov	r2, s6
 80211e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80211e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80211e8:	eeb0 3a67 	vmov.f32	s6, s15
 80211ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80211f0:	9a03      	ldr	r2, [sp, #12]
 80211f2:	9314      	str	r3, [sp, #80]	; 0x50
 80211f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80211f6:	bf08      	it	eq
 80211f8:	4613      	moveq	r3, r2
 80211fa:	e789      	b.n	8021110 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80211fc:	1405      	asrs	r5, r0, #16
 80211fe:	d436      	bmi.n	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021200:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021204:	42aa      	cmp	r2, r5
 8021206:	dd32      	ble.n	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021208:	140e      	asrs	r6, r1, #16
 802120a:	d430      	bmi.n	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802120c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021210:	42b2      	cmp	r2, r6
 8021212:	dd2c      	ble.n	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021214:	9a00      	ldr	r2, [sp, #0]
 8021216:	fb06 5502 	mla	r5, r6, r2, r5
 802121a:	9e01      	ldr	r6, [sp, #4]
 802121c:	086a      	lsrs	r2, r5, #1
 802121e:	5cb2      	ldrb	r2, [r6, r2]
 8021220:	07ee      	lsls	r6, r5, #31
 8021222:	bf54      	ite	pl
 8021224:	f002 020f 	andpl.w	r2, r2, #15
 8021228:	1112      	asrmi	r2, r2, #4
 802122a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802122e:	b2d2      	uxtb	r2, r2
 8021230:	b1ea      	cbz	r2, 802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021232:	9d04      	ldr	r5, [sp, #16]
 8021234:	436a      	muls	r2, r5
 8021236:	1c55      	adds	r5, r2, #1
 8021238:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802123c:	4d6e      	ldr	r5, [pc, #440]	; (80213f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802123e:	1212      	asrs	r2, r2, #8
 8021240:	682d      	ldr	r5, [r5, #0]
 8021242:	2aff      	cmp	r2, #255	; 0xff
 8021244:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8021248:	9605      	str	r6, [sp, #20]
 802124a:	d116      	bne.n	802127a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802124c:	f06f 0201 	mvn.w	r2, #1
 8021250:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8021254:	fb02 fc07 	mul.w	ip, r2, r7
 8021258:	096a      	lsrs	r2, r5, #5
 802125a:	f026 0607 	bic.w	r6, r6, #7
 802125e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021262:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021266:	4316      	orrs	r6, r2
 8021268:	432e      	orrs	r6, r5
 802126a:	f824 600c 	strh.w	r6, [r4, ip]
 802126e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021270:	3f01      	subs	r7, #1
 8021272:	4410      	add	r0, r2
 8021274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021276:	4411      	add	r1, r2
 8021278:	e77e      	b.n	8021178 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802127a:	f06f 0601 	mvn.w	r6, #1
 802127e:	fa1f fa82 	uxth.w	sl, r2
 8021282:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8021286:	43d2      	mvns	r2, r2
 8021288:	437e      	muls	r6, r7
 802128a:	b2ed      	uxtb	r5, r5
 802128c:	fb1c fc0a 	smulbb	ip, ip, sl
 8021290:	b2d2      	uxtb	r2, r2
 8021292:	f834 8006 	ldrh.w	r8, [r4, r6]
 8021296:	fb15 f50a 	smulbb	r5, r5, sl
 802129a:	9602      	str	r6, [sp, #8]
 802129c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80212a0:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80212a4:	fb16 f60a 	smulbb	r6, r6, sl
 80212a8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80212ac:	fb0e ce02 	mla	lr, lr, r2, ip
 80212b0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80212b4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80212b8:	fa1f fe8e 	uxth.w	lr, lr
 80212bc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80212c0:	fa5f f888 	uxtb.w	r8, r8
 80212c4:	fb0c 6c02 	mla	ip, ip, r2, r6
 80212c8:	fb08 5502 	mla	r5, r8, r2, r5
 80212cc:	f10e 0201 	add.w	r2, lr, #1
 80212d0:	fa1f fc8c 	uxth.w	ip, ip
 80212d4:	b2ad      	uxth	r5, r5
 80212d6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80212da:	9a02      	ldr	r2, [sp, #8]
 80212dc:	1c6e      	adds	r6, r5, #1
 80212de:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80212e2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80212e6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80212ea:	ea46 0e0e 	orr.w	lr, r6, lr
 80212ee:	f10c 0601 	add.w	r6, ip, #1
 80212f2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80212f6:	0976      	lsrs	r6, r6, #5
 80212f8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80212fc:	ea4e 0e06 	orr.w	lr, lr, r6
 8021300:	f824 e002 	strh.w	lr, [r4, r2]
 8021304:	e7b3      	b.n	802126e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021306:	f04f 0800 	mov.w	r8, #0
 802130a:	eba3 0208 	sub.w	r2, r3, r8
 802130e:	2a00      	cmp	r2, #0
 8021310:	f77f af35 	ble.w	802117e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021314:	1402      	asrs	r2, r0, #16
 8021316:	9e00      	ldr	r6, [sp, #0]
 8021318:	140d      	asrs	r5, r1, #16
 802131a:	fb06 2505 	mla	r5, r6, r5, r2
 802131e:	9e01      	ldr	r6, [sp, #4]
 8021320:	086a      	lsrs	r2, r5, #1
 8021322:	07ed      	lsls	r5, r5, #31
 8021324:	5cb2      	ldrb	r2, [r6, r2]
 8021326:	bf54      	ite	pl
 8021328:	f002 020f 	andpl.w	r2, r2, #15
 802132c:	1112      	asrmi	r2, r2, #4
 802132e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021332:	b2d2      	uxtb	r2, r2
 8021334:	b1c2      	cbz	r2, 8021368 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021336:	9d04      	ldr	r5, [sp, #16]
 8021338:	436a      	muls	r2, r5
 802133a:	1c55      	adds	r5, r2, #1
 802133c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8021340:	4d2d      	ldr	r5, [pc, #180]	; (80213f8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8021342:	1212      	asrs	r2, r2, #8
 8021344:	682e      	ldr	r6, [r5, #0]
 8021346:	2aff      	cmp	r2, #255	; 0xff
 8021348:	ea4f 2516 	mov.w	r5, r6, lsr #8
 802134c:	d113      	bne.n	8021376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802134e:	0972      	lsrs	r2, r6, #5
 8021350:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8021354:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021358:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802135c:	f025 0507 	bic.w	r5, r5, #7
 8021360:	4315      	orrs	r5, r2
 8021362:	4335      	orrs	r5, r6
 8021364:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8021368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802136a:	f108 0801 	add.w	r8, r8, #1
 802136e:	4410      	add	r0, r2
 8021370:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021372:	4411      	add	r1, r2
 8021374:	e7c9      	b.n	802130a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8021376:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 802137a:	fa1f fa82 	uxth.w	sl, r2
 802137e:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8021382:	43d2      	mvns	r2, r2
 8021384:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021388:	fb17 f70a 	smulbb	r7, r7, sl
 802138c:	b2d2      	uxtb	r2, r2
 802138e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021392:	b2f6      	uxtb	r6, r6
 8021394:	b2ed      	uxtb	r5, r5
 8021396:	fb0c 7c02 	mla	ip, ip, r2, r7
 802139a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 802139e:	fb16 f60a 	smulbb	r6, r6, sl
 80213a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80213a6:	fa1f fc8c 	uxth.w	ip, ip
 80213aa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80213ae:	fb15 f50a 	smulbb	r5, r5, sl
 80213b2:	fa5f fe8e 	uxtb.w	lr, lr
 80213b6:	fb0e 6602 	mla	r6, lr, r2, r6
 80213ba:	fb07 5702 	mla	r7, r7, r2, r5
 80213be:	f10c 0201 	add.w	r2, ip, #1
 80213c2:	b2b6      	uxth	r6, r6
 80213c4:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80213c8:	1c75      	adds	r5, r6, #1
 80213ca:	b2bf      	uxth	r7, r7
 80213cc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80213d0:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80213d4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80213d8:	ea45 0c0c 	orr.w	ip, r5, ip
 80213dc:	1c7d      	adds	r5, r7, #1
 80213de:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80213e2:	096d      	lsrs	r5, r5, #5
 80213e4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80213e8:	ea4c 0c05 	orr.w	ip, ip, r5
 80213ec:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80213f0:	e7ba      	b.n	8021368 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80213f2:	b007      	add	sp, #28
 80213f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213f8:	2400b8d4 	.word	0x2400b8d4

080213fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80213fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021400:	b087      	sub	sp, #28
 8021402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021406:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8021710 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802140a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802140c:	9101      	str	r1, [sp, #4]
 802140e:	9205      	str	r2, [sp, #20]
 8021410:	6841      	ldr	r1, [r0, #4]
 8021412:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8021416:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802141a:	fb01 2404 	mla	r4, r1, r4, r2
 802141e:	6802      	ldr	r2, [r0, #0]
 8021420:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021424:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021428:	3201      	adds	r2, #1
 802142a:	f022 0201 	bic.w	r2, r2, #1
 802142e:	9202      	str	r2, [sp, #8]
 8021430:	f8db 2000 	ldr.w	r2, [fp]
 8021434:	9203      	str	r2, [sp, #12]
 8021436:	9a01      	ldr	r2, [sp, #4]
 8021438:	2a00      	cmp	r2, #0
 802143a:	dc03      	bgt.n	8021444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802143c:	9a05      	ldr	r2, [sp, #20]
 802143e:	2a00      	cmp	r2, #0
 8021440:	f340 8162 	ble.w	8021708 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021446:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 802144a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802144e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021450:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8021454:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021458:	2b00      	cmp	r3, #0
 802145a:	dd0e      	ble.n	802147a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802145c:	1402      	asrs	r2, r0, #16
 802145e:	d405      	bmi.n	802146c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021460:	42ba      	cmp	r2, r7
 8021462:	da03      	bge.n	802146c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021464:	140a      	asrs	r2, r1, #16
 8021466:	d401      	bmi.n	802146c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021468:	42b2      	cmp	r2, r6
 802146a:	db07      	blt.n	802147c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802146c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802146e:	3b01      	subs	r3, #1
 8021470:	3402      	adds	r4, #2
 8021472:	4410      	add	r0, r2
 8021474:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8021476:	4411      	add	r1, r2
 8021478:	e7ee      	b.n	8021458 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 802147a:	d017      	beq.n	80214ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802147c:	1e5a      	subs	r2, r3, #1
 802147e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021480:	fb05 0502 	mla	r5, r5, r2, r0
 8021484:	142d      	asrs	r5, r5, #16
 8021486:	d409      	bmi.n	802149c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021488:	42bd      	cmp	r5, r7
 802148a:	da07      	bge.n	802149c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802148c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802148e:	fb05 1202 	mla	r2, r5, r2, r1
 8021492:	1412      	asrs	r2, r2, #16
 8021494:	d402      	bmi.n	802149c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8021496:	42b2      	cmp	r2, r6
 8021498:	f2c0 80c3 	blt.w	8021622 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802149c:	2500      	movs	r5, #0
 802149e:	195a      	adds	r2, r3, r5
 80214a0:	2a00      	cmp	r2, #0
 80214a2:	dc3f      	bgt.n	8021524 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80214a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80214a8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80214ac:	9b01      	ldr	r3, [sp, #4]
 80214ae:	2b00      	cmp	r3, #0
 80214b0:	f340 812a 	ble.w	8021708 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80214b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80214b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80214ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80214be:	eeb0 6a62 	vmov.f32	s12, s5
 80214c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80214c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80214ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214ce:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80214d2:	eeb0 6a43 	vmov.f32	s12, s6
 80214d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80214da:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80214de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80214e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80214e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80214ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80214ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80214f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80214f6:	ee12 2a90 	vmov	r2, s5
 80214fa:	eef0 2a47 	vmov.f32	s5, s14
 80214fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8021502:	ee13 2a10 	vmov	r2, s6
 8021506:	9313      	str	r3, [sp, #76]	; 0x4c
 8021508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802150a:	eeb0 3a67 	vmov.f32	s6, s15
 802150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021512:	9314      	str	r3, [sp, #80]	; 0x50
 8021514:	9b01      	ldr	r3, [sp, #4]
 8021516:	9a05      	ldr	r2, [sp, #20]
 8021518:	3b01      	subs	r3, #1
 802151a:	9301      	str	r3, [sp, #4]
 802151c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802151e:	bf08      	it	eq
 8021520:	4613      	moveq	r3, r2
 8021522:	e788      	b.n	8021436 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021524:	1406      	asrs	r6, r0, #16
 8021526:	d42c      	bmi.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021528:	f8db 2008 	ldr.w	r2, [fp, #8]
 802152c:	42b2      	cmp	r2, r6
 802152e:	dd28      	ble.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021530:	140f      	asrs	r7, r1, #16
 8021532:	d426      	bmi.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021534:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021538:	42ba      	cmp	r2, r7
 802153a:	dd22      	ble.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802153c:	9a02      	ldr	r2, [sp, #8]
 802153e:	fb07 6602 	mla	r6, r7, r2, r6
 8021542:	9f03      	ldr	r7, [sp, #12]
 8021544:	0872      	lsrs	r2, r6, #1
 8021546:	07f6      	lsls	r6, r6, #31
 8021548:	5cba      	ldrb	r2, [r7, r2]
 802154a:	bf54      	ite	pl
 802154c:	f002 020f 	andpl.w	r2, r2, #15
 8021550:	1112      	asrmi	r2, r2, #4
 8021552:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021556:	b2d2      	uxtb	r2, r2
 8021558:	2aff      	cmp	r2, #255	; 0xff
 802155a:	d118      	bne.n	802158e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 802155c:	f06f 0601 	mvn.w	r6, #1
 8021560:	f8d8 2000 	ldr.w	r2, [r8]
 8021564:	fb06 f705 	mul.w	r7, r6, r5
 8021568:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 802156c:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8021570:	0956      	lsrs	r6, r2, #5
 8021572:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021576:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802157a:	ea4c 0606 	orr.w	r6, ip, r6
 802157e:	4316      	orrs	r6, r2
 8021580:	53e6      	strh	r6, [r4, r7]
 8021582:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021584:	3d01      	subs	r5, #1
 8021586:	4410      	add	r0, r2
 8021588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802158a:	4411      	add	r1, r2
 802158c:	e787      	b.n	802149e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802158e:	2a00      	cmp	r2, #0
 8021590:	d0f7      	beq.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021592:	f06f 0601 	mvn.w	r6, #1
 8021596:	f8d8 c000 	ldr.w	ip, [r8]
 802159a:	fa1f f982 	uxth.w	r9, r2
 802159e:	43d2      	mvns	r2, r2
 80215a0:	436e      	muls	r6, r5
 80215a2:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80215a6:	b2d2      	uxtb	r2, r2
 80215a8:	f834 e006 	ldrh.w	lr, [r4, r6]
 80215ac:	fb1a fa09 	smulbb	sl, sl, r9
 80215b0:	9604      	str	r6, [sp, #16]
 80215b2:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80215b6:	ea4f 272e 	mov.w	r7, lr, asr #8
 80215ba:	fb16 f609 	smulbb	r6, r6, r9
 80215be:	fa5f fc8c 	uxtb.w	ip, ip
 80215c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80215c6:	fb1c fc09 	smulbb	ip, ip, r9
 80215ca:	fb07 6702 	mla	r7, r7, r2, r6
 80215ce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80215d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80215d6:	b2bf      	uxth	r7, r7
 80215d8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80215dc:	fa5f fe8e 	uxtb.w	lr, lr
 80215e0:	fb06 a602 	mla	r6, r6, r2, sl
 80215e4:	fb0e cc02 	mla	ip, lr, r2, ip
 80215e8:	1c7a      	adds	r2, r7, #1
 80215ea:	b2b6      	uxth	r6, r6
 80215ec:	fa1f fc8c 	uxth.w	ip, ip
 80215f0:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80215f4:	9a04      	ldr	r2, [sp, #16]
 80215f6:	f10c 0a01 	add.w	sl, ip, #1
 80215fa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80215fe:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8021602:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021606:	ea4a 0707 	orr.w	r7, sl, r7
 802160a:	f106 0a01 	add.w	sl, r6, #1
 802160e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021612:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021616:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802161a:	ea47 070a 	orr.w	r7, r7, sl
 802161e:	52a7      	strh	r7, [r4, r2]
 8021620:	e7af      	b.n	8021582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021622:	f04f 0e00 	mov.w	lr, #0
 8021626:	eba3 020e 	sub.w	r2, r3, lr
 802162a:	2a00      	cmp	r2, #0
 802162c:	f77f af3a 	ble.w	80214a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021630:	1402      	asrs	r2, r0, #16
 8021632:	9e02      	ldr	r6, [sp, #8]
 8021634:	140d      	asrs	r5, r1, #16
 8021636:	fb06 2505 	mla	r5, r6, r5, r2
 802163a:	9e03      	ldr	r6, [sp, #12]
 802163c:	086a      	lsrs	r2, r5, #1
 802163e:	07ed      	lsls	r5, r5, #31
 8021640:	5cb2      	ldrb	r2, [r6, r2]
 8021642:	bf54      	ite	pl
 8021644:	f002 020f 	andpl.w	r2, r2, #15
 8021648:	1112      	asrmi	r2, r2, #4
 802164a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802164e:	b2d2      	uxtb	r2, r2
 8021650:	2aff      	cmp	r2, #255	; 0xff
 8021652:	d115      	bne.n	8021680 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8021654:	f8d8 5000 	ldr.w	r5, [r8]
 8021658:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 802165c:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8021660:	096a      	lsrs	r2, r5, #5
 8021662:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8021666:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802166a:	4332      	orrs	r2, r6
 802166c:	432a      	orrs	r2, r5
 802166e:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8021672:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021674:	f10e 0e01 	add.w	lr, lr, #1
 8021678:	4410      	add	r0, r2
 802167a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802167c:	4411      	add	r1, r2
 802167e:	e7d2      	b.n	8021626 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8021680:	2a00      	cmp	r2, #0
 8021682:	d0f6      	beq.n	8021672 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021684:	f8d8 7000 	ldr.w	r7, [r8]
 8021688:	fa1f f982 	uxth.w	r9, r2
 802168c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8021690:	43d2      	mvns	r2, r2
 8021692:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8021696:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 802169a:	ea4f 262c 	mov.w	r6, ip, asr #8
 802169e:	fb15 f509 	smulbb	r5, r5, r9
 80216a2:	b2d2      	uxtb	r2, r2
 80216a4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80216a8:	b2ff      	uxtb	r7, r7
 80216aa:	fb1a fa09 	smulbb	sl, sl, r9
 80216ae:	fb06 5602 	mla	r6, r6, r2, r5
 80216b2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80216b6:	fb17 f709 	smulbb	r7, r7, r9
 80216ba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80216be:	b2b6      	uxth	r6, r6
 80216c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80216c4:	fa5f fc8c 	uxtb.w	ip, ip
 80216c8:	fb05 a502 	mla	r5, r5, r2, sl
 80216cc:	fb0c 7702 	mla	r7, ip, r2, r7
 80216d0:	1c72      	adds	r2, r6, #1
 80216d2:	b2ad      	uxth	r5, r5
 80216d4:	b2bf      	uxth	r7, r7
 80216d6:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80216da:	f107 0a01 	add.w	sl, r7, #1
 80216de:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80216e2:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80216e6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80216ea:	ea4a 0606 	orr.w	r6, sl, r6
 80216ee:	f105 0a01 	add.w	sl, r5, #1
 80216f2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80216f6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80216fa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80216fe:	ea46 060a 	orr.w	r6, r6, sl
 8021702:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8021706:	e7b4      	b.n	8021672 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021708:	b007      	add	sp, #28
 802170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802170e:	bf00      	nop
 8021710:	2400b8d4 	.word	0x2400b8d4

08021714 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021714:	4770      	bx	lr

08021716 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021716:	4770      	bx	lr

08021718 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021718:	4770      	bx	lr

0802171a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802171a:	4770      	bx	lr

0802171c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802171c:	4770      	bx	lr

0802171e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802171e:	4770      	bx	lr

08021720 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021720:	4770      	bx	lr

08021722 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021722:	4770      	bx	lr

08021724 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021724:	4770      	bx	lr

08021726 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021726:	4770      	bx	lr

08021728 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021728:	4770      	bx	lr

0802172a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802172a:	4770      	bx	lr

0802172c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802172c:	4770      	bx	lr

0802172e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802172e:	4770      	bx	lr

08021730 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021730:	4770      	bx	lr

08021732 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021732:	4770      	bx	lr

08021734 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021734:	4770      	bx	lr

08021736 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021736:	4770      	bx	lr

08021738 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021738:	4770      	bx	lr

0802173a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802173a:	4770      	bx	lr

0802173c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802173c:	4770      	bx	lr

0802173e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802173e:	4770      	bx	lr

08021740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021740:	4770      	bx	lr

08021742 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8021742:	4770      	bx	lr

08021744 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021744:	4770      	bx	lr

08021746 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021746:	4770      	bx	lr

08021748 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8021748:	4770      	bx	lr

0802174a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802174a:	4770      	bx	lr

0802174c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 802174c:	b508      	push	{r3, lr}
 802174e:	4b06      	ldr	r3, [pc, #24]	; (8021768 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8021750:	8818      	ldrh	r0, [r3, #0]
 8021752:	b928      	cbnz	r0, 8021760 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8021754:	4b05      	ldr	r3, [pc, #20]	; (802176c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8021756:	2150      	movs	r1, #80	; 0x50
 8021758:	4a05      	ldr	r2, [pc, #20]	; (8021770 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 802175a:	4806      	ldr	r0, [pc, #24]	; (8021774 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 802175c:	f009 fbd4 	bl	802af08 <__assert_func>
 8021760:	0040      	lsls	r0, r0, #1
 8021762:	b280      	uxth	r0, r0
 8021764:	bd08      	pop	{r3, pc}
 8021766:	bf00      	nop
 8021768:	2400b8c6 	.word	0x2400b8c6
 802176c:	0803019b 	.word	0x0803019b
 8021770:	08030794 	.word	0x08030794
 8021774:	080301dd 	.word	0x080301dd

08021778 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8021778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802177c:	b08b      	sub	sp, #44	; 0x2c
 802177e:	460f      	mov	r7, r1
 8021780:	4616      	mov	r6, r2
 8021782:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021786:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802178a:	f1bb 0f00 	cmp.w	fp, #0
 802178e:	d049      	beq.n	8021824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8021790:	6810      	ldr	r0, [r2, #0]
 8021792:	ad06      	add	r5, sp, #24
 8021794:	6851      	ldr	r1, [r2, #4]
 8021796:	c503      	stmia	r5!, {r0, r1}
 8021798:	6818      	ldr	r0, [r3, #0]
 802179a:	ad08      	add	r5, sp, #32
 802179c:	6859      	ldr	r1, [r3, #4]
 802179e:	c503      	stmia	r5!, {r0, r1}
 80217a0:	a806      	add	r0, sp, #24
 80217a2:	f7fa f883 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217a6:	4631      	mov	r1, r6
 80217a8:	a808      	add	r0, sp, #32
 80217aa:	f7fa f8a7 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217ae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80217b2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80217b6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80217ba:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80217be:	fb16 2103 	smlabb	r1, r6, r3, r2
 80217c2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80217c6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80217ca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80217ce:	4f5f      	ldr	r7, [pc, #380]	; (802194c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80217d0:	440a      	add	r2, r1
 80217d2:	6838      	ldr	r0, [r7, #0]
 80217d4:	46b9      	mov	r9, r7
 80217d6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80217da:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80217de:	4413      	add	r3, r2
 80217e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80217e4:	6803      	ldr	r3, [r0, #0]
 80217e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80217e8:	4798      	blx	r3
 80217ea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80217ee:	d01c      	beq.n	802182a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80217f0:	f010 0f04 	tst.w	r0, #4
 80217f4:	d01d      	beq.n	8021832 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80217f6:	f8d9 0000 	ldr.w	r0, [r9]
 80217fa:	2700      	movs	r7, #0
 80217fc:	b2ad      	uxth	r5, r5
 80217fe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021802:	6801      	ldr	r1, [r0, #0]
 8021804:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021808:	f8cd b00c 	str.w	fp, [sp, #12]
 802180c:	9501      	str	r5, [sp, #4]
 802180e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8021812:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021816:	9402      	str	r4, [sp, #8]
 8021818:	fa1f f488 	uxth.w	r4, r8
 802181c:	9400      	str	r4, [sp, #0]
 802181e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8021820:	4631      	mov	r1, r6
 8021822:	47a0      	blx	r4
 8021824:	b00b      	add	sp, #44	; 0x2c
 8021826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802182a:	b914      	cbnz	r4, 8021832 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802182c:	f010 0f01 	tst.w	r0, #1
 8021830:	e7e0      	b.n	80217f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8021832:	f8d9 0000 	ldr.w	r0, [r9]
 8021836:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802183a:	6803      	ldr	r3, [r0, #0]
 802183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802183e:	4798      	blx	r3
 8021840:	4b43      	ldr	r3, [pc, #268]	; (8021950 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8021842:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8021846:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802184a:	881a      	ldrh	r2, [r3, #0]
 802184c:	469a      	mov	sl, r3
 802184e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021852:	fb05 f502 	mul.w	r5, r5, r2
 8021856:	fb02 1404 	mla	r4, r2, r4, r1
 802185a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802185e:	d059      	beq.n	8021914 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8021860:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8021864:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021868:	fa1f f28b 	uxth.w	r2, fp
 802186c:	469e      	mov	lr, r3
 802186e:	fa1f f989 	uxth.w	r9, r9
 8021872:	42ac      	cmp	r4, r5
 8021874:	d264      	bcs.n	8021940 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021876:	eb04 0a07 	add.w	sl, r4, r7
 802187a:	4554      	cmp	r4, sl
 802187c:	d23d      	bcs.n	80218fa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802187e:	8821      	ldrh	r1, [r4, #0]
 8021880:	f836 3b02 	ldrh.w	r3, [r6], #2
 8021884:	1208      	asrs	r0, r1, #8
 8021886:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802188a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802188e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8021892:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021896:	00c9      	lsls	r1, r1, #3
 8021898:	fb10 f009 	smulbb	r0, r0, r9
 802189c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80218a0:	b2c9      	uxtb	r1, r1
 80218a2:	fb0c 0c02 	mla	ip, ip, r2, r0
 80218a6:	10d8      	asrs	r0, r3, #3
 80218a8:	fb1b fb09 	smulbb	fp, fp, r9
 80218ac:	00db      	lsls	r3, r3, #3
 80218ae:	fa1f fc8c 	uxth.w	ip, ip
 80218b2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80218b6:	fb11 f109 	smulbb	r1, r1, r9
 80218ba:	b2db      	uxtb	r3, r3
 80218bc:	fb00 b002 	mla	r0, r0, r2, fp
 80218c0:	f10c 0b01 	add.w	fp, ip, #1
 80218c4:	fb03 1302 	mla	r3, r3, r2, r1
 80218c8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80218cc:	b29b      	uxth	r3, r3
 80218ce:	b280      	uxth	r0, r0
 80218d0:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80218d4:	f103 0c01 	add.w	ip, r3, #1
 80218d8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80218dc:	1c43      	adds	r3, r0, #1
 80218de:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80218e2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80218e6:	0940      	lsrs	r0, r0, #5
 80218e8:	ea4c 0c0b 	orr.w	ip, ip, fp
 80218ec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80218f0:	ea4c 0c00 	orr.w	ip, ip, r0
 80218f4:	f824 cb02 	strh.w	ip, [r4], #2
 80218f8:	e7bf      	b.n	802187a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80218fa:	f8be 3000 	ldrh.w	r3, [lr]
 80218fe:	eba3 0308 	sub.w	r3, r3, r8
 8021902:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021906:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802190a:	eba3 0308 	sub.w	r3, r3, r8
 802190e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021912:	e7ae      	b.n	8021872 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8021914:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021918:	f8d9 0000 	ldr.w	r0, [r9]
 802191c:	42ac      	cmp	r4, r5
 802191e:	6803      	ldr	r3, [r0, #0]
 8021920:	d20e      	bcs.n	8021940 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021922:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8021926:	4632      	mov	r2, r6
 8021928:	463b      	mov	r3, r7
 802192a:	4621      	mov	r1, r4
 802192c:	47c0      	blx	r8
 802192e:	f8ba 3000 	ldrh.w	r3, [sl]
 8021932:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021936:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802193a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802193e:	e7eb      	b.n	8021918 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8021940:	4b02      	ldr	r3, [pc, #8]	; (802194c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021942:	6818      	ldr	r0, [r3, #0]
 8021944:	6803      	ldr	r3, [r0, #0]
 8021946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021948:	4798      	blx	r3
 802194a:	e76b      	b.n	8021824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802194c:	2400b8cc 	.word	0x2400b8cc
 8021950:	2400b8c6 	.word	0x2400b8c6

08021954 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021954:	b510      	push	{r4, lr}
 8021956:	4604      	mov	r4, r0
 8021958:	2104      	movs	r1, #4
 802195a:	f009 faa6 	bl	802aeaa <_ZdlPvj>
 802195e:	4620      	mov	r0, r4
 8021960:	bd10      	pop	{r4, pc}

08021962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021962:	b510      	push	{r4, lr}
 8021964:	4604      	mov	r4, r0
 8021966:	2104      	movs	r1, #4
 8021968:	f009 fa9f 	bl	802aeaa <_ZdlPvj>
 802196c:	4620      	mov	r0, r4
 802196e:	bd10      	pop	{r4, pc}

08021970 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021970:	b510      	push	{r4, lr}
 8021972:	4604      	mov	r4, r0
 8021974:	2104      	movs	r1, #4
 8021976:	f009 fa98 	bl	802aeaa <_ZdlPvj>
 802197a:	4620      	mov	r0, r4
 802197c:	bd10      	pop	{r4, pc}

0802197e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802197e:	b510      	push	{r4, lr}
 8021980:	4604      	mov	r4, r0
 8021982:	2104      	movs	r1, #4
 8021984:	f009 fa91 	bl	802aeaa <_ZdlPvj>
 8021988:	4620      	mov	r0, r4
 802198a:	bd10      	pop	{r4, pc}

0802198c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802198c:	b510      	push	{r4, lr}
 802198e:	4604      	mov	r4, r0
 8021990:	2104      	movs	r1, #4
 8021992:	f009 fa8a 	bl	802aeaa <_ZdlPvj>
 8021996:	4620      	mov	r0, r4
 8021998:	bd10      	pop	{r4, pc}

0802199a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802199a:	b510      	push	{r4, lr}
 802199c:	4604      	mov	r4, r0
 802199e:	2104      	movs	r1, #4
 80219a0:	f009 fa83 	bl	802aeaa <_ZdlPvj>
 80219a4:	4620      	mov	r0, r4
 80219a6:	bd10      	pop	{r4, pc}

080219a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80219a8:	b510      	push	{r4, lr}
 80219aa:	4604      	mov	r4, r0
 80219ac:	2104      	movs	r1, #4
 80219ae:	f009 fa7c 	bl	802aeaa <_ZdlPvj>
 80219b2:	4620      	mov	r0, r4
 80219b4:	bd10      	pop	{r4, pc}

080219b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80219b6:	b510      	push	{r4, lr}
 80219b8:	4604      	mov	r4, r0
 80219ba:	2104      	movs	r1, #4
 80219bc:	f009 fa75 	bl	802aeaa <_ZdlPvj>
 80219c0:	4620      	mov	r0, r4
 80219c2:	bd10      	pop	{r4, pc}

080219c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80219c4:	b510      	push	{r4, lr}
 80219c6:	4604      	mov	r4, r0
 80219c8:	2104      	movs	r1, #4
 80219ca:	f009 fa6e 	bl	802aeaa <_ZdlPvj>
 80219ce:	4620      	mov	r0, r4
 80219d0:	bd10      	pop	{r4, pc}

080219d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80219d2:	b510      	push	{r4, lr}
 80219d4:	4604      	mov	r4, r0
 80219d6:	2104      	movs	r1, #4
 80219d8:	f009 fa67 	bl	802aeaa <_ZdlPvj>
 80219dc:	4620      	mov	r0, r4
 80219de:	bd10      	pop	{r4, pc}

080219e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80219e0:	b510      	push	{r4, lr}
 80219e2:	4604      	mov	r4, r0
 80219e4:	2104      	movs	r1, #4
 80219e6:	f009 fa60 	bl	802aeaa <_ZdlPvj>
 80219ea:	4620      	mov	r0, r4
 80219ec:	bd10      	pop	{r4, pc}

080219ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80219ee:	b510      	push	{r4, lr}
 80219f0:	4604      	mov	r4, r0
 80219f2:	2104      	movs	r1, #4
 80219f4:	f009 fa59 	bl	802aeaa <_ZdlPvj>
 80219f8:	4620      	mov	r0, r4
 80219fa:	bd10      	pop	{r4, pc}

080219fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80219fc:	b510      	push	{r4, lr}
 80219fe:	4604      	mov	r4, r0
 8021a00:	2104      	movs	r1, #4
 8021a02:	f009 fa52 	bl	802aeaa <_ZdlPvj>
 8021a06:	4620      	mov	r0, r4
 8021a08:	bd10      	pop	{r4, pc}

08021a0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a0a:	b510      	push	{r4, lr}
 8021a0c:	4604      	mov	r4, r0
 8021a0e:	2104      	movs	r1, #4
 8021a10:	f009 fa4b 	bl	802aeaa <_ZdlPvj>
 8021a14:	4620      	mov	r0, r4
 8021a16:	bd10      	pop	{r4, pc}

08021a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a18:	b510      	push	{r4, lr}
 8021a1a:	4604      	mov	r4, r0
 8021a1c:	2104      	movs	r1, #4
 8021a1e:	f009 fa44 	bl	802aeaa <_ZdlPvj>
 8021a22:	4620      	mov	r0, r4
 8021a24:	bd10      	pop	{r4, pc}

08021a26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a26:	b510      	push	{r4, lr}
 8021a28:	4604      	mov	r4, r0
 8021a2a:	2104      	movs	r1, #4
 8021a2c:	f009 fa3d 	bl	802aeaa <_ZdlPvj>
 8021a30:	4620      	mov	r0, r4
 8021a32:	bd10      	pop	{r4, pc}

08021a34 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a34:	b510      	push	{r4, lr}
 8021a36:	4604      	mov	r4, r0
 8021a38:	2104      	movs	r1, #4
 8021a3a:	f009 fa36 	bl	802aeaa <_ZdlPvj>
 8021a3e:	4620      	mov	r0, r4
 8021a40:	bd10      	pop	{r4, pc}

08021a42 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021a42:	b510      	push	{r4, lr}
 8021a44:	4604      	mov	r4, r0
 8021a46:	2104      	movs	r1, #4
 8021a48:	f009 fa2f 	bl	802aeaa <_ZdlPvj>
 8021a4c:	4620      	mov	r0, r4
 8021a4e:	bd10      	pop	{r4, pc}

08021a50 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021a50:	b510      	push	{r4, lr}
 8021a52:	4604      	mov	r4, r0
 8021a54:	2104      	movs	r1, #4
 8021a56:	f009 fa28 	bl	802aeaa <_ZdlPvj>
 8021a5a:	4620      	mov	r0, r4
 8021a5c:	bd10      	pop	{r4, pc}

08021a5e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021a5e:	b510      	push	{r4, lr}
 8021a60:	4604      	mov	r4, r0
 8021a62:	2104      	movs	r1, #4
 8021a64:	f009 fa21 	bl	802aeaa <_ZdlPvj>
 8021a68:	4620      	mov	r0, r4
 8021a6a:	bd10      	pop	{r4, pc}

08021a6c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a6c:	b510      	push	{r4, lr}
 8021a6e:	4604      	mov	r4, r0
 8021a70:	2104      	movs	r1, #4
 8021a72:	f009 fa1a 	bl	802aeaa <_ZdlPvj>
 8021a76:	4620      	mov	r0, r4
 8021a78:	bd10      	pop	{r4, pc}

08021a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a7a:	b510      	push	{r4, lr}
 8021a7c:	4604      	mov	r4, r0
 8021a7e:	2104      	movs	r1, #4
 8021a80:	f009 fa13 	bl	802aeaa <_ZdlPvj>
 8021a84:	4620      	mov	r0, r4
 8021a86:	bd10      	pop	{r4, pc}

08021a88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021a88:	b510      	push	{r4, lr}
 8021a8a:	4604      	mov	r4, r0
 8021a8c:	2104      	movs	r1, #4
 8021a8e:	f009 fa0c 	bl	802aeaa <_ZdlPvj>
 8021a92:	4620      	mov	r0, r4
 8021a94:	bd10      	pop	{r4, pc}

08021a96 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021a96:	b510      	push	{r4, lr}
 8021a98:	4604      	mov	r4, r0
 8021a9a:	2104      	movs	r1, #4
 8021a9c:	f009 fa05 	bl	802aeaa <_ZdlPvj>
 8021aa0:	4620      	mov	r0, r4
 8021aa2:	bd10      	pop	{r4, pc}

08021aa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021aa4:	b510      	push	{r4, lr}
 8021aa6:	4604      	mov	r4, r0
 8021aa8:	2104      	movs	r1, #4
 8021aaa:	f009 f9fe 	bl	802aeaa <_ZdlPvj>
 8021aae:	4620      	mov	r0, r4
 8021ab0:	bd10      	pop	{r4, pc}

08021ab2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021ab2:	b510      	push	{r4, lr}
 8021ab4:	4604      	mov	r4, r0
 8021ab6:	2104      	movs	r1, #4
 8021ab8:	f009 f9f7 	bl	802aeaa <_ZdlPvj>
 8021abc:	4620      	mov	r0, r4
 8021abe:	bd10      	pop	{r4, pc}

08021ac0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021ac0:	b510      	push	{r4, lr}
 8021ac2:	4604      	mov	r4, r0
 8021ac4:	2104      	movs	r1, #4
 8021ac6:	f009 f9f0 	bl	802aeaa <_ZdlPvj>
 8021aca:	4620      	mov	r0, r4
 8021acc:	bd10      	pop	{r4, pc}

08021ace <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021ace:	b510      	push	{r4, lr}
 8021ad0:	4604      	mov	r4, r0
 8021ad2:	2104      	movs	r1, #4
 8021ad4:	f009 f9e9 	bl	802aeaa <_ZdlPvj>
 8021ad8:	4620      	mov	r0, r4
 8021ada:	bd10      	pop	{r4, pc}

08021adc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ade:	4606      	mov	r6, r0
 8021ae0:	b087      	sub	sp, #28
 8021ae2:	460c      	mov	r4, r1
 8021ae4:	4617      	mov	r7, r2
 8021ae6:	461d      	mov	r5, r3
 8021ae8:	b333      	cbz	r3, 8021b38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021aea:	4608      	mov	r0, r1
 8021aec:	f7f6 fb6f 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8021af0:	bb10      	cbnz	r0, 8021b38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021af2:	6820      	ldr	r0, [r4, #0]
 8021af4:	ab04      	add	r3, sp, #16
 8021af6:	6861      	ldr	r1, [r4, #4]
 8021af8:	4c1b      	ldr	r4, [pc, #108]	; (8021b68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021afa:	c303      	stmia	r3!, {r0, r1}
 8021afc:	a804      	add	r0, sp, #16
 8021afe:	f7f9 fed5 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b02:	6820      	ldr	r0, [r4, #0]
 8021b04:	6803      	ldr	r3, [r0, #0]
 8021b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b08:	4798      	blx	r3
 8021b0a:	2dff      	cmp	r5, #255	; 0xff
 8021b0c:	d016      	beq.n	8021b3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021b0e:	f010 0f08 	tst.w	r0, #8
 8021b12:	6820      	ldr	r0, [r4, #0]
 8021b14:	d015      	beq.n	8021b42 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021b16:	2400      	movs	r4, #0
 8021b18:	6801      	ldr	r1, [r0, #0]
 8021b1a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021b1e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021b22:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021b26:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021b2a:	9401      	str	r4, [sp, #4]
 8021b2c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021b30:	9400      	str	r4, [sp, #0]
 8021b32:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8021b34:	4639      	mov	r1, r7
 8021b36:	47a0      	blx	r4
 8021b38:	b007      	add	sp, #28
 8021b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b3c:	f010 0f02 	tst.w	r0, #2
 8021b40:	e7e7      	b.n	8021b12 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021b42:	6803      	ldr	r3, [r0, #0]
 8021b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021b46:	4798      	blx	r3
 8021b48:	4b08      	ldr	r3, [pc, #32]	; (8021b6c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021b4a:	4601      	mov	r1, r0
 8021b4c:	4630      	mov	r0, r6
 8021b4e:	881a      	ldrh	r2, [r3, #0]
 8021b50:	6833      	ldr	r3, [r6, #0]
 8021b52:	e9cd 7500 	strd	r7, r5, [sp]
 8021b56:	69dd      	ldr	r5, [r3, #28]
 8021b58:	ab04      	add	r3, sp, #16
 8021b5a:	47a8      	blx	r5
 8021b5c:	6820      	ldr	r0, [r4, #0]
 8021b5e:	6803      	ldr	r3, [r0, #0]
 8021b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b62:	4798      	blx	r3
 8021b64:	e7e8      	b.n	8021b38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021b66:	bf00      	nop
 8021b68:	2400b8cc 	.word	0x2400b8cc
 8021b6c:	2400b8c6 	.word	0x2400b8c6

08021b70 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b74:	4f97      	ldr	r7, [pc, #604]	; (8021dd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8021b76:	4616      	mov	r6, r2
 8021b78:	b08f      	sub	sp, #60	; 0x3c
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	683a      	ldr	r2, [r7, #0]
 8021b7e:	4689      	mov	r9, r1
 8021b80:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8021b84:	2a02      	cmp	r2, #2
 8021b86:	d106      	bne.n	8021b96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8021b88:	4b93      	ldr	r3, [pc, #588]	; (8021dd8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8021b8a:	f44f 7159 	mov.w	r1, #868	; 0x364
 8021b8e:	4a93      	ldr	r2, [pc, #588]	; (8021ddc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021b90:	4893      	ldr	r0, [pc, #588]	; (8021de0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8021b92:	f009 f9b9 	bl	802af08 <__assert_func>
 8021b96:	ad0e      	add	r5, sp, #56	; 0x38
 8021b98:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8021b9c:	4628      	mov	r0, r5
 8021b9e:	f7fd fad3 	bl	801f148 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021ba2:	6823      	ldr	r3, [r4, #0]
 8021ba4:	4680      	mov	r8, r0
 8021ba6:	4620      	mov	r0, r4
 8021ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021baa:	4798      	blx	r3
 8021bac:	4580      	cmp	r8, r0
 8021bae:	d004      	beq.n	8021bba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8021bb0:	4b8c      	ldr	r3, [pc, #560]	; (8021de4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8021bb2:	f240 3166 	movw	r1, #870	; 0x366
 8021bb6:	4a89      	ldr	r2, [pc, #548]	; (8021ddc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021bb8:	e7ea      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021bba:	4628      	mov	r0, r5
 8021bbc:	f7fd fa3a 	bl	801f034 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021bc0:	4680      	mov	r8, r0
 8021bc2:	b920      	cbnz	r0, 8021bce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8021bc4:	4b88      	ldr	r3, [pc, #544]	; (8021de8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8021bc6:	f44f 715a 	mov.w	r1, #872	; 0x368
 8021bca:	4a84      	ldr	r2, [pc, #528]	; (8021ddc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021bcc:	e7e0      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021bce:	6830      	ldr	r0, [r6, #0]
 8021bd0:	ab06      	add	r3, sp, #24
 8021bd2:	6871      	ldr	r1, [r6, #4]
 8021bd4:	f10d 0b20 	add.w	fp, sp, #32
 8021bd8:	f9b6 a000 	ldrsh.w	sl, [r6]
 8021bdc:	c303      	stmia	r3!, {r0, r1}
 8021bde:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021be2:	ab08      	add	r3, sp, #32
 8021be4:	f8d9 0000 	ldr.w	r0, [r9]
 8021be8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8021bec:	c303      	stmia	r3!, {r0, r1}
 8021bee:	4628      	mov	r0, r5
 8021bf0:	f7fd f918 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021bf4:	4606      	mov	r6, r0
 8021bf6:	4628      	mov	r0, r5
 8021bf8:	4d7c      	ldr	r5, [pc, #496]	; (8021dec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8021bfa:	f7fd f94d 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021bfe:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8021c02:	a806      	add	r0, sp, #24
 8021c04:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8021c08:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8021c0c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8021c10:	f7f9 fe4c 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c14:	4658      	mov	r0, fp
 8021c16:	f7f9 fe49 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c1a:	a80a      	add	r0, sp, #40	; 0x28
 8021c1c:	f7f9 fe46 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c20:	4b73      	ldr	r3, [pc, #460]	; (8021df0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021c22:	2100      	movs	r1, #0
 8021c24:	f9b5 2000 	ldrsh.w	r2, [r5]
 8021c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021c2c:	4658      	mov	r0, fp
 8021c2e:	910c      	str	r1, [sp, #48]	; 0x30
 8021c30:	a90c      	add	r1, sp, #48	; 0x30
 8021c32:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8021c36:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8021c3a:	f7f6 fa85 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 8021c3e:	4658      	mov	r0, fp
 8021c40:	f7f6 fac5 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8021c44:	2800      	cmp	r0, #0
 8021c46:	f040 809a 	bne.w	8021d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021c4a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8021c4e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8021c52:	4288      	cmp	r0, r1
 8021c54:	db38      	blt.n	8021cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021c56:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8021c5a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021c5e:	429a      	cmp	r2, r3
 8021c60:	db32      	blt.n	8021cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021c62:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8021c66:	4430      	add	r0, r6
 8021c68:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021c6c:	4431      	add	r1, r6
 8021c6e:	b200      	sxth	r0, r0
 8021c70:	b209      	sxth	r1, r1
 8021c72:	4288      	cmp	r0, r1
 8021c74:	dc28      	bgt.n	8021cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021c76:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8021c7a:	440a      	add	r2, r1
 8021c7c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8021c80:	440b      	add	r3, r1
 8021c82:	b212      	sxth	r2, r2
 8021c84:	b21b      	sxth	r3, r3
 8021c86:	429a      	cmp	r2, r3
 8021c88:	dc1e      	bgt.n	8021cc8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021c8a:	6823      	ldr	r3, [r4, #0]
 8021c8c:	4620      	mov	r0, r4
 8021c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021c90:	4798      	blx	r3
 8021c92:	4682      	mov	sl, r0
 8021c94:	6838      	ldr	r0, [r7, #0]
 8021c96:	6803      	ldr	r3, [r0, #0]
 8021c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021c9a:	4798      	blx	r3
 8021c9c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8021ca0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021ca4:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8021ca8:	1a5b      	subs	r3, r3, r1
 8021caa:	b29b      	uxth	r3, r3
 8021cac:	b21c      	sxth	r4, r3
 8021cae:	2c00      	cmp	r4, #0
 8021cb0:	dc0f      	bgt.n	8021cd2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8021cb2:	bf18      	it	ne
 8021cb4:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8021cb8:	4644      	mov	r4, r8
 8021cba:	bf1e      	ittt	ne
 8021cbc:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8021cc0:	185b      	addne	r3, r3, r1
 8021cc2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8021cc6:	e009      	b.n	8021cdc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8021cc8:	4b4a      	ldr	r3, [pc, #296]	; (8021df4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8021cca:	f240 3176 	movw	r1, #886	; 0x376
 8021cce:	4a43      	ldr	r2, [pc, #268]	; (8021ddc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021cd0:	e75e      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021cd2:	1ad3      	subs	r3, r2, r3
 8021cd4:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021cd8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8021cdc:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8021ce0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8021ce4:	1b9b      	subs	r3, r3, r6
 8021ce6:	b29b      	uxth	r3, r3
 8021ce8:	b219      	sxth	r1, r3
 8021cea:	2900      	cmp	r1, #0
 8021cec:	dd4b      	ble.n	8021d86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8021cee:	4351      	muls	r1, r2
 8021cf0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021cf4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8021cf8:	1acb      	subs	r3, r1, r3
 8021cfa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8021cfe:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8021d02:	2e00      	cmp	r6, #0
 8021d04:	dd3b      	ble.n	8021d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021d06:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	dd37      	ble.n	8021d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021d0e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8021d12:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021d16:	fb0a f90c 	mul.w	r9, sl, ip
 8021d1a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8021d1e:	4481      	add	r9, r0
 8021d20:	8828      	ldrh	r0, [r5, #0]
 8021d22:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8021d26:	1a41      	subs	r1, r0, r1
 8021d28:	42ae      	cmp	r6, r5
 8021d2a:	bfa8      	it	ge
 8021d2c:	462e      	movge	r6, r5
 8021d2e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8021d32:	428e      	cmp	r6, r1
 8021d34:	bfa8      	it	ge
 8021d36:	460e      	movge	r6, r1
 8021d38:	429d      	cmp	r5, r3
 8021d3a:	bfa8      	it	ge
 8021d3c:	461d      	movge	r5, r3
 8021d3e:	4b2c      	ldr	r3, [pc, #176]	; (8021df0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021d40:	881b      	ldrh	r3, [r3, #0]
 8021d42:	eba3 030c 	sub.w	r3, r3, ip
 8021d46:	429d      	cmp	r5, r3
 8021d48:	bfa8      	it	ge
 8021d4a:	461d      	movge	r5, r3
 8021d4c:	42b0      	cmp	r0, r6
 8021d4e:	d12c      	bne.n	8021daa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021d50:	4290      	cmp	r0, r2
 8021d52:	d12a      	bne.n	8021daa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021d54:	6838      	ldr	r0, [r7, #0]
 8021d56:	9203      	str	r2, [sp, #12]
 8021d58:	6803      	ldr	r3, [r0, #0]
 8021d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021d5c:	4798      	blx	r3
 8021d5e:	07c3      	lsls	r3, r0, #31
 8021d60:	d51a      	bpl.n	8021d98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8021d62:	9a03      	ldr	r2, [sp, #12]
 8021d64:	6838      	ldr	r0, [r7, #0]
 8021d66:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8021d6a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8021d6e:	6803      	ldr	r3, [r0, #0]
 8021d70:	9200      	str	r2, [sp, #0]
 8021d72:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8021d74:	4623      	mov	r3, r4
 8021d76:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021d7a:	47a8      	blx	r5
 8021d7c:	4680      	mov	r8, r0
 8021d7e:	4640      	mov	r0, r8
 8021d80:	b00f      	add	sp, #60	; 0x3c
 8021d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d86:	bf1f      	itttt	ne
 8021d88:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8021d8c:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8021d90:	185b      	addne	r3, r3, r1
 8021d92:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8021d96:	e7b2      	b.n	8021cfe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8021d98:	6838      	ldr	r0, [r7, #0]
 8021d9a:	464a      	mov	r2, r9
 8021d9c:	4621      	mov	r1, r4
 8021d9e:	6803      	ldr	r3, [r0, #0]
 8021da0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8021da2:	fb05 f30a 	mul.w	r3, r5, sl
 8021da6:	47b0      	blx	r6
 8021da8:	e7e9      	b.n	8021d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021daa:	4355      	muls	r5, r2
 8021dac:	0076      	lsls	r6, r6, #1
 8021dae:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8021db2:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8021db6:	9303      	str	r3, [sp, #12]
 8021db8:	9b03      	ldr	r3, [sp, #12]
 8021dba:	429c      	cmp	r4, r3
 8021dbc:	d2df      	bcs.n	8021d7e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021dbe:	6838      	ldr	r0, [r7, #0]
 8021dc0:	464a      	mov	r2, r9
 8021dc2:	4621      	mov	r1, r4
 8021dc4:	44d1      	add	r9, sl
 8021dc6:	6803      	ldr	r3, [r0, #0]
 8021dc8:	445c      	add	r4, fp
 8021dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021dcc:	461d      	mov	r5, r3
 8021dce:	4633      	mov	r3, r6
 8021dd0:	47a8      	blx	r5
 8021dd2:	e7f1      	b.n	8021db8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8021dd4:	2400b8cc 	.word	0x2400b8cc
 8021dd8:	0802ff93 	.word	0x0802ff93
 8021ddc:	08030844 	.word	0x08030844
 8021de0:	08030045 	.word	0x08030045
 8021de4:	08030077 	.word	0x08030077
 8021de8:	080300cc 	.word	0x080300cc
 8021dec:	2400b8c6 	.word	0x2400b8c6
 8021df0:	2400b8c8 	.word	0x2400b8c8
 8021df4:	0803010a 	.word	0x0803010a

08021df8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dfc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8021e00:	4688      	mov	r8, r1
 8021e02:	4614      	mov	r4, r2
 8021e04:	461d      	mov	r5, r3
 8021e06:	9e08      	ldr	r6, [sp, #32]
 8021e08:	2f00      	cmp	r7, #0
 8021e0a:	f000 80b4 	beq.w	8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021e0e:	4618      	mov	r0, r3
 8021e10:	f7f6 f9dd 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e14:	2800      	cmp	r0, #0
 8021e16:	f040 80ae 	bne.w	8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021e1a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021e1e:	2fff      	cmp	r7, #255	; 0xff
 8021e20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021e24:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021e28:	fb04 1303 	mla	r3, r4, r3, r1
 8021e2c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021e30:	eba4 0200 	sub.w	r2, r4, r0
 8021e34:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021e38:	fb04 f505 	mul.w	r5, r4, r5
 8021e3c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021e40:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021e44:	d04b      	beq.n	8021ede <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8021e46:	b2bc      	uxth	r4, r7
 8021e48:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8021e4c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021e50:	fa5f f788 	uxtb.w	r7, r8
 8021e54:	b2f3      	uxtb	r3, r6
 8021e56:	0040      	lsls	r0, r0, #1
 8021e58:	fb0e fe04 	mul.w	lr, lr, r4
 8021e5c:	4367      	muls	r7, r4
 8021e5e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021e62:	4363      	muls	r3, r4
 8021e64:	fa1f fc8c 	uxth.w	ip, ip
 8021e68:	42a9      	cmp	r1, r5
 8021e6a:	f080 8084 	bcs.w	8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021e6e:	eb01 0900 	add.w	r9, r1, r0
 8021e72:	4549      	cmp	r1, r9
 8021e74:	d231      	bcs.n	8021eda <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021e76:	880a      	ldrh	r2, [r1, #0]
 8021e78:	1214      	asrs	r4, r2, #8
 8021e7a:	10d6      	asrs	r6, r2, #3
 8021e7c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021e80:	00d2      	lsls	r2, r2, #3
 8021e82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021e86:	b2d2      	uxtb	r2, r2
 8021e88:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021e8c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021e90:	fb14 f40c 	smulbb	r4, r4, ip
 8021e94:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021e98:	fb12 f20c 	smulbb	r2, r2, ip
 8021e9c:	fb16 f60c 	smulbb	r6, r6, ip
 8021ea0:	4474      	add	r4, lr
 8021ea2:	441a      	add	r2, r3
 8021ea4:	b2a4      	uxth	r4, r4
 8021ea6:	443e      	add	r6, r7
 8021ea8:	b292      	uxth	r2, r2
 8021eaa:	f104 0a01 	add.w	sl, r4, #1
 8021eae:	b2b6      	uxth	r6, r6
 8021eb0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021eb4:	f102 0a01 	add.w	sl, r2, #1
 8021eb8:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021ebc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021ec0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021ec4:	4322      	orrs	r2, r4
 8021ec6:	1c74      	adds	r4, r6, #1
 8021ec8:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021ecc:	0976      	lsrs	r6, r6, #5
 8021ece:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021ed2:	4332      	orrs	r2, r6
 8021ed4:	f821 2b02 	strh.w	r2, [r1], #2
 8021ed8:	e7cb      	b.n	8021e72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8021eda:	4441      	add	r1, r8
 8021edc:	e7c4      	b.n	8021e68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021ede:	0973      	lsrs	r3, r6, #5
 8021ee0:	4f26      	ldr	r7, [pc, #152]	; (8021f7c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8021ee2:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021ee6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021eea:	ea08 0707 	and.w	r7, r8, r7
 8021eee:	433b      	orrs	r3, r7
 8021ef0:	4333      	orrs	r3, r6
 8021ef2:	07e6      	lsls	r6, r4, #31
 8021ef4:	b29b      	uxth	r3, r3
 8021ef6:	d50b      	bpl.n	8021f10 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021ef8:	0040      	lsls	r0, r0, #1
 8021efa:	0052      	lsls	r2, r2, #1
 8021efc:	42a9      	cmp	r1, r5
 8021efe:	d23a      	bcs.n	8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021f00:	180c      	adds	r4, r1, r0
 8021f02:	42a1      	cmp	r1, r4
 8021f04:	d202      	bcs.n	8021f0c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021f06:	f821 3b02 	strh.w	r3, [r1], #2
 8021f0a:	e7fa      	b.n	8021f02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021f0c:	4411      	add	r1, r2
 8021f0e:	e7f5      	b.n	8021efc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8021f10:	078f      	lsls	r7, r1, #30
 8021f12:	d008      	beq.n	8021f26 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021f14:	0066      	lsls	r6, r4, #1
 8021f16:	460a      	mov	r2, r1
 8021f18:	42aa      	cmp	r2, r5
 8021f1a:	d202      	bcs.n	8021f22 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021f1c:	8013      	strh	r3, [r2, #0]
 8021f1e:	4432      	add	r2, r6
 8021f20:	e7fa      	b.n	8021f18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8021f22:	3102      	adds	r1, #2
 8021f24:	3801      	subs	r0, #1
 8021f26:	07c6      	lsls	r6, r0, #31
 8021f28:	d50b      	bpl.n	8021f42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021f2a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8021f2e:	0066      	lsls	r6, r4, #1
 8021f30:	3a01      	subs	r2, #1
 8021f32:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021f36:	42aa      	cmp	r2, r5
 8021f38:	d202      	bcs.n	8021f40 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021f3a:	8013      	strh	r3, [r2, #0]
 8021f3c:	4432      	add	r2, r6
 8021f3e:	e7fa      	b.n	8021f36 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8021f40:	3801      	subs	r0, #1
 8021f42:	b1c0      	cbz	r0, 8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021f44:	1040      	asrs	r0, r0, #1
 8021f46:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021f4a:	0080      	lsls	r0, r0, #2
 8021f4c:	0064      	lsls	r4, r4, #1
 8021f4e:	42a9      	cmp	r1, r5
 8021f50:	d211      	bcs.n	8021f76 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021f52:	078a      	lsls	r2, r1, #30
 8021f54:	d006      	beq.n	8021f64 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021f56:	4b0a      	ldr	r3, [pc, #40]	; (8021f80 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021f58:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8021f5c:	4a09      	ldr	r2, [pc, #36]	; (8021f84 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8021f5e:	480a      	ldr	r0, [pc, #40]	; (8021f88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8021f60:	f008 ffd2 	bl	802af08 <__assert_func>
 8021f64:	180e      	adds	r6, r1, r0
 8021f66:	460a      	mov	r2, r1
 8021f68:	42b2      	cmp	r2, r6
 8021f6a:	d202      	bcs.n	8021f72 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021f6c:	f842 3b04 	str.w	r3, [r2], #4
 8021f70:	e7fa      	b.n	8021f68 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8021f72:	4421      	add	r1, r4
 8021f74:	e7eb      	b.n	8021f4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021f7a:	bf00      	nop
 8021f7c:	00fff800 	.word	0x00fff800
 8021f80:	0802fe44 	.word	0x0802fe44
 8021f84:	08030490 	.word	0x08030490
 8021f88:	08030045 	.word	0x08030045

08021f8c <_ZN8touchgfx8LCD16bppC1Ev>:
 8021f8c:	2200      	movs	r2, #0
 8021f8e:	4910      	ldr	r1, [pc, #64]	; (8021fd0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021f90:	6042      	str	r2, [r0, #4]
 8021f92:	6001      	str	r1, [r0, #0]
 8021f94:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021f98:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021f9c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021fa0:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8021fa4:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021fa8:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021fac:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021fb0:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8021fb4:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021fb8:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021fbc:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021fc0:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8021fc4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021fc8:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021fcc:	4770      	bx	lr
 8021fce:	bf00      	nop
 8021fd0:	08030448 	.word	0x08030448

08021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8021fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fd8:	b08d      	sub	sp, #52	; 0x34
 8021fda:	460d      	mov	r5, r1
 8021fdc:	4604      	mov	r4, r0
 8021fde:	4699      	mov	r9, r3
 8021fe0:	6808      	ldr	r0, [r1, #0]
 8021fe2:	ab08      	add	r3, sp, #32
 8021fe4:	6849      	ldr	r1, [r1, #4]
 8021fe6:	c303      	stmia	r3!, {r0, r1}
 8021fe8:	6810      	ldr	r0, [r2, #0]
 8021fea:	ab0a      	add	r3, sp, #40	; 0x28
 8021fec:	6851      	ldr	r1, [r2, #4]
 8021fee:	c303      	stmia	r3!, {r0, r1}
 8021ff0:	a808      	add	r0, sp, #32
 8021ff2:	f7f9 fc5b 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021ff6:	4629      	mov	r1, r5
 8021ff8:	a80a      	add	r0, sp, #40	; 0x28
 8021ffa:	4d67      	ldr	r5, [pc, #412]	; (8022198 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021ffc:	f7f9 fc7e 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022000:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8022004:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8022008:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802200c:	6828      	ldr	r0, [r5, #0]
 802200e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022012:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8022016:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802201a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802201e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022022:	440a      	add	r2, r1
 8022024:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8022028:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802202c:	4413      	add	r3, r2
 802202e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8022032:	6803      	ldr	r3, [r0, #0]
 8022034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022036:	4798      	blx	r3
 8022038:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802203c:	d119      	bne.n	8022072 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 802203e:	f010 0f20 	tst.w	r0, #32
 8022042:	6828      	ldr	r0, [r5, #0]
 8022044:	d018      	beq.n	8022078 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022046:	2500      	movs	r5, #0
 8022048:	6801      	ldr	r1, [r0, #0]
 802204a:	b2b6      	uxth	r6, r6
 802204c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8022050:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8022054:	9601      	str	r6, [sp, #4]
 8022056:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802205a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 802205e:	9502      	str	r5, [sp, #8]
 8022060:	fa1f f588 	uxth.w	r5, r8
 8022064:	9500      	str	r5, [sp, #0]
 8022066:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8022068:	4621      	mov	r1, r4
 802206a:	47a8      	blx	r5
 802206c:	b00d      	add	sp, #52	; 0x34
 802206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022076:	e7e4      	b.n	8022042 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022078:	6803      	ldr	r3, [r0, #0]
 802207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802207c:	4798      	blx	r3
 802207e:	4947      	ldr	r1, [pc, #284]	; (802219c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022080:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8022084:	880b      	ldrh	r3, [r1, #0]
 8022086:	468a      	mov	sl, r1
 8022088:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 802208c:	fb03 5202 	mla	r2, r3, r2, r5
 8022090:	4373      	muls	r3, r6
 8022092:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022096:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802209a:	9307      	str	r3, [sp, #28]
 802209c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80220a0:	9306      	str	r3, [sp, #24]
 80220a2:	9b07      	ldr	r3, [sp, #28]
 80220a4:	4298      	cmp	r0, r3
 80220a6:	d270      	bcs.n	802218a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80220a8:	9b06      	ldr	r3, [sp, #24]
 80220aa:	4621      	mov	r1, r4
 80220ac:	eb00 0b03 	add.w	fp, r0, r3
 80220b0:	4558      	cmp	r0, fp
 80220b2:	d25d      	bcs.n	8022170 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80220b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80220b8:	0e23      	lsrs	r3, r4, #24
 80220ba:	d014      	beq.n	80220e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80220bc:	2bff      	cmp	r3, #255	; 0xff
 80220be:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80220c2:	d112      	bne.n	80220ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80220c4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80220c8:	d10f      	bne.n	80220ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80220ca:	0963      	lsrs	r3, r4, #5
 80220cc:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80220d0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80220d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80220d8:	f02c 0c07 	bic.w	ip, ip, #7
 80220dc:	ea43 0c0c 	orr.w	ip, r3, ip
 80220e0:	ea4c 0404 	orr.w	r4, ip, r4
 80220e4:	8004      	strh	r4, [r0, #0]
 80220e6:	3002      	adds	r0, #2
 80220e8:	e7e2      	b.n	80220b0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80220ea:	fb09 f303 	mul.w	r3, r9, r3
 80220ee:	8807      	ldrh	r7, [r0, #0]
 80220f0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80220f4:	fa5f fc8c 	uxtb.w	ip, ip
 80220f8:	1c5a      	adds	r2, r3, #1
 80220fa:	123e      	asrs	r6, r7, #8
 80220fc:	10fd      	asrs	r5, r7, #3
 80220fe:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022102:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022106:	00ff      	lsls	r7, r7, #3
 8022108:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802210c:	1212      	asrs	r2, r2, #8
 802210e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022112:	b293      	uxth	r3, r2
 8022114:	43d2      	mvns	r2, r2
 8022116:	b2ff      	uxtb	r7, r7
 8022118:	fb1e fe03 	smulbb	lr, lr, r3
 802211c:	b2d2      	uxtb	r2, r2
 802211e:	fb1c fc03 	smulbb	ip, ip, r3
 8022122:	b2e4      	uxtb	r4, r4
 8022124:	fb06 e602 	mla	r6, r6, r2, lr
 8022128:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802212c:	fb14 f403 	smulbb	r4, r4, r3
 8022130:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022134:	b2b6      	uxth	r6, r6
 8022136:	fb05 c502 	mla	r5, r5, r2, ip
 802213a:	fb07 4702 	mla	r7, r7, r2, r4
 802213e:	f106 0e01 	add.w	lr, r6, #1
 8022142:	b2ad      	uxth	r5, r5
 8022144:	b2bf      	uxth	r7, r7
 8022146:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 802214a:	f105 0c01 	add.w	ip, r5, #1
 802214e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8022152:	1c7e      	adds	r6, r7, #1
 8022154:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022158:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802215c:	096d      	lsrs	r5, r5, #5
 802215e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022162:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022166:	ea46 060e 	orr.w	r6, r6, lr
 802216a:	432e      	orrs	r6, r5
 802216c:	8006      	strh	r6, [r0, #0]
 802216e:	e7ba      	b.n	80220e6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022170:	f8ba 3000 	ldrh.w	r3, [sl]
 8022174:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8022178:	eba3 0308 	sub.w	r3, r3, r8
 802217c:	eba4 0408 	sub.w	r4, r4, r8
 8022180:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022184:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022188:	e78b      	b.n	80220a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 802218a:	4b03      	ldr	r3, [pc, #12]	; (8022198 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 802218c:	6818      	ldr	r0, [r3, #0]
 802218e:	6803      	ldr	r3, [r0, #0]
 8022190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022192:	4798      	blx	r3
 8022194:	e76a      	b.n	802206c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022196:	bf00      	nop
 8022198:	2400b8cc 	.word	0x2400b8cc
 802219c:	2400b8c6 	.word	0x2400b8c6

080221a0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80221a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80221a4:	b085      	sub	sp, #20
 80221a6:	6810      	ldr	r0, [r2, #0]
 80221a8:	460c      	mov	r4, r1
 80221aa:	6851      	ldr	r1, [r2, #4]
 80221ac:	466d      	mov	r5, sp
 80221ae:	4616      	mov	r6, r2
 80221b0:	c503      	stmia	r5!, {r0, r1}
 80221b2:	6818      	ldr	r0, [r3, #0]
 80221b4:	6859      	ldr	r1, [r3, #4]
 80221b6:	c503      	stmia	r5!, {r0, r1}
 80221b8:	4668      	mov	r0, sp
 80221ba:	4d2e      	ldr	r5, [pc, #184]	; (8022274 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80221bc:	f7f9 fb76 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80221c0:	4631      	mov	r1, r6
 80221c2:	a802      	add	r0, sp, #8
 80221c4:	4e2c      	ldr	r6, [pc, #176]	; (8022278 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80221c6:	f7f9 fb99 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80221ca:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80221ce:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80221d2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80221d6:	6828      	ldr	r0, [r5, #0]
 80221d8:	fb11 2103 	smlabb	r1, r1, r3, r2
 80221dc:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80221e0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80221e4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80221e8:	f8bd 1000 	ldrh.w	r1, [sp]
 80221ec:	440a      	add	r2, r1
 80221ee:	f8ad 2008 	strh.w	r2, [sp, #8]
 80221f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80221f6:	4413      	add	r3, r2
 80221f8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80221fc:	6803      	ldr	r3, [r0, #0]
 80221fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022200:	4798      	blx	r3
 8022202:	8833      	ldrh	r3, [r6, #0]
 8022204:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022208:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 802220c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022210:	f8df e068 	ldr.w	lr, [pc, #104]	; 802227c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022214:	fb03 1202 	mla	r2, r3, r2, r1
 8022218:	fb08 f303 	mul.w	r3, r8, r3
 802221c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022220:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022224:	4298      	cmp	r0, r3
 8022226:	d21d      	bcs.n	8022264 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022228:	eb00 080c 	add.w	r8, r0, ip
 802222c:	4540      	cmp	r0, r8
 802222e:	d20f      	bcs.n	8022250 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022230:	f854 1b04 	ldr.w	r1, [r4], #4
 8022234:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022238:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 802223c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022240:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022244:	ea42 0209 	orr.w	r2, r2, r9
 8022248:	430a      	orrs	r2, r1
 802224a:	f820 2b02 	strh.w	r2, [r0], #2
 802224e:	e7ed      	b.n	802222c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022250:	8832      	ldrh	r2, [r6, #0]
 8022252:	1bd2      	subs	r2, r2, r7
 8022254:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022258:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 802225c:	1bd2      	subs	r2, r2, r7
 802225e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022262:	e7df      	b.n	8022224 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022264:	6828      	ldr	r0, [r5, #0]
 8022266:	6803      	ldr	r3, [r0, #0]
 8022268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802226a:	4798      	blx	r3
 802226c:	b005      	add	sp, #20
 802226e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022272:	bf00      	nop
 8022274:	2400b8cc 	.word	0x2400b8cc
 8022278:	2400b8c6 	.word	0x2400b8c6
 802227c:	fffff800 	.word	0xfffff800

08022280 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8022280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022284:	b08e      	sub	sp, #56	; 0x38
 8022286:	460e      	mov	r6, r1
 8022288:	4604      	mov	r4, r0
 802228a:	461d      	mov	r5, r3
 802228c:	6808      	ldr	r0, [r1, #0]
 802228e:	ab0a      	add	r3, sp, #40	; 0x28
 8022290:	6849      	ldr	r1, [r1, #4]
 8022292:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8022468 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8022296:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 802246c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 802229a:	c303      	stmia	r3!, {r0, r1}
 802229c:	6810      	ldr	r0, [r2, #0]
 802229e:	ab0c      	add	r3, sp, #48	; 0x30
 80222a0:	6851      	ldr	r1, [r2, #4]
 80222a2:	c303      	stmia	r3!, {r0, r1}
 80222a4:	a80a      	add	r0, sp, #40	; 0x28
 80222a6:	f7f9 fb01 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80222aa:	4631      	mov	r1, r6
 80222ac:	a80c      	add	r0, sp, #48	; 0x30
 80222ae:	f7f9 fb25 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80222b2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80222b6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80222ba:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80222be:	f8d8 0000 	ldr.w	r0, [r8]
 80222c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80222c6:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80222ca:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80222ce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80222d2:	440c      	add	r4, r1
 80222d4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80222d8:	440a      	add	r2, r1
 80222da:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80222de:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80222e2:	4413      	add	r3, r2
 80222e4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80222e8:	6803      	ldr	r3, [r0, #0]
 80222ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80222ec:	4798      	blx	r3
 80222ee:	2dff      	cmp	r5, #255	; 0xff
 80222f0:	d124      	bne.n	802233c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80222f2:	f010 0f01 	tst.w	r0, #1
 80222f6:	f8d8 0000 	ldr.w	r0, [r8]
 80222fa:	d022      	beq.n	8022342 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80222fc:	2100      	movs	r1, #0
 80222fe:	f04f 0e01 	mov.w	lr, #1
 8022302:	f8d0 c000 	ldr.w	ip, [r0]
 8022306:	b2b6      	uxth	r6, r6
 8022308:	f8cd e018 	str.w	lr, [sp, #24]
 802230c:	b2bf      	uxth	r7, r7
 802230e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8022312:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8022316:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802231a:	f8b9 e000 	ldrh.w	lr, [r9]
 802231e:	9503      	str	r5, [sp, #12]
 8022320:	9601      	str	r6, [sp, #4]
 8022322:	9700      	str	r7, [sp, #0]
 8022324:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022328:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802232c:	9102      	str	r1, [sp, #8]
 802232e:	4621      	mov	r1, r4
 8022330:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8022334:	47a8      	blx	r5
 8022336:	b00e      	add	sp, #56	; 0x38
 8022338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802233c:	f010 0f04 	tst.w	r0, #4
 8022340:	e7d9      	b.n	80222f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8022342:	6803      	ldr	r3, [r0, #0]
 8022344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022346:	4798      	blx	r3
 8022348:	f8b9 3000 	ldrh.w	r3, [r9]
 802234c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8022350:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8022354:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8022358:	435e      	muls	r6, r3
 802235a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 802235e:	2dff      	cmp	r5, #255	; 0xff
 8022360:	fb03 1202 	mla	r2, r3, r2, r1
 8022364:	ebac 0c07 	sub.w	ip, ip, r7
 8022368:	eba3 0707 	sub.w	r7, r3, r7
 802236c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022370:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022374:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8022378:	ea4f 0747 	mov.w	r7, r7, lsl #1
 802237c:	d049      	beq.n	8022412 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 802237e:	43eb      	mvns	r3, r5
 8022380:	fa1f f985 	uxth.w	r9, r5
 8022384:	b2db      	uxtb	r3, r3
 8022386:	42b0      	cmp	r0, r6
 8022388:	d266      	bcs.n	8022458 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 802238a:	eb00 0a0e 	add.w	sl, r0, lr
 802238e:	4550      	cmp	r0, sl
 8022390:	4621      	mov	r1, r4
 8022392:	f104 0403 	add.w	r4, r4, #3
 8022396:	d25b      	bcs.n	8022450 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8022398:	8802      	ldrh	r2, [r0, #0]
 802239a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802239e:	ea4f 2822 	mov.w	r8, r2, asr #8
 80223a2:	fb11 f109 	smulbb	r1, r1, r9
 80223a6:	10d5      	asrs	r5, r2, #3
 80223a8:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80223ac:	00d2      	lsls	r2, r2, #3
 80223ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80223b2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80223b6:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80223ba:	fb08 1803 	mla	r8, r8, r3, r1
 80223be:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80223c2:	b2d2      	uxtb	r2, r2
 80223c4:	fb11 f109 	smulbb	r1, r1, r9
 80223c8:	fa1f f888 	uxth.w	r8, r8
 80223cc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80223d0:	fb05 1503 	mla	r5, r5, r3, r1
 80223d4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80223d8:	fb11 f109 	smulbb	r1, r1, r9
 80223dc:	b2ad      	uxth	r5, r5
 80223de:	fb02 1203 	mla	r2, r2, r3, r1
 80223e2:	f108 0101 	add.w	r1, r8, #1
 80223e6:	b292      	uxth	r2, r2
 80223e8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80223ec:	1c51      	adds	r1, r2, #1
 80223ee:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80223f2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80223f6:	1c69      	adds	r1, r5, #1
 80223f8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80223fc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022400:	096d      	lsrs	r5, r5, #5
 8022402:	ea42 0208 	orr.w	r2, r2, r8
 8022406:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802240a:	432a      	orrs	r2, r5
 802240c:	f820 2b02 	strh.w	r2, [r0], #2
 8022410:	e7bd      	b.n	802238e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022412:	4a14      	ldr	r2, [pc, #80]	; (8022464 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022414:	42b0      	cmp	r0, r6
 8022416:	d21f      	bcs.n	8022458 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022418:	eb00 050e 	add.w	r5, r0, lr
 802241c:	42a8      	cmp	r0, r5
 802241e:	4621      	mov	r1, r4
 8022420:	f104 0403 	add.w	r4, r4, #3
 8022424:	d210      	bcs.n	8022448 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022426:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802242a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802242e:	00db      	lsls	r3, r3, #3
 8022430:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022434:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022438:	430b      	orrs	r3, r1
 802243a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802243e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8022442:	f820 3b02 	strh.w	r3, [r0], #2
 8022446:	e7e9      	b.n	802241c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8022448:	4438      	add	r0, r7
 802244a:	eb01 040c 	add.w	r4, r1, ip
 802244e:	e7e1      	b.n	8022414 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8022450:	4438      	add	r0, r7
 8022452:	eb01 040c 	add.w	r4, r1, ip
 8022456:	e796      	b.n	8022386 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8022458:	4b03      	ldr	r3, [pc, #12]	; (8022468 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 802245a:	6818      	ldr	r0, [r3, #0]
 802245c:	6803      	ldr	r3, [r0, #0]
 802245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022460:	4798      	blx	r3
 8022462:	e768      	b.n	8022336 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8022464:	fffff800 	.word	0xfffff800
 8022468:	2400b8cc 	.word	0x2400b8cc
 802246c:	2400b8c6 	.word	0x2400b8c6

08022470 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8022470:	b570      	push	{r4, r5, r6, lr}
 8022472:	9c04      	ldr	r4, [sp, #16]
 8022474:	4605      	mov	r5, r0
 8022476:	f89d 6018 	ldrb.w	r6, [sp, #24]
 802247a:	4608      	mov	r0, r1
 802247c:	4619      	mov	r1, r3
 802247e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8022482:	2a0d      	cmp	r2, #13
 8022484:	d825      	bhi.n	80224d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8022486:	e8df f002 	tbb	[pc, r2]
 802248a:	1807      	.short	0x1807
 802248c:	1d1d1d13 	.word	0x1d1d1d13
 8022490:	1d1d1d1d 	.word	0x1d1d1d1d
 8022494:	1d1d1d1d 	.word	0x1d1d1d1d
 8022498:	682a      	ldr	r2, [r5, #0]
 802249a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 802249e:	68d6      	ldr	r6, [r2, #12]
 80224a0:	4623      	mov	r3, r4
 80224a2:	460a      	mov	r2, r1
 80224a4:	4601      	mov	r1, r0
 80224a6:	46b4      	mov	ip, r6
 80224a8:	4628      	mov	r0, r5
 80224aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80224ae:	4760      	bx	ip
 80224b0:	4622      	mov	r2, r4
 80224b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80224b6:	f7ff bd8d 	b.w	8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80224ba:	4622      	mov	r2, r4
 80224bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80224c0:	f7ff bede 	b.w	8022280 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80224c4:	4b03      	ldr	r3, [pc, #12]	; (80224d4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80224c6:	f240 315d 	movw	r1, #861	; 0x35d
 80224ca:	4a03      	ldr	r2, [pc, #12]	; (80224d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80224cc:	4803      	ldr	r0, [pc, #12]	; (80224dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80224ce:	f008 fd1b 	bl	802af08 <__assert_func>
 80224d2:	bd70      	pop	{r4, r5, r6, pc}
 80224d4:	0803016a 	.word	0x0803016a
 80224d8:	080308ca 	.word	0x080308ca
 80224dc:	08030045 	.word	0x08030045

080224e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80224e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224e4:	b093      	sub	sp, #76	; 0x4c
 80224e6:	880e      	ldrh	r6, [r1, #0]
 80224e8:	4681      	mov	r9, r0
 80224ea:	4688      	mov	r8, r1
 80224ec:	4615      	mov	r5, r2
 80224ee:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80224f2:	b136      	cbz	r6, 8022502 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 80224f4:	4b70      	ldr	r3, [pc, #448]	; (80226b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80224f6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80224fa:	4a70      	ldr	r2, [pc, #448]	; (80226bc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80224fc:	4870      	ldr	r0, [pc, #448]	; (80226c0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80224fe:	f008 fd03 	bl	802af08 <__assert_func>
 8022502:	6810      	ldr	r0, [r2, #0]
 8022504:	ac0e      	add	r4, sp, #56	; 0x38
 8022506:	6851      	ldr	r1, [r2, #4]
 8022508:	4f6e      	ldr	r7, [pc, #440]	; (80226c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802250a:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80226c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802250e:	c403      	stmia	r4!, {r0, r1}
 8022510:	6818      	ldr	r0, [r3, #0]
 8022512:	ac10      	add	r4, sp, #64	; 0x40
 8022514:	6859      	ldr	r1, [r3, #4]
 8022516:	c403      	stmia	r4!, {r0, r1}
 8022518:	a80e      	add	r0, sp, #56	; 0x38
 802251a:	f7f9 f9c7 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802251e:	4629      	mov	r1, r5
 8022520:	a810      	add	r0, sp, #64	; 0x40
 8022522:	f7f9 f9eb 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022526:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802252a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802252e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8022532:	6838      	ldr	r0, [r7, #0]
 8022534:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022538:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 802253c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8022540:	4489      	add	r9, r1
 8022542:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8022546:	440a      	add	r2, r1
 8022548:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 802254c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022550:	4413      	add	r3, r2
 8022552:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8022556:	6803      	ldr	r3, [r0, #0]
 8022558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802255a:	4798      	blx	r3
 802255c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022560:	6838      	ldr	r0, [r7, #0]
 8022562:	d01d      	beq.n	80225a0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8022564:	210b      	movs	r1, #11
 8022566:	6802      	ldr	r2, [r0, #0]
 8022568:	b2a4      	uxth	r4, r4
 802256a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802256e:	9107      	str	r1, [sp, #28]
 8022570:	b2ad      	uxth	r5, r5
 8022572:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8022576:	f8bb 1000 	ldrh.w	r1, [fp]
 802257a:	9502      	str	r5, [sp, #8]
 802257c:	9106      	str	r1, [sp, #24]
 802257e:	2101      	movs	r1, #1
 8022580:	9401      	str	r4, [sp, #4]
 8022582:	e9cd a104 	strd	sl, r1, [sp, #16]
 8022586:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802258a:	9103      	str	r1, [sp, #12]
 802258c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8022590:	9100      	str	r1, [sp, #0]
 8022592:	4649      	mov	r1, r9
 8022594:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8022596:	4642      	mov	r2, r8
 8022598:	47a0      	blx	r4
 802259a:	b013      	add	sp, #76	; 0x4c
 802259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225a0:	6803      	ldr	r3, [r0, #0]
 80225a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80225a4:	4798      	blx	r3
 80225a6:	f8bb 3000 	ldrh.w	r3, [fp]
 80225aa:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80225ae:	f04f 0e04 	mov.w	lr, #4
 80225b2:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80225b6:	435d      	muls	r5, r3
 80225b8:	fb03 1202 	mla	r2, r3, r2, r1
 80225bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80225c0:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80225c4:	920c      	str	r2, [sp, #48]	; 0x30
 80225c6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80225ca:	1b12      	subs	r2, r2, r4
 80225cc:	920d      	str	r2, [sp, #52]	; 0x34
 80225ce:	0062      	lsls	r2, r4, #1
 80225d0:	1b1c      	subs	r4, r3, r4
 80225d2:	920a      	str	r2, [sp, #40]	; 0x28
 80225d4:	0063      	lsls	r3, r4, #1
 80225d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80225d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80225da:	4298      	cmp	r0, r3
 80225dc:	d266      	bcs.n	80226ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80225de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80225e0:	eb00 0b03 	add.w	fp, r0, r3
 80225e4:	4558      	cmp	r0, fp
 80225e6:	d25c      	bcs.n	80226a2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80225e8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80225ec:	fb1e e303 	smlabb	r3, lr, r3, lr
 80225f0:	f858 2003 	ldr.w	r2, [r8, r3]
 80225f4:	0e11      	lsrs	r1, r2, #24
 80225f6:	d012      	beq.n	802261e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80225f8:	29ff      	cmp	r1, #255	; 0xff
 80225fa:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80225fe:	d110      	bne.n	8022622 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022600:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022604:	d10d      	bne.n	8022622 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022606:	0953      	lsrs	r3, r2, #5
 8022608:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802260c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022610:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022614:	f027 0707 	bic.w	r7, r7, #7
 8022618:	431f      	orrs	r7, r3
 802261a:	433a      	orrs	r2, r7
 802261c:	8002      	strh	r2, [r0, #0]
 802261e:	3002      	adds	r0, #2
 8022620:	e7e0      	b.n	80225e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 8022622:	fb0a f101 	mul.w	r1, sl, r1
 8022626:	8806      	ldrh	r6, [r0, #0]
 8022628:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802262c:	b2d2      	uxtb	r2, r2
 802262e:	1c4b      	adds	r3, r1, #1
 8022630:	1235      	asrs	r5, r6, #8
 8022632:	10f4      	asrs	r4, r6, #3
 8022634:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022638:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802263c:	00f6      	lsls	r6, r6, #3
 802263e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022642:	121b      	asrs	r3, r3, #8
 8022644:	b2f6      	uxtb	r6, r6
 8022646:	b299      	uxth	r1, r3
 8022648:	43db      	mvns	r3, r3
 802264a:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802264e:	fb1c fc01 	smulbb	ip, ip, r1
 8022652:	b2db      	uxtb	r3, r3
 8022654:	fb12 f201 	smulbb	r2, r2, r1
 8022658:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802265c:	fb05 c503 	mla	r5, r5, r3, ip
 8022660:	b2ff      	uxtb	r7, r7
 8022662:	fb06 2203 	mla	r2, r6, r3, r2
 8022666:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 802266a:	fb17 f701 	smulbb	r7, r7, r1
 802266e:	b2ad      	uxth	r5, r5
 8022670:	b292      	uxth	r2, r2
 8022672:	fb04 7403 	mla	r4, r4, r3, r7
 8022676:	f105 0c01 	add.w	ip, r5, #1
 802267a:	1c57      	adds	r7, r2, #1
 802267c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022680:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022684:	b2a4      	uxth	r4, r4
 8022686:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802268a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802268e:	433d      	orrs	r5, r7
 8022690:	1c67      	adds	r7, r4, #1
 8022692:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8022696:	0964      	lsrs	r4, r4, #5
 8022698:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802269c:	4325      	orrs	r5, r4
 802269e:	8005      	strh	r5, [r0, #0]
 80226a0:	e7bd      	b.n	802261e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80226a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80226a4:	4418      	add	r0, r3
 80226a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80226a8:	4499      	add	r9, r3
 80226aa:	e795      	b.n	80225d8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 80226ac:	4b05      	ldr	r3, [pc, #20]	; (80226c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80226ae:	6818      	ldr	r0, [r3, #0]
 80226b0:	6803      	ldr	r3, [r0, #0]
 80226b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80226b4:	4798      	blx	r3
 80226b6:	e770      	b.n	802259a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80226b8:	0802ff43 	.word	0x0802ff43
 80226bc:	0803069b 	.word	0x0803069b
 80226c0:	08030045 	.word	0x08030045
 80226c4:	2400b8cc 	.word	0x2400b8cc
 80226c8:	2400b8c6 	.word	0x2400b8c6

080226cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80226cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226d0:	4614      	mov	r4, r2
 80226d2:	880a      	ldrh	r2, [r1, #0]
 80226d4:	b087      	sub	sp, #28
 80226d6:	4680      	mov	r8, r0
 80226d8:	2a02      	cmp	r2, #2
 80226da:	460d      	mov	r5, r1
 80226dc:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80226e0:	d006      	beq.n	80226f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80226e2:	4b63      	ldr	r3, [pc, #396]	; (8022870 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80226e4:	f240 11e1 	movw	r1, #481	; 0x1e1
 80226e8:	4a62      	ldr	r2, [pc, #392]	; (8022874 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80226ea:	4863      	ldr	r0, [pc, #396]	; (8022878 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80226ec:	f008 fc0c 	bl	802af08 <__assert_func>
 80226f0:	2e00      	cmp	r6, #0
 80226f2:	f000 80b9 	beq.w	8022868 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 80226f6:	6820      	ldr	r0, [r4, #0]
 80226f8:	af02      	add	r7, sp, #8
 80226fa:	6861      	ldr	r1, [r4, #4]
 80226fc:	c703      	stmia	r7!, {r0, r1}
 80226fe:	6818      	ldr	r0, [r3, #0]
 8022700:	af04      	add	r7, sp, #16
 8022702:	6859      	ldr	r1, [r3, #4]
 8022704:	c703      	stmia	r7!, {r0, r1}
 8022706:	a802      	add	r0, sp, #8
 8022708:	f7f9 f8d0 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802270c:	4621      	mov	r1, r4
 802270e:	a804      	add	r0, sp, #16
 8022710:	f7f9 f8f4 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022714:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022718:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802271c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022720:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022724:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022728:	eb08 0401 	add.w	r4, r8, r1
 802272c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022730:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022734:	440a      	add	r2, r1
 8022736:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802273a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802273e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022742:	4413      	add	r3, r2
 8022744:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022748:	4b4c      	ldr	r3, [pc, #304]	; (802287c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802274a:	6818      	ldr	r0, [r3, #0]
 802274c:	6803      	ldr	r3, [r0, #0]
 802274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022750:	4798      	blx	r3
 8022752:	4b4b      	ldr	r3, [pc, #300]	; (8022880 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8022754:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8022758:	2eff      	cmp	r6, #255	; 0xff
 802275a:	881a      	ldrh	r2, [r3, #0]
 802275c:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8022760:	fb02 c101 	mla	r1, r2, r1, ip
 8022764:	fb02 f207 	mul.w	r2, r2, r7
 8022768:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802276c:	f105 0104 	add.w	r1, r5, #4
 8022770:	461d      	mov	r5, r3
 8022772:	d05a      	beq.n	802282a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8022774:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8022778:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802277c:	b2b6      	uxth	r6, r6
 802277e:	9301      	str	r3, [sp, #4]
 8022780:	fa1f fe8e 	uxth.w	lr, lr
 8022784:	4282      	cmp	r2, r0
 8022786:	d96a      	bls.n	802285e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8022788:	eb00 0b0a 	add.w	fp, r0, sl
 802278c:	4583      	cmp	fp, r0
 802278e:	d940      	bls.n	8022812 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 8022790:	8805      	ldrh	r5, [r0, #0]
 8022792:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022796:	122f      	asrs	r7, r5, #8
 8022798:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802279c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80227a0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80227a4:	00ed      	lsls	r5, r5, #3
 80227a6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80227aa:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80227ae:	fb17 f70e 	smulbb	r7, r7, lr
 80227b2:	b2ed      	uxtb	r5, r5
 80227b4:	fb19 f90e 	smulbb	r9, r9, lr
 80227b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80227bc:	fb15 f50e 	smulbb	r5, r5, lr
 80227c0:	fb0c 7c06 	mla	ip, ip, r6, r7
 80227c4:	10df      	asrs	r7, r3, #3
 80227c6:	00db      	lsls	r3, r3, #3
 80227c8:	fa1f fc8c 	uxth.w	ip, ip
 80227cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80227d0:	b2db      	uxtb	r3, r3
 80227d2:	fb07 9706 	mla	r7, r7, r6, r9
 80227d6:	f10c 0901 	add.w	r9, ip, #1
 80227da:	fb03 5306 	mla	r3, r3, r6, r5
 80227de:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80227e2:	b29b      	uxth	r3, r3
 80227e4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80227e8:	b2bf      	uxth	r7, r7
 80227ea:	f103 0c01 	add.w	ip, r3, #1
 80227ee:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80227f2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80227f6:	ea4c 0c09 	orr.w	ip, ip, r9
 80227fa:	f107 0901 	add.w	r9, r7, #1
 80227fe:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8022802:	097f      	lsrs	r7, r7, #5
 8022804:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8022808:	ea4c 0c07 	orr.w	ip, ip, r7
 802280c:	f820 cb02 	strh.w	ip, [r0], #2
 8022810:	e7bc      	b.n	802278c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8022812:	9b01      	ldr	r3, [sp, #4]
 8022814:	881b      	ldrh	r3, [r3, #0]
 8022816:	eba3 0308 	sub.w	r3, r3, r8
 802281a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802281e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022822:	eba3 0308 	sub.w	r3, r3, r8
 8022826:	441c      	add	r4, r3
 8022828:	e7ac      	b.n	8022784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 802282a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802282e:	4282      	cmp	r2, r0
 8022830:	d915      	bls.n	802285e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8022832:	eb00 060a 	add.w	r6, r0, sl
 8022836:	4286      	cmp	r6, r0
 8022838:	d906      	bls.n	8022848 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 802283a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802283e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8022842:	f820 3b02 	strh.w	r3, [r0], #2
 8022846:	e7f6      	b.n	8022836 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8022848:	882b      	ldrh	r3, [r5, #0]
 802284a:	eba3 0308 	sub.w	r3, r3, r8
 802284e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022852:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022856:	eba3 0308 	sub.w	r3, r3, r8
 802285a:	441c      	add	r4, r3
 802285c:	e7e7      	b.n	802282e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802285e:	4b07      	ldr	r3, [pc, #28]	; (802287c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8022860:	6818      	ldr	r0, [r3, #0]
 8022862:	6803      	ldr	r3, [r0, #0]
 8022864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022866:	4798      	blx	r3
 8022868:	b007      	add	sp, #28
 802286a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802286e:	bf00      	nop
 8022870:	0802fe73 	.word	0x0802fe73
 8022874:	08030505 	.word	0x08030505
 8022878:	08030045 	.word	0x08030045
 802287c:	2400b8cc 	.word	0x2400b8cc
 8022880:	2400b8c6 	.word	0x2400b8c6

08022884 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8022884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022888:	f8b1 9000 	ldrh.w	r9, [r1]
 802288c:	b091      	sub	sp, #68	; 0x44
 802288e:	4604      	mov	r4, r0
 8022890:	460f      	mov	r7, r1
 8022892:	f1b9 0f01 	cmp.w	r9, #1
 8022896:	4690      	mov	r8, r2
 8022898:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 802289c:	d006      	beq.n	80228ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 802289e:	4b84      	ldr	r3, [pc, #528]	; (8022ab0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 80228a0:	f240 212f 	movw	r1, #559	; 0x22f
 80228a4:	4a83      	ldr	r2, [pc, #524]	; (8022ab4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 80228a6:	4884      	ldr	r0, [pc, #528]	; (8022ab8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 80228a8:	f008 fb2e 	bl	802af08 <__assert_func>
 80228ac:	2d00      	cmp	r5, #0
 80228ae:	d04f      	beq.n	8022950 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80228b0:	6810      	ldr	r0, [r2, #0]
 80228b2:	ae0c      	add	r6, sp, #48	; 0x30
 80228b4:	6851      	ldr	r1, [r2, #4]
 80228b6:	f8df b208 	ldr.w	fp, [pc, #520]	; 8022ac0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80228ba:	c603      	stmia	r6!, {r0, r1}
 80228bc:	6818      	ldr	r0, [r3, #0]
 80228be:	ae0e      	add	r6, sp, #56	; 0x38
 80228c0:	6859      	ldr	r1, [r3, #4]
 80228c2:	c603      	stmia	r6!, {r0, r1}
 80228c4:	a80c      	add	r0, sp, #48	; 0x30
 80228c6:	f7f8 fff1 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80228ca:	4641      	mov	r1, r8
 80228cc:	a80e      	add	r0, sp, #56	; 0x38
 80228ce:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8022ac4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80228d2:	f7f9 f813 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80228d6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80228da:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80228de:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80228e2:	f8db 0000 	ldr.w	r0, [fp]
 80228e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80228ea:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80228ee:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80228f2:	440c      	add	r4, r1
 80228f4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80228f8:	440a      	add	r2, r1
 80228fa:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80228fe:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8022902:	4413      	add	r3, r2
 8022904:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8022908:	6803      	ldr	r3, [r0, #0]
 802290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802290c:	4798      	blx	r3
 802290e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8022912:	f8db 0000 	ldr.w	r0, [fp]
 8022916:	d01e      	beq.n	8022956 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8022918:	2200      	movs	r2, #0
 802291a:	6801      	ldr	r1, [r0, #0]
 802291c:	b2b6      	uxth	r6, r6
 802291e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8022922:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022926:	220b      	movs	r2, #11
 8022928:	9207      	str	r2, [sp, #28]
 802292a:	f8b8 2000 	ldrh.w	r2, [r8]
 802292e:	9504      	str	r5, [sp, #16]
 8022930:	9601      	str	r6, [sp, #4]
 8022932:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8022936:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802293a:	9203      	str	r2, [sp, #12]
 802293c:	fa1f f28a 	uxth.w	r2, sl
 8022940:	9202      	str	r2, [sp, #8]
 8022942:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8022946:	9200      	str	r2, [sp, #0]
 8022948:	463a      	mov	r2, r7
 802294a:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 802294c:	4621      	mov	r1, r4
 802294e:	47a8      	blx	r5
 8022950:	b011      	add	sp, #68	; 0x44
 8022952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022956:	6803      	ldr	r3, [r0, #0]
 8022958:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802295e:	4798      	blx	r3
 8022960:	f8b8 2000 	ldrh.w	r2, [r8]
 8022964:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8022968:	2dff      	cmp	r5, #255	; 0xff
 802296a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802296e:	fb0a fa02 	mul.w	sl, sl, r2
 8022972:	fb02 1303 	mla	r3, r2, r3, r1
 8022976:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802297a:	d062      	beq.n	8022a42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 802297c:	ea6f 0c05 	mvn.w	ip, r5
 8022980:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8022984:	b2ad      	uxth	r5, r5
 8022986:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802298a:	fa5f fc8c 	uxtb.w	ip, ip
 802298e:	930a      	str	r3, [sp, #40]	; 0x28
 8022990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022992:	4298      	cmp	r0, r3
 8022994:	f080 8085 	bcs.w	8022aa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8022998:	eb00 0b09 	add.w	fp, r0, r9
 802299c:	4558      	cmp	r0, fp
 802299e:	d246      	bcs.n	8022a2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80229a0:	f814 eb01 	ldrb.w	lr, [r4], #1
 80229a4:	2303      	movs	r3, #3
 80229a6:	2204      	movs	r2, #4
 80229a8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80229ac:	8803      	ldrh	r3, [r0, #0]
 80229ae:	eb07 0a0e 	add.w	sl, r7, lr
 80229b2:	1219      	asrs	r1, r3, #8
 80229b4:	10da      	asrs	r2, r3, #3
 80229b6:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80229ba:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80229be:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80229c2:	00db      	lsls	r3, r3, #3
 80229c4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80229c8:	fb18 f805 	smulbb	r8, r8, r5
 80229cc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80229d0:	fb1e fe05 	smulbb	lr, lr, r5
 80229d4:	b2db      	uxtb	r3, r3
 80229d6:	fb01 810c 	mla	r1, r1, ip, r8
 80229da:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80229de:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80229e2:	fb18 f805 	smulbb	r8, r8, r5
 80229e6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80229ea:	b289      	uxth	r1, r1
 80229ec:	fb02 820c 	mla	r2, r2, ip, r8
 80229f0:	fb03 e30c 	mla	r3, r3, ip, lr
 80229f4:	f101 0801 	add.w	r8, r1, #1
 80229f8:	b292      	uxth	r2, r2
 80229fa:	b29b      	uxth	r3, r3
 80229fc:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022a00:	f102 0801 	add.w	r8, r2, #1
 8022a04:	f103 0e01 	add.w	lr, r3, #1
 8022a08:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022a0c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8022a10:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022a14:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022a18:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022a1c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8022a20:	ea4e 0101 	orr.w	r1, lr, r1
 8022a24:	ea41 0108 	orr.w	r1, r1, r8
 8022a28:	f820 1b02 	strh.w	r1, [r0], #2
 8022a2c:	e7b6      	b.n	802299c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8022a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022a30:	881b      	ldrh	r3, [r3, #0]
 8022a32:	1b9b      	subs	r3, r3, r6
 8022a34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a38:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022a3c:	1b9b      	subs	r3, r3, r6
 8022a3e:	441c      	add	r4, r3
 8022a40:	e7a6      	b.n	8022990 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8022a42:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022a46:	2203      	movs	r2, #3
 8022a48:	2504      	movs	r5, #4
 8022a4a:	491c      	ldr	r1, [pc, #112]	; (8022abc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8022a4c:	4550      	cmp	r0, sl
 8022a4e:	d228      	bcs.n	8022aa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8022a50:	eb00 0c09 	add.w	ip, r0, r9
 8022a54:	4560      	cmp	r0, ip
 8022a56:	4623      	mov	r3, r4
 8022a58:	d219      	bcs.n	8022a8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022a5a:	f893 e000 	ldrb.w	lr, [r3]
 8022a5e:	3401      	adds	r4, #1
 8022a60:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022a64:	eb07 0b0e 	add.w	fp, r7, lr
 8022a68:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022a6c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022a70:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022a74:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022a78:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022a7c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8022a80:	ea43 030b 	orr.w	r3, r3, fp
 8022a84:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022a88:	f820 3b02 	strh.w	r3, [r0], #2
 8022a8c:	e7e2      	b.n	8022a54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8022a8e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022a92:	1b9b      	subs	r3, r3, r6
 8022a94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a98:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8022a9c:	1b9b      	subs	r3, r3, r6
 8022a9e:	441c      	add	r4, r3
 8022aa0:	e7d4      	b.n	8022a4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8022aa2:	4b07      	ldr	r3, [pc, #28]	; (8022ac0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8022aa4:	6818      	ldr	r0, [r3, #0]
 8022aa6:	6803      	ldr	r3, [r0, #0]
 8022aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022aaa:	4798      	blx	r3
 8022aac:	e750      	b.n	8022950 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8022aae:	bf00      	nop
 8022ab0:	0802fec1 	.word	0x0802fec1
 8022ab4:	0803058e 	.word	0x0803058e
 8022ab8:	08030045 	.word	0x08030045
 8022abc:	fffff800 	.word	0xfffff800
 8022ac0:	2400b8cc 	.word	0x2400b8cc
 8022ac4:	2400b8c6 	.word	0x2400b8c6

08022ac8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022ac8:	b430      	push	{r4, r5}
 8022aca:	780d      	ldrb	r5, [r1, #0]
 8022acc:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022ad0:	2d01      	cmp	r5, #1
 8022ad2:	d00a      	beq.n	8022aea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022ad4:	d305      	bcc.n	8022ae2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022ad6:	2d02      	cmp	r5, #2
 8022ad8:	d10b      	bne.n	8022af2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022ada:	9402      	str	r4, [sp, #8]
 8022adc:	bc30      	pop	{r4, r5}
 8022ade:	f7ff bdf5 	b.w	80226cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022ae2:	9402      	str	r4, [sp, #8]
 8022ae4:	bc30      	pop	{r4, r5}
 8022ae6:	f7ff bcfb 	b.w	80224e0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022aea:	9402      	str	r4, [sp, #8]
 8022aec:	bc30      	pop	{r4, r5}
 8022aee:	f7ff bec9 	b.w	8022884 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022af2:	bc30      	pop	{r4, r5}
 8022af4:	4770      	bx	lr
	...

08022af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022afc:	b087      	sub	sp, #28
 8022afe:	4604      	mov	r4, r0
 8022b00:	460e      	mov	r6, r1
 8022b02:	6810      	ldr	r0, [r2, #0]
 8022b04:	6851      	ldr	r1, [r2, #4]
 8022b06:	ad02      	add	r5, sp, #8
 8022b08:	4617      	mov	r7, r2
 8022b0a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8022b0e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8022d40 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022b12:	c503      	stmia	r5!, {r0, r1}
 8022b14:	6818      	ldr	r0, [r3, #0]
 8022b16:	ad04      	add	r5, sp, #16
 8022b18:	6859      	ldr	r1, [r3, #4]
 8022b1a:	c503      	stmia	r5!, {r0, r1}
 8022b1c:	a802      	add	r0, sp, #8
 8022b1e:	f7f8 fec5 	bl	801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b22:	4639      	mov	r1, r7
 8022b24:	a804      	add	r0, sp, #16
 8022b26:	f7f8 fee9 	bl	801b8fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b2a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022b2e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b32:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022b36:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022b3a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b3e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022b42:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022b46:	440e      	add	r6, r1
 8022b48:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022b4c:	440a      	add	r2, r1
 8022b4e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022b52:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022b56:	4413      	add	r3, r2
 8022b58:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022b5c:	4b77      	ldr	r3, [pc, #476]	; (8022d3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022b5e:	6818      	ldr	r0, [r3, #0]
 8022b60:	6803      	ldr	r3, [r0, #0]
 8022b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022b64:	4798      	blx	r3
 8022b66:	f8b9 b000 	ldrh.w	fp, [r9]
 8022b6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b6e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8022b72:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022b76:	fb05 f50b 	mul.w	r5, r5, fp
 8022b7a:	fb0b 2303 	mla	r3, fp, r3, r2
 8022b7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022b82:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022b86:	9300      	str	r3, [sp, #0]
 8022b88:	d069      	beq.n	8022c5e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022b8a:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022b8e:	4558      	cmp	r0, fp
 8022b90:	f080 80cc 	bcs.w	8022d2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022b94:	9b00      	ldr	r3, [sp, #0]
 8022b96:	4631      	mov	r1, r6
 8022b98:	18c3      	adds	r3, r0, r3
 8022b9a:	9301      	str	r3, [sp, #4]
 8022b9c:	9b01      	ldr	r3, [sp, #4]
 8022b9e:	4298      	cmp	r0, r3
 8022ba0:	d24f      	bcs.n	8022c42 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022ba6:	2a00      	cmp	r2, #0
 8022ba8:	d048      	beq.n	8022c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022baa:	fb0a f202 	mul.w	r2, sl, r2
 8022bae:	1c53      	adds	r3, r2, #1
 8022bb0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022bb4:	121b      	asrs	r3, r3, #8
 8022bb6:	d041      	beq.n	8022c3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022bb8:	8802      	ldrh	r2, [r0, #0]
 8022bba:	b29e      	uxth	r6, r3
 8022bbc:	f8b4 c000 	ldrh.w	ip, [r4]
 8022bc0:	43db      	mvns	r3, r3
 8022bc2:	1215      	asrs	r5, r2, #8
 8022bc4:	b2db      	uxtb	r3, r3
 8022bc6:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022bca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022bce:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022bd2:	fb15 f503 	smulbb	r5, r5, r3
 8022bd6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022bda:	00d2      	lsls	r2, r2, #3
 8022bdc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022be0:	fb07 5706 	mla	r7, r7, r6, r5
 8022be4:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022be8:	b2d2      	uxtb	r2, r2
 8022bea:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022bee:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8022bf2:	fb1e fe03 	smulbb	lr, lr, r3
 8022bf6:	b2bf      	uxth	r7, r7
 8022bf8:	fb12 f203 	smulbb	r2, r2, r3
 8022bfc:	fa5f fc8c 	uxtb.w	ip, ip
 8022c00:	fb05 e506 	mla	r5, r5, r6, lr
 8022c04:	f107 0e01 	add.w	lr, r7, #1
 8022c08:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022c0c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022c10:	fa1f fc8c 	uxth.w	ip, ip
 8022c14:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8022c18:	b2ad      	uxth	r5, r5
 8022c1a:	f10c 0701 	add.w	r7, ip, #1
 8022c1e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022c22:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022c26:	ea47 070e 	orr.w	r7, r7, lr
 8022c2a:	f105 0e01 	add.w	lr, r5, #1
 8022c2e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022c32:	096d      	lsrs	r5, r5, #5
 8022c34:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022c38:	432f      	orrs	r7, r5
 8022c3a:	8007      	strh	r7, [r0, #0]
 8022c3c:	3002      	adds	r0, #2
 8022c3e:	3402      	adds	r4, #2
 8022c40:	e7ac      	b.n	8022b9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022c42:	f8b9 3000 	ldrh.w	r3, [r9]
 8022c46:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022c4a:	eba3 0308 	sub.w	r3, r3, r8
 8022c4e:	eba6 0608 	sub.w	r6, r6, r8
 8022c52:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022c56:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022c5a:	440e      	add	r6, r1
 8022c5c:	e797      	b.n	8022b8e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022c5e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022c62:	42a8      	cmp	r0, r5
 8022c64:	d262      	bcs.n	8022d2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022c66:	9b00      	ldr	r3, [sp, #0]
 8022c68:	4631      	mov	r1, r6
 8022c6a:	eb00 0b03 	add.w	fp, r0, r3
 8022c6e:	4558      	cmp	r0, fp
 8022c70:	d24e      	bcs.n	8022d10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022c76:	b12b      	cbz	r3, 8022c84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022c78:	2bff      	cmp	r3, #255	; 0xff
 8022c7a:	f8b4 e000 	ldrh.w	lr, [r4]
 8022c7e:	d104      	bne.n	8022c8a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022c80:	f8a0 e000 	strh.w	lr, [r0]
 8022c84:	3002      	adds	r0, #2
 8022c86:	3402      	adds	r4, #2
 8022c88:	e7f1      	b.n	8022c6e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022c8a:	8802      	ldrh	r2, [r0, #0]
 8022c8c:	b29f      	uxth	r7, r3
 8022c8e:	43db      	mvns	r3, r3
 8022c90:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022c94:	1216      	asrs	r6, r2, #8
 8022c96:	b2db      	uxtb	r3, r3
 8022c98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c9c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022ca0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022ca4:	00d2      	lsls	r2, r2, #3
 8022ca6:	fb16 f603 	smulbb	r6, r6, r3
 8022caa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022cae:	b2d2      	uxtb	r2, r2
 8022cb0:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022cb4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022cb8:	fb1a fa03 	smulbb	sl, sl, r3
 8022cbc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022cc0:	fa1f fc8c 	uxth.w	ip, ip
 8022cc4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022cc8:	fb12 f303 	smulbb	r3, r2, r3
 8022ccc:	fa5f fe8e 	uxtb.w	lr, lr
 8022cd0:	fb06 a607 	mla	r6, r6, r7, sl
 8022cd4:	f10c 0201 	add.w	r2, ip, #1
 8022cd8:	fb0e 3307 	mla	r3, lr, r7, r3
 8022cdc:	b2b6      	uxth	r6, r6
 8022cde:	b29b      	uxth	r3, r3
 8022ce0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022ce4:	f106 0a01 	add.w	sl, r6, #1
 8022ce8:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8022cec:	f103 0c01 	add.w	ip, r3, #1
 8022cf0:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022cf4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022cf8:	0976      	lsrs	r6, r6, #5
 8022cfa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022cfe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8022d02:	ea4c 0c02 	orr.w	ip, ip, r2
 8022d06:	ea4c 0c06 	orr.w	ip, ip, r6
 8022d0a:	f8a0 c000 	strh.w	ip, [r0]
 8022d0e:	e7b9      	b.n	8022c84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022d10:	f8b9 3000 	ldrh.w	r3, [r9]
 8022d14:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022d18:	eba3 0308 	sub.w	r3, r3, r8
 8022d1c:	eba6 0608 	sub.w	r6, r6, r8
 8022d20:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022d24:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022d28:	440e      	add	r6, r1
 8022d2a:	e79a      	b.n	8022c62 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022d2c:	4b03      	ldr	r3, [pc, #12]	; (8022d3c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022d2e:	6818      	ldr	r0, [r3, #0]
 8022d30:	6803      	ldr	r3, [r0, #0]
 8022d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d34:	4798      	blx	r3
 8022d36:	b007      	add	sp, #28
 8022d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d3c:	2400b8cc 	.word	0x2400b8cc
 8022d40:	2400b8c6 	.word	0x2400b8c6

08022d44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d48:	b089      	sub	sp, #36	; 0x24
 8022d4a:	4682      	mov	sl, r0
 8022d4c:	460f      	mov	r7, r1
 8022d4e:	4691      	mov	r9, r2
 8022d50:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8022d54:	4698      	mov	r8, r3
 8022d56:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022d58:	2e00      	cmp	r6, #0
 8022d5a:	d03d      	beq.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022d5c:	4608      	mov	r0, r1
 8022d5e:	f7fc f861 	bl	801ee24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022d62:	4605      	mov	r5, r0
 8022d64:	4638      	mov	r0, r7
 8022d66:	f7fc f897 	bl	801ee98 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022d6a:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022d6e:	4638      	mov	r0, r7
 8022d70:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022d74:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022d78:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022d7c:	f7fc f95a 	bl	801f034 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022d80:	4605      	mov	r5, r0
 8022d82:	4638      	mov	r0, r7
 8022d84:	f7fc f988 	bl	801f098 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022d88:	4681      	mov	r9, r0
 8022d8a:	4638      	mov	r0, r7
 8022d8c:	f7fc f9dc 	bl	801f148 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022d90:	280b      	cmp	r0, #11
 8022d92:	f200 816f 	bhi.w	8023074 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8022d96:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022d9a:	00c3      	.short	0x00c3
 8022d9c:	000c00b4 	.word	0x000c00b4
 8022da0:	016d016d 	.word	0x016d016d
 8022da4:	016d016d 	.word	0x016d016d
 8022da8:	016d016d 	.word	0x016d016d
 8022dac:	016d016d 	.word	0x016d016d
 8022db0:	00bb      	.short	0x00bb
 8022db2:	4bb3      	ldr	r3, [pc, #716]	; (8023080 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8022db4:	6818      	ldr	r0, [r3, #0]
 8022db6:	6803      	ldr	r3, [r0, #0]
 8022db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022dba:	4798      	blx	r3
 8022dbc:	2eff      	cmp	r6, #255	; 0xff
 8022dbe:	d121      	bne.n	8022e04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022dc0:	0683      	lsls	r3, r0, #26
 8022dc2:	d41f      	bmi.n	8022e04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022dc4:	4638      	mov	r0, r7
 8022dc6:	f7fc f8fb 	bl	801efc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022dca:	b940      	cbnz	r0, 8022dde <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8022dcc:	4623      	mov	r3, r4
 8022dce:	aa02      	add	r2, sp, #8
 8022dd0:	4629      	mov	r1, r5
 8022dd2:	4650      	mov	r0, sl
 8022dd4:	f7ff f9e4 	bl	80221a0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022dd8:	b009      	add	sp, #36	; 0x24
 8022dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dde:	f10d 0818 	add.w	r8, sp, #24
 8022de2:	4639      	mov	r1, r7
 8022de4:	af04      	add	r7, sp, #16
 8022de6:	4640      	mov	r0, r8
 8022de8:	f7fc f890 	bl	801ef0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022dec:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022df0:	e887 0003 	stmia.w	r7, {r0, r1}
 8022df4:	4638      	mov	r0, r7
 8022df6:	4621      	mov	r1, r4
 8022df8:	f7f5 f9a6 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 8022dfc:	4638      	mov	r0, r7
 8022dfe:	f7f5 f9e6 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8022e02:	b130      	cbz	r0, 8022e12 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8022e04:	4633      	mov	r3, r6
 8022e06:	4622      	mov	r2, r4
 8022e08:	a902      	add	r1, sp, #8
 8022e0a:	4628      	mov	r0, r5
 8022e0c:	f7ff f8e2 	bl	8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e10:	e7e2      	b.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022e12:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022e16:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022e1a:	4293      	cmp	r3, r2
 8022e1c:	dd12      	ble.n	8022e44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8022e1e:	1a9b      	subs	r3, r3, r2
 8022e20:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022e24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022e28:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022e2c:	4628      	mov	r0, r5
 8022e2e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022e32:	4642      	mov	r2, r8
 8022e34:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022e38:	a902      	add	r1, sp, #8
 8022e3a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022e3e:	4633      	mov	r3, r6
 8022e40:	f7ff f8c8 	bl	8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e44:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022e48:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022e4c:	4293      	cmp	r3, r2
 8022e4e:	dd12      	ble.n	8022e76 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8022e50:	1a9b      	subs	r3, r3, r2
 8022e52:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022e56:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022e5a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022e5e:	4642      	mov	r2, r8
 8022e60:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022e64:	4628      	mov	r0, r5
 8022e66:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022e6a:	23ff      	movs	r3, #255	; 0xff
 8022e6c:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022e70:	a902      	add	r1, sp, #8
 8022e72:	f7ff f8af 	bl	8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e76:	463b      	mov	r3, r7
 8022e78:	aa02      	add	r2, sp, #8
 8022e7a:	4629      	mov	r1, r5
 8022e7c:	4650      	mov	r0, sl
 8022e7e:	f7ff f98f 	bl	80221a0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022e82:	88a2      	ldrh	r2, [r4, #4]
 8022e84:	8823      	ldrh	r3, [r4, #0]
 8022e86:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022e8a:	4413      	add	r3, r2
 8022e8c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022e90:	440a      	add	r2, r1
 8022e92:	b29b      	uxth	r3, r3
 8022e94:	b292      	uxth	r2, r2
 8022e96:	b218      	sxth	r0, r3
 8022e98:	b211      	sxth	r1, r2
 8022e9a:	4288      	cmp	r0, r1
 8022e9c:	dd12      	ble.n	8022ec4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8022e9e:	1a9b      	subs	r3, r3, r2
 8022ea0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022ea4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022ea8:	4642      	mov	r2, r8
 8022eaa:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022eae:	a902      	add	r1, sp, #8
 8022eb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022eb4:	23ff      	movs	r3, #255	; 0xff
 8022eb6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022eba:	4628      	mov	r0, r5
 8022ebc:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022ec0:	f7ff f888 	bl	8021fd4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022ec4:	88e2      	ldrh	r2, [r4, #6]
 8022ec6:	8863      	ldrh	r3, [r4, #2]
 8022ec8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022ecc:	4413      	add	r3, r2
 8022ece:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022ed2:	440a      	add	r2, r1
 8022ed4:	b29b      	uxth	r3, r3
 8022ed6:	b292      	uxth	r2, r2
 8022ed8:	b218      	sxth	r0, r3
 8022eda:	b211      	sxth	r1, r2
 8022edc:	4288      	cmp	r0, r1
 8022ede:	f77f af7b 	ble.w	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022ee2:	1a9b      	subs	r3, r3, r2
 8022ee4:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022ee8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022eec:	4642      	mov	r2, r8
 8022eee:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022ef2:	23ff      	movs	r3, #255	; 0xff
 8022ef4:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022ef8:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022efc:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022f00:	e782      	b.n	8022e08 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022f02:	4633      	mov	r3, r6
 8022f04:	4622      	mov	r2, r4
 8022f06:	a902      	add	r1, sp, #8
 8022f08:	4628      	mov	r0, r5
 8022f0a:	f7ff f9b9 	bl	8022280 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022f0e:	e763      	b.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f10:	9600      	str	r6, [sp, #0]
 8022f12:	4623      	mov	r3, r4
 8022f14:	aa02      	add	r2, sp, #8
 8022f16:	4649      	mov	r1, r9
 8022f18:	4628      	mov	r0, r5
 8022f1a:	f7ff fdd5 	bl	8022ac8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022f1e:	e75b      	b.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f20:	4638      	mov	r0, r7
 8022f22:	f7fc f84d 	bl	801efc0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022f26:	b950      	cbnz	r0, 8022f3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8022f28:	f8da 3000 	ldr.w	r3, [sl]
 8022f2c:	aa02      	add	r2, sp, #8
 8022f2e:	4629      	mov	r1, r5
 8022f30:	e9cd 6000 	strd	r6, r0, [sp]
 8022f34:	4650      	mov	r0, sl
 8022f36:	68de      	ldr	r6, [r3, #12]
 8022f38:	4623      	mov	r3, r4
 8022f3a:	47b0      	blx	r6
 8022f3c:	e74c      	b.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f3e:	f10d 0818 	add.w	r8, sp, #24
 8022f42:	4639      	mov	r1, r7
 8022f44:	af04      	add	r7, sp, #16
 8022f46:	4640      	mov	r0, r8
 8022f48:	f7fb ffe0 	bl	801ef0c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022f4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022f50:	e887 0003 	stmia.w	r7, {r0, r1}
 8022f54:	4638      	mov	r0, r7
 8022f56:	4621      	mov	r1, r4
 8022f58:	f7f5 f8f6 	bl	8018148 <_ZN8touchgfx4RectaNERKS0_>
 8022f5c:	4638      	mov	r0, r7
 8022f5e:	f7f5 f936 	bl	80181ce <_ZNK8touchgfx4Rect7isEmptyEv>
 8022f62:	b138      	cbz	r0, 8022f74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022f64:	4623      	mov	r3, r4
 8022f66:	9600      	str	r6, [sp, #0]
 8022f68:	aa02      	add	r2, sp, #8
 8022f6a:	4649      	mov	r1, r9
 8022f6c:	4628      	mov	r0, r5
 8022f6e:	f7ff fdc3 	bl	8022af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022f72:	e731      	b.n	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f74:	f8da 3000 	ldr.w	r3, [sl]
 8022f78:	aa02      	add	r2, sp, #8
 8022f7a:	4629      	mov	r1, r5
 8022f7c:	e9cd 6000 	strd	r6, r0, [sp]
 8022f80:	4650      	mov	r0, sl
 8022f82:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022f86:	463b      	mov	r3, r7
 8022f88:	47d8      	blx	fp
 8022f8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022f8e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022f92:	4293      	cmp	r3, r2
 8022f94:	dd13      	ble.n	8022fbe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8022f96:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022f9a:	1a9b      	subs	r3, r3, r2
 8022f9c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022fa0:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022fa4:	4628      	mov	r0, r5
 8022fa6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022faa:	aa02      	add	r2, sp, #8
 8022fac:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022fb0:	4649      	mov	r1, r9
 8022fb2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022fb6:	4643      	mov	r3, r8
 8022fb8:	9600      	str	r6, [sp, #0]
 8022fba:	f7ff fd9d 	bl	8022af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022fbe:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022fc2:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022fc6:	4293      	cmp	r3, r2
 8022fc8:	dd13      	ble.n	8022ff2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8022fca:	1a9b      	subs	r3, r3, r2
 8022fcc:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022fd0:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022fd4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022fd8:	aa02      	add	r2, sp, #8
 8022fda:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022fde:	4628      	mov	r0, r5
 8022fe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022fe4:	4643      	mov	r3, r8
 8022fe6:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022fea:	4649      	mov	r1, r9
 8022fec:	9600      	str	r6, [sp, #0]
 8022fee:	f7ff fd83 	bl	8022af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022ff2:	88a2      	ldrh	r2, [r4, #4]
 8022ff4:	8823      	ldrh	r3, [r4, #0]
 8022ff6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022ffa:	4413      	add	r3, r2
 8022ffc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023000:	440a      	add	r2, r1
 8023002:	b29b      	uxth	r3, r3
 8023004:	b292      	uxth	r2, r2
 8023006:	b218      	sxth	r0, r3
 8023008:	b211      	sxth	r1, r2
 802300a:	4288      	cmp	r0, r1
 802300c:	dd13      	ble.n	8023036 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 802300e:	1a9b      	subs	r3, r3, r2
 8023010:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023014:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023018:	aa02      	add	r2, sp, #8
 802301a:	f8ad 1018 	strh.w	r1, [sp, #24]
 802301e:	4649      	mov	r1, r9
 8023020:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023024:	4643      	mov	r3, r8
 8023026:	f8ad 001e 	strh.w	r0, [sp, #30]
 802302a:	4628      	mov	r0, r5
 802302c:	9600      	str	r6, [sp, #0]
 802302e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023032:	f7ff fd61 	bl	8022af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023036:	88e2      	ldrh	r2, [r4, #6]
 8023038:	8863      	ldrh	r3, [r4, #2]
 802303a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802303e:	4413      	add	r3, r2
 8023040:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023044:	440a      	add	r2, r1
 8023046:	b29b      	uxth	r3, r3
 8023048:	b292      	uxth	r2, r2
 802304a:	b218      	sxth	r0, r3
 802304c:	b211      	sxth	r1, r2
 802304e:	4288      	cmp	r0, r1
 8023050:	f77f aec2 	ble.w	8022dd8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8023054:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023058:	1a9b      	subs	r3, r3, r2
 802305a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802305e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023062:	4643      	mov	r3, r8
 8023064:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023068:	f8ad 101a 	strh.w	r1, [sp, #26]
 802306c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023070:	9600      	str	r6, [sp, #0]
 8023072:	e779      	b.n	8022f68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8023074:	4b03      	ldr	r3, [pc, #12]	; (8023084 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8023076:	21b4      	movs	r1, #180	; 0xb4
 8023078:	4a03      	ldr	r2, [pc, #12]	; (8023088 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 802307a:	4804      	ldr	r0, [pc, #16]	; (802308c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 802307c:	f007 ff44 	bl	802af08 <__assert_func>
 8023080:	2400b8cc 	.word	0x2400b8cc
 8023084:	0802ff0f 	.word	0x0802ff0f
 8023088:	08030617 	.word	0x08030617
 802308c:	08030045 	.word	0x08030045

08023090 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023090:	b508      	push	{r3, lr}
 8023092:	b180      	cbz	r0, 80230b6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8023094:	2902      	cmp	r1, #2
 8023096:	d014      	beq.n	80230c2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8023098:	2903      	cmp	r1, #3
 802309a:	d01d      	beq.n	80230d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802309c:	2901      	cmp	r1, #1
 802309e:	d101      	bne.n	80230a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80230a0:	2001      	movs	r0, #1
 80230a2:	bd08      	pop	{r3, pc}
 80230a4:	4b0e      	ldr	r3, [pc, #56]	; (80230e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80230a6:	8818      	ldrh	r0, [r3, #0]
 80230a8:	b990      	cbnz	r0, 80230d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80230aa:	4b0e      	ldr	r3, [pc, #56]	; (80230e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 80230ac:	2150      	movs	r1, #80	; 0x50
 80230ae:	4a0e      	ldr	r2, [pc, #56]	; (80230e8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 80230b0:	480e      	ldr	r0, [pc, #56]	; (80230ec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 80230b2:	f007 ff29 	bl	802af08 <__assert_func>
 80230b6:	2902      	cmp	r1, #2
 80230b8:	d00e      	beq.n	80230d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80230ba:	2903      	cmp	r1, #3
 80230bc:	d0f2      	beq.n	80230a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 80230be:	2901      	cmp	r1, #1
 80230c0:	d1ee      	bne.n	80230a0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 80230c2:	4b07      	ldr	r3, [pc, #28]	; (80230e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80230c4:	8818      	ldrh	r0, [r3, #0]
 80230c6:	2800      	cmp	r0, #0
 80230c8:	d0ef      	beq.n	80230aa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80230ca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80230ce:	e7e8      	b.n	80230a2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80230d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80230d4:	4240      	negs	r0, r0
 80230d6:	e7e4      	b.n	80230a2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80230d8:	f04f 30ff 	mov.w	r0, #4294967295
 80230dc:	e7e1      	b.n	80230a2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 80230de:	bf00      	nop
 80230e0:	2400b8c6 	.word	0x2400b8c6
 80230e4:	0803019b 	.word	0x0803019b
 80230e8:	08030794 	.word	0x08030794
 80230ec:	080301dd 	.word	0x080301dd

080230f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 80230f0:	b508      	push	{r3, lr}
 80230f2:	b180      	cbz	r0, 8023116 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 80230f4:	2902      	cmp	r1, #2
 80230f6:	d014      	beq.n	8023122 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 80230f8:	2903      	cmp	r1, #3
 80230fa:	d018      	beq.n	802312e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80230fc:	2901      	cmp	r1, #1
 80230fe:	d001      	beq.n	8023104 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023100:	2001      	movs	r0, #1
 8023102:	e013      	b.n	802312c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023104:	4b0e      	ldr	r3, [pc, #56]	; (8023140 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023106:	8818      	ldrh	r0, [r3, #0]
 8023108:	b970      	cbnz	r0, 8023128 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 802310a:	4b0e      	ldr	r3, [pc, #56]	; (8023144 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 802310c:	2150      	movs	r1, #80	; 0x50
 802310e:	4a0e      	ldr	r2, [pc, #56]	; (8023148 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023110:	480e      	ldr	r0, [pc, #56]	; (802314c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023112:	f007 fef9 	bl	802af08 <__assert_func>
 8023116:	2902      	cmp	r1, #2
 8023118:	d009      	beq.n	802312e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802311a:	2903      	cmp	r1, #3
 802311c:	d0f0      	beq.n	8023100 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802311e:	2901      	cmp	r1, #1
 8023120:	d1f0      	bne.n	8023104 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023122:	f04f 30ff 	mov.w	r0, #4294967295
 8023126:	e001      	b.n	802312c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023128:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802312c:	bd08      	pop	{r3, pc}
 802312e:	4b04      	ldr	r3, [pc, #16]	; (8023140 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023130:	8818      	ldrh	r0, [r3, #0]
 8023132:	2800      	cmp	r0, #0
 8023134:	d0e9      	beq.n	802310a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023136:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802313a:	4240      	negs	r0, r0
 802313c:	e7f6      	b.n	802312c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802313e:	bf00      	nop
 8023140:	2400b8c6 	.word	0x2400b8c6
 8023144:	0803019b 	.word	0x0803019b
 8023148:	08030794 	.word	0x08030794
 802314c:	080301dd 	.word	0x080301dd

08023150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023154:	b099      	sub	sp, #100	; 0x64
 8023156:	910b      	str	r1, [sp, #44]	; 0x2c
 8023158:	a914      	add	r1, sp, #80	; 0x50
 802315a:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 802315e:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 8023162:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8023166:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 802316a:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 802316e:	e881 000c 	stmia.w	r1, {r2, r3}
 8023172:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8023176:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 802317a:	930a      	str	r3, [sp, #40]	; 0x28
 802317c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8023180:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023184:	9311      	str	r3, [sp, #68]	; 0x44
 8023186:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 802318a:	7988      	ldrb	r0, [r1, #6]
 802318c:	930c      	str	r3, [sp, #48]	; 0x30
 802318e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8023192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023196:	4303      	orrs	r3, r0
 8023198:	9309      	str	r3, [sp, #36]	; 0x24
 802319a:	f000 81a1 	beq.w	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802319e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80231a2:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80231a6:	f891 9007 	ldrb.w	r9, [r1, #7]
 80231aa:	ea59 0903 	orrs.w	r9, r9, r3
 80231ae:	f000 8197 	beq.w	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80231b2:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80231b6:	b29b      	uxth	r3, r3
 80231b8:	2e00      	cmp	r6, #0
 80231ba:	f000 813a 	beq.w	8023432 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80231be:	1af6      	subs	r6, r6, r3
 80231c0:	b2b6      	uxth	r6, r6
 80231c2:	0433      	lsls	r3, r6, #16
 80231c4:	d502      	bpl.n	80231cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80231c6:	1bad      	subs	r5, r5, r6
 80231c8:	2600      	movs	r6, #0
 80231ca:	b22d      	sxth	r5, r5
 80231cc:	f9b2 1000 	ldrsh.w	r1, [r2]
 80231d0:	a814      	add	r0, sp, #80	; 0x50
 80231d2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80231d6:	428d      	cmp	r5, r1
 80231d8:	b28b      	uxth	r3, r1
 80231da:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80231de:	bfbf      	itttt	lt
 80231e0:	18f6      	addlt	r6, r6, r3
 80231e2:	1b75      	sublt	r5, r6, r5
 80231e4:	b2ae      	uxthlt	r6, r5
 80231e6:	460d      	movlt	r5, r1
 80231e8:	8891      	ldrh	r1, [r2, #4]
 80231ea:	440b      	add	r3, r1
 80231ec:	4629      	mov	r1, r5
 80231ee:	b21b      	sxth	r3, r3
 80231f0:	9310      	str	r3, [sp, #64]	; 0x40
 80231f2:	88d3      	ldrh	r3, [r2, #6]
 80231f4:	8852      	ldrh	r2, [r2, #2]
 80231f6:	4413      	add	r3, r2
 80231f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80231fa:	b21b      	sxth	r3, r3
 80231fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80231fe:	4bbd      	ldr	r3, [pc, #756]	; (80234f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023200:	f893 b000 	ldrb.w	fp, [r3]
 8023204:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023208:	f1dc 0300 	rsbs	r3, ip, #0
 802320c:	eb43 030c 	adc.w	r3, r3, ip
 8023210:	930e      	str	r3, [sp, #56]	; 0x38
 8023212:	4653      	mov	r3, sl
 8023214:	f7f8 f9ce 	bl	801b5b4 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023218:	4629      	mov	r1, r5
 802321a:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 802321e:	4653      	mov	r3, sl
 8023220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023222:	a814      	add	r0, sp, #80	; 0x50
 8023224:	f7f8 f9de 	bl	801b5e4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023228:	a918      	add	r1, sp, #96	; 0x60
 802322a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802322e:	a817      	add	r0, sp, #92	; 0x5c
 8023230:	f7f8 fafa 	bl	801b828 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023234:	f1ba 0f00 	cmp.w	sl, #0
 8023238:	f040 80fe 	bne.w	8023438 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 802323c:	f1bb 0f01 	cmp.w	fp, #1
 8023240:	f040 8102 	bne.w	8023448 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8023244:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023246:	b153      	cbz	r3, 802325e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8023248:	2408      	movs	r4, #8
 802324a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802324c:	fb94 f3f8 	sdiv	r3, r4, r8
 8023250:	1e5c      	subs	r4, r3, #1
 8023252:	4414      	add	r4, r2
 8023254:	fb94 f4f3 	sdiv	r4, r4, r3
 8023258:	fb14 f403 	smulbb	r4, r4, r3
 802325c:	b2a4      	uxth	r4, r4
 802325e:	b906      	cbnz	r6, 8023262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 8023260:	b16f      	cbz	r7, 802327e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 8023262:	fb07 6304 	mla	r3, r7, r4, r6
 8023266:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8023268:	463a      	mov	r2, r7
 802326a:	fb08 f303 	mul.w	r3, r8, r3
 802326e:	f003 0707 	and.w	r7, r3, #7
 8023272:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8023276:	9328      	str	r3, [sp, #160]	; 0xa0
 8023278:	eba9 0302 	sub.w	r3, r9, r2
 802327c:	930d      	str	r3, [sp, #52]	; 0x34
 802327e:	4651      	mov	r1, sl
 8023280:	980e      	ldr	r0, [sp, #56]	; 0x38
 8023282:	f7ff ff05 	bl	8023090 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8023286:	4651      	mov	r1, sl
 8023288:	4681      	mov	r9, r0
 802328a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802328c:	f7ff ff30 	bl	80230f0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8023290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023294:	4683      	mov	fp, r0
 8023296:	eba3 0a02 	sub.w	sl, r3, r2
 802329a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802329c:	459a      	cmp	sl, r3
 802329e:	bfa8      	it	ge
 80232a0:	469a      	movge	sl, r3
 80232a2:	f1ba 0f00 	cmp.w	sl, #0
 80232a6:	f340 811b 	ble.w	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80232aa:	1bad      	subs	r5, r5, r6
 80232ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80232ae:	1b5d      	subs	r5, r3, r5
 80232b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80232b2:	429d      	cmp	r5, r3
 80232b4:	bfd4      	ite	le
 80232b6:	ebc6 0605 	rsble	r6, r6, r5
 80232ba:	ebc6 0603 	rsbgt	r6, r6, r3
 80232be:	2e00      	cmp	r6, #0
 80232c0:	f340 810e 	ble.w	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80232c4:	1ba4      	subs	r4, r4, r6
 80232c6:	fb08 f304 	mul.w	r3, r8, r4
 80232ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80232cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80232ce:	2b00      	cmp	r3, #0
 80232d0:	f040 810b 	bne.w	80234ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80232d4:	4b88      	ldr	r3, [pc, #544]	; (80234f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80232d6:	6818      	ldr	r0, [r3, #0]
 80232d8:	6803      	ldr	r3, [r0, #0]
 80232da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80232dc:	4798      	blx	r3
 80232de:	2301      	movs	r3, #1
 80232e0:	4a86      	ldr	r2, [pc, #536]	; (80234fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80232e2:	fa03 f308 	lsl.w	r3, r3, r8
 80232e6:	8811      	ldrh	r1, [r2, #0]
 80232e8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80232ec:	3b01      	subs	r3, #1
 80232ee:	b2db      	uxtb	r3, r3
 80232f0:	930e      	str	r3, [sp, #56]	; 0x38
 80232f2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80232f6:	fb01 2303 	mla	r3, r1, r3, r2
 80232fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80232fe:	930a      	str	r3, [sp, #40]	; 0x28
 8023300:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023302:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023306:	9313      	str	r3, [sp, #76]	; 0x4c
 8023308:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802330a:	0a19      	lsrs	r1, r3, #8
 802330c:	b2cb      	uxtb	r3, r1
 802330e:	9312      	str	r3, [sp, #72]	; 0x48
 8023310:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023312:	b2db      	uxtb	r3, r3
 8023314:	9311      	str	r3, [sp, #68]	; 0x44
 8023316:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023318:	095a      	lsrs	r2, r3, #5
 802331a:	4b79      	ldr	r3, [pc, #484]	; (8023500 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 802331c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023320:	400b      	ands	r3, r1
 8023322:	4313      	orrs	r3, r2
 8023324:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023326:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802332a:	4313      	orrs	r3, r2
 802332c:	b29b      	uxth	r3, r3
 802332e:	9310      	str	r3, [sp, #64]	; 0x40
 8023330:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023332:	781a      	ldrb	r2, [r3, #0]
 8023334:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023338:	fb06 b919 	mls	r9, r6, r9, fp
 802333c:	413a      	asrs	r2, r7
 802333e:	fb03 fb06 	mul.w	fp, r3, r6
 8023342:	930d      	str	r3, [sp, #52]	; 0x34
 8023344:	b2d2      	uxtb	r2, r2
 8023346:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 802334a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802334e:	f0c0 80ea 	bcc.w	8023526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 8023352:	46b6      	mov	lr, r6
 8023354:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8023358:	f11e 3eff 	adds.w	lr, lr, #4294967295
 802335c:	f0c0 80d2 	bcc.w	8023504 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 8023360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023362:	4013      	ands	r3, r2
 8023364:	d055      	beq.n	8023412 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8023366:	20ff      	movs	r0, #255	; 0xff
 8023368:	990e      	ldr	r1, [sp, #56]	; 0x38
 802336a:	fb90 f1f1 	sdiv	r1, r0, r1
 802336e:	434b      	muls	r3, r1
 8023370:	2bfe      	cmp	r3, #254	; 0xfe
 8023372:	dd03      	ble.n	802337c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8023374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8023376:	4281      	cmp	r1, r0
 8023378:	f000 80b9 	beq.w	80234ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802337c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802337e:	f8bc 4000 	ldrh.w	r4, [ip]
 8023382:	fb11 f303 	smulbb	r3, r1, r3
 8023386:	1220      	asrs	r0, r4, #8
 8023388:	b29b      	uxth	r3, r3
 802338a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802338e:	1c59      	adds	r1, r3, #1
 8023390:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8023394:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8023398:	10e1      	asrs	r1, r4, #3
 802339a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802339e:	00e4      	lsls	r4, r4, #3
 80233a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80233a4:	b29d      	uxth	r5, r3
 80233a6:	43db      	mvns	r3, r3
 80233a8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80233ac:	b2db      	uxtb	r3, r3
 80233ae:	b2e4      	uxtb	r4, r4
 80233b0:	9309      	str	r3, [sp, #36]	; 0x24
 80233b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80233b4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80233b8:	fb13 f905 	smulbb	r9, r3, r5
 80233bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233be:	fb00 9003 	mla	r0, r0, r3, r9
 80233c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80233c4:	fb13 f905 	smulbb	r9, r3, r5
 80233c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233ca:	b280      	uxth	r0, r0
 80233cc:	fb01 9103 	mla	r1, r1, r3, r9
 80233d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80233d2:	fb13 f505 	smulbb	r5, r3, r5
 80233d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80233d8:	b289      	uxth	r1, r1
 80233da:	fb04 5403 	mla	r4, r4, r3, r5
 80233de:	1c43      	adds	r3, r0, #1
 80233e0:	b2a4      	uxth	r4, r4
 80233e2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80233e6:	f104 0901 	add.w	r9, r4, #1
 80233ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80233ee:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80233f2:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 80233f6:	ea49 0000 	orr.w	r0, r9, r0
 80233fa:	f101 0901 	add.w	r9, r1, #1
 80233fe:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023402:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023406:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802340a:	ea40 0009 	orr.w	r0, r0, r9
 802340e:	f8ac 0000 	strh.w	r0, [ip]
 8023412:	4447      	add	r7, r8
 8023414:	b2bf      	uxth	r7, r7
 8023416:	2f07      	cmp	r7, #7
 8023418:	bf89      	itett	hi
 802341a:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 802341c:	fa42 f208 	asrls.w	r2, r2, r8
 8023420:	2700      	movhi	r7, #0
 8023422:	785a      	ldrbhi	r2, [r3, #1]
 8023424:	bf8a      	itet	hi
 8023426:	3301      	addhi	r3, #1
 8023428:	b2d2      	uxtbls	r2, r2
 802342a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 802342c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802342e:	449c      	add	ip, r3
 8023430:	e792      	b.n	8023358 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8023432:	441d      	add	r5, r3
 8023434:	b22d      	sxth	r5, r5
 8023436:	e6c9      	b.n	80231cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023438:	f1ba 0f01 	cmp.w	sl, #1
 802343c:	f47f af02 	bne.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023440:	f1bb 0f01 	cmp.w	fp, #1
 8023444:	f47f aefe 	bne.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023448:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80234f8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 802344c:	f8db 0000 	ldr.w	r0, [fp]
 8023450:	6803      	ldr	r3, [r0, #0]
 8023452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023454:	4798      	blx	r3
 8023456:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 802345a:	465a      	mov	r2, fp
 802345c:	d006      	beq.n	802346c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802345e:	f1b8 0f04 	cmp.w	r8, #4
 8023462:	d140      	bne.n	80234e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8023464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023466:	3300      	adds	r3, #0
 8023468:	bf18      	it	ne
 802346a:	2301      	movne	r3, #1
 802346c:	0580      	lsls	r0, r0, #22
 802346e:	d563      	bpl.n	8023538 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023470:	f1b8 0f08 	cmp.w	r8, #8
 8023474:	d160      	bne.n	8023538 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8023476:	2b00      	cmp	r3, #0
 8023478:	bf0c      	ite	eq
 802347a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802347e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8023482:	2e00      	cmp	r6, #0
 8023484:	f47f aede 	bne.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023488:	2f00      	cmp	r7, #0
 802348a:	f47f aedb 	bne.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023490:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023492:	18eb      	adds	r3, r5, r3
 8023494:	4283      	cmp	r3, r0
 8023496:	f73f aed5 	bgt.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802349a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802349c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802349e:	444b      	add	r3, r9
 80234a0:	4283      	cmp	r3, r0
 80234a2:	f73f aecf 	bgt.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234a6:	f1b8 0f08 	cmp.w	r8, #8
 80234aa:	6810      	ldr	r0, [r2, #0]
 80234ac:	f04f 0600 	mov.w	r6, #0
 80234b0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80234b4:	bf18      	it	ne
 80234b6:	3401      	addne	r4, #1
 80234b8:	6805      	ldr	r5, [r0, #0]
 80234ba:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80234be:	bf18      	it	ne
 80234c0:	f024 0401 	bicne.w	r4, r4, #1
 80234c4:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80234c8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80234ca:	bf18      	it	ne
 80234cc:	b2a4      	uxthne	r4, r4
 80234ce:	9104      	str	r1, [sp, #16]
 80234d0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80234d2:	e9cd 4900 	strd	r4, r9, [sp]
 80234d6:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80234da:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80234dc:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80234de:	47a0      	blx	r4
 80234e0:	b019      	add	sp, #100	; 0x64
 80234e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234e6:	2300      	movs	r3, #0
 80234e8:	e7c0      	b.n	802346c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80234ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80234ec:	e6f7      	b.n	80232de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80234ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80234f0:	e78d      	b.n	802340e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80234f2:	bf00      	nop
 80234f4:	2400b8c4 	.word	0x2400b8c4
 80234f8:	2400b8cc 	.word	0x2400b8cc
 80234fc:	2400b8c6 	.word	0x2400b8c6
 8023500:	00fff800 	.word	0x00fff800
 8023504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023506:	b153      	cbz	r3, 802351e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023508:	441f      	add	r7, r3
 802350a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802350c:	b2bf      	uxth	r7, r7
 802350e:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8023512:	f007 0707 	and.w	r7, r7, #7
 8023516:	781a      	ldrb	r2, [r3, #0]
 8023518:	9328      	str	r3, [sp, #160]	; 0xa0
 802351a:	413a      	asrs	r2, r7
 802351c:	b2d2      	uxtb	r2, r2
 802351e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023520:	445b      	add	r3, fp
 8023522:	930a      	str	r3, [sp, #40]	; 0x28
 8023524:	e711      	b.n	802334a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023528:	2b00      	cmp	r3, #0
 802352a:	d1d9      	bne.n	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802352c:	4b05      	ldr	r3, [pc, #20]	; (8023544 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 802352e:	6818      	ldr	r0, [r3, #0]
 8023530:	6803      	ldr	r3, [r0, #0]
 8023532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023534:	4798      	blx	r3
 8023536:	e7d3      	b.n	80234e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023538:	2b00      	cmp	r3, #0
 802353a:	f43f ae83 	beq.w	8023244 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802353e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023542:	e79e      	b.n	8023482 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8023544:	2400b8cc 	.word	0x2400b8cc

08023548 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8023548:	b538      	push	{r3, r4, r5, lr}
 802354a:	4c15      	ldr	r4, [pc, #84]	; (80235a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 802354c:	4605      	mov	r5, r0
 802354e:	7823      	ldrb	r3, [r4, #0]
 8023550:	f3bf 8f5b 	dmb	ish
 8023554:	07da      	lsls	r2, r3, #31
 8023556:	d40b      	bmi.n	8023570 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023558:	4620      	mov	r0, r4
 802355a:	f007 fca8 	bl	802aeae <__cxa_guard_acquire>
 802355e:	b138      	cbz	r0, 8023570 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8023560:	4620      	mov	r0, r4
 8023562:	f007 fcb0 	bl	802aec6 <__cxa_guard_release>
 8023566:	4a0f      	ldr	r2, [pc, #60]	; (80235a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8023568:	490f      	ldr	r1, [pc, #60]	; (80235a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802356a:	4810      	ldr	r0, [pc, #64]	; (80235ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802356c:	f007 fc98 	bl	802aea0 <__aeabi_atexit>
 8023570:	4c0f      	ldr	r4, [pc, #60]	; (80235b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8023572:	7823      	ldrb	r3, [r4, #0]
 8023574:	f3bf 8f5b 	dmb	ish
 8023578:	07db      	lsls	r3, r3, #31
 802357a:	d40b      	bmi.n	8023594 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802357c:	4620      	mov	r0, r4
 802357e:	f007 fc96 	bl	802aeae <__cxa_guard_acquire>
 8023582:	b138      	cbz	r0, 8023594 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8023584:	4620      	mov	r0, r4
 8023586:	f007 fc9e 	bl	802aec6 <__cxa_guard_release>
 802358a:	4a06      	ldr	r2, [pc, #24]	; (80235a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 802358c:	4909      	ldr	r1, [pc, #36]	; (80235b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802358e:	480a      	ldr	r0, [pc, #40]	; (80235b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8023590:	f007 fc86 	bl	802aea0 <__aeabi_atexit>
 8023594:	4b05      	ldr	r3, [pc, #20]	; (80235ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8023596:	612b      	str	r3, [r5, #16]
 8023598:	4b07      	ldr	r3, [pc, #28]	; (80235b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802359a:	616b      	str	r3, [r5, #20]
 802359c:	bd38      	pop	{r3, r4, r5, pc}
 802359e:	bf00      	nop
 80235a0:	2400b998 	.word	0x2400b998
 80235a4:	24000000 	.word	0x24000000
 80235a8:	08021747 	.word	0x08021747
 80235ac:	24000098 	.word	0x24000098
 80235b0:	2400b99c 	.word	0x2400b99c
 80235b4:	08021745 	.word	0x08021745
 80235b8:	2400009c 	.word	0x2400009c

080235bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80235bc:	b538      	push	{r3, r4, r5, lr}
 80235be:	4c15      	ldr	r4, [pc, #84]	; (8023614 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80235c0:	4605      	mov	r5, r0
 80235c2:	7823      	ldrb	r3, [r4, #0]
 80235c4:	f3bf 8f5b 	dmb	ish
 80235c8:	07da      	lsls	r2, r3, #31
 80235ca:	d40b      	bmi.n	80235e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80235cc:	4620      	mov	r0, r4
 80235ce:	f007 fc6e 	bl	802aeae <__cxa_guard_acquire>
 80235d2:	b138      	cbz	r0, 80235e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80235d4:	4620      	mov	r0, r4
 80235d6:	f007 fc76 	bl	802aec6 <__cxa_guard_release>
 80235da:	4a0f      	ldr	r2, [pc, #60]	; (8023618 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80235dc:	490f      	ldr	r1, [pc, #60]	; (802361c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80235de:	4810      	ldr	r0, [pc, #64]	; (8023620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80235e0:	f007 fc5e 	bl	802aea0 <__aeabi_atexit>
 80235e4:	4c0f      	ldr	r4, [pc, #60]	; (8023624 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80235e6:	7823      	ldrb	r3, [r4, #0]
 80235e8:	f3bf 8f5b 	dmb	ish
 80235ec:	07db      	lsls	r3, r3, #31
 80235ee:	d40b      	bmi.n	8023608 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80235f0:	4620      	mov	r0, r4
 80235f2:	f007 fc5c 	bl	802aeae <__cxa_guard_acquire>
 80235f6:	b138      	cbz	r0, 8023608 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80235f8:	4620      	mov	r0, r4
 80235fa:	f007 fc64 	bl	802aec6 <__cxa_guard_release>
 80235fe:	4a06      	ldr	r2, [pc, #24]	; (8023618 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023600:	4909      	ldr	r1, [pc, #36]	; (8023628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023602:	480a      	ldr	r0, [pc, #40]	; (802362c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023604:	f007 fc4c 	bl	802aea0 <__aeabi_atexit>
 8023608:	4b05      	ldr	r3, [pc, #20]	; (8023620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802360a:	60ab      	str	r3, [r5, #8]
 802360c:	4b07      	ldr	r3, [pc, #28]	; (802362c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802360e:	60eb      	str	r3, [r5, #12]
 8023610:	bd38      	pop	{r3, r4, r5, pc}
 8023612:	bf00      	nop
 8023614:	2400b970 	.word	0x2400b970
 8023618:	24000000 	.word	0x24000000
 802361c:	0802174b 	.word	0x0802174b
 8023620:	24000070 	.word	0x24000070
 8023624:	2400b974 	.word	0x2400b974
 8023628:	08021749 	.word	0x08021749
 802362c:	24000074 	.word	0x24000074

08023630 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023630:	b510      	push	{r4, lr}
 8023632:	4604      	mov	r4, r0
 8023634:	f7ff ff88 	bl	8023548 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023638:	4620      	mov	r0, r4
 802363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802363e:	f7ff bfbd 	b.w	80235bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08023644 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8023644:	b538      	push	{r3, r4, r5, lr}
 8023646:	4c15      	ldr	r4, [pc, #84]	; (802369c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8023648:	4605      	mov	r5, r0
 802364a:	7823      	ldrb	r3, [r4, #0]
 802364c:	f3bf 8f5b 	dmb	ish
 8023650:	07da      	lsls	r2, r3, #31
 8023652:	d40b      	bmi.n	802366c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8023654:	4620      	mov	r0, r4
 8023656:	f007 fc2a 	bl	802aeae <__cxa_guard_acquire>
 802365a:	b138      	cbz	r0, 802366c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802365c:	4620      	mov	r0, r4
 802365e:	f007 fc32 	bl	802aec6 <__cxa_guard_release>
 8023662:	4a0f      	ldr	r2, [pc, #60]	; (80236a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023664:	490f      	ldr	r1, [pc, #60]	; (80236a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8023666:	4810      	ldr	r0, [pc, #64]	; (80236a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023668:	f007 fc1a 	bl	802aea0 <__aeabi_atexit>
 802366c:	4c0f      	ldr	r4, [pc, #60]	; (80236ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802366e:	7823      	ldrb	r3, [r4, #0]
 8023670:	f3bf 8f5b 	dmb	ish
 8023674:	07db      	lsls	r3, r3, #31
 8023676:	d40b      	bmi.n	8023690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023678:	4620      	mov	r0, r4
 802367a:	f007 fc18 	bl	802aeae <__cxa_guard_acquire>
 802367e:	b138      	cbz	r0, 8023690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8023680:	4620      	mov	r0, r4
 8023682:	f007 fc20 	bl	802aec6 <__cxa_guard_release>
 8023686:	4a06      	ldr	r2, [pc, #24]	; (80236a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8023688:	4909      	ldr	r1, [pc, #36]	; (80236b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802368a:	480a      	ldr	r0, [pc, #40]	; (80236b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802368c:	f007 fc08 	bl	802aea0 <__aeabi_atexit>
 8023690:	4b05      	ldr	r3, [pc, #20]	; (80236a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8023692:	622b      	str	r3, [r5, #32]
 8023694:	4b07      	ldr	r3, [pc, #28]	; (80236b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8023696:	626b      	str	r3, [r5, #36]	; 0x24
 8023698:	bd38      	pop	{r3, r4, r5, pc}
 802369a:	bf00      	nop
 802369c:	2400b9a0 	.word	0x2400b9a0
 80236a0:	24000000 	.word	0x24000000
 80236a4:	0802173f 	.word	0x0802173f
 80236a8:	240000a0 	.word	0x240000a0
 80236ac:	2400b9a4 	.word	0x2400b9a4
 80236b0:	0802173d 	.word	0x0802173d
 80236b4:	240000a4 	.word	0x240000a4

080236b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80236b8:	b538      	push	{r3, r4, r5, lr}
 80236ba:	4c15      	ldr	r4, [pc, #84]	; (8023710 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80236bc:	4605      	mov	r5, r0
 80236be:	7823      	ldrb	r3, [r4, #0]
 80236c0:	f3bf 8f5b 	dmb	ish
 80236c4:	07da      	lsls	r2, r3, #31
 80236c6:	d40b      	bmi.n	80236e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80236c8:	4620      	mov	r0, r4
 80236ca:	f007 fbf0 	bl	802aeae <__cxa_guard_acquire>
 80236ce:	b138      	cbz	r0, 80236e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80236d0:	4620      	mov	r0, r4
 80236d2:	f007 fbf8 	bl	802aec6 <__cxa_guard_release>
 80236d6:	4a0f      	ldr	r2, [pc, #60]	; (8023714 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80236d8:	490f      	ldr	r1, [pc, #60]	; (8023718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80236da:	4810      	ldr	r0, [pc, #64]	; (802371c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80236dc:	f007 fbe0 	bl	802aea0 <__aeabi_atexit>
 80236e0:	4c0f      	ldr	r4, [pc, #60]	; (8023720 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80236e2:	7823      	ldrb	r3, [r4, #0]
 80236e4:	f3bf 8f5b 	dmb	ish
 80236e8:	07db      	lsls	r3, r3, #31
 80236ea:	d40b      	bmi.n	8023704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80236ec:	4620      	mov	r0, r4
 80236ee:	f007 fbde 	bl	802aeae <__cxa_guard_acquire>
 80236f2:	b138      	cbz	r0, 8023704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80236f4:	4620      	mov	r0, r4
 80236f6:	f007 fbe6 	bl	802aec6 <__cxa_guard_release>
 80236fa:	4a06      	ldr	r2, [pc, #24]	; (8023714 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80236fc:	4909      	ldr	r1, [pc, #36]	; (8023724 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80236fe:	480a      	ldr	r0, [pc, #40]	; (8023728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023700:	f007 fbce 	bl	802aea0 <__aeabi_atexit>
 8023704:	4b05      	ldr	r3, [pc, #20]	; (802371c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023706:	61ab      	str	r3, [r5, #24]
 8023708:	4b07      	ldr	r3, [pc, #28]	; (8023728 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802370a:	61eb      	str	r3, [r5, #28]
 802370c:	bd38      	pop	{r3, r4, r5, pc}
 802370e:	bf00      	nop
 8023710:	2400b978 	.word	0x2400b978
 8023714:	24000000 	.word	0x24000000
 8023718:	08021743 	.word	0x08021743
 802371c:	24000078 	.word	0x24000078
 8023720:	2400b97c 	.word	0x2400b97c
 8023724:	08021741 	.word	0x08021741
 8023728:	2400007c 	.word	0x2400007c

0802372c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 802372c:	b510      	push	{r4, lr}
 802372e:	4604      	mov	r4, r0
 8023730:	f7ff ff88 	bl	8023644 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023734:	4620      	mov	r0, r4
 8023736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802373a:	f7ff bfbd 	b.w	80236b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08023740 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8023740:	b538      	push	{r3, r4, r5, lr}
 8023742:	4c15      	ldr	r4, [pc, #84]	; (8023798 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8023744:	4605      	mov	r5, r0
 8023746:	7823      	ldrb	r3, [r4, #0]
 8023748:	f3bf 8f5b 	dmb	ish
 802374c:	07da      	lsls	r2, r3, #31
 802374e:	d40b      	bmi.n	8023768 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023750:	4620      	mov	r0, r4
 8023752:	f007 fbac 	bl	802aeae <__cxa_guard_acquire>
 8023756:	b138      	cbz	r0, 8023768 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8023758:	4620      	mov	r0, r4
 802375a:	f007 fbb4 	bl	802aec6 <__cxa_guard_release>
 802375e:	4a0f      	ldr	r2, [pc, #60]	; (802379c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023760:	490f      	ldr	r1, [pc, #60]	; (80237a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8023762:	4810      	ldr	r0, [pc, #64]	; (80237a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8023764:	f007 fb9c 	bl	802aea0 <__aeabi_atexit>
 8023768:	4c0f      	ldr	r4, [pc, #60]	; (80237a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 802376a:	7823      	ldrb	r3, [r4, #0]
 802376c:	f3bf 8f5b 	dmb	ish
 8023770:	07db      	lsls	r3, r3, #31
 8023772:	d40b      	bmi.n	802378c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8023774:	4620      	mov	r0, r4
 8023776:	f007 fb9a 	bl	802aeae <__cxa_guard_acquire>
 802377a:	b138      	cbz	r0, 802378c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802377c:	4620      	mov	r0, r4
 802377e:	f007 fba2 	bl	802aec6 <__cxa_guard_release>
 8023782:	4a06      	ldr	r2, [pc, #24]	; (802379c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8023784:	4909      	ldr	r1, [pc, #36]	; (80237ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8023786:	480a      	ldr	r0, [pc, #40]	; (80237b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023788:	f007 fb8a 	bl	802aea0 <__aeabi_atexit>
 802378c:	4b05      	ldr	r3, [pc, #20]	; (80237a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802378e:	632b      	str	r3, [r5, #48]	; 0x30
 8023790:	4b07      	ldr	r3, [pc, #28]	; (80237b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8023792:	636b      	str	r3, [r5, #52]	; 0x34
 8023794:	bd38      	pop	{r3, r4, r5, pc}
 8023796:	bf00      	nop
 8023798:	2400b9b0 	.word	0x2400b9b0
 802379c:	24000000 	.word	0x24000000
 80237a0:	08021737 	.word	0x08021737
 80237a4:	240000b0 	.word	0x240000b0
 80237a8:	2400b9b4 	.word	0x2400b9b4
 80237ac:	08021735 	.word	0x08021735
 80237b0:	240000b4 	.word	0x240000b4

080237b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80237b4:	b538      	push	{r3, r4, r5, lr}
 80237b6:	4c15      	ldr	r4, [pc, #84]	; (802380c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80237b8:	4605      	mov	r5, r0
 80237ba:	7823      	ldrb	r3, [r4, #0]
 80237bc:	f3bf 8f5b 	dmb	ish
 80237c0:	07da      	lsls	r2, r3, #31
 80237c2:	d40b      	bmi.n	80237dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80237c4:	4620      	mov	r0, r4
 80237c6:	f007 fb72 	bl	802aeae <__cxa_guard_acquire>
 80237ca:	b138      	cbz	r0, 80237dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80237cc:	4620      	mov	r0, r4
 80237ce:	f007 fb7a 	bl	802aec6 <__cxa_guard_release>
 80237d2:	4a0f      	ldr	r2, [pc, #60]	; (8023810 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80237d4:	490f      	ldr	r1, [pc, #60]	; (8023814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80237d6:	4810      	ldr	r0, [pc, #64]	; (8023818 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80237d8:	f007 fb62 	bl	802aea0 <__aeabi_atexit>
 80237dc:	4c0f      	ldr	r4, [pc, #60]	; (802381c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80237de:	7823      	ldrb	r3, [r4, #0]
 80237e0:	f3bf 8f5b 	dmb	ish
 80237e4:	07db      	lsls	r3, r3, #31
 80237e6:	d40b      	bmi.n	8023800 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80237e8:	4620      	mov	r0, r4
 80237ea:	f007 fb60 	bl	802aeae <__cxa_guard_acquire>
 80237ee:	b138      	cbz	r0, 8023800 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80237f0:	4620      	mov	r0, r4
 80237f2:	f007 fb68 	bl	802aec6 <__cxa_guard_release>
 80237f6:	4a06      	ldr	r2, [pc, #24]	; (8023810 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80237f8:	4909      	ldr	r1, [pc, #36]	; (8023820 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80237fa:	480a      	ldr	r0, [pc, #40]	; (8023824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80237fc:	f007 fb50 	bl	802aea0 <__aeabi_atexit>
 8023800:	4b05      	ldr	r3, [pc, #20]	; (8023818 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023802:	62ab      	str	r3, [r5, #40]	; 0x28
 8023804:	4b07      	ldr	r3, [pc, #28]	; (8023824 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023806:	62eb      	str	r3, [r5, #44]	; 0x2c
 8023808:	bd38      	pop	{r3, r4, r5, pc}
 802380a:	bf00      	nop
 802380c:	2400b980 	.word	0x2400b980
 8023810:	24000000 	.word	0x24000000
 8023814:	0802173b 	.word	0x0802173b
 8023818:	24000080 	.word	0x24000080
 802381c:	2400b984 	.word	0x2400b984
 8023820:	08021739 	.word	0x08021739
 8023824:	24000084 	.word	0x24000084

08023828 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023828:	b510      	push	{r4, lr}
 802382a:	4604      	mov	r4, r0
 802382c:	f7ff ff88 	bl	8023740 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023830:	4620      	mov	r0, r4
 8023832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023836:	f7ff bfbd 	b.w	80237b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802383c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802383c:	b538      	push	{r3, r4, r5, lr}
 802383e:	4c15      	ldr	r4, [pc, #84]	; (8023894 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8023840:	4605      	mov	r5, r0
 8023842:	7823      	ldrb	r3, [r4, #0]
 8023844:	f3bf 8f5b 	dmb	ish
 8023848:	07da      	lsls	r2, r3, #31
 802384a:	d40b      	bmi.n	8023864 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802384c:	4620      	mov	r0, r4
 802384e:	f007 fb2e 	bl	802aeae <__cxa_guard_acquire>
 8023852:	b138      	cbz	r0, 8023864 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8023854:	4620      	mov	r0, r4
 8023856:	f007 fb36 	bl	802aec6 <__cxa_guard_release>
 802385a:	4a0f      	ldr	r2, [pc, #60]	; (8023898 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802385c:	490f      	ldr	r1, [pc, #60]	; (802389c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802385e:	4810      	ldr	r0, [pc, #64]	; (80238a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8023860:	f007 fb1e 	bl	802aea0 <__aeabi_atexit>
 8023864:	4c0f      	ldr	r4, [pc, #60]	; (80238a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8023866:	7823      	ldrb	r3, [r4, #0]
 8023868:	f3bf 8f5b 	dmb	ish
 802386c:	07db      	lsls	r3, r3, #31
 802386e:	d40b      	bmi.n	8023888 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023870:	4620      	mov	r0, r4
 8023872:	f007 fb1c 	bl	802aeae <__cxa_guard_acquire>
 8023876:	b138      	cbz	r0, 8023888 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8023878:	4620      	mov	r0, r4
 802387a:	f007 fb24 	bl	802aec6 <__cxa_guard_release>
 802387e:	4a06      	ldr	r2, [pc, #24]	; (8023898 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8023880:	4909      	ldr	r1, [pc, #36]	; (80238a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8023882:	480a      	ldr	r0, [pc, #40]	; (80238ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8023884:	f007 fb0c 	bl	802aea0 <__aeabi_atexit>
 8023888:	4b05      	ldr	r3, [pc, #20]	; (80238a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802388a:	652b      	str	r3, [r5, #80]	; 0x50
 802388c:	4b07      	ldr	r3, [pc, #28]	; (80238ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802388e:	656b      	str	r3, [r5, #84]	; 0x54
 8023890:	bd38      	pop	{r3, r4, r5, pc}
 8023892:	bf00      	nop
 8023894:	2400b9b8 	.word	0x2400b9b8
 8023898:	24000000 	.word	0x24000000
 802389c:	08021727 	.word	0x08021727
 80238a0:	240000b8 	.word	0x240000b8
 80238a4:	2400b9bc 	.word	0x2400b9bc
 80238a8:	08021725 	.word	0x08021725
 80238ac:	240000bc 	.word	0x240000bc

080238b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80238b0:	b538      	push	{r3, r4, r5, lr}
 80238b2:	4c15      	ldr	r4, [pc, #84]	; (8023908 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80238b4:	4605      	mov	r5, r0
 80238b6:	7823      	ldrb	r3, [r4, #0]
 80238b8:	f3bf 8f5b 	dmb	ish
 80238bc:	07da      	lsls	r2, r3, #31
 80238be:	d40b      	bmi.n	80238d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80238c0:	4620      	mov	r0, r4
 80238c2:	f007 faf4 	bl	802aeae <__cxa_guard_acquire>
 80238c6:	b138      	cbz	r0, 80238d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80238c8:	4620      	mov	r0, r4
 80238ca:	f007 fafc 	bl	802aec6 <__cxa_guard_release>
 80238ce:	4a0f      	ldr	r2, [pc, #60]	; (802390c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80238d0:	490f      	ldr	r1, [pc, #60]	; (8023910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80238d2:	4810      	ldr	r0, [pc, #64]	; (8023914 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80238d4:	f007 fae4 	bl	802aea0 <__aeabi_atexit>
 80238d8:	4c0f      	ldr	r4, [pc, #60]	; (8023918 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80238da:	7823      	ldrb	r3, [r4, #0]
 80238dc:	f3bf 8f5b 	dmb	ish
 80238e0:	07db      	lsls	r3, r3, #31
 80238e2:	d40b      	bmi.n	80238fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80238e4:	4620      	mov	r0, r4
 80238e6:	f007 fae2 	bl	802aeae <__cxa_guard_acquire>
 80238ea:	b138      	cbz	r0, 80238fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80238ec:	4620      	mov	r0, r4
 80238ee:	f007 faea 	bl	802aec6 <__cxa_guard_release>
 80238f2:	4a06      	ldr	r2, [pc, #24]	; (802390c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80238f4:	4909      	ldr	r1, [pc, #36]	; (802391c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 80238f6:	480a      	ldr	r0, [pc, #40]	; (8023920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80238f8:	f007 fad2 	bl	802aea0 <__aeabi_atexit>
 80238fc:	4b05      	ldr	r3, [pc, #20]	; (8023914 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80238fe:	64ab      	str	r3, [r5, #72]	; 0x48
 8023900:	4b07      	ldr	r3, [pc, #28]	; (8023920 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023902:	64eb      	str	r3, [r5, #76]	; 0x4c
 8023904:	bd38      	pop	{r3, r4, r5, pc}
 8023906:	bf00      	nop
 8023908:	2400b9c0 	.word	0x2400b9c0
 802390c:	24000000 	.word	0x24000000
 8023910:	0802172b 	.word	0x0802172b
 8023914:	240000c0 	.word	0x240000c0
 8023918:	2400b9c4 	.word	0x2400b9c4
 802391c:	08021729 	.word	0x08021729
 8023920:	240000c4 	.word	0x240000c4

08023924 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023924:	b538      	push	{r3, r4, r5, lr}
 8023926:	4c15      	ldr	r4, [pc, #84]	; (802397c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023928:	4605      	mov	r5, r0
 802392a:	7823      	ldrb	r3, [r4, #0]
 802392c:	f3bf 8f5b 	dmb	ish
 8023930:	07da      	lsls	r2, r3, #31
 8023932:	d40b      	bmi.n	802394c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023934:	4620      	mov	r0, r4
 8023936:	f007 faba 	bl	802aeae <__cxa_guard_acquire>
 802393a:	b138      	cbz	r0, 802394c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802393c:	4620      	mov	r0, r4
 802393e:	f007 fac2 	bl	802aec6 <__cxa_guard_release>
 8023942:	4a0f      	ldr	r2, [pc, #60]	; (8023980 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023944:	490f      	ldr	r1, [pc, #60]	; (8023984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8023946:	4810      	ldr	r0, [pc, #64]	; (8023988 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023948:	f007 faaa 	bl	802aea0 <__aeabi_atexit>
 802394c:	4c0f      	ldr	r4, [pc, #60]	; (802398c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802394e:	7823      	ldrb	r3, [r4, #0]
 8023950:	f3bf 8f5b 	dmb	ish
 8023954:	07db      	lsls	r3, r3, #31
 8023956:	d40b      	bmi.n	8023970 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023958:	4620      	mov	r0, r4
 802395a:	f007 faa8 	bl	802aeae <__cxa_guard_acquire>
 802395e:	b138      	cbz	r0, 8023970 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8023960:	4620      	mov	r0, r4
 8023962:	f007 fab0 	bl	802aec6 <__cxa_guard_release>
 8023966:	4a06      	ldr	r2, [pc, #24]	; (8023980 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8023968:	4909      	ldr	r1, [pc, #36]	; (8023990 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802396a:	480a      	ldr	r0, [pc, #40]	; (8023994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802396c:	f007 fa98 	bl	802aea0 <__aeabi_atexit>
 8023970:	4b05      	ldr	r3, [pc, #20]	; (8023988 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8023972:	642b      	str	r3, [r5, #64]	; 0x40
 8023974:	4b07      	ldr	r3, [pc, #28]	; (8023994 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8023976:	646b      	str	r3, [r5, #68]	; 0x44
 8023978:	bd38      	pop	{r3, r4, r5, pc}
 802397a:	bf00      	nop
 802397c:	2400b988 	.word	0x2400b988
 8023980:	24000000 	.word	0x24000000
 8023984:	0802172f 	.word	0x0802172f
 8023988:	24000088 	.word	0x24000088
 802398c:	2400b98c 	.word	0x2400b98c
 8023990:	0802172d 	.word	0x0802172d
 8023994:	2400008c 	.word	0x2400008c

08023998 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8023998:	b538      	push	{r3, r4, r5, lr}
 802399a:	4c15      	ldr	r4, [pc, #84]	; (80239f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802399c:	4605      	mov	r5, r0
 802399e:	7823      	ldrb	r3, [r4, #0]
 80239a0:	f3bf 8f5b 	dmb	ish
 80239a4:	07da      	lsls	r2, r3, #31
 80239a6:	d40b      	bmi.n	80239c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80239a8:	4620      	mov	r0, r4
 80239aa:	f007 fa80 	bl	802aeae <__cxa_guard_acquire>
 80239ae:	b138      	cbz	r0, 80239c0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80239b0:	4620      	mov	r0, r4
 80239b2:	f007 fa88 	bl	802aec6 <__cxa_guard_release>
 80239b6:	4a0f      	ldr	r2, [pc, #60]	; (80239f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80239b8:	490f      	ldr	r1, [pc, #60]	; (80239f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80239ba:	4810      	ldr	r0, [pc, #64]	; (80239fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80239bc:	f007 fa70 	bl	802aea0 <__aeabi_atexit>
 80239c0:	4c0f      	ldr	r4, [pc, #60]	; (8023a00 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80239c2:	7823      	ldrb	r3, [r4, #0]
 80239c4:	f3bf 8f5b 	dmb	ish
 80239c8:	07db      	lsls	r3, r3, #31
 80239ca:	d40b      	bmi.n	80239e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80239cc:	4620      	mov	r0, r4
 80239ce:	f007 fa6e 	bl	802aeae <__cxa_guard_acquire>
 80239d2:	b138      	cbz	r0, 80239e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80239d4:	4620      	mov	r0, r4
 80239d6:	f007 fa76 	bl	802aec6 <__cxa_guard_release>
 80239da:	4a06      	ldr	r2, [pc, #24]	; (80239f4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80239dc:	4909      	ldr	r1, [pc, #36]	; (8023a04 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80239de:	480a      	ldr	r0, [pc, #40]	; (8023a08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80239e0:	f007 fa5e 	bl	802aea0 <__aeabi_atexit>
 80239e4:	4b05      	ldr	r3, [pc, #20]	; (80239fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80239e6:	63ab      	str	r3, [r5, #56]	; 0x38
 80239e8:	4b07      	ldr	r3, [pc, #28]	; (8023a08 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80239ea:	63eb      	str	r3, [r5, #60]	; 0x3c
 80239ec:	bd38      	pop	{r3, r4, r5, pc}
 80239ee:	bf00      	nop
 80239f0:	2400b9a8 	.word	0x2400b9a8
 80239f4:	24000000 	.word	0x24000000
 80239f8:	08021733 	.word	0x08021733
 80239fc:	240000a8 	.word	0x240000a8
 8023a00:	2400b9ac 	.word	0x2400b9ac
 8023a04:	08021731 	.word	0x08021731
 8023a08:	240000ac 	.word	0x240000ac

08023a0c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023a0c:	b510      	push	{r4, lr}
 8023a0e:	4604      	mov	r4, r0
 8023a10:	f7ff ff14 	bl	802383c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023a14:	4620      	mov	r0, r4
 8023a16:	f7ff ff85 	bl	8023924 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023a1a:	4620      	mov	r0, r4
 8023a1c:	f7ff ff48 	bl	80238b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8023a20:	4620      	mov	r0, r4
 8023a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a26:	f7ff bfb7 	b.w	8023998 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023a2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023a2c:	b538      	push	{r3, r4, r5, lr}
 8023a2e:	4c15      	ldr	r4, [pc, #84]	; (8023a84 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023a30:	4605      	mov	r5, r0
 8023a32:	7823      	ldrb	r3, [r4, #0]
 8023a34:	f3bf 8f5b 	dmb	ish
 8023a38:	07da      	lsls	r2, r3, #31
 8023a3a:	d40b      	bmi.n	8023a54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a3c:	4620      	mov	r0, r4
 8023a3e:	f007 fa36 	bl	802aeae <__cxa_guard_acquire>
 8023a42:	b138      	cbz	r0, 8023a54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a44:	4620      	mov	r0, r4
 8023a46:	f007 fa3e 	bl	802aec6 <__cxa_guard_release>
 8023a4a:	4a0f      	ldr	r2, [pc, #60]	; (8023a88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023a4c:	490f      	ldr	r1, [pc, #60]	; (8023a8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023a4e:	4810      	ldr	r0, [pc, #64]	; (8023a90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023a50:	f007 fa26 	bl	802aea0 <__aeabi_atexit>
 8023a54:	4c0f      	ldr	r4, [pc, #60]	; (8023a94 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023a56:	7823      	ldrb	r3, [r4, #0]
 8023a58:	f3bf 8f5b 	dmb	ish
 8023a5c:	07db      	lsls	r3, r3, #31
 8023a5e:	d40b      	bmi.n	8023a78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023a60:	4620      	mov	r0, r4
 8023a62:	f007 fa24 	bl	802aeae <__cxa_guard_acquire>
 8023a66:	b138      	cbz	r0, 8023a78 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023a68:	4620      	mov	r0, r4
 8023a6a:	f007 fa2c 	bl	802aec6 <__cxa_guard_release>
 8023a6e:	4a06      	ldr	r2, [pc, #24]	; (8023a88 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023a70:	4909      	ldr	r1, [pc, #36]	; (8023a98 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023a72:	480a      	ldr	r0, [pc, #40]	; (8023a9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023a74:	f007 fa14 	bl	802aea0 <__aeabi_atexit>
 8023a78:	4b05      	ldr	r3, [pc, #20]	; (8023a90 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023a7a:	662b      	str	r3, [r5, #96]	; 0x60
 8023a7c:	4b07      	ldr	r3, [pc, #28]	; (8023a9c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023a7e:	666b      	str	r3, [r5, #100]	; 0x64
 8023a80:	bd38      	pop	{r3, r4, r5, pc}
 8023a82:	bf00      	nop
 8023a84:	2400b990 	.word	0x2400b990
 8023a88:	24000000 	.word	0x24000000
 8023a8c:	0802171f 	.word	0x0802171f
 8023a90:	24000090 	.word	0x24000090
 8023a94:	2400b994 	.word	0x2400b994
 8023a98:	0802171d 	.word	0x0802171d
 8023a9c:	24000094 	.word	0x24000094

08023aa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023aa0:	b538      	push	{r3, r4, r5, lr}
 8023aa2:	4c15      	ldr	r4, [pc, #84]	; (8023af8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023aa4:	4605      	mov	r5, r0
 8023aa6:	7823      	ldrb	r3, [r4, #0]
 8023aa8:	f3bf 8f5b 	dmb	ish
 8023aac:	07da      	lsls	r2, r3, #31
 8023aae:	d40b      	bmi.n	8023ac8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023ab0:	4620      	mov	r0, r4
 8023ab2:	f007 f9fc 	bl	802aeae <__cxa_guard_acquire>
 8023ab6:	b138      	cbz	r0, 8023ac8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023ab8:	4620      	mov	r0, r4
 8023aba:	f007 fa04 	bl	802aec6 <__cxa_guard_release>
 8023abe:	4a0f      	ldr	r2, [pc, #60]	; (8023afc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023ac0:	490f      	ldr	r1, [pc, #60]	; (8023b00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023ac2:	4810      	ldr	r0, [pc, #64]	; (8023b04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023ac4:	f007 f9ec 	bl	802aea0 <__aeabi_atexit>
 8023ac8:	4c0f      	ldr	r4, [pc, #60]	; (8023b08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023aca:	7823      	ldrb	r3, [r4, #0]
 8023acc:	f3bf 8f5b 	dmb	ish
 8023ad0:	07db      	lsls	r3, r3, #31
 8023ad2:	d40b      	bmi.n	8023aec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	f007 f9ea 	bl	802aeae <__cxa_guard_acquire>
 8023ada:	b138      	cbz	r0, 8023aec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023adc:	4620      	mov	r0, r4
 8023ade:	f007 f9f2 	bl	802aec6 <__cxa_guard_release>
 8023ae2:	4a06      	ldr	r2, [pc, #24]	; (8023afc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023ae4:	4909      	ldr	r1, [pc, #36]	; (8023b0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023ae6:	480a      	ldr	r0, [pc, #40]	; (8023b10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023ae8:	f007 f9da 	bl	802aea0 <__aeabi_atexit>
 8023aec:	4b05      	ldr	r3, [pc, #20]	; (8023b04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023aee:	65ab      	str	r3, [r5, #88]	; 0x58
 8023af0:	4b07      	ldr	r3, [pc, #28]	; (8023b10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023af2:	65eb      	str	r3, [r5, #92]	; 0x5c
 8023af4:	bd38      	pop	{r3, r4, r5, pc}
 8023af6:	bf00      	nop
 8023af8:	2400b968 	.word	0x2400b968
 8023afc:	24000000 	.word	0x24000000
 8023b00:	08021723 	.word	0x08021723
 8023b04:	24000068 	.word	0x24000068
 8023b08:	2400b96c 	.word	0x2400b96c
 8023b0c:	08021721 	.word	0x08021721
 8023b10:	2400006c 	.word	0x2400006c

08023b14 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023b14:	b510      	push	{r4, lr}
 8023b16:	4604      	mov	r4, r0
 8023b18:	f7ff ff88 	bl	8023a2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023b1c:	4620      	mov	r0, r4
 8023b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b22:	f7ff bfbd 	b.w	8023aa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023b28:	b538      	push	{r3, r4, r5, lr}
 8023b2a:	4c15      	ldr	r4, [pc, #84]	; (8023b80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023b2c:	4605      	mov	r5, r0
 8023b2e:	7823      	ldrb	r3, [r4, #0]
 8023b30:	f3bf 8f5b 	dmb	ish
 8023b34:	07da      	lsls	r2, r3, #31
 8023b36:	d40b      	bmi.n	8023b50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b38:	4620      	mov	r0, r4
 8023b3a:	f007 f9b8 	bl	802aeae <__cxa_guard_acquire>
 8023b3e:	b138      	cbz	r0, 8023b50 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b40:	4620      	mov	r0, r4
 8023b42:	f007 f9c0 	bl	802aec6 <__cxa_guard_release>
 8023b46:	4a0f      	ldr	r2, [pc, #60]	; (8023b84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023b48:	490f      	ldr	r1, [pc, #60]	; (8023b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023b4a:	4810      	ldr	r0, [pc, #64]	; (8023b8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023b4c:	f007 f9a8 	bl	802aea0 <__aeabi_atexit>
 8023b50:	4c0f      	ldr	r4, [pc, #60]	; (8023b90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023b52:	7823      	ldrb	r3, [r4, #0]
 8023b54:	f3bf 8f5b 	dmb	ish
 8023b58:	07db      	lsls	r3, r3, #31
 8023b5a:	d40b      	bmi.n	8023b74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023b5c:	4620      	mov	r0, r4
 8023b5e:	f007 f9a6 	bl	802aeae <__cxa_guard_acquire>
 8023b62:	b138      	cbz	r0, 8023b74 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023b64:	4620      	mov	r0, r4
 8023b66:	f007 f9ae 	bl	802aec6 <__cxa_guard_release>
 8023b6a:	4a06      	ldr	r2, [pc, #24]	; (8023b84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023b6c:	4909      	ldr	r1, [pc, #36]	; (8023b94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023b6e:	480a      	ldr	r0, [pc, #40]	; (8023b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023b70:	f007 f996 	bl	802aea0 <__aeabi_atexit>
 8023b74:	4b05      	ldr	r3, [pc, #20]	; (8023b8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023b76:	672b      	str	r3, [r5, #112]	; 0x70
 8023b78:	4b07      	ldr	r3, [pc, #28]	; (8023b98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023b7a:	676b      	str	r3, [r5, #116]	; 0x74
 8023b7c:	bd38      	pop	{r3, r4, r5, pc}
 8023b7e:	bf00      	nop
 8023b80:	2400b960 	.word	0x2400b960
 8023b84:	24000000 	.word	0x24000000
 8023b88:	08021717 	.word	0x08021717
 8023b8c:	24000060 	.word	0x24000060
 8023b90:	2400b964 	.word	0x2400b964
 8023b94:	08021715 	.word	0x08021715
 8023b98:	24000064 	.word	0x24000064

08023b9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023b9c:	b538      	push	{r3, r4, r5, lr}
 8023b9e:	4c15      	ldr	r4, [pc, #84]	; (8023bf4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023ba0:	4605      	mov	r5, r0
 8023ba2:	7823      	ldrb	r3, [r4, #0]
 8023ba4:	f3bf 8f5b 	dmb	ish
 8023ba8:	07da      	lsls	r2, r3, #31
 8023baa:	d40b      	bmi.n	8023bc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023bac:	4620      	mov	r0, r4
 8023bae:	f007 f97e 	bl	802aeae <__cxa_guard_acquire>
 8023bb2:	b138      	cbz	r0, 8023bc4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023bb4:	4620      	mov	r0, r4
 8023bb6:	f007 f986 	bl	802aec6 <__cxa_guard_release>
 8023bba:	4a0f      	ldr	r2, [pc, #60]	; (8023bf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023bbc:	490f      	ldr	r1, [pc, #60]	; (8023bfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023bbe:	4810      	ldr	r0, [pc, #64]	; (8023c00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023bc0:	f007 f96e 	bl	802aea0 <__aeabi_atexit>
 8023bc4:	4c0f      	ldr	r4, [pc, #60]	; (8023c04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023bc6:	7823      	ldrb	r3, [r4, #0]
 8023bc8:	f3bf 8f5b 	dmb	ish
 8023bcc:	07db      	lsls	r3, r3, #31
 8023bce:	d40b      	bmi.n	8023be8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023bd0:	4620      	mov	r0, r4
 8023bd2:	f007 f96c 	bl	802aeae <__cxa_guard_acquire>
 8023bd6:	b138      	cbz	r0, 8023be8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023bd8:	4620      	mov	r0, r4
 8023bda:	f007 f974 	bl	802aec6 <__cxa_guard_release>
 8023bde:	4a06      	ldr	r2, [pc, #24]	; (8023bf8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023be0:	4909      	ldr	r1, [pc, #36]	; (8023c08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023be2:	480a      	ldr	r0, [pc, #40]	; (8023c0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023be4:	f007 f95c 	bl	802aea0 <__aeabi_atexit>
 8023be8:	4b05      	ldr	r3, [pc, #20]	; (8023c00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023bea:	66ab      	str	r3, [r5, #104]	; 0x68
 8023bec:	4b07      	ldr	r3, [pc, #28]	; (8023c0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023bee:	66eb      	str	r3, [r5, #108]	; 0x6c
 8023bf0:	bd38      	pop	{r3, r4, r5, pc}
 8023bf2:	bf00      	nop
 8023bf4:	2400b958 	.word	0x2400b958
 8023bf8:	24000000 	.word	0x24000000
 8023bfc:	0802171b 	.word	0x0802171b
 8023c00:	24000058 	.word	0x24000058
 8023c04:	2400b95c 	.word	0x2400b95c
 8023c08:	08021719 	.word	0x08021719
 8023c0c:	2400005c 	.word	0x2400005c

08023c10 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023c10:	b510      	push	{r4, lr}
 8023c12:	4604      	mov	r4, r0
 8023c14:	f7ff ff88 	bl	8023b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023c18:	4620      	mov	r0, r4
 8023c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c1e:	f7ff bfbd 	b.w	8023b9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023c22 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023c22:	b510      	push	{r4, lr}
 8023c24:	4604      	mov	r4, r0
 8023c26:	f7ff fff3 	bl	8023c10 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023c2a:	4620      	mov	r0, r4
 8023c2c:	f7ff ff72 	bl	8023b14 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023c30:	4620      	mov	r0, r4
 8023c32:	f7ff fdf9 	bl	8023828 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023c36:	4620      	mov	r0, r4
 8023c38:	f7ff fcfa 	bl	8023630 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023c3c:	4620      	mov	r0, r4
 8023c3e:	f7ff fd75 	bl	802372c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023c42:	4620      	mov	r0, r4
 8023c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c48:	f7ff bee0 	b.w	8023a0c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023c4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c50:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8023c54:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023c58:	f1be 0f00 	cmp.w	lr, #0
 8023c5c:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8023c60:	fb0e 4708 	mla	r7, lr, r8, r4
 8023c64:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8023c68:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8023c6c:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8023c70:	eb02 0a07 	add.w	sl, r2, r7
 8023c74:	8808      	ldrh	r0, [r1, #0]
 8023c76:	db37      	blt.n	8023ce8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023c78:	45f3      	cmp	fp, lr
 8023c7a:	dd35      	ble.n	8023ce8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023c7c:	2c00      	cmp	r4, #0
 8023c7e:	db31      	blt.n	8023ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023c80:	45a0      	cmp	r8, r4
 8023c82:	dd2f      	ble.n	8023ce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023c84:	5dd2      	ldrb	r2, [r2, r7]
 8023c86:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8023c8a:	1c62      	adds	r2, r4, #1
 8023c8c:	d42f      	bmi.n	8023cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023c8e:	4590      	cmp	r8, r2
 8023c90:	dd2d      	ble.n	8023cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023c92:	b366      	cbz	r6, 8023cee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023c94:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023c98:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023c9c:	f11e 0e01 	adds.w	lr, lr, #1
 8023ca0:	d429      	bmi.n	8023cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023ca2:	45f3      	cmp	fp, lr
 8023ca4:	dd27      	ble.n	8023cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023ca6:	f1bc 0f00 	cmp.w	ip, #0
 8023caa:	f000 80a1 	beq.w	8023df0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8023cae:	2c00      	cmp	r4, #0
 8023cb0:	db1f      	blt.n	8023cf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023cb2:	45a0      	cmp	r8, r4
 8023cb4:	dd1d      	ble.n	8023cf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023cb6:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8023cba:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8023cbe:	3401      	adds	r4, #1
 8023cc0:	d41c      	bmi.n	8023cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023cc2:	45a0      	cmp	r8, r4
 8023cc4:	dd1a      	ble.n	8023cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023cc6:	b1de      	cbz	r6, 8023d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8023cc8:	44d0      	add	r8, sl
 8023cca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023cce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023cd2:	2e0f      	cmp	r6, #15
 8023cd4:	d915      	bls.n	8023d02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8023cd6:	4b49      	ldr	r3, [pc, #292]	; (8023dfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8023cd8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023cdc:	4a48      	ldr	r2, [pc, #288]	; (8023e00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8023cde:	4849      	ldr	r0, [pc, #292]	; (8023e04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8023ce0:	f007 f912 	bl	802af08 <__assert_func>
 8023ce4:	4681      	mov	r9, r0
 8023ce6:	e7d0      	b.n	8023c8a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8023ce8:	4607      	mov	r7, r0
 8023cea:	4681      	mov	r9, r0
 8023cec:	e7d6      	b.n	8023c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023cee:	4607      	mov	r7, r0
 8023cf0:	e7d4      	b.n	8023c9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023cf2:	4686      	mov	lr, r0
 8023cf4:	e7e3      	b.n	8023cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8023cf6:	4603      	mov	r3, r0
 8023cf8:	4686      	mov	lr, r0
 8023cfa:	e7ea      	b.n	8023cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	e7e8      	b.n	8023cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023d00:	4603      	mov	r3, r0
 8023d02:	f1bc 0f0f 	cmp.w	ip, #15
 8023d06:	d8e6      	bhi.n	8023cd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023d08:	fb16 f80c 	smulbb	r8, r6, ip
 8023d0c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8023d10:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023d14:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8023d18:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8023d1c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8023d20:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8023d24:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023d28:	ea44 0909 	orr.w	r9, r4, r9
 8023d2c:	f1cc 0410 	rsb	r4, ip, #16
 8023d30:	041a      	lsls	r2, r3, #16
 8023d32:	ea4a 0707 	orr.w	r7, sl, r7
 8023d36:	1ba4      	subs	r4, r4, r6
 8023d38:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023d3c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023d40:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023d44:	4377      	muls	r7, r6
 8023d46:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023d4a:	4313      	orrs	r3, r2
 8023d4c:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8023d50:	fb04 7409 	mla	r4, r4, r9, r7
 8023d54:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8023d58:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8023d5c:	b2af      	uxth	r7, r5
 8023d5e:	fb08 4303 	mla	r3, r8, r3, r4
 8023d62:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8023d66:	43ed      	mvns	r5, r5
 8023d68:	10c6      	asrs	r6, r0, #3
 8023d6a:	4322      	orrs	r2, r4
 8023d6c:	b2ed      	uxtb	r5, r5
 8023d6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8023d76:	fb16 f605 	smulbb	r6, r6, r5
 8023d7a:	0d53      	lsrs	r3, r2, #21
 8023d7c:	0952      	lsrs	r2, r2, #5
 8023d7e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023d82:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023d86:	431a      	orrs	r2, r3
 8023d88:	b293      	uxth	r3, r2
 8023d8a:	1202      	asrs	r2, r0, #8
 8023d8c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023d90:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8023d94:	00dc      	lsls	r4, r3, #3
 8023d96:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023d9a:	fb12 f205 	smulbb	r2, r2, r5
 8023d9e:	b2e4      	uxtb	r4, r4
 8023da0:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023da4:	10da      	asrs	r2, r3, #3
 8023da6:	00c3      	lsls	r3, r0, #3
 8023da8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023dac:	fa1f fc8c 	uxth.w	ip, ip
 8023db0:	b2db      	uxtb	r3, r3
 8023db2:	fb02 6207 	mla	r2, r2, r7, r6
 8023db6:	fb13 f305 	smulbb	r3, r3, r5
 8023dba:	b296      	uxth	r6, r2
 8023dbc:	fb04 3307 	mla	r3, r4, r7, r3
 8023dc0:	b29a      	uxth	r2, r3
 8023dc2:	f10c 0301 	add.w	r3, ip, #1
 8023dc6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023dca:	1c53      	adds	r3, r2, #1
 8023dcc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023dd0:	1c72      	adds	r2, r6, #1
 8023dd2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023dd6:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8023dda:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023dde:	0952      	lsrs	r2, r2, #5
 8023de0:	ea43 030c 	orr.w	r3, r3, ip
 8023de4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023de8:	4313      	orrs	r3, r2
 8023dea:	800b      	strh	r3, [r1, #0]
 8023dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023df0:	2e0f      	cmp	r6, #15
 8023df2:	f63f af70 	bhi.w	8023cd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023df6:	4603      	mov	r3, r0
 8023df8:	4686      	mov	lr, r0
 8023dfa:	e785      	b.n	8023d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023dfc:	08030159 	.word	0x08030159
 8023e00:	080307cf 	.word	0x080307cf
 8023e04:	080301dd 	.word	0x080301dd

08023e08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e0c:	ed2d 8b08 	vpush	{d8-d11}
 8023e10:	b099      	sub	sp, #100	; 0x64
 8023e12:	eeb0 aa40 	vmov.f32	s20, s0
 8023e16:	eef0 9a60 	vmov.f32	s19, s1
 8023e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8023e1c:	eeb0 9a41 	vmov.f32	s18, s2
 8023e20:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8023e22:	eeb0 8a62 	vmov.f32	s16, s5
 8023e26:	9309      	str	r3, [sp, #36]	; 0x24
 8023e28:	eef0 8a43 	vmov.f32	s17, s6
 8023e2c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8023e30:	eef0 ba44 	vmov.f32	s23, s8
 8023e34:	9016      	str	r0, [sp, #88]	; 0x58
 8023e36:	eeb0 ba64 	vmov.f32	s22, s9
 8023e3a:	930d      	str	r3, [sp, #52]	; 0x34
 8023e3c:	eef0 aa45 	vmov.f32	s21, s10
 8023e40:	6850      	ldr	r0, [r2, #4]
 8023e42:	910c      	str	r1, [sp, #48]	; 0x30
 8023e44:	6812      	ldr	r2, [r2, #0]
 8023e46:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8023e4a:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8023e4e:	fb00 1303 	mla	r3, r0, r3, r1
 8023e52:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023e56:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023e58:	681b      	ldr	r3, [r3, #0]
 8023e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8023e5c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023e5e:	685e      	ldr	r6, [r3, #4]
 8023e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023e62:	3604      	adds	r6, #4
 8023e64:	43db      	mvns	r3, r3
 8023e66:	b2db      	uxtb	r3, r3
 8023e68:	930a      	str	r3, [sp, #40]	; 0x28
 8023e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	dc03      	bgt.n	8023e78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023e72:	2b00      	cmp	r3, #0
 8023e74:	f340 8225 	ble.w	80242c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023e78:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023e7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023e7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023e82:	1e48      	subs	r0, r1, #1
 8023e84:	1e57      	subs	r7, r2, #1
 8023e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	f340 80e3 	ble.w	8024054 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023e8e:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023e92:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023e96:	d406      	bmi.n	8023ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023e98:	4584      	cmp	ip, r0
 8023e9a:	da04      	bge.n	8023ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023e9c:	2b00      	cmp	r3, #0
 8023e9e:	db02      	blt.n	8023ea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023ea0:	42bb      	cmp	r3, r7
 8023ea2:	f2c0 80d8 	blt.w	8024056 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023ea6:	f11c 0c01 	adds.w	ip, ip, #1
 8023eaa:	f100 80c9 	bmi.w	8024040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023eae:	4561      	cmp	r1, ip
 8023eb0:	f2c0 80c6 	blt.w	8024040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023eb4:	3301      	adds	r3, #1
 8023eb6:	f100 80c3 	bmi.w	8024040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023eba:	429a      	cmp	r2, r3
 8023ebc:	f2c0 80c0 	blt.w	8024040 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023ec0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8023ec4:	4647      	mov	r7, r8
 8023ec6:	f1bb 0f00 	cmp.w	fp, #0
 8023eca:	f340 80e3 	ble.w	8024094 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023ece:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8023ed0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023ed4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8023ed6:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023eda:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023ede:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023ee2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023ee6:	689b      	ldr	r3, [r3, #8]
 8023ee8:	f100 8121 	bmi.w	802412e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023eec:	f103 39ff 	add.w	r9, r3, #4294967295
 8023ef0:	454a      	cmp	r2, r9
 8023ef2:	f280 811c 	bge.w	802412e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023ef6:	f1bc 0f00 	cmp.w	ip, #0
 8023efa:	f2c0 8118 	blt.w	802412e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023efe:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023f02:	45cc      	cmp	ip, r9
 8023f04:	f280 8113 	bge.w	802412e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023f08:	b21b      	sxth	r3, r3
 8023f0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023f0c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023f10:	eb04 0902 	add.w	r9, r4, r2
 8023f14:	5ca2      	ldrb	r2, [r4, r2]
 8023f16:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023f1a:	2800      	cmp	r0, #0
 8023f1c:	f000 80fe 	beq.w	802411c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023f20:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023f24:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023f28:	9211      	str	r2, [sp, #68]	; 0x44
 8023f2a:	b151      	cbz	r1, 8023f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023f2c:	eb09 0203 	add.w	r2, r9, r3
 8023f30:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023f34:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023f38:	930f      	str	r3, [sp, #60]	; 0x3c
 8023f3a:	7853      	ldrb	r3, [r2, #1]
 8023f3c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023f40:	9312      	str	r3, [sp, #72]	; 0x48
 8023f42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023f44:	fb10 f201 	smulbb	r2, r0, r1
 8023f48:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023f4a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023f4e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023f52:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8023f56:	10d2      	asrs	r2, r2, #3
 8023f58:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023f5c:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023f60:	ea4c 0c03 	orr.w	ip, ip, r3
 8023f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023f66:	041b      	lsls	r3, r3, #16
 8023f68:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023f6c:	4323      	orrs	r3, r4
 8023f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023f70:	4353      	muls	r3, r2
 8023f72:	fb09 330c 	mla	r3, r9, ip, r3
 8023f76:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023f7a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023f7e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023f82:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023f86:	f1c1 0c10 	rsb	ip, r1, #16
 8023f8a:	ebac 0c00 	sub.w	ip, ip, r0
 8023f8e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023f92:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023f96:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023f9c:	0418      	lsls	r0, r3, #16
 8023f9e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023fa2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023fa6:	4318      	orrs	r0, r3
 8023fa8:	fb02 c200 	mla	r2, r2, r0, ip
 8023fac:	8838      	ldrh	r0, [r7, #0]
 8023fae:	0d53      	lsrs	r3, r2, #21
 8023fb0:	0952      	lsrs	r2, r2, #5
 8023fb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023fb6:	1201      	asrs	r1, r0, #8
 8023fb8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023fbc:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8023fc0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023fc4:	00c0      	lsls	r0, r0, #3
 8023fc6:	431a      	orrs	r2, r3
 8023fc8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8023fcc:	fb11 f104 	smulbb	r1, r1, r4
 8023fd0:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8023fd4:	b292      	uxth	r2, r2
 8023fd6:	fb1e fe04 	smulbb	lr, lr, r4
 8023fda:	b2c0      	uxtb	r0, r0
 8023fdc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8023fe0:	fb10 f004 	smulbb	r0, r0, r4
 8023fe4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023fe8:	fb0c 1c03 	mla	ip, ip, r3, r1
 8023fec:	10d1      	asrs	r1, r2, #3
 8023fee:	00d2      	lsls	r2, r2, #3
 8023ff0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023ff4:	fa1f fc8c 	uxth.w	ip, ip
 8023ff8:	b2d2      	uxtb	r2, r2
 8023ffa:	fb01 e103 	mla	r1, r1, r3, lr
 8023ffe:	fb02 0303 	mla	r3, r2, r3, r0
 8024002:	b289      	uxth	r1, r1
 8024004:	b29a      	uxth	r2, r3
 8024006:	f10c 0301 	add.w	r3, ip, #1
 802400a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802400e:	1c53      	adds	r3, r2, #1
 8024010:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024014:	1c4a      	adds	r2, r1, #1
 8024016:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802401a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802401e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024022:	0949      	lsrs	r1, r1, #5
 8024024:	ea43 030c 	orr.w	r3, r3, ip
 8024028:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802402c:	430b      	orrs	r3, r1
 802402e:	803b      	strh	r3, [r7, #0]
 8024030:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024032:	3702      	adds	r7, #2
 8024034:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024038:	449a      	add	sl, r3
 802403a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802403c:	441d      	add	r5, r3
 802403e:	e742      	b.n	8023ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024040:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8024042:	f108 0802 	add.w	r8, r8, #2
 8024046:	449a      	add	sl, r3
 8024048:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802404a:	441d      	add	r5, r3
 802404c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802404e:	3b01      	subs	r3, #1
 8024050:	9309      	str	r3, [sp, #36]	; 0x24
 8024052:	e718      	b.n	8023e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8024054:	d023      	beq.n	802409e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8024056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024058:	982d      	ldr	r0, [sp, #180]	; 0xb4
 802405a:	3b01      	subs	r3, #1
 802405c:	fb00 a003 	mla	r0, r0, r3, sl
 8024060:	1400      	asrs	r0, r0, #16
 8024062:	f53f af2d 	bmi.w	8023ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024066:	3901      	subs	r1, #1
 8024068:	4288      	cmp	r0, r1
 802406a:	f6bf af29 	bge.w	8023ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802406e:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8024070:	fb01 5303 	mla	r3, r1, r3, r5
 8024074:	141b      	asrs	r3, r3, #16
 8024076:	f53f af23 	bmi.w	8023ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 802407a:	3a01      	subs	r2, #1
 802407c:	4293      	cmp	r3, r2
 802407e:	f6bf af1f 	bge.w	8023ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8024082:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8024086:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802408a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 802408e:	f1be 0f00 	cmp.w	lr, #0
 8024092:	dc6c      	bgt.n	802416e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8024094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024096:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802409a:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 802409e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80240a0:	2b00      	cmp	r3, #0
 80240a2:	f340 810e 	ble.w	80242c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 80240a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80240ac:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80240b0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80240b4:	eef0 6a48 	vmov.f32	s13, s16
 80240b8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80240bc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80240c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240c4:	ee16 aa90 	vmov	sl, s13
 80240c8:	eef0 6a68 	vmov.f32	s13, s17
 80240cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80240d0:	ee16 5a90 	vmov	r5, s13
 80240d4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80240d8:	ee69 7a27 	vmul.f32	s15, s18, s15
 80240dc:	ee37 8a48 	vsub.f32	s16, s14, s16
 80240e0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80240e4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80240e8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80240ec:	ee18 2a10 	vmov	r2, s16
 80240f0:	eeb0 8a47 	vmov.f32	s16, s14
 80240f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80240f8:	ee18 2a90 	vmov	r2, s17
 80240fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80240fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024100:	eef0 8a67 	vmov.f32	s17, s15
 8024104:	fb92 f3f3 	sdiv	r3, r2, r3
 8024108:	932e      	str	r3, [sp, #184]	; 0xb8
 802410a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802410c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802410e:	3b01      	subs	r3, #1
 8024110:	930c      	str	r3, [sp, #48]	; 0x30
 8024112:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024114:	bf08      	it	eq
 8024116:	4613      	moveq	r3, r2
 8024118:	9309      	str	r3, [sp, #36]	; 0x24
 802411a:	e6a6      	b.n	8023e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802411c:	2900      	cmp	r1, #0
 802411e:	f43f af10 	beq.w	8023f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024122:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024126:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802412a:	930f      	str	r3, [sp, #60]	; 0x3c
 802412c:	e709      	b.n	8023f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802412e:	f112 0901 	adds.w	r9, r2, #1
 8024132:	f53f af7d 	bmi.w	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024136:	454b      	cmp	r3, r9
 8024138:	f6ff af7a 	blt.w	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802413c:	f11c 0901 	adds.w	r9, ip, #1
 8024140:	f53f af76 	bmi.w	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024144:	45ce      	cmp	lr, r9
 8024146:	f6ff af73 	blt.w	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802414a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802414c:	b21b      	sxth	r3, r3
 802414e:	9202      	str	r2, [sp, #8]
 8024150:	fa0f f28e 	sxth.w	r2, lr
 8024154:	9300      	str	r3, [sp, #0]
 8024156:	4633      	mov	r3, r6
 8024158:	9201      	str	r2, [sp, #4]
 802415a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802415c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024160:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024164:	4639      	mov	r1, r7
 8024166:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024168:	f7ff fd70 	bl	8023c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 802416c:	e760      	b.n	8024030 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802416e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8024170:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024174:	1429      	asrs	r1, r5, #16
 8024176:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024178:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802417c:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024180:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024184:	fb03 2101 	mla	r1, r3, r1, r2
 8024188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802418a:	440a      	add	r2, r1
 802418c:	5c61      	ldrb	r1, [r4, r1]
 802418e:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024192:	f1bc 0f00 	cmp.w	ip, #0
 8024196:	f000 808c 	beq.w	80242b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 802419a:	7857      	ldrb	r7, [r2, #1]
 802419c:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80241a0:	9413      	str	r4, [sp, #76]	; 0x4c
 80241a2:	b140      	cbz	r0, 80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80241a4:	18d7      	adds	r7, r2, r3
 80241a6:	5cd3      	ldrb	r3, [r2, r3]
 80241a8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80241ac:	9310      	str	r3, [sp, #64]	; 0x40
 80241ae:	787b      	ldrb	r3, [r7, #1]
 80241b0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80241b4:	9314      	str	r3, [sp, #80]	; 0x50
 80241b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80241b8:	fb1c f200 	smulbb	r2, ip, r0
 80241bc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80241be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80241c2:	041f      	lsls	r7, r3, #16
 80241c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80241c8:	10d2      	asrs	r2, r2, #3
 80241ca:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80241ce:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80241d2:	431f      	orrs	r7, r3
 80241d4:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80241d8:	9317      	str	r3, [sp, #92]	; 0x5c
 80241da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80241dc:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80241de:	041b      	lsls	r3, r3, #16
 80241e0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80241e4:	ea43 030b 	orr.w	r3, r3, fp
 80241e8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80241ec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80241f0:	4353      	muls	r3, r2
 80241f2:	fb04 3707 	mla	r7, r4, r7, r3
 80241f6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80241fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80241fc:	ea43 0b01 	orr.w	fp, r3, r1
 8024200:	f1c0 0110 	rsb	r1, r0, #16
 8024204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024206:	eba1 0c0c 	sub.w	ip, r1, ip
 802420a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802420e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024212:	fb0c 770b 	mla	r7, ip, fp, r7
 8024216:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802421a:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802421e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024222:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024226:	fb02 770c 	mla	r7, r2, ip, r7
 802422a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802422c:	0d79      	lsrs	r1, r7, #21
 802422e:	8812      	ldrh	r2, [r2, #0]
 8024230:	097f      	lsrs	r7, r7, #5
 8024232:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8024236:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802423a:	430f      	orrs	r7, r1
 802423c:	1211      	asrs	r1, r2, #8
 802423e:	b2bb      	uxth	r3, r7
 8024240:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024244:	10d7      	asrs	r7, r2, #3
 8024246:	fb11 f104 	smulbb	r1, r1, r4
 802424a:	1218      	asrs	r0, r3, #8
 802424c:	00d2      	lsls	r2, r2, #3
 802424e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8024252:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024256:	fb17 f704 	smulbb	r7, r7, r4
 802425a:	b2d2      	uxtb	r2, r2
 802425c:	fb00 1009 	mla	r0, r0, r9, r1
 8024260:	10d9      	asrs	r1, r3, #3
 8024262:	fb12 f204 	smulbb	r2, r2, r4
 8024266:	00db      	lsls	r3, r3, #3
 8024268:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802426c:	b280      	uxth	r0, r0
 802426e:	b2db      	uxtb	r3, r3
 8024270:	fb01 7109 	mla	r1, r1, r9, r7
 8024274:	fb03 2309 	mla	r3, r3, r9, r2
 8024278:	1c42      	adds	r2, r0, #1
 802427a:	b289      	uxth	r1, r1
 802427c:	b29b      	uxth	r3, r3
 802427e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8024282:	1c4f      	adds	r7, r1, #1
 8024284:	1c5a      	adds	r2, r3, #1
 8024286:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802428a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802428e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8024292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024294:	0949      	lsrs	r1, r1, #5
 8024296:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802429a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802429e:	4310      	orrs	r0, r2
 80242a0:	4308      	orrs	r0, r1
 80242a2:	f823 0b02 	strh.w	r0, [r3], #2
 80242a6:	930e      	str	r3, [sp, #56]	; 0x38
 80242a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80242aa:	449a      	add	sl, r3
 80242ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80242ae:	441d      	add	r5, r3
 80242b0:	e6ed      	b.n	802408e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80242b2:	2800      	cmp	r0, #0
 80242b4:	f43f af7f 	beq.w	80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80242b8:	5cd3      	ldrb	r3, [r2, r3]
 80242ba:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80242be:	9310      	str	r3, [sp, #64]	; 0x40
 80242c0:	e779      	b.n	80241b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80242c2:	b019      	add	sp, #100	; 0x64
 80242c4:	ecbd 8b08 	vpop	{d8-d11}
 80242c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080242cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80242cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80242d0:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80242d4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80242d8:	2e00      	cmp	r6, #0
 80242da:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80242de:	fb06 570e 	mla	r7, r6, lr, r5
 80242e2:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80242e6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80242ea:	eb02 0807 	add.w	r8, r2, r7
 80242ee:	8808      	ldrh	r0, [r1, #0]
 80242f0:	db38      	blt.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80242f2:	45b1      	cmp	r9, r6
 80242f4:	dd36      	ble.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80242f6:	2d00      	cmp	r5, #0
 80242f8:	db32      	blt.n	8024360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80242fa:	45ae      	cmp	lr, r5
 80242fc:	dd30      	ble.n	8024360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 80242fe:	5dd2      	ldrb	r2, [r2, r7]
 8024300:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024304:	1c6a      	adds	r2, r5, #1
 8024306:	d430      	bmi.n	802436a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024308:	4596      	cmp	lr, r2
 802430a:	dd2e      	ble.n	802436a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802430c:	b36c      	cbz	r4, 802436a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802430e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024312:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024316:	3601      	adds	r6, #1
 8024318:	d42b      	bmi.n	8024372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802431a:	45b1      	cmp	r9, r6
 802431c:	dd29      	ble.n	8024372 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802431e:	f1bc 0f00 	cmp.w	ip, #0
 8024322:	d028      	beq.n	8024376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024324:	2d00      	cmp	r5, #0
 8024326:	db22      	blt.n	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024328:	45ae      	cmp	lr, r5
 802432a:	dd20      	ble.n	802436e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 802432c:	f818 600e 	ldrb.w	r6, [r8, lr]
 8024330:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024334:	3501      	adds	r5, #1
 8024336:	d407      	bmi.n	8024348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024338:	45ae      	cmp	lr, r5
 802433a:	dd05      	ble.n	8024348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802433c:	b134      	cbz	r4, 802434c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802433e:	44c6      	add	lr, r8
 8024340:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024344:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8024348:	2c0f      	cmp	r4, #15
 802434a:	d802      	bhi.n	8024352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802434c:	f1bc 0f0f 	cmp.w	ip, #15
 8024350:	d914      	bls.n	802437c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8024352:	4b26      	ldr	r3, [pc, #152]	; (80243ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8024354:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8024358:	4a25      	ldr	r2, [pc, #148]	; (80243f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 802435a:	4826      	ldr	r0, [pc, #152]	; (80243f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 802435c:	f006 fdd4 	bl	802af08 <__assert_func>
 8024360:	4607      	mov	r7, r0
 8024362:	e7cf      	b.n	8024304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8024364:	4602      	mov	r2, r0
 8024366:	4607      	mov	r7, r0
 8024368:	e7d5      	b.n	8024316 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802436a:	4602      	mov	r2, r0
 802436c:	e7d3      	b.n	8024316 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802436e:	4606      	mov	r6, r0
 8024370:	e7e0      	b.n	8024334 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8024372:	4606      	mov	r6, r0
 8024374:	e7e8      	b.n	8024348 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024376:	2c0f      	cmp	r4, #15
 8024378:	d8eb      	bhi.n	8024352 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802437a:	4606      	mov	r6, r0
 802437c:	fb14 f30c 	smulbb	r3, r4, ip
 8024380:	043d      	lsls	r5, r7, #16
 8024382:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8024386:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802438a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802438e:	10db      	asrs	r3, r3, #3
 8024390:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024394:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024398:	432f      	orrs	r7, r5
 802439a:	f1cc 0510 	rsb	r5, ip, #16
 802439e:	ea4e 0202 	orr.w	r2, lr, r2
 80243a2:	1b2d      	subs	r5, r5, r4
 80243a4:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80243a8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80243ac:	4354      	muls	r4, r2
 80243ae:	fb05 4507 	mla	r5, r5, r7, r4
 80243b2:	0404      	lsls	r4, r0, #16
 80243b4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80243b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80243bc:	4320      	orrs	r0, r4
 80243be:	fb03 5400 	mla	r4, r3, r0, r5
 80243c2:	0430      	lsls	r0, r6, #16
 80243c4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80243c8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80243cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80243d0:	4330      	orrs	r0, r6
 80243d2:	fb03 4000 	mla	r0, r3, r0, r4
 80243d6:	0d43      	lsrs	r3, r0, #21
 80243d8:	0940      	lsrs	r0, r0, #5
 80243da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80243de:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80243e2:	4318      	orrs	r0, r3
 80243e4:	8008      	strh	r0, [r1, #0]
 80243e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80243ea:	bf00      	nop
 80243ec:	08030159 	.word	0x08030159
 80243f0:	080307cf 	.word	0x080307cf
 80243f4:	080301dd 	.word	0x080301dd

080243f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80243f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243fc:	ed2d 8b0a 	vpush	{d8-d12}
 8024400:	b093      	sub	sp, #76	; 0x4c
 8024402:	eeb0 aa40 	vmov.f32	s20, s0
 8024406:	eef0 9a60 	vmov.f32	s19, s1
 802440a:	920f      	str	r2, [sp, #60]	; 0x3c
 802440c:	eeb0 9a41 	vmov.f32	s18, s2
 8024410:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8024412:	eeb0 8a62 	vmov.f32	s16, s5
 8024416:	9010      	str	r0, [sp, #64]	; 0x40
 8024418:	eef0 8a43 	vmov.f32	s17, s6
 802441c:	6850      	ldr	r0, [r2, #4]
 802441e:	eeb0 ca44 	vmov.f32	s24, s8
 8024422:	9108      	str	r1, [sp, #32]
 8024424:	eef0 ba64 	vmov.f32	s23, s9
 8024428:	9306      	str	r3, [sp, #24]
 802442a:	eeb0 ba45 	vmov.f32	s22, s10
 802442e:	6812      	ldr	r2, [r2, #0]
 8024430:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8024434:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8024438:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802443c:	fb00 1303 	mla	r3, r0, r3, r1
 8024440:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8024444:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024446:	681b      	ldr	r3, [r3, #0]
 8024448:	9307      	str	r3, [sp, #28]
 802444a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802444c:	685f      	ldr	r7, [r3, #4]
 802444e:	3704      	adds	r7, #4
 8024450:	9b08      	ldr	r3, [sp, #32]
 8024452:	2b00      	cmp	r3, #0
 8024454:	dc03      	bgt.n	802445e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8024456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024458:	2b00      	cmp	r3, #0
 802445a:	f340 81b2 	ble.w	80247c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802445e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024460:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024464:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024468:	1e48      	subs	r0, r1, #1
 802446a:	f102 3cff 	add.w	ip, r2, #4294967295
 802446e:	9b06      	ldr	r3, [sp, #24]
 8024470:	2b00      	cmp	r3, #0
 8024472:	f340 80a9 	ble.w	80245c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8024476:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802447a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802447e:	d406      	bmi.n	802448e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024480:	4586      	cmp	lr, r0
 8024482:	da04      	bge.n	802448e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024484:	2b00      	cmp	r3, #0
 8024486:	db02      	blt.n	802448e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8024488:	4563      	cmp	r3, ip
 802448a:	f2c0 809e 	blt.w	80245ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802448e:	f11e 0e01 	adds.w	lr, lr, #1
 8024492:	f100 808f 	bmi.w	80245b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024496:	4571      	cmp	r1, lr
 8024498:	f2c0 808c 	blt.w	80245b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 802449c:	3301      	adds	r3, #1
 802449e:	f100 8089 	bmi.w	80245b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80244a2:	429a      	cmp	r2, r3
 80244a4:	f2c0 8086 	blt.w	80245b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80244a8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80244ac:	46c8      	mov	r8, r9
 80244ae:	f1bb 0f00 	cmp.w	fp, #0
 80244b2:	f340 80a6 	ble.w	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80244b6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80244b8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80244bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80244be:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80244c2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80244c6:	1422      	asrs	r2, r4, #16
 80244c8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80244cc:	689b      	ldr	r3, [r3, #8]
 80244ce:	f100 80e3 	bmi.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80244d2:	f103 3aff 	add.w	sl, r3, #4294967295
 80244d6:	4552      	cmp	r2, sl
 80244d8:	f280 80de 	bge.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80244dc:	f1bc 0f00 	cmp.w	ip, #0
 80244e0:	f2c0 80da 	blt.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80244e4:	f10e 3aff 	add.w	sl, lr, #4294967295
 80244e8:	45d4      	cmp	ip, sl
 80244ea:	f280 80d5 	bge.w	8024698 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80244ee:	b21b      	sxth	r3, r3
 80244f0:	9d07      	ldr	r5, [sp, #28]
 80244f2:	fb0c 2203 	mla	r2, ip, r3, r2
 80244f6:	eb05 0a02 	add.w	sl, r5, r2
 80244fa:	5caa      	ldrb	r2, [r5, r2]
 80244fc:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024500:	2800      	cmp	r0, #0
 8024502:	f000 80c0 	beq.w	8024686 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024506:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802450a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802450e:	920b      	str	r2, [sp, #44]	; 0x2c
 8024510:	b151      	cbz	r1, 8024528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024512:	eb0a 0203 	add.w	r2, sl, r3
 8024516:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802451a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802451e:	9309      	str	r3, [sp, #36]	; 0x24
 8024520:	7853      	ldrb	r3, [r2, #1]
 8024522:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024526:	930c      	str	r3, [sp, #48]	; 0x30
 8024528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802452a:	fb10 f201 	smulbb	r2, r0, r1
 802452e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024530:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024534:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024538:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802453c:	10d2      	asrs	r2, r2, #3
 802453e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024542:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8024546:	ea4c 0c03 	orr.w	ip, ip, r3
 802454a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802454c:	041b      	lsls	r3, r3, #16
 802454e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8024552:	432b      	orrs	r3, r5
 8024554:	4353      	muls	r3, r2
 8024556:	fb0a 330c 	mla	r3, sl, ip, r3
 802455a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802455e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024562:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8024566:	ea4c 0e0e 	orr.w	lr, ip, lr
 802456a:	f1c1 0c10 	rsb	ip, r1, #16
 802456e:	ebac 0c00 	sub.w	ip, ip, r0
 8024572:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024576:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802457a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802457e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024580:	0418      	lsls	r0, r3, #16
 8024582:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024586:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802458a:	4318      	orrs	r0, r3
 802458c:	fb02 c200 	mla	r2, r2, r0, ip
 8024590:	0d53      	lsrs	r3, r2, #21
 8024592:	0952      	lsrs	r2, r2, #5
 8024594:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024598:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802459c:	431a      	orrs	r2, r3
 802459e:	f8a8 2000 	strh.w	r2, [r8]
 80245a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80245a4:	f108 0802 	add.w	r8, r8, #2
 80245a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80245ac:	441c      	add	r4, r3
 80245ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80245b0:	441e      	add	r6, r3
 80245b2:	e77c      	b.n	80244ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80245b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80245b6:	f109 0902 	add.w	r9, r9, #2
 80245ba:	441c      	add	r4, r3
 80245bc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80245be:	441e      	add	r6, r3
 80245c0:	9b06      	ldr	r3, [sp, #24]
 80245c2:	3b01      	subs	r3, #1
 80245c4:	9306      	str	r3, [sp, #24]
 80245c6:	e752      	b.n	802446e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80245c8:	d020      	beq.n	802460c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80245ca:	9b06      	ldr	r3, [sp, #24]
 80245cc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80245ce:	3b01      	subs	r3, #1
 80245d0:	fb00 4003 	mla	r0, r0, r3, r4
 80245d4:	1400      	asrs	r0, r0, #16
 80245d6:	f53f af67 	bmi.w	80244a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80245da:	3901      	subs	r1, #1
 80245dc:	4288      	cmp	r0, r1
 80245de:	f6bf af63 	bge.w	80244a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80245e2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80245e4:	fb01 6303 	mla	r3, r1, r3, r6
 80245e8:	141b      	asrs	r3, r3, #16
 80245ea:	f53f af5d 	bmi.w	80244a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80245ee:	3a01      	subs	r2, #1
 80245f0:	4293      	cmp	r3, r2
 80245f2:	f6bf af59 	bge.w	80244a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80245f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80245fa:	46ca      	mov	sl, r9
 80245fc:	f1b8 0f00 	cmp.w	r8, #0
 8024600:	dc67      	bgt.n	80246d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8024602:	9b06      	ldr	r3, [sp, #24]
 8024604:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024608:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802460c:	9b08      	ldr	r3, [sp, #32]
 802460e:	2b00      	cmp	r3, #0
 8024610:	f340 80d7 	ble.w	80247c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024614:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802461a:	ee79 9aab 	vadd.f32	s19, s19, s23
 802461e:	eef0 6a48 	vmov.f32	s13, s16
 8024622:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024626:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802462a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802462e:	ee16 4a90 	vmov	r4, s13
 8024632:	eef0 6a68 	vmov.f32	s13, s17
 8024636:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802463a:	ee16 6a90 	vmov	r6, s13
 802463e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024642:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024646:	ee37 8a48 	vsub.f32	s16, s14, s16
 802464a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802464e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024652:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024656:	ee18 2a10 	vmov	r2, s16
 802465a:	eeb0 8a47 	vmov.f32	s16, s14
 802465e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024662:	ee18 2a90 	vmov	r2, s17
 8024666:	9329      	str	r3, [sp, #164]	; 0xa4
 8024668:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802466a:	eef0 8a67 	vmov.f32	s17, s15
 802466e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024672:	932a      	str	r3, [sp, #168]	; 0xa8
 8024674:	9b08      	ldr	r3, [sp, #32]
 8024676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024678:	3b01      	subs	r3, #1
 802467a:	9308      	str	r3, [sp, #32]
 802467c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802467e:	bf08      	it	eq
 8024680:	4613      	moveq	r3, r2
 8024682:	9306      	str	r3, [sp, #24]
 8024684:	e6e4      	b.n	8024450 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024686:	2900      	cmp	r1, #0
 8024688:	f43f af4e 	beq.w	8024528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802468c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8024690:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024694:	9309      	str	r3, [sp, #36]	; 0x24
 8024696:	e747      	b.n	8024528 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024698:	f112 0a01 	adds.w	sl, r2, #1
 802469c:	d481      	bmi.n	80245a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802469e:	4553      	cmp	r3, sl
 80246a0:	f6ff af7f 	blt.w	80245a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80246a4:	f11c 0a01 	adds.w	sl, ip, #1
 80246a8:	f53f af7b 	bmi.w	80245a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80246ac:	45d6      	cmp	lr, sl
 80246ae:	f6ff af78 	blt.w	80245a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80246b2:	b21b      	sxth	r3, r3
 80246b4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80246b8:	fa0f f28e 	sxth.w	r2, lr
 80246bc:	9300      	str	r3, [sp, #0]
 80246be:	463b      	mov	r3, r7
 80246c0:	9201      	str	r2, [sp, #4]
 80246c2:	9a07      	ldr	r2, [sp, #28]
 80246c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80246c8:	4641      	mov	r1, r8
 80246ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80246cc:	f7ff fdfe 	bl	80242cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80246d0:	e767      	b.n	80245a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80246d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80246d4:	1422      	asrs	r2, r4, #16
 80246d6:	1431      	asrs	r1, r6, #16
 80246d8:	9d07      	ldr	r5, [sp, #28]
 80246da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80246de:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80246e2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80246e6:	fb03 2101 	mla	r1, r3, r1, r2
 80246ea:	9a07      	ldr	r2, [sp, #28]
 80246ec:	440a      	add	r2, r1
 80246ee:	5c69      	ldrb	r1, [r5, r1]
 80246f0:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80246f4:	f1be 0f00 	cmp.w	lr, #0
 80246f8:	d05c      	beq.n	80247b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 80246fa:	f892 c001 	ldrb.w	ip, [r2, #1]
 80246fe:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8024702:	950d      	str	r5, [sp, #52]	; 0x34
 8024704:	b150      	cbz	r0, 802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024706:	eb02 0c03 	add.w	ip, r2, r3
 802470a:	5cd3      	ldrb	r3, [r2, r3]
 802470c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024710:	930a      	str	r3, [sp, #40]	; 0x28
 8024712:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024716:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802471a:	930e      	str	r3, [sp, #56]	; 0x38
 802471c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802471e:	fb1e f200 	smulbb	r2, lr, r0
 8024722:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024724:	f108 38ff 	add.w	r8, r8, #4294967295
 8024728:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802472c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8024730:	10d2      	asrs	r2, r2, #3
 8024732:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8024736:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802473a:	ea4c 0c03 	orr.w	ip, ip, r3
 802473e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8024742:	9311      	str	r3, [sp, #68]	; 0x44
 8024744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024746:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024748:	041b      	lsls	r3, r3, #16
 802474a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802474e:	ea43 030b 	orr.w	r3, r3, fp
 8024752:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8024756:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802475a:	4353      	muls	r3, r2
 802475c:	fb05 3c0c 	mla	ip, r5, ip, r3
 8024760:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8024764:	ea43 0b01 	orr.w	fp, r3, r1
 8024768:	f1c0 0110 	rsb	r1, r0, #16
 802476c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802476e:	eba1 0e0e 	sub.w	lr, r1, lr
 8024772:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8024776:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802477a:	fb0e cc0b 	mla	ip, lr, fp, ip
 802477e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8024782:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8024786:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802478a:	ea4b 0e0e 	orr.w	lr, fp, lr
 802478e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024792:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8024796:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802479a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802479e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80247a2:	ea43 0c0c 	orr.w	ip, r3, ip
 80247a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80247a8:	441c      	add	r4, r3
 80247aa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80247ac:	f82a cb02 	strh.w	ip, [sl], #2
 80247b0:	441e      	add	r6, r3
 80247b2:	e723      	b.n	80245fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80247b4:	2800      	cmp	r0, #0
 80247b6:	d0b1      	beq.n	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80247b8:	5cd3      	ldrb	r3, [r2, r3]
 80247ba:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80247be:	930a      	str	r3, [sp, #40]	; 0x28
 80247c0:	e7ac      	b.n	802471c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80247c2:	b013      	add	sp, #76	; 0x4c
 80247c4:	ecbd 8b0a 	vpop	{d8-d12}
 80247c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080247cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80247cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247d0:	468b      	mov	fp, r1
 80247d2:	8809      	ldrh	r1, [r1, #0]
 80247d4:	b089      	sub	sp, #36	; 0x24
 80247d6:	10cd      	asrs	r5, r1, #3
 80247d8:	ea4f 2921 	mov.w	r9, r1, asr #8
 80247dc:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80247e0:	00c9      	lsls	r1, r1, #3
 80247e2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80247e6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80247ea:	9202      	str	r2, [sp, #8]
 80247ec:	b2c9      	uxtb	r1, r1
 80247ee:	9500      	str	r5, [sp, #0]
 80247f0:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80247f4:	9101      	str	r1, [sp, #4]
 80247f6:	9900      	ldr	r1, [sp, #0]
 80247f8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80247fc:	0209      	lsls	r1, r1, #8
 80247fe:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8024802:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8024806:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 802480a:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 802480e:	fb04 650e 	mla	r5, r4, lr, r6
 8024812:	2c00      	cmp	r4, #0
 8024814:	eb02 0805 	add.w	r8, r2, r5
 8024818:	9a01      	ldr	r2, [sp, #4]
 802481a:	ea41 0102 	orr.w	r1, r1, r2
 802481e:	9107      	str	r1, [sp, #28]
 8024820:	db43      	blt.n	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024822:	45a2      	cmp	sl, r4
 8024824:	dd41      	ble.n	80248aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024826:	2e00      	cmp	r6, #0
 8024828:	db3d      	blt.n	80248a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802482a:	45b6      	cmp	lr, r6
 802482c:	dd3b      	ble.n	80248a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802482e:	9a02      	ldr	r2, [sp, #8]
 8024830:	5d55      	ldrb	r5, [r2, r5]
 8024832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024836:	441d      	add	r5, r3
 8024838:	1c72      	adds	r2, r6, #1
 802483a:	d439      	bmi.n	80248b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802483c:	4596      	cmp	lr, r2
 802483e:	dd37      	ble.n	80248b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024840:	2f00      	cmp	r7, #0
 8024842:	d035      	beq.n	80248b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8024844:	f898 1001 	ldrb.w	r1, [r8, #1]
 8024848:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802484c:	4419      	add	r1, r3
 802484e:	3401      	adds	r4, #1
 8024850:	d432      	bmi.n	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024852:	45a2      	cmp	sl, r4
 8024854:	dd30      	ble.n	80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024856:	b378      	cbz	r0, 80248b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8024858:	2e00      	cmp	r6, #0
 802485a:	db2b      	blt.n	80248b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802485c:	45b6      	cmp	lr, r6
 802485e:	dd29      	ble.n	80248b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8024860:	f818 400e 	ldrb.w	r4, [r8, lr]
 8024864:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024868:	441c      	add	r4, r3
 802486a:	3601      	adds	r6, #1
 802486c:	d427      	bmi.n	80248be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802486e:	45b6      	cmp	lr, r6
 8024870:	dd25      	ble.n	80248be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8024872:	b327      	cbz	r7, 80248be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8024874:	44c6      	add	lr, r8
 8024876:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802487a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802487e:	4413      	add	r3, r2
 8024880:	782a      	ldrb	r2, [r5, #0]
 8024882:	2f0f      	cmp	r7, #15
 8024884:	9202      	str	r2, [sp, #8]
 8024886:	780a      	ldrb	r2, [r1, #0]
 8024888:	9203      	str	r2, [sp, #12]
 802488a:	7822      	ldrb	r2, [r4, #0]
 802488c:	9204      	str	r2, [sp, #16]
 802488e:	781a      	ldrb	r2, [r3, #0]
 8024890:	9205      	str	r2, [sp, #20]
 8024892:	d801      	bhi.n	8024898 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 8024894:	280f      	cmp	r0, #15
 8024896:	d914      	bls.n	80248c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 8024898:	4b3f      	ldr	r3, [pc, #252]	; (8024998 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 802489a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802489e:	4a3f      	ldr	r2, [pc, #252]	; (802499c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80248a0:	483f      	ldr	r0, [pc, #252]	; (80249a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80248a2:	f006 fb31 	bl	802af08 <__assert_func>
 80248a6:	ad07      	add	r5, sp, #28
 80248a8:	e7c6      	b.n	8024838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80248aa:	a907      	add	r1, sp, #28
 80248ac:	460d      	mov	r5, r1
 80248ae:	e7ce      	b.n	802484e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80248b0:	a907      	add	r1, sp, #28
 80248b2:	e7cc      	b.n	802484e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80248b4:	ac07      	add	r4, sp, #28
 80248b6:	e7d8      	b.n	802486a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80248b8:	ab07      	add	r3, sp, #28
 80248ba:	461c      	mov	r4, r3
 80248bc:	e7e0      	b.n	8024880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80248be:	ab07      	add	r3, sp, #28
 80248c0:	e7de      	b.n	8024880 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80248c2:	b2ba      	uxth	r2, r7
 80248c4:	f891 8002 	ldrb.w	r8, [r1, #2]
 80248c8:	b280      	uxth	r0, r0
 80248ca:	7849      	ldrb	r1, [r1, #1]
 80248cc:	78ae      	ldrb	r6, [r5, #2]
 80248ce:	fa1f f78c 	uxth.w	r7, ip
 80248d2:	fb02 fa00 	mul.w	sl, r2, r0
 80248d6:	0112      	lsls	r2, r2, #4
 80248d8:	786d      	ldrb	r5, [r5, #1]
 80248da:	ea6f 0c0c 	mvn.w	ip, ip
 80248de:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80248e2:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80248e6:	eba2 020a 	sub.w	r2, r2, sl
 80248ea:	fa5f fc8c 	uxtb.w	ip, ip
 80248ee:	b280      	uxth	r0, r0
 80248f0:	fb19 f90c 	smulbb	r9, r9, ip
 80248f4:	b292      	uxth	r2, r2
 80248f6:	ebae 0e00 	sub.w	lr, lr, r0
 80248fa:	4351      	muls	r1, r2
 80248fc:	fa1f fe8e 	uxth.w	lr, lr
 8024900:	fb02 f808 	mul.w	r8, r2, r8
 8024904:	fb0e 1505 	mla	r5, lr, r5, r1
 8024908:	7861      	ldrb	r1, [r4, #1]
 802490a:	fb0e 8806 	mla	r8, lr, r6, r8
 802490e:	78a6      	ldrb	r6, [r4, #2]
 8024910:	fb00 5501 	mla	r5, r0, r1, r5
 8024914:	7859      	ldrb	r1, [r3, #1]
 8024916:	fb00 8806 	mla	r8, r0, r6, r8
 802491a:	789e      	ldrb	r6, [r3, #2]
 802491c:	9b00      	ldr	r3, [sp, #0]
 802491e:	fb0a 5101 	mla	r1, sl, r1, r5
 8024922:	fb0a 8606 	mla	r6, sl, r6, r8
 8024926:	fb13 f50c 	smulbb	r5, r3, ip
 802492a:	9b03      	ldr	r3, [sp, #12]
 802492c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024930:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024934:	435a      	muls	r2, r3
 8024936:	9b02      	ldr	r3, [sp, #8]
 8024938:	fb06 9607 	mla	r6, r6, r7, r9
 802493c:	fb0e 2203 	mla	r2, lr, r3, r2
 8024940:	9b04      	ldr	r3, [sp, #16]
 8024942:	b2b6      	uxth	r6, r6
 8024944:	fb01 5107 	mla	r1, r1, r7, r5
 8024948:	fb00 2003 	mla	r0, r0, r3, r2
 802494c:	9b05      	ldr	r3, [sp, #20]
 802494e:	f106 0901 	add.w	r9, r6, #1
 8024952:	b289      	uxth	r1, r1
 8024954:	fb0a 0a03 	mla	sl, sl, r3, r0
 8024958:	9b01      	ldr	r3, [sp, #4]
 802495a:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802495e:	1c4d      	adds	r5, r1, #1
 8024960:	fb13 fc0c 	smulbb	ip, r3, ip
 8024964:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024968:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 802496c:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8024970:	fb0a c707 	mla	r7, sl, r7, ip
 8024974:	0949      	lsrs	r1, r1, #5
 8024976:	b2bf      	uxth	r7, r7
 8024978:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802497c:	1c7e      	adds	r6, r7, #1
 802497e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8024982:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8024986:	ea46 0609 	orr.w	r6, r6, r9
 802498a:	430e      	orrs	r6, r1
 802498c:	f8ab 6000 	strh.w	r6, [fp]
 8024990:	b009      	add	sp, #36	; 0x24
 8024992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024996:	bf00      	nop
 8024998:	08030159 	.word	0x08030159
 802499c:	08030726 	.word	0x08030726
 80249a0:	080301dd 	.word	0x080301dd

080249a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80249a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249a8:	ed2d 8b08 	vpush	{d8-d11}
 80249ac:	b095      	sub	sp, #84	; 0x54
 80249ae:	eeb0 aa40 	vmov.f32	s20, s0
 80249b2:	eef0 9a60 	vmov.f32	s19, s1
 80249b6:	9212      	str	r2, [sp, #72]	; 0x48
 80249b8:	eeb0 9a41 	vmov.f32	s18, s2
 80249bc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80249be:	eeb0 8a62 	vmov.f32	s16, s5
 80249c2:	9309      	str	r3, [sp, #36]	; 0x24
 80249c4:	eef0 8a43 	vmov.f32	s17, s6
 80249c8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80249cc:	eef0 ba44 	vmov.f32	s23, s8
 80249d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80249d2:	eeb0 ba64 	vmov.f32	s22, s9
 80249d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80249d8:	eef0 aa45 	vmov.f32	s21, s10
 80249dc:	6850      	ldr	r0, [r2, #4]
 80249de:	910e      	str	r1, [sp, #56]	; 0x38
 80249e0:	6812      	ldr	r2, [r2, #0]
 80249e2:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80249e6:	fb00 1303 	mla	r3, r0, r3, r1
 80249ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80249ee:	930a      	str	r3, [sp, #40]	; 0x28
 80249f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80249f2:	681b      	ldr	r3, [r3, #0]
 80249f4:	930d      	str	r3, [sp, #52]	; 0x34
 80249f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80249f8:	685c      	ldr	r4, [r3, #4]
 80249fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80249fc:	3404      	adds	r4, #4
 80249fe:	43db      	mvns	r3, r3
 8024a00:	b2db      	uxtb	r3, r3
 8024a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8024a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024a06:	2b00      	cmp	r3, #0
 8024a08:	dc03      	bgt.n	8024a12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024a0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024a0c:	2b00      	cmp	r3, #0
 8024a0e:	f340 8255 	ble.w	8024ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024a12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024a14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a1c:	1e48      	subs	r0, r1, #1
 8024a1e:	1e55      	subs	r5, r2, #1
 8024a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	f340 80f9 	ble.w	8024c1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024a28:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8024a2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a2c:	1436      	asrs	r6, r6, #16
 8024a2e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024a32:	d406      	bmi.n	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a34:	4286      	cmp	r6, r0
 8024a36:	da04      	bge.n	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a38:	2b00      	cmp	r3, #0
 8024a3a:	db02      	blt.n	8024a42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a3c:	42ab      	cmp	r3, r5
 8024a3e:	f2c0 80ed 	blt.w	8024c1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8024a42:	3601      	adds	r6, #1
 8024a44:	f100 80da 	bmi.w	8024bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024a48:	42b1      	cmp	r1, r6
 8024a4a:	f2c0 80d7 	blt.w	8024bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024a4e:	3301      	adds	r3, #1
 8024a50:	f100 80d4 	bmi.w	8024bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024a54:	429a      	cmp	r2, r3
 8024a56:	f2c0 80d1 	blt.w	8024bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a5c:	9311      	str	r3, [sp, #68]	; 0x44
 8024a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a60:	930c      	str	r3, [sp, #48]	; 0x30
 8024a62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024a64:	2b00      	cmp	r3, #0
 8024a66:	f340 80fa 	ble.w	8024c5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024a6a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8024a6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024a6e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024a70:	68c6      	ldr	r6, [r0, #12]
 8024a72:	141d      	asrs	r5, r3, #16
 8024a74:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8024a76:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024a7a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024a7c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024a7e:	1400      	asrs	r0, r0, #16
 8024a80:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024a84:	6892      	ldr	r2, [r2, #8]
 8024a86:	f100 813e 	bmi.w	8024d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024a8a:	1e57      	subs	r7, r2, #1
 8024a8c:	42b8      	cmp	r0, r7
 8024a8e:	f280 813a 	bge.w	8024d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024a92:	2d00      	cmp	r5, #0
 8024a94:	f2c0 8137 	blt.w	8024d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024a98:	1e77      	subs	r7, r6, #1
 8024a9a:	42bd      	cmp	r5, r7
 8024a9c:	f280 8133 	bge.w	8024d06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024aa0:	b212      	sxth	r2, r2
 8024aa2:	fb05 0002 	mla	r0, r5, r2, r0
 8024aa6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024aa8:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024aac:	182e      	adds	r6, r5, r0
 8024aae:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024ab2:	eb04 050a 	add.w	r5, r4, sl
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	f000 8117 	beq.w	8024cea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024abc:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024ac0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024ac4:	44a4      	add	ip, r4
 8024ac6:	2900      	cmp	r1, #0
 8024ac8:	f000 8117 	beq.w	8024cfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024acc:	18b0      	adds	r0, r6, r2
 8024ace:	5cb2      	ldrb	r2, [r6, r2]
 8024ad0:	7840      	ldrb	r0, [r0, #1]
 8024ad2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024ad6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024ada:	4422      	add	r2, r4
 8024adc:	4420      	add	r0, r4
 8024ade:	b29b      	uxth	r3, r3
 8024ae0:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024ae4:	b289      	uxth	r1, r1
 8024ae6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024aea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024aec:	fb03 f901 	mul.w	r9, r3, r1
 8024af0:	011b      	lsls	r3, r3, #4
 8024af2:	f8b6 e000 	ldrh.w	lr, [r6]
 8024af6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024afa:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8024afe:	eba3 0309 	sub.w	r3, r3, r9
 8024b02:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8024b06:	b289      	uxth	r1, r1
 8024b08:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024b0c:	b29b      	uxth	r3, r3
 8024b0e:	eba8 0801 	sub.w	r8, r8, r1
 8024b12:	435f      	muls	r7, r3
 8024b14:	fa1f f888 	uxth.w	r8, r8
 8024b18:	9310      	str	r3, [sp, #64]	; 0x40
 8024b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b1c:	fb08 770b 	mla	r7, r8, fp, r7
 8024b20:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024b24:	fb01 770b 	mla	r7, r1, fp, r7
 8024b28:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024b2c:	fb09 770b 	mla	r7, r9, fp, r7
 8024b30:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024b34:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024b38:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024b3c:	fb1b fb03 	smulbb	fp, fp, r3
 8024b40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024b42:	fb07 b706 	mla	r7, r7, r6, fp
 8024b46:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024b4a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024b4e:	f89c c000 	ldrb.w	ip, [ip]
 8024b52:	b2bf      	uxth	r7, r7
 8024b54:	435d      	muls	r5, r3
 8024b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024b58:	fb08 550b 	mla	r5, r8, fp, r5
 8024b5c:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024b60:	fb01 550b 	mla	r5, r1, fp, r5
 8024b64:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024b68:	fb09 550b 	mla	r5, r9, fp, r5
 8024b6c:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024b70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024b74:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024b78:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024b7c:	fa5f fe8e 	uxtb.w	lr, lr
 8024b80:	fb1b fb03 	smulbb	fp, fp, r3
 8024b84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024b86:	fb03 f30c 	mul.w	r3, r3, ip
 8024b8a:	f892 c000 	ldrb.w	ip, [r2]
 8024b8e:	fb05 b506 	mla	r5, r5, r6, fp
 8024b92:	fb08 330a 	mla	r3, r8, sl, r3
 8024b96:	b2ad      	uxth	r5, r5
 8024b98:	fb01 330c 	mla	r3, r1, ip, r3
 8024b9c:	f890 c000 	ldrb.w	ip, [r0]
 8024ba0:	f105 0b01 	add.w	fp, r5, #1
 8024ba4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024baa:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024bae:	fb1e fe03 	smulbb	lr, lr, r3
 8024bb2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024bb6:	1c7b      	adds	r3, r7, #1
 8024bb8:	096d      	lsrs	r5, r5, #5
 8024bba:	fb0c e606 	mla	r6, ip, r6, lr
 8024bbe:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024bc2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024bc6:	b2b6      	uxth	r6, r6
 8024bc8:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8024bcc:	1c77      	adds	r7, r6, #1
 8024bce:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024bd2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024bd6:	431f      	orrs	r7, r3
 8024bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024bda:	433d      	orrs	r5, r7
 8024bdc:	801d      	strh	r5, [r3, #0]
 8024bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024be0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024be2:	3302      	adds	r3, #2
 8024be4:	930c      	str	r3, [sp, #48]	; 0x30
 8024be6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024be8:	4413      	add	r3, r2
 8024bea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024bec:	9327      	str	r3, [sp, #156]	; 0x9c
 8024bee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024bf0:	4413      	add	r3, r2
 8024bf2:	9328      	str	r3, [sp, #160]	; 0xa0
 8024bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024bf6:	3b01      	subs	r3, #1
 8024bf8:	9311      	str	r3, [sp, #68]	; 0x44
 8024bfa:	e732      	b.n	8024a62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024bfc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024bfe:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8024c00:	4433      	add	r3, r6
 8024c02:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8024c04:	9327      	str	r3, [sp, #156]	; 0x9c
 8024c06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024c08:	4433      	add	r3, r6
 8024c0a:	9328      	str	r3, [sp, #160]	; 0xa0
 8024c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c0e:	3b01      	subs	r3, #1
 8024c10:	9309      	str	r3, [sp, #36]	; 0x24
 8024c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c14:	3302      	adds	r3, #2
 8024c16:	930a      	str	r3, [sp, #40]	; 0x28
 8024c18:	e702      	b.n	8024a20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024c1a:	d027      	beq.n	8024c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8024c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c1e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8024c20:	3b01      	subs	r3, #1
 8024c22:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8024c24:	fb00 5003 	mla	r0, r0, r3, r5
 8024c28:	1400      	asrs	r0, r0, #16
 8024c2a:	f53f af16 	bmi.w	8024a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c2e:	3901      	subs	r1, #1
 8024c30:	4288      	cmp	r0, r1
 8024c32:	f6bf af12 	bge.w	8024a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c36:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024c38:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024c3a:	fb01 0303 	mla	r3, r1, r3, r0
 8024c3e:	141b      	asrs	r3, r3, #16
 8024c40:	f53f af0b 	bmi.w	8024a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c44:	3a01      	subs	r2, #1
 8024c46:	4293      	cmp	r3, r2
 8024c48:	f6bf af07 	bge.w	8024a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c4e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8024c52:	9311      	str	r3, [sp, #68]	; 0x44
 8024c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024c56:	930c      	str	r3, [sp, #48]	; 0x30
 8024c58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024c5a:	2b00      	cmp	r3, #0
 8024c5c:	dc70      	bgt.n	8024d40 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024c62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024c66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8024c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024c6e:	2b00      	cmp	r3, #0
 8024c70:	f340 8124 	ble.w	8024ebc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024c74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024c7a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024c7e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024c82:	eef0 6a48 	vmov.f32	s13, s16
 8024c86:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024c8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024c8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c92:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8024c96:	eef0 6a68 	vmov.f32	s13, s17
 8024c9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024c9e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8024ca2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024ca6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024caa:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024cae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024cb2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024cb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024cba:	ee18 2a10 	vmov	r2, s16
 8024cbe:	eeb0 8a47 	vmov.f32	s16, s14
 8024cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cc6:	ee18 2a90 	vmov	r2, s17
 8024cca:	9329      	str	r3, [sp, #164]	; 0xa4
 8024ccc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024cce:	eef0 8a67 	vmov.f32	s17, s15
 8024cd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8024cd6:	932a      	str	r3, [sp, #168]	; 0xa8
 8024cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024cda:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024cdc:	3b01      	subs	r3, #1
 8024cde:	930e      	str	r3, [sp, #56]	; 0x38
 8024ce0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024ce2:	bf08      	it	eq
 8024ce4:	4613      	moveq	r3, r2
 8024ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8024ce8:	e68c      	b.n	8024a04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024cea:	b149      	cbz	r1, 8024d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024cec:	5cb2      	ldrb	r2, [r6, r2]
 8024cee:	4628      	mov	r0, r5
 8024cf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024cf4:	4422      	add	r2, r4
 8024cf6:	46ac      	mov	ip, r5
 8024cf8:	e6f1      	b.n	8024ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024cfa:	4628      	mov	r0, r5
 8024cfc:	462a      	mov	r2, r5
 8024cfe:	e6ee      	b.n	8024ade <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024d00:	4628      	mov	r0, r5
 8024d02:	462a      	mov	r2, r5
 8024d04:	e7f7      	b.n	8024cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024d06:	1c47      	adds	r7, r0, #1
 8024d08:	f53f af69 	bmi.w	8024bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d0c:	42ba      	cmp	r2, r7
 8024d0e:	f6ff af66 	blt.w	8024bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d12:	1c6f      	adds	r7, r5, #1
 8024d14:	f53f af63 	bmi.w	8024bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d18:	42be      	cmp	r6, r7
 8024d1a:	f6ff af60 	blt.w	8024bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d1e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8024d20:	b236      	sxth	r6, r6
 8024d22:	b212      	sxth	r2, r2
 8024d24:	9002      	str	r0, [sp, #8]
 8024d26:	9601      	str	r6, [sp, #4]
 8024d28:	9200      	str	r2, [sp, #0]
 8024d2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8024d2c:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024d30:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024d34:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8024d38:	4623      	mov	r3, r4
 8024d3a:	f7ff fd47 	bl	80247cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024d3e:	e74e      	b.n	8024bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d40:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024d42:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024d44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024d48:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8024d4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8024d4c:	1400      	asrs	r0, r0, #16
 8024d4e:	142d      	asrs	r5, r5, #16
 8024d50:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024d52:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024d56:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024d5a:	fb02 5000 	mla	r0, r2, r0, r5
 8024d5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024d60:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024d64:	182e      	adds	r6, r5, r0
 8024d66:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024d6a:	eb04 0509 	add.w	r5, r4, r9
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	f000 8096 	beq.w	8024ea0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024d74:	7877      	ldrb	r7, [r6, #1]
 8024d76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024d7a:	4427      	add	r7, r4
 8024d7c:	2900      	cmp	r1, #0
 8024d7e:	f000 8097 	beq.w	8024eb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024d82:	18b0      	adds	r0, r6, r2
 8024d84:	5cb2      	ldrb	r2, [r6, r2]
 8024d86:	7840      	ldrb	r0, [r0, #1]
 8024d88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024d90:	4422      	add	r2, r4
 8024d92:	4420      	add	r0, r4
 8024d94:	b29b      	uxth	r3, r3
 8024d96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024d98:	b289      	uxth	r1, r1
 8024d9a:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024d9e:	f8b6 c000 	ldrh.w	ip, [r6]
 8024da2:	fb03 f801 	mul.w	r8, r3, r1
 8024da6:	011b      	lsls	r3, r3, #4
 8024da8:	78be      	ldrb	r6, [r7, #2]
 8024daa:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024dae:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024db2:	eba3 0308 	sub.w	r3, r3, r8
 8024db6:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024dba:	b289      	uxth	r1, r1
 8024dbc:	b29b      	uxth	r3, r3
 8024dbe:	ebae 0e01 	sub.w	lr, lr, r1
 8024dc2:	435e      	muls	r6, r3
 8024dc4:	fa1f fe8e 	uxth.w	lr, lr
 8024dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8024dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024dcc:	fb0e 660b 	mla	r6, lr, fp, r6
 8024dd0:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024dd4:	fb01 660b 	mla	r6, r1, fp, r6
 8024dd8:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024ddc:	fb08 660b 	mla	r6, r8, fp, r6
 8024de0:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024de4:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8024de8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024dec:	fb1b fb03 	smulbb	fp, fp, r3
 8024df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024df2:	fb06 b60a 	mla	r6, r6, sl, fp
 8024df6:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024dfa:	787d      	ldrb	r5, [r7, #1]
 8024dfc:	783f      	ldrb	r7, [r7, #0]
 8024dfe:	b2b6      	uxth	r6, r6
 8024e00:	435d      	muls	r5, r3
 8024e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e04:	fb0e 550b 	mla	r5, lr, fp, r5
 8024e08:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024e0c:	fb01 550b 	mla	r5, r1, fp, r5
 8024e10:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024e14:	fb08 550b 	mla	r5, r8, fp, r5
 8024e18:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024e1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024e20:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024e24:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024e28:	fa5f fc8c 	uxtb.w	ip, ip
 8024e2c:	fb1b fb03 	smulbb	fp, fp, r3
 8024e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024e32:	437b      	muls	r3, r7
 8024e34:	7817      	ldrb	r7, [r2, #0]
 8024e36:	fb05 b50a 	mla	r5, r5, sl, fp
 8024e3a:	fb0e 3309 	mla	r3, lr, r9, r3
 8024e3e:	b2ad      	uxth	r5, r5
 8024e40:	fb01 3307 	mla	r3, r1, r7, r3
 8024e44:	7807      	ldrb	r7, [r0, #0]
 8024e46:	f105 0b01 	add.w	fp, r5, #1
 8024e4a:	fb08 3707 	mla	r7, r8, r7, r3
 8024e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024e50:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024e54:	fb1c fc03 	smulbb	ip, ip, r3
 8024e58:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024e5c:	1c73      	adds	r3, r6, #1
 8024e5e:	096d      	lsrs	r5, r5, #5
 8024e60:	fb07 c70a 	mla	r7, r7, sl, ip
 8024e64:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024e68:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024e6c:	b2bf      	uxth	r7, r7
 8024e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e70:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8024e74:	1c7a      	adds	r2, r7, #1
 8024e76:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024e7a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024e7e:	4316      	orrs	r6, r2
 8024e80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024e82:	432e      	orrs	r6, r5
 8024e84:	f823 6b02 	strh.w	r6, [r3], #2
 8024e88:	930c      	str	r3, [sp, #48]	; 0x30
 8024e8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8024e8c:	4413      	add	r3, r2
 8024e8e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8024e90:	9327      	str	r3, [sp, #156]	; 0x9c
 8024e92:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024e94:	4413      	add	r3, r2
 8024e96:	9328      	str	r3, [sp, #160]	; 0xa0
 8024e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8024e9a:	3b01      	subs	r3, #1
 8024e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8024e9e:	e6db      	b.n	8024c58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024ea0:	b149      	cbz	r1, 8024eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024ea2:	5cb2      	ldrb	r2, [r6, r2]
 8024ea4:	4628      	mov	r0, r5
 8024ea6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024eaa:	4422      	add	r2, r4
 8024eac:	462f      	mov	r7, r5
 8024eae:	e771      	b.n	8024d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024eb0:	4628      	mov	r0, r5
 8024eb2:	462a      	mov	r2, r5
 8024eb4:	e76e      	b.n	8024d94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024eb6:	4628      	mov	r0, r5
 8024eb8:	462a      	mov	r2, r5
 8024eba:	e7f7      	b.n	8024eac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024ebc:	b015      	add	sp, #84	; 0x54
 8024ebe:	ecbd 8b08 	vpop	{d8-d11}
 8024ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ecc:	880e      	ldrh	r6, [r1, #0]
 8024ece:	b085      	sub	sp, #20
 8024ed0:	4691      	mov	r9, r2
 8024ed2:	0230      	lsls	r0, r6, #8
 8024ed4:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024ed8:	9101      	str	r1, [sp, #4]
 8024eda:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8024ede:	0170      	lsls	r0, r6, #5
 8024ee0:	00f6      	lsls	r6, r6, #3
 8024ee2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8024ee6:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8024eea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8024eee:	b2f6      	uxtb	r6, r6
 8024ef0:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8024ef4:	ea4b 0000 	orr.w	r0, fp, r0
 8024ef8:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8024efc:	4306      	orrs	r6, r0
 8024efe:	fb05 7a0c 	mla	sl, r5, ip, r7
 8024f02:	2d00      	cmp	r5, #0
 8024f04:	9603      	str	r6, [sp, #12]
 8024f06:	eb09 0e0a 	add.w	lr, r9, sl
 8024f0a:	db42      	blt.n	8024f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024f0c:	45a8      	cmp	r8, r5
 8024f0e:	dd40      	ble.n	8024f92 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024f10:	2f00      	cmp	r7, #0
 8024f12:	db3c      	blt.n	8024f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024f14:	45bc      	cmp	ip, r7
 8024f16:	dd3a      	ble.n	8024f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024f18:	f819 600a 	ldrb.w	r6, [r9, sl]
 8024f1c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024f20:	441e      	add	r6, r3
 8024f22:	1c78      	adds	r0, r7, #1
 8024f24:	d438      	bmi.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f26:	4584      	cmp	ip, r0
 8024f28:	dd36      	ble.n	8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f2a:	b3aa      	cbz	r2, 8024f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f2c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f34:	4418      	add	r0, r3
 8024f36:	3501      	adds	r5, #1
 8024f38:	d432      	bmi.n	8024fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024f3a:	45a8      	cmp	r8, r5
 8024f3c:	dd30      	ble.n	8024fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024f3e:	b37c      	cbz	r4, 8024fa0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024f40:	2f00      	cmp	r7, #0
 8024f42:	db2b      	blt.n	8024f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024f44:	45bc      	cmp	ip, r7
 8024f46:	dd29      	ble.n	8024f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024f48:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024f4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024f50:	441d      	add	r5, r3
 8024f52:	3701      	adds	r7, #1
 8024f54:	d427      	bmi.n	8024fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024f56:	45bc      	cmp	ip, r7
 8024f58:	dd25      	ble.n	8024fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024f5a:	b322      	cbz	r2, 8024fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024f5c:	44f4      	add	ip, lr
 8024f5e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024f62:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024f66:	443b      	add	r3, r7
 8024f68:	781f      	ldrb	r7, [r3, #0]
 8024f6a:	2a0f      	cmp	r2, #15
 8024f6c:	f896 9000 	ldrb.w	r9, [r6]
 8024f70:	f890 a000 	ldrb.w	sl, [r0]
 8024f74:	4639      	mov	r1, r7
 8024f76:	f895 8000 	ldrb.w	r8, [r5]
 8024f7a:	d801      	bhi.n	8024f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024f7c:	2c0f      	cmp	r4, #15
 8024f7e:	d914      	bls.n	8024faa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8024f80:	4b2c      	ldr	r3, [pc, #176]	; (8025034 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8024f82:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024f86:	4a2c      	ldr	r2, [pc, #176]	; (8025038 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024f88:	482c      	ldr	r0, [pc, #176]	; (802503c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024f8a:	f005 ffbd 	bl	802af08 <__assert_func>
 8024f8e:	ae03      	add	r6, sp, #12
 8024f90:	e7c7      	b.n	8024f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024f92:	a803      	add	r0, sp, #12
 8024f94:	4606      	mov	r6, r0
 8024f96:	e7ce      	b.n	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024f98:	a803      	add	r0, sp, #12
 8024f9a:	e7cc      	b.n	8024f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024f9c:	ad03      	add	r5, sp, #12
 8024f9e:	e7d8      	b.n	8024f52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8024fa0:	ab03      	add	r3, sp, #12
 8024fa2:	461d      	mov	r5, r3
 8024fa4:	e7e0      	b.n	8024f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024fa6:	ab03      	add	r3, sp, #12
 8024fa8:	e7de      	b.n	8024f68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8024faa:	b292      	uxth	r2, r2
 8024fac:	f890 c002 	ldrb.w	ip, [r0, #2]
 8024fb0:	b2a4      	uxth	r4, r4
 8024fb2:	f896 b002 	ldrb.w	fp, [r6, #2]
 8024fb6:	7840      	ldrb	r0, [r0, #1]
 8024fb8:	fb02 fe04 	mul.w	lr, r2, r4
 8024fbc:	0112      	lsls	r2, r2, #4
 8024fbe:	7876      	ldrb	r6, [r6, #1]
 8024fc0:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8024fc4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8024fc8:	eba2 020e 	sub.w	r2, r2, lr
 8024fcc:	b2a4      	uxth	r4, r4
 8024fce:	b292      	uxth	r2, r2
 8024fd0:	1b3f      	subs	r7, r7, r4
 8024fd2:	fb02 fc0c 	mul.w	ip, r2, ip
 8024fd6:	b2bf      	uxth	r7, r7
 8024fd8:	fb07 cc0b 	mla	ip, r7, fp, ip
 8024fdc:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024fe0:	fb04 cc0b 	mla	ip, r4, fp, ip
 8024fe4:	f893 b002 	ldrb.w	fp, [r3, #2]
 8024fe8:	785b      	ldrb	r3, [r3, #1]
 8024fea:	fb0e cc0b 	mla	ip, lr, fp, ip
 8024fee:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8024ff2:	fb02 fc0a 	mul.w	ip, r2, sl
 8024ff6:	4342      	muls	r2, r0
 8024ff8:	7868      	ldrb	r0, [r5, #1]
 8024ffa:	fb07 cc09 	mla	ip, r7, r9, ip
 8024ffe:	fb07 2206 	mla	r2, r7, r6, r2
 8025002:	fb04 cc08 	mla	ip, r4, r8, ip
 8025006:	fb04 2400 	mla	r4, r4, r0, r2
 802500a:	fb0e cc01 	mla	ip, lr, r1, ip
 802500e:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025012:	9b01      	ldr	r3, [sp, #4]
 8025014:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025018:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802501c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025020:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025024:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025028:	f8a3 c000 	strh.w	ip, [r3]
 802502c:	b005      	add	sp, #20
 802502e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025032:	bf00      	nop
 8025034:	08030159 	.word	0x08030159
 8025038:	08030726 	.word	0x08030726
 802503c:	080301dd 	.word	0x080301dd

08025040 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025044:	ed2d 8b08 	vpush	{d8-d11}
 8025048:	b08f      	sub	sp, #60	; 0x3c
 802504a:	eeb0 aa40 	vmov.f32	s20, s0
 802504e:	eef0 9a60 	vmov.f32	s19, s1
 8025052:	920c      	str	r2, [sp, #48]	; 0x30
 8025054:	eeb0 9a41 	vmov.f32	s18, s2
 8025058:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802505a:	eeb0 8a62 	vmov.f32	s16, s5
 802505e:	900d      	str	r0, [sp, #52]	; 0x34
 8025060:	eef0 8a43 	vmov.f32	s17, s6
 8025064:	6850      	ldr	r0, [r2, #4]
 8025066:	eef0 ba44 	vmov.f32	s23, s8
 802506a:	910a      	str	r1, [sp, #40]	; 0x28
 802506c:	eeb0 ba64 	vmov.f32	s22, s9
 8025070:	9306      	str	r3, [sp, #24]
 8025072:	eef0 aa45 	vmov.f32	s21, s10
 8025076:	6812      	ldr	r2, [r2, #0]
 8025078:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802507c:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8025080:	fb00 1303 	mla	r3, r0, r3, r1
 8025084:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025088:	9307      	str	r3, [sp, #28]
 802508a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802508c:	681b      	ldr	r3, [r3, #0]
 802508e:	9308      	str	r3, [sp, #32]
 8025090:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025092:	685c      	ldr	r4, [r3, #4]
 8025094:	3404      	adds	r4, #4
 8025096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025098:	2b00      	cmp	r3, #0
 802509a:	dc03      	bgt.n	80250a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 802509c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802509e:	2b00      	cmp	r3, #0
 80250a0:	f340 81d5 	ble.w	802544e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80250a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80250aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80250ae:	1e48      	subs	r0, r1, #1
 80250b0:	1e56      	subs	r6, r2, #1
 80250b2:	9b06      	ldr	r3, [sp, #24]
 80250b4:	2b00      	cmp	r3, #0
 80250b6:	f340 80b6 	ble.w	8025226 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80250ba:	ea5f 472b 	movs.w	r7, fp, asr #16
 80250be:	ea4f 4325 	mov.w	r3, r5, asr #16
 80250c2:	d406      	bmi.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80250c4:	4287      	cmp	r7, r0
 80250c6:	da04      	bge.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80250c8:	2b00      	cmp	r3, #0
 80250ca:	db02      	blt.n	80250d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80250cc:	42b3      	cmp	r3, r6
 80250ce:	f2c0 80ab 	blt.w	8025228 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80250d2:	3701      	adds	r7, #1
 80250d4:	f100 809c 	bmi.w	8025210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80250d8:	42b9      	cmp	r1, r7
 80250da:	f2c0 8099 	blt.w	8025210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80250de:	3301      	adds	r3, #1
 80250e0:	f100 8096 	bmi.w	8025210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80250e4:	429a      	cmp	r2, r3
 80250e6:	f2c0 8093 	blt.w	8025210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80250ea:	9b06      	ldr	r3, [sp, #24]
 80250ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80250ee:	9b07      	ldr	r3, [sp, #28]
 80250f0:	9309      	str	r3, [sp, #36]	; 0x24
 80250f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80250f4:	2b00      	cmp	r3, #0
 80250f6:	f340 80b4 	ble.w	8025262 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 80250fa:	9828      	ldr	r0, [sp, #160]	; 0xa0
 80250fc:	142e      	asrs	r6, r5, #16
 80250fe:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025100:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025104:	68c7      	ldr	r7, [r0, #12]
 8025106:	ea5f 402b 	movs.w	r0, fp, asr #16
 802510a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802510e:	6892      	ldr	r2, [r2, #8]
 8025110:	f100 80fb 	bmi.w	802530a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025114:	f102 3cff 	add.w	ip, r2, #4294967295
 8025118:	4560      	cmp	r0, ip
 802511a:	f280 80f6 	bge.w	802530a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802511e:	2e00      	cmp	r6, #0
 8025120:	f2c0 80f3 	blt.w	802530a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025124:	f107 3cff 	add.w	ip, r7, #4294967295
 8025128:	4566      	cmp	r6, ip
 802512a:	f280 80ee 	bge.w	802530a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802512e:	b212      	sxth	r2, r2
 8025130:	fb06 0002 	mla	r0, r6, r2, r0
 8025134:	9e08      	ldr	r6, [sp, #32]
 8025136:	1837      	adds	r7, r6, r0
 8025138:	5c30      	ldrb	r0, [r6, r0]
 802513a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802513e:	eb04 0c08 	add.w	ip, r4, r8
 8025142:	2b00      	cmp	r3, #0
 8025144:	f000 80d3 	beq.w	80252ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8025148:	787e      	ldrb	r6, [r7, #1]
 802514a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802514e:	4426      	add	r6, r4
 8025150:	2900      	cmp	r1, #0
 8025152:	f000 80d4 	beq.w	80252fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8025156:	18b8      	adds	r0, r7, r2
 8025158:	5cba      	ldrb	r2, [r7, r2]
 802515a:	7840      	ldrb	r0, [r0, #1]
 802515c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025160:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025164:	4422      	add	r2, r4
 8025166:	4420      	add	r0, r4
 8025168:	b29b      	uxth	r3, r3
 802516a:	78b7      	ldrb	r7, [r6, #2]
 802516c:	b289      	uxth	r1, r1
 802516e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025172:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025176:	fb03 f901 	mul.w	r9, r3, r1
 802517a:	011b      	lsls	r3, r3, #4
 802517c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025180:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8025184:	eba3 0309 	sub.w	r3, r3, r9
 8025188:	b289      	uxth	r1, r1
 802518a:	b29b      	uxth	r3, r3
 802518c:	ebae 0e01 	sub.w	lr, lr, r1
 8025190:	435f      	muls	r7, r3
 8025192:	fa1f fe8e 	uxth.w	lr, lr
 8025196:	fb0e 770a 	mla	r7, lr, sl, r7
 802519a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802519e:	fb01 770a 	mla	r7, r1, sl, r7
 80251a2:	f890 a002 	ldrb.w	sl, [r0, #2]
 80251a6:	fb09 7a0a 	mla	sl, r9, sl, r7
 80251aa:	f814 7008 	ldrb.w	r7, [r4, r8]
 80251ae:	f896 8000 	ldrb.w	r8, [r6]
 80251b2:	7876      	ldrb	r6, [r6, #1]
 80251b4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80251b8:	fb03 f808 	mul.w	r8, r3, r8
 80251bc:	4373      	muls	r3, r6
 80251be:	fb0e 8807 	mla	r8, lr, r7, r8
 80251c2:	7817      	ldrb	r7, [r2, #0]
 80251c4:	fb0e 330c 	mla	r3, lr, ip, r3
 80251c8:	fb01 8807 	mla	r8, r1, r7, r8
 80251cc:	7807      	ldrb	r7, [r0, #0]
 80251ce:	fb09 8707 	mla	r7, r9, r7, r8
 80251d2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80251d6:	ea47 070a 	orr.w	r7, r7, sl
 80251da:	f892 a001 	ldrb.w	sl, [r2, #1]
 80251de:	fb01 310a 	mla	r1, r1, sl, r3
 80251e2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80251e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251e8:	fb09 1a0a 	mla	sl, r9, sl, r1
 80251ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80251f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80251f4:	ea47 070a 	orr.w	r7, r7, sl
 80251f8:	801f      	strh	r7, [r3, #0]
 80251fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251fc:	3302      	adds	r3, #2
 80251fe:	9309      	str	r3, [sp, #36]	; 0x24
 8025200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025202:	449b      	add	fp, r3
 8025204:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025206:	441d      	add	r5, r3
 8025208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802520a:	3b01      	subs	r3, #1
 802520c:	930b      	str	r3, [sp, #44]	; 0x2c
 802520e:	e770      	b.n	80250f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025212:	449b      	add	fp, r3
 8025214:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025216:	441d      	add	r5, r3
 8025218:	9b06      	ldr	r3, [sp, #24]
 802521a:	3b01      	subs	r3, #1
 802521c:	9306      	str	r3, [sp, #24]
 802521e:	9b07      	ldr	r3, [sp, #28]
 8025220:	3302      	adds	r3, #2
 8025222:	9307      	str	r3, [sp, #28]
 8025224:	e745      	b.n	80250b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025226:	d023      	beq.n	8025270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025228:	9b06      	ldr	r3, [sp, #24]
 802522a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802522c:	3b01      	subs	r3, #1
 802522e:	fb00 b003 	mla	r0, r0, r3, fp
 8025232:	1400      	asrs	r0, r0, #16
 8025234:	f53f af59 	bmi.w	80250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025238:	3901      	subs	r1, #1
 802523a:	4288      	cmp	r0, r1
 802523c:	f6bf af55 	bge.w	80250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025240:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025242:	fb01 5303 	mla	r3, r1, r3, r5
 8025246:	141b      	asrs	r3, r3, #16
 8025248:	f53f af4f 	bmi.w	80250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802524c:	3a01      	subs	r2, #1
 802524e:	4293      	cmp	r3, r2
 8025250:	f6bf af4b 	bge.w	80250ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025254:	9b06      	ldr	r3, [sp, #24]
 8025256:	9309      	str	r3, [sp, #36]	; 0x24
 8025258:	9b07      	ldr	r3, [sp, #28]
 802525a:	930b      	str	r3, [sp, #44]	; 0x2c
 802525c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802525e:	2b00      	cmp	r3, #0
 8025260:	dc70      	bgt.n	8025344 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 8025262:	9b06      	ldr	r3, [sp, #24]
 8025264:	9a07      	ldr	r2, [sp, #28]
 8025266:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802526a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802526e:	9307      	str	r3, [sp, #28]
 8025270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025272:	2b00      	cmp	r3, #0
 8025274:	f340 80eb 	ble.w	802544e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802527c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802527e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025282:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025286:	eef0 6a48 	vmov.f32	s13, s16
 802528a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802528e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025292:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025296:	ee16 ba90 	vmov	fp, s13
 802529a:	eef0 6a68 	vmov.f32	s13, s17
 802529e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252a2:	ee16 5a90 	vmov	r5, s13
 80252a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80252aa:	ee69 7a27 	vmul.f32	s15, s18, s15
 80252ae:	ee37 8a48 	vsub.f32	s16, s14, s16
 80252b2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80252b6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80252ba:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80252be:	ee18 2a10 	vmov	r2, s16
 80252c2:	eeb0 8a47 	vmov.f32	s16, s14
 80252c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80252ca:	ee18 2a90 	vmov	r2, s17
 80252ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80252d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252d2:	eef0 8a67 	vmov.f32	s17, s15
 80252d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80252da:	9324      	str	r3, [sp, #144]	; 0x90
 80252dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80252de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80252e0:	3b01      	subs	r3, #1
 80252e2:	930a      	str	r3, [sp, #40]	; 0x28
 80252e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252e6:	bf08      	it	eq
 80252e8:	4613      	moveq	r3, r2
 80252ea:	9306      	str	r3, [sp, #24]
 80252ec:	e6d3      	b.n	8025096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80252ee:	b149      	cbz	r1, 8025304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80252f0:	5cba      	ldrb	r2, [r7, r2]
 80252f2:	4660      	mov	r0, ip
 80252f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80252f8:	4422      	add	r2, r4
 80252fa:	4666      	mov	r6, ip
 80252fc:	e734      	b.n	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80252fe:	4660      	mov	r0, ip
 8025300:	4662      	mov	r2, ip
 8025302:	e731      	b.n	8025168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025304:	4660      	mov	r0, ip
 8025306:	4662      	mov	r2, ip
 8025308:	e7f7      	b.n	80252fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802530a:	f110 0c01 	adds.w	ip, r0, #1
 802530e:	f53f af74 	bmi.w	80251fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025312:	4562      	cmp	r2, ip
 8025314:	f6ff af71 	blt.w	80251fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025318:	f116 0c01 	adds.w	ip, r6, #1
 802531c:	f53f af6d 	bmi.w	80251fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025320:	4567      	cmp	r7, ip
 8025322:	f6ff af6a 	blt.w	80251fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025326:	b23f      	sxth	r7, r7
 8025328:	b212      	sxth	r2, r2
 802532a:	9701      	str	r7, [sp, #4]
 802532c:	9200      	str	r2, [sp, #0]
 802532e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025332:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025336:	4623      	mov	r3, r4
 8025338:	980d      	ldr	r0, [sp, #52]	; 0x34
 802533a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802533e:	f7ff fdc3 	bl	8024ec8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8025342:	e75a      	b.n	80251fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025344:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8025346:	ea4f 462b 	mov.w	r6, fp, asr #16
 802534a:	1428      	asrs	r0, r5, #16
 802534c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025350:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025354:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025358:	fb02 6000 	mla	r0, r2, r0, r6
 802535c:	9e08      	ldr	r6, [sp, #32]
 802535e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8025362:	1837      	adds	r7, r6, r0
 8025364:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8025368:	eb04 0c08 	add.w	ip, r4, r8
 802536c:	2b00      	cmp	r3, #0
 802536e:	d060      	beq.n	8025432 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8025370:	787e      	ldrb	r6, [r7, #1]
 8025372:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025376:	4426      	add	r6, r4
 8025378:	2900      	cmp	r1, #0
 802537a:	d062      	beq.n	8025442 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 802537c:	18b8      	adds	r0, r7, r2
 802537e:	5cba      	ldrb	r2, [r7, r2]
 8025380:	7840      	ldrb	r0, [r0, #1]
 8025382:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025386:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802538a:	4422      	add	r2, r4
 802538c:	4420      	add	r0, r4
 802538e:	b29b      	uxth	r3, r3
 8025390:	78b7      	ldrb	r7, [r6, #2]
 8025392:	b289      	uxth	r1, r1
 8025394:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025398:	f89c c001 	ldrb.w	ip, [ip, #1]
 802539c:	fb03 f901 	mul.w	r9, r3, r1
 80253a0:	011b      	lsls	r3, r3, #4
 80253a2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80253a6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80253aa:	eba3 0309 	sub.w	r3, r3, r9
 80253ae:	b289      	uxth	r1, r1
 80253b0:	b29b      	uxth	r3, r3
 80253b2:	ebae 0e01 	sub.w	lr, lr, r1
 80253b6:	435f      	muls	r7, r3
 80253b8:	fa1f fe8e 	uxth.w	lr, lr
 80253bc:	fb0e 770a 	mla	r7, lr, sl, r7
 80253c0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80253c4:	fb01 770a 	mla	r7, r1, sl, r7
 80253c8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80253cc:	fb09 7a0a 	mla	sl, r9, sl, r7
 80253d0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80253d4:	f896 8000 	ldrb.w	r8, [r6]
 80253d8:	7876      	ldrb	r6, [r6, #1]
 80253da:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80253de:	fb03 f808 	mul.w	r8, r3, r8
 80253e2:	4373      	muls	r3, r6
 80253e4:	7856      	ldrb	r6, [r2, #1]
 80253e6:	fb0e 8807 	mla	r8, lr, r7, r8
 80253ea:	7817      	ldrb	r7, [r2, #0]
 80253ec:	fb0e 330c 	mla	r3, lr, ip, r3
 80253f0:	fb01 8807 	mla	r8, r1, r7, r8
 80253f4:	7807      	ldrb	r7, [r0, #0]
 80253f6:	fb01 3306 	mla	r3, r1, r6, r3
 80253fa:	fb09 8707 	mla	r7, r9, r7, r8
 80253fe:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025402:	ea47 070a 	orr.w	r7, r7, sl
 8025406:	f890 a001 	ldrb.w	sl, [r0, #1]
 802540a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802540e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025410:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025414:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025418:	ea47 070a 	orr.w	r7, r7, sl
 802541c:	f823 7b02 	strh.w	r7, [r3], #2
 8025420:	930b      	str	r3, [sp, #44]	; 0x2c
 8025422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8025424:	449b      	add	fp, r3
 8025426:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025428:	441d      	add	r5, r3
 802542a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802542c:	3b01      	subs	r3, #1
 802542e:	9309      	str	r3, [sp, #36]	; 0x24
 8025430:	e714      	b.n	802525c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8025432:	b149      	cbz	r1, 8025448 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8025434:	5cba      	ldrb	r2, [r7, r2]
 8025436:	4660      	mov	r0, ip
 8025438:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802543c:	4422      	add	r2, r4
 802543e:	4666      	mov	r6, ip
 8025440:	e7a5      	b.n	802538e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8025442:	4660      	mov	r0, ip
 8025444:	4662      	mov	r2, ip
 8025446:	e7a2      	b.n	802538e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8025448:	4660      	mov	r0, ip
 802544a:	4662      	mov	r2, ip
 802544c:	e7f7      	b.n	802543e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802544e:	b00f      	add	sp, #60	; 0x3c
 8025450:	ecbd 8b08 	vpop	{d8-d11}
 8025454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8025458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802545c:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 8025460:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8025464:	2c00      	cmp	r4, #0
 8025466:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 802546a:	fb04 560c 	mla	r6, r4, ip, r5
 802546e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8025472:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8025476:	eb02 0e06 	add.w	lr, r2, r6
 802547a:	db3d      	blt.n	80254f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802547c:	45a0      	cmp	r8, r4
 802547e:	dd3b      	ble.n	80254f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8025480:	2d00      	cmp	r5, #0
 8025482:	db37      	blt.n	80254f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025484:	45ac      	cmp	ip, r5
 8025486:	dd35      	ble.n	80254f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8025488:	5d92      	ldrb	r2, [r2, r6]
 802548a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802548e:	1c6e      	adds	r6, r5, #1
 8025490:	d435      	bmi.n	80254fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025492:	45b4      	cmp	ip, r6
 8025494:	dd33      	ble.n	80254fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8025496:	b3a0      	cbz	r0, 8025502 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 8025498:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802549c:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80254a0:	3401      	adds	r4, #1
 80254a2:	d432      	bmi.n	802550a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80254a4:	45a0      	cmp	r8, r4
 80254a6:	dd30      	ble.n	802550a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80254a8:	b397      	cbz	r7, 8025510 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 80254aa:	2d00      	cmp	r5, #0
 80254ac:	db2b      	blt.n	8025506 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80254ae:	45ac      	cmp	ip, r5
 80254b0:	dd29      	ble.n	8025506 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80254b2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80254b6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80254ba:	3501      	adds	r5, #1
 80254bc:	d42b      	bmi.n	8025516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80254be:	45ac      	cmp	ip, r5
 80254c0:	dd29      	ble.n	8025516 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80254c2:	b350      	cbz	r0, 802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80254c4:	44f4      	add	ip, lr
 80254c6:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80254ca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80254ce:	280f      	cmp	r0, #15
 80254d0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80254d4:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80254d8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80254dc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80254e0:	d801      	bhi.n	80254e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80254e2:	2f0f      	cmp	r7, #15
 80254e4:	d91b      	bls.n	802551e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80254e6:	4b8d      	ldr	r3, [pc, #564]	; (802571c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80254e8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80254ec:	4a8c      	ldr	r2, [pc, #560]	; (8025720 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80254ee:	488d      	ldr	r0, [pc, #564]	; (8025724 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80254f0:	f005 fd0a 	bl	802af08 <__assert_func>
 80254f4:	2200      	movs	r2, #0
 80254f6:	e7ca      	b.n	802548e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 80254f8:	2600      	movs	r6, #0
 80254fa:	4632      	mov	r2, r6
 80254fc:	e7d0      	b.n	80254a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 80254fe:	2600      	movs	r6, #0
 8025500:	e7ce      	b.n	80254a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025502:	4606      	mov	r6, r0
 8025504:	e7cc      	b.n	80254a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025506:	2400      	movs	r4, #0
 8025508:	e7d7      	b.n	80254ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 802550a:	2300      	movs	r3, #0
 802550c:	461c      	mov	r4, r3
 802550e:	e7de      	b.n	80254ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025510:	463b      	mov	r3, r7
 8025512:	463c      	mov	r4, r7
 8025514:	e7db      	b.n	80254ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025516:	2300      	movs	r3, #0
 8025518:	e7d9      	b.n	80254ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802551a:	4603      	mov	r3, r0
 802551c:	e7d7      	b.n	80254ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802551e:	b280      	uxth	r0, r0
 8025520:	b2bf      	uxth	r7, r7
 8025522:	fb07 fe00 	mul.w	lr, r7, r0
 8025526:	0100      	lsls	r0, r0, #4
 8025528:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802552c:	eba0 0c0e 	sub.w	ip, r0, lr
 8025530:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025534:	b2bf      	uxth	r7, r7
 8025536:	fa1f fc8c 	uxth.w	ip, ip
 802553a:	1bed      	subs	r5, r5, r7
 802553c:	fb0a f00c 	mul.w	r0, sl, ip
 8025540:	b2ad      	uxth	r5, r5
 8025542:	fb0b 0005 	mla	r0, fp, r5, r0
 8025546:	fb07 0009 	mla	r0, r7, r9, r0
 802554a:	fb0e 0008 	mla	r0, lr, r8, r0
 802554e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025552:	9001      	str	r0, [sp, #4]
 8025554:	2800      	cmp	r0, #0
 8025556:	f000 80de 	beq.w	8025716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 802555a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802555e:	d018      	beq.n	8025592 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 8025560:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025564:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025568:	fb0b f000 	mul.w	r0, fp, r0
 802556c:	fb0b fb02 	mul.w	fp, fp, r2
 8025570:	0a02      	lsrs	r2, r0, #8
 8025572:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025576:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802557a:	4402      	add	r2, r0
 802557c:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8025580:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025584:	0a12      	lsrs	r2, r2, #8
 8025586:	0a00      	lsrs	r0, r0, #8
 8025588:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802558c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025590:	4302      	orrs	r2, r0
 8025592:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8025596:	d01a      	beq.n	80255ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 8025598:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 802559c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80255a0:	fb0a f000 	mul.w	r0, sl, r0
 80255a4:	fb0a fa06 	mul.w	sl, sl, r6
 80255a8:	0a06      	lsrs	r6, r0, #8
 80255aa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80255ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255b2:	4406      	add	r6, r0
 80255b4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80255b8:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80255bc:	0a36      	lsrs	r6, r6, #8
 80255be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80255c2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80255c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80255ca:	ea46 060a 	orr.w	r6, r6, sl
 80255ce:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80255d2:	d01b      	beq.n	802560c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 80255d4:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80255d8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80255dc:	fb09 fa0a 	mul.w	sl, r9, sl
 80255e0:	fb09 f004 	mul.w	r0, r9, r4
 80255e4:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80255e8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80255ec:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80255f0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80255f4:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80255f8:	4454      	add	r4, sl
 80255fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80255fe:	0a24      	lsrs	r4, r4, #8
 8025600:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025604:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8025608:	ea44 0409 	orr.w	r4, r4, r9
 802560c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025610:	d01b      	beq.n	802564a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8025612:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8025616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802561a:	fb08 f909 	mul.w	r9, r8, r9
 802561e:	fb08 f003 	mul.w	r0, r8, r3
 8025622:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025626:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802562a:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802562e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025632:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025636:	444b      	add	r3, r9
 8025638:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802563c:	0a1b      	lsrs	r3, r3, #8
 802563e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8025642:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025646:	ea43 0308 	orr.w	r3, r3, r8
 802564a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802564e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8025652:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8025656:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802565a:	fb0c f808 	mul.w	r8, ip, r8
 802565e:	8808      	ldrh	r0, [r1, #0]
 8025660:	fb0c f606 	mul.w	r6, ip, r6
 8025664:	fb05 8909 	mla	r9, r5, r9, r8
 8025668:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 802566c:	fb05 6502 	mla	r5, r5, r2, r6
 8025670:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025674:	fb07 9908 	mla	r9, r7, r8, r9
 8025678:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 802567c:	fb07 5704 	mla	r7, r7, r4, r5
 8025680:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8025684:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025688:	b2b6      	uxth	r6, r6
 802568a:	fb0e 9808 	mla	r8, lr, r8, r9
 802568e:	9a01      	ldr	r2, [sp, #4]
 8025690:	fb0e 7e03 	mla	lr, lr, r3, r7
 8025694:	1205      	asrs	r5, r0, #8
 8025696:	4372      	muls	r2, r6
 8025698:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802569c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80256a0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80256a4:	1c53      	adds	r3, r2, #1
 80256a6:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80256aa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80256ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80256b2:	ea48 0e0e 	orr.w	lr, r8, lr
 80256b6:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80256ba:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80256be:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80256c2:	b2db      	uxtb	r3, r3
 80256c4:	fb12 f206 	smulbb	r2, r2, r6
 80256c8:	fa5f fe8e 	uxtb.w	lr, lr
 80256cc:	fb14 f406 	smulbb	r4, r4, r6
 80256d0:	fb05 2503 	mla	r5, r5, r3, r2
 80256d4:	10c2      	asrs	r2, r0, #3
 80256d6:	fb1e fe06 	smulbb	lr, lr, r6
 80256da:	00c0      	lsls	r0, r0, #3
 80256dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80256e0:	b2ad      	uxth	r5, r5
 80256e2:	b2c0      	uxtb	r0, r0
 80256e4:	fb02 4203 	mla	r2, r2, r3, r4
 80256e8:	fb00 e303 	mla	r3, r0, r3, lr
 80256ec:	b294      	uxth	r4, r2
 80256ee:	b298      	uxth	r0, r3
 80256f0:	1c6b      	adds	r3, r5, #1
 80256f2:	1c62      	adds	r2, r4, #1
 80256f4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80256f8:	1c43      	adds	r3, r0, #1
 80256fa:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80256fe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025702:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025706:	0952      	lsrs	r2, r2, #5
 8025708:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802570c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025710:	432b      	orrs	r3, r5
 8025712:	4313      	orrs	r3, r2
 8025714:	800b      	strh	r3, [r1, #0]
 8025716:	b003      	add	sp, #12
 8025718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802571c:	08030159 	.word	0x08030159
 8025720:	08030726 	.word	0x08030726
 8025724:	080301dd 	.word	0x080301dd

08025728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802572c:	ed2d 8b08 	vpush	{d8-d11}
 8025730:	b09f      	sub	sp, #124	; 0x7c
 8025732:	eeb0 aa40 	vmov.f32	s20, s0
 8025736:	eef0 9a60 	vmov.f32	s19, s1
 802573a:	921b      	str	r2, [sp, #108]	; 0x6c
 802573c:	eeb0 9a41 	vmov.f32	s18, s2
 8025740:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8025742:	eeb0 8a62 	vmov.f32	s16, s5
 8025746:	9309      	str	r3, [sp, #36]	; 0x24
 8025748:	eef0 8a43 	vmov.f32	s17, s6
 802574c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8025750:	eef0 ba44 	vmov.f32	s23, s8
 8025754:	901d      	str	r0, [sp, #116]	; 0x74
 8025756:	eeb0 ba64 	vmov.f32	s22, s9
 802575a:	931c      	str	r3, [sp, #112]	; 0x70
 802575c:	eef0 aa45 	vmov.f32	s21, s10
 8025760:	6850      	ldr	r0, [r2, #4]
 8025762:	9119      	str	r1, [sp, #100]	; 0x64
 8025764:	6812      	ldr	r2, [r2, #0]
 8025766:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8025768:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 802576c:	fb00 1303 	mla	r3, r0, r3, r1
 8025770:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025774:	930c      	str	r3, [sp, #48]	; 0x30
 8025776:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	9312      	str	r3, [sp, #72]	; 0x48
 802577c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802577e:	685e      	ldr	r6, [r3, #4]
 8025780:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8025784:	3604      	adds	r6, #4
 8025786:	930d      	str	r3, [sp, #52]	; 0x34
 8025788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802578a:	2b00      	cmp	r3, #0
 802578c:	dc03      	bgt.n	8025796 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802578e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025790:	2b00      	cmp	r3, #0
 8025792:	f340 8387 	ble.w	8025ea4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025796:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025798:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802579c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257a0:	1e48      	subs	r0, r1, #1
 80257a2:	1e57      	subs	r7, r2, #1
 80257a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257a6:	2b00      	cmp	r3, #0
 80257a8:	f340 8194 	ble.w	8025ad4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80257ac:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80257ae:	142b      	asrs	r3, r5, #16
 80257b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80257b4:	d406      	bmi.n	80257c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80257b6:	4584      	cmp	ip, r0
 80257b8:	da04      	bge.n	80257c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	db02      	blt.n	80257c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80257be:	42bb      	cmp	r3, r7
 80257c0:	f2c0 8189 	blt.w	8025ad6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80257c4:	f11c 0c01 	adds.w	ip, ip, #1
 80257c8:	f100 8177 	bmi.w	8025aba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80257cc:	4561      	cmp	r1, ip
 80257ce:	f2c0 8174 	blt.w	8025aba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80257d2:	3301      	adds	r3, #1
 80257d4:	f100 8171 	bmi.w	8025aba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80257d8:	429a      	cmp	r2, r3
 80257da:	f2c0 816e 	blt.w	8025aba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80257de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80257e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80257e2:	931a      	str	r3, [sp, #104]	; 0x68
 80257e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80257e6:	2b00      	cmp	r3, #0
 80257e8:	f340 8193 	ble.w	8025b12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80257ec:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80257ee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80257f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80257f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80257fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80257fc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025800:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025802:	141b      	asrs	r3, r3, #16
 8025804:	f100 81d6 	bmi.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025808:	f100 38ff 	add.w	r8, r0, #4294967295
 802580c:	4543      	cmp	r3, r8
 802580e:	f280 81d1 	bge.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025812:	f1bc 0f00 	cmp.w	ip, #0
 8025816:	f2c0 81cd 	blt.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802581a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802581e:	45c4      	cmp	ip, r8
 8025820:	f280 81c8 	bge.w	8025bb4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025824:	b200      	sxth	r0, r0
 8025826:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025828:	fb0c 3300 	mla	r3, ip, r0, r3
 802582c:	eb04 0803 	add.w	r8, r4, r3
 8025830:	5ce3      	ldrb	r3, [r4, r3]
 8025832:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025836:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802583a:	2a00      	cmp	r2, #0
 802583c:	f000 81af 	beq.w	8025b9e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025840:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025844:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025848:	940e      	str	r4, [sp, #56]	; 0x38
 802584a:	0e24      	lsrs	r4, r4, #24
 802584c:	9415      	str	r4, [sp, #84]	; 0x54
 802584e:	b179      	cbz	r1, 8025870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025850:	eb08 0c00 	add.w	ip, r8, r0
 8025854:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025858:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802585c:	900a      	str	r0, [sp, #40]	; 0x28
 802585e:	0e00      	lsrs	r0, r0, #24
 8025860:	9013      	str	r0, [sp, #76]	; 0x4c
 8025862:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8025866:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802586a:	900f      	str	r0, [sp, #60]	; 0x3c
 802586c:	0e00      	lsrs	r0, r0, #24
 802586e:	9016      	str	r0, [sp, #88]	; 0x58
 8025870:	b292      	uxth	r2, r2
 8025872:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025874:	b289      	uxth	r1, r1
 8025876:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025878:	fb02 f901 	mul.w	r9, r2, r1
 802587c:	0112      	lsls	r2, r2, #4
 802587e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025882:	eba2 0809 	sub.w	r8, r2, r9
 8025886:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802588a:	b289      	uxth	r1, r1
 802588c:	fa1f f888 	uxth.w	r8, r8
 8025890:	1a52      	subs	r2, r2, r1
 8025892:	fb08 f000 	mul.w	r0, r8, r0
 8025896:	b292      	uxth	r2, r2
 8025898:	fb02 000e 	mla	r0, r2, lr, r0
 802589c:	fb01 0004 	mla	r0, r1, r4, r0
 80258a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80258a2:	fb09 0004 	mla	r0, r9, r4, r0
 80258a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80258aa:	2800      	cmp	r0, #0
 80258ac:	f000 80fa 	beq.w	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80258b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80258b4:	d01b      	beq.n	80258ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80258b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80258ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80258be:	fb0e fa0a 	mul.w	sl, lr, sl
 80258c2:	fb0e fe03 	mul.w	lr, lr, r3
 80258c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80258ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80258ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80258d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80258da:	4453      	add	r3, sl
 80258dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80258e0:	0a1b      	lsrs	r3, r3, #8
 80258e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80258e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80258ea:	ea43 030c 	orr.w	r3, r3, ip
 80258ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80258f0:	2cff      	cmp	r4, #255	; 0xff
 80258f2:	d021      	beq.n	8025938 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80258f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80258f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80258fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80258fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8025900:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025902:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025906:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025908:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802590c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025910:	fb04 fa0a 	mul.w	sl, r4, sl
 8025914:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025918:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802591c:	44de      	add	lr, fp
 802591e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025922:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025926:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802592a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802592e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025932:	ea4e 040a 	orr.w	r4, lr, sl
 8025936:	940e      	str	r4, [sp, #56]	; 0x38
 8025938:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802593a:	2cff      	cmp	r4, #255	; 0xff
 802593c:	d021      	beq.n	8025982 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802593e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025940:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025944:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025946:	fb04 fb0b 	mul.w	fp, r4, fp
 802594a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802594c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025950:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8025952:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025956:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802595a:	fb04 fa0a 	mul.w	sl, r4, sl
 802595e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025962:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8025966:	44de      	add	lr, fp
 8025968:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802596c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025970:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025978:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802597c:	ea4e 040a 	orr.w	r4, lr, sl
 8025980:	940a      	str	r4, [sp, #40]	; 0x28
 8025982:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025984:	2cff      	cmp	r4, #255	; 0xff
 8025986:	d021      	beq.n	80259cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8025988:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802598a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802598e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8025990:	fb04 fb0b 	mul.w	fp, r4, fp
 8025994:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025996:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802599a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802599c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80259a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80259a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80259a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80259ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80259b0:	44de      	add	lr, fp
 80259b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80259b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80259c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80259c6:	ea4e 040a 	orr.w	r4, lr, sl
 80259ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80259cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80259ce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80259d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80259d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80259da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80259dc:	fb08 fc0c 	mul.w	ip, r8, ip
 80259e0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80259e4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80259e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80259ea:	fb01 cc0e 	mla	ip, r1, lr, ip
 80259ee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80259f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80259f4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80259f8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80259fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80259fe:	fb08 f80e 	mul.w	r8, r8, lr
 8025a02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a06:	fb02 8303 	mla	r3, r2, r3, r8
 8025a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025a0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025a10:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8025a16:	fb01 330a 	mla	r3, r1, sl, r3
 8025a1a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8025a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025a20:	fb09 3901 	mla	r9, r9, r1, r3
 8025a24:	883b      	ldrh	r3, [r7, #0]
 8025a26:	4342      	muls	r2, r0
 8025a28:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a2c:	1c50      	adds	r0, r2, #1
 8025a2e:	1219      	asrs	r1, r3, #8
 8025a30:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8025a34:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025a38:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025a3c:	ea4c 0c09 	orr.w	ip, ip, r9
 8025a40:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025a44:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025a48:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025a4c:	b2c0      	uxtb	r0, r0
 8025a4e:	fb12 f204 	smulbb	r2, r2, r4
 8025a52:	fa5f fc8c 	uxtb.w	ip, ip
 8025a56:	fb1e fe04 	smulbb	lr, lr, r4
 8025a5a:	fb01 2100 	mla	r1, r1, r0, r2
 8025a5e:	10da      	asrs	r2, r3, #3
 8025a60:	fb1c fc04 	smulbb	ip, ip, r4
 8025a64:	00db      	lsls	r3, r3, #3
 8025a66:	b289      	uxth	r1, r1
 8025a68:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025a6c:	b2db      	uxtb	r3, r3
 8025a6e:	fb02 e200 	mla	r2, r2, r0, lr
 8025a72:	fb03 c300 	mla	r3, r3, r0, ip
 8025a76:	b292      	uxth	r2, r2
 8025a78:	fa1f fc83 	uxth.w	ip, r3
 8025a7c:	1c4b      	adds	r3, r1, #1
 8025a7e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025a82:	f10c 0301 	add.w	r3, ip, #1
 8025a86:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025a8a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025a8e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025a92:	430b      	orrs	r3, r1
 8025a94:	1c51      	adds	r1, r2, #1
 8025a96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025a9a:	0952      	lsrs	r2, r2, #5
 8025a9c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025aa0:	4313      	orrs	r3, r2
 8025aa2:	803b      	strh	r3, [r7, #0]
 8025aa4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025aa6:	3702      	adds	r7, #2
 8025aa8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025aaa:	441a      	add	r2, r3
 8025aac:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025aae:	441d      	add	r5, r3
 8025ab0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8025ab2:	9231      	str	r2, [sp, #196]	; 0xc4
 8025ab4:	3b01      	subs	r3, #1
 8025ab6:	931a      	str	r3, [sp, #104]	; 0x68
 8025ab8:	e694      	b.n	80257e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8025aba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025abc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025abe:	441c      	add	r4, r3
 8025ac0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025ac2:	441d      	add	r5, r3
 8025ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ac6:	9431      	str	r4, [sp, #196]	; 0xc4
 8025ac8:	3b01      	subs	r3, #1
 8025aca:	9309      	str	r3, [sp, #36]	; 0x24
 8025acc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025ace:	3302      	adds	r3, #2
 8025ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8025ad2:	e667      	b.n	80257a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025ad4:	d024      	beq.n	8025b20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ad8:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8025ada:	3b01      	subs	r3, #1
 8025adc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025ade:	fb00 4003 	mla	r0, r0, r3, r4
 8025ae2:	1400      	asrs	r0, r0, #16
 8025ae4:	f53f ae7b 	bmi.w	80257de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025ae8:	3901      	subs	r1, #1
 8025aea:	4288      	cmp	r0, r1
 8025aec:	f6bf ae77 	bge.w	80257de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025af0:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8025af2:	fb01 5303 	mla	r3, r1, r3, r5
 8025af6:	141b      	asrs	r3, r3, #16
 8025af8:	f53f ae71 	bmi.w	80257de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025afc:	3a01      	subs	r2, #1
 8025afe:	4293      	cmp	r3, r2
 8025b00:	f6bf ae6d 	bge.w	80257de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b04:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8025b08:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8025b0c:	f1bb 0f00 	cmp.w	fp, #0
 8025b10:	dc70      	bgt.n	8025bf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8025b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b14:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025b1a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8025b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025b22:	2b00      	cmp	r3, #0
 8025b24:	f340 81be 	ble.w	8025ea4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025b2c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b2e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b32:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b36:	eef0 6a48 	vmov.f32	s13, s16
 8025b3a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b3e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025b42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b46:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8025b4a:	eef0 6a68 	vmov.f32	s13, s17
 8025b4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025b52:	ee16 5a90 	vmov	r5, s13
 8025b56:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025b5a:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025b5e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025b62:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025b66:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025b6a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025b6e:	ee18 2a10 	vmov	r2, s16
 8025b72:	eeb0 8a47 	vmov.f32	s16, s14
 8025b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b7a:	ee18 2a90 	vmov	r2, s17
 8025b7e:	9333      	str	r3, [sp, #204]	; 0xcc
 8025b80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b82:	eef0 8a67 	vmov.f32	s17, s15
 8025b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8025b8a:	9334      	str	r3, [sp, #208]	; 0xd0
 8025b8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8025b8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025b90:	3b01      	subs	r3, #1
 8025b92:	9319      	str	r3, [sp, #100]	; 0x64
 8025b94:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b96:	bf08      	it	eq
 8025b98:	4613      	moveq	r3, r2
 8025b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8025b9c:	e5f4      	b.n	8025788 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025b9e:	2900      	cmp	r1, #0
 8025ba0:	f43f ae66 	beq.w	8025870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025ba4:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025ba8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025bac:	900a      	str	r0, [sp, #40]	; 0x28
 8025bae:	0e00      	lsrs	r0, r0, #24
 8025bb0:	9013      	str	r0, [sp, #76]	; 0x4c
 8025bb2:	e65d      	b.n	8025870 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025bb4:	f113 0801 	adds.w	r8, r3, #1
 8025bb8:	f53f af74 	bmi.w	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bbc:	4540      	cmp	r0, r8
 8025bbe:	f6ff af71 	blt.w	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bc2:	f11c 0801 	adds.w	r8, ip, #1
 8025bc6:	f53f af6d 	bmi.w	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bca:	45c6      	cmp	lr, r8
 8025bcc:	f6ff af6a 	blt.w	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bd0:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8025bd2:	b200      	sxth	r0, r0
 8025bd4:	9302      	str	r3, [sp, #8]
 8025bd6:	fa0f f38e 	sxth.w	r3, lr
 8025bda:	9000      	str	r0, [sp, #0]
 8025bdc:	9301      	str	r3, [sp, #4]
 8025bde:	4633      	mov	r3, r6
 8025be0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8025be2:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025be6:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025bea:	4639      	mov	r1, r7
 8025bec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025bee:	f7ff fc33 	bl	8025458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025bf2:	e757      	b.n	8025aa4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025bf4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8025bf6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025bfa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8025bfc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025c00:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8025c02:	1427      	asrs	r7, r4, #16
 8025c04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025c06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025c0a:	142b      	asrs	r3, r5, #16
 8025c0c:	fb01 7303 	mla	r3, r1, r3, r7
 8025c10:	18e7      	adds	r7, r4, r3
 8025c12:	5ce3      	ldrb	r3, [r4, r3]
 8025c14:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025c18:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025c1c:	2a00      	cmp	r2, #0
 8025c1e:	f000 8137 	beq.w	8025e90 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8025c22:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025c26:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025c2a:	9410      	str	r4, [sp, #64]	; 0x40
 8025c2c:	0e24      	lsrs	r4, r4, #24
 8025c2e:	9417      	str	r4, [sp, #92]	; 0x5c
 8025c30:	b170      	cbz	r0, 8025c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025c32:	eb07 0e01 	add.w	lr, r7, r1
 8025c36:	5c79      	ldrb	r1, [r7, r1]
 8025c38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8025c3e:	0e09      	lsrs	r1, r1, #24
 8025c40:	9114      	str	r1, [sp, #80]	; 0x50
 8025c42:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025c46:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c4a:	9111      	str	r1, [sp, #68]	; 0x44
 8025c4c:	0e09      	lsrs	r1, r1, #24
 8025c4e:	9118      	str	r1, [sp, #96]	; 0x60
 8025c50:	b292      	uxth	r2, r2
 8025c52:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8025c54:	b280      	uxth	r0, r0
 8025c56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025c58:	fb02 f800 	mul.w	r8, r2, r0
 8025c5c:	0112      	lsls	r2, r2, #4
 8025c5e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025c62:	eba2 0e08 	sub.w	lr, r2, r8
 8025c66:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8025c6a:	b280      	uxth	r0, r0
 8025c6c:	fa1f fe8e 	uxth.w	lr, lr
 8025c70:	1a12      	subs	r2, r2, r0
 8025c72:	fb0e f101 	mul.w	r1, lr, r1
 8025c76:	b292      	uxth	r2, r2
 8025c78:	fb02 110c 	mla	r1, r2, ip, r1
 8025c7c:	fb00 1104 	mla	r1, r0, r4, r1
 8025c80:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025c82:	fb08 1104 	mla	r1, r8, r4, r1
 8025c86:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025c8a:	2900      	cmp	r1, #0
 8025c8c:	f000 80f5 	beq.w	8025e7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8025c90:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8025c94:	d019      	beq.n	8025cca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8025c96:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8025c9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025c9e:	fb0c fa0a 	mul.w	sl, ip, sl
 8025ca2:	fb0c fc03 	mul.w	ip, ip, r3
 8025ca6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025caa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8025cae:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8025cb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025cb6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025cba:	4453      	add	r3, sl
 8025cbc:	0a3f      	lsrs	r7, r7, #8
 8025cbe:	0a1b      	lsrs	r3, r3, #8
 8025cc0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8025cc4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025cc8:	433b      	orrs	r3, r7
 8025cca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ccc:	2cff      	cmp	r4, #255	; 0xff
 8025cce:	d020      	beq.n	8025d12 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8025cd0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025cd2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025cd6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025cd8:	4367      	muls	r7, r4
 8025cda:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025cdc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025ce0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025ce4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8025ce6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025cea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025cee:	fb04 fa0a 	mul.w	sl, r4, sl
 8025cf2:	44bc      	add	ip, r7
 8025cf4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025cf8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025cfc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d0c:	ea4c 040a 	orr.w	r4, ip, sl
 8025d10:	9410      	str	r4, [sp, #64]	; 0x40
 8025d12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025d14:	2cff      	cmp	r4, #255	; 0xff
 8025d16:	d020      	beq.n	8025d5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8025d18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025d1a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025d1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025d20:	4367      	muls	r7, r4
 8025d22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025d24:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d28:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d2c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025d2e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025d32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d36:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d3a:	44bc      	add	ip, r7
 8025d3c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025d40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d44:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d48:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d54:	ea4c 040a 	orr.w	r4, ip, sl
 8025d58:	940b      	str	r4, [sp, #44]	; 0x2c
 8025d5a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025d5c:	2cff      	cmp	r4, #255	; 0xff
 8025d5e:	d020      	beq.n	8025da2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8025d60:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025d62:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025d66:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025d68:	4367      	muls	r7, r4
 8025d6a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025d6c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d70:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025d74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8025d76:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025d7a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d7e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d82:	44bc      	add	ip, r7
 8025d84:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025d88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d8c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025d94:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025d9c:	ea4c 040a 	orr.w	r4, ip, sl
 8025da0:	9411      	str	r4, [sp, #68]	; 0x44
 8025da2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025da4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8025da8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025dac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025db0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025db2:	fb0e f707 	mul.w	r7, lr, r7
 8025db6:	fb02 770c 	mla	r7, r2, ip, r7
 8025dba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025dbe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025dc0:	fb00 770c 	mla	r7, r0, ip, r7
 8025dc4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025dc8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025dca:	fb08 770c 	mla	r7, r8, ip, r7
 8025dce:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8025dd2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025dd4:	fb0e fe0c 	mul.w	lr, lr, ip
 8025dd8:	0a3f      	lsrs	r7, r7, #8
 8025dda:	fb02 e303 	mla	r3, r2, r3, lr
 8025dde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025de0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025de4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8025de8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8025dea:	fb00 330a 	mla	r3, r0, sl, r3
 8025dee:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8025df2:	f8b9 0000 	ldrh.w	r0, [r9]
 8025df6:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025dfc:	1202      	asrs	r2, r0, #8
 8025dfe:	434b      	muls	r3, r1
 8025e00:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e04:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025e08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025e0c:	1c59      	adds	r1, r3, #1
 8025e0e:	ea47 070c 	orr.w	r7, r7, ip
 8025e12:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025e16:	0c3b      	lsrs	r3, r7, #16
 8025e18:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025e1c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025e20:	b2ff      	uxtb	r7, r7
 8025e22:	fb13 f304 	smulbb	r3, r3, r4
 8025e26:	b2c9      	uxtb	r1, r1
 8025e28:	fb1c fc04 	smulbb	ip, ip, r4
 8025e2c:	fb02 3201 	mla	r2, r2, r1, r3
 8025e30:	10c3      	asrs	r3, r0, #3
 8025e32:	fb17 f704 	smulbb	r7, r7, r4
 8025e36:	00c0      	lsls	r0, r0, #3
 8025e38:	b292      	uxth	r2, r2
 8025e3a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025e3e:	b2c0      	uxtb	r0, r0
 8025e40:	fb03 c301 	mla	r3, r3, r1, ip
 8025e44:	f102 0c01 	add.w	ip, r2, #1
 8025e48:	fb00 7001 	mla	r0, r0, r1, r7
 8025e4c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025e50:	b280      	uxth	r0, r0
 8025e52:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8025e56:	b29b      	uxth	r3, r3
 8025e58:	1c42      	adds	r2, r0, #1
 8025e5a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025e5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025e62:	ea42 020c 	orr.w	r2, r2, ip
 8025e66:	f103 0c01 	add.w	ip, r3, #1
 8025e6a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025e6e:	095b      	lsrs	r3, r3, #5
 8025e70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025e74:	431a      	orrs	r2, r3
 8025e76:	f8a9 2000 	strh.w	r2, [r9]
 8025e7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8025e7c:	f109 0902 	add.w	r9, r9, #2
 8025e80:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8025e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025e86:	441a      	add	r2, r3
 8025e88:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8025e8a:	9231      	str	r2, [sp, #196]	; 0xc4
 8025e8c:	441d      	add	r5, r3
 8025e8e:	e63d      	b.n	8025b0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025e90:	2800      	cmp	r0, #0
 8025e92:	f43f aedd 	beq.w	8025c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025e96:	5c79      	ldrb	r1, [r7, r1]
 8025e98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025e9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8025e9e:	0e09      	lsrs	r1, r1, #24
 8025ea0:	9114      	str	r1, [sp, #80]	; 0x50
 8025ea2:	e6d5      	b.n	8025c50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025ea4:	b01f      	add	sp, #124	; 0x7c
 8025ea6:	ecbd 8b08 	vpop	{d8-d11}
 8025eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eb4:	880e      	ldrh	r6, [r1, #0]
 8025eb6:	b085      	sub	sp, #20
 8025eb8:	4691      	mov	r9, r2
 8025eba:	ea4f 2826 	mov.w	r8, r6, asr #8
 8025ebe:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8025ec2:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8025ec6:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8025eca:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8025ece:	00f6      	lsls	r6, r6, #3
 8025ed0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8025ed4:	9200      	str	r2, [sp, #0]
 8025ed6:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8025eda:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8025ede:	9201      	str	r2, [sp, #4]
 8025ee0:	b2f2      	uxtb	r2, r6
 8025ee2:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8025ee6:	9202      	str	r2, [sp, #8]
 8025ee8:	fb04 560c 	mla	r6, r4, ip, r5
 8025eec:	2c00      	cmp	r4, #0
 8025eee:	eb09 0806 	add.w	r8, r9, r6
 8025ef2:	db3f      	blt.n	8025f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025ef4:	45a6      	cmp	lr, r4
 8025ef6:	dd3d      	ble.n	8025f74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025ef8:	2d00      	cmp	r5, #0
 8025efa:	db39      	blt.n	8025f70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025efc:	45ac      	cmp	ip, r5
 8025efe:	dd37      	ble.n	8025f70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025f00:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025f04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025f08:	1c6e      	adds	r6, r5, #1
 8025f0a:	d436      	bmi.n	8025f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025f0c:	45b4      	cmp	ip, r6
 8025f0e:	dd34      	ble.n	8025f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025f10:	b3a8      	cbz	r0, 8025f7e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8025f12:	f898 6001 	ldrb.w	r6, [r8, #1]
 8025f16:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025f1a:	3401      	adds	r4, #1
 8025f1c:	d433      	bmi.n	8025f86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025f1e:	45a6      	cmp	lr, r4
 8025f20:	dd31      	ble.n	8025f86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025f22:	b39f      	cbz	r7, 8025f8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025f24:	2d00      	cmp	r5, #0
 8025f26:	eb08 0e0c 	add.w	lr, r8, ip
 8025f2a:	db2a      	blt.n	8025f82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025f2c:	45ac      	cmp	ip, r5
 8025f2e:	dd28      	ble.n	8025f82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025f30:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025f34:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025f38:	3501      	adds	r5, #1
 8025f3a:	d42a      	bmi.n	8025f92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025f3c:	45ac      	cmp	ip, r5
 8025f3e:	dd28      	ble.n	8025f92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025f40:	b348      	cbz	r0, 8025f96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8025f42:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025f46:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025f4a:	280f      	cmp	r0, #15
 8025f4c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025f50:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025f54:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025f58:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025f5c:	d801      	bhi.n	8025f62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8025f5e:	2f0f      	cmp	r7, #15
 8025f60:	d91b      	bls.n	8025f9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8025f62:	4b7e      	ldr	r3, [pc, #504]	; (802615c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025f64:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8025f68:	4a7d      	ldr	r2, [pc, #500]	; (8026160 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025f6a:	487e      	ldr	r0, [pc, #504]	; (8026164 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025f6c:	f004 ffcc 	bl	802af08 <__assert_func>
 8025f70:	2200      	movs	r2, #0
 8025f72:	e7c9      	b.n	8025f08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025f74:	2600      	movs	r6, #0
 8025f76:	4632      	mov	r2, r6
 8025f78:	e7cf      	b.n	8025f1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025f7a:	2600      	movs	r6, #0
 8025f7c:	e7cd      	b.n	8025f1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025f7e:	4606      	mov	r6, r0
 8025f80:	e7cb      	b.n	8025f1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025f82:	2400      	movs	r4, #0
 8025f84:	e7d8      	b.n	8025f38 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8025f86:	2300      	movs	r3, #0
 8025f88:	461c      	mov	r4, r3
 8025f8a:	e7de      	b.n	8025f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025f8c:	463b      	mov	r3, r7
 8025f8e:	463c      	mov	r4, r7
 8025f90:	e7db      	b.n	8025f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025f92:	2300      	movs	r3, #0
 8025f94:	e7d9      	b.n	8025f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025f96:	4603      	mov	r3, r0
 8025f98:	e7d7      	b.n	8025f4a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025f9a:	b280      	uxth	r0, r0
 8025f9c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8025fa0:	b2bf      	uxth	r7, r7
 8025fa2:	fb00 fe07 	mul.w	lr, r0, r7
 8025fa6:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8025faa:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8025fae:	eba0 0c0e 	sub.w	ip, r0, lr
 8025fb2:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8025fb6:	b2bf      	uxth	r7, r7
 8025fb8:	fa1f fc8c 	uxth.w	ip, ip
 8025fbc:	eba5 0507 	sub.w	r5, r5, r7
 8025fc0:	fb0c f00a 	mul.w	r0, ip, sl
 8025fc4:	b2ad      	uxth	r5, r5
 8025fc6:	fb05 000b 	mla	r0, r5, fp, r0
 8025fca:	fb07 0009 	mla	r0, r7, r9, r0
 8025fce:	fb0e 0008 	mla	r0, lr, r8, r0
 8025fd2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8025fd6:	9003      	str	r0, [sp, #12]
 8025fd8:	d018      	beq.n	802600c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8025fda:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8025fde:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025fe2:	fb0b f000 	mul.w	r0, fp, r0
 8025fe6:	fb0b fb02 	mul.w	fp, fp, r2
 8025fea:	0a02      	lsrs	r2, r0, #8
 8025fec:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8025ff0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8025ff4:	4402      	add	r2, r0
 8025ff6:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8025ffa:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8025ffe:	0a12      	lsrs	r2, r2, #8
 8026000:	0a00      	lsrs	r0, r0, #8
 8026002:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026006:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802600a:	4302      	orrs	r2, r0
 802600c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8026010:	d019      	beq.n	8026046 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8026012:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8026016:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802601a:	fb0a fb0b 	mul.w	fp, sl, fp
 802601e:	fb0a fa06 	mul.w	sl, sl, r6
 8026022:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026026:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802602a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802602e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026032:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026036:	445e      	add	r6, fp
 8026038:	0a00      	lsrs	r0, r0, #8
 802603a:	0a36      	lsrs	r6, r6, #8
 802603c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026040:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8026044:	4306      	orrs	r6, r0
 8026046:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802604a:	d019      	beq.n	8026080 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 802604c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8026050:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026054:	fb09 fa0a 	mul.w	sl, r9, sl
 8026058:	fb09 f904 	mul.w	r9, r9, r4
 802605c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8026060:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026064:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8026068:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802606c:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8026070:	4454      	add	r4, sl
 8026072:	0a00      	lsrs	r0, r0, #8
 8026074:	0a24      	lsrs	r4, r4, #8
 8026076:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802607a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802607e:	4304      	orrs	r4, r0
 8026080:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026084:	d019      	beq.n	80260ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8026086:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802608a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802608e:	fb08 f909 	mul.w	r9, r8, r9
 8026092:	fb08 f803 	mul.w	r8, r8, r3
 8026096:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802609a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 802609e:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80260a2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260a6:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80260aa:	444b      	add	r3, r9
 80260ac:	0a00      	lsrs	r0, r0, #8
 80260ae:	0a1b      	lsrs	r3, r3, #8
 80260b0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80260b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80260b8:	4303      	orrs	r3, r0
 80260ba:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80260be:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80260c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80260c6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80260ca:	fb0c f808 	mul.w	r8, ip, r8
 80260ce:	fb0c f606 	mul.w	r6, ip, r6
 80260d2:	fb05 8800 	mla	r8, r5, r0, r8
 80260d6:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 80260da:	fb05 6202 	mla	r2, r5, r2, r6
 80260de:	9d00      	ldr	r5, [sp, #0]
 80260e0:	fb07 8800 	mla	r8, r7, r0, r8
 80260e4:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 80260e8:	fb0e 8000 	mla	r0, lr, r0, r8
 80260ec:	0a00      	lsrs	r0, r0, #8
 80260ee:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 80260f2:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 80260f6:	fb07 2700 	mla	r7, r7, r0, r2
 80260fa:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 80260fe:	9b03      	ldr	r3, [sp, #12]
 8026100:	fb0e 7000 	mla	r0, lr, r0, r7
 8026104:	9a02      	ldr	r2, [sp, #8]
 8026106:	43dc      	mvns	r4, r3
 8026108:	9b01      	ldr	r3, [sp, #4]
 802610a:	0a00      	lsrs	r0, r0, #8
 802610c:	b2e4      	uxtb	r4, r4
 802610e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026112:	4363      	muls	r3, r4
 8026114:	4365      	muls	r5, r4
 8026116:	ea48 0000 	orr.w	r0, r8, r0
 802611a:	4362      	muls	r2, r4
 802611c:	1c5e      	adds	r6, r3, #1
 802611e:	4614      	mov	r4, r2
 8026120:	1c6a      	adds	r2, r5, #1
 8026122:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026126:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802612a:	0a03      	lsrs	r3, r0, #8
 802612c:	0c02      	lsrs	r2, r0, #16
 802612e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026132:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026136:	00db      	lsls	r3, r3, #3
 8026138:	0212      	lsls	r2, r2, #8
 802613a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802613e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026142:	4313      	orrs	r3, r2
 8026144:	1c62      	adds	r2, r4, #1
 8026146:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802614a:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802614e:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8026152:	4318      	orrs	r0, r3
 8026154:	8008      	strh	r0, [r1, #0]
 8026156:	b005      	add	sp, #20
 8026158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802615c:	08030159 	.word	0x08030159
 8026160:	08030726 	.word	0x08030726
 8026164:	080301dd 	.word	0x080301dd

08026168 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802616c:	ed2d 8b08 	vpush	{d8-d11}
 8026170:	b09b      	sub	sp, #108	; 0x6c
 8026172:	eeb0 aa40 	vmov.f32	s20, s0
 8026176:	eef0 9a60 	vmov.f32	s19, s1
 802617a:	9218      	str	r2, [sp, #96]	; 0x60
 802617c:	eeb0 9a41 	vmov.f32	s18, s2
 8026180:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8026182:	eeb0 8a62 	vmov.f32	s16, s5
 8026186:	9019      	str	r0, [sp, #100]	; 0x64
 8026188:	eef0 8a43 	vmov.f32	s17, s6
 802618c:	6850      	ldr	r0, [r2, #4]
 802618e:	eef0 ba44 	vmov.f32	s23, s8
 8026192:	9116      	str	r1, [sp, #88]	; 0x58
 8026194:	eeb0 ba64 	vmov.f32	s22, s9
 8026198:	9307      	str	r3, [sp, #28]
 802619a:	eef0 aa45 	vmov.f32	s21, s10
 802619e:	6812      	ldr	r2, [r2, #0]
 80261a0:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80261a2:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80261a6:	fb00 1303 	mla	r3, r0, r3, r1
 80261aa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80261ae:	930a      	str	r3, [sp, #40]	; 0x28
 80261b0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80261b2:	681b      	ldr	r3, [r3, #0]
 80261b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80261b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80261b8:	685e      	ldr	r6, [r3, #4]
 80261ba:	3604      	adds	r6, #4
 80261bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80261be:	2b00      	cmp	r3, #0
 80261c0:	dc03      	bgt.n	80261ca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80261c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80261c4:	2b00      	cmp	r3, #0
 80261c6:	f340 8373 	ble.w	80268b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80261ca:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80261cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80261d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80261d4:	1e48      	subs	r0, r1, #1
 80261d6:	1e57      	subs	r7, r2, #1
 80261d8:	9b07      	ldr	r3, [sp, #28]
 80261da:	2b00      	cmp	r3, #0
 80261dc:	f340 818f 	ble.w	80264fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80261e0:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80261e2:	142b      	asrs	r3, r5, #16
 80261e4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80261e8:	d406      	bmi.n	80261f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80261ea:	4584      	cmp	ip, r0
 80261ec:	da04      	bge.n	80261f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80261ee:	2b00      	cmp	r3, #0
 80261f0:	db02      	blt.n	80261f8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80261f2:	42bb      	cmp	r3, r7
 80261f4:	f2c0 8184 	blt.w	8026500 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80261f8:	f11c 0c01 	adds.w	ip, ip, #1
 80261fc:	f100 8172 	bmi.w	80264e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026200:	4561      	cmp	r1, ip
 8026202:	f2c0 816f 	blt.w	80264e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026206:	3301      	adds	r3, #1
 8026208:	f100 816c 	bmi.w	80264e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802620c:	429a      	cmp	r2, r3
 802620e:	f2c0 8169 	blt.w	80264e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026212:	9b07      	ldr	r3, [sp, #28]
 8026214:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8026216:	9317      	str	r3, [sp, #92]	; 0x5c
 8026218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802621a:	2b00      	cmp	r3, #0
 802621c:	f340 818e 	ble.w	802653c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8026220:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026222:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026226:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802622a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802622e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8026230:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026234:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026236:	141b      	asrs	r3, r3, #16
 8026238:	f100 81d1 	bmi.w	80265de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802623c:	f101 38ff 	add.w	r8, r1, #4294967295
 8026240:	4543      	cmp	r3, r8
 8026242:	f280 81cc 	bge.w	80265de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026246:	f1bc 0f00 	cmp.w	ip, #0
 802624a:	f2c0 81c8 	blt.w	80265de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802624e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026252:	45c4      	cmp	ip, r8
 8026254:	f280 81c3 	bge.w	80265de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8026258:	b209      	sxth	r1, r1
 802625a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802625c:	fb0c 3301 	mla	r3, ip, r1, r3
 8026260:	eb04 0803 	add.w	r8, r4, r3
 8026264:	5ce3      	ldrb	r3, [r4, r3]
 8026266:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802626a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802626e:	2a00      	cmp	r2, #0
 8026270:	f000 81aa 	beq.w	80265c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8026274:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026278:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 802627c:	940b      	str	r4, [sp, #44]	; 0x2c
 802627e:	0e24      	lsrs	r4, r4, #24
 8026280:	9412      	str	r4, [sp, #72]	; 0x48
 8026282:	b178      	cbz	r0, 80262a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8026284:	eb08 0c01 	add.w	ip, r8, r1
 8026288:	f818 1001 	ldrb.w	r1, [r8, r1]
 802628c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026290:	9108      	str	r1, [sp, #32]
 8026292:	0e09      	lsrs	r1, r1, #24
 8026294:	9110      	str	r1, [sp, #64]	; 0x40
 8026296:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802629a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802629e:	910c      	str	r1, [sp, #48]	; 0x30
 80262a0:	0e09      	lsrs	r1, r1, #24
 80262a2:	9113      	str	r1, [sp, #76]	; 0x4c
 80262a4:	b292      	uxth	r2, r2
 80262a6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80262a8:	b280      	uxth	r0, r0
 80262aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80262ac:	fb02 f900 	mul.w	r9, r2, r0
 80262b0:	0112      	lsls	r2, r2, #4
 80262b2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80262b6:	eba2 0809 	sub.w	r8, r2, r9
 80262ba:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80262be:	b280      	uxth	r0, r0
 80262c0:	fa1f f888 	uxth.w	r8, r8
 80262c4:	1a12      	subs	r2, r2, r0
 80262c6:	fb08 f101 	mul.w	r1, r8, r1
 80262ca:	b292      	uxth	r2, r2
 80262cc:	fb02 110e 	mla	r1, r2, lr, r1
 80262d0:	fb00 1104 	mla	r1, r0, r4, r1
 80262d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80262d6:	fb09 1104 	mla	r1, r9, r4, r1
 80262da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80262de:	2900      	cmp	r1, #0
 80262e0:	f000 80f5 	beq.w	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80262e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80262e8:	d01b      	beq.n	8026322 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80262ea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80262ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262f2:	fb0e fa0a 	mul.w	sl, lr, sl
 80262f6:	fb0e fe03 	mul.w	lr, lr, r3
 80262fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80262fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8026302:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8026306:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802630a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802630e:	4453      	add	r3, sl
 8026310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026314:	0a1b      	lsrs	r3, r3, #8
 8026316:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802631a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802631e:	ea43 030c 	orr.w	r3, r3, ip
 8026322:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026324:	2cff      	cmp	r4, #255	; 0xff
 8026326:	d021      	beq.n	802636c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026328:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802632a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802632e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8026330:	fb04 fb0b 	mul.w	fp, r4, fp
 8026334:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026336:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802633a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802633c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026340:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8026344:	fb04 fa0a 	mul.w	sl, r4, sl
 8026348:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802634c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8026350:	44de      	add	lr, fp
 8026352:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026356:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802635a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802635e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026362:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026366:	ea4e 040a 	orr.w	r4, lr, sl
 802636a:	940b      	str	r4, [sp, #44]	; 0x2c
 802636c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802636e:	2cff      	cmp	r4, #255	; 0xff
 8026370:	d021      	beq.n	80263b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026372:	9c08      	ldr	r4, [sp, #32]
 8026374:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8026378:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802637a:	fb04 fb0b 	mul.w	fp, r4, fp
 802637e:	9c08      	ldr	r4, [sp, #32]
 8026380:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026384:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8026386:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802638a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802638e:	fb04 fa0a 	mul.w	sl, r4, sl
 8026392:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8026396:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802639a:	44de      	add	lr, fp
 802639c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263b0:	ea4e 040a 	orr.w	r4, lr, sl
 80263b4:	9408      	str	r4, [sp, #32]
 80263b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263b8:	2cff      	cmp	r4, #255	; 0xff
 80263ba:	d021      	beq.n	8026400 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80263bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80263be:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80263c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263c4:	fb04 fb0b 	mul.w	fp, r4, fp
 80263c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80263ca:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80263ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80263d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80263d8:	fb04 fa0a 	mul.w	sl, r4, sl
 80263dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80263e4:	44de      	add	lr, fp
 80263e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80263f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80263fa:	ea4e 040a 	orr.w	r4, lr, sl
 80263fe:	940c      	str	r4, [sp, #48]	; 0x30
 8026400:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026402:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8026406:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802640a:	43c9      	mvns	r1, r1
 802640c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026410:	9c08      	ldr	r4, [sp, #32]
 8026412:	fb08 fc0c 	mul.w	ip, r8, ip
 8026416:	fb02 cc0e 	mla	ip, r2, lr, ip
 802641a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802641e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026420:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026424:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8026428:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802642a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802642e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8026432:	fb08 f80e 	mul.w	r8, r8, lr
 8026436:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802643a:	fa5f fe81 	uxtb.w	lr, r1
 802643e:	fb02 8303 	mla	r3, r2, r3, r8
 8026442:	9a08      	ldr	r2, [sp, #32]
 8026444:	f8b7 8000 	ldrh.w	r8, [r7]
 8026448:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802644c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8026450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026452:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8026456:	fb00 330a 	mla	r3, r0, sl, r3
 802645a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802645e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8026462:	fb09 3900 	mla	r9, r9, r0, r3
 8026466:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802646a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802646e:	b2c9      	uxtb	r1, r1
 8026470:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026474:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026478:	fb02 f20e 	mul.w	r2, r2, lr
 802647c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026480:	fb00 f00e 	mul.w	r0, r0, lr
 8026484:	1c53      	adds	r3, r2, #1
 8026486:	fb01 f10e 	mul.w	r1, r1, lr
 802648a:	ea4c 0c09 	orr.w	ip, ip, r9
 802648e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8026492:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8026496:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802649a:	4a60      	ldr	r2, [pc, #384]	; (802661c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 802649c:	b2db      	uxtb	r3, r3
 802649e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80264a2:	1c43      	adds	r3, r0, #1
 80264a4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80264a8:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80264ac:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80264b0:	00db      	lsls	r3, r3, #3
 80264b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80264b6:	4313      	orrs	r3, r2
 80264b8:	1c4a      	adds	r2, r1, #1
 80264ba:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80264be:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80264c2:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80264c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80264ca:	f8a7 c000 	strh.w	ip, [r7]
 80264ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80264d0:	3702      	adds	r7, #2
 80264d2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80264d4:	441a      	add	r2, r3
 80264d6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264d8:	441d      	add	r5, r3
 80264da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80264dc:	922d      	str	r2, [sp, #180]	; 0xb4
 80264de:	3b01      	subs	r3, #1
 80264e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80264e2:	e699      	b.n	8026218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80264e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80264e6:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80264e8:	441c      	add	r4, r3
 80264ea:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80264ec:	441d      	add	r5, r3
 80264ee:	9b07      	ldr	r3, [sp, #28]
 80264f0:	942d      	str	r4, [sp, #180]	; 0xb4
 80264f2:	3b01      	subs	r3, #1
 80264f4:	9307      	str	r3, [sp, #28]
 80264f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80264f8:	3302      	adds	r3, #2
 80264fa:	930a      	str	r3, [sp, #40]	; 0x28
 80264fc:	e66c      	b.n	80261d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80264fe:	d024      	beq.n	802654a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8026500:	9b07      	ldr	r3, [sp, #28]
 8026502:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8026504:	3b01      	subs	r3, #1
 8026506:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026508:	fb00 4003 	mla	r0, r0, r3, r4
 802650c:	1400      	asrs	r0, r0, #16
 802650e:	f53f ae80 	bmi.w	8026212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026512:	3901      	subs	r1, #1
 8026514:	4288      	cmp	r0, r1
 8026516:	f6bf ae7c 	bge.w	8026212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802651a:	9930      	ldr	r1, [sp, #192]	; 0xc0
 802651c:	fb01 5303 	mla	r3, r1, r3, r5
 8026520:	141b      	asrs	r3, r3, #16
 8026522:	f53f ae76 	bmi.w	8026212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026526:	3a01      	subs	r2, #1
 8026528:	4293      	cmp	r3, r2
 802652a:	f6bf ae72 	bge.w	8026212 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802652e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026532:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8026536:	f1bb 0f00 	cmp.w	fp, #0
 802653a:	dc71      	bgt.n	8026620 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802653c:	9b07      	ldr	r3, [sp, #28]
 802653e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026544:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026548:	930a      	str	r3, [sp, #40]	; 0x28
 802654a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802654c:	2b00      	cmp	r3, #0
 802654e:	f340 81af 	ble.w	80268b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8026552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026556:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026558:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802655c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8026560:	eef0 6a48 	vmov.f32	s13, s16
 8026564:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026568:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802656c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026570:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8026574:	eef0 6a68 	vmov.f32	s13, s17
 8026578:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802657c:	ee16 5a90 	vmov	r5, s13
 8026580:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026584:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026588:	ee37 8a48 	vsub.f32	s16, s14, s16
 802658c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026590:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026594:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026598:	ee18 2a10 	vmov	r2, s16
 802659c:	eeb0 8a47 	vmov.f32	s16, s14
 80265a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80265a4:	ee18 2a90 	vmov	r2, s17
 80265a8:	932f      	str	r3, [sp, #188]	; 0xbc
 80265aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80265ac:	eef0 8a67 	vmov.f32	s17, s15
 80265b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80265b4:	9330      	str	r3, [sp, #192]	; 0xc0
 80265b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80265b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80265ba:	3b01      	subs	r3, #1
 80265bc:	9316      	str	r3, [sp, #88]	; 0x58
 80265be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80265c0:	bf08      	it	eq
 80265c2:	4613      	moveq	r3, r2
 80265c4:	9307      	str	r3, [sp, #28]
 80265c6:	e5f9      	b.n	80261bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80265c8:	2800      	cmp	r0, #0
 80265ca:	f43f ae6b 	beq.w	80262a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80265ce:	f818 1001 	ldrb.w	r1, [r8, r1]
 80265d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80265d6:	9108      	str	r1, [sp, #32]
 80265d8:	0e09      	lsrs	r1, r1, #24
 80265da:	9110      	str	r1, [sp, #64]	; 0x40
 80265dc:	e662      	b.n	80262a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80265de:	f113 0801 	adds.w	r8, r3, #1
 80265e2:	f53f af74 	bmi.w	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80265e6:	4541      	cmp	r1, r8
 80265e8:	f6ff af71 	blt.w	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80265ec:	f11c 0801 	adds.w	r8, ip, #1
 80265f0:	f53f af6d 	bmi.w	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80265f4:	45c6      	cmp	lr, r8
 80265f6:	f6ff af6a 	blt.w	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80265fa:	b209      	sxth	r1, r1
 80265fc:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026600:	fa0f f38e 	sxth.w	r3, lr
 8026604:	9100      	str	r1, [sp, #0]
 8026606:	4639      	mov	r1, r7
 8026608:	9301      	str	r3, [sp, #4]
 802660a:	4633      	mov	r3, r6
 802660c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026610:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026612:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026614:	f7ff fc4c 	bl	8025eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026618:	e759      	b.n	80264ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802661a:	bf00      	nop
 802661c:	fffff800 	.word	0xfffff800
 8026620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8026622:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026626:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8026628:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802662c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802662e:	1427      	asrs	r7, r4, #16
 8026630:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8026632:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026636:	142b      	asrs	r3, r5, #16
 8026638:	fb01 7303 	mla	r3, r1, r3, r7
 802663c:	18e7      	adds	r7, r4, r3
 802663e:	5ce3      	ldrb	r3, [r4, r3]
 8026640:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026644:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026648:	2a00      	cmp	r2, #0
 802664a:	f000 8127 	beq.w	802689c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802664e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026652:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026656:	940d      	str	r4, [sp, #52]	; 0x34
 8026658:	0e24      	lsrs	r4, r4, #24
 802665a:	9414      	str	r4, [sp, #80]	; 0x50
 802665c:	b170      	cbz	r0, 802667c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802665e:	eb07 0e01 	add.w	lr, r7, r1
 8026662:	5c79      	ldrb	r1, [r7, r1]
 8026664:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026668:	9109      	str	r1, [sp, #36]	; 0x24
 802666a:	0e09      	lsrs	r1, r1, #24
 802666c:	9111      	str	r1, [sp, #68]	; 0x44
 802666e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026672:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026676:	910e      	str	r1, [sp, #56]	; 0x38
 8026678:	0e09      	lsrs	r1, r1, #24
 802667a:	9115      	str	r1, [sp, #84]	; 0x54
 802667c:	b292      	uxth	r2, r2
 802667e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026680:	b280      	uxth	r0, r0
 8026682:	fb02 f800 	mul.w	r8, r2, r0
 8026686:	0112      	lsls	r2, r2, #4
 8026688:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802668c:	eba2 0e08 	sub.w	lr, r2, r8
 8026690:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8026694:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026696:	b280      	uxth	r0, r0
 8026698:	fa1f fe8e 	uxth.w	lr, lr
 802669c:	1a09      	subs	r1, r1, r0
 802669e:	fb0e f202 	mul.w	r2, lr, r2
 80266a2:	b289      	uxth	r1, r1
 80266a4:	fb01 220c 	mla	r2, r1, ip, r2
 80266a8:	fb00 2204 	mla	r2, r0, r4, r2
 80266ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80266ae:	fb08 2204 	mla	r2, r8, r4, r2
 80266b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80266b6:	2a00      	cmp	r2, #0
 80266b8:	f000 80e5 	beq.w	8026886 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80266bc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80266c0:	d019      	beq.n	80266f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80266c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80266c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80266ca:	fb0c fa0a 	mul.w	sl, ip, sl
 80266ce:	fb0c fc03 	mul.w	ip, ip, r3
 80266d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80266d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80266da:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80266de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266e2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80266e6:	4453      	add	r3, sl
 80266e8:	0a3f      	lsrs	r7, r7, #8
 80266ea:	0a1b      	lsrs	r3, r3, #8
 80266ec:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80266f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80266f4:	433b      	orrs	r3, r7
 80266f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80266f8:	2cff      	cmp	r4, #255	; 0xff
 80266fa:	d020      	beq.n	802673e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 80266fc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80266fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026702:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026704:	4367      	muls	r7, r4
 8026706:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026708:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802670c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026710:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8026712:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8026716:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802671a:	fb04 fa0a 	mul.w	sl, r4, sl
 802671e:	44bc      	add	ip, r7
 8026720:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8026724:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026728:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802672c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026730:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026734:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026738:	ea4c 040a 	orr.w	r4, ip, sl
 802673c:	940d      	str	r4, [sp, #52]	; 0x34
 802673e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8026740:	2cff      	cmp	r4, #255	; 0xff
 8026742:	d020      	beq.n	8026786 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8026744:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026746:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802674a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802674c:	4367      	muls	r7, r4
 802674e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8026750:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026754:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8026758:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802675a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802675e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026762:	fb04 fa0a 	mul.w	sl, r4, sl
 8026766:	44bc      	add	ip, r7
 8026768:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802676c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026770:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026774:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8026778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802677c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026780:	ea4c 040a 	orr.w	r4, ip, sl
 8026784:	9409      	str	r4, [sp, #36]	; 0x24
 8026786:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026788:	2cff      	cmp	r4, #255	; 0xff
 802678a:	d020      	beq.n	80267ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 802678c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802678e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8026792:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8026794:	4367      	muls	r7, r4
 8026796:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026798:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802679c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80267a0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80267a2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80267a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267aa:	fb04 fa0a 	mul.w	sl, r4, sl
 80267ae:	44bc      	add	ip, r7
 80267b0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80267b4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267b8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80267c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80267c8:	ea4c 040a 	orr.w	r4, ip, sl
 80267cc:	940e      	str	r4, [sp, #56]	; 0x38
 80267ce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267d0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80267d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80267d8:	43d2      	mvns	r2, r2
 80267da:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80267de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80267e0:	b2d2      	uxtb	r2, r2
 80267e2:	fb0e f707 	mul.w	r7, lr, r7
 80267e6:	fb01 770c 	mla	r7, r1, ip, r7
 80267ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80267ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80267f0:	fb00 770c 	mla	r7, r0, ip, r7
 80267f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80267f8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80267fa:	fb08 770c 	mla	r7, r8, ip, r7
 80267fe:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8026802:	fb0e fe0c 	mul.w	lr, lr, ip
 8026806:	0a3f      	lsrs	r7, r7, #8
 8026808:	fb01 e303 	mla	r3, r1, r3, lr
 802680c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802680e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8026812:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8026816:	990e      	ldr	r1, [sp, #56]	; 0x38
 8026818:	fb00 330a 	mla	r3, r0, sl, r3
 802681c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8026820:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026824:	f8b9 3000 	ldrh.w	r3, [r9]
 8026828:	1218      	asrs	r0, r3, #8
 802682a:	10d9      	asrs	r1, r3, #3
 802682c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026830:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026834:	00db      	lsls	r3, r3, #3
 8026836:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802683a:	4350      	muls	r0, r2
 802683c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026840:	b2db      	uxtb	r3, r3
 8026842:	4351      	muls	r1, r2
 8026844:	ea47 070c 	orr.w	r7, r7, ip
 8026848:	4353      	muls	r3, r2
 802684a:	1c42      	adds	r2, r0, #1
 802684c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026850:	0c3a      	lsrs	r2, r7, #16
 8026852:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026856:	4a19      	ldr	r2, [pc, #100]	; (80268bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8026858:	b2c0      	uxtb	r0, r0
 802685a:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802685e:	1c4a      	adds	r2, r1, #1
 8026860:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026864:	0a3a      	lsrs	r2, r7, #8
 8026866:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802686a:	00c9      	lsls	r1, r1, #3
 802686c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026870:	4301      	orrs	r1, r0
 8026872:	1c58      	adds	r0, r3, #1
 8026874:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026878:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 802687c:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8026880:	4308      	orrs	r0, r1
 8026882:	f8a9 0000 	strh.w	r0, [r9]
 8026886:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8026888:	f109 0902 	add.w	r9, r9, #2
 802688c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802688e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026892:	441a      	add	r2, r3
 8026894:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026896:	922d      	str	r2, [sp, #180]	; 0xb4
 8026898:	441d      	add	r5, r3
 802689a:	e64c      	b.n	8026536 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 802689c:	2800      	cmp	r0, #0
 802689e:	f43f aeed 	beq.w	802667c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80268a2:	5c79      	ldrb	r1, [r7, r1]
 80268a4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80268a8:	9109      	str	r1, [sp, #36]	; 0x24
 80268aa:	0e09      	lsrs	r1, r1, #24
 80268ac:	9111      	str	r1, [sp, #68]	; 0x44
 80268ae:	e6e5      	b.n	802667c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80268b0:	b01b      	add	sp, #108	; 0x6c
 80268b2:	ecbd 8b08 	vpop	{d8-d11}
 80268b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268ba:	bf00      	nop
 80268bc:	fffff800 	.word	0xfffff800

080268c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80268c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268c4:	b085      	sub	sp, #20
 80268c6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80268ca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80268ce:	9103      	str	r1, [sp, #12]
 80268d0:	2d00      	cmp	r5, #0
 80268d2:	fb05 7106 	mla	r1, r5, r6, r7
 80268d6:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80268da:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80268de:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80268e2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80268e6:	eb03 0901 	add.w	r9, r3, r1
 80268ea:	9401      	str	r4, [sp, #4]
 80268ec:	f2c0 80c0 	blt.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80268f0:	45a8      	cmp	r8, r5
 80268f2:	f340 80bd 	ble.w	8026a70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80268f6:	2f00      	cmp	r7, #0
 80268f8:	f2c0 80b6 	blt.w	8026a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 80268fc:	42be      	cmp	r6, r7
 80268fe:	f340 80b3 	ble.w	8026a68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8026902:	f813 c001 	ldrb.w	ip, [r3, r1]
 8026906:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802690a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802690e:	d019      	beq.n	8026944 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8026910:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8026914:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026918:	435a      	muls	r2, r3
 802691a:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802691e:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8026922:	fb0c f403 	mul.w	r4, ip, r3
 8026926:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802692a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802692e:	441a      	add	r2, r3
 8026930:	f104 0320 	add.w	r3, r4, #32
 8026934:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026938:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 802693c:	0a1b      	lsrs	r3, r3, #8
 802693e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026942:	4319      	orrs	r1, r3
 8026944:	b289      	uxth	r1, r1
 8026946:	1c7b      	adds	r3, r7, #1
 8026948:	f100 8097 	bmi.w	8026a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802694c:	429e      	cmp	r6, r3
 802694e:	f340 8094 	ble.w	8026a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8026952:	2800      	cmp	r0, #0
 8026954:	f000 8094 	beq.w	8026a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8026958:	f899 4001 	ldrb.w	r4, [r9, #1]
 802695c:	9b01      	ldr	r3, [sp, #4]
 802695e:	2cff      	cmp	r4, #255	; 0xff
 8026960:	885b      	ldrh	r3, [r3, #2]
 8026962:	d01b      	beq.n	802699c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8026964:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8026968:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 802696c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026970:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026974:	fb0a f202 	mul.w	r2, sl, r2
 8026978:	fb04 fa03 	mul.w	sl, r4, r3
 802697c:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8026980:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026984:	441a      	add	r2, r3
 8026986:	f10a 0320 	add.w	r3, sl, #32
 802698a:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802698e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8026992:	0a1b      	lsrs	r3, r3, #8
 8026994:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026998:	ea4b 0303 	orr.w	r3, fp, r3
 802699c:	b29b      	uxth	r3, r3
 802699e:	3501      	adds	r5, #1
 80269a0:	d474      	bmi.n	8026a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80269a2:	45a8      	cmp	r8, r5
 80269a4:	dd72      	ble.n	8026a8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80269a6:	f1be 0f00 	cmp.w	lr, #0
 80269aa:	f000 8120 	beq.w	8026bee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80269ae:	2f00      	cmp	r7, #0
 80269b0:	db69      	blt.n	8026a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80269b2:	42be      	cmp	r6, r7
 80269b4:	dd67      	ble.n	8026a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80269b6:	f819 5006 	ldrb.w	r5, [r9, r6]
 80269ba:	9a01      	ldr	r2, [sp, #4]
 80269bc:	2dff      	cmp	r5, #255	; 0xff
 80269be:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80269c2:	d01c      	beq.n	80269fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80269c4:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80269c8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80269cc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80269d0:	fb08 f802 	mul.w	r8, r8, r2
 80269d4:	fb05 fa0b 	mul.w	sl, r5, fp
 80269d8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80269dc:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80269e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80269e4:	4490      	add	r8, r2
 80269e6:	f10a 0220 	add.w	r2, sl, #32
 80269ea:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80269ee:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80269f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80269f6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80269fa:	ea4b 0b0a 	orr.w	fp, fp, sl
 80269fe:	fa1f fb8b 	uxth.w	fp, fp
 8026a02:	3701      	adds	r7, #1
 8026a04:	d447      	bmi.n	8026a96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026a06:	42be      	cmp	r6, r7
 8026a08:	dd45      	ble.n	8026a96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026a0a:	2800      	cmp	r0, #0
 8026a0c:	d046      	beq.n	8026a9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8026a0e:	3601      	adds	r6, #1
 8026a10:	9a01      	ldr	r2, [sp, #4]
 8026a12:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026a16:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026a1a:	2fff      	cmp	r7, #255	; 0xff
 8026a1c:	d01a      	beq.n	8026a54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8026a1e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8026a22:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026a26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a2a:	fb08 f806 	mul.w	r8, r8, r6
 8026a2e:	fb07 f902 	mul.w	r9, r7, r2
 8026a32:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026a36:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026a3a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026a3e:	44b0      	add	r8, r6
 8026a40:	f109 0620 	add.w	r6, r9, #32
 8026a44:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026a48:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026a4c:	0a36      	lsrs	r6, r6, #8
 8026a4e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8026a52:	4332      	orrs	r2, r6
 8026a54:	b292      	uxth	r2, r2
 8026a56:	280f      	cmp	r0, #15
 8026a58:	d922      	bls.n	8026aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8026a5a:	4b69      	ldr	r3, [pc, #420]	; (8026c00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8026a5c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8026a60:	4a68      	ldr	r2, [pc, #416]	; (8026c04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8026a62:	4869      	ldr	r0, [pc, #420]	; (8026c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8026a64:	f004 fa50 	bl	802af08 <__assert_func>
 8026a68:	f04f 0c00 	mov.w	ip, #0
 8026a6c:	4661      	mov	r1, ip
 8026a6e:	e76a      	b.n	8026946 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8026a70:	2400      	movs	r4, #0
 8026a72:	46a4      	mov	ip, r4
 8026a74:	4623      	mov	r3, r4
 8026a76:	4621      	mov	r1, r4
 8026a78:	e791      	b.n	802699e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026a7a:	2400      	movs	r4, #0
 8026a7c:	4623      	mov	r3, r4
 8026a7e:	e78e      	b.n	802699e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026a80:	4604      	mov	r4, r0
 8026a82:	4603      	mov	r3, r0
 8026a84:	e78b      	b.n	802699e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026a86:	2500      	movs	r5, #0
 8026a88:	46ab      	mov	fp, r5
 8026a8a:	e7ba      	b.n	8026a02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8026a8c:	2700      	movs	r7, #0
 8026a8e:	463d      	mov	r5, r7
 8026a90:	463a      	mov	r2, r7
 8026a92:	46bb      	mov	fp, r7
 8026a94:	e7df      	b.n	8026a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026a96:	2700      	movs	r7, #0
 8026a98:	463a      	mov	r2, r7
 8026a9a:	e7dc      	b.n	8026a56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026a9c:	4607      	mov	r7, r0
 8026a9e:	4602      	mov	r2, r0
 8026aa0:	f1be 0f0f 	cmp.w	lr, #15
 8026aa4:	d8d9      	bhi.n	8026a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026aa6:	b286      	uxth	r6, r0
 8026aa8:	fa1f f98e 	uxth.w	r9, lr
 8026aac:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026ab0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ab4:	fb06 f809 	mul.w	r8, r6, r9
 8026ab8:	0136      	lsls	r6, r6, #4
 8026aba:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026abe:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026ac2:	9601      	str	r6, [sp, #4]
 8026ac4:	ea4a 0101 	orr.w	r1, sl, r1
 8026ac8:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026acc:	fa1f f689 	uxth.w	r6, r9
 8026ad0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ad4:	fb10 f90e 	smulbb	r9, r0, lr
 8026ad8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026adc:	9602      	str	r6, [sp, #8]
 8026ade:	460e      	mov	r6, r1
 8026ae0:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026ae4:	f1ce 0110 	rsb	r1, lr, #16
 8026ae8:	ea4a 0303 	orr.w	r3, sl, r3
 8026aec:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026af0:	1a09      	subs	r1, r1, r0
 8026af2:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8026af6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026afa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026afe:	4343      	muls	r3, r0
 8026b00:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026b04:	9801      	ldr	r0, [sp, #4]
 8026b06:	ea4a 0202 	orr.w	r2, sl, r2
 8026b0a:	fb01 3106 	mla	r1, r1, r6, r3
 8026b0e:	9e02      	ldr	r6, [sp, #8]
 8026b10:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8026b14:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026b18:	fb09 1302 	mla	r3, r9, r2, r1
 8026b1c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026b20:	1b80      	subs	r0, r0, r6
 8026b22:	9e01      	ldr	r6, [sp, #4]
 8026b24:	9a03      	ldr	r2, [sp, #12]
 8026b26:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026b2a:	eba6 0608 	sub.w	r6, r6, r8
 8026b2e:	b280      	uxth	r0, r0
 8026b30:	8811      	ldrh	r1, [r2, #0]
 8026b32:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026b36:	b2b6      	uxth	r6, r6
 8026b38:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8026b3c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026b40:	4374      	muls	r4, r6
 8026b42:	b292      	uxth	r2, r2
 8026b44:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026b48:	fb0c 4400 	mla	r4, ip, r0, r4
 8026b4c:	9802      	ldr	r0, [sp, #8]
 8026b4e:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026b52:	fb00 4505 	mla	r5, r0, r5, r4
 8026b56:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026b5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b5e:	1208      	asrs	r0, r1, #8
 8026b60:	fb08 5707 	mla	r7, r8, r7, r5
 8026b64:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026b68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026b6c:	10cd      	asrs	r5, r1, #3
 8026b6e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026b72:	ea43 0e0e 	orr.w	lr, r3, lr
 8026b76:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026b7a:	4357      	muls	r7, r2
 8026b7c:	fa1f f38e 	uxth.w	r3, lr
 8026b80:	f107 0801 	add.w	r8, r7, #1
 8026b84:	121c      	asrs	r4, r3, #8
 8026b86:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8026b8a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026b8e:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026b92:	b2ff      	uxtb	r7, r7
 8026b94:	fb10 f007 	smulbb	r0, r0, r7
 8026b98:	fb15 f507 	smulbb	r5, r5, r7
 8026b9c:	fb04 0402 	mla	r4, r4, r2, r0
 8026ba0:	10d8      	asrs	r0, r3, #3
 8026ba2:	00db      	lsls	r3, r3, #3
 8026ba4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026ba8:	b2a4      	uxth	r4, r4
 8026baa:	fb00 5002 	mla	r0, r0, r2, r5
 8026bae:	b2dd      	uxtb	r5, r3
 8026bb0:	00cb      	lsls	r3, r1, #3
 8026bb2:	b280      	uxth	r0, r0
 8026bb4:	b2db      	uxtb	r3, r3
 8026bb6:	fb13 f307 	smulbb	r3, r3, r7
 8026bba:	fb05 3202 	mla	r2, r5, r2, r3
 8026bbe:	1c63      	adds	r3, r4, #1
 8026bc0:	b292      	uxth	r2, r2
 8026bc2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026bc6:	1c53      	adds	r3, r2, #1
 8026bc8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8026bcc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026bd0:	1c42      	adds	r2, r0, #1
 8026bd2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026bd6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026bda:	9a03      	ldr	r2, [sp, #12]
 8026bdc:	0940      	lsrs	r0, r0, #5
 8026bde:	4323      	orrs	r3, r4
 8026be0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026be4:	4303      	orrs	r3, r0
 8026be6:	8013      	strh	r3, [r2, #0]
 8026be8:	b005      	add	sp, #20
 8026bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bee:	280f      	cmp	r0, #15
 8026bf0:	f63f af33 	bhi.w	8026a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026bf4:	4677      	mov	r7, lr
 8026bf6:	4675      	mov	r5, lr
 8026bf8:	4672      	mov	r2, lr
 8026bfa:	46f3      	mov	fp, lr
 8026bfc:	e753      	b.n	8026aa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8026bfe:	bf00      	nop
 8026c00:	08030159 	.word	0x08030159
 8026c04:	08030726 	.word	0x08030726
 8026c08:	080301dd 	.word	0x080301dd

08026c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c10:	ed2d 8b08 	vpush	{d8-d11}
 8026c14:	b097      	sub	sp, #92	; 0x5c
 8026c16:	eeb0 aa40 	vmov.f32	s20, s0
 8026c1a:	eef0 9a60 	vmov.f32	s19, s1
 8026c1e:	9214      	str	r2, [sp, #80]	; 0x50
 8026c20:	eeb0 9a41 	vmov.f32	s18, s2
 8026c24:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8026c26:	eeb0 8a62 	vmov.f32	s16, s5
 8026c2a:	9308      	str	r3, [sp, #32]
 8026c2c:	eef0 8a43 	vmov.f32	s17, s6
 8026c30:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8026c34:	eef0 ba44 	vmov.f32	s23, s8
 8026c38:	9015      	str	r0, [sp, #84]	; 0x54
 8026c3a:	eeb0 ba64 	vmov.f32	s22, s9
 8026c3e:	9312      	str	r3, [sp, #72]	; 0x48
 8026c40:	eef0 aa45 	vmov.f32	s21, s10
 8026c44:	6850      	ldr	r0, [r2, #4]
 8026c46:	9111      	str	r1, [sp, #68]	; 0x44
 8026c48:	6812      	ldr	r2, [r2, #0]
 8026c4a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8026c4e:	fb00 1303 	mla	r3, r0, r3, r1
 8026c52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026c56:	9309      	str	r3, [sp, #36]	; 0x24
 8026c58:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026c5a:	681b      	ldr	r3, [r3, #0]
 8026c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026c60:	685b      	ldr	r3, [r3, #4]
 8026c62:	930c      	str	r3, [sp, #48]	; 0x30
 8026c64:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8026c68:	930a      	str	r3, [sp, #40]	; 0x28
 8026c6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026c6c:	2b00      	cmp	r3, #0
 8026c6e:	dc03      	bgt.n	8026c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026c70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026c72:	2b00      	cmp	r3, #0
 8026c74:	f340 83cd 	ble.w	8027412 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026c78:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026c7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c82:	1e48      	subs	r0, r1, #1
 8026c84:	1e55      	subs	r5, r2, #1
 8026c86:	9b08      	ldr	r3, [sp, #32]
 8026c88:	2b00      	cmp	r3, #0
 8026c8a:	f340 81a5 	ble.w	8026fd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8026c8e:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8026c90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026c92:	1436      	asrs	r6, r6, #16
 8026c94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026c98:	d406      	bmi.n	8026ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026c9a:	4286      	cmp	r6, r0
 8026c9c:	da04      	bge.n	8026ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026c9e:	2b00      	cmp	r3, #0
 8026ca0:	db02      	blt.n	8026ca8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026ca2:	42ab      	cmp	r3, r5
 8026ca4:	f2c0 8199 	blt.w	8026fda <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8026ca8:	3601      	adds	r6, #1
 8026caa:	f100 8186 	bmi.w	8026fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026cae:	42b1      	cmp	r1, r6
 8026cb0:	f2c0 8183 	blt.w	8026fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026cb4:	3301      	adds	r3, #1
 8026cb6:	f100 8180 	bmi.w	8026fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026cba:	429a      	cmp	r2, r3
 8026cbc:	f2c0 817d 	blt.w	8026fba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026cc0:	9b08      	ldr	r3, [sp, #32]
 8026cc2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026cc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026cc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8026cca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	f340 81a6 	ble.w	802701e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026cd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026cd4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8026cd6:	1418      	asrs	r0, r3, #16
 8026cd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026cda:	142d      	asrs	r5, r5, #16
 8026cdc:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026ce0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026ce2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026ce6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8026ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026cec:	f100 81fa 	bmi.w	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026cf0:	f102 3eff 	add.w	lr, r2, #4294967295
 8026cf4:	4575      	cmp	r5, lr
 8026cf6:	f280 81f5 	bge.w	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026cfa:	2800      	cmp	r0, #0
 8026cfc:	f2c0 81f2 	blt.w	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d00:	f103 3eff 	add.w	lr, r3, #4294967295
 8026d04:	4570      	cmp	r0, lr
 8026d06:	f280 81ed 	bge.w	80270e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d0a:	b212      	sxth	r2, r2
 8026d0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d0e:	fa1f fe81 	uxth.w	lr, r1
 8026d12:	fb00 5002 	mla	r0, r0, r2, r5
 8026d16:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026d1a:	eb03 0a00 	add.w	sl, r3, r0
 8026d1e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026d22:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026d26:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026d2a:	b29b      	uxth	r3, r3
 8026d2c:	f1bc 0f00 	cmp.w	ip, #0
 8026d30:	f000 81bb 	beq.w	80270aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026d34:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026d38:	eb0a 0b02 	add.w	fp, sl, r2
 8026d3c:	fa1f fa8c 	uxth.w	sl, ip
 8026d40:	940d      	str	r4, [sp, #52]	; 0x34
 8026d42:	fb0a fe0e 	mul.w	lr, sl, lr
 8026d46:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026d4a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026d4e:	eba5 050e 	sub.w	r5, r5, lr
 8026d52:	940e      	str	r4, [sp, #56]	; 0x38
 8026d54:	fa1f fa8a 	uxth.w	sl, sl
 8026d58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026d5a:	b2ad      	uxth	r5, r5
 8026d5c:	eba3 030a 	sub.w	r3, r3, sl
 8026d60:	fb08 f505 	mul.w	r5, r8, r5
 8026d64:	b29b      	uxth	r3, r3
 8026d66:	fb09 5303 	mla	r3, r9, r3, r5
 8026d6a:	fb0a 3304 	mla	r3, sl, r4, r3
 8026d6e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026d70:	fb0e 3304 	mla	r3, lr, r4, r3
 8026d74:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	f000 8111 	beq.w	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026d7e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026d80:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026d84:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026d88:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026d8c:	f000 8192 	beq.w	80270b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026d90:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026d94:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026d98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026d9c:	fb0a fe0e 	mul.w	lr, sl, lr
 8026da0:	fb09 f000 	mul.w	r0, r9, r0
 8026da4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026da8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026dac:	f100 0b20 	add.w	fp, r0, #32
 8026db0:	44ce      	add	lr, r9
 8026db2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026db6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026dba:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026dbe:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026dc2:	ea4e 0909 	orr.w	r9, lr, r9
 8026dc6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026dca:	8868      	ldrh	r0, [r5, #2]
 8026dcc:	d019      	beq.n	8026e02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026dce:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8026dd2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026dd6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026dda:	fb0a fe0e 	mul.w	lr, sl, lr
 8026dde:	fb08 f800 	mul.w	r8, r8, r0
 8026de2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026de6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026dea:	f108 0b20 	add.w	fp, r8, #32
 8026dee:	4486      	add	lr, r0
 8026df0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026df4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026df8:	0a00      	lsrs	r0, r0, #8
 8026dfa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026dfe:	ea4e 0000 	orr.w	r0, lr, r0
 8026e02:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026e06:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026e0a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026e0e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026e12:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026e16:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026e1a:	ea4e 0909 	orr.w	r9, lr, r9
 8026e1e:	ea4a 0000 	orr.w	r0, sl, r0
 8026e22:	f1bc 0f00 	cmp.w	ip, #0
 8026e26:	f000 8147 	beq.w	80270b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026e2a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026e2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026e30:	3a01      	subs	r2, #1
 8026e32:	2cff      	cmp	r4, #255	; 0xff
 8026e34:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026e38:	f102 0202 	add.w	r2, r2, #2
 8026e3c:	eb05 0e02 	add.w	lr, r5, r2
 8026e40:	5aaa      	ldrh	r2, [r5, r2]
 8026e42:	d018      	beq.n	8026e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026e44:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026e48:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026e4c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026e50:	fb04 fa02 	mul.w	sl, r4, r2
 8026e54:	fb08 f805 	mul.w	r8, r8, r5
 8026e58:	f10a 0520 	add.w	r5, sl, #32
 8026e5c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026e60:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026e64:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026e68:	4442      	add	r2, r8
 8026e6a:	0a2d      	lsrs	r5, r5, #8
 8026e6c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026e70:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026e74:	432a      	orrs	r2, r5
 8026e76:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8026e78:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026e7c:	2cff      	cmp	r4, #255	; 0xff
 8026e7e:	d01a      	beq.n	8026eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026e80:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8026e84:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8026e88:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026e8c:	fb04 fa05 	mul.w	sl, r4, r5
 8026e90:	fb08 f80e 	mul.w	r8, r8, lr
 8026e94:	f10a 0e20 	add.w	lr, sl, #32
 8026e98:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026e9c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026ea0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026ea4:	4445      	add	r5, r8
 8026ea6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026eaa:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026eae:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026eb2:	ea45 050e 	orr.w	r5, r5, lr
 8026eb6:	fb1c fe01 	smulbb	lr, ip, r1
 8026eba:	f1cc 0810 	rsb	r8, ip, #16
 8026ebe:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026ec2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026ec6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026eca:	eba8 0801 	sub.w	r8, r8, r1
 8026ece:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026ed2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ed6:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026eda:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026ede:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026ee2:	ea4a 0202 	orr.w	r2, sl, r2
 8026ee6:	4341      	muls	r1, r0
 8026ee8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026eec:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026ef0:	fb09 1108 	mla	r1, r9, r8, r1
 8026ef4:	ea4b 0505 	orr.w	r5, fp, r5
 8026ef8:	fb0c 1102 	mla	r1, ip, r2, r1
 8026efc:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026f00:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026f04:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026f08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026f0c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026f10:	ea42 0e0e 	orr.w	lr, r2, lr
 8026f14:	fa1f f28e 	uxth.w	r2, lr
 8026f18:	2bff      	cmp	r3, #255	; 0xff
 8026f1a:	d103      	bne.n	8026f24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026f1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8026f1e:	29ff      	cmp	r1, #255	; 0xff
 8026f20:	f000 80de 	beq.w	80270e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026f24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026f26:	1215      	asrs	r5, r2, #8
 8026f28:	8838      	ldrh	r0, [r7, #0]
 8026f2a:	434b      	muls	r3, r1
 8026f2c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026f30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026f32:	f103 0c01 	add.w	ip, r3, #1
 8026f36:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026f3a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026f3e:	fa5f fc83 	uxtb.w	ip, r3
 8026f42:	1203      	asrs	r3, r0, #8
 8026f44:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8026f48:	fb13 f30c 	smulbb	r3, r3, ip
 8026f4c:	fb05 3501 	mla	r5, r5, r1, r3
 8026f50:	10c3      	asrs	r3, r0, #3
 8026f52:	10d1      	asrs	r1, r2, #3
 8026f54:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026f58:	00d2      	lsls	r2, r2, #3
 8026f5a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026f5e:	b2ad      	uxth	r5, r5
 8026f60:	fb13 f30c 	smulbb	r3, r3, ip
 8026f64:	b2d2      	uxtb	r2, r2
 8026f66:	fb01 3104 	mla	r1, r1, r4, r3
 8026f6a:	00c3      	lsls	r3, r0, #3
 8026f6c:	b2db      	uxtb	r3, r3
 8026f6e:	b289      	uxth	r1, r1
 8026f70:	fb13 f30c 	smulbb	r3, r3, ip
 8026f74:	fb02 3304 	mla	r3, r2, r4, r3
 8026f78:	b29a      	uxth	r2, r3
 8026f7a:	1c6b      	adds	r3, r5, #1
 8026f7c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026f80:	1c53      	adds	r3, r2, #1
 8026f82:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026f86:	1c4a      	adds	r2, r1, #1
 8026f88:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026f8c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026f90:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026f94:	0949      	lsrs	r1, r1, #5
 8026f96:	432b      	orrs	r3, r5
 8026f98:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026f9c:	430b      	orrs	r3, r1
 8026f9e:	803b      	strh	r3, [r7, #0]
 8026fa0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fa2:	3702      	adds	r7, #2
 8026fa4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8026fa6:	4413      	add	r3, r2
 8026fa8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8026faa:	9329      	str	r3, [sp, #164]	; 0xa4
 8026fac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026fae:	441a      	add	r2, r3
 8026fb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8026fb2:	3b01      	subs	r3, #1
 8026fb4:	922a      	str	r2, [sp, #168]	; 0xa8
 8026fb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8026fb8:	e687      	b.n	8026cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8026fba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fbc:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8026fbe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8026fc0:	4433      	add	r3, r6
 8026fc2:	9329      	str	r3, [sp, #164]	; 0xa4
 8026fc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026fc6:	441c      	add	r4, r3
 8026fc8:	9b08      	ldr	r3, [sp, #32]
 8026fca:	3b01      	subs	r3, #1
 8026fcc:	942a      	str	r4, [sp, #168]	; 0xa8
 8026fce:	9308      	str	r3, [sp, #32]
 8026fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026fd2:	3302      	adds	r3, #2
 8026fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8026fd6:	e656      	b.n	8026c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026fd8:	d028      	beq.n	802702c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026fda:	9b08      	ldr	r3, [sp, #32]
 8026fdc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8026fde:	3b01      	subs	r3, #1
 8026fe0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8026fe2:	fb00 5003 	mla	r0, r0, r3, r5
 8026fe6:	1400      	asrs	r0, r0, #16
 8026fe8:	f53f ae6a 	bmi.w	8026cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026fec:	3901      	subs	r1, #1
 8026fee:	4288      	cmp	r0, r1
 8026ff0:	f6bf ae66 	bge.w	8026cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8026ff4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026ff6:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8026ff8:	fb01 0303 	mla	r3, r1, r3, r0
 8026ffc:	141b      	asrs	r3, r3, #16
 8026ffe:	f53f ae5f 	bmi.w	8026cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027002:	3a01      	subs	r2, #1
 8027004:	4293      	cmp	r3, r2
 8027006:	f6bf ae5b 	bge.w	8026cc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802700a:	9b08      	ldr	r3, [sp, #32]
 802700c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027010:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027014:	9313      	str	r3, [sp, #76]	; 0x4c
 8027016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8027018:	2b00      	cmp	r3, #0
 802701a:	f300 8082 	bgt.w	8027122 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802701e:	9b08      	ldr	r3, [sp, #32]
 8027020:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027026:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802702a:	9309      	str	r3, [sp, #36]	; 0x24
 802702c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802702e:	2b00      	cmp	r3, #0
 8027030:	f340 81ef 	ble.w	8027412 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8027034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027038:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802703a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802703e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027042:	eef0 6a48 	vmov.f32	s13, s16
 8027046:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802704a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802704e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027052:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8027056:	eef0 6a68 	vmov.f32	s13, s17
 802705a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802705e:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8027062:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027066:	ee69 7a27 	vmul.f32	s15, s18, s15
 802706a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802706e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027072:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027076:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802707a:	ee18 2a10 	vmov	r2, s16
 802707e:	eeb0 8a47 	vmov.f32	s16, s14
 8027082:	fb92 f3f3 	sdiv	r3, r2, r3
 8027086:	ee18 2a90 	vmov	r2, s17
 802708a:	932b      	str	r3, [sp, #172]	; 0xac
 802708c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802708e:	eef0 8a67 	vmov.f32	s17, s15
 8027092:	fb92 f3f3 	sdiv	r3, r2, r3
 8027096:	932c      	str	r3, [sp, #176]	; 0xb0
 8027098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802709a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802709c:	3b01      	subs	r3, #1
 802709e:	9311      	str	r3, [sp, #68]	; 0x44
 80270a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80270a2:	bf08      	it	eq
 80270a4:	4613      	moveq	r3, r2
 80270a6:	9308      	str	r3, [sp, #32]
 80270a8:	e5df      	b.n	8026c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80270aa:	fb08 f505 	mul.w	r5, r8, r5
 80270ae:	fb09 5303 	mla	r3, r9, r3, r5
 80270b2:	e65f      	b.n	8026d74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 80270b4:	4681      	mov	r9, r0
 80270b6:	e686      	b.n	8026dc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80270b8:	f1c1 0210 	rsb	r2, r1, #16
 80270bc:	4341      	muls	r1, r0
 80270be:	fb09 1902 	mla	r9, r9, r2, r1
 80270c2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80270c6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80270ca:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80270ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80270d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80270d6:	ea42 0909 	orr.w	r9, r2, r9
 80270da:	fa1f f289 	uxth.w	r2, r9
 80270de:	e71b      	b.n	8026f18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80270e0:	803a      	strh	r2, [r7, #0]
 80270e2:	e75d      	b.n	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80270e4:	f115 0e01 	adds.w	lr, r5, #1
 80270e8:	f53f af5a 	bmi.w	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80270ec:	4572      	cmp	r2, lr
 80270ee:	f6ff af57 	blt.w	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80270f2:	f110 0e01 	adds.w	lr, r0, #1
 80270f6:	f53f af53 	bmi.w	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 80270fa:	4573      	cmp	r3, lr
 80270fc:	f6ff af50 	blt.w	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027100:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027102:	b21b      	sxth	r3, r3
 8027104:	b212      	sxth	r2, r2
 8027106:	9502      	str	r5, [sp, #8]
 8027108:	9301      	str	r3, [sp, #4]
 802710a:	9200      	str	r2, [sp, #0]
 802710c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027110:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027114:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8027118:	4639      	mov	r1, r7
 802711a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802711c:	f7ff fbd0 	bl	80268c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027120:	e73e      	b.n	8026fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027122:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027124:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027128:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802712a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802712e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027130:	fa1f fc82 	uxth.w	ip, r2
 8027134:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027138:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802713a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802713e:	141f      	asrs	r7, r3, #16
 8027140:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027142:	141b      	asrs	r3, r3, #16
 8027144:	fb01 3707 	mla	r7, r1, r7, r3
 8027148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802714a:	eb03 0a07 	add.w	sl, r3, r7
 802714e:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027152:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027156:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802715a:	b29b      	uxth	r3, r3
 802715c:	2d00      	cmp	r5, #0
 802715e:	f000 813d 	beq.w	80273dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 8027162:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027166:	eb0a 0b01 	add.w	fp, sl, r1
 802716a:	fa1f fa85 	uxth.w	sl, r5
 802716e:	940f      	str	r4, [sp, #60]	; 0x3c
 8027170:	fb0a fc0c 	mul.w	ip, sl, ip
 8027174:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027178:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802717c:	eba0 000c 	sub.w	r0, r0, ip
 8027180:	9410      	str	r4, [sp, #64]	; 0x40
 8027182:	fa1f fa8a 	uxth.w	sl, sl
 8027186:	b280      	uxth	r0, r0
 8027188:	eba3 030a 	sub.w	r3, r3, sl
 802718c:	fb08 f000 	mul.w	r0, r8, r0
 8027190:	b29b      	uxth	r3, r3
 8027192:	fb09 0303 	mla	r3, r9, r3, r0
 8027196:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027198:	fb0a 3300 	mla	r3, sl, r0, r3
 802719c:	fb0c 3304 	mla	r3, ip, r4, r3
 80271a0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f000 810b 	beq.w	80273c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80271aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80271ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80271b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80271b2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80271b6:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80271ba:	f000 8114 	beq.w	80273e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80271be:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80271c2:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80271c6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80271ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80271ce:	fb09 f707 	mul.w	r7, r9, r7
 80271d2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80271d6:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80271da:	f107 0b20 	add.w	fp, r7, #32
 80271de:	44cc      	add	ip, r9
 80271e0:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80271e4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80271e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80271ec:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80271f0:	ea4c 0909 	orr.w	r9, ip, r9
 80271f4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80271f8:	8847      	ldrh	r7, [r0, #2]
 80271fa:	d019      	beq.n	8027230 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 80271fc:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027200:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027204:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027208:	fb0a fc0c 	mul.w	ip, sl, ip
 802720c:	fb08 f807 	mul.w	r8, r8, r7
 8027210:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027214:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027218:	f108 0b20 	add.w	fp, r8, #32
 802721c:	44bc      	add	ip, r7
 802721e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027222:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027226:	0a3f      	lsrs	r7, r7, #8
 8027228:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802722c:	ea4c 0707 	orr.w	r7, ip, r7
 8027230:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027234:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027238:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802723c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027240:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027244:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027248:	ea4c 0909 	orr.w	r9, ip, r9
 802724c:	ea4a 0707 	orr.w	r7, sl, r7
 8027250:	2d00      	cmp	r5, #0
 8027252:	f000 80ca 	beq.w	80273ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027256:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802725a:	3901      	subs	r1, #1
 802725c:	0049      	lsls	r1, r1, #1
 802725e:	3102      	adds	r1, #2
 8027260:	eb00 0c01 	add.w	ip, r0, r1
 8027264:	5a41      	ldrh	r1, [r0, r1]
 8027266:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027268:	28ff      	cmp	r0, #255	; 0xff
 802726a:	d019      	beq.n	80272a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 802726c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027270:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8027272:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027276:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802727a:	fb04 fa01 	mul.w	sl, r4, r1
 802727e:	fb08 f800 	mul.w	r8, r8, r0
 8027282:	f10a 0020 	add.w	r0, sl, #32
 8027286:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802728a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802728e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027292:	4441      	add	r1, r8
 8027294:	0a00      	lsrs	r0, r0, #8
 8027296:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802729a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802729e:	4301      	orrs	r1, r0
 80272a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80272a2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80272a6:	2cff      	cmp	r4, #255	; 0xff
 80272a8:	d01a      	beq.n	80272e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 80272aa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80272ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80272b2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80272b6:	fb04 fa00 	mul.w	sl, r4, r0
 80272ba:	fb08 f80c 	mul.w	r8, r8, ip
 80272be:	f10a 0c20 	add.w	ip, sl, #32
 80272c2:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80272c6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80272ca:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80272ce:	4440      	add	r0, r8
 80272d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80272d4:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80272d8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80272dc:	ea40 000c 	orr.w	r0, r0, ip
 80272e0:	fb15 fc02 	smulbb	ip, r5, r2
 80272e4:	f1c5 0810 	rsb	r8, r5, #16
 80272e8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80272ec:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80272f0:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80272f4:	eba8 0802 	sub.w	r8, r8, r2
 80272f8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80272fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027300:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027304:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027308:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802730c:	ea4a 0101 	orr.w	r1, sl, r1
 8027310:	437a      	muls	r2, r7
 8027312:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027316:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802731a:	fb09 2208 	mla	r2, r9, r8, r2
 802731e:	ea4b 0000 	orr.w	r0, fp, r0
 8027322:	fb05 2201 	mla	r2, r5, r1, r2
 8027326:	fb0c 2200 	mla	r2, ip, r0, r2
 802732a:	0d57      	lsrs	r7, r2, #21
 802732c:	0952      	lsrs	r2, r2, #5
 802732e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027332:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027336:	433a      	orrs	r2, r7
 8027338:	2bff      	cmp	r3, #255	; 0xff
 802733a:	b292      	uxth	r2, r2
 802733c:	d102      	bne.n	8027344 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802733e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8027340:	29ff      	cmp	r1, #255	; 0xff
 8027342:	d063      	beq.n	802740c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8027344:	980a      	ldr	r0, [sp, #40]	; 0x28
 8027346:	1215      	asrs	r5, r2, #8
 8027348:	f8be 1000 	ldrh.w	r1, [lr]
 802734c:	4343      	muls	r3, r0
 802734e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027350:	10cf      	asrs	r7, r1, #3
 8027352:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027356:	1c58      	adds	r0, r3, #1
 8027358:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802735c:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027360:	1208      	asrs	r0, r1, #8
 8027362:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027366:	00c9      	lsls	r1, r1, #3
 8027368:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802736c:	b2db      	uxtb	r3, r3
 802736e:	b2c9      	uxtb	r1, r1
 8027370:	fb10 f003 	smulbb	r0, r0, r3
 8027374:	fb11 f103 	smulbb	r1, r1, r3
 8027378:	fb05 0504 	mla	r5, r5, r4, r0
 802737c:	10d0      	asrs	r0, r2, #3
 802737e:	fb17 f703 	smulbb	r7, r7, r3
 8027382:	00d2      	lsls	r2, r2, #3
 8027384:	b2ad      	uxth	r5, r5
 8027386:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802738a:	b2d2      	uxtb	r2, r2
 802738c:	fb00 7004 	mla	r0, r0, r4, r7
 8027390:	1c6b      	adds	r3, r5, #1
 8027392:	fb02 1204 	mla	r2, r2, r4, r1
 8027396:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802739a:	b292      	uxth	r2, r2
 802739c:	b280      	uxth	r0, r0
 802739e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80273a2:	1c57      	adds	r7, r2, #1
 80273a4:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80273a8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80273ac:	433d      	orrs	r5, r7
 80273ae:	1c47      	adds	r7, r0, #1
 80273b0:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80273b4:	097f      	lsrs	r7, r7, #5
 80273b6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80273ba:	433d      	orrs	r5, r7
 80273bc:	f8ae 5000 	strh.w	r5, [lr]
 80273c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80273c2:	f10e 0e02 	add.w	lr, lr, #2
 80273c6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80273c8:	4413      	add	r3, r2
 80273ca:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80273cc:	9329      	str	r3, [sp, #164]	; 0xa4
 80273ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80273d0:	441a      	add	r2, r3
 80273d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80273d4:	3b01      	subs	r3, #1
 80273d6:	922a      	str	r2, [sp, #168]	; 0xa8
 80273d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80273da:	e61c      	b.n	8027016 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80273dc:	fb08 f000 	mul.w	r0, r8, r0
 80273e0:	fb09 0303 	mla	r3, r9, r3, r0
 80273e4:	e6dc      	b.n	80271a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80273e6:	46b9      	mov	r9, r7
 80273e8:	e704      	b.n	80271f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80273ea:	f1c2 0110 	rsb	r1, r2, #16
 80273ee:	437a      	muls	r2, r7
 80273f0:	fb09 2901 	mla	r9, r9, r1, r2
 80273f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80273f8:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80273fc:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027400:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027404:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027408:	4302      	orrs	r2, r0
 802740a:	e795      	b.n	8027338 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 802740c:	f8ae 2000 	strh.w	r2, [lr]
 8027410:	e7d6      	b.n	80273c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8027412:	b017      	add	sp, #92	; 0x5c
 8027414:	ecbd 8b08 	vpop	{d8-d11}
 8027418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027420:	b085      	sub	sp, #20
 8027422:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8027426:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 802742a:	9103      	str	r1, [sp, #12]
 802742c:	2d00      	cmp	r5, #0
 802742e:	fb05 7106 	mla	r1, r5, r6, r7
 8027432:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027436:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802743a:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802743e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8027442:	eb02 0901 	add.w	r9, r2, r1
 8027446:	9401      	str	r4, [sp, #4]
 8027448:	f2c0 80c0 	blt.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802744c:	45a8      	cmp	r8, r5
 802744e:	f340 80bd 	ble.w	80275cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8027452:	2f00      	cmp	r7, #0
 8027454:	f2c0 80b6 	blt.w	80275c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8027458:	42be      	cmp	r6, r7
 802745a:	f340 80b3 	ble.w	80275c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802745e:	f812 c001 	ldrb.w	ip, [r2, r1]
 8027462:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8027466:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802746a:	d019      	beq.n	80274a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 802746c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8027470:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8027474:	435a      	muls	r2, r3
 8027476:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802747a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802747e:	fb0c f403 	mul.w	r4, ip, r3
 8027482:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8027486:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802748a:	441a      	add	r2, r3
 802748c:	f104 0320 	add.w	r3, r4, #32
 8027490:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8027494:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8027498:	0a1b      	lsrs	r3, r3, #8
 802749a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802749e:	4319      	orrs	r1, r3
 80274a0:	b289      	uxth	r1, r1
 80274a2:	1c7b      	adds	r3, r7, #1
 80274a4:	f100 8097 	bmi.w	80275d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80274a8:	429e      	cmp	r6, r3
 80274aa:	f340 8094 	ble.w	80275d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80274ae:	2800      	cmp	r0, #0
 80274b0:	f000 8094 	beq.w	80275dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80274b4:	f899 4001 	ldrb.w	r4, [r9, #1]
 80274b8:	9b01      	ldr	r3, [sp, #4]
 80274ba:	2cff      	cmp	r4, #255	; 0xff
 80274bc:	885b      	ldrh	r3, [r3, #2]
 80274be:	d01b      	beq.n	80274f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80274c0:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80274c4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80274c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80274cc:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80274d0:	fb0a f202 	mul.w	r2, sl, r2
 80274d4:	fb04 fa03 	mul.w	sl, r4, r3
 80274d8:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80274dc:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80274e0:	441a      	add	r2, r3
 80274e2:	f10a 0320 	add.w	r3, sl, #32
 80274e6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80274ea:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80274ee:	0a1b      	lsrs	r3, r3, #8
 80274f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80274f4:	ea4b 0303 	orr.w	r3, fp, r3
 80274f8:	b29b      	uxth	r3, r3
 80274fa:	3501      	adds	r5, #1
 80274fc:	d474      	bmi.n	80275e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 80274fe:	45a8      	cmp	r8, r5
 8027500:	dd72      	ble.n	80275e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027502:	f1be 0f00 	cmp.w	lr, #0
 8027506:	f000 8110 	beq.w	802772a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 802750a:	2f00      	cmp	r7, #0
 802750c:	db69      	blt.n	80275e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802750e:	42be      	cmp	r6, r7
 8027510:	dd67      	ble.n	80275e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027512:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027516:	9a01      	ldr	r2, [sp, #4]
 8027518:	2dff      	cmp	r5, #255	; 0xff
 802751a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802751e:	d01c      	beq.n	802755a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8027520:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8027524:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027528:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802752c:	fb08 f802 	mul.w	r8, r8, r2
 8027530:	fb05 fa0b 	mul.w	sl, r5, fp
 8027534:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8027538:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 802753c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027540:	4490      	add	r8, r2
 8027542:	f10a 0220 	add.w	r2, sl, #32
 8027546:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 802754a:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802754e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027552:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8027556:	ea4b 0b0a 	orr.w	fp, fp, sl
 802755a:	fa1f fb8b 	uxth.w	fp, fp
 802755e:	3701      	adds	r7, #1
 8027560:	d447      	bmi.n	80275f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027562:	42be      	cmp	r6, r7
 8027564:	dd45      	ble.n	80275f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8027566:	2800      	cmp	r0, #0
 8027568:	d046      	beq.n	80275f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 802756a:	3601      	adds	r6, #1
 802756c:	9a01      	ldr	r2, [sp, #4]
 802756e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8027572:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8027576:	2fff      	cmp	r7, #255	; 0xff
 8027578:	d01a      	beq.n	80275b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 802757a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802757e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8027582:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027586:	fb08 f806 	mul.w	r8, r8, r6
 802758a:	fb07 f902 	mul.w	r9, r7, r2
 802758e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8027592:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8027596:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802759a:	44b0      	add	r8, r6
 802759c:	f109 0620 	add.w	r6, r9, #32
 80275a0:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80275a4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80275a8:	0a36      	lsrs	r6, r6, #8
 80275aa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80275ae:	4332      	orrs	r2, r6
 80275b0:	b292      	uxth	r2, r2
 80275b2:	280f      	cmp	r0, #15
 80275b4:	d922      	bls.n	80275fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80275b6:	4b61      	ldr	r3, [pc, #388]	; (802773c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80275b8:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80275bc:	4a60      	ldr	r2, [pc, #384]	; (8027740 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80275be:	4861      	ldr	r0, [pc, #388]	; (8027744 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80275c0:	f003 fca2 	bl	802af08 <__assert_func>
 80275c4:	f04f 0c00 	mov.w	ip, #0
 80275c8:	4661      	mov	r1, ip
 80275ca:	e76a      	b.n	80274a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80275cc:	2400      	movs	r4, #0
 80275ce:	46a4      	mov	ip, r4
 80275d0:	4623      	mov	r3, r4
 80275d2:	4621      	mov	r1, r4
 80275d4:	e791      	b.n	80274fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80275d6:	2400      	movs	r4, #0
 80275d8:	4623      	mov	r3, r4
 80275da:	e78e      	b.n	80274fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80275dc:	4604      	mov	r4, r0
 80275de:	4603      	mov	r3, r0
 80275e0:	e78b      	b.n	80274fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80275e2:	2500      	movs	r5, #0
 80275e4:	46ab      	mov	fp, r5
 80275e6:	e7ba      	b.n	802755e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80275e8:	2700      	movs	r7, #0
 80275ea:	463d      	mov	r5, r7
 80275ec:	463a      	mov	r2, r7
 80275ee:	46bb      	mov	fp, r7
 80275f0:	e7df      	b.n	80275b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80275f2:	2700      	movs	r7, #0
 80275f4:	463a      	mov	r2, r7
 80275f6:	e7dc      	b.n	80275b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80275f8:	4607      	mov	r7, r0
 80275fa:	4602      	mov	r2, r0
 80275fc:	f1be 0f0f 	cmp.w	lr, #15
 8027600:	d8d9      	bhi.n	80275b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8027602:	b286      	uxth	r6, r0
 8027604:	fa1f f98e 	uxth.w	r9, lr
 8027608:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802760c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027610:	fb06 f809 	mul.w	r8, r6, r9
 8027614:	0136      	lsls	r6, r6, #4
 8027616:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802761a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802761e:	9601      	str	r6, [sp, #4]
 8027620:	ea4a 0101 	orr.w	r1, sl, r1
 8027624:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027628:	fa1f f689 	uxth.w	r6, r9
 802762c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027630:	fb10 f90e 	smulbb	r9, r0, lr
 8027634:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027638:	9602      	str	r6, [sp, #8]
 802763a:	460e      	mov	r6, r1
 802763c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8027640:	f1ce 0110 	rsb	r1, lr, #16
 8027644:	ea4a 0303 	orr.w	r3, sl, r3
 8027648:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802764c:	1a09      	subs	r1, r1, r0
 802764e:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8027652:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027656:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802765a:	4343      	muls	r3, r0
 802765c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8027660:	ea4a 0202 	orr.w	r2, sl, r2
 8027664:	9802      	ldr	r0, [sp, #8]
 8027666:	fb01 3106 	mla	r1, r1, r6, r3
 802766a:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802766e:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027672:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8027676:	fb09 1302 	mla	r3, r9, r2, r1
 802767a:	9a03      	ldr	r2, [sp, #12]
 802767c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027680:	8811      	ldrh	r1, [r2, #0]
 8027682:	9a01      	ldr	r2, [sp, #4]
 8027684:	ea4a 0b0b 	orr.w	fp, sl, fp
 8027688:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802768c:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8027690:	1a12      	subs	r2, r2, r0
 8027692:	9801      	ldr	r0, [sp, #4]
 8027694:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8027698:	eba0 0608 	sub.w	r6, r0, r8
 802769c:	b292      	uxth	r2, r2
 802769e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80276a2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80276a6:	b2b6      	uxth	r6, r6
 80276a8:	10c8      	asrs	r0, r1, #3
 80276aa:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80276ae:	4374      	muls	r4, r6
 80276b0:	ea43 0e0e 	orr.w	lr, r3, lr
 80276b4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80276b8:	fb0c 4402 	mla	r4, ip, r2, r4
 80276bc:	9a02      	ldr	r2, [sp, #8]
 80276be:	fa1f f38e 	uxth.w	r3, lr
 80276c2:	fb02 4505 	mla	r5, r2, r5, r4
 80276c6:	120a      	asrs	r2, r1, #8
 80276c8:	00c9      	lsls	r1, r1, #3
 80276ca:	fb08 5707 	mla	r7, r8, r7, r5
 80276ce:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80276d2:	b2c9      	uxtb	r1, r1
 80276d4:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80276d8:	b2ff      	uxtb	r7, r7
 80276da:	437a      	muls	r2, r7
 80276dc:	4378      	muls	r0, r7
 80276de:	434f      	muls	r7, r1
 80276e0:	1c51      	adds	r1, r2, #1
 80276e2:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80276e6:	121a      	asrs	r2, r3, #8
 80276e8:	f022 0207 	bic.w	r2, r2, #7
 80276ec:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80276f0:	1c41      	adds	r1, r0, #1
 80276f2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80276f6:	10d9      	asrs	r1, r3, #3
 80276f8:	0212      	lsls	r2, r2, #8
 80276fa:	f021 0103 	bic.w	r1, r1, #3
 80276fe:	00db      	lsls	r3, r3, #3
 8027700:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027704:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027708:	00c9      	lsls	r1, r1, #3
 802770a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802770e:	430a      	orrs	r2, r1
 8027710:	1c79      	adds	r1, r7, #1
 8027712:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027716:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802771a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802771e:	4313      	orrs	r3, r2
 8027720:	9a03      	ldr	r2, [sp, #12]
 8027722:	8013      	strh	r3, [r2, #0]
 8027724:	b005      	add	sp, #20
 8027726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802772a:	280f      	cmp	r0, #15
 802772c:	f63f af43 	bhi.w	80275b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8027730:	4677      	mov	r7, lr
 8027732:	4675      	mov	r5, lr
 8027734:	4672      	mov	r2, lr
 8027736:	46f3      	mov	fp, lr
 8027738:	e763      	b.n	8027602 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 802773a:	bf00      	nop
 802773c:	08030159 	.word	0x08030159
 8027740:	08030726 	.word	0x08030726
 8027744:	080301dd 	.word	0x080301dd

08027748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802774c:	ed2d 8b08 	vpush	{d8-d11}
 8027750:	b093      	sub	sp, #76	; 0x4c
 8027752:	eeb0 aa40 	vmov.f32	s20, s0
 8027756:	eef0 9a60 	vmov.f32	s19, s1
 802775a:	9210      	str	r2, [sp, #64]	; 0x40
 802775c:	eeb0 9a41 	vmov.f32	s18, s2
 8027760:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027762:	eeb0 8a62 	vmov.f32	s16, s5
 8027766:	9011      	str	r0, [sp, #68]	; 0x44
 8027768:	eef0 8a43 	vmov.f32	s17, s6
 802776c:	6850      	ldr	r0, [r2, #4]
 802776e:	eef0 ba44 	vmov.f32	s23, s8
 8027772:	910e      	str	r1, [sp, #56]	; 0x38
 8027774:	eeb0 ba64 	vmov.f32	s22, s9
 8027778:	9306      	str	r3, [sp, #24]
 802777a:	eef0 aa45 	vmov.f32	s21, s10
 802777e:	6812      	ldr	r2, [r2, #0]
 8027780:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027784:	fb00 1303 	mla	r3, r0, r3, r1
 8027788:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802778c:	9307      	str	r3, [sp, #28]
 802778e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027790:	681b      	ldr	r3, [r3, #0]
 8027792:	9308      	str	r3, [sp, #32]
 8027794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027796:	685b      	ldr	r3, [r3, #4]
 8027798:	9309      	str	r3, [sp, #36]	; 0x24
 802779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802779c:	2b00      	cmp	r3, #0
 802779e:	dc03      	bgt.n	80277a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80277a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80277a2:	2b00      	cmp	r3, #0
 80277a4:	f340 83b6 	ble.w	8027f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80277a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80277aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80277b2:	1e48      	subs	r0, r1, #1
 80277b4:	1e55      	subs	r5, r2, #1
 80277b6:	9b06      	ldr	r3, [sp, #24]
 80277b8:	2b00      	cmp	r3, #0
 80277ba:	f340 8165 	ble.w	8027a88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80277be:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80277c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80277c2:	1436      	asrs	r6, r6, #16
 80277c4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80277c8:	d406      	bmi.n	80277d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80277ca:	4286      	cmp	r6, r0
 80277cc:	da04      	bge.n	80277d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80277ce:	2b00      	cmp	r3, #0
 80277d0:	db02      	blt.n	80277d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80277d2:	42ab      	cmp	r3, r5
 80277d4:	f2c0 8159 	blt.w	8027a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80277d8:	3601      	adds	r6, #1
 80277da:	f100 8146 	bmi.w	8027a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80277de:	42b1      	cmp	r1, r6
 80277e0:	f2c0 8143 	blt.w	8027a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80277e4:	3301      	adds	r3, #1
 80277e6:	f100 8140 	bmi.w	8027a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80277ea:	429a      	cmp	r2, r3
 80277ec:	f2c0 813d 	blt.w	8027a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80277f0:	9b06      	ldr	r3, [sp, #24]
 80277f2:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80277f6:	9f07      	ldr	r7, [sp, #28]
 80277f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80277fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	f340 8166 	ble.w	8027ace <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027802:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027804:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8027806:	1418      	asrs	r0, r3, #16
 8027808:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802780a:	142d      	asrs	r5, r5, #16
 802780c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027812:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027816:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027818:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802781c:	f100 81f0 	bmi.w	8027c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027820:	f102 3eff 	add.w	lr, r2, #4294967295
 8027824:	4575      	cmp	r5, lr
 8027826:	f280 81eb 	bge.w	8027c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802782a:	2800      	cmp	r0, #0
 802782c:	f2c0 81e8 	blt.w	8027c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027830:	f103 3eff 	add.w	lr, r3, #4294967295
 8027834:	4570      	cmp	r0, lr
 8027836:	f280 81e3 	bge.w	8027c00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802783a:	b212      	sxth	r2, r2
 802783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802783e:	fa1f fe81 	uxth.w	lr, r1
 8027842:	fb00 5002 	mla	r0, r0, r2, r5
 8027846:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802784a:	eb03 0a00 	add.w	sl, r3, r0
 802784e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027852:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8027856:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802785a:	b29b      	uxth	r3, r3
 802785c:	f1bc 0f00 	cmp.w	ip, #0
 8027860:	f000 817b 	beq.w	8027b5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8027864:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027868:	eb0a 0b02 	add.w	fp, sl, r2
 802786c:	fa1f fa8c 	uxth.w	sl, ip
 8027870:	940a      	str	r4, [sp, #40]	; 0x28
 8027872:	fb0a fe0e 	mul.w	lr, sl, lr
 8027876:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802787a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802787e:	eba5 050e 	sub.w	r5, r5, lr
 8027882:	940b      	str	r4, [sp, #44]	; 0x2c
 8027884:	fa1f fa8a 	uxth.w	sl, sl
 8027888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802788a:	b2ad      	uxth	r5, r5
 802788c:	eba3 030a 	sub.w	r3, r3, sl
 8027890:	fb08 f505 	mul.w	r5, r8, r5
 8027894:	b29b      	uxth	r3, r3
 8027896:	fb09 5303 	mla	r3, r9, r3, r5
 802789a:	fb0a 3304 	mla	r3, sl, r4, r3
 802789e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80278a0:	fb0e 3304 	mla	r3, lr, r4, r3
 80278a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80278a8:	2b00      	cmp	r3, #0
 80278aa:	f000 80d1 	beq.w	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80278ae:	9c08      	ldr	r4, [sp, #32]
 80278b0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80278b4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80278b8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80278bc:	f000 8152 	beq.w	8027b64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80278c0:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80278c4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80278c8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80278cc:	fb0a fe0e 	mul.w	lr, sl, lr
 80278d0:	fb09 f000 	mul.w	r0, r9, r0
 80278d4:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80278d8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80278dc:	f100 0b20 	add.w	fp, r0, #32
 80278e0:	44ce      	add	lr, r9
 80278e2:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80278e6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80278ea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80278ee:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80278f2:	ea4e 0909 	orr.w	r9, lr, r9
 80278f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80278fa:	8868      	ldrh	r0, [r5, #2]
 80278fc:	d019      	beq.n	8027932 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80278fe:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8027902:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027906:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802790a:	fb0a fe0e 	mul.w	lr, sl, lr
 802790e:	fb08 f800 	mul.w	r8, r8, r0
 8027912:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027916:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802791a:	f108 0b20 	add.w	fp, r8, #32
 802791e:	4486      	add	lr, r0
 8027920:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027924:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027928:	0a00      	lsrs	r0, r0, #8
 802792a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802792e:	ea4e 0000 	orr.w	r0, lr, r0
 8027932:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027936:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802793a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802793e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027942:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8027946:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802794a:	ea4e 0909 	orr.w	r9, lr, r9
 802794e:	ea4a 0000 	orr.w	r0, sl, r0
 8027952:	f1bc 0f00 	cmp.w	ip, #0
 8027956:	f000 8107 	beq.w	8027b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802795a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802795e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8027960:	3a01      	subs	r2, #1
 8027962:	2cff      	cmp	r4, #255	; 0xff
 8027964:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8027968:	f102 0202 	add.w	r2, r2, #2
 802796c:	eb05 0e02 	add.w	lr, r5, r2
 8027970:	5aaa      	ldrh	r2, [r5, r2]
 8027972:	d018      	beq.n	80279a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8027974:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8027978:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802797c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027980:	fb04 fa02 	mul.w	sl, r4, r2
 8027984:	fb08 f805 	mul.w	r8, r8, r5
 8027988:	f10a 0520 	add.w	r5, sl, #32
 802798c:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027990:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027994:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027998:	4442      	add	r2, r8
 802799a:	0a2d      	lsrs	r5, r5, #8
 802799c:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80279a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279a4:	432a      	orrs	r2, r5
 80279a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80279a8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80279ac:	2cff      	cmp	r4, #255	; 0xff
 80279ae:	d01a      	beq.n	80279e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80279b0:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80279b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80279b8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80279bc:	fb04 fa05 	mul.w	sl, r4, r5
 80279c0:	fb08 f80e 	mul.w	r8, r8, lr
 80279c4:	f10a 0e20 	add.w	lr, sl, #32
 80279c8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80279cc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80279d0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80279d4:	4445      	add	r5, r8
 80279d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80279da:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80279de:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80279e2:	ea45 050e 	orr.w	r5, r5, lr
 80279e6:	fb1c fe01 	smulbb	lr, ip, r1
 80279ea:	f1cc 0810 	rsb	r8, ip, #16
 80279ee:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80279f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80279f6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80279fa:	eba8 0801 	sub.w	r8, r8, r1
 80279fe:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027a06:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027a0a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8027a0e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027a12:	ea4a 0202 	orr.w	r2, sl, r2
 8027a16:	4341      	muls	r1, r0
 8027a18:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027a1c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027a20:	fb09 1108 	mla	r1, r9, r8, r1
 8027a24:	ea4b 0505 	orr.w	r5, fp, r5
 8027a28:	fb0c 1102 	mla	r1, ip, r2, r1
 8027a2c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027a30:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027a34:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a3c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027a40:	ea42 0e0e 	orr.w	lr, r2, lr
 8027a44:	fa1f f28e 	uxth.w	r2, lr
 8027a48:	2bff      	cmp	r3, #255	; 0xff
 8027a4a:	f040 80a1 	bne.w	8027b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8027a4e:	803a      	strh	r2, [r7, #0]
 8027a50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027a52:	3702      	adds	r7, #2
 8027a54:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027a56:	4413      	add	r3, r2
 8027a58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8027a5a:	9325      	str	r3, [sp, #148]	; 0x94
 8027a5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a5e:	441a      	add	r2, r3
 8027a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027a62:	3b01      	subs	r3, #1
 8027a64:	9226      	str	r2, [sp, #152]	; 0x98
 8027a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8027a68:	e6c7      	b.n	80277fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027a6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027a6c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8027a6e:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8027a70:	4433      	add	r3, r6
 8027a72:	9325      	str	r3, [sp, #148]	; 0x94
 8027a74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a76:	441c      	add	r4, r3
 8027a78:	9b06      	ldr	r3, [sp, #24]
 8027a7a:	3b01      	subs	r3, #1
 8027a7c:	9426      	str	r4, [sp, #152]	; 0x98
 8027a7e:	9306      	str	r3, [sp, #24]
 8027a80:	9b07      	ldr	r3, [sp, #28]
 8027a82:	3302      	adds	r3, #2
 8027a84:	9307      	str	r3, [sp, #28]
 8027a86:	e696      	b.n	80277b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027a88:	d028      	beq.n	8027adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027a8a:	9b06      	ldr	r3, [sp, #24]
 8027a8c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027a8e:	3b01      	subs	r3, #1
 8027a90:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8027a92:	fb00 5003 	mla	r0, r0, r3, r5
 8027a96:	1400      	asrs	r0, r0, #16
 8027a98:	f53f aeaa 	bmi.w	80277f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027a9c:	3901      	subs	r1, #1
 8027a9e:	4288      	cmp	r0, r1
 8027aa0:	f6bf aea6 	bge.w	80277f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027aa4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027aa6:	9826      	ldr	r0, [sp, #152]	; 0x98
 8027aa8:	fb01 0303 	mla	r3, r1, r3, r0
 8027aac:	141b      	asrs	r3, r3, #16
 8027aae:	f53f ae9f 	bmi.w	80277f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027ab2:	3a01      	subs	r2, #1
 8027ab4:	4293      	cmp	r3, r2
 8027ab6:	f6bf ae9b 	bge.w	80277f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027aba:	9b06      	ldr	r3, [sp, #24]
 8027abc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8027ac0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8027ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027ac8:	2b00      	cmp	r3, #0
 8027aca:	f300 80b6 	bgt.w	8027c3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8027ace:	9b06      	ldr	r3, [sp, #24]
 8027ad0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027ad4:	9b07      	ldr	r3, [sp, #28]
 8027ad6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027ada:	9307      	str	r3, [sp, #28]
 8027adc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027ade:	2b00      	cmp	r3, #0
 8027ae0:	f340 8218 	ble.w	8027f14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027aea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027aee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027af2:	eef0 6a48 	vmov.f32	s13, s16
 8027af6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027afa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027afe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b02:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8027b06:	eef0 6a68 	vmov.f32	s13, s17
 8027b0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b0e:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8027b12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027b16:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027b1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027b1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027b22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027b26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027b2a:	ee18 2a10 	vmov	r2, s16
 8027b2e:	eeb0 8a47 	vmov.f32	s16, s14
 8027b32:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b36:	ee18 2a90 	vmov	r2, s17
 8027b3a:	9327      	str	r3, [sp, #156]	; 0x9c
 8027b3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b3e:	eef0 8a67 	vmov.f32	s17, s15
 8027b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b46:	9328      	str	r3, [sp, #160]	; 0xa0
 8027b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027b4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027b4c:	3b01      	subs	r3, #1
 8027b4e:	930e      	str	r3, [sp, #56]	; 0x38
 8027b50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b52:	bf08      	it	eq
 8027b54:	4613      	moveq	r3, r2
 8027b56:	9306      	str	r3, [sp, #24]
 8027b58:	e61f      	b.n	802779a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027b5a:	fb08 f505 	mul.w	r5, r8, r5
 8027b5e:	fb09 5303 	mla	r3, r9, r3, r5
 8027b62:	e69f      	b.n	80278a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8027b64:	4681      	mov	r9, r0
 8027b66:	e6c6      	b.n	80278f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027b68:	f1c1 0210 	rsb	r2, r1, #16
 8027b6c:	4341      	muls	r1, r0
 8027b6e:	fb09 1902 	mla	r9, r9, r2, r1
 8027b72:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027b76:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027b7a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027b7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b82:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027b86:	ea42 0909 	orr.w	r9, r2, r9
 8027b8a:	fa1f f289 	uxth.w	r2, r9
 8027b8e:	e75b      	b.n	8027a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8027b90:	f8b7 c000 	ldrh.w	ip, [r7]
 8027b94:	43db      	mvns	r3, r3
 8027b96:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027b9a:	fa5f fe83 	uxtb.w	lr, r3
 8027b9e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027ba2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027ba6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027baa:	fb00 f00e 	mul.w	r0, r0, lr
 8027bae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027bb2:	b2db      	uxtb	r3, r3
 8027bb4:	1c41      	adds	r1, r0, #1
 8027bb6:	fb05 f50e 	mul.w	r5, r5, lr
 8027bba:	fb03 f30e 	mul.w	r3, r3, lr
 8027bbe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027bc2:	1211      	asrs	r1, r2, #8
 8027bc4:	f021 0107 	bic.w	r1, r1, #7
 8027bc8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027bcc:	48d4      	ldr	r0, [pc, #848]	; (8027f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027bce:	b2c9      	uxtb	r1, r1
 8027bd0:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027bd4:	1c69      	adds	r1, r5, #1
 8027bd6:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027bda:	10d1      	asrs	r1, r2, #3
 8027bdc:	00d2      	lsls	r2, r2, #3
 8027bde:	f021 0103 	bic.w	r1, r1, #3
 8027be2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027be6:	00c9      	lsls	r1, r1, #3
 8027be8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027bec:	4301      	orrs	r1, r0
 8027bee:	1c58      	adds	r0, r3, #1
 8027bf0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027bf4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027bf8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027bfc:	430a      	orrs	r2, r1
 8027bfe:	e726      	b.n	8027a4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027c00:	f115 0e01 	adds.w	lr, r5, #1
 8027c04:	f53f af24 	bmi.w	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c08:	4572      	cmp	r2, lr
 8027c0a:	f6ff af21 	blt.w	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c0e:	f110 0e01 	adds.w	lr, r0, #1
 8027c12:	f53f af1d 	bmi.w	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c16:	4573      	cmp	r3, lr
 8027c18:	f6ff af1a 	blt.w	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c1c:	b21b      	sxth	r3, r3
 8027c1e:	b212      	sxth	r2, r2
 8027c20:	9301      	str	r3, [sp, #4]
 8027c22:	9200      	str	r2, [sp, #0]
 8027c24:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027c28:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027c2c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027c30:	4639      	mov	r1, r7
 8027c32:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027c34:	f7ff fbf2 	bl	802741c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027c38:	e70a      	b.n	8027a50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c3a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027c3c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027c40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027c42:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027c46:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027c48:	fa1f fc82 	uxth.w	ip, r2
 8027c4c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027c52:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027c56:	141f      	asrs	r7, r3, #16
 8027c58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027c5a:	141b      	asrs	r3, r3, #16
 8027c5c:	fb01 3707 	mla	r7, r1, r7, r3
 8027c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027c62:	eb03 0a07 	add.w	sl, r3, r7
 8027c66:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027c6a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027c6e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027c72:	b29b      	uxth	r3, r3
 8027c74:	2d00      	cmp	r5, #0
 8027c76:	f000 80fe 	beq.w	8027e76 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027c7a:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027c7e:	eb0a 0b01 	add.w	fp, sl, r1
 8027c82:	fa1f fa85 	uxth.w	sl, r5
 8027c86:	940c      	str	r4, [sp, #48]	; 0x30
 8027c88:	fb0a fc0c 	mul.w	ip, sl, ip
 8027c8c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027c90:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027c94:	eba0 000c 	sub.w	r0, r0, ip
 8027c98:	940d      	str	r4, [sp, #52]	; 0x34
 8027c9a:	fa1f fa8a 	uxth.w	sl, sl
 8027c9e:	b280      	uxth	r0, r0
 8027ca0:	eba3 030a 	sub.w	r3, r3, sl
 8027ca4:	fb08 f000 	mul.w	r0, r8, r0
 8027ca8:	b29b      	uxth	r3, r3
 8027caa:	fb09 0303 	mla	r3, r9, r3, r0
 8027cae:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027cb0:	fb0a 3300 	mla	r3, sl, r0, r3
 8027cb4:	fb0c 3304 	mla	r3, ip, r4, r3
 8027cb8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027cbc:	2b00      	cmp	r3, #0
 8027cbe:	f000 80cc 	beq.w	8027e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027cc2:	9808      	ldr	r0, [sp, #32]
 8027cc4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027cc8:	9c08      	ldr	r4, [sp, #32]
 8027cca:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027cce:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027cd2:	f000 80d5 	beq.w	8027e80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8027cd6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027cda:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027cde:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027ce2:	fb0a fc0c 	mul.w	ip, sl, ip
 8027ce6:	fb09 f707 	mul.w	r7, r9, r7
 8027cea:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027cee:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027cf2:	f107 0b20 	add.w	fp, r7, #32
 8027cf6:	44cc      	add	ip, r9
 8027cf8:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027cfc:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d04:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8027d08:	ea4c 0909 	orr.w	r9, ip, r9
 8027d0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027d10:	8847      	ldrh	r7, [r0, #2]
 8027d12:	d019      	beq.n	8027d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8027d14:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8027d18:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027d1c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d20:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d24:	fb08 f807 	mul.w	r8, r8, r7
 8027d28:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027d2c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8027d30:	f108 0b20 	add.w	fp, r8, #32
 8027d34:	44bc      	add	ip, r7
 8027d36:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027d3a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d3e:	0a3f      	lsrs	r7, r7, #8
 8027d40:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027d44:	ea4c 0707 	orr.w	r7, ip, r7
 8027d48:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027d4c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027d50:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027d54:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8027d58:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8027d5c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027d60:	ea4c 0909 	orr.w	r9, ip, r9
 8027d64:	ea4a 0707 	orr.w	r7, sl, r7
 8027d68:	2d00      	cmp	r5, #0
 8027d6a:	f000 808b 	beq.w	8027e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027d6e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8027d72:	3901      	subs	r1, #1
 8027d74:	0049      	lsls	r1, r1, #1
 8027d76:	3102      	adds	r1, #2
 8027d78:	eb00 0c01 	add.w	ip, r0, r1
 8027d7c:	5a41      	ldrh	r1, [r0, r1]
 8027d7e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027d80:	28ff      	cmp	r0, #255	; 0xff
 8027d82:	d019      	beq.n	8027db8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8027d84:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8027d88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8027d8a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027d8e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027d92:	fb04 fa01 	mul.w	sl, r4, r1
 8027d96:	fb08 f800 	mul.w	r8, r8, r0
 8027d9a:	f10a 0020 	add.w	r0, sl, #32
 8027d9e:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027da2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027da6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027daa:	4441      	add	r1, r8
 8027dac:	0a00      	lsrs	r0, r0, #8
 8027dae:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027db2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027db6:	4301      	orrs	r1, r0
 8027db8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8027dba:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027dbe:	2cff      	cmp	r4, #255	; 0xff
 8027dc0:	d01a      	beq.n	8027df8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8027dc2:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8027dc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027dca:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027dce:	fb04 fa00 	mul.w	sl, r4, r0
 8027dd2:	fb08 f80c 	mul.w	r8, r8, ip
 8027dd6:	f10a 0c20 	add.w	ip, sl, #32
 8027dda:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027dde:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8027de2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027de6:	4440      	add	r0, r8
 8027de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027dec:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027df0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8027df4:	ea40 000c 	orr.w	r0, r0, ip
 8027df8:	fb15 fc02 	smulbb	ip, r5, r2
 8027dfc:	f1c5 0810 	rsb	r8, r5, #16
 8027e00:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027e04:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027e08:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027e0c:	eba8 0802 	sub.w	r8, r8, r2
 8027e10:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027e14:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027e18:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027e1c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027e20:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027e24:	ea4a 0101 	orr.w	r1, sl, r1
 8027e28:	437a      	muls	r2, r7
 8027e2a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027e2e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027e32:	fb09 2208 	mla	r2, r9, r8, r2
 8027e36:	ea4b 0000 	orr.w	r0, fp, r0
 8027e3a:	fb05 2201 	mla	r2, r5, r1, r2
 8027e3e:	fb0c 2200 	mla	r2, ip, r0, r2
 8027e42:	0d57      	lsrs	r7, r2, #21
 8027e44:	0952      	lsrs	r2, r2, #5
 8027e46:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8027e4a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027e4e:	433a      	orrs	r2, r7
 8027e50:	2bff      	cmp	r3, #255	; 0xff
 8027e52:	b292      	uxth	r2, r2
 8027e54:	d127      	bne.n	8027ea6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8027e56:	f8ae 2000 	strh.w	r2, [lr]
 8027e5a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027e5c:	f10e 0e02 	add.w	lr, lr, #2
 8027e60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027e62:	4413      	add	r3, r2
 8027e64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8027e66:	9325      	str	r3, [sp, #148]	; 0x94
 8027e68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027e6a:	441a      	add	r2, r3
 8027e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8027e6e:	3b01      	subs	r3, #1
 8027e70:	9226      	str	r2, [sp, #152]	; 0x98
 8027e72:	930f      	str	r3, [sp, #60]	; 0x3c
 8027e74:	e627      	b.n	8027ac6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027e76:	fb08 f000 	mul.w	r0, r8, r0
 8027e7a:	fb09 0303 	mla	r3, r9, r3, r0
 8027e7e:	e71b      	b.n	8027cb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027e80:	46b9      	mov	r9, r7
 8027e82:	e743      	b.n	8027d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8027e84:	f1c2 0110 	rsb	r1, r2, #16
 8027e88:	437a      	muls	r2, r7
 8027e8a:	fb09 2901 	mla	r9, r9, r1, r2
 8027e8e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027e92:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027e96:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027e9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8027e9e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027ea2:	4302      	orrs	r2, r0
 8027ea4:	e7d4      	b.n	8027e50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8027ea6:	f8be 7000 	ldrh.w	r7, [lr]
 8027eaa:	43db      	mvns	r3, r3
 8027eac:	4c1c      	ldr	r4, [pc, #112]	; (8027f20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027eae:	1238      	asrs	r0, r7, #8
 8027eb0:	fa5f fc83 	uxtb.w	ip, r3
 8027eb4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8027eb8:	10fd      	asrs	r5, r7, #3
 8027eba:	00fb      	lsls	r3, r7, #3
 8027ebc:	fb00 f00c 	mul.w	r0, r0, ip
 8027ec0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8027ec4:	b2db      	uxtb	r3, r3
 8027ec6:	fb05 f10c 	mul.w	r1, r5, ip
 8027eca:	1c45      	adds	r5, r0, #1
 8027ecc:	fb03 f30c 	mul.w	r3, r3, ip
 8027ed0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027ed4:	1215      	asrs	r5, r2, #8
 8027ed6:	f025 0507 	bic.w	r5, r5, #7
 8027eda:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027ede:	1c4d      	adds	r5, r1, #1
 8027ee0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027ee4:	10d1      	asrs	r1, r2, #3
 8027ee6:	b2c0      	uxtb	r0, r0
 8027ee8:	f021 0103 	bic.w	r1, r1, #3
 8027eec:	00d2      	lsls	r2, r2, #3
 8027eee:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027ef2:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027ef6:	00c9      	lsls	r1, r1, #3
 8027ef8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8027efc:	4308      	orrs	r0, r1
 8027efe:	1c59      	adds	r1, r3, #1
 8027f00:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027f04:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f08:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027f0c:	4318      	orrs	r0, r3
 8027f0e:	f8ae 0000 	strh.w	r0, [lr]
 8027f12:	e7a2      	b.n	8027e5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027f14:	b013      	add	sp, #76	; 0x4c
 8027f16:	ecbd 8b08 	vpop	{d8-d11}
 8027f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f1e:	bf00      	nop
 8027f20:	fffff800 	.word	0xfffff800

08027f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f28:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8027f2c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027f30:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027f34:	f1bc 0f00 	cmp.w	ip, #0
 8027f38:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8027f3c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8027f40:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027f44:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8027f48:	8808      	ldrh	r0, [r1, #0]
 8027f4a:	db2f      	blt.n	8027fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027f4c:	45e2      	cmp	sl, ip
 8027f4e:	dd2d      	ble.n	8027fac <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027f50:	2c00      	cmp	r4, #0
 8027f52:	db29      	blt.n	8027fa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027f54:	42a3      	cmp	r3, r4
 8027f56:	dd27      	ble.n	8027fa8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027f58:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027f5c:	1c62      	adds	r2, r4, #1
 8027f5e:	d428      	bmi.n	8027fb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027f60:	4293      	cmp	r3, r2
 8027f62:	dd26      	ble.n	8027fb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027f64:	b32f      	cbz	r7, 8027fb2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027f66:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027f6a:	f11c 0c01 	adds.w	ip, ip, #1
 8027f6e:	d424      	bmi.n	8027fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027f70:	45e2      	cmp	sl, ip
 8027f72:	dd22      	ble.n	8027fba <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027f74:	2e00      	cmp	r6, #0
 8027f76:	f000 809d 	beq.w	80280b4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027f7a:	2c00      	cmp	r4, #0
 8027f7c:	db1b      	blt.n	8027fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027f7e:	42a3      	cmp	r3, r4
 8027f80:	dd19      	ble.n	8027fb6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027f82:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027f86:	3401      	adds	r4, #1
 8027f88:	d41a      	bmi.n	8027fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027f8a:	42a3      	cmp	r3, r4
 8027f8c:	dd18      	ble.n	8027fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027f8e:	b1cf      	cbz	r7, 8027fc4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8027f90:	3301      	adds	r3, #1
 8027f92:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027f96:	2f0f      	cmp	r7, #15
 8027f98:	d915      	bls.n	8027fc6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027f9a:	4b49      	ldr	r3, [pc, #292]	; (80280c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027f9c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8027fa0:	4a48      	ldr	r2, [pc, #288]	; (80280c4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8027fa2:	4849      	ldr	r0, [pc, #292]	; (80280c8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8027fa4:	f002 ffb0 	bl	802af08 <__assert_func>
 8027fa8:	4681      	mov	r9, r0
 8027faa:	e7d7      	b.n	8027f5c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8027fac:	4686      	mov	lr, r0
 8027fae:	4681      	mov	r9, r0
 8027fb0:	e7db      	b.n	8027f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027fb2:	4686      	mov	lr, r0
 8027fb4:	e7d9      	b.n	8027f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8027fb6:	4684      	mov	ip, r0
 8027fb8:	e7e5      	b.n	8027f86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8027fba:	4603      	mov	r3, r0
 8027fbc:	4684      	mov	ip, r0
 8027fbe:	e7ea      	b.n	8027f96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027fc0:	4603      	mov	r3, r0
 8027fc2:	e7e8      	b.n	8027f96 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8027fc4:	4603      	mov	r3, r0
 8027fc6:	2e0f      	cmp	r6, #15
 8027fc8:	d8e7      	bhi.n	8027f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8027fca:	fb17 f806 	smulbb	r8, r7, r6
 8027fce:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8027fd2:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8027fd6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8027fda:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027fde:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8027fe2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027fe6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027fea:	ea44 0909 	orr.w	r9, r4, r9
 8027fee:	f1c6 0410 	rsb	r4, r6, #16
 8027ff2:	041a      	lsls	r2, r3, #16
 8027ff4:	ea4a 0e0e 	orr.w	lr, sl, lr
 8027ff8:	1be4      	subs	r4, r4, r7
 8027ffa:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8027ffe:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028002:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028006:	fb07 fe0e 	mul.w	lr, r7, lr
 802800a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802800e:	4313      	orrs	r3, r2
 8028010:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028014:	fb04 e409 	mla	r4, r4, r9, lr
 8028018:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802801c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028020:	b2af      	uxth	r7, r5
 8028022:	fb08 4303 	mla	r3, r8, r3, r4
 8028026:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 802802a:	43ed      	mvns	r5, r5
 802802c:	4322      	orrs	r2, r4
 802802e:	b2ed      	uxtb	r5, r5
 8028030:	fb06 3202 	mla	r2, r6, r2, r3
 8028034:	10c6      	asrs	r6, r0, #3
 8028036:	0d53      	lsrs	r3, r2, #21
 8028038:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802803c:	0952      	lsrs	r2, r2, #5
 802803e:	fb16 f605 	smulbb	r6, r6, r5
 8028042:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028046:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802804a:	431a      	orrs	r2, r3
 802804c:	b293      	uxth	r3, r2
 802804e:	1202      	asrs	r2, r0, #8
 8028050:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028054:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028058:	00dc      	lsls	r4, r3, #3
 802805a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802805e:	fb12 f205 	smulbb	r2, r2, r5
 8028062:	b2e4      	uxtb	r4, r4
 8028064:	fb0c 2c07 	mla	ip, ip, r7, r2
 8028068:	10da      	asrs	r2, r3, #3
 802806a:	00c3      	lsls	r3, r0, #3
 802806c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028070:	fa1f fc8c 	uxth.w	ip, ip
 8028074:	b2db      	uxtb	r3, r3
 8028076:	fb02 6207 	mla	r2, r2, r7, r6
 802807a:	fb13 f305 	smulbb	r3, r3, r5
 802807e:	b296      	uxth	r6, r2
 8028080:	fb04 3307 	mla	r3, r4, r7, r3
 8028084:	b29a      	uxth	r2, r3
 8028086:	f10c 0301 	add.w	r3, ip, #1
 802808a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802808e:	1c53      	adds	r3, r2, #1
 8028090:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028094:	1c72      	adds	r2, r6, #1
 8028096:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802809a:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 802809e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80280a2:	0952      	lsrs	r2, r2, #5
 80280a4:	ea43 030c 	orr.w	r3, r3, ip
 80280a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80280ac:	4313      	orrs	r3, r2
 80280ae:	800b      	strh	r3, [r1, #0]
 80280b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80280b4:	2f0f      	cmp	r7, #15
 80280b6:	f63f af70 	bhi.w	8027f9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 80280ba:	4603      	mov	r3, r0
 80280bc:	4684      	mov	ip, r0
 80280be:	e784      	b.n	8027fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 80280c0:	08030159 	.word	0x08030159
 80280c4:	080307cf 	.word	0x080307cf
 80280c8:	080301dd 	.word	0x080301dd

080280cc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80280cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280d0:	ed2d 8b08 	vpush	{d8-d11}
 80280d4:	b093      	sub	sp, #76	; 0x4c
 80280d6:	461d      	mov	r5, r3
 80280d8:	eeb0 aa40 	vmov.f32	s20, s0
 80280dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80280de:	eef0 9a60 	vmov.f32	s19, s1
 80280e2:	9210      	str	r2, [sp, #64]	; 0x40
 80280e4:	eeb0 9a41 	vmov.f32	s18, s2
 80280e8:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 80280ec:	eeb0 8a62 	vmov.f32	s16, s5
 80280f0:	910a      	str	r1, [sp, #40]	; 0x28
 80280f2:	eef0 8a43 	vmov.f32	s17, s6
 80280f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80280f8:	eef0 ba44 	vmov.f32	s23, s8
 80280fc:	6859      	ldr	r1, [r3, #4]
 80280fe:	eeb0 ba64 	vmov.f32	s22, s9
 8028102:	681b      	ldr	r3, [r3, #0]
 8028104:	eef0 aa45 	vmov.f32	s21, s10
 8028108:	9011      	str	r0, [sp, #68]	; 0x44
 802810a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 802810e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028112:	fb01 2707 	mla	r7, r1, r7, r2
 8028116:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802811a:	9307      	str	r3, [sp, #28]
 802811c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802811e:	681b      	ldr	r3, [r3, #0]
 8028120:	9309      	str	r3, [sp, #36]	; 0x24
 8028122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028124:	43db      	mvns	r3, r3
 8028126:	b2db      	uxtb	r3, r3
 8028128:	9308      	str	r3, [sp, #32]
 802812a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802812c:	2b00      	cmp	r3, #0
 802812e:	dc03      	bgt.n	8028138 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028130:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8028132:	2b00      	cmp	r3, #0
 8028134:	f340 8205 	ble.w	8028542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028138:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802813a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802813e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028142:	1e48      	subs	r0, r1, #1
 8028144:	f102 3cff 	add.w	ip, r2, #4294967295
 8028148:	2d00      	cmp	r5, #0
 802814a:	f340 80da 	ble.w	8028302 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802814e:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028152:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028156:	d406      	bmi.n	8028166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028158:	4586      	cmp	lr, r0
 802815a:	da04      	bge.n	8028166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802815c:	2b00      	cmp	r3, #0
 802815e:	db02      	blt.n	8028166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028160:	4563      	cmp	r3, ip
 8028162:	f2c0 80cf 	blt.w	8028304 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028166:	f11e 0e01 	adds.w	lr, lr, #1
 802816a:	f100 80c1 	bmi.w	80282f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802816e:	4571      	cmp	r1, lr
 8028170:	f2c0 80be 	blt.w	80282f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028174:	3301      	adds	r3, #1
 8028176:	f100 80bb 	bmi.w	80282f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802817a:	429a      	cmp	r2, r3
 802817c:	f2c0 80b8 	blt.w	80282f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8028180:	46a9      	mov	r9, r5
 8028182:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028186:	f1b9 0f00 	cmp.w	r9, #0
 802818a:	f340 80d8 	ble.w	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802818e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028190:	1421      	asrs	r1, r4, #16
 8028192:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028196:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802819a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802819e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80281a2:	f100 8112 	bmi.w	80283ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80281a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80281aa:	4551      	cmp	r1, sl
 80281ac:	f280 810d 	bge.w	80283ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80281b0:	2800      	cmp	r0, #0
 80281b2:	f2c0 810a 	blt.w	80283ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80281b6:	f103 3aff 	add.w	sl, r3, #4294967295
 80281ba:	4550      	cmp	r0, sl
 80281bc:	f280 8105 	bge.w	80283ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80281c0:	fa0f f38e 	sxth.w	r3, lr
 80281c4:	fb00 1103 	mla	r1, r0, r3, r1
 80281c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80281ca:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80281ce:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80281d2:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80281d6:	f1bc 0f00 	cmp.w	ip, #0
 80281da:	d007      	beq.n	80281ec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80281dc:	005b      	lsls	r3, r3, #1
 80281de:	eb0a 0003 	add.w	r0, sl, r3
 80281e2:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80281e6:	930c      	str	r3, [sp, #48]	; 0x30
 80281e8:	8843      	ldrh	r3, [r0, #2]
 80281ea:	930d      	str	r3, [sp, #52]	; 0x34
 80281ec:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80281f0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80281f4:	fb12 f30c 	smulbb	r3, r2, ip
 80281f8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80281fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028200:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028204:	10db      	asrs	r3, r3, #3
 8028206:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802820a:	ea40 000e 	orr.w	r0, r0, lr
 802820e:	f1cc 0e10 	rsb	lr, ip, #16
 8028212:	ea4a 0101 	orr.w	r1, sl, r1
 8028216:	9f08      	ldr	r7, [sp, #32]
 8028218:	ebae 0e02 	sub.w	lr, lr, r2
 802821c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028220:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028224:	4351      	muls	r1, r2
 8028226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028228:	fb0e 1e00 	mla	lr, lr, r0, r1
 802822c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802822e:	0410      	lsls	r0, r2, #16
 8028230:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028234:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028238:	4310      	orrs	r0, r2
 802823a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802823c:	0412      	lsls	r2, r2, #16
 802823e:	fb03 e000 	mla	r0, r3, r0, lr
 8028242:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8028246:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802824a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802824e:	ea42 020e 	orr.w	r2, r2, lr
 8028252:	fb03 0302 	mla	r3, r3, r2, r0
 8028256:	f8b8 0000 	ldrh.w	r0, [r8]
 802825a:	0d5a      	lsrs	r2, r3, #21
 802825c:	095b      	lsrs	r3, r3, #5
 802825e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028262:	1201      	asrs	r1, r0, #8
 8028264:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8028268:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802826c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028270:	00c0      	lsls	r0, r0, #3
 8028272:	4313      	orrs	r3, r2
 8028274:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8028278:	fb11 f107 	smulbb	r1, r1, r7
 802827c:	b2c0      	uxtb	r0, r0
 802827e:	b29b      	uxth	r3, r3
 8028280:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8028284:	fb10 f007 	smulbb	r0, r0, r7
 8028288:	fb1e fe07 	smulbb	lr, lr, r7
 802828c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028290:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028294:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028298:	10d9      	asrs	r1, r3, #3
 802829a:	00db      	lsls	r3, r3, #3
 802829c:	fa1f fc8c 	uxth.w	ip, ip
 80282a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80282a4:	b2db      	uxtb	r3, r3
 80282a6:	fb01 e102 	mla	r1, r1, r2, lr
 80282aa:	fb03 0302 	mla	r3, r3, r2, r0
 80282ae:	b289      	uxth	r1, r1
 80282b0:	b29a      	uxth	r2, r3
 80282b2:	f10c 0301 	add.w	r3, ip, #1
 80282b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80282ba:	1c53      	adds	r3, r2, #1
 80282bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80282c0:	1c4a      	adds	r2, r1, #1
 80282c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80282c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80282ca:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80282ce:	0949      	lsrs	r1, r1, #5
 80282d0:	ea43 030c 	orr.w	r3, r3, ip
 80282d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80282d8:	430b      	orrs	r3, r1
 80282da:	f8a8 3000 	strh.w	r3, [r8]
 80282de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80282e0:	f108 0802 	add.w	r8, r8, #2
 80282e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80282e8:	441c      	add	r4, r3
 80282ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80282ec:	441e      	add	r6, r3
 80282ee:	e74a      	b.n	8028186 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80282f0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80282f2:	3d01      	subs	r5, #1
 80282f4:	441c      	add	r4, r3
 80282f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80282f8:	441e      	add	r6, r3
 80282fa:	9b07      	ldr	r3, [sp, #28]
 80282fc:	3302      	adds	r3, #2
 80282fe:	9307      	str	r3, [sp, #28]
 8028300:	e722      	b.n	8028148 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028302:	d022      	beq.n	802834a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028304:	1e6b      	subs	r3, r5, #1
 8028306:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028308:	fb00 4003 	mla	r0, r0, r3, r4
 802830c:	1400      	asrs	r0, r0, #16
 802830e:	f53f af37 	bmi.w	8028180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028312:	3901      	subs	r1, #1
 8028314:	4288      	cmp	r0, r1
 8028316:	f6bf af33 	bge.w	8028180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802831a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802831c:	fb01 6303 	mla	r3, r1, r3, r6
 8028320:	141b      	asrs	r3, r3, #16
 8028322:	f53f af2d 	bmi.w	8028180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028326:	3a01      	subs	r2, #1
 8028328:	4293      	cmp	r3, r2
 802832a:	f6bf af29 	bge.w	8028180 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802832e:	46a8      	mov	r8, r5
 8028330:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028334:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8028338:	f1b8 0f00 	cmp.w	r8, #0
 802833c:	dc60      	bgt.n	8028400 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802833e:	9b07      	ldr	r3, [sp, #28]
 8028340:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028344:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028348:	9307      	str	r3, [sp, #28]
 802834a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802834c:	2b00      	cmp	r3, #0
 802834e:	f340 80f8 	ble.w	8028542 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028356:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028358:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802835c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028360:	eef0 6a48 	vmov.f32	s13, s16
 8028364:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028368:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802836c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028370:	ee16 4a90 	vmov	r4, s13
 8028374:	eef0 6a68 	vmov.f32	s13, s17
 8028378:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802837c:	ee16 6a90 	vmov	r6, s13
 8028380:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028384:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028388:	ee37 8a48 	vsub.f32	s16, s14, s16
 802838c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028390:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028394:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028398:	ee18 2a10 	vmov	r2, s16
 802839c:	eeb0 8a47 	vmov.f32	s16, s14
 80283a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80283a4:	ee18 2a90 	vmov	r2, s17
 80283a8:	9327      	str	r3, [sp, #156]	; 0x9c
 80283aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283ac:	eef0 8a67 	vmov.f32	s17, s15
 80283b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80283b4:	9328      	str	r3, [sp, #160]	; 0xa0
 80283b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80283b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80283ba:	3b01      	subs	r3, #1
 80283bc:	930a      	str	r3, [sp, #40]	; 0x28
 80283be:	bf08      	it	eq
 80283c0:	4615      	moveq	r5, r2
 80283c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283c4:	bf18      	it	ne
 80283c6:	461d      	movne	r5, r3
 80283c8:	e6af      	b.n	802812a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80283ca:	f111 0a01 	adds.w	sl, r1, #1
 80283ce:	d486      	bmi.n	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80283d0:	45d6      	cmp	lr, sl
 80283d2:	db84      	blt.n	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80283d4:	f110 0a01 	adds.w	sl, r0, #1
 80283d8:	d481      	bmi.n	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80283da:	4553      	cmp	r3, sl
 80283dc:	f6ff af7f 	blt.w	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80283e0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80283e2:	b21b      	sxth	r3, r3
 80283e4:	9101      	str	r1, [sp, #4]
 80283e6:	4641      	mov	r1, r8
 80283e8:	9300      	str	r3, [sp, #0]
 80283ea:	fa0f f38e 	sxth.w	r3, lr
 80283ee:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80283f2:	e9cd c704 	strd	ip, r7, [sp, #16]
 80283f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80283f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80283fa:	f7ff fd93 	bl	8027f24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 80283fe:	e76e      	b.n	80282de <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028400:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028402:	1430      	asrs	r0, r6, #16
 8028404:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8028406:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802840a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802840e:	1423      	asrs	r3, r4, #16
 8028410:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028414:	fb01 3000 	mla	r0, r1, r0, r3
 8028418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802841a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802841e:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028422:	8858      	ldrh	r0, [r3, #2]
 8028424:	f1be 0f00 	cmp.w	lr, #0
 8028428:	d00b      	beq.n	8028442 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802842a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802842e:	3901      	subs	r1, #1
 8028430:	0049      	lsls	r1, r1, #1
 8028432:	3102      	adds	r1, #2
 8028434:	eb03 0b01 	add.w	fp, r3, r1
 8028438:	5a5b      	ldrh	r3, [r3, r1]
 802843a:	930e      	str	r3, [sp, #56]	; 0x38
 802843c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028440:	930f      	str	r3, [sp, #60]	; 0x3c
 8028442:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028446:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802844a:	fb12 f30e 	smulbb	r3, r2, lr
 802844e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028452:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8028456:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802845a:	10db      	asrs	r3, r3, #3
 802845c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028460:	ea41 010c 	orr.w	r1, r1, ip
 8028464:	f1ce 0c10 	rsb	ip, lr, #16
 8028468:	ea4b 0000 	orr.w	r0, fp, r0
 802846c:	9f08      	ldr	r7, [sp, #32]
 802846e:	ebac 0c02 	sub.w	ip, ip, r2
 8028472:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028476:	f108 38ff 	add.w	r8, r8, #4294967295
 802847a:	4350      	muls	r0, r2
 802847c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028482:	fb0c 0c01 	mla	ip, ip, r1, r0
 8028486:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028488:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802848c:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8028490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028492:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028496:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802849a:	0412      	lsls	r2, r2, #16
 802849c:	ea4b 0101 	orr.w	r1, fp, r1
 80284a0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80284a4:	fb03 c101 	mla	r1, r3, r1, ip
 80284a8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80284ac:	4302      	orrs	r2, r0
 80284ae:	fb03 1202 	mla	r2, r3, r2, r1
 80284b2:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80284b6:	0952      	lsrs	r2, r2, #5
 80284b8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80284bc:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80284c0:	f8b9 2000 	ldrh.w	r2, [r9]
 80284c4:	ea4b 0303 	orr.w	r3, fp, r3
 80284c8:	1211      	asrs	r1, r2, #8
 80284ca:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80284ce:	b29b      	uxth	r3, r3
 80284d0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80284d4:	00d2      	lsls	r2, r2, #3
 80284d6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80284da:	fb11 f107 	smulbb	r1, r1, r7
 80284de:	1218      	asrs	r0, r3, #8
 80284e0:	fb1c fc07 	smulbb	ip, ip, r7
 80284e4:	b2d2      	uxtb	r2, r2
 80284e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80284ea:	fb12 f207 	smulbb	r2, r2, r7
 80284ee:	fb00 100a 	mla	r0, r0, sl, r1
 80284f2:	10d9      	asrs	r1, r3, #3
 80284f4:	00db      	lsls	r3, r3, #3
 80284f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80284fa:	b280      	uxth	r0, r0
 80284fc:	b2db      	uxtb	r3, r3
 80284fe:	fb01 c10a 	mla	r1, r1, sl, ip
 8028502:	fb03 230a 	mla	r3, r3, sl, r2
 8028506:	1c42      	adds	r2, r0, #1
 8028508:	b289      	uxth	r1, r1
 802850a:	b29b      	uxth	r3, r3
 802850c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028510:	f101 0c01 	add.w	ip, r1, #1
 8028514:	1c5a      	adds	r2, r3, #1
 8028516:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802851a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802851e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028522:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028524:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028528:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802852c:	441c      	add	r4, r3
 802852e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028532:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028534:	4310      	orrs	r0, r2
 8028536:	441e      	add	r6, r3
 8028538:	ea40 000c 	orr.w	r0, r0, ip
 802853c:	f829 0b02 	strh.w	r0, [r9], #2
 8028540:	e6fa      	b.n	8028338 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028542:	b013      	add	sp, #76	; 0x4c
 8028544:	ecbd 8b08 	vpop	{d8-d11}
 8028548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802854c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802854c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028550:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8028554:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8028558:	fb06 5c03 	mla	ip, r6, r3, r5
 802855c:	2e00      	cmp	r6, #0
 802855e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8028562:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8028566:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802856a:	8808      	ldrh	r0, [r1, #0]
 802856c:	db2e      	blt.n	80285cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802856e:	45b0      	cmp	r8, r6
 8028570:	dd2c      	ble.n	80285cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 8028572:	2d00      	cmp	r5, #0
 8028574:	db28      	blt.n	80285c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8028576:	42ab      	cmp	r3, r5
 8028578:	dd26      	ble.n	80285c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 802857a:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802857e:	1c6a      	adds	r2, r5, #1
 8028580:	d427      	bmi.n	80285d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028582:	4293      	cmp	r3, r2
 8028584:	dd25      	ble.n	80285d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028586:	b324      	cbz	r4, 80285d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8028588:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802858c:	3601      	adds	r6, #1
 802858e:	d424      	bmi.n	80285da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028590:	45b0      	cmp	r8, r6
 8028592:	dd22      	ble.n	80285da <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 8028594:	b31f      	cbz	r7, 80285de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 8028596:	2d00      	cmp	r5, #0
 8028598:	db1d      	blt.n	80285d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802859a:	42ab      	cmp	r3, r5
 802859c:	dd1b      	ble.n	80285d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 802859e:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80285a2:	3501      	adds	r5, #1
 80285a4:	d405      	bmi.n	80285b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80285a6:	42ab      	cmp	r3, r5
 80285a8:	dd03      	ble.n	80285b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80285aa:	b124      	cbz	r4, 80285b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80285ac:	3301      	adds	r3, #1
 80285ae:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80285b2:	2c0f      	cmp	r4, #15
 80285b4:	d801      	bhi.n	80285ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80285b6:	2f0f      	cmp	r7, #15
 80285b8:	d914      	bls.n	80285e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80285ba:	4b27      	ldr	r3, [pc, #156]	; (8028658 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80285bc:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80285c0:	4a26      	ldr	r2, [pc, #152]	; (802865c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80285c2:	4827      	ldr	r0, [pc, #156]	; (8028660 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80285c4:	f002 fca0 	bl	802af08 <__assert_func>
 80285c8:	4684      	mov	ip, r0
 80285ca:	e7d8      	b.n	802857e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80285cc:	4602      	mov	r2, r0
 80285ce:	4684      	mov	ip, r0
 80285d0:	e7dc      	b.n	802858c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80285d2:	4602      	mov	r2, r0
 80285d4:	e7da      	b.n	802858c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80285d6:	4606      	mov	r6, r0
 80285d8:	e7e3      	b.n	80285a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80285da:	4606      	mov	r6, r0
 80285dc:	e7e9      	b.n	80285b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80285de:	2c0f      	cmp	r4, #15
 80285e0:	d8eb      	bhi.n	80285ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80285e2:	4606      	mov	r6, r0
 80285e4:	fb14 f307 	smulbb	r3, r4, r7
 80285e8:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80285ec:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80285f0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80285f4:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80285f8:	10db      	asrs	r3, r3, #3
 80285fa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80285fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8028602:	ea45 0c0c 	orr.w	ip, r5, ip
 8028606:	f1c7 0510 	rsb	r5, r7, #16
 802860a:	ea4e 0202 	orr.w	r2, lr, r2
 802860e:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8028612:	1b2d      	subs	r5, r5, r4
 8028614:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8028618:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802861c:	4354      	muls	r4, r2
 802861e:	fb05 450c 	mla	r5, r5, ip, r4
 8028622:	0404      	lsls	r4, r0, #16
 8028624:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8028628:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802862c:	4320      	orrs	r0, r4
 802862e:	fb03 5400 	mla	r4, r3, r0, r5
 8028632:	0430      	lsls	r0, r6, #16
 8028634:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8028638:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802863c:	4330      	orrs	r0, r6
 802863e:	fb07 4000 	mla	r0, r7, r0, r4
 8028642:	0d43      	lsrs	r3, r0, #21
 8028644:	0940      	lsrs	r0, r0, #5
 8028646:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802864a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802864e:	4318      	orrs	r0, r3
 8028650:	8008      	strh	r0, [r1, #0]
 8028652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028656:	bf00      	nop
 8028658:	08030159 	.word	0x08030159
 802865c:	080307cf 	.word	0x080307cf
 8028660:	080301dd 	.word	0x080301dd

08028664 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028668:	ed2d 8b08 	vpush	{d8-d11}
 802866c:	b08f      	sub	sp, #60	; 0x3c
 802866e:	461d      	mov	r5, r3
 8028670:	eeb0 aa40 	vmov.f32	s20, s0
 8028674:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028676:	eef0 9a60 	vmov.f32	s19, s1
 802867a:	9107      	str	r1, [sp, #28]
 802867c:	eeb0 9a41 	vmov.f32	s18, s2
 8028680:	6859      	ldr	r1, [r3, #4]
 8028682:	eeb0 8a62 	vmov.f32	s16, s5
 8028686:	920c      	str	r2, [sp, #48]	; 0x30
 8028688:	eef0 8a43 	vmov.f32	s17, s6
 802868c:	681b      	ldr	r3, [r3, #0]
 802868e:	eef0 ba44 	vmov.f32	s23, s8
 8028692:	eeb0 ba64 	vmov.f32	s22, s9
 8028696:	900d      	str	r0, [sp, #52]	; 0x34
 8028698:	eef0 aa45 	vmov.f32	s21, s10
 802869c:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80286a0:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80286a4:	fb01 2707 	mla	r7, r1, r7, r2
 80286a8:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80286ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80286ae:	f8d3 8000 	ldr.w	r8, [r3]
 80286b2:	9b07      	ldr	r3, [sp, #28]
 80286b4:	2b00      	cmp	r3, #0
 80286b6:	dc03      	bgt.n	80286c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80286b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80286ba:	2b00      	cmp	r3, #0
 80286bc:	f340 8182 	ble.w	80289c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80286c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80286c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80286c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80286ca:	1e48      	subs	r0, r1, #1
 80286cc:	f102 3cff 	add.w	ip, r2, #4294967295
 80286d0:	2d00      	cmp	r5, #0
 80286d2:	f340 809b 	ble.w	802880c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80286d6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80286da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80286de:	d406      	bmi.n	80286ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80286e0:	4586      	cmp	lr, r0
 80286e2:	da04      	bge.n	80286ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80286e4:	2b00      	cmp	r3, #0
 80286e6:	db02      	blt.n	80286ee <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80286e8:	4563      	cmp	r3, ip
 80286ea:	f2c0 8090 	blt.w	802880e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80286ee:	f11e 0e01 	adds.w	lr, lr, #1
 80286f2:	f100 8084 	bmi.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80286f6:	4571      	cmp	r1, lr
 80286f8:	f2c0 8081 	blt.w	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80286fc:	3301      	adds	r3, #1
 80286fe:	d47e      	bmi.n	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028700:	429a      	cmp	r2, r3
 8028702:	db7c      	blt.n	80287fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028704:	46aa      	mov	sl, r5
 8028706:	46b9      	mov	r9, r7
 8028708:	f1ba 0f00 	cmp.w	sl, #0
 802870c:	f340 8099 	ble.w	8028842 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8028710:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028712:	1421      	asrs	r1, r4, #16
 8028714:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028718:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802871c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028720:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028724:	f100 80d1 	bmi.w	80288ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028728:	f10e 3bff 	add.w	fp, lr, #4294967295
 802872c:	4559      	cmp	r1, fp
 802872e:	f280 80cc 	bge.w	80288ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028732:	2800      	cmp	r0, #0
 8028734:	f2c0 80c9 	blt.w	80288ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028738:	f103 3bff 	add.w	fp, r3, #4294967295
 802873c:	4558      	cmp	r0, fp
 802873e:	f280 80c4 	bge.w	80288ca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028742:	fa0f fe8e 	sxth.w	lr, lr
 8028746:	fb00 110e 	mla	r1, r0, lr, r1
 802874a:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802874e:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8028752:	8841      	ldrh	r1, [r0, #2]
 8028754:	f1bc 0f00 	cmp.w	ip, #0
 8028758:	d00b      	beq.n	8028772 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 802875a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802875e:	3b01      	subs	r3, #1
 8028760:	005b      	lsls	r3, r3, #1
 8028762:	3302      	adds	r3, #2
 8028764:	eb00 0e03 	add.w	lr, r0, r3
 8028768:	5ac3      	ldrh	r3, [r0, r3]
 802876a:	9308      	str	r3, [sp, #32]
 802876c:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8028770:	9309      	str	r3, [sp, #36]	; 0x24
 8028772:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8028776:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802877a:	fb12 f30c 	smulbb	r3, r2, ip
 802877e:	f1cc 0e10 	rsb	lr, ip, #16
 8028782:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8028786:	10db      	asrs	r3, r3, #3
 8028788:	ebae 0e02 	sub.w	lr, lr, r2
 802878c:	ea40 000b 	orr.w	r0, r0, fp
 8028790:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028794:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028798:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802879c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80287a0:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80287a4:	ea4b 0101 	orr.w	r1, fp, r1
 80287a8:	4351      	muls	r1, r2
 80287aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80287ac:	fb0e 1e00 	mla	lr, lr, r0, r1
 80287b0:	0410      	lsls	r0, r2, #16
 80287b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80287b6:	9908      	ldr	r1, [sp, #32]
 80287b8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80287bc:	4310      	orrs	r0, r2
 80287be:	9a08      	ldr	r2, [sp, #32]
 80287c0:	0412      	lsls	r2, r2, #16
 80287c2:	fb03 e000 	mla	r0, r3, r0, lr
 80287c6:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80287ca:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80287ce:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80287d2:	ea42 020e 	orr.w	r2, r2, lr
 80287d6:	fb03 0302 	mla	r3, r3, r2, r0
 80287da:	0d5a      	lsrs	r2, r3, #21
 80287dc:	095b      	lsrs	r3, r3, #5
 80287de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80287e2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80287e6:	4313      	orrs	r3, r2
 80287e8:	f8a9 3000 	strh.w	r3, [r9]
 80287ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80287ee:	f109 0902 	add.w	r9, r9, #2
 80287f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80287f6:	441c      	add	r4, r3
 80287f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80287fa:	441e      	add	r6, r3
 80287fc:	e784      	b.n	8028708 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80287fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028800:	3d01      	subs	r5, #1
 8028802:	3702      	adds	r7, #2
 8028804:	441c      	add	r4, r3
 8028806:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028808:	441e      	add	r6, r3
 802880a:	e761      	b.n	80286d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802880c:	d01d      	beq.n	802884a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802880e:	1e6b      	subs	r3, r5, #1
 8028810:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028812:	fb00 4003 	mla	r0, r0, r3, r4
 8028816:	1400      	asrs	r0, r0, #16
 8028818:	f53f af74 	bmi.w	8028704 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802881c:	3901      	subs	r1, #1
 802881e:	4288      	cmp	r0, r1
 8028820:	f6bf af70 	bge.w	8028704 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028824:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028826:	fb01 6303 	mla	r3, r1, r3, r6
 802882a:	141b      	asrs	r3, r3, #16
 802882c:	f53f af6a 	bmi.w	8028704 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028830:	3a01      	subs	r2, #1
 8028832:	4293      	cmp	r3, r2
 8028834:	f6bf af66 	bge.w	8028704 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028838:	46a9      	mov	r9, r5
 802883a:	46ba      	mov	sl, r7
 802883c:	f1b9 0f00 	cmp.w	r9, #0
 8028840:	dc5b      	bgt.n	80288fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8028842:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028846:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802884a:	9b07      	ldr	r3, [sp, #28]
 802884c:	2b00      	cmp	r3, #0
 802884e:	f340 80b9 	ble.w	80289c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8028852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028856:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028858:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802885c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028860:	eef0 6a48 	vmov.f32	s13, s16
 8028864:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8028868:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802886c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028870:	ee16 4a90 	vmov	r4, s13
 8028874:	eef0 6a68 	vmov.f32	s13, s17
 8028878:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802887c:	ee16 6a90 	vmov	r6, s13
 8028880:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8028884:	ee69 7a27 	vmul.f32	s15, s18, s15
 8028888:	ee37 8a48 	vsub.f32	s16, s14, s16
 802888c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028890:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8028894:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8028898:	ee18 2a10 	vmov	r2, s16
 802889c:	eeb0 8a47 	vmov.f32	s16, s14
 80288a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80288a4:	ee18 2a90 	vmov	r2, s17
 80288a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80288aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80288ac:	eef0 8a67 	vmov.f32	s17, s15
 80288b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80288b4:	9324      	str	r3, [sp, #144]	; 0x90
 80288b6:	9b07      	ldr	r3, [sp, #28]
 80288b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80288ba:	3b01      	subs	r3, #1
 80288bc:	9307      	str	r3, [sp, #28]
 80288be:	bf08      	it	eq
 80288c0:	4615      	moveq	r5, r2
 80288c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80288c4:	bf18      	it	ne
 80288c6:	461d      	movne	r5, r3
 80288c8:	e6f3      	b.n	80286b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80288ca:	f111 0b01 	adds.w	fp, r1, #1
 80288ce:	d48d      	bmi.n	80287ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80288d0:	45de      	cmp	lr, fp
 80288d2:	db8b      	blt.n	80287ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80288d4:	f110 0b01 	adds.w	fp, r0, #1
 80288d8:	d488      	bmi.n	80287ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80288da:	455b      	cmp	r3, fp
 80288dc:	db86      	blt.n	80287ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80288de:	b21b      	sxth	r3, r3
 80288e0:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80288e4:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80288e8:	9300      	str	r3, [sp, #0]
 80288ea:	4642      	mov	r2, r8
 80288ec:	fa0f f38e 	sxth.w	r3, lr
 80288f0:	4649      	mov	r1, r9
 80288f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80288f4:	f7ff fe2a 	bl	802854c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 80288f8:	e778      	b.n	80287ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80288fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288fc:	1420      	asrs	r0, r4, #16
 80288fe:	1431      	asrs	r1, r6, #16
 8028900:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028904:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028908:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802890c:	fb03 0101 	mla	r1, r3, r1, r0
 8028910:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028914:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028918:	8841      	ldrh	r1, [r0, #2]
 802891a:	f1be 0f00 	cmp.w	lr, #0
 802891e:	d00b      	beq.n	8028938 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8028920:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8028924:	3b01      	subs	r3, #1
 8028926:	005b      	lsls	r3, r3, #1
 8028928:	3302      	adds	r3, #2
 802892a:	eb00 0b03 	add.w	fp, r0, r3
 802892e:	5ac3      	ldrh	r3, [r0, r3]
 8028930:	930a      	str	r3, [sp, #40]	; 0x28
 8028932:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028936:	930b      	str	r3, [sp, #44]	; 0x2c
 8028938:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802893c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8028940:	fb12 f30e 	smulbb	r3, r2, lr
 8028944:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8028948:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802894c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8028950:	10db      	asrs	r3, r3, #3
 8028952:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8028956:	ea40 000c 	orr.w	r0, r0, ip
 802895a:	f1ce 0c10 	rsb	ip, lr, #16
 802895e:	ea4b 0101 	orr.w	r1, fp, r1
 8028962:	f109 39ff 	add.w	r9, r9, #4294967295
 8028966:	ebac 0c02 	sub.w	ip, ip, r2
 802896a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802896e:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8028972:	4351      	muls	r1, r2
 8028974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028976:	fb0c 1c00 	mla	ip, ip, r0, r1
 802897a:	990a      	ldr	r1, [sp, #40]	; 0x28
 802897c:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8028980:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8028984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028986:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802898a:	0412      	lsls	r2, r2, #16
 802898c:	ea4b 0000 	orr.w	r0, fp, r0
 8028990:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8028994:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8028998:	fb03 c000 	mla	r0, r3, r0, ip
 802899c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80289a0:	ea42 0b0b 	orr.w	fp, r2, fp
 80289a4:	fb03 000b 	mla	r0, r3, fp, r0
 80289a8:	0d43      	lsrs	r3, r0, #21
 80289aa:	0940      	lsrs	r0, r0, #5
 80289ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80289b0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80289b4:	4318      	orrs	r0, r3
 80289b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80289b8:	441c      	add	r4, r3
 80289ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80289bc:	f82a 0b02 	strh.w	r0, [sl], #2
 80289c0:	441e      	add	r6, r3
 80289c2:	e73b      	b.n	802883c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80289c4:	b00f      	add	sp, #60	; 0x3c
 80289c6:	ecbd 8b08 	vpop	{d8-d11}
 80289ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80289d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80289d4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80289d8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80289dc:	fb04 5603 	mla	r6, r4, r3, r5
 80289e0:	2c00      	cmp	r4, #0
 80289e2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80289e6:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80289ea:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80289ee:	db36      	blt.n	8028a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80289f0:	45a6      	cmp	lr, r4
 80289f2:	dd34      	ble.n	8028a5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80289f4:	2d00      	cmp	r5, #0
 80289f6:	db30      	blt.n	8028a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80289f8:	42ab      	cmp	r3, r5
 80289fa:	dd2e      	ble.n	8028a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 80289fc:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028a00:	1c6e      	adds	r6, r5, #1
 8028a02:	d42f      	bmi.n	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028a04:	42b3      	cmp	r3, r6
 8028a06:	dd2d      	ble.n	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028a08:	b370      	cbz	r0, 8028a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8028a0a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028a0e:	3401      	adds	r4, #1
 8028a10:	d42e      	bmi.n	8028a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028a12:	45a6      	cmp	lr, r4
 8028a14:	dd2c      	ble.n	8028a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028a16:	b377      	cbz	r7, 8028a76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8028a18:	2d00      	cmp	r5, #0
 8028a1a:	db27      	blt.n	8028a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028a1c:	42ab      	cmp	r3, r5
 8028a1e:	dd25      	ble.n	8028a6c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028a20:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028a24:	3501      	adds	r5, #1
 8028a26:	d429      	bmi.n	8028a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028a28:	42ab      	cmp	r3, r5
 8028a2a:	dd27      	ble.n	8028a7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028a2c:	b340      	cbz	r0, 8028a80 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8028a2e:	3301      	adds	r3, #1
 8028a30:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8028a34:	280f      	cmp	r0, #15
 8028a36:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028a3a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028a3e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028a42:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028a46:	d801      	bhi.n	8028a4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8028a48:	2f0f      	cmp	r7, #15
 8028a4a:	d91b      	bls.n	8028a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8028a4c:	4b8d      	ldr	r3, [pc, #564]	; (8028c84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8028a4e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028a52:	4a8d      	ldr	r2, [pc, #564]	; (8028c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8028a54:	488d      	ldr	r0, [pc, #564]	; (8028c8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8028a56:	f002 fa57 	bl	802af08 <__assert_func>
 8028a5a:	2200      	movs	r2, #0
 8028a5c:	e7d0      	b.n	8028a00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8028a5e:	2600      	movs	r6, #0
 8028a60:	4632      	mov	r2, r6
 8028a62:	e7d4      	b.n	8028a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028a64:	2600      	movs	r6, #0
 8028a66:	e7d2      	b.n	8028a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028a68:	4606      	mov	r6, r0
 8028a6a:	e7d0      	b.n	8028a0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028a6c:	2400      	movs	r4, #0
 8028a6e:	e7d9      	b.n	8028a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8028a70:	2300      	movs	r3, #0
 8028a72:	461c      	mov	r4, r3
 8028a74:	e7de      	b.n	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028a76:	463b      	mov	r3, r7
 8028a78:	463c      	mov	r4, r7
 8028a7a:	e7db      	b.n	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028a7c:	2300      	movs	r3, #0
 8028a7e:	e7d9      	b.n	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028a80:	4603      	mov	r3, r0
 8028a82:	e7d7      	b.n	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028a84:	b280      	uxth	r0, r0
 8028a86:	b2bf      	uxth	r7, r7
 8028a88:	fb07 fe00 	mul.w	lr, r7, r0
 8028a8c:	0100      	lsls	r0, r0, #4
 8028a8e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028a92:	eba0 0c0e 	sub.w	ip, r0, lr
 8028a96:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8028a9a:	b2bf      	uxth	r7, r7
 8028a9c:	fa1f fc8c 	uxth.w	ip, ip
 8028aa0:	1bed      	subs	r5, r5, r7
 8028aa2:	fb0a f00c 	mul.w	r0, sl, ip
 8028aa6:	b2ad      	uxth	r5, r5
 8028aa8:	fb0b 0005 	mla	r0, fp, r5, r0
 8028aac:	fb07 0009 	mla	r0, r7, r9, r0
 8028ab0:	fb0e 0008 	mla	r0, lr, r8, r0
 8028ab4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028ab8:	9001      	str	r0, [sp, #4]
 8028aba:	2800      	cmp	r0, #0
 8028abc:	f000 80de 	beq.w	8028c7c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8028ac0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8028ac4:	d018      	beq.n	8028af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8028ac6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8028aca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028ace:	fb0b f000 	mul.w	r0, fp, r0
 8028ad2:	fb0b fb02 	mul.w	fp, fp, r2
 8028ad6:	0a02      	lsrs	r2, r0, #8
 8028ad8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028adc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028ae0:	4402      	add	r2, r0
 8028ae2:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028ae6:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028aea:	0a12      	lsrs	r2, r2, #8
 8028aec:	0a00      	lsrs	r0, r0, #8
 8028aee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028af2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028af6:	4302      	orrs	r2, r0
 8028af8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8028afc:	d01a      	beq.n	8028b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8028afe:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028b02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028b06:	fb0a f000 	mul.w	r0, sl, r0
 8028b0a:	fb0a fa06 	mul.w	sl, sl, r6
 8028b0e:	0a06      	lsrs	r6, r0, #8
 8028b10:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028b14:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028b18:	4406      	add	r6, r0
 8028b1a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8028b1e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028b22:	0a36      	lsrs	r6, r6, #8
 8028b24:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b28:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028b2c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b30:	ea46 060a 	orr.w	r6, r6, sl
 8028b34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028b38:	d01b      	beq.n	8028b72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8028b3a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8028b3e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028b42:	fb09 fa0a 	mul.w	sl, r9, sl
 8028b46:	fb09 f004 	mul.w	r0, r9, r4
 8028b4a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028b4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b52:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028b56:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b5a:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028b5e:	4454      	add	r4, sl
 8028b60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028b64:	0a24      	lsrs	r4, r4, #8
 8028b66:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028b6a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028b6e:	ea44 0409 	orr.w	r4, r4, r9
 8028b72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8028b76:	d01b      	beq.n	8028bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8028b78:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8028b7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028b80:	fb08 f909 	mul.w	r9, r8, r9
 8028b84:	fb08 f003 	mul.w	r0, r8, r3
 8028b88:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028b8c:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8028b90:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8028b94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b98:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028b9c:	444b      	add	r3, r9
 8028b9e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028ba2:	0a1b      	lsrs	r3, r3, #8
 8028ba4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8028ba8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028bac:	ea43 0308 	orr.w	r3, r3, r8
 8028bb0:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8028bb4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028bb8:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8028bbc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028bc0:	fb0c f808 	mul.w	r8, ip, r8
 8028bc4:	8808      	ldrh	r0, [r1, #0]
 8028bc6:	fb0c f606 	mul.w	r6, ip, r6
 8028bca:	fb05 8909 	mla	r9, r5, r9, r8
 8028bce:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8028bd2:	fb05 6502 	mla	r5, r5, r2, r6
 8028bd6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028bda:	fb07 9908 	mla	r9, r7, r8, r9
 8028bde:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8028be2:	fb07 5704 	mla	r7, r7, r4, r5
 8028be6:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8028bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028bee:	b2b6      	uxth	r6, r6
 8028bf0:	fb0e 9808 	mla	r8, lr, r8, r9
 8028bf4:	9a01      	ldr	r2, [sp, #4]
 8028bf6:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028bfa:	1205      	asrs	r5, r0, #8
 8028bfc:	4372      	muls	r2, r6
 8028bfe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028c02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8028c0a:	1c53      	adds	r3, r2, #1
 8028c0c:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028c10:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028c14:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028c18:	ea48 0e0e 	orr.w	lr, r8, lr
 8028c1c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028c20:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8028c24:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8028c28:	b2db      	uxtb	r3, r3
 8028c2a:	fb12 f206 	smulbb	r2, r2, r6
 8028c2e:	fa5f fe8e 	uxtb.w	lr, lr
 8028c32:	fb14 f406 	smulbb	r4, r4, r6
 8028c36:	fb05 2503 	mla	r5, r5, r3, r2
 8028c3a:	10c2      	asrs	r2, r0, #3
 8028c3c:	fb1e fe06 	smulbb	lr, lr, r6
 8028c40:	00c0      	lsls	r0, r0, #3
 8028c42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028c46:	b2ad      	uxth	r5, r5
 8028c48:	b2c0      	uxtb	r0, r0
 8028c4a:	fb02 4203 	mla	r2, r2, r3, r4
 8028c4e:	fb00 e303 	mla	r3, r0, r3, lr
 8028c52:	b294      	uxth	r4, r2
 8028c54:	b298      	uxth	r0, r3
 8028c56:	1c6b      	adds	r3, r5, #1
 8028c58:	1c62      	adds	r2, r4, #1
 8028c5a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028c5e:	1c43      	adds	r3, r0, #1
 8028c60:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028c64:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028c68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8028c6c:	0952      	lsrs	r2, r2, #5
 8028c6e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c72:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c76:	432b      	orrs	r3, r5
 8028c78:	4313      	orrs	r3, r2
 8028c7a:	800b      	strh	r3, [r1, #0]
 8028c7c:	b003      	add	sp, #12
 8028c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028c82:	bf00      	nop
 8028c84:	08030159 	.word	0x08030159
 8028c88:	08030726 	.word	0x08030726
 8028c8c:	080301dd 	.word	0x080301dd

08028c90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c94:	ed2d 8b08 	vpush	{d8-d11}
 8028c98:	b09d      	sub	sp, #116	; 0x74
 8028c9a:	eeb0 aa40 	vmov.f32	s20, s0
 8028c9e:	eef0 9a60 	vmov.f32	s19, s1
 8028ca2:	9219      	str	r2, [sp, #100]	; 0x64
 8028ca4:	eeb0 9a41 	vmov.f32	s18, s2
 8028ca8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8028caa:	eeb0 8a62 	vmov.f32	s16, s5
 8028cae:	9307      	str	r3, [sp, #28]
 8028cb0:	eef0 8a43 	vmov.f32	s17, s6
 8028cb4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8028cb8:	eef0 ba44 	vmov.f32	s23, s8
 8028cbc:	901b      	str	r0, [sp, #108]	; 0x6c
 8028cbe:	eeb0 ba64 	vmov.f32	s22, s9
 8028cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8028cc4:	eef0 aa45 	vmov.f32	s21, s10
 8028cc8:	6850      	ldr	r0, [r2, #4]
 8028cca:	9117      	str	r1, [sp, #92]	; 0x5c
 8028ccc:	6812      	ldr	r2, [r2, #0]
 8028cce:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8028cd2:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8028cd6:	fb00 1303 	mla	r3, r0, r3, r1
 8028cda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028cde:	930a      	str	r3, [sp, #40]	; 0x28
 8028ce0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028ce2:	681b      	ldr	r3, [r3, #0]
 8028ce4:	9310      	str	r3, [sp, #64]	; 0x40
 8028ce6:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8028cea:	930b      	str	r3, [sp, #44]	; 0x2c
 8028cec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	dc03      	bgt.n	8028cfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028cf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028cf4:	2b00      	cmp	r3, #0
 8028cf6:	f340 8375 	ble.w	80293e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028cfa:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028cfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028d00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028d04:	1e48      	subs	r0, r1, #1
 8028d06:	1e57      	subs	r7, r2, #1
 8028d08:	9b07      	ldr	r3, [sp, #28]
 8028d0a:	2b00      	cmp	r3, #0
 8028d0c:	f340 818e 	ble.w	802902c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028d10:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028d14:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028d18:	d406      	bmi.n	8028d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d1a:	4584      	cmp	ip, r0
 8028d1c:	da04      	bge.n	8028d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d1e:	2b00      	cmp	r3, #0
 8028d20:	db02      	blt.n	8028d28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d22:	42bb      	cmp	r3, r7
 8028d24:	f2c0 8183 	blt.w	802902e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028d28:	f11c 0c01 	adds.w	ip, ip, #1
 8028d2c:	f100 8173 	bmi.w	8029016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d30:	4561      	cmp	r1, ip
 8028d32:	f2c0 8170 	blt.w	8029016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d36:	3301      	adds	r3, #1
 8028d38:	f100 816d 	bmi.w	8029016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d3c:	429a      	cmp	r2, r3
 8028d3e:	f2c0 816a 	blt.w	8029016 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d42:	9b07      	ldr	r3, [sp, #28]
 8028d44:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028d46:	9318      	str	r3, [sp, #96]	; 0x60
 8028d48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028d4a:	2b00      	cmp	r3, #0
 8028d4c:	f340 818c 	ble.w	8029068 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8028d50:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8028d52:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028d56:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028d58:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028d5c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028d60:	1422      	asrs	r2, r4, #16
 8028d62:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028d66:	689b      	ldr	r3, [r3, #8]
 8028d68:	f100 81cd 	bmi.w	8029106 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028d6c:	f103 38ff 	add.w	r8, r3, #4294967295
 8028d70:	4542      	cmp	r2, r8
 8028d72:	f280 81c8 	bge.w	8029106 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028d76:	f1bc 0f00 	cmp.w	ip, #0
 8028d7a:	f2c0 81c4 	blt.w	8029106 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028d7e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028d82:	45c4      	cmp	ip, r8
 8028d84:	f280 81bf 	bge.w	8029106 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028d88:	b21b      	sxth	r3, r3
 8028d8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028d8c:	fb0c 2203 	mla	r2, ip, r3, r2
 8028d90:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028d94:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028d98:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028d9c:	2800      	cmp	r0, #0
 8028d9e:	f000 81a9 	beq.w	80290f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028da2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028da6:	950c      	str	r5, [sp, #48]	; 0x30
 8028da8:	0e2d      	lsrs	r5, r5, #24
 8028daa:	9513      	str	r5, [sp, #76]	; 0x4c
 8028dac:	b181      	cbz	r1, 8028dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028dae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8028db2:	3b01      	subs	r3, #1
 8028db4:	009b      	lsls	r3, r3, #2
 8028db6:	3304      	adds	r3, #4
 8028db8:	eb08 0c03 	add.w	ip, r8, r3
 8028dbc:	f858 3003 	ldr.w	r3, [r8, r3]
 8028dc0:	9308      	str	r3, [sp, #32]
 8028dc2:	0e1b      	lsrs	r3, r3, #24
 8028dc4:	9311      	str	r3, [sp, #68]	; 0x44
 8028dc6:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028dca:	930d      	str	r3, [sp, #52]	; 0x34
 8028dcc:	0e1b      	lsrs	r3, r3, #24
 8028dce:	9314      	str	r3, [sp, #80]	; 0x50
 8028dd0:	b280      	uxth	r0, r0
 8028dd2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028dd4:	b289      	uxth	r1, r1
 8028dd6:	fb00 f901 	mul.w	r9, r0, r1
 8028dda:	0100      	lsls	r0, r0, #4
 8028ddc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028de0:	eba0 0809 	sub.w	r8, r0, r9
 8028de4:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028de8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8028dea:	b289      	uxth	r1, r1
 8028dec:	fa1f f888 	uxth.w	r8, r8
 8028df0:	1a5b      	subs	r3, r3, r1
 8028df2:	fb08 f000 	mul.w	r0, r8, r0
 8028df6:	b29b      	uxth	r3, r3
 8028df8:	fb03 000e 	mla	r0, r3, lr, r0
 8028dfc:	fb01 0005 	mla	r0, r1, r5, r0
 8028e00:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028e02:	fb09 0005 	mla	r0, r9, r5, r0
 8028e06:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028e0a:	2800      	cmp	r0, #0
 8028e0c:	f000 80fa 	beq.w	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e10:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028e14:	d01b      	beq.n	8028e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e16:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028e1a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028e1e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028e22:	fb0e fe02 	mul.w	lr, lr, r2
 8028e26:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028e2a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028e2e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028e32:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028e36:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028e3a:	4452      	add	r2, sl
 8028e3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e40:	0a12      	lsrs	r2, r2, #8
 8028e42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028e46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028e4a:	ea42 020c 	orr.w	r2, r2, ip
 8028e4e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e50:	2dff      	cmp	r5, #255	; 0xff
 8028e52:	d021      	beq.n	8028e98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028e54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e56:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028e5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e5c:	fb05 fb0b 	mul.w	fp, r5, fp
 8028e60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028e62:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028e66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028e68:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028e6c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028e70:	fb05 fa0a 	mul.w	sl, r5, sl
 8028e74:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028e7c:	44de      	add	lr, fp
 8028e7e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028e82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028e86:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e8a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028e8e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e92:	ea4e 050a 	orr.w	r5, lr, sl
 8028e96:	950c      	str	r5, [sp, #48]	; 0x30
 8028e98:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028e9a:	2dff      	cmp	r5, #255	; 0xff
 8028e9c:	d021      	beq.n	8028ee2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028e9e:	9d08      	ldr	r5, [sp, #32]
 8028ea0:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028ea4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ea6:	fb05 fb0b 	mul.w	fp, r5, fp
 8028eaa:	9d08      	ldr	r5, [sp, #32]
 8028eac:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028eb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028eb2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028eb6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028eba:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ebe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ec2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028ec6:	44de      	add	lr, fp
 8028ec8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ecc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ed0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ed4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028ed8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028edc:	ea4e 050a 	orr.w	r5, lr, sl
 8028ee0:	9508      	str	r5, [sp, #32]
 8028ee2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028ee4:	2dff      	cmp	r5, #255	; 0xff
 8028ee6:	d021      	beq.n	8028f2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028ee8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028eea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028eee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028ef0:	fb05 fb0b 	mul.w	fp, r5, fp
 8028ef4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028ef6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028efa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028efc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028f00:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028f04:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028f0c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028f10:	44de      	add	lr, fp
 8028f12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028f16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028f1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028f22:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028f26:	ea4e 050a 	orr.w	r5, lr, sl
 8028f2a:	950d      	str	r5, [sp, #52]	; 0x34
 8028f2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028f2e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028f32:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028f36:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028f3a:	9d08      	ldr	r5, [sp, #32]
 8028f3c:	fb08 fc0c 	mul.w	ip, r8, ip
 8028f40:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028f44:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028f48:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028f4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028f4e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028f54:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028f58:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028f5c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028f5e:	fb08 f80e 	mul.w	r8, r8, lr
 8028f62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028f66:	fb03 8202 	mla	r2, r3, r2, r8
 8028f6a:	9b08      	ldr	r3, [sp, #32]
 8028f6c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028f70:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8028f74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f76:	fb01 220a 	mla	r2, r1, sl, r2
 8028f7a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8028f7e:	883b      	ldrh	r3, [r7, #0]
 8028f80:	fb09 2901 	mla	r9, r9, r1, r2
 8028f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028f86:	1219      	asrs	r1, r3, #8
 8028f88:	4342      	muls	r2, r0
 8028f8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028f8e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028f92:	1c50      	adds	r0, r2, #1
 8028f94:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028f98:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028f9c:	ea4c 0c09 	orr.w	ip, ip, r9
 8028fa0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028fa4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028fa8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8028fac:	fa5f fc8c 	uxtb.w	ip, ip
 8028fb0:	fb12 f205 	smulbb	r2, r2, r5
 8028fb4:	b2c0      	uxtb	r0, r0
 8028fb6:	fb1c fc05 	smulbb	ip, ip, r5
 8028fba:	fb01 2100 	mla	r1, r1, r0, r2
 8028fbe:	10da      	asrs	r2, r3, #3
 8028fc0:	fb1e fe05 	smulbb	lr, lr, r5
 8028fc4:	00db      	lsls	r3, r3, #3
 8028fc6:	b289      	uxth	r1, r1
 8028fc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8028fcc:	b2db      	uxtb	r3, r3
 8028fce:	fb02 e200 	mla	r2, r2, r0, lr
 8028fd2:	fb03 c300 	mla	r3, r3, r0, ip
 8028fd6:	b292      	uxth	r2, r2
 8028fd8:	fa1f fc83 	uxth.w	ip, r3
 8028fdc:	1c4b      	adds	r3, r1, #1
 8028fde:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028fe2:	f10c 0301 	add.w	r3, ip, #1
 8028fe6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8028fea:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028fee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028ff2:	430b      	orrs	r3, r1
 8028ff4:	1c51      	adds	r1, r2, #1
 8028ff6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028ffa:	0952      	lsrs	r2, r2, #5
 8028ffc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029000:	4313      	orrs	r3, r2
 8029002:	803b      	strh	r3, [r7, #0]
 8029004:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029006:	3702      	adds	r7, #2
 8029008:	441c      	add	r4, r3
 802900a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802900c:	441e      	add	r6, r3
 802900e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8029010:	3b01      	subs	r3, #1
 8029012:	9318      	str	r3, [sp, #96]	; 0x60
 8029014:	e698      	b.n	8028d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029016:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8029018:	441c      	add	r4, r3
 802901a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802901c:	441e      	add	r6, r3
 802901e:	9b07      	ldr	r3, [sp, #28]
 8029020:	3b01      	subs	r3, #1
 8029022:	9307      	str	r3, [sp, #28]
 8029024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029026:	3302      	adds	r3, #2
 8029028:	930a      	str	r3, [sp, #40]	; 0x28
 802902a:	e66d      	b.n	8028d08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802902c:	d023      	beq.n	8029076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802902e:	9b07      	ldr	r3, [sp, #28]
 8029030:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8029032:	3b01      	subs	r3, #1
 8029034:	fb00 4003 	mla	r0, r0, r3, r4
 8029038:	1400      	asrs	r0, r0, #16
 802903a:	f53f ae82 	bmi.w	8028d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802903e:	3901      	subs	r1, #1
 8029040:	4288      	cmp	r0, r1
 8029042:	f6bf ae7e 	bge.w	8028d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029046:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8029048:	fb01 6303 	mla	r3, r1, r3, r6
 802904c:	141b      	asrs	r3, r3, #16
 802904e:	f53f ae78 	bmi.w	8028d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8029052:	3a01      	subs	r2, #1
 8029054:	4293      	cmp	r3, r2
 8029056:	f6bf ae74 	bge.w	8028d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802905a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802905e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8029062:	f1bb 0f00 	cmp.w	fp, #0
 8029066:	dc6c      	bgt.n	8029142 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029068:	9b07      	ldr	r3, [sp, #28]
 802906a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802906e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029070:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029074:	930a      	str	r3, [sp, #40]	; 0x28
 8029076:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029078:	2b00      	cmp	r3, #0
 802907a:	f340 81b3 	ble.w	80293e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 802907e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029082:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8029084:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029088:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802908c:	eef0 6a48 	vmov.f32	s13, s16
 8029090:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029094:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029098:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802909c:	ee16 4a90 	vmov	r4, s13
 80290a0:	eef0 6a68 	vmov.f32	s13, s17
 80290a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80290a8:	ee16 6a90 	vmov	r6, s13
 80290ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80290b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80290b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80290b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80290bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80290c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80290c4:	ee18 2a10 	vmov	r2, s16
 80290c8:	eeb0 8a47 	vmov.f32	s16, s14
 80290cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80290d0:	ee18 2a90 	vmov	r2, s17
 80290d4:	9331      	str	r3, [sp, #196]	; 0xc4
 80290d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80290d8:	eef0 8a67 	vmov.f32	s17, s15
 80290dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80290e0:	9332      	str	r3, [sp, #200]	; 0xc8
 80290e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80290e4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80290e6:	3b01      	subs	r3, #1
 80290e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80290ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80290ec:	bf08      	it	eq
 80290ee:	4613      	moveq	r3, r2
 80290f0:	9307      	str	r3, [sp, #28]
 80290f2:	e5fb      	b.n	8028cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80290f4:	2900      	cmp	r1, #0
 80290f6:	f43f ae6b 	beq.w	8028dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80290fa:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80290fe:	9308      	str	r3, [sp, #32]
 8029100:	0e1b      	lsrs	r3, r3, #24
 8029102:	9311      	str	r3, [sp, #68]	; 0x44
 8029104:	e664      	b.n	8028dd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029106:	f112 0801 	adds.w	r8, r2, #1
 802910a:	f53f af7b 	bmi.w	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802910e:	4543      	cmp	r3, r8
 8029110:	f6ff af78 	blt.w	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029114:	f11c 0801 	adds.w	r8, ip, #1
 8029118:	f53f af74 	bmi.w	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802911c:	45c6      	cmp	lr, r8
 802911e:	f6ff af71 	blt.w	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029122:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8029124:	b21b      	sxth	r3, r3
 8029126:	9201      	str	r2, [sp, #4]
 8029128:	fa0f f28e 	sxth.w	r2, lr
 802912c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029130:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029134:	9200      	str	r2, [sp, #0]
 8029136:	4639      	mov	r1, r7
 8029138:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802913a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802913c:	f7ff fc48 	bl	80289d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029140:	e760      	b.n	8029004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029142:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8029144:	1427      	asrs	r7, r4, #16
 8029146:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029148:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802914c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029150:	1433      	asrs	r3, r6, #16
 8029152:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029156:	fb01 7303 	mla	r3, r1, r3, r7
 802915a:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802915e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029162:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029166:	2a00      	cmp	r2, #0
 8029168:	f000 8133 	beq.w	80293d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 802916c:	687d      	ldr	r5, [r7, #4]
 802916e:	950e      	str	r5, [sp, #56]	; 0x38
 8029170:	0e2d      	lsrs	r5, r5, #24
 8029172:	9515      	str	r5, [sp, #84]	; 0x54
 8029174:	b178      	cbz	r0, 8029196 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029176:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802917a:	3901      	subs	r1, #1
 802917c:	0089      	lsls	r1, r1, #2
 802917e:	3104      	adds	r1, #4
 8029180:	eb07 0e01 	add.w	lr, r7, r1
 8029184:	5879      	ldr	r1, [r7, r1]
 8029186:	9109      	str	r1, [sp, #36]	; 0x24
 8029188:	0e09      	lsrs	r1, r1, #24
 802918a:	9112      	str	r1, [sp, #72]	; 0x48
 802918c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029190:	910f      	str	r1, [sp, #60]	; 0x3c
 8029192:	0e09      	lsrs	r1, r1, #24
 8029194:	9116      	str	r1, [sp, #88]	; 0x58
 8029196:	b292      	uxth	r2, r2
 8029198:	9915      	ldr	r1, [sp, #84]	; 0x54
 802919a:	b280      	uxth	r0, r0
 802919c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802919e:	fb02 f800 	mul.w	r8, r2, r0
 80291a2:	0112      	lsls	r2, r2, #4
 80291a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80291a8:	eba2 0e08 	sub.w	lr, r2, r8
 80291ac:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80291b0:	b280      	uxth	r0, r0
 80291b2:	fa1f fe8e 	uxth.w	lr, lr
 80291b6:	1a12      	subs	r2, r2, r0
 80291b8:	fb0e f101 	mul.w	r1, lr, r1
 80291bc:	b292      	uxth	r2, r2
 80291be:	fb02 110c 	mla	r1, r2, ip, r1
 80291c2:	fb00 1105 	mla	r1, r0, r5, r1
 80291c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80291c8:	fb08 1105 	mla	r1, r8, r5, r1
 80291cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80291d0:	2900      	cmp	r1, #0
 80291d2:	f000 80f5 	beq.w	80293c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80291d6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80291da:	d019      	beq.n	8029210 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80291dc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80291e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80291e4:	fb0c fa0a 	mul.w	sl, ip, sl
 80291e8:	fb0c fc03 	mul.w	ip, ip, r3
 80291ec:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80291f0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80291f4:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80291f8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80291fc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029200:	4453      	add	r3, sl
 8029202:	0a3f      	lsrs	r7, r7, #8
 8029204:	0a1b      	lsrs	r3, r3, #8
 8029206:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802920a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802920e:	433b      	orrs	r3, r7
 8029210:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029212:	2dff      	cmp	r5, #255	; 0xff
 8029214:	d020      	beq.n	8029258 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029216:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029218:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802921c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802921e:	436f      	muls	r7, r5
 8029220:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029222:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029226:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802922a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802922c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029230:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029234:	fb05 fa0a 	mul.w	sl, r5, sl
 8029238:	44bc      	add	ip, r7
 802923a:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802923e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029242:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029246:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802924a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802924e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029252:	ea4c 050a 	orr.w	r5, ip, sl
 8029256:	950e      	str	r5, [sp, #56]	; 0x38
 8029258:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802925a:	2dff      	cmp	r5, #255	; 0xff
 802925c:	d020      	beq.n	80292a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802925e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029260:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029264:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029266:	436f      	muls	r7, r5
 8029268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802926a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802926e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029272:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029274:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029278:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802927c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029280:	44bc      	add	ip, r7
 8029282:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029286:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802928a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802928e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029292:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029296:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802929a:	ea4c 050a 	orr.w	r5, ip, sl
 802929e:	9509      	str	r5, [sp, #36]	; 0x24
 80292a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80292a2:	2dff      	cmp	r5, #255	; 0xff
 80292a4:	d020      	beq.n	80292e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 80292a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80292a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80292ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80292ae:	436f      	muls	r7, r5
 80292b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80292b2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80292b6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80292ba:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80292bc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80292c0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80292c4:	fb05 fa0a 	mul.w	sl, r5, sl
 80292c8:	44bc      	add	ip, r7
 80292ca:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80292ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292d2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80292d6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80292da:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80292e2:	ea4c 050a 	orr.w	r5, ip, sl
 80292e6:	950f      	str	r5, [sp, #60]	; 0x3c
 80292e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80292ea:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80292ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80292f2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80292f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80292f8:	fb0e f707 	mul.w	r7, lr, r7
 80292fc:	fb02 770c 	mla	r7, r2, ip, r7
 8029300:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029304:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029306:	fb00 770c 	mla	r7, r0, ip, r7
 802930a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802930e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029310:	fb08 770c 	mla	r7, r8, ip, r7
 8029314:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029318:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802931a:	fb0e fe0c 	mul.w	lr, lr, ip
 802931e:	0a3f      	lsrs	r7, r7, #8
 8029320:	fb02 e303 	mla	r3, r2, r3, lr
 8029324:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029326:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802932a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802932e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029330:	fb00 330a 	mla	r3, r0, sl, r3
 8029334:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8029338:	f8b9 0000 	ldrh.w	r0, [r9]
 802933c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029342:	1202      	asrs	r2, r0, #8
 8029344:	4359      	muls	r1, r3
 8029346:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802934a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802934e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029352:	1c4b      	adds	r3, r1, #1
 8029354:	ea47 070c 	orr.w	r7, r7, ip
 8029358:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802935c:	0c3b      	lsrs	r3, r7, #16
 802935e:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029362:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029366:	b2ff      	uxtb	r7, r7
 8029368:	fb13 f305 	smulbb	r3, r3, r5
 802936c:	b2c9      	uxtb	r1, r1
 802936e:	fb17 f705 	smulbb	r7, r7, r5
 8029372:	fb02 3201 	mla	r2, r2, r1, r3
 8029376:	10c3      	asrs	r3, r0, #3
 8029378:	fb1c fc05 	smulbb	ip, ip, r5
 802937c:	00c0      	lsls	r0, r0, #3
 802937e:	b292      	uxth	r2, r2
 8029380:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8029384:	b2c0      	uxtb	r0, r0
 8029386:	fb03 c301 	mla	r3, r3, r1, ip
 802938a:	fb00 7001 	mla	r0, r0, r1, r7
 802938e:	1c51      	adds	r1, r2, #1
 8029390:	b29b      	uxth	r3, r3
 8029392:	b280      	uxth	r0, r0
 8029394:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029398:	f100 0c01 	add.w	ip, r0, #1
 802939c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80293a0:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80293a4:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80293a8:	ea4c 0202 	orr.w	r2, ip, r2
 80293ac:	f103 0c01 	add.w	ip, r3, #1
 80293b0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80293b4:	095b      	lsrs	r3, r3, #5
 80293b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80293ba:	431a      	orrs	r2, r3
 80293bc:	f8a9 2000 	strh.w	r2, [r9]
 80293c0:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80293c2:	f109 0902 	add.w	r9, r9, #2
 80293c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80293ca:	441c      	add	r4, r3
 80293cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80293ce:	441e      	add	r6, r3
 80293d0:	e647      	b.n	8029062 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 80293d2:	2800      	cmp	r0, #0
 80293d4:	f43f aedf 	beq.w	8029196 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80293d8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80293dc:	9109      	str	r1, [sp, #36]	; 0x24
 80293de:	0e09      	lsrs	r1, r1, #24
 80293e0:	9112      	str	r1, [sp, #72]	; 0x48
 80293e2:	e6d8      	b.n	8029196 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80293e4:	b01d      	add	sp, #116	; 0x74
 80293e6:	ecbd 8b08 	vpop	{d8-d11}
 80293ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080293f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80293f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80293f4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80293f8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80293fc:	fb04 5603 	mla	r6, r4, r3, r5
 8029400:	2c00      	cmp	r4, #0
 8029402:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8029406:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 802940a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802940e:	db37      	blt.n	8029480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029410:	45a6      	cmp	lr, r4
 8029412:	dd35      	ble.n	8029480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029414:	2d00      	cmp	r5, #0
 8029416:	db31      	blt.n	802947c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029418:	42ab      	cmp	r3, r5
 802941a:	dd2f      	ble.n	802947c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802941c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029420:	1c6e      	adds	r6, r5, #1
 8029422:	d430      	bmi.n	8029486 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029424:	42b3      	cmp	r3, r6
 8029426:	dd2e      	ble.n	8029486 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029428:	b378      	cbz	r0, 802948a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 802942a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802942e:	3401      	adds	r4, #1
 8029430:	d42f      	bmi.n	8029492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029432:	45a6      	cmp	lr, r4
 8029434:	dd2d      	ble.n	8029492 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029436:	b37f      	cbz	r7, 8029498 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029438:	2d00      	cmp	r5, #0
 802943a:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802943e:	db26      	blt.n	802948e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029440:	42ab      	cmp	r3, r5
 8029442:	dd24      	ble.n	802948e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8029444:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029448:	3501      	adds	r5, #1
 802944a:	d428      	bmi.n	802949e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802944c:	42ab      	cmp	r3, r5
 802944e:	dd26      	ble.n	802949e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8029450:	b338      	cbz	r0, 80294a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 8029452:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029456:	280f      	cmp	r0, #15
 8029458:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 802945c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8029460:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029464:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8029468:	d801      	bhi.n	802946e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 802946a:	2f0f      	cmp	r7, #15
 802946c:	d91b      	bls.n	80294a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802946e:	4b87      	ldr	r3, [pc, #540]	; (802968c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 8029470:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8029474:	4a86      	ldr	r2, [pc, #536]	; (8029690 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8029476:	4887      	ldr	r0, [pc, #540]	; (8029694 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8029478:	f001 fd46 	bl	802af08 <__assert_func>
 802947c:	2200      	movs	r2, #0
 802947e:	e7cf      	b.n	8029420 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 8029480:	2600      	movs	r6, #0
 8029482:	4632      	mov	r2, r6
 8029484:	e7d3      	b.n	802942e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8029486:	2600      	movs	r6, #0
 8029488:	e7d1      	b.n	802942e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802948a:	4606      	mov	r6, r0
 802948c:	e7cf      	b.n	802942e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802948e:	2400      	movs	r4, #0
 8029490:	e7da      	b.n	8029448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 8029492:	2300      	movs	r3, #0
 8029494:	461c      	mov	r4, r3
 8029496:	e7de      	b.n	8029456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029498:	463b      	mov	r3, r7
 802949a:	463c      	mov	r4, r7
 802949c:	e7db      	b.n	8029456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 802949e:	2300      	movs	r3, #0
 80294a0:	e7d9      	b.n	8029456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80294a2:	4603      	mov	r3, r0
 80294a4:	e7d7      	b.n	8029456 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80294a6:	b280      	uxth	r0, r0
 80294a8:	b2bf      	uxth	r7, r7
 80294aa:	fb07 fe00 	mul.w	lr, r7, r0
 80294ae:	0100      	lsls	r0, r0, #4
 80294b0:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80294b4:	eba0 0c0e 	sub.w	ip, r0, lr
 80294b8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80294bc:	b2bf      	uxth	r7, r7
 80294be:	fa1f fc8c 	uxth.w	ip, ip
 80294c2:	1bed      	subs	r5, r5, r7
 80294c4:	fb0c f00a 	mul.w	r0, ip, sl
 80294c8:	b2ad      	uxth	r5, r5
 80294ca:	fb0b 0005 	mla	r0, fp, r5, r0
 80294ce:	fb07 0009 	mla	r0, r7, r9, r0
 80294d2:	fb0e 0008 	mla	r0, lr, r8, r0
 80294d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80294da:	9001      	str	r0, [sp, #4]
 80294dc:	2800      	cmp	r0, #0
 80294de:	f000 80d1 	beq.w	8029684 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 80294e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80294e6:	d018      	beq.n	802951a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 80294e8:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80294ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80294f0:	fb0b f000 	mul.w	r0, fp, r0
 80294f4:	fb0b fb02 	mul.w	fp, fp, r2
 80294f8:	0a02      	lsrs	r2, r0, #8
 80294fa:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80294fe:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029502:	4402      	add	r2, r0
 8029504:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8029508:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802950c:	0a12      	lsrs	r2, r2, #8
 802950e:	0a00      	lsrs	r0, r0, #8
 8029510:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029514:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8029518:	4302      	orrs	r2, r0
 802951a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802951e:	d01a      	beq.n	8029556 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8029520:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8029524:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8029528:	fb0a f000 	mul.w	r0, sl, r0
 802952c:	fb0a fa06 	mul.w	sl, sl, r6
 8029530:	0a06      	lsrs	r6, r0, #8
 8029532:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8029536:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802953a:	4406      	add	r6, r0
 802953c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8029540:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8029544:	0a36      	lsrs	r6, r6, #8
 8029546:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802954a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802954e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029552:	ea46 060a 	orr.w	r6, r6, sl
 8029556:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802955a:	d01b      	beq.n	8029594 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 802955c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8029560:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8029564:	fb09 fa0a 	mul.w	sl, r9, sl
 8029568:	fb09 f004 	mul.w	r0, r9, r4
 802956c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8029570:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029574:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8029578:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802957c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8029580:	4454      	add	r4, sl
 8029582:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029586:	0a24      	lsrs	r4, r4, #8
 8029588:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802958c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8029590:	ea44 0409 	orr.w	r4, r4, r9
 8029594:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029598:	d01b      	beq.n	80295d2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 802959a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 802959e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80295a2:	fb08 f909 	mul.w	r9, r8, r9
 80295a6:	fb08 f003 	mul.w	r0, r8, r3
 80295aa:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80295ae:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80295b2:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80295b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295ba:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80295be:	444b      	add	r3, r9
 80295c0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80295c4:	0a1b      	lsrs	r3, r3, #8
 80295c6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80295ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80295ce:	ea43 0308 	orr.w	r3, r3, r8
 80295d2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80295d6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80295da:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80295de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80295e2:	fb0c f808 	mul.w	r8, ip, r8
 80295e6:	8808      	ldrh	r0, [r1, #0]
 80295e8:	fb0c f606 	mul.w	r6, ip, r6
 80295ec:	fb05 8909 	mla	r9, r5, r9, r8
 80295f0:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80295f4:	fb05 6502 	mla	r5, r5, r2, r6
 80295f8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80295fc:	fb07 9908 	mla	r9, r7, r8, r9
 8029600:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8029604:	fb07 5704 	mla	r7, r7, r4, r5
 8029608:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802960c:	fb0e 9808 	mla	r8, lr, r8, r9
 8029610:	10c4      	asrs	r4, r0, #3
 8029612:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029616:	9b01      	ldr	r3, [sp, #4]
 8029618:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802961c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8029620:	43da      	mvns	r2, r3
 8029622:	1203      	asrs	r3, r0, #8
 8029624:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029628:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 802962c:	b2d2      	uxtb	r2, r2
 802962e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029632:	00c0      	lsls	r0, r0, #3
 8029634:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8029638:	4353      	muls	r3, r2
 802963a:	b2c0      	uxtb	r0, r0
 802963c:	ea48 0e0e 	orr.w	lr, r8, lr
 8029640:	4354      	muls	r4, r2
 8029642:	4350      	muls	r0, r2
 8029644:	1c5a      	adds	r2, r3, #1
 8029646:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802964a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802964e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029652:	1c62      	adds	r2, r4, #1
 8029654:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8029658:	ea4f 221e 	mov.w	r2, lr, lsr #8
 802965c:	021b      	lsls	r3, r3, #8
 802965e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8029662:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8029666:	00d2      	lsls	r2, r2, #3
 8029668:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802966c:	4313      	orrs	r3, r2
 802966e:	1c42      	adds	r2, r0, #1
 8029670:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029674:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8029678:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 802967c:	ea4e 0e03 	orr.w	lr, lr, r3
 8029680:	f8a1 e000 	strh.w	lr, [r1]
 8029684:	b003      	add	sp, #12
 8029686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802968a:	bf00      	nop
 802968c:	08030159 	.word	0x08030159
 8029690:	08030726 	.word	0x08030726
 8029694:	080301dd 	.word	0x080301dd

08029698 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802969c:	ed2d 8b08 	vpush	{d8-d11}
 80296a0:	b09b      	sub	sp, #108	; 0x6c
 80296a2:	eeb0 aa40 	vmov.f32	s20, s0
 80296a6:	eef0 9a60 	vmov.f32	s19, s1
 80296aa:	9218      	str	r2, [sp, #96]	; 0x60
 80296ac:	eeb0 9a41 	vmov.f32	s18, s2
 80296b0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80296b2:	eeb0 8a62 	vmov.f32	s16, s5
 80296b6:	9019      	str	r0, [sp, #100]	; 0x64
 80296b8:	eef0 8a43 	vmov.f32	s17, s6
 80296bc:	6850      	ldr	r0, [r2, #4]
 80296be:	eef0 ba44 	vmov.f32	s23, s8
 80296c2:	9116      	str	r1, [sp, #88]	; 0x58
 80296c4:	eeb0 ba64 	vmov.f32	s22, s9
 80296c8:	9307      	str	r3, [sp, #28]
 80296ca:	eef0 aa45 	vmov.f32	s21, s10
 80296ce:	6812      	ldr	r2, [r2, #0]
 80296d0:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80296d4:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80296d8:	fb00 1303 	mla	r3, r0, r3, r1
 80296dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80296e0:	930a      	str	r3, [sp, #40]	; 0x28
 80296e2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80296e4:	681b      	ldr	r3, [r3, #0]
 80296e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80296e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80296ea:	2b00      	cmp	r3, #0
 80296ec:	dc03      	bgt.n	80296f6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80296ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80296f0:	2b00      	cmp	r3, #0
 80296f2:	f340 8387 	ble.w	8029e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 80296f6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80296f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80296fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029700:	1e48      	subs	r0, r1, #1
 8029702:	1e57      	subs	r7, r2, #1
 8029704:	9b07      	ldr	r3, [sp, #28]
 8029706:	2b00      	cmp	r3, #0
 8029708:	f340 8166 	ble.w	80299d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802970c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029710:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029714:	d406      	bmi.n	8029724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029716:	4584      	cmp	ip, r0
 8029718:	da04      	bge.n	8029724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802971a:	2b00      	cmp	r3, #0
 802971c:	db02      	blt.n	8029724 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802971e:	42bb      	cmp	r3, r7
 8029720:	f2c0 815b 	blt.w	80299da <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8029724:	f11c 0c01 	adds.w	ip, ip, #1
 8029728:	f100 814b 	bmi.w	80299c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802972c:	4561      	cmp	r1, ip
 802972e:	f2c0 8148 	blt.w	80299c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029732:	3301      	adds	r3, #1
 8029734:	f100 8145 	bmi.w	80299c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029738:	429a      	cmp	r2, r3
 802973a:	f2c0 8142 	blt.w	80299c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802973e:	9b07      	ldr	r3, [sp, #28]
 8029740:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8029742:	9317      	str	r3, [sp, #92]	; 0x5c
 8029744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8029746:	2b00      	cmp	r3, #0
 8029748:	f340 8165 	ble.w	8029a16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 802974c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802974e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8029752:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8029754:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8029758:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802975c:	1422      	asrs	r2, r4, #16
 802975e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029762:	689b      	ldr	r3, [r3, #8]
 8029764:	f100 81d5 	bmi.w	8029b12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029768:	f103 38ff 	add.w	r8, r3, #4294967295
 802976c:	4542      	cmp	r2, r8
 802976e:	f280 81d0 	bge.w	8029b12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029772:	f1bc 0f00 	cmp.w	ip, #0
 8029776:	f2c0 81cc 	blt.w	8029b12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802977a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802977e:	45c4      	cmp	ip, r8
 8029780:	f280 81c7 	bge.w	8029b12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8029784:	b21b      	sxth	r3, r3
 8029786:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029788:	fb0c 2203 	mla	r2, ip, r3, r2
 802978c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029790:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029794:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029798:	2900      	cmp	r1, #0
 802979a:	f000 8182 	beq.w	8029aa2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802979e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80297a2:	950b      	str	r5, [sp, #44]	; 0x2c
 80297a4:	0e2d      	lsrs	r5, r5, #24
 80297a6:	9512      	str	r5, [sp, #72]	; 0x48
 80297a8:	b180      	cbz	r0, 80297cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80297aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80297ae:	3b01      	subs	r3, #1
 80297b0:	009b      	lsls	r3, r3, #2
 80297b2:	3304      	adds	r3, #4
 80297b4:	eb08 0c03 	add.w	ip, r8, r3
 80297b8:	f858 3003 	ldr.w	r3, [r8, r3]
 80297bc:	9308      	str	r3, [sp, #32]
 80297be:	0e1b      	lsrs	r3, r3, #24
 80297c0:	9310      	str	r3, [sp, #64]	; 0x40
 80297c2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80297c6:	930c      	str	r3, [sp, #48]	; 0x30
 80297c8:	0e1b      	lsrs	r3, r3, #24
 80297ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80297cc:	b289      	uxth	r1, r1
 80297ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80297d0:	b280      	uxth	r0, r0
 80297d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80297d4:	fb01 f900 	mul.w	r9, r1, r0
 80297d8:	0109      	lsls	r1, r1, #4
 80297da:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80297de:	eba1 0809 	sub.w	r8, r1, r9
 80297e2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80297e6:	b280      	uxth	r0, r0
 80297e8:	fa1f f888 	uxth.w	r8, r8
 80297ec:	1a09      	subs	r1, r1, r0
 80297ee:	fb08 f303 	mul.w	r3, r8, r3
 80297f2:	b289      	uxth	r1, r1
 80297f4:	fb01 330e 	mla	r3, r1, lr, r3
 80297f8:	fb00 3305 	mla	r3, r0, r5, r3
 80297fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80297fe:	fb09 3305 	mla	r3, r9, r5, r3
 8029802:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029806:	2b00      	cmp	r3, #0
 8029808:	f000 80d2 	beq.w	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802980c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8029810:	d01b      	beq.n	802984a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8029812:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8029816:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802981a:	fb0e fa0a 	mul.w	sl, lr, sl
 802981e:	fb0e fe02 	mul.w	lr, lr, r2
 8029822:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029826:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802982a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802982e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029832:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029836:	4452      	add	r2, sl
 8029838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802983c:	0a12      	lsrs	r2, r2, #8
 802983e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029842:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8029846:	ea42 020c 	orr.w	r2, r2, ip
 802984a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802984c:	2dff      	cmp	r5, #255	; 0xff
 802984e:	d021      	beq.n	8029894 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8029850:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029852:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8029856:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029858:	fb05 fb0b 	mul.w	fp, r5, fp
 802985c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802985e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029862:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029864:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029868:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802986c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029870:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029874:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8029878:	44de      	add	lr, fp
 802987a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802987e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029882:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029886:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802988a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802988e:	ea4e 050a 	orr.w	r5, lr, sl
 8029892:	950b      	str	r5, [sp, #44]	; 0x2c
 8029894:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8029896:	2dff      	cmp	r5, #255	; 0xff
 8029898:	d021      	beq.n	80298de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 802989a:	9d08      	ldr	r5, [sp, #32]
 802989c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80298a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80298a2:	fb05 fb0b 	mul.w	fp, r5, fp
 80298a6:	9d08      	ldr	r5, [sp, #32]
 80298a8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80298ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80298ae:	fb05 fa0e 	mul.w	sl, r5, lr
 80298b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80298ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80298c2:	44de      	add	lr, fp
 80298c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80298d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80298d8:	ea4e 050a 	orr.w	r5, lr, sl
 80298dc:	9508      	str	r5, [sp, #32]
 80298de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298e0:	2dff      	cmp	r5, #255	; 0xff
 80298e2:	d021      	beq.n	8029928 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80298e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298e6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80298ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298ec:	fb05 fb0b 	mul.w	fp, r5, fp
 80298f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80298f2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80298f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80298f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8029900:	fb05 fa0a 	mul.w	sl, r5, sl
 8029904:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8029908:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802990c:	44de      	add	lr, fp
 802990e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029912:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029916:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802991a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802991e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029922:	ea4e 050a 	orr.w	r5, lr, sl
 8029926:	950c      	str	r5, [sp, #48]	; 0x30
 8029928:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802992a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802992e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8029932:	2bff      	cmp	r3, #255	; 0xff
 8029934:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029938:	9d08      	ldr	r5, [sp, #32]
 802993a:	fb08 fc0c 	mul.w	ip, r8, ip
 802993e:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029942:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029948:	fb00 cc0e 	mla	ip, r0, lr, ip
 802994c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8029950:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8029952:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029956:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802995a:	fb08 f80e 	mul.w	r8, r8, lr
 802995e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029962:	fb01 8202 	mla	r2, r1, r2, r8
 8029966:	9908      	ldr	r1, [sp, #32]
 8029968:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802996c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029970:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029972:	fb00 220a 	mla	r2, r0, sl, r2
 8029976:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802997a:	fb09 2900 	mla	r9, r9, r0, r2
 802997e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029982:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8029986:	ea4c 0c09 	orr.w	ip, ip, r9
 802998a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802998e:	f040 8091 	bne.w	8029ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8029992:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8029996:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802999a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802999e:	f022 0207 	bic.w	r2, r2, #7
 80299a2:	431a      	orrs	r2, r3
 80299a4:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80299a8:	ea4c 0c02 	orr.w	ip, ip, r2
 80299ac:	f8a7 c000 	strh.w	ip, [r7]
 80299b0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80299b2:	3702      	adds	r7, #2
 80299b4:	441c      	add	r4, r3
 80299b6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80299b8:	441e      	add	r6, r3
 80299ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80299bc:	3b01      	subs	r3, #1
 80299be:	9317      	str	r3, [sp, #92]	; 0x5c
 80299c0:	e6c0      	b.n	8029744 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80299c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80299c4:	441c      	add	r4, r3
 80299c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80299c8:	441e      	add	r6, r3
 80299ca:	9b07      	ldr	r3, [sp, #28]
 80299cc:	3b01      	subs	r3, #1
 80299ce:	9307      	str	r3, [sp, #28]
 80299d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80299d2:	3302      	adds	r3, #2
 80299d4:	930a      	str	r3, [sp, #40]	; 0x28
 80299d6:	e695      	b.n	8029704 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80299d8:	d024      	beq.n	8029a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80299da:	9b07      	ldr	r3, [sp, #28]
 80299dc:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80299de:	3b01      	subs	r3, #1
 80299e0:	fb00 4003 	mla	r0, r0, r3, r4
 80299e4:	1400      	asrs	r0, r0, #16
 80299e6:	f53f aeaa 	bmi.w	802973e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80299ea:	3901      	subs	r1, #1
 80299ec:	4288      	cmp	r0, r1
 80299ee:	f6bf aea6 	bge.w	802973e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80299f2:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80299f4:	fb01 6303 	mla	r3, r1, r3, r6
 80299f8:	141b      	asrs	r3, r3, #16
 80299fa:	f53f aea0 	bmi.w	802973e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80299fe:	3a01      	subs	r2, #1
 8029a00:	4293      	cmp	r3, r2
 8029a02:	f6bf ae9c 	bge.w	802973e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029a06:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029a0a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8029a0e:	f1bb 0f00 	cmp.w	fp, #0
 8029a12:	f300 809a 	bgt.w	8029b4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029a16:	9b07      	ldr	r3, [sp, #28]
 8029a18:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029a1e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029a22:	930a      	str	r3, [sp, #40]	; 0x28
 8029a24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	f340 81ec 	ble.w	8029e04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029a2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029a30:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a32:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029a36:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029a3a:	eef0 6a48 	vmov.f32	s13, s16
 8029a3e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029a42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029a46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029a4a:	ee16 4a90 	vmov	r4, s13
 8029a4e:	eef0 6a68 	vmov.f32	s13, s17
 8029a52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029a56:	ee16 6a90 	vmov	r6, s13
 8029a5a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029a5e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029a62:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029a66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029a6a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029a6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029a72:	ee18 2a10 	vmov	r2, s16
 8029a76:	eeb0 8a47 	vmov.f32	s16, s14
 8029a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029a7e:	ee18 2a90 	vmov	r2, s17
 8029a82:	932f      	str	r3, [sp, #188]	; 0xbc
 8029a84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a86:	eef0 8a67 	vmov.f32	s17, s15
 8029a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8029a8e:	9330      	str	r3, [sp, #192]	; 0xc0
 8029a90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8029a92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8029a94:	3b01      	subs	r3, #1
 8029a96:	9316      	str	r3, [sp, #88]	; 0x58
 8029a98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029a9a:	bf08      	it	eq
 8029a9c:	4613      	moveq	r3, r2
 8029a9e:	9307      	str	r3, [sp, #28]
 8029aa0:	e622      	b.n	80296e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8029aa2:	2800      	cmp	r0, #0
 8029aa4:	f43f ae92 	beq.w	80297cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029aa8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029aac:	9308      	str	r3, [sp, #32]
 8029aae:	0e1b      	lsrs	r3, r3, #24
 8029ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8029ab2:	e68b      	b.n	80297cc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029ab4:	8839      	ldrh	r1, [r7, #0]
 8029ab6:	43db      	mvns	r3, r3
 8029ab8:	4dd5      	ldr	r5, [pc, #852]	; (8029e10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029aba:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029abe:	fa5f f883 	uxtb.w	r8, r3
 8029ac2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8029ac6:	10c8      	asrs	r0, r1, #3
 8029ac8:	00cb      	lsls	r3, r1, #3
 8029aca:	fb0e fe08 	mul.w	lr, lr, r8
 8029ace:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029ad2:	b2db      	uxtb	r3, r3
 8029ad4:	f10e 0101 	add.w	r1, lr, #1
 8029ad8:	fb00 f008 	mul.w	r0, r0, r8
 8029adc:	fb03 f308 	mul.w	r3, r3, r8
 8029ae0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029ae4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029ae8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029aec:	f100 0e01 	add.w	lr, r0, #1
 8029af0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029af4:	b2c9      	uxtb	r1, r1
 8029af6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029afa:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029afe:	00d2      	lsls	r2, r2, #3
 8029b00:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029b04:	430a      	orrs	r2, r1
 8029b06:	1c59      	adds	r1, r3, #1
 8029b08:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029b0c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029b10:	e748      	b.n	80299a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8029b12:	f112 0801 	adds.w	r8, r2, #1
 8029b16:	f53f af4b 	bmi.w	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b1a:	4543      	cmp	r3, r8
 8029b1c:	f6ff af48 	blt.w	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b20:	f11c 0801 	adds.w	r8, ip, #1
 8029b24:	f53f af44 	bmi.w	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b28:	45c6      	cmp	lr, r8
 8029b2a:	f6ff af41 	blt.w	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b2e:	b21b      	sxth	r3, r3
 8029b30:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029b34:	fa0f f28e 	sxth.w	r2, lr
 8029b38:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029b3c:	9200      	str	r2, [sp, #0]
 8029b3e:	4639      	mov	r1, r7
 8029b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8029b42:	9819      	ldr	r0, [sp, #100]	; 0x64
 8029b44:	f7ff fc54 	bl	80293f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029b48:	e732      	b.n	80299b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b4a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8029b4c:	1421      	asrs	r1, r4, #16
 8029b4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8029b50:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029b54:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029b58:	1433      	asrs	r3, r6, #16
 8029b5a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029b5e:	fb07 1303 	mla	r3, r7, r3, r1
 8029b62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029b64:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029b68:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029b6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029b70:	2a00      	cmp	r2, #0
 8029b72:	f000 8108 	beq.w	8029d86 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8029b76:	684d      	ldr	r5, [r1, #4]
 8029b78:	950d      	str	r5, [sp, #52]	; 0x34
 8029b7a:	0e2d      	lsrs	r5, r5, #24
 8029b7c:	9514      	str	r5, [sp, #80]	; 0x50
 8029b7e:	b178      	cbz	r0, 8029ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029b80:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8029b84:	3f01      	subs	r7, #1
 8029b86:	00bf      	lsls	r7, r7, #2
 8029b88:	3704      	adds	r7, #4
 8029b8a:	eb01 0e07 	add.w	lr, r1, r7
 8029b8e:	59c9      	ldr	r1, [r1, r7]
 8029b90:	9109      	str	r1, [sp, #36]	; 0x24
 8029b92:	0e09      	lsrs	r1, r1, #24
 8029b94:	9111      	str	r1, [sp, #68]	; 0x44
 8029b96:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029b9a:	910e      	str	r1, [sp, #56]	; 0x38
 8029b9c:	0e09      	lsrs	r1, r1, #24
 8029b9e:	9115      	str	r1, [sp, #84]	; 0x54
 8029ba0:	b292      	uxth	r2, r2
 8029ba2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029ba4:	b280      	uxth	r0, r0
 8029ba6:	fb02 f900 	mul.w	r9, r2, r0
 8029baa:	0112      	lsls	r2, r2, #4
 8029bac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029bb0:	eba2 0e09 	sub.w	lr, r2, r9
 8029bb4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8029bb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029bba:	b280      	uxth	r0, r0
 8029bbc:	fa1f fe8e 	uxth.w	lr, lr
 8029bc0:	1a09      	subs	r1, r1, r0
 8029bc2:	fb0e f202 	mul.w	r2, lr, r2
 8029bc6:	b289      	uxth	r1, r1
 8029bc8:	fb01 220c 	mla	r2, r1, ip, r2
 8029bcc:	fb00 2205 	mla	r2, r0, r5, r2
 8029bd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029bd2:	fb09 2205 	mla	r2, r9, r5, r2
 8029bd6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029bda:	2a00      	cmp	r2, #0
 8029bdc:	f000 80ca 	beq.w	8029d74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029be0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8029be4:	d019      	beq.n	8029c1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8029be6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8029bea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029bee:	fb0c fa0a 	mul.w	sl, ip, sl
 8029bf2:	fb0c fc03 	mul.w	ip, ip, r3
 8029bf6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029bfa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8029bfe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8029c02:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029c06:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029c0a:	4453      	add	r3, sl
 8029c0c:	0a3f      	lsrs	r7, r7, #8
 8029c0e:	0a1b      	lsrs	r3, r3, #8
 8029c10:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8029c14:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8029c18:	433b      	orrs	r3, r7
 8029c1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029c1c:	2dff      	cmp	r5, #255	; 0xff
 8029c1e:	d020      	beq.n	8029c62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8029c20:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c22:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029c28:	436f      	muls	r7, r5
 8029c2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029c2c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c30:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029c34:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8029c36:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c3a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c3e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029c42:	44bc      	add	ip, r7
 8029c44:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c4c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c54:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029c5c:	ea4c 050a 	orr.w	r5, ip, sl
 8029c60:	950d      	str	r5, [sp, #52]	; 0x34
 8029c62:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c64:	2dff      	cmp	r5, #255	; 0xff
 8029c66:	d020      	beq.n	8029caa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8029c68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029c6a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029c6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c70:	436f      	muls	r7, r5
 8029c72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029c74:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029c78:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8029c7a:	fb05 fa0c 	mul.w	sl, r5, ip
 8029c7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c82:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029c86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029c8a:	44bc      	add	ip, r7
 8029c8c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029c90:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029c94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029c98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029c9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029ca0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029ca4:	ea4c 050a 	orr.w	r5, ip, sl
 8029ca8:	9509      	str	r5, [sp, #36]	; 0x24
 8029caa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cac:	2dff      	cmp	r5, #255	; 0xff
 8029cae:	d020      	beq.n	8029cf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8029cb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029cb2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029cb6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cb8:	436f      	muls	r7, r5
 8029cba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029cbc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029cc0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8029cc4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8029cc6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8029cca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029cce:	fb05 fa0a 	mul.w	sl, r5, sl
 8029cd2:	44bc      	add	ip, r7
 8029cd4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8029cd8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cdc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029ce0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8029ce4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029ce8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8029cec:	ea4c 050a 	orr.w	r5, ip, sl
 8029cf0:	950e      	str	r5, [sp, #56]	; 0x38
 8029cf2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029cf4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8029cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8029cfc:	2aff      	cmp	r2, #255	; 0xff
 8029cfe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8029d02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8029d04:	fb0e f707 	mul.w	r7, lr, r7
 8029d08:	fb01 770c 	mla	r7, r1, ip, r7
 8029d0c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029d10:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029d12:	fb00 770c 	mla	r7, r0, ip, r7
 8029d16:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8029d1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8029d1c:	fb09 770c 	mla	r7, r9, ip, r7
 8029d20:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8029d24:	fb0e fe0c 	mul.w	lr, lr, ip
 8029d28:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029d2c:	fb01 e303 	mla	r3, r1, r3, lr
 8029d30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8029d32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8029d36:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8029d3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8029d3c:	fb00 330a 	mla	r3, r0, sl, r3
 8029d40:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8029d44:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029d48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d4c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8029d50:	ea47 070c 	orr.w	r7, r7, ip
 8029d54:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029d58:	d11e      	bne.n	8029d98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8029d5a:	097a      	lsrs	r2, r7, #5
 8029d5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8029d60:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029d64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029d68:	f023 0307 	bic.w	r3, r3, #7
 8029d6c:	4313      	orrs	r3, r2
 8029d6e:	431f      	orrs	r7, r3
 8029d70:	f8a8 7000 	strh.w	r7, [r8]
 8029d74:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8029d76:	f108 0802 	add.w	r8, r8, #2
 8029d7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029d7e:	441c      	add	r4, r3
 8029d80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8029d82:	441e      	add	r6, r3
 8029d84:	e643      	b.n	8029a0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8029d86:	2800      	cmp	r0, #0
 8029d88:	f43f af0a 	beq.w	8029ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029d8c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029d90:	9109      	str	r1, [sp, #36]	; 0x24
 8029d92:	0e09      	lsrs	r1, r1, #24
 8029d94:	9111      	str	r1, [sp, #68]	; 0x44
 8029d96:	e703      	b.n	8029ba0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029d98:	f8b8 1000 	ldrh.w	r1, [r8]
 8029d9c:	43d2      	mvns	r2, r2
 8029d9e:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029da2:	fa5f fe82 	uxtb.w	lr, r2
 8029da6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8029daa:	10c8      	asrs	r0, r1, #3
 8029dac:	00ca      	lsls	r2, r1, #3
 8029dae:	fb0c fc0e 	mul.w	ip, ip, lr
 8029db2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029db6:	b2d2      	uxtb	r2, r2
 8029db8:	f10c 0101 	add.w	r1, ip, #1
 8029dbc:	fb00 f00e 	mul.w	r0, r0, lr
 8029dc0:	fb02 f20e 	mul.w	r2, r2, lr
 8029dc4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029dc8:	0c39      	lsrs	r1, r7, #16
 8029dca:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029dce:	4910      	ldr	r1, [pc, #64]	; (8029e10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029dd0:	fa5f fc8c 	uxtb.w	ip, ip
 8029dd4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029dd8:	1c41      	adds	r1, r0, #1
 8029dda:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029dde:	1c51      	adds	r1, r2, #1
 8029de0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029de4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029de8:	00c0      	lsls	r0, r0, #3
 8029dea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029dee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029df2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029df6:	ea4c 0c00 	orr.w	ip, ip, r0
 8029dfa:	ea47 0c0c 	orr.w	ip, r7, ip
 8029dfe:	f8a8 c000 	strh.w	ip, [r8]
 8029e02:	e7b7      	b.n	8029d74 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029e04:	b01b      	add	sp, #108	; 0x6c
 8029e06:	ecbd 8b08 	vpop	{d8-d11}
 8029e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029e0e:	bf00      	nop
 8029e10:	fffff800 	.word	0xfffff800

08029e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e18:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8029e1c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029e20:	2c00      	cmp	r4, #0
 8029e22:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8029e26:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8029e2a:	fb04 ce03 	mla	lr, r4, r3, ip
 8029e2e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8029e32:	db60      	blt.n	8029ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029e34:	45a1      	cmp	r9, r4
 8029e36:	dd5e      	ble.n	8029ef6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029e38:	f1bc 0f00 	cmp.w	ip, #0
 8029e3c:	db59      	blt.n	8029ef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029e3e:	45e0      	cmp	r8, ip
 8029e40:	dd57      	ble.n	8029ef2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029e42:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029e46:	f01e 0f01 	tst.w	lr, #1
 8029e4a:	5c16      	ldrb	r6, [r2, r0]
 8029e4c:	bf0c      	ite	eq
 8029e4e:	f006 060f 	andeq.w	r6, r6, #15
 8029e52:	1136      	asrne	r6, r6, #4
 8029e54:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029e58:	b2f6      	uxtb	r6, r6
 8029e5a:	f11c 0001 	adds.w	r0, ip, #1
 8029e5e:	d44d      	bmi.n	8029efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029e60:	4580      	cmp	r8, r0
 8029e62:	dd4b      	ble.n	8029efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029e64:	2d00      	cmp	r5, #0
 8029e66:	d04b      	beq.n	8029f00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029e68:	f10e 0a01 	add.w	sl, lr, #1
 8029e6c:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029e70:	f01a 0f01 	tst.w	sl, #1
 8029e74:	5c10      	ldrb	r0, [r2, r0]
 8029e76:	bf0c      	ite	eq
 8029e78:	f000 000f 	andeq.w	r0, r0, #15
 8029e7c:	1100      	asrne	r0, r0, #4
 8029e7e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029e82:	b2c0      	uxtb	r0, r0
 8029e84:	3401      	adds	r4, #1
 8029e86:	d43f      	bmi.n	8029f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029e88:	45a1      	cmp	r9, r4
 8029e8a:	dd3d      	ble.n	8029f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029e8c:	2f00      	cmp	r7, #0
 8029e8e:	f000 80a8 	beq.w	8029fe2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8029e92:	f1bc 0f00 	cmp.w	ip, #0
 8029e96:	db35      	blt.n	8029f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029e98:	45e0      	cmp	r8, ip
 8029e9a:	dd33      	ble.n	8029f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029e9c:	eb03 090e 	add.w	r9, r3, lr
 8029ea0:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029ea4:	f019 0f01 	tst.w	r9, #1
 8029ea8:	5d14      	ldrb	r4, [r2, r4]
 8029eaa:	bf0c      	ite	eq
 8029eac:	f004 040f 	andeq.w	r4, r4, #15
 8029eb0:	1124      	asrne	r4, r4, #4
 8029eb2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029eb6:	b2e4      	uxtb	r4, r4
 8029eb8:	f11c 0c01 	adds.w	ip, ip, #1
 8029ebc:	d427      	bmi.n	8029f0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029ebe:	45e0      	cmp	r8, ip
 8029ec0:	dd25      	ble.n	8029f0e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029ec2:	b335      	cbz	r5, 8029f12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029ec4:	3301      	adds	r3, #1
 8029ec6:	449e      	add	lr, r3
 8029ec8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029ecc:	f01e 0f01 	tst.w	lr, #1
 8029ed0:	5cd2      	ldrb	r2, [r2, r3]
 8029ed2:	bf0c      	ite	eq
 8029ed4:	f002 020f 	andeq.w	r2, r2, #15
 8029ed8:	1112      	asrne	r2, r2, #4
 8029eda:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029ede:	b2d3      	uxtb	r3, r2
 8029ee0:	2d0f      	cmp	r5, #15
 8029ee2:	d917      	bls.n	8029f14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029ee4:	4b42      	ldr	r3, [pc, #264]	; (8029ff0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8029ee6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8029eea:	4a42      	ldr	r2, [pc, #264]	; (8029ff4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8029eec:	4842      	ldr	r0, [pc, #264]	; (8029ff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8029eee:	f001 f80b 	bl	802af08 <__assert_func>
 8029ef2:	2600      	movs	r6, #0
 8029ef4:	e7b1      	b.n	8029e5a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8029ef6:	2000      	movs	r0, #0
 8029ef8:	4606      	mov	r6, r0
 8029efa:	e7c3      	b.n	8029e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029efc:	2000      	movs	r0, #0
 8029efe:	e7c1      	b.n	8029e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029f00:	4628      	mov	r0, r5
 8029f02:	e7bf      	b.n	8029e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029f04:	2400      	movs	r4, #0
 8029f06:	e7d7      	b.n	8029eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8029f08:	2300      	movs	r3, #0
 8029f0a:	461c      	mov	r4, r3
 8029f0c:	e7e8      	b.n	8029ee0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029f0e:	2300      	movs	r3, #0
 8029f10:	e7e6      	b.n	8029ee0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029f12:	462b      	mov	r3, r5
 8029f14:	2f0f      	cmp	r7, #15
 8029f16:	d8e5      	bhi.n	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029f18:	b2ad      	uxth	r5, r5
 8029f1a:	b2bf      	uxth	r7, r7
 8029f1c:	fb05 fc07 	mul.w	ip, r5, r7
 8029f20:	012d      	lsls	r5, r5, #4
 8029f22:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029f26:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8029f2a:	eba5 050c 	sub.w	r5, r5, ip
 8029f2e:	b2bf      	uxth	r7, r7
 8029f30:	b2ad      	uxth	r5, r5
 8029f32:	1bd2      	subs	r2, r2, r7
 8029f34:	4368      	muls	r0, r5
 8029f36:	b292      	uxth	r2, r2
 8029f38:	fb06 0002 	mla	r0, r6, r2, r0
 8029f3c:	fb07 0404 	mla	r4, r7, r4, r0
 8029f40:	fb0c 4303 	mla	r3, ip, r3, r4
 8029f44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029f48:	b1b3      	cbz	r3, 8029f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029f4a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8029f4e:	435a      	muls	r2, r3
 8029f50:	1c53      	adds	r3, r2, #1
 8029f52:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029f56:	4a29      	ldr	r2, [pc, #164]	; (8029ffc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029f58:	121b      	asrs	r3, r3, #8
 8029f5a:	6812      	ldr	r2, [r2, #0]
 8029f5c:	2bff      	cmp	r3, #255	; 0xff
 8029f5e:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029f62:	d10b      	bne.n	8029f7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029f64:	0950      	lsrs	r0, r2, #5
 8029f66:	4b26      	ldr	r3, [pc, #152]	; (802a000 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029f68:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029f6c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029f70:	4033      	ands	r3, r6
 8029f72:	4318      	orrs	r0, r3
 8029f74:	4302      	orrs	r2, r0
 8029f76:	800a      	strh	r2, [r1, #0]
 8029f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029f7c:	880d      	ldrh	r5, [r1, #0]
 8029f7e:	b29f      	uxth	r7, r3
 8029f80:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029f84:	43db      	mvns	r3, r3
 8029f86:	122c      	asrs	r4, r5, #8
 8029f88:	fb10 f007 	smulbb	r0, r0, r7
 8029f8c:	b2db      	uxtb	r3, r3
 8029f8e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029f92:	b2f6      	uxtb	r6, r6
 8029f94:	b2d2      	uxtb	r2, r2
 8029f96:	fb04 0403 	mla	r4, r4, r3, r0
 8029f9a:	10e8      	asrs	r0, r5, #3
 8029f9c:	fb12 f207 	smulbb	r2, r2, r7
 8029fa0:	00ed      	lsls	r5, r5, #3
 8029fa2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029fa6:	b2a4      	uxth	r4, r4
 8029fa8:	fb16 f607 	smulbb	r6, r6, r7
 8029fac:	b2ed      	uxtb	r5, r5
 8029fae:	fb00 6603 	mla	r6, r0, r3, r6
 8029fb2:	fb05 2303 	mla	r3, r5, r3, r2
 8029fb6:	b2b0      	uxth	r0, r6
 8029fb8:	b29a      	uxth	r2, r3
 8029fba:	1c63      	adds	r3, r4, #1
 8029fbc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029fc0:	1c53      	adds	r3, r2, #1
 8029fc2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029fc6:	1c42      	adds	r2, r0, #1
 8029fc8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029fcc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029fd0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029fd4:	0940      	lsrs	r0, r0, #5
 8029fd6:	4323      	orrs	r3, r4
 8029fd8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029fdc:	4303      	orrs	r3, r0
 8029fde:	800b      	strh	r3, [r1, #0]
 8029fe0:	e7ca      	b.n	8029f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029fe2:	2d0f      	cmp	r5, #15
 8029fe4:	f63f af7e 	bhi.w	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029fe8:	463b      	mov	r3, r7
 8029fea:	463c      	mov	r4, r7
 8029fec:	e794      	b.n	8029f18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8029fee:	bf00      	nop
 8029ff0:	08030159 	.word	0x08030159
 8029ff4:	08030726 	.word	0x08030726
 8029ff8:	080301dd 	.word	0x080301dd
 8029ffc:	2400b8d4 	.word	0x2400b8d4
 802a000:	00fff800 	.word	0x00fff800

0802a004 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a008:	ed2d 8b08 	vpush	{d8-d11}
 802a00c:	b097      	sub	sp, #92	; 0x5c
 802a00e:	eeb0 aa40 	vmov.f32	s20, s0
 802a012:	eef0 9a60 	vmov.f32	s19, s1
 802a016:	9214      	str	r2, [sp, #80]	; 0x50
 802a018:	eeb0 9a41 	vmov.f32	s18, s2
 802a01c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802a01e:	eeb0 8a62 	vmov.f32	s16, s5
 802a022:	9309      	str	r3, [sp, #36]	; 0x24
 802a024:	eef0 8a43 	vmov.f32	s17, s6
 802a028:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 802a02c:	eef0 ba44 	vmov.f32	s23, s8
 802a030:	9015      	str	r0, [sp, #84]	; 0x54
 802a032:	eeb0 ba64 	vmov.f32	s22, s9
 802a036:	6850      	ldr	r0, [r2, #4]
 802a038:	eef0 aa45 	vmov.f32	s21, s10
 802a03c:	910d      	str	r1, [sp, #52]	; 0x34
 802a03e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a040:	6812      	ldr	r2, [r2, #0]
 802a042:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802a046:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 802a04a:	fb00 1303 	mla	r3, r0, r3, r1
 802a04e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a052:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a054:	689b      	ldr	r3, [r3, #8]
 802a056:	3301      	adds	r3, #1
 802a058:	f023 0301 	bic.w	r3, r3, #1
 802a05c:	930a      	str	r3, [sp, #40]	; 0x28
 802a05e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a060:	681f      	ldr	r7, [r3, #0]
 802a062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a064:	2b00      	cmp	r3, #0
 802a066:	dc03      	bgt.n	802a070 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a068:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802a06a:	2b00      	cmp	r3, #0
 802a06c:	f340 8289 	ble.w	802a582 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802a070:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a072:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a076:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a07a:	1e48      	subs	r0, r1, #1
 802a07c:	f102 3cff 	add.w	ip, r2, #4294967295
 802a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a082:	2b00      	cmp	r3, #0
 802a084:	f340 80c5 	ble.w	802a212 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802a088:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a08c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a090:	d406      	bmi.n	802a0a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a092:	4586      	cmp	lr, r0
 802a094:	da04      	bge.n	802a0a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a096:	2b00      	cmp	r3, #0
 802a098:	db02      	blt.n	802a0a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a09a:	4563      	cmp	r3, ip
 802a09c:	f2c0 80ba 	blt.w	802a214 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802a0a0:	f11e 0e01 	adds.w	lr, lr, #1
 802a0a4:	f100 80ab 	bmi.w	802a1fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a0a8:	4571      	cmp	r1, lr
 802a0aa:	f2c0 80a8 	blt.w	802a1fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a0ae:	3301      	adds	r3, #1
 802a0b0:	f100 80a5 	bmi.w	802a1fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a0b4:	429a      	cmp	r2, r3
 802a0b6:	f2c0 80a2 	blt.w	802a1fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a0bc:	46c8      	mov	r8, r9
 802a0be:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802a0c2:	930e      	str	r3, [sp, #56]	; 0x38
 802a0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a0c6:	2b00      	cmp	r3, #0
 802a0c8:	f340 80c4 	ble.w	802a254 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802a0cc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802a0ce:	1430      	asrs	r0, r6, #16
 802a0d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a0d4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a0d8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a0dc:	1423      	asrs	r3, r4, #16
 802a0de:	f100 814f 	bmi.w	802a380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a0e2:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a0e6:	455b      	cmp	r3, fp
 802a0e8:	f280 814a 	bge.w	802a380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a0ec:	2800      	cmp	r0, #0
 802a0ee:	f2c0 8147 	blt.w	802a380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a0f2:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a0f6:	4558      	cmp	r0, fp
 802a0f8:	f280 8142 	bge.w	802a380 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a0fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a0fe:	fb00 3305 	mla	r3, r0, r5, r3
 802a102:	0858      	lsrs	r0, r3, #1
 802a104:	07dd      	lsls	r5, r3, #31
 802a106:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a10a:	bf54      	ite	pl
 802a10c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a110:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a114:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a118:	fa5f fc8c 	uxtb.w	ip, ip
 802a11c:	2a00      	cmp	r2, #0
 802a11e:	f000 80dd 	beq.w	802a2dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a122:	1c58      	adds	r0, r3, #1
 802a124:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a128:	07c0      	lsls	r0, r0, #31
 802a12a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a12e:	bf54      	ite	pl
 802a130:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a134:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a138:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a13c:	fa5f f08e 	uxtb.w	r0, lr
 802a140:	9010      	str	r0, [sp, #64]	; 0x40
 802a142:	b1d9      	cbz	r1, 802a17c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a144:	4453      	add	r3, sl
 802a146:	0858      	lsrs	r0, r3, #1
 802a148:	07dd      	lsls	r5, r3, #31
 802a14a:	f103 0301 	add.w	r3, r3, #1
 802a14e:	5c38      	ldrb	r0, [r7, r0]
 802a150:	bf54      	ite	pl
 802a152:	f000 000f 	andpl.w	r0, r0, #15
 802a156:	1100      	asrmi	r0, r0, #4
 802a158:	07dd      	lsls	r5, r3, #31
 802a15a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a15e:	b2c0      	uxtb	r0, r0
 802a160:	900b      	str	r0, [sp, #44]	; 0x2c
 802a162:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802a166:	f817 e000 	ldrb.w	lr, [r7, r0]
 802a16a:	bf54      	ite	pl
 802a16c:	f00e 030f 	andpl.w	r3, lr, #15
 802a170:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802a174:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a178:	b2db      	uxtb	r3, r3
 802a17a:	9311      	str	r3, [sp, #68]	; 0x44
 802a17c:	b292      	uxth	r2, r2
 802a17e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802a180:	b289      	uxth	r1, r1
 802a182:	fb02 f301 	mul.w	r3, r2, r1
 802a186:	0112      	lsls	r2, r2, #4
 802a188:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a18c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a190:	1ad2      	subs	r2, r2, r3
 802a192:	b289      	uxth	r1, r1
 802a194:	b292      	uxth	r2, r2
 802a196:	1a40      	subs	r0, r0, r1
 802a198:	436a      	muls	r2, r5
 802a19a:	b280      	uxth	r0, r0
 802a19c:	fb0c 2c00 	mla	ip, ip, r0, r2
 802a1a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802a1a2:	fb01 c102 	mla	r1, r1, r2, ip
 802a1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802a1a8:	fb03 1302 	mla	r3, r3, r2, r1
 802a1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a1b0:	b1db      	cbz	r3, 802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a1b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a1b4:	4353      	muls	r3, r2
 802a1b6:	1c5a      	adds	r2, r3, #1
 802a1b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a1bc:	4ac6      	ldr	r2, [pc, #792]	; (802a4d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802a1be:	121b      	asrs	r3, r3, #8
 802a1c0:	6812      	ldr	r2, [r2, #0]
 802a1c2:	2bff      	cmp	r3, #255	; 0xff
 802a1c4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a1c8:	f040 8099 	bne.w	802a2fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802a1cc:	0953      	lsrs	r3, r2, #5
 802a1ce:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a1d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a1d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a1da:	f02c 0c07 	bic.w	ip, ip, #7
 802a1de:	ea43 0c0c 	orr.w	ip, r3, ip
 802a1e2:	ea4c 0202 	orr.w	r2, ip, r2
 802a1e6:	f8a8 2000 	strh.w	r2, [r8]
 802a1ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802a1ec:	f108 0802 	add.w	r8, r8, #2
 802a1f0:	441c      	add	r4, r3
 802a1f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a1f4:	441e      	add	r6, r3
 802a1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a1f8:	3b01      	subs	r3, #1
 802a1fa:	930e      	str	r3, [sp, #56]	; 0x38
 802a1fc:	e762      	b.n	802a0c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802a1fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802a200:	f109 0902 	add.w	r9, r9, #2
 802a204:	441c      	add	r4, r3
 802a206:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a208:	441e      	add	r6, r3
 802a20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a20c:	3b01      	subs	r3, #1
 802a20e:	9309      	str	r3, [sp, #36]	; 0x24
 802a210:	e736      	b.n	802a080 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802a212:	d024      	beq.n	802a25e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802a214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a216:	982b      	ldr	r0, [sp, #172]	; 0xac
 802a218:	3b01      	subs	r3, #1
 802a21a:	fb00 4003 	mla	r0, r0, r3, r4
 802a21e:	1400      	asrs	r0, r0, #16
 802a220:	f53f af4b 	bmi.w	802a0ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a224:	3901      	subs	r1, #1
 802a226:	4288      	cmp	r0, r1
 802a228:	f6bf af47 	bge.w	802a0ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a22c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802a22e:	fb01 6303 	mla	r3, r1, r3, r6
 802a232:	141b      	asrs	r3, r3, #16
 802a234:	f53f af41 	bmi.w	802a0ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a238:	3a01      	subs	r2, #1
 802a23a:	4293      	cmp	r3, r2
 802a23c:	f6bf af3d 	bge.w	802a0ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a240:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802a244:	46c8      	mov	r8, r9
 802a246:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802a24a:	930e      	str	r3, [sp, #56]	; 0x38
 802a24c:	f1bb 0f00 	cmp.w	fp, #0
 802a250:	f300 80b7 	bgt.w	802a3c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802a254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a256:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a25a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a260:	2b00      	cmp	r3, #0
 802a262:	f340 818e 	ble.w	802a582 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802a266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a26a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a26c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a270:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a274:	eef0 6a48 	vmov.f32	s13, s16
 802a278:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a27c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a280:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a284:	ee16 4a90 	vmov	r4, s13
 802a288:	eef0 6a68 	vmov.f32	s13, s17
 802a28c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a290:	ee16 6a90 	vmov	r6, s13
 802a294:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a298:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a29c:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a2a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a2a4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a2a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a2ac:	ee18 2a10 	vmov	r2, s16
 802a2b0:	eeb0 8a47 	vmov.f32	s16, s14
 802a2b4:	fb92 f3f3 	sdiv	r3, r2, r3
 802a2b8:	ee18 2a90 	vmov	r2, s17
 802a2bc:	932b      	str	r3, [sp, #172]	; 0xac
 802a2be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a2c0:	eef0 8a67 	vmov.f32	s17, s15
 802a2c4:	fb92 f3f3 	sdiv	r3, r2, r3
 802a2c8:	932c      	str	r3, [sp, #176]	; 0xb0
 802a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802a2cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a2ce:	3b01      	subs	r3, #1
 802a2d0:	930d      	str	r3, [sp, #52]	; 0x34
 802a2d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a2d4:	bf08      	it	eq
 802a2d6:	4613      	moveq	r3, r2
 802a2d8:	9309      	str	r3, [sp, #36]	; 0x24
 802a2da:	e6c2      	b.n	802a062 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a2dc:	2900      	cmp	r1, #0
 802a2de:	f43f af4d 	beq.w	802a17c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a2e2:	eb0a 0003 	add.w	r0, sl, r3
 802a2e6:	0843      	lsrs	r3, r0, #1
 802a2e8:	07c0      	lsls	r0, r0, #31
 802a2ea:	5cfb      	ldrb	r3, [r7, r3]
 802a2ec:	bf54      	ite	pl
 802a2ee:	f003 030f 	andpl.w	r3, r3, #15
 802a2f2:	111b      	asrmi	r3, r3, #4
 802a2f4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a2f8:	b2db      	uxtb	r3, r3
 802a2fa:	930b      	str	r3, [sp, #44]	; 0x2c
 802a2fc:	e73e      	b.n	802a17c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a2fe:	f8b8 e000 	ldrh.w	lr, [r8]
 802a302:	fa1f fb83 	uxth.w	fp, r3
 802a306:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a30a:	43db      	mvns	r3, r3
 802a30c:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a310:	fb11 f10b 	smulbb	r1, r1, fp
 802a314:	b2db      	uxtb	r3, r3
 802a316:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a31a:	fa5f fc8c 	uxtb.w	ip, ip
 802a31e:	b2d2      	uxtb	r2, r2
 802a320:	fb00 1003 	mla	r0, r0, r3, r1
 802a324:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a328:	fb1c fc0b 	smulbb	ip, ip, fp
 802a32c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a330:	b280      	uxth	r0, r0
 802a332:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a336:	fb12 fb0b 	smulbb	fp, r2, fp
 802a33a:	fa5f fe8e 	uxtb.w	lr, lr
 802a33e:	fb01 cc03 	mla	ip, r1, r3, ip
 802a342:	fb0e bb03 	mla	fp, lr, r3, fp
 802a346:	1c43      	adds	r3, r0, #1
 802a348:	fa1f fc8c 	uxth.w	ip, ip
 802a34c:	fa1f fb8b 	uxth.w	fp, fp
 802a350:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a354:	f10c 0101 	add.w	r1, ip, #1
 802a358:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802a35c:	f10b 0001 	add.w	r0, fp, #1
 802a360:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a364:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a368:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a36c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a370:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a374:	4318      	orrs	r0, r3
 802a376:	ea40 000c 	orr.w	r0, r0, ip
 802a37a:	f8a8 0000 	strh.w	r0, [r8]
 802a37e:	e734      	b.n	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a380:	f113 0b01 	adds.w	fp, r3, #1
 802a384:	f53f af31 	bmi.w	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a388:	45dc      	cmp	ip, fp
 802a38a:	f6ff af2e 	blt.w	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a38e:	f110 0b01 	adds.w	fp, r0, #1
 802a392:	f53f af2a 	bmi.w	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a396:	45de      	cmp	lr, fp
 802a398:	f6ff af27 	blt.w	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a39c:	9302      	str	r3, [sp, #8]
 802a39e:	fa0f f38e 	sxth.w	r3, lr
 802a3a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a3a4:	9301      	str	r3, [sp, #4]
 802a3a6:	fa0f f38c 	sxth.w	r3, ip
 802a3aa:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a3ae:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a3b2:	9300      	str	r3, [sp, #0]
 802a3b4:	463a      	mov	r2, r7
 802a3b6:	4653      	mov	r3, sl
 802a3b8:	4641      	mov	r1, r8
 802a3ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 802a3bc:	f7ff fd2a 	bl	8029e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a3c0:	e713      	b.n	802a1ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3c2:	1422      	asrs	r2, r4, #16
 802a3c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802a3c6:	1433      	asrs	r3, r6, #16
 802a3c8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a3cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a3d0:	fb05 2303 	mla	r3, r5, r3, r2
 802a3d4:	085a      	lsrs	r2, r3, #1
 802a3d6:	07dd      	lsls	r5, r3, #31
 802a3d8:	5cba      	ldrb	r2, [r7, r2]
 802a3da:	bf54      	ite	pl
 802a3dc:	f002 020f 	andpl.w	r2, r2, #15
 802a3e0:	1112      	asrmi	r2, r2, #4
 802a3e2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a3e6:	b2d2      	uxtb	r2, r2
 802a3e8:	2900      	cmp	r1, #0
 802a3ea:	d077      	beq.n	802a4dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a3ec:	f103 0e01 	add.w	lr, r3, #1
 802a3f0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a3f4:	f01e 0f01 	tst.w	lr, #1
 802a3f8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a3fc:	bf0c      	ite	eq
 802a3fe:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a402:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a406:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a40a:	fa5f f58c 	uxtb.w	r5, ip
 802a40e:	9512      	str	r5, [sp, #72]	; 0x48
 802a410:	b308      	cbz	r0, 802a456 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a412:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a414:	442b      	add	r3, r5
 802a416:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a41a:	07dd      	lsls	r5, r3, #31
 802a41c:	f103 0301 	add.w	r3, r3, #1
 802a420:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a424:	bf54      	ite	pl
 802a426:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a42a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a42e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a432:	fa5f f58c 	uxtb.w	r5, ip
 802a436:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a43a:	950c      	str	r5, [sp, #48]	; 0x30
 802a43c:	07dd      	lsls	r5, r3, #31
 802a43e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a442:	bf54      	ite	pl
 802a444:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a448:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a44c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a450:	fa5f f38c 	uxtb.w	r3, ip
 802a454:	9313      	str	r3, [sp, #76]	; 0x4c
 802a456:	b289      	uxth	r1, r1
 802a458:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802a45a:	b280      	uxth	r0, r0
 802a45c:	fb01 f300 	mul.w	r3, r1, r0
 802a460:	0109      	lsls	r1, r1, #4
 802a462:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a466:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802a46a:	1ac9      	subs	r1, r1, r3
 802a46c:	b280      	uxth	r0, r0
 802a46e:	b289      	uxth	r1, r1
 802a470:	ebac 0c00 	sub.w	ip, ip, r0
 802a474:	4369      	muls	r1, r5
 802a476:	fa1f fc8c 	uxth.w	ip, ip
 802a47a:	fb02 120c 	mla	r2, r2, ip, r1
 802a47e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a480:	fb00 2001 	mla	r0, r0, r1, r2
 802a484:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802a486:	fb03 0302 	mla	r3, r3, r2, r0
 802a48a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a48e:	b1d3      	cbz	r3, 802a4c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a490:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a492:	4353      	muls	r3, r2
 802a494:	1c5a      	adds	r2, r3, #1
 802a496:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a49a:	4a0f      	ldr	r2, [pc, #60]	; (802a4d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802a49c:	121b      	asrs	r3, r3, #8
 802a49e:	6812      	ldr	r2, [r2, #0]
 802a4a0:	2bff      	cmp	r3, #255	; 0xff
 802a4a2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a4a6:	d12d      	bne.n	802a504 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802a4a8:	0953      	lsrs	r3, r2, #5
 802a4aa:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802a4ae:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a4b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a4b6:	f02c 0c07 	bic.w	ip, ip, #7
 802a4ba:	ea43 0c0c 	orr.w	ip, r3, ip
 802a4be:	ea4c 0202 	orr.w	r2, ip, r2
 802a4c2:	f8a8 2000 	strh.w	r2, [r8]
 802a4c6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802a4c8:	f108 0802 	add.w	r8, r8, #2
 802a4cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a4d0:	441c      	add	r4, r3
 802a4d2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a4d4:	441e      	add	r6, r3
 802a4d6:	e6b9      	b.n	802a24c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802a4d8:	2400b8d4 	.word	0x2400b8d4
 802a4dc:	2800      	cmp	r0, #0
 802a4de:	d0ba      	beq.n	802a456 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a4e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802a4e2:	442b      	add	r3, r5
 802a4e4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a4e8:	07db      	lsls	r3, r3, #31
 802a4ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a4ee:	bf54      	ite	pl
 802a4f0:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a4f4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a4f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a4fc:	fa5f f38c 	uxtb.w	r3, ip
 802a500:	930c      	str	r3, [sp, #48]	; 0x30
 802a502:	e7a8      	b.n	802a456 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a504:	f8b8 e000 	ldrh.w	lr, [r8]
 802a508:	fa1f fa83 	uxth.w	sl, r3
 802a50c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a510:	43db      	mvns	r3, r3
 802a512:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a516:	fb11 f10a 	smulbb	r1, r1, sl
 802a51a:	b2db      	uxtb	r3, r3
 802a51c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a520:	b2d2      	uxtb	r2, r2
 802a522:	fa5f fc8c 	uxtb.w	ip, ip
 802a526:	fb00 1003 	mla	r0, r0, r3, r1
 802a52a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a52e:	fb12 f20a 	smulbb	r2, r2, sl
 802a532:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a536:	b280      	uxth	r0, r0
 802a538:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a53c:	fb1c fc0a 	smulbb	ip, ip, sl
 802a540:	fa5f fe8e 	uxtb.w	lr, lr
 802a544:	fb0e 2203 	mla	r2, lr, r3, r2
 802a548:	fb01 cc03 	mla	ip, r1, r3, ip
 802a54c:	1c43      	adds	r3, r0, #1
 802a54e:	b292      	uxth	r2, r2
 802a550:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a554:	1c51      	adds	r1, r2, #1
 802a556:	fa1f fc8c 	uxth.w	ip, ip
 802a55a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802a55e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a562:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a566:	4308      	orrs	r0, r1
 802a568:	f10c 0101 	add.w	r1, ip, #1
 802a56c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a570:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a574:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a578:	ea40 000c 	orr.w	r0, r0, ip
 802a57c:	f8a8 0000 	strh.w	r0, [r8]
 802a580:	e7a1      	b.n	802a4c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a582:	b017      	add	sp, #92	; 0x5c
 802a584:	ecbd 8b08 	vpop	{d8-d11}
 802a588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a58c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a590:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 802a594:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a598:	2c00      	cmp	r4, #0
 802a59a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802a59e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802a5a2:	fb04 ce03 	mla	lr, r4, r3, ip
 802a5a6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802a5aa:	db60      	blt.n	802a66e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a5ac:	45a1      	cmp	r9, r4
 802a5ae:	dd5e      	ble.n	802a66e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a5b0:	f1bc 0f00 	cmp.w	ip, #0
 802a5b4:	db59      	blt.n	802a66a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a5b6:	45e0      	cmp	r8, ip
 802a5b8:	dd57      	ble.n	802a66a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a5ba:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a5be:	f01e 0f01 	tst.w	lr, #1
 802a5c2:	5c16      	ldrb	r6, [r2, r0]
 802a5c4:	bf0c      	ite	eq
 802a5c6:	f006 060f 	andeq.w	r6, r6, #15
 802a5ca:	1136      	asrne	r6, r6, #4
 802a5cc:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a5d0:	b2f6      	uxtb	r6, r6
 802a5d2:	f11c 0001 	adds.w	r0, ip, #1
 802a5d6:	d44d      	bmi.n	802a674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a5d8:	4580      	cmp	r8, r0
 802a5da:	dd4b      	ble.n	802a674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a5dc:	2d00      	cmp	r5, #0
 802a5de:	d04b      	beq.n	802a678 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802a5e0:	f10e 0a01 	add.w	sl, lr, #1
 802a5e4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a5e8:	f01a 0f01 	tst.w	sl, #1
 802a5ec:	5c10      	ldrb	r0, [r2, r0]
 802a5ee:	bf0c      	ite	eq
 802a5f0:	f000 000f 	andeq.w	r0, r0, #15
 802a5f4:	1100      	asrne	r0, r0, #4
 802a5f6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a5fa:	b2c0      	uxtb	r0, r0
 802a5fc:	3401      	adds	r4, #1
 802a5fe:	d43f      	bmi.n	802a680 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a600:	45a1      	cmp	r9, r4
 802a602:	dd3d      	ble.n	802a680 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a604:	2f00      	cmp	r7, #0
 802a606:	f000 8093 	beq.w	802a730 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a60a:	f1bc 0f00 	cmp.w	ip, #0
 802a60e:	db35      	blt.n	802a67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a610:	45e0      	cmp	r8, ip
 802a612:	dd33      	ble.n	802a67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a614:	eb03 090e 	add.w	r9, r3, lr
 802a618:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a61c:	f019 0f01 	tst.w	r9, #1
 802a620:	5d14      	ldrb	r4, [r2, r4]
 802a622:	bf0c      	ite	eq
 802a624:	f004 040f 	andeq.w	r4, r4, #15
 802a628:	1124      	asrne	r4, r4, #4
 802a62a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a62e:	b2e4      	uxtb	r4, r4
 802a630:	f11c 0c01 	adds.w	ip, ip, #1
 802a634:	d427      	bmi.n	802a686 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a636:	45e0      	cmp	r8, ip
 802a638:	dd25      	ble.n	802a686 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a63a:	b335      	cbz	r5, 802a68a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802a63c:	3301      	adds	r3, #1
 802a63e:	449e      	add	lr, r3
 802a640:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a644:	f01e 0f01 	tst.w	lr, #1
 802a648:	5cd2      	ldrb	r2, [r2, r3]
 802a64a:	bf0c      	ite	eq
 802a64c:	f002 020f 	andeq.w	r2, r2, #15
 802a650:	1112      	asrne	r2, r2, #4
 802a652:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a656:	b2d3      	uxtb	r3, r2
 802a658:	2d0f      	cmp	r5, #15
 802a65a:	d917      	bls.n	802a68c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802a65c:	4b37      	ldr	r3, [pc, #220]	; (802a73c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802a65e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802a662:	4a37      	ldr	r2, [pc, #220]	; (802a740 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802a664:	4837      	ldr	r0, [pc, #220]	; (802a744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802a666:	f000 fc4f 	bl	802af08 <__assert_func>
 802a66a:	2600      	movs	r6, #0
 802a66c:	e7b1      	b.n	802a5d2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802a66e:	2000      	movs	r0, #0
 802a670:	4606      	mov	r6, r0
 802a672:	e7c3      	b.n	802a5fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a674:	2000      	movs	r0, #0
 802a676:	e7c1      	b.n	802a5fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a678:	4628      	mov	r0, r5
 802a67a:	e7bf      	b.n	802a5fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a67c:	2400      	movs	r4, #0
 802a67e:	e7d7      	b.n	802a630 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802a680:	2300      	movs	r3, #0
 802a682:	461c      	mov	r4, r3
 802a684:	e7e8      	b.n	802a658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a686:	2300      	movs	r3, #0
 802a688:	e7e6      	b.n	802a658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a68a:	462b      	mov	r3, r5
 802a68c:	2f0f      	cmp	r7, #15
 802a68e:	d8e5      	bhi.n	802a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a690:	b2ad      	uxth	r5, r5
 802a692:	b2bf      	uxth	r7, r7
 802a694:	fb05 fc07 	mul.w	ip, r5, r7
 802a698:	012d      	lsls	r5, r5, #4
 802a69a:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a69e:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 802a6a2:	eba5 050c 	sub.w	r5, r5, ip
 802a6a6:	b2bf      	uxth	r7, r7
 802a6a8:	b2ad      	uxth	r5, r5
 802a6aa:	1bd2      	subs	r2, r2, r7
 802a6ac:	4368      	muls	r0, r5
 802a6ae:	b292      	uxth	r2, r2
 802a6b0:	fb06 0002 	mla	r0, r6, r2, r0
 802a6b4:	fb07 0404 	mla	r4, r7, r4, r0
 802a6b8:	fb0c 4303 	mla	r3, ip, r3, r4
 802a6bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a6c0:	b3a3      	cbz	r3, 802a72c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a6c2:	4a21      	ldr	r2, [pc, #132]	; (802a748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802a6c4:	880e      	ldrh	r6, [r1, #0]
 802a6c6:	6815      	ldr	r5, [r2, #0]
 802a6c8:	b29a      	uxth	r2, r3
 802a6ca:	1234      	asrs	r4, r6, #8
 802a6cc:	43db      	mvns	r3, r3
 802a6ce:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a6d2:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a6d6:	b2db      	uxtb	r3, r3
 802a6d8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802a6dc:	fb10 f002 	smulbb	r0, r0, r2
 802a6e0:	b2ed      	uxtb	r5, r5
 802a6e2:	fb17 f702 	smulbb	r7, r7, r2
 802a6e6:	fb04 0403 	mla	r4, r4, r3, r0
 802a6ea:	10f0      	asrs	r0, r6, #3
 802a6ec:	fb15 f202 	smulbb	r2, r5, r2
 802a6f0:	00f6      	lsls	r6, r6, #3
 802a6f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802a6f6:	b2a4      	uxth	r4, r4
 802a6f8:	b2f6      	uxtb	r6, r6
 802a6fa:	fb00 7003 	mla	r0, r0, r3, r7
 802a6fe:	fb06 2303 	mla	r3, r6, r3, r2
 802a702:	b280      	uxth	r0, r0
 802a704:	b29a      	uxth	r2, r3
 802a706:	1c63      	adds	r3, r4, #1
 802a708:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a70c:	1c53      	adds	r3, r2, #1
 802a70e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a712:	1c42      	adds	r2, r0, #1
 802a714:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802a718:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a71c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a720:	0940      	lsrs	r0, r0, #5
 802a722:	4323      	orrs	r3, r4
 802a724:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a728:	4303      	orrs	r3, r0
 802a72a:	800b      	strh	r3, [r1, #0]
 802a72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a730:	2d0f      	cmp	r5, #15
 802a732:	d893      	bhi.n	802a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a734:	463b      	mov	r3, r7
 802a736:	463c      	mov	r4, r7
 802a738:	e7aa      	b.n	802a690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802a73a:	bf00      	nop
 802a73c:	08030159 	.word	0x08030159
 802a740:	08030726 	.word	0x08030726
 802a744:	080301dd 	.word	0x080301dd
 802a748:	2400b8d4 	.word	0x2400b8d4

0802a74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a750:	ed2d 8b08 	vpush	{d8-d11}
 802a754:	b093      	sub	sp, #76	; 0x4c
 802a756:	461d      	mov	r5, r3
 802a758:	eeb0 aa40 	vmov.f32	s20, s0
 802a75c:	920c      	str	r2, [sp, #48]	; 0x30
 802a75e:	eef0 9a60 	vmov.f32	s19, s1
 802a762:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802a764:	eeb0 9a41 	vmov.f32	s18, s2
 802a768:	9011      	str	r0, [sp, #68]	; 0x44
 802a76a:	eeb0 8a62 	vmov.f32	s16, s5
 802a76e:	6850      	ldr	r0, [r2, #4]
 802a770:	eef0 8a43 	vmov.f32	s17, s6
 802a774:	9107      	str	r1, [sp, #28]
 802a776:	eef0 ba44 	vmov.f32	s23, s8
 802a77a:	6812      	ldr	r2, [r2, #0]
 802a77c:	eeb0 ba64 	vmov.f32	s22, s9
 802a780:	eef0 aa45 	vmov.f32	s21, s10
 802a784:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802a788:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802a78c:	fb00 1303 	mla	r3, r0, r3, r1
 802a790:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a794:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a796:	689b      	ldr	r3, [r3, #8]
 802a798:	3301      	adds	r3, #1
 802a79a:	f023 0301 	bic.w	r3, r3, #1
 802a79e:	9306      	str	r3, [sp, #24]
 802a7a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a7a2:	681f      	ldr	r7, [r3, #0]
 802a7a4:	9b07      	ldr	r3, [sp, #28]
 802a7a6:	2b00      	cmp	r3, #0
 802a7a8:	dc03      	bgt.n	802a7b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a7aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a7ac:	2b00      	cmp	r3, #0
 802a7ae:	f340 8267 	ble.w	802ac80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a7b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a7b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a7b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a7bc:	1e48      	subs	r0, r1, #1
 802a7be:	f102 3cff 	add.w	ip, r2, #4294967295
 802a7c2:	2d00      	cmp	r5, #0
 802a7c4:	f340 80b7 	ble.w	802a936 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a7c8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a7cc:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a7d0:	d406      	bmi.n	802a7e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a7d2:	4586      	cmp	lr, r0
 802a7d4:	da04      	bge.n	802a7e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a7d6:	2b00      	cmp	r3, #0
 802a7d8:	db02      	blt.n	802a7e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a7da:	4563      	cmp	r3, ip
 802a7dc:	f2c0 80ac 	blt.w	802a938 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802a7e0:	f11e 0e01 	adds.w	lr, lr, #1
 802a7e4:	f100 809f 	bmi.w	802a926 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a7e8:	4571      	cmp	r1, lr
 802a7ea:	f2c0 809c 	blt.w	802a926 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a7ee:	3301      	adds	r3, #1
 802a7f0:	f100 8099 	bmi.w	802a926 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a7f4:	429a      	cmp	r2, r3
 802a7f6:	f2c0 8096 	blt.w	802a926 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a7fa:	46c8      	mov	r8, r9
 802a7fc:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a800:	9509      	str	r5, [sp, #36]	; 0x24
 802a802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a804:	2b00      	cmp	r3, #0
 802a806:	f340 80b5 	ble.w	802a974 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802a80a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a80e:	1430      	asrs	r0, r6, #16
 802a810:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a814:	9308      	str	r3, [sp, #32]
 802a816:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802a818:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a81c:	1423      	asrs	r3, r4, #16
 802a81e:	f100 813f 	bmi.w	802aaa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a822:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a826:	455b      	cmp	r3, fp
 802a828:	f280 813a 	bge.w	802aaa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a82c:	2800      	cmp	r0, #0
 802a82e:	f2c0 8137 	blt.w	802aaa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a832:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a836:	4558      	cmp	r0, fp
 802a838:	f280 8132 	bge.w	802aaa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a83c:	9a06      	ldr	r2, [sp, #24]
 802a83e:	fb00 3302 	mla	r3, r0, r2, r3
 802a842:	0858      	lsrs	r0, r3, #1
 802a844:	07da      	lsls	r2, r3, #31
 802a846:	9a08      	ldr	r2, [sp, #32]
 802a848:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a84c:	bf54      	ite	pl
 802a84e:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a852:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a856:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a85a:	fa5f fc8c 	uxtb.w	ip, ip
 802a85e:	2a00      	cmp	r2, #0
 802a860:	f000 80cc 	beq.w	802a9fc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802a864:	1c58      	adds	r0, r3, #1
 802a866:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a86a:	07c0      	lsls	r0, r0, #31
 802a86c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a870:	bf54      	ite	pl
 802a872:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a876:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a87a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a87e:	fa5f fe8e 	uxtb.w	lr, lr
 802a882:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802a886:	b1b9      	cbz	r1, 802a8b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a888:	4453      	add	r3, sl
 802a88a:	0858      	lsrs	r0, r3, #1
 802a88c:	07da      	lsls	r2, r3, #31
 802a88e:	5c38      	ldrb	r0, [r7, r0]
 802a890:	bf54      	ite	pl
 802a892:	f000 000f 	andpl.w	r0, r0, #15
 802a896:	1100      	asrmi	r0, r0, #4
 802a898:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a89c:	b2c0      	uxtb	r0, r0
 802a89e:	900a      	str	r0, [sp, #40]	; 0x28
 802a8a0:	1c58      	adds	r0, r3, #1
 802a8a2:	0843      	lsrs	r3, r0, #1
 802a8a4:	07c2      	lsls	r2, r0, #31
 802a8a6:	5cfb      	ldrb	r3, [r7, r3]
 802a8a8:	bf54      	ite	pl
 802a8aa:	f003 030f 	andpl.w	r3, r3, #15
 802a8ae:	111b      	asrmi	r3, r3, #4
 802a8b0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a8b4:	b2db      	uxtb	r3, r3
 802a8b6:	930e      	str	r3, [sp, #56]	; 0x38
 802a8b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a8bc:	b289      	uxth	r1, r1
 802a8be:	fb02 f301 	mul.w	r3, r2, r1
 802a8c2:	0112      	lsls	r2, r2, #4
 802a8c4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a8c8:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802a8cc:	1ad2      	subs	r2, r2, r3
 802a8ce:	b289      	uxth	r1, r1
 802a8d0:	b292      	uxth	r2, r2
 802a8d2:	1a40      	subs	r0, r0, r1
 802a8d4:	fa1f fe80 	uxth.w	lr, r0
 802a8d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 802a8da:	4342      	muls	r2, r0
 802a8dc:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a8e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a8e2:	fb01 c102 	mla	r1, r1, r2, ip
 802a8e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a8e8:	fb03 1302 	mla	r3, r3, r2, r1
 802a8ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a8f0:	2bff      	cmp	r3, #255	; 0xff
 802a8f2:	f040 8094 	bne.w	802aa1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802a8f6:	4bbf      	ldr	r3, [pc, #764]	; (802abf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a8f8:	681a      	ldr	r2, [r3, #0]
 802a8fa:	4bbf      	ldr	r3, [pc, #764]	; (802abf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a8fc:	0951      	lsrs	r1, r2, #5
 802a8fe:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a902:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a906:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a90a:	430b      	orrs	r3, r1
 802a90c:	4313      	orrs	r3, r2
 802a90e:	f8a8 3000 	strh.w	r3, [r8]
 802a912:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a914:	f108 0802 	add.w	r8, r8, #2
 802a918:	441c      	add	r4, r3
 802a91a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a91c:	441e      	add	r6, r3
 802a91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a920:	3b01      	subs	r3, #1
 802a922:	9309      	str	r3, [sp, #36]	; 0x24
 802a924:	e76d      	b.n	802a802 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a926:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802a928:	3d01      	subs	r5, #1
 802a92a:	f109 0902 	add.w	r9, r9, #2
 802a92e:	441c      	add	r4, r3
 802a930:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802a932:	441e      	add	r6, r3
 802a934:	e745      	b.n	802a7c2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a936:	d021      	beq.n	802a97c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802a938:	1e6b      	subs	r3, r5, #1
 802a93a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802a93c:	fb00 4003 	mla	r0, r0, r3, r4
 802a940:	1400      	asrs	r0, r0, #16
 802a942:	f53f af5a 	bmi.w	802a7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a946:	3901      	subs	r1, #1
 802a948:	4288      	cmp	r0, r1
 802a94a:	f6bf af56 	bge.w	802a7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a94e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802a950:	fb01 6303 	mla	r3, r1, r3, r6
 802a954:	141b      	asrs	r3, r3, #16
 802a956:	f53f af50 	bmi.w	802a7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a95a:	3a01      	subs	r2, #1
 802a95c:	4293      	cmp	r3, r2
 802a95e:	f6bf af4c 	bge.w	802a7fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a962:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a966:	46a8      	mov	r8, r5
 802a968:	46ce      	mov	lr, r9
 802a96a:	9308      	str	r3, [sp, #32]
 802a96c:	f1b8 0f00 	cmp.w	r8, #0
 802a970:	f300 80b6 	bgt.w	802aae0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a974:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a978:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a97c:	9b07      	ldr	r3, [sp, #28]
 802a97e:	2b00      	cmp	r3, #0
 802a980:	f340 817e 	ble.w	802ac80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a98a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a98e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a992:	eef0 6a48 	vmov.f32	s13, s16
 802a996:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a99a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a99e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a9a2:	ee16 4a90 	vmov	r4, s13
 802a9a6:	eef0 6a68 	vmov.f32	s13, s17
 802a9aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a9ae:	ee16 6a90 	vmov	r6, s13
 802a9b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a9b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a9ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a9be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a9c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a9c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a9ca:	ee18 2a10 	vmov	r2, s16
 802a9ce:	eeb0 8a47 	vmov.f32	s16, s14
 802a9d2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a9d6:	ee18 2a90 	vmov	r2, s17
 802a9da:	9327      	str	r3, [sp, #156]	; 0x9c
 802a9dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a9de:	eef0 8a67 	vmov.f32	s17, s15
 802a9e2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a9e6:	9328      	str	r3, [sp, #160]	; 0xa0
 802a9e8:	9b07      	ldr	r3, [sp, #28]
 802a9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a9ec:	3b01      	subs	r3, #1
 802a9ee:	9307      	str	r3, [sp, #28]
 802a9f0:	bf08      	it	eq
 802a9f2:	4615      	moveq	r5, r2
 802a9f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a9f6:	bf18      	it	ne
 802a9f8:	461d      	movne	r5, r3
 802a9fa:	e6d3      	b.n	802a7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a9fc:	2900      	cmp	r1, #0
 802a9fe:	f43f af5b 	beq.w	802a8b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802aa02:	eb0a 0003 	add.w	r0, sl, r3
 802aa06:	0843      	lsrs	r3, r0, #1
 802aa08:	07c0      	lsls	r0, r0, #31
 802aa0a:	5cfb      	ldrb	r3, [r7, r3]
 802aa0c:	bf54      	ite	pl
 802aa0e:	f003 030f 	andpl.w	r3, r3, #15
 802aa12:	111b      	asrmi	r3, r3, #4
 802aa14:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802aa18:	b2db      	uxtb	r3, r3
 802aa1a:	930a      	str	r3, [sp, #40]	; 0x28
 802aa1c:	e74c      	b.n	802a8b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802aa1e:	2b00      	cmp	r3, #0
 802aa20:	f43f af77 	beq.w	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aa24:	4a73      	ldr	r2, [pc, #460]	; (802abf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802aa26:	fa1f fe83 	uxth.w	lr, r3
 802aa2a:	f8b8 c000 	ldrh.w	ip, [r8]
 802aa2e:	43db      	mvns	r3, r3
 802aa30:	6810      	ldr	r0, [r2, #0]
 802aa32:	ea4f 212c 	mov.w	r1, ip, asr #8
 802aa36:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802aa3a:	b2db      	uxtb	r3, r3
 802aa3c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802aa40:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802aa44:	fb12 f20e 	smulbb	r2, r2, lr
 802aa48:	b2c0      	uxtb	r0, r0
 802aa4a:	fb1b fb0e 	smulbb	fp, fp, lr
 802aa4e:	fb01 2103 	mla	r1, r1, r3, r2
 802aa52:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802aa56:	fb10 fe0e 	smulbb	lr, r0, lr
 802aa5a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802aa5e:	b289      	uxth	r1, r1
 802aa60:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802aa64:	fa5f fc8c 	uxtb.w	ip, ip
 802aa68:	fb02 b203 	mla	r2, r2, r3, fp
 802aa6c:	1c48      	adds	r0, r1, #1
 802aa6e:	fb0c e303 	mla	r3, ip, r3, lr
 802aa72:	b292      	uxth	r2, r2
 802aa74:	b29b      	uxth	r3, r3
 802aa76:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802aa7a:	f102 0b01 	add.w	fp, r2, #1
 802aa7e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802aa82:	1c59      	adds	r1, r3, #1
 802aa84:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802aa88:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802aa8c:	0952      	lsrs	r2, r2, #5
 802aa8e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802aa92:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802aa96:	4301      	orrs	r1, r0
 802aa98:	4311      	orrs	r1, r2
 802aa9a:	f8a8 1000 	strh.w	r1, [r8]
 802aa9e:	e738      	b.n	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aaa0:	f113 0b01 	adds.w	fp, r3, #1
 802aaa4:	f53f af35 	bmi.w	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aaa8:	45dc      	cmp	ip, fp
 802aaaa:	f6ff af32 	blt.w	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aaae:	f110 0b01 	adds.w	fp, r0, #1
 802aab2:	f53f af2e 	bmi.w	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aab6:	45de      	cmp	lr, fp
 802aab8:	f6ff af2b 	blt.w	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aabc:	9302      	str	r3, [sp, #8]
 802aabe:	fa0f f38e 	sxth.w	r3, lr
 802aac2:	9a08      	ldr	r2, [sp, #32]
 802aac4:	9301      	str	r3, [sp, #4]
 802aac6:	fa0f f38c 	sxth.w	r3, ip
 802aaca:	9105      	str	r1, [sp, #20]
 802aacc:	4641      	mov	r1, r8
 802aace:	9300      	str	r3, [sp, #0]
 802aad0:	4653      	mov	r3, sl
 802aad2:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802aad6:	463a      	mov	r2, r7
 802aad8:	9811      	ldr	r0, [sp, #68]	; 0x44
 802aada:	f7ff fd57 	bl	802a58c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802aade:	e718      	b.n	802a912 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aae0:	1422      	asrs	r2, r4, #16
 802aae2:	9906      	ldr	r1, [sp, #24]
 802aae4:	1433      	asrs	r3, r6, #16
 802aae6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802aaea:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802aaee:	fb01 2303 	mla	r3, r1, r3, r2
 802aaf2:	085a      	lsrs	r2, r3, #1
 802aaf4:	07d9      	lsls	r1, r3, #31
 802aaf6:	5cba      	ldrb	r2, [r7, r2]
 802aaf8:	bf54      	ite	pl
 802aafa:	f002 020f 	andpl.w	r2, r2, #15
 802aafe:	1112      	asrmi	r2, r2, #4
 802ab00:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ab04:	b2d2      	uxtb	r2, r2
 802ab06:	2800      	cmp	r0, #0
 802ab08:	d063      	beq.n	802abd2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802ab0a:	f103 0a01 	add.w	sl, r3, #1
 802ab0e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802ab12:	f01a 0f01 	tst.w	sl, #1
 802ab16:	5c79      	ldrb	r1, [r7, r1]
 802ab18:	bf0c      	ite	eq
 802ab1a:	f001 010f 	andeq.w	r1, r1, #15
 802ab1e:	1109      	asrne	r1, r1, #4
 802ab20:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ab24:	b2c9      	uxtb	r1, r1
 802ab26:	910f      	str	r1, [sp, #60]	; 0x3c
 802ab28:	f1bc 0f00 	cmp.w	ip, #0
 802ab2c:	d01a      	beq.n	802ab64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802ab2e:	9908      	ldr	r1, [sp, #32]
 802ab30:	440b      	add	r3, r1
 802ab32:	0859      	lsrs	r1, r3, #1
 802ab34:	f013 0f01 	tst.w	r3, #1
 802ab38:	f103 0301 	add.w	r3, r3, #1
 802ab3c:	5c79      	ldrb	r1, [r7, r1]
 802ab3e:	bf0c      	ite	eq
 802ab40:	f001 010f 	andeq.w	r1, r1, #15
 802ab44:	1109      	asrne	r1, r1, #4
 802ab46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ab4a:	b2c9      	uxtb	r1, r1
 802ab4c:	910b      	str	r1, [sp, #44]	; 0x2c
 802ab4e:	0859      	lsrs	r1, r3, #1
 802ab50:	07db      	lsls	r3, r3, #31
 802ab52:	5c79      	ldrb	r1, [r7, r1]
 802ab54:	bf54      	ite	pl
 802ab56:	f001 010f 	andpl.w	r1, r1, #15
 802ab5a:	1109      	asrmi	r1, r1, #4
 802ab5c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ab60:	b2c9      	uxtb	r1, r1
 802ab62:	9110      	str	r1, [sp, #64]	; 0x40
 802ab64:	b280      	uxth	r0, r0
 802ab66:	fa1f fc8c 	uxth.w	ip, ip
 802ab6a:	fb00 f30c 	mul.w	r3, r0, ip
 802ab6e:	0100      	lsls	r0, r0, #4
 802ab70:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802ab74:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802ab78:	1ac0      	subs	r0, r0, r3
 802ab7a:	fa1f fc8c 	uxth.w	ip, ip
 802ab7e:	b280      	uxth	r0, r0
 802ab80:	eba1 010c 	sub.w	r1, r1, ip
 802ab84:	fa1f fa81 	uxth.w	sl, r1
 802ab88:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802ab8a:	4348      	muls	r0, r1
 802ab8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ab8e:	fb02 020a 	mla	r2, r2, sl, r0
 802ab92:	fb0c 2c01 	mla	ip, ip, r1, r2
 802ab96:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802ab98:	fb03 c302 	mla	r3, r3, r2, ip
 802ab9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802aba0:	2bff      	cmp	r3, #255	; 0xff
 802aba2:	d12b      	bne.n	802abfc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802aba4:	4b13      	ldr	r3, [pc, #76]	; (802abf4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802aba6:	681a      	ldr	r2, [r3, #0]
 802aba8:	4b13      	ldr	r3, [pc, #76]	; (802abf8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802abaa:	0951      	lsrs	r1, r2, #5
 802abac:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802abb0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802abb4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802abb8:	430b      	orrs	r3, r1
 802abba:	4313      	orrs	r3, r2
 802abbc:	f8ae 3000 	strh.w	r3, [lr]
 802abc0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802abc2:	f10e 0e02 	add.w	lr, lr, #2
 802abc6:	f108 38ff 	add.w	r8, r8, #4294967295
 802abca:	441c      	add	r4, r3
 802abcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802abce:	441e      	add	r6, r3
 802abd0:	e6cc      	b.n	802a96c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802abd2:	f1bc 0f00 	cmp.w	ip, #0
 802abd6:	d0c5      	beq.n	802ab64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802abd8:	9908      	ldr	r1, [sp, #32]
 802abda:	440b      	add	r3, r1
 802abdc:	0859      	lsrs	r1, r3, #1
 802abde:	07db      	lsls	r3, r3, #31
 802abe0:	5c79      	ldrb	r1, [r7, r1]
 802abe2:	bf54      	ite	pl
 802abe4:	f001 010f 	andpl.w	r1, r1, #15
 802abe8:	1109      	asrmi	r1, r1, #4
 802abea:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802abee:	b2c9      	uxtb	r1, r1
 802abf0:	910b      	str	r1, [sp, #44]	; 0x2c
 802abf2:	e7b7      	b.n	802ab64 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802abf4:	2400b8d4 	.word	0x2400b8d4
 802abf8:	fffff800 	.word	0xfffff800
 802abfc:	2b00      	cmp	r3, #0
 802abfe:	d0df      	beq.n	802abc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802ac00:	4a22      	ldr	r2, [pc, #136]	; (802ac8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802ac02:	fa1f fa83 	uxth.w	sl, r3
 802ac06:	f8be c000 	ldrh.w	ip, [lr]
 802ac0a:	43db      	mvns	r3, r3
 802ac0c:	6810      	ldr	r0, [r2, #0]
 802ac0e:	ea4f 212c 	mov.w	r1, ip, asr #8
 802ac12:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802ac16:	b2db      	uxtb	r3, r3
 802ac18:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802ac1c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802ac20:	fb12 f20a 	smulbb	r2, r2, sl
 802ac24:	b2c0      	uxtb	r0, r0
 802ac26:	fb1b fb0a 	smulbb	fp, fp, sl
 802ac2a:	fb01 2103 	mla	r1, r1, r3, r2
 802ac2e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802ac32:	fb10 f00a 	smulbb	r0, r0, sl
 802ac36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ac3a:	b289      	uxth	r1, r1
 802ac3c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802ac40:	fa5f fc8c 	uxtb.w	ip, ip
 802ac44:	fb02 b203 	mla	r2, r2, r3, fp
 802ac48:	fb0c 0003 	mla	r0, ip, r3, r0
 802ac4c:	1c4b      	adds	r3, r1, #1
 802ac4e:	b292      	uxth	r2, r2
 802ac50:	b280      	uxth	r0, r0
 802ac52:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802ac56:	f100 0b01 	add.w	fp, r0, #1
 802ac5a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802ac5e:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802ac62:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802ac66:	ea4b 0101 	orr.w	r1, fp, r1
 802ac6a:	f102 0b01 	add.w	fp, r2, #1
 802ac6e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ac72:	0952      	lsrs	r2, r2, #5
 802ac74:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ac78:	4311      	orrs	r1, r2
 802ac7a:	f8ae 1000 	strh.w	r1, [lr]
 802ac7e:	e79f      	b.n	802abc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802ac80:	b013      	add	sp, #76	; 0x4c
 802ac82:	ecbd 8b08 	vpop	{d8-d11}
 802ac86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ac8a:	bf00      	nop
 802ac8c:	2400b8d4 	.word	0x2400b8d4

0802ac90 <CRC_Lock>:
 802ac90:	4a20      	ldr	r2, [pc, #128]	; (802ad14 <CRC_Lock+0x84>)
 802ac92:	b530      	push	{r4, r5, lr}
 802ac94:	6813      	ldr	r3, [r2, #0]
 802ac96:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802ac9a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802ac9e:	f023 0301 	bic.w	r3, r3, #1
 802aca2:	6013      	str	r3, [r2, #0]
 802aca4:	4b1c      	ldr	r3, [pc, #112]	; (802ad18 <CRC_Lock+0x88>)
 802aca6:	681a      	ldr	r2, [r3, #0]
 802aca8:	4022      	ands	r2, r4
 802acaa:	42aa      	cmp	r2, r5
 802acac:	d005      	beq.n	802acba <CRC_Lock+0x2a>
 802acae:	681b      	ldr	r3, [r3, #0]
 802acb0:	f24c 2270 	movw	r2, #49776	; 0xc270
 802acb4:	4023      	ands	r3, r4
 802acb6:	4293      	cmp	r3, r2
 802acb8:	d124      	bne.n	802ad04 <CRC_Lock+0x74>
 802acba:	4b18      	ldr	r3, [pc, #96]	; (802ad1c <CRC_Lock+0x8c>)
 802acbc:	681b      	ldr	r3, [r3, #0]
 802acbe:	bb0b      	cbnz	r3, 802ad04 <CRC_Lock+0x74>
 802acc0:	4b17      	ldr	r3, [pc, #92]	; (802ad20 <CRC_Lock+0x90>)
 802acc2:	681a      	ldr	r2, [r3, #0]
 802acc4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802acc8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802accc:	d00d      	beq.n	802acea <CRC_Lock+0x5a>
 802acce:	681a      	ldr	r2, [r3, #0]
 802acd0:	f240 4483 	movw	r4, #1155	; 0x483
 802acd4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802acd8:	42a2      	cmp	r2, r4
 802acda:	d006      	beq.n	802acea <CRC_Lock+0x5a>
 802acdc:	681b      	ldr	r3, [r3, #0]
 802acde:	f240 4285 	movw	r2, #1157	; 0x485
 802ace2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ace6:	4293      	cmp	r3, r2
 802ace8:	d10c      	bne.n	802ad04 <CRC_Lock+0x74>
 802acea:	4b0e      	ldr	r3, [pc, #56]	; (802ad24 <CRC_Lock+0x94>)
 802acec:	2201      	movs	r2, #1
 802acee:	601a      	str	r2, [r3, #0]
 802acf0:	681a      	ldr	r2, [r3, #0]
 802acf2:	2a00      	cmp	r2, #0
 802acf4:	d1fc      	bne.n	802acf0 <CRC_Lock+0x60>
 802acf6:	4b0c      	ldr	r3, [pc, #48]	; (802ad28 <CRC_Lock+0x98>)
 802acf8:	6018      	str	r0, [r3, #0]
 802acfa:	6818      	ldr	r0, [r3, #0]
 802acfc:	1a43      	subs	r3, r0, r1
 802acfe:	4258      	negs	r0, r3
 802ad00:	4158      	adcs	r0, r3
 802ad02:	bd30      	pop	{r4, r5, pc}
 802ad04:	4b09      	ldr	r3, [pc, #36]	; (802ad2c <CRC_Lock+0x9c>)
 802ad06:	2201      	movs	r2, #1
 802ad08:	601a      	str	r2, [r3, #0]
 802ad0a:	681a      	ldr	r2, [r3, #0]
 802ad0c:	2a00      	cmp	r2, #0
 802ad0e:	d1fc      	bne.n	802ad0a <CRC_Lock+0x7a>
 802ad10:	4b07      	ldr	r3, [pc, #28]	; (802ad30 <CRC_Lock+0xa0>)
 802ad12:	e7f1      	b.n	802acf8 <CRC_Lock+0x68>
 802ad14:	e0002000 	.word	0xe0002000
 802ad18:	e000ed00 	.word	0xe000ed00
 802ad1c:	e0042000 	.word	0xe0042000
 802ad20:	5c001000 	.word	0x5c001000
 802ad24:	58024c08 	.word	0x58024c08
 802ad28:	58024c00 	.word	0x58024c00
 802ad2c:	40023008 	.word	0x40023008
 802ad30:	40023000 	.word	0x40023000

0802ad34 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802ad34:	6101      	str	r1, [r0, #16]
 802ad36:	4770      	bx	lr

0802ad38 <_ZN8touchgfx8Gestures4tickEv>:
 802ad38:	7b83      	ldrb	r3, [r0, #14]
 802ad3a:	b14b      	cbz	r3, 802ad50 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802ad3c:	8903      	ldrh	r3, [r0, #8]
 802ad3e:	3301      	adds	r3, #1
 802ad40:	b29b      	uxth	r3, r3
 802ad42:	2b07      	cmp	r3, #7
 802ad44:	8103      	strh	r3, [r0, #8]
 802ad46:	bf81      	itttt	hi
 802ad48:	2300      	movhi	r3, #0
 802ad4a:	8143      	strhhi	r3, [r0, #10]
 802ad4c:	8183      	strhhi	r3, [r0, #12]
 802ad4e:	7383      	strbhi	r3, [r0, #14]
 802ad50:	4770      	bx	lr
	...

0802ad54 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802ad54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802ad58:	4604      	mov	r4, r0
 802ad5a:	4698      	mov	r8, r3
 802ad5c:	8880      	ldrh	r0, [r0, #4]
 802ad5e:	4617      	mov	r7, r2
 802ad60:	4b1d      	ldr	r3, [pc, #116]	; (802add8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802ad62:	460e      	mov	r6, r1
 802ad64:	f8ad 0006 	strh.w	r0, [sp, #6]
 802ad68:	eba8 0000 	sub.w	r0, r8, r0
 802ad6c:	9300      	str	r3, [sp, #0]
 802ad6e:	2300      	movs	r3, #0
 802ad70:	b280      	uxth	r0, r0
 802ad72:	8aa2      	ldrh	r2, [r4, #20]
 802ad74:	f88d 3004 	strb.w	r3, [sp, #4]
 802ad78:	b203      	sxth	r3, r0
 802ad7a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802ad7e:	88e1      	ldrh	r1, [r4, #6]
 802ad80:	2b00      	cmp	r3, #0
 802ad82:	f8ad 800a 	strh.w	r8, [sp, #10]
 802ad86:	f8ad 1008 	strh.w	r1, [sp, #8]
 802ad8a:	bfb8      	it	lt
 802ad8c:	4240      	neglt	r0, r0
 802ad8e:	f8ad 500c 	strh.w	r5, [sp, #12]
 802ad92:	bfb8      	it	lt
 802ad94:	b203      	sxthlt	r3, r0
 802ad96:	4293      	cmp	r3, r2
 802ad98:	dc08      	bgt.n	802adac <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802ad9a:	1a69      	subs	r1, r5, r1
 802ad9c:	b289      	uxth	r1, r1
 802ad9e:	b20b      	sxth	r3, r1
 802ada0:	2b00      	cmp	r3, #0
 802ada2:	bfbc      	itt	lt
 802ada4:	4249      	neglt	r1, r1
 802ada6:	b20b      	sxthlt	r3, r1
 802ada8:	429a      	cmp	r2, r3
 802adaa:	da13      	bge.n	802add4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802adac:	6920      	ldr	r0, [r4, #16]
 802adae:	4669      	mov	r1, sp
 802adb0:	eba8 0606 	sub.w	r6, r8, r6
 802adb4:	1bef      	subs	r7, r5, r7
 802adb6:	6803      	ldr	r3, [r0, #0]
 802adb8:	685b      	ldr	r3, [r3, #4]
 802adba:	4798      	blx	r3
 802adbc:	2300      	movs	r3, #0
 802adbe:	2001      	movs	r0, #1
 802adc0:	8166      	strh	r6, [r4, #10]
 802adc2:	8123      	strh	r3, [r4, #8]
 802adc4:	81a7      	strh	r7, [r4, #12]
 802adc6:	f8a4 8004 	strh.w	r8, [r4, #4]
 802adca:	80e5      	strh	r5, [r4, #6]
 802adcc:	73a0      	strb	r0, [r4, #14]
 802adce:	b004      	add	sp, #16
 802add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802add4:	2000      	movs	r0, #0
 802add6:	e7fa      	b.n	802adce <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802add8:	0802f5e8 	.word	0x0802f5e8

0802addc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802addc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802adde:	461e      	mov	r6, r3
 802ade0:	1e4b      	subs	r3, r1, #1
 802ade2:	b085      	sub	sp, #20
 802ade4:	4604      	mov	r4, r0
 802ade6:	2b01      	cmp	r3, #1
 802ade8:	460d      	mov	r5, r1
 802adea:	4617      	mov	r7, r2
 802adec:	d84b      	bhi.n	802ae86 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802adee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802adf2:	1cd3      	adds	r3, r2, #3
 802adf4:	b29b      	uxth	r3, r3
 802adf6:	2b06      	cmp	r3, #6
 802adf8:	d916      	bls.n	802ae28 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802adfa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802ae9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802adfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ae02:	f8cd c004 	str.w	ip, [sp, #4]
 802ae06:	f04f 0c00 	mov.w	ip, #0
 802ae0a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ae0e:	6900      	ldr	r0, [r0, #16]
 802ae10:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ae14:	a901      	add	r1, sp, #4
 802ae16:	f88d c008 	strb.w	ip, [sp, #8]
 802ae1a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ae1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ae22:	6803      	ldr	r3, [r0, #0]
 802ae24:	689b      	ldr	r3, [r3, #8]
 802ae26:	4798      	blx	r3
 802ae28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ae2c:	1cd3      	adds	r3, r2, #3
 802ae2e:	b29b      	uxth	r3, r3
 802ae30:	2b06      	cmp	r3, #6
 802ae32:	d916      	bls.n	802ae62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ae34:	f8df c064 	ldr.w	ip, [pc, #100]	; 802ae9c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ae38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ae3c:	f8cd c004 	str.w	ip, [sp, #4]
 802ae40:	f04f 0c01 	mov.w	ip, #1
 802ae44:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ae48:	6920      	ldr	r0, [r4, #16]
 802ae4a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ae4e:	a901      	add	r1, sp, #4
 802ae50:	f88d c008 	strb.w	ip, [sp, #8]
 802ae54:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ae58:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ae5c:	6803      	ldr	r3, [r0, #0]
 802ae5e:	689b      	ldr	r3, [r3, #8]
 802ae60:	4798      	blx	r3
 802ae62:	4b0d      	ldr	r3, [pc, #52]	; (802ae98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802ae64:	a901      	add	r1, sp, #4
 802ae66:	6920      	ldr	r0, [r4, #16]
 802ae68:	9301      	str	r3, [sp, #4]
 802ae6a:	2300      	movs	r3, #0
 802ae6c:	f88d 5008 	strb.w	r5, [sp, #8]
 802ae70:	f8ad 700a 	strh.w	r7, [sp, #10]
 802ae74:	f8ad 600c 	strh.w	r6, [sp, #12]
 802ae78:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ae7c:	6803      	ldr	r3, [r0, #0]
 802ae7e:	681b      	ldr	r3, [r3, #0]
 802ae80:	4798      	blx	r3
 802ae82:	b005      	add	sp, #20
 802ae84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ae86:	2900      	cmp	r1, #0
 802ae88:	d1eb      	bne.n	802ae62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ae8a:	80a2      	strh	r2, [r4, #4]
 802ae8c:	80c6      	strh	r6, [r0, #6]
 802ae8e:	60a1      	str	r1, [r4, #8]
 802ae90:	81a1      	strh	r1, [r4, #12]
 802ae92:	73a1      	strb	r1, [r4, #14]
 802ae94:	e7e5      	b.n	802ae62 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ae96:	bf00      	nop
 802ae98:	0802f5d4 	.word	0x0802f5d4
 802ae9c:	0802f5fc 	.word	0x0802f5fc

0802aea0 <__aeabi_atexit>:
 802aea0:	460b      	mov	r3, r1
 802aea2:	4601      	mov	r1, r0
 802aea4:	4618      	mov	r0, r3
 802aea6:	f000 b90f 	b.w	802b0c8 <__cxa_atexit>

0802aeaa <_ZdlPvj>:
 802aeaa:	f000 b812 	b.w	802aed2 <_ZdlPv>

0802aeae <__cxa_guard_acquire>:
 802aeae:	6803      	ldr	r3, [r0, #0]
 802aeb0:	07db      	lsls	r3, r3, #31
 802aeb2:	d406      	bmi.n	802aec2 <__cxa_guard_acquire+0x14>
 802aeb4:	7843      	ldrb	r3, [r0, #1]
 802aeb6:	b103      	cbz	r3, 802aeba <__cxa_guard_acquire+0xc>
 802aeb8:	deff      	udf	#255	; 0xff
 802aeba:	2301      	movs	r3, #1
 802aebc:	7043      	strb	r3, [r0, #1]
 802aebe:	4618      	mov	r0, r3
 802aec0:	4770      	bx	lr
 802aec2:	2000      	movs	r0, #0
 802aec4:	4770      	bx	lr

0802aec6 <__cxa_guard_release>:
 802aec6:	2301      	movs	r3, #1
 802aec8:	6003      	str	r3, [r0, #0]
 802aeca:	4770      	bx	lr

0802aecc <__cxa_pure_virtual>:
 802aecc:	b508      	push	{r3, lr}
 802aece:	f000 f80f 	bl	802aef0 <_ZSt9terminatev>

0802aed2 <_ZdlPv>:
 802aed2:	f000 b845 	b.w	802af60 <free>

0802aed6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802aed6:	b508      	push	{r3, lr}
 802aed8:	4780      	blx	r0
 802aeda:	f000 f80e 	bl	802aefa <abort>
	...

0802aee0 <_ZSt13get_terminatev>:
 802aee0:	4b02      	ldr	r3, [pc, #8]	; (802aeec <_ZSt13get_terminatev+0xc>)
 802aee2:	6818      	ldr	r0, [r3, #0]
 802aee4:	f3bf 8f5b 	dmb	ish
 802aee8:	4770      	bx	lr
 802aeea:	bf00      	nop
 802aeec:	240000c8 	.word	0x240000c8

0802aef0 <_ZSt9terminatev>:
 802aef0:	b508      	push	{r3, lr}
 802aef2:	f7ff fff5 	bl	802aee0 <_ZSt13get_terminatev>
 802aef6:	f7ff ffee 	bl	802aed6 <_ZN10__cxxabiv111__terminateEPFvvE>

0802aefa <abort>:
 802aefa:	b508      	push	{r3, lr}
 802aefc:	2006      	movs	r0, #6
 802aefe:	f000 fa39 	bl	802b374 <raise>
 802af02:	2001      	movs	r0, #1
 802af04:	f7d6 fc1e 	bl	8001744 <_exit>

0802af08 <__assert_func>:
 802af08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802af0a:	4614      	mov	r4, r2
 802af0c:	461a      	mov	r2, r3
 802af0e:	4b09      	ldr	r3, [pc, #36]	; (802af34 <__assert_func+0x2c>)
 802af10:	681b      	ldr	r3, [r3, #0]
 802af12:	4605      	mov	r5, r0
 802af14:	68d8      	ldr	r0, [r3, #12]
 802af16:	b14c      	cbz	r4, 802af2c <__assert_func+0x24>
 802af18:	4b07      	ldr	r3, [pc, #28]	; (802af38 <__assert_func+0x30>)
 802af1a:	9100      	str	r1, [sp, #0]
 802af1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802af20:	4906      	ldr	r1, [pc, #24]	; (802af3c <__assert_func+0x34>)
 802af22:	462b      	mov	r3, r5
 802af24:	f000 f982 	bl	802b22c <fiprintf>
 802af28:	f7ff ffe7 	bl	802aefa <abort>
 802af2c:	4b04      	ldr	r3, [pc, #16]	; (802af40 <__assert_func+0x38>)
 802af2e:	461c      	mov	r4, r3
 802af30:	e7f3      	b.n	802af1a <__assert_func+0x12>
 802af32:	bf00      	nop
 802af34:	24000124 	.word	0x24000124
 802af38:	08030961 	.word	0x08030961
 802af3c:	0803096e 	.word	0x0803096e
 802af40:	0803099c 	.word	0x0803099c

0802af44 <atexit>:
 802af44:	2300      	movs	r3, #0
 802af46:	4601      	mov	r1, r0
 802af48:	461a      	mov	r2, r3
 802af4a:	4618      	mov	r0, r3
 802af4c:	f000 bb16 	b.w	802b57c <__register_exitproc>

0802af50 <malloc>:
 802af50:	4b02      	ldr	r3, [pc, #8]	; (802af5c <malloc+0xc>)
 802af52:	4601      	mov	r1, r0
 802af54:	6818      	ldr	r0, [r3, #0]
 802af56:	f000 b82b 	b.w	802afb0 <_malloc_r>
 802af5a:	bf00      	nop
 802af5c:	24000124 	.word	0x24000124

0802af60 <free>:
 802af60:	4b02      	ldr	r3, [pc, #8]	; (802af6c <free+0xc>)
 802af62:	4601      	mov	r1, r0
 802af64:	6818      	ldr	r0, [r3, #0]
 802af66:	f000 bb67 	b.w	802b638 <_free_r>
 802af6a:	bf00      	nop
 802af6c:	24000124 	.word	0x24000124

0802af70 <sbrk_aligned>:
 802af70:	b570      	push	{r4, r5, r6, lr}
 802af72:	4e0e      	ldr	r6, [pc, #56]	; (802afac <sbrk_aligned+0x3c>)
 802af74:	460c      	mov	r4, r1
 802af76:	6831      	ldr	r1, [r6, #0]
 802af78:	4605      	mov	r5, r0
 802af7a:	b911      	cbnz	r1, 802af82 <sbrk_aligned+0x12>
 802af7c:	f000 faa0 	bl	802b4c0 <_sbrk_r>
 802af80:	6030      	str	r0, [r6, #0]
 802af82:	4621      	mov	r1, r4
 802af84:	4628      	mov	r0, r5
 802af86:	f000 fa9b 	bl	802b4c0 <_sbrk_r>
 802af8a:	1c43      	adds	r3, r0, #1
 802af8c:	d00a      	beq.n	802afa4 <sbrk_aligned+0x34>
 802af8e:	1cc4      	adds	r4, r0, #3
 802af90:	f024 0403 	bic.w	r4, r4, #3
 802af94:	42a0      	cmp	r0, r4
 802af96:	d007      	beq.n	802afa8 <sbrk_aligned+0x38>
 802af98:	1a21      	subs	r1, r4, r0
 802af9a:	4628      	mov	r0, r5
 802af9c:	f000 fa90 	bl	802b4c0 <_sbrk_r>
 802afa0:	3001      	adds	r0, #1
 802afa2:	d101      	bne.n	802afa8 <sbrk_aligned+0x38>
 802afa4:	f04f 34ff 	mov.w	r4, #4294967295
 802afa8:	4620      	mov	r0, r4
 802afaa:	bd70      	pop	{r4, r5, r6, pc}
 802afac:	2400b9cc 	.word	0x2400b9cc

0802afb0 <_malloc_r>:
 802afb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802afb4:	1ccd      	adds	r5, r1, #3
 802afb6:	f025 0503 	bic.w	r5, r5, #3
 802afba:	3508      	adds	r5, #8
 802afbc:	2d0c      	cmp	r5, #12
 802afbe:	bf38      	it	cc
 802afc0:	250c      	movcc	r5, #12
 802afc2:	2d00      	cmp	r5, #0
 802afc4:	4607      	mov	r7, r0
 802afc6:	db01      	blt.n	802afcc <_malloc_r+0x1c>
 802afc8:	42a9      	cmp	r1, r5
 802afca:	d905      	bls.n	802afd8 <_malloc_r+0x28>
 802afcc:	230c      	movs	r3, #12
 802afce:	603b      	str	r3, [r7, #0]
 802afd0:	2600      	movs	r6, #0
 802afd2:	4630      	mov	r0, r6
 802afd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802afd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802b0ac <_malloc_r+0xfc>
 802afdc:	f000 f868 	bl	802b0b0 <__malloc_lock>
 802afe0:	f8d8 3000 	ldr.w	r3, [r8]
 802afe4:	461c      	mov	r4, r3
 802afe6:	bb5c      	cbnz	r4, 802b040 <_malloc_r+0x90>
 802afe8:	4629      	mov	r1, r5
 802afea:	4638      	mov	r0, r7
 802afec:	f7ff ffc0 	bl	802af70 <sbrk_aligned>
 802aff0:	1c43      	adds	r3, r0, #1
 802aff2:	4604      	mov	r4, r0
 802aff4:	d155      	bne.n	802b0a2 <_malloc_r+0xf2>
 802aff6:	f8d8 4000 	ldr.w	r4, [r8]
 802affa:	4626      	mov	r6, r4
 802affc:	2e00      	cmp	r6, #0
 802affe:	d145      	bne.n	802b08c <_malloc_r+0xdc>
 802b000:	2c00      	cmp	r4, #0
 802b002:	d048      	beq.n	802b096 <_malloc_r+0xe6>
 802b004:	6823      	ldr	r3, [r4, #0]
 802b006:	4631      	mov	r1, r6
 802b008:	4638      	mov	r0, r7
 802b00a:	eb04 0903 	add.w	r9, r4, r3
 802b00e:	f000 fa57 	bl	802b4c0 <_sbrk_r>
 802b012:	4581      	cmp	r9, r0
 802b014:	d13f      	bne.n	802b096 <_malloc_r+0xe6>
 802b016:	6821      	ldr	r1, [r4, #0]
 802b018:	1a6d      	subs	r5, r5, r1
 802b01a:	4629      	mov	r1, r5
 802b01c:	4638      	mov	r0, r7
 802b01e:	f7ff ffa7 	bl	802af70 <sbrk_aligned>
 802b022:	3001      	adds	r0, #1
 802b024:	d037      	beq.n	802b096 <_malloc_r+0xe6>
 802b026:	6823      	ldr	r3, [r4, #0]
 802b028:	442b      	add	r3, r5
 802b02a:	6023      	str	r3, [r4, #0]
 802b02c:	f8d8 3000 	ldr.w	r3, [r8]
 802b030:	2b00      	cmp	r3, #0
 802b032:	d038      	beq.n	802b0a6 <_malloc_r+0xf6>
 802b034:	685a      	ldr	r2, [r3, #4]
 802b036:	42a2      	cmp	r2, r4
 802b038:	d12b      	bne.n	802b092 <_malloc_r+0xe2>
 802b03a:	2200      	movs	r2, #0
 802b03c:	605a      	str	r2, [r3, #4]
 802b03e:	e00f      	b.n	802b060 <_malloc_r+0xb0>
 802b040:	6822      	ldr	r2, [r4, #0]
 802b042:	1b52      	subs	r2, r2, r5
 802b044:	d41f      	bmi.n	802b086 <_malloc_r+0xd6>
 802b046:	2a0b      	cmp	r2, #11
 802b048:	d917      	bls.n	802b07a <_malloc_r+0xca>
 802b04a:	1961      	adds	r1, r4, r5
 802b04c:	42a3      	cmp	r3, r4
 802b04e:	6025      	str	r5, [r4, #0]
 802b050:	bf18      	it	ne
 802b052:	6059      	strne	r1, [r3, #4]
 802b054:	6863      	ldr	r3, [r4, #4]
 802b056:	bf08      	it	eq
 802b058:	f8c8 1000 	streq.w	r1, [r8]
 802b05c:	5162      	str	r2, [r4, r5]
 802b05e:	604b      	str	r3, [r1, #4]
 802b060:	4638      	mov	r0, r7
 802b062:	f104 060b 	add.w	r6, r4, #11
 802b066:	f000 f829 	bl	802b0bc <__malloc_unlock>
 802b06a:	f026 0607 	bic.w	r6, r6, #7
 802b06e:	1d23      	adds	r3, r4, #4
 802b070:	1af2      	subs	r2, r6, r3
 802b072:	d0ae      	beq.n	802afd2 <_malloc_r+0x22>
 802b074:	1b9b      	subs	r3, r3, r6
 802b076:	50a3      	str	r3, [r4, r2]
 802b078:	e7ab      	b.n	802afd2 <_malloc_r+0x22>
 802b07a:	42a3      	cmp	r3, r4
 802b07c:	6862      	ldr	r2, [r4, #4]
 802b07e:	d1dd      	bne.n	802b03c <_malloc_r+0x8c>
 802b080:	f8c8 2000 	str.w	r2, [r8]
 802b084:	e7ec      	b.n	802b060 <_malloc_r+0xb0>
 802b086:	4623      	mov	r3, r4
 802b088:	6864      	ldr	r4, [r4, #4]
 802b08a:	e7ac      	b.n	802afe6 <_malloc_r+0x36>
 802b08c:	4634      	mov	r4, r6
 802b08e:	6876      	ldr	r6, [r6, #4]
 802b090:	e7b4      	b.n	802affc <_malloc_r+0x4c>
 802b092:	4613      	mov	r3, r2
 802b094:	e7cc      	b.n	802b030 <_malloc_r+0x80>
 802b096:	230c      	movs	r3, #12
 802b098:	603b      	str	r3, [r7, #0]
 802b09a:	4638      	mov	r0, r7
 802b09c:	f000 f80e 	bl	802b0bc <__malloc_unlock>
 802b0a0:	e797      	b.n	802afd2 <_malloc_r+0x22>
 802b0a2:	6025      	str	r5, [r4, #0]
 802b0a4:	e7dc      	b.n	802b060 <_malloc_r+0xb0>
 802b0a6:	605b      	str	r3, [r3, #4]
 802b0a8:	deff      	udf	#255	; 0xff
 802b0aa:	bf00      	nop
 802b0ac:	2400b9c8 	.word	0x2400b9c8

0802b0b0 <__malloc_lock>:
 802b0b0:	4801      	ldr	r0, [pc, #4]	; (802b0b8 <__malloc_lock+0x8>)
 802b0b2:	f000 ba52 	b.w	802b55a <__retarget_lock_acquire_recursive>
 802b0b6:	bf00      	nop
 802b0b8:	2400bb11 	.word	0x2400bb11

0802b0bc <__malloc_unlock>:
 802b0bc:	4801      	ldr	r0, [pc, #4]	; (802b0c4 <__malloc_unlock+0x8>)
 802b0be:	f000 ba4d 	b.w	802b55c <__retarget_lock_release_recursive>
 802b0c2:	bf00      	nop
 802b0c4:	2400bb11 	.word	0x2400bb11

0802b0c8 <__cxa_atexit>:
 802b0c8:	b510      	push	{r4, lr}
 802b0ca:	4c05      	ldr	r4, [pc, #20]	; (802b0e0 <__cxa_atexit+0x18>)
 802b0cc:	4613      	mov	r3, r2
 802b0ce:	b12c      	cbz	r4, 802b0dc <__cxa_atexit+0x14>
 802b0d0:	460a      	mov	r2, r1
 802b0d2:	4601      	mov	r1, r0
 802b0d4:	2002      	movs	r0, #2
 802b0d6:	f000 fa51 	bl	802b57c <__register_exitproc>
 802b0da:	bd10      	pop	{r4, pc}
 802b0dc:	4620      	mov	r0, r4
 802b0de:	e7fc      	b.n	802b0da <__cxa_atexit+0x12>
 802b0e0:	0802b57d 	.word	0x0802b57d

0802b0e4 <std>:
 802b0e4:	2300      	movs	r3, #0
 802b0e6:	b510      	push	{r4, lr}
 802b0e8:	4604      	mov	r4, r0
 802b0ea:	e9c0 3300 	strd	r3, r3, [r0]
 802b0ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b0f2:	6083      	str	r3, [r0, #8]
 802b0f4:	8181      	strh	r1, [r0, #12]
 802b0f6:	6643      	str	r3, [r0, #100]	; 0x64
 802b0f8:	81c2      	strh	r2, [r0, #14]
 802b0fa:	6183      	str	r3, [r0, #24]
 802b0fc:	4619      	mov	r1, r3
 802b0fe:	2208      	movs	r2, #8
 802b100:	305c      	adds	r0, #92	; 0x5c
 802b102:	f000 f906 	bl	802b312 <memset>
 802b106:	4b0d      	ldr	r3, [pc, #52]	; (802b13c <std+0x58>)
 802b108:	6263      	str	r3, [r4, #36]	; 0x24
 802b10a:	4b0d      	ldr	r3, [pc, #52]	; (802b140 <std+0x5c>)
 802b10c:	62a3      	str	r3, [r4, #40]	; 0x28
 802b10e:	4b0d      	ldr	r3, [pc, #52]	; (802b144 <std+0x60>)
 802b110:	62e3      	str	r3, [r4, #44]	; 0x2c
 802b112:	4b0d      	ldr	r3, [pc, #52]	; (802b148 <std+0x64>)
 802b114:	6323      	str	r3, [r4, #48]	; 0x30
 802b116:	4b0d      	ldr	r3, [pc, #52]	; (802b14c <std+0x68>)
 802b118:	6224      	str	r4, [r4, #32]
 802b11a:	429c      	cmp	r4, r3
 802b11c:	d006      	beq.n	802b12c <std+0x48>
 802b11e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802b122:	4294      	cmp	r4, r2
 802b124:	d002      	beq.n	802b12c <std+0x48>
 802b126:	33d0      	adds	r3, #208	; 0xd0
 802b128:	429c      	cmp	r4, r3
 802b12a:	d105      	bne.n	802b138 <std+0x54>
 802b12c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b134:	f000 ba10 	b.w	802b558 <__retarget_lock_init_recursive>
 802b138:	bd10      	pop	{r4, pc}
 802b13a:	bf00      	nop
 802b13c:	0802b28d 	.word	0x0802b28d
 802b140:	0802b2af 	.word	0x0802b2af
 802b144:	0802b2e7 	.word	0x0802b2e7
 802b148:	0802b30b 	.word	0x0802b30b
 802b14c:	2400b9d0 	.word	0x2400b9d0

0802b150 <stdio_exit_handler>:
 802b150:	4a02      	ldr	r2, [pc, #8]	; (802b15c <stdio_exit_handler+0xc>)
 802b152:	4903      	ldr	r1, [pc, #12]	; (802b160 <stdio_exit_handler+0x10>)
 802b154:	4803      	ldr	r0, [pc, #12]	; (802b164 <stdio_exit_handler+0x14>)
 802b156:	f000 b87b 	b.w	802b250 <_fwalk_sglue>
 802b15a:	bf00      	nop
 802b15c:	240000cc 	.word	0x240000cc
 802b160:	0802bd85 	.word	0x0802bd85
 802b164:	240000d8 	.word	0x240000d8

0802b168 <cleanup_stdio>:
 802b168:	6841      	ldr	r1, [r0, #4]
 802b16a:	4b0c      	ldr	r3, [pc, #48]	; (802b19c <cleanup_stdio+0x34>)
 802b16c:	4299      	cmp	r1, r3
 802b16e:	b510      	push	{r4, lr}
 802b170:	4604      	mov	r4, r0
 802b172:	d001      	beq.n	802b178 <cleanup_stdio+0x10>
 802b174:	f000 fe06 	bl	802bd84 <_fflush_r>
 802b178:	68a1      	ldr	r1, [r4, #8]
 802b17a:	4b09      	ldr	r3, [pc, #36]	; (802b1a0 <cleanup_stdio+0x38>)
 802b17c:	4299      	cmp	r1, r3
 802b17e:	d002      	beq.n	802b186 <cleanup_stdio+0x1e>
 802b180:	4620      	mov	r0, r4
 802b182:	f000 fdff 	bl	802bd84 <_fflush_r>
 802b186:	68e1      	ldr	r1, [r4, #12]
 802b188:	4b06      	ldr	r3, [pc, #24]	; (802b1a4 <cleanup_stdio+0x3c>)
 802b18a:	4299      	cmp	r1, r3
 802b18c:	d004      	beq.n	802b198 <cleanup_stdio+0x30>
 802b18e:	4620      	mov	r0, r4
 802b190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b194:	f000 bdf6 	b.w	802bd84 <_fflush_r>
 802b198:	bd10      	pop	{r4, pc}
 802b19a:	bf00      	nop
 802b19c:	2400b9d0 	.word	0x2400b9d0
 802b1a0:	2400ba38 	.word	0x2400ba38
 802b1a4:	2400baa0 	.word	0x2400baa0

0802b1a8 <global_stdio_init.part.0>:
 802b1a8:	b510      	push	{r4, lr}
 802b1aa:	4b0b      	ldr	r3, [pc, #44]	; (802b1d8 <global_stdio_init.part.0+0x30>)
 802b1ac:	4c0b      	ldr	r4, [pc, #44]	; (802b1dc <global_stdio_init.part.0+0x34>)
 802b1ae:	4a0c      	ldr	r2, [pc, #48]	; (802b1e0 <global_stdio_init.part.0+0x38>)
 802b1b0:	601a      	str	r2, [r3, #0]
 802b1b2:	4620      	mov	r0, r4
 802b1b4:	2200      	movs	r2, #0
 802b1b6:	2104      	movs	r1, #4
 802b1b8:	f7ff ff94 	bl	802b0e4 <std>
 802b1bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802b1c0:	2201      	movs	r2, #1
 802b1c2:	2109      	movs	r1, #9
 802b1c4:	f7ff ff8e 	bl	802b0e4 <std>
 802b1c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802b1cc:	2202      	movs	r2, #2
 802b1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b1d2:	2112      	movs	r1, #18
 802b1d4:	f7ff bf86 	b.w	802b0e4 <std>
 802b1d8:	2400bb08 	.word	0x2400bb08
 802b1dc:	2400b9d0 	.word	0x2400b9d0
 802b1e0:	0802b151 	.word	0x0802b151

0802b1e4 <__sfp_lock_acquire>:
 802b1e4:	4801      	ldr	r0, [pc, #4]	; (802b1ec <__sfp_lock_acquire+0x8>)
 802b1e6:	f000 b9b8 	b.w	802b55a <__retarget_lock_acquire_recursive>
 802b1ea:	bf00      	nop
 802b1ec:	2400bb12 	.word	0x2400bb12

0802b1f0 <__sfp_lock_release>:
 802b1f0:	4801      	ldr	r0, [pc, #4]	; (802b1f8 <__sfp_lock_release+0x8>)
 802b1f2:	f000 b9b3 	b.w	802b55c <__retarget_lock_release_recursive>
 802b1f6:	bf00      	nop
 802b1f8:	2400bb12 	.word	0x2400bb12

0802b1fc <__sinit>:
 802b1fc:	b510      	push	{r4, lr}
 802b1fe:	4604      	mov	r4, r0
 802b200:	f7ff fff0 	bl	802b1e4 <__sfp_lock_acquire>
 802b204:	6a23      	ldr	r3, [r4, #32]
 802b206:	b11b      	cbz	r3, 802b210 <__sinit+0x14>
 802b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b20c:	f7ff bff0 	b.w	802b1f0 <__sfp_lock_release>
 802b210:	4b04      	ldr	r3, [pc, #16]	; (802b224 <__sinit+0x28>)
 802b212:	6223      	str	r3, [r4, #32]
 802b214:	4b04      	ldr	r3, [pc, #16]	; (802b228 <__sinit+0x2c>)
 802b216:	681b      	ldr	r3, [r3, #0]
 802b218:	2b00      	cmp	r3, #0
 802b21a:	d1f5      	bne.n	802b208 <__sinit+0xc>
 802b21c:	f7ff ffc4 	bl	802b1a8 <global_stdio_init.part.0>
 802b220:	e7f2      	b.n	802b208 <__sinit+0xc>
 802b222:	bf00      	nop
 802b224:	0802b169 	.word	0x0802b169
 802b228:	2400bb08 	.word	0x2400bb08

0802b22c <fiprintf>:
 802b22c:	b40e      	push	{r1, r2, r3}
 802b22e:	b503      	push	{r0, r1, lr}
 802b230:	4601      	mov	r1, r0
 802b232:	ab03      	add	r3, sp, #12
 802b234:	4805      	ldr	r0, [pc, #20]	; (802b24c <fiprintf+0x20>)
 802b236:	f853 2b04 	ldr.w	r2, [r3], #4
 802b23a:	6800      	ldr	r0, [r0, #0]
 802b23c:	9301      	str	r3, [sp, #4]
 802b23e:	f000 fa71 	bl	802b724 <_vfiprintf_r>
 802b242:	b002      	add	sp, #8
 802b244:	f85d eb04 	ldr.w	lr, [sp], #4
 802b248:	b003      	add	sp, #12
 802b24a:	4770      	bx	lr
 802b24c:	24000124 	.word	0x24000124

0802b250 <_fwalk_sglue>:
 802b250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b254:	4607      	mov	r7, r0
 802b256:	4688      	mov	r8, r1
 802b258:	4614      	mov	r4, r2
 802b25a:	2600      	movs	r6, #0
 802b25c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b260:	f1b9 0901 	subs.w	r9, r9, #1
 802b264:	d505      	bpl.n	802b272 <_fwalk_sglue+0x22>
 802b266:	6824      	ldr	r4, [r4, #0]
 802b268:	2c00      	cmp	r4, #0
 802b26a:	d1f7      	bne.n	802b25c <_fwalk_sglue+0xc>
 802b26c:	4630      	mov	r0, r6
 802b26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b272:	89ab      	ldrh	r3, [r5, #12]
 802b274:	2b01      	cmp	r3, #1
 802b276:	d907      	bls.n	802b288 <_fwalk_sglue+0x38>
 802b278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b27c:	3301      	adds	r3, #1
 802b27e:	d003      	beq.n	802b288 <_fwalk_sglue+0x38>
 802b280:	4629      	mov	r1, r5
 802b282:	4638      	mov	r0, r7
 802b284:	47c0      	blx	r8
 802b286:	4306      	orrs	r6, r0
 802b288:	3568      	adds	r5, #104	; 0x68
 802b28a:	e7e9      	b.n	802b260 <_fwalk_sglue+0x10>

0802b28c <__sread>:
 802b28c:	b510      	push	{r4, lr}
 802b28e:	460c      	mov	r4, r1
 802b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b294:	f000 f8ee 	bl	802b474 <_read_r>
 802b298:	2800      	cmp	r0, #0
 802b29a:	bfab      	itete	ge
 802b29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b29e:	89a3      	ldrhlt	r3, [r4, #12]
 802b2a0:	181b      	addge	r3, r3, r0
 802b2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b2a6:	bfac      	ite	ge
 802b2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 802b2aa:	81a3      	strhlt	r3, [r4, #12]
 802b2ac:	bd10      	pop	{r4, pc}

0802b2ae <__swrite>:
 802b2ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b2b2:	461f      	mov	r7, r3
 802b2b4:	898b      	ldrh	r3, [r1, #12]
 802b2b6:	05db      	lsls	r3, r3, #23
 802b2b8:	4605      	mov	r5, r0
 802b2ba:	460c      	mov	r4, r1
 802b2bc:	4616      	mov	r6, r2
 802b2be:	d505      	bpl.n	802b2cc <__swrite+0x1e>
 802b2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2c4:	2302      	movs	r3, #2
 802b2c6:	2200      	movs	r2, #0
 802b2c8:	f000 f8c2 	bl	802b450 <_lseek_r>
 802b2cc:	89a3      	ldrh	r3, [r4, #12]
 802b2ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b2d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b2d6:	81a3      	strh	r3, [r4, #12]
 802b2d8:	4632      	mov	r2, r6
 802b2da:	463b      	mov	r3, r7
 802b2dc:	4628      	mov	r0, r5
 802b2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b2e2:	f000 b8fd 	b.w	802b4e0 <_write_r>

0802b2e6 <__sseek>:
 802b2e6:	b510      	push	{r4, lr}
 802b2e8:	460c      	mov	r4, r1
 802b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2ee:	f000 f8af 	bl	802b450 <_lseek_r>
 802b2f2:	1c43      	adds	r3, r0, #1
 802b2f4:	89a3      	ldrh	r3, [r4, #12]
 802b2f6:	bf15      	itete	ne
 802b2f8:	6560      	strne	r0, [r4, #84]	; 0x54
 802b2fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b2fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b302:	81a3      	strheq	r3, [r4, #12]
 802b304:	bf18      	it	ne
 802b306:	81a3      	strhne	r3, [r4, #12]
 802b308:	bd10      	pop	{r4, pc}

0802b30a <__sclose>:
 802b30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b30e:	f000 b839 	b.w	802b384 <_close_r>

0802b312 <memset>:
 802b312:	4402      	add	r2, r0
 802b314:	4603      	mov	r3, r0
 802b316:	4293      	cmp	r3, r2
 802b318:	d100      	bne.n	802b31c <memset+0xa>
 802b31a:	4770      	bx	lr
 802b31c:	f803 1b01 	strb.w	r1, [r3], #1
 802b320:	e7f9      	b.n	802b316 <memset+0x4>

0802b322 <_raise_r>:
 802b322:	291f      	cmp	r1, #31
 802b324:	b538      	push	{r3, r4, r5, lr}
 802b326:	4604      	mov	r4, r0
 802b328:	460d      	mov	r5, r1
 802b32a:	d904      	bls.n	802b336 <_raise_r+0x14>
 802b32c:	2316      	movs	r3, #22
 802b32e:	6003      	str	r3, [r0, #0]
 802b330:	f04f 30ff 	mov.w	r0, #4294967295
 802b334:	bd38      	pop	{r3, r4, r5, pc}
 802b336:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802b338:	b112      	cbz	r2, 802b340 <_raise_r+0x1e>
 802b33a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b33e:	b94b      	cbnz	r3, 802b354 <_raise_r+0x32>
 802b340:	4620      	mov	r0, r4
 802b342:	f000 f8bb 	bl	802b4bc <_getpid_r>
 802b346:	462a      	mov	r2, r5
 802b348:	4601      	mov	r1, r0
 802b34a:	4620      	mov	r0, r4
 802b34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b350:	f000 b8a2 	b.w	802b498 <_kill_r>
 802b354:	2b01      	cmp	r3, #1
 802b356:	d00a      	beq.n	802b36e <_raise_r+0x4c>
 802b358:	1c59      	adds	r1, r3, #1
 802b35a:	d103      	bne.n	802b364 <_raise_r+0x42>
 802b35c:	2316      	movs	r3, #22
 802b35e:	6003      	str	r3, [r0, #0]
 802b360:	2001      	movs	r0, #1
 802b362:	e7e7      	b.n	802b334 <_raise_r+0x12>
 802b364:	2400      	movs	r4, #0
 802b366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802b36a:	4628      	mov	r0, r5
 802b36c:	4798      	blx	r3
 802b36e:	2000      	movs	r0, #0
 802b370:	e7e0      	b.n	802b334 <_raise_r+0x12>
	...

0802b374 <raise>:
 802b374:	4b02      	ldr	r3, [pc, #8]	; (802b380 <raise+0xc>)
 802b376:	4601      	mov	r1, r0
 802b378:	6818      	ldr	r0, [r3, #0]
 802b37a:	f7ff bfd2 	b.w	802b322 <_raise_r>
 802b37e:	bf00      	nop
 802b380:	24000124 	.word	0x24000124

0802b384 <_close_r>:
 802b384:	b538      	push	{r3, r4, r5, lr}
 802b386:	4d06      	ldr	r5, [pc, #24]	; (802b3a0 <_close_r+0x1c>)
 802b388:	2300      	movs	r3, #0
 802b38a:	4604      	mov	r4, r0
 802b38c:	4608      	mov	r0, r1
 802b38e:	602b      	str	r3, [r5, #0]
 802b390:	f7d6 fa1b 	bl	80017ca <_close>
 802b394:	1c43      	adds	r3, r0, #1
 802b396:	d102      	bne.n	802b39e <_close_r+0x1a>
 802b398:	682b      	ldr	r3, [r5, #0]
 802b39a:	b103      	cbz	r3, 802b39e <_close_r+0x1a>
 802b39c:	6023      	str	r3, [r4, #0]
 802b39e:	bd38      	pop	{r3, r4, r5, pc}
 802b3a0:	2400bb0c 	.word	0x2400bb0c

0802b3a4 <_reclaim_reent>:
 802b3a4:	4b29      	ldr	r3, [pc, #164]	; (802b44c <_reclaim_reent+0xa8>)
 802b3a6:	681b      	ldr	r3, [r3, #0]
 802b3a8:	4283      	cmp	r3, r0
 802b3aa:	b570      	push	{r4, r5, r6, lr}
 802b3ac:	4604      	mov	r4, r0
 802b3ae:	d04b      	beq.n	802b448 <_reclaim_reent+0xa4>
 802b3b0:	69c3      	ldr	r3, [r0, #28]
 802b3b2:	b143      	cbz	r3, 802b3c6 <_reclaim_reent+0x22>
 802b3b4:	68db      	ldr	r3, [r3, #12]
 802b3b6:	2b00      	cmp	r3, #0
 802b3b8:	d144      	bne.n	802b444 <_reclaim_reent+0xa0>
 802b3ba:	69e3      	ldr	r3, [r4, #28]
 802b3bc:	6819      	ldr	r1, [r3, #0]
 802b3be:	b111      	cbz	r1, 802b3c6 <_reclaim_reent+0x22>
 802b3c0:	4620      	mov	r0, r4
 802b3c2:	f000 f939 	bl	802b638 <_free_r>
 802b3c6:	6961      	ldr	r1, [r4, #20]
 802b3c8:	b111      	cbz	r1, 802b3d0 <_reclaim_reent+0x2c>
 802b3ca:	4620      	mov	r0, r4
 802b3cc:	f000 f934 	bl	802b638 <_free_r>
 802b3d0:	69e1      	ldr	r1, [r4, #28]
 802b3d2:	b111      	cbz	r1, 802b3da <_reclaim_reent+0x36>
 802b3d4:	4620      	mov	r0, r4
 802b3d6:	f000 f92f 	bl	802b638 <_free_r>
 802b3da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802b3dc:	b111      	cbz	r1, 802b3e4 <_reclaim_reent+0x40>
 802b3de:	4620      	mov	r0, r4
 802b3e0:	f000 f92a 	bl	802b638 <_free_r>
 802b3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b3e6:	b111      	cbz	r1, 802b3ee <_reclaim_reent+0x4a>
 802b3e8:	4620      	mov	r0, r4
 802b3ea:	f000 f925 	bl	802b638 <_free_r>
 802b3ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802b3f0:	b111      	cbz	r1, 802b3f8 <_reclaim_reent+0x54>
 802b3f2:	4620      	mov	r0, r4
 802b3f4:	f000 f920 	bl	802b638 <_free_r>
 802b3f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802b3fa:	b111      	cbz	r1, 802b402 <_reclaim_reent+0x5e>
 802b3fc:	4620      	mov	r0, r4
 802b3fe:	f000 f91b 	bl	802b638 <_free_r>
 802b402:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802b404:	b111      	cbz	r1, 802b40c <_reclaim_reent+0x68>
 802b406:	4620      	mov	r0, r4
 802b408:	f000 f916 	bl	802b638 <_free_r>
 802b40c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802b40e:	b111      	cbz	r1, 802b416 <_reclaim_reent+0x72>
 802b410:	4620      	mov	r0, r4
 802b412:	f000 f911 	bl	802b638 <_free_r>
 802b416:	6a23      	ldr	r3, [r4, #32]
 802b418:	b1b3      	cbz	r3, 802b448 <_reclaim_reent+0xa4>
 802b41a:	4620      	mov	r0, r4
 802b41c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b420:	4718      	bx	r3
 802b422:	5949      	ldr	r1, [r1, r5]
 802b424:	b941      	cbnz	r1, 802b438 <_reclaim_reent+0x94>
 802b426:	3504      	adds	r5, #4
 802b428:	69e3      	ldr	r3, [r4, #28]
 802b42a:	2d80      	cmp	r5, #128	; 0x80
 802b42c:	68d9      	ldr	r1, [r3, #12]
 802b42e:	d1f8      	bne.n	802b422 <_reclaim_reent+0x7e>
 802b430:	4620      	mov	r0, r4
 802b432:	f000 f901 	bl	802b638 <_free_r>
 802b436:	e7c0      	b.n	802b3ba <_reclaim_reent+0x16>
 802b438:	680e      	ldr	r6, [r1, #0]
 802b43a:	4620      	mov	r0, r4
 802b43c:	f000 f8fc 	bl	802b638 <_free_r>
 802b440:	4631      	mov	r1, r6
 802b442:	e7ef      	b.n	802b424 <_reclaim_reent+0x80>
 802b444:	2500      	movs	r5, #0
 802b446:	e7ef      	b.n	802b428 <_reclaim_reent+0x84>
 802b448:	bd70      	pop	{r4, r5, r6, pc}
 802b44a:	bf00      	nop
 802b44c:	24000124 	.word	0x24000124

0802b450 <_lseek_r>:
 802b450:	b538      	push	{r3, r4, r5, lr}
 802b452:	4d07      	ldr	r5, [pc, #28]	; (802b470 <_lseek_r+0x20>)
 802b454:	4604      	mov	r4, r0
 802b456:	4608      	mov	r0, r1
 802b458:	4611      	mov	r1, r2
 802b45a:	2200      	movs	r2, #0
 802b45c:	602a      	str	r2, [r5, #0]
 802b45e:	461a      	mov	r2, r3
 802b460:	f7d6 f9da 	bl	8001818 <_lseek>
 802b464:	1c43      	adds	r3, r0, #1
 802b466:	d102      	bne.n	802b46e <_lseek_r+0x1e>
 802b468:	682b      	ldr	r3, [r5, #0]
 802b46a:	b103      	cbz	r3, 802b46e <_lseek_r+0x1e>
 802b46c:	6023      	str	r3, [r4, #0]
 802b46e:	bd38      	pop	{r3, r4, r5, pc}
 802b470:	2400bb0c 	.word	0x2400bb0c

0802b474 <_read_r>:
 802b474:	b538      	push	{r3, r4, r5, lr}
 802b476:	4d07      	ldr	r5, [pc, #28]	; (802b494 <_read_r+0x20>)
 802b478:	4604      	mov	r4, r0
 802b47a:	4608      	mov	r0, r1
 802b47c:	4611      	mov	r1, r2
 802b47e:	2200      	movs	r2, #0
 802b480:	602a      	str	r2, [r5, #0]
 802b482:	461a      	mov	r2, r3
 802b484:	f7d6 f968 	bl	8001758 <_read>
 802b488:	1c43      	adds	r3, r0, #1
 802b48a:	d102      	bne.n	802b492 <_read_r+0x1e>
 802b48c:	682b      	ldr	r3, [r5, #0]
 802b48e:	b103      	cbz	r3, 802b492 <_read_r+0x1e>
 802b490:	6023      	str	r3, [r4, #0]
 802b492:	bd38      	pop	{r3, r4, r5, pc}
 802b494:	2400bb0c 	.word	0x2400bb0c

0802b498 <_kill_r>:
 802b498:	b538      	push	{r3, r4, r5, lr}
 802b49a:	4d07      	ldr	r5, [pc, #28]	; (802b4b8 <_kill_r+0x20>)
 802b49c:	2300      	movs	r3, #0
 802b49e:	4604      	mov	r4, r0
 802b4a0:	4608      	mov	r0, r1
 802b4a2:	4611      	mov	r1, r2
 802b4a4:	602b      	str	r3, [r5, #0]
 802b4a6:	f7d6 f93d 	bl	8001724 <_kill>
 802b4aa:	1c43      	adds	r3, r0, #1
 802b4ac:	d102      	bne.n	802b4b4 <_kill_r+0x1c>
 802b4ae:	682b      	ldr	r3, [r5, #0]
 802b4b0:	b103      	cbz	r3, 802b4b4 <_kill_r+0x1c>
 802b4b2:	6023      	str	r3, [r4, #0]
 802b4b4:	bd38      	pop	{r3, r4, r5, pc}
 802b4b6:	bf00      	nop
 802b4b8:	2400bb0c 	.word	0x2400bb0c

0802b4bc <_getpid_r>:
 802b4bc:	f7d6 b92a 	b.w	8001714 <_getpid>

0802b4c0 <_sbrk_r>:
 802b4c0:	b538      	push	{r3, r4, r5, lr}
 802b4c2:	4d06      	ldr	r5, [pc, #24]	; (802b4dc <_sbrk_r+0x1c>)
 802b4c4:	2300      	movs	r3, #0
 802b4c6:	4604      	mov	r4, r0
 802b4c8:	4608      	mov	r0, r1
 802b4ca:	602b      	str	r3, [r5, #0]
 802b4cc:	f7d6 f9b2 	bl	8001834 <_sbrk>
 802b4d0:	1c43      	adds	r3, r0, #1
 802b4d2:	d102      	bne.n	802b4da <_sbrk_r+0x1a>
 802b4d4:	682b      	ldr	r3, [r5, #0]
 802b4d6:	b103      	cbz	r3, 802b4da <_sbrk_r+0x1a>
 802b4d8:	6023      	str	r3, [r4, #0]
 802b4da:	bd38      	pop	{r3, r4, r5, pc}
 802b4dc:	2400bb0c 	.word	0x2400bb0c

0802b4e0 <_write_r>:
 802b4e0:	b538      	push	{r3, r4, r5, lr}
 802b4e2:	4d07      	ldr	r5, [pc, #28]	; (802b500 <_write_r+0x20>)
 802b4e4:	4604      	mov	r4, r0
 802b4e6:	4608      	mov	r0, r1
 802b4e8:	4611      	mov	r1, r2
 802b4ea:	2200      	movs	r2, #0
 802b4ec:	602a      	str	r2, [r5, #0]
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	f7d6 f94f 	bl	8001792 <_write>
 802b4f4:	1c43      	adds	r3, r0, #1
 802b4f6:	d102      	bne.n	802b4fe <_write_r+0x1e>
 802b4f8:	682b      	ldr	r3, [r5, #0]
 802b4fa:	b103      	cbz	r3, 802b4fe <_write_r+0x1e>
 802b4fc:	6023      	str	r3, [r4, #0]
 802b4fe:	bd38      	pop	{r3, r4, r5, pc}
 802b500:	2400bb0c 	.word	0x2400bb0c

0802b504 <__errno>:
 802b504:	4b01      	ldr	r3, [pc, #4]	; (802b50c <__errno+0x8>)
 802b506:	6818      	ldr	r0, [r3, #0]
 802b508:	4770      	bx	lr
 802b50a:	bf00      	nop
 802b50c:	24000124 	.word	0x24000124

0802b510 <__libc_init_array>:
 802b510:	b570      	push	{r4, r5, r6, lr}
 802b512:	4d0d      	ldr	r5, [pc, #52]	; (802b548 <__libc_init_array+0x38>)
 802b514:	4c0d      	ldr	r4, [pc, #52]	; (802b54c <__libc_init_array+0x3c>)
 802b516:	1b64      	subs	r4, r4, r5
 802b518:	10a4      	asrs	r4, r4, #2
 802b51a:	2600      	movs	r6, #0
 802b51c:	42a6      	cmp	r6, r4
 802b51e:	d109      	bne.n	802b534 <__libc_init_array+0x24>
 802b520:	4d0b      	ldr	r5, [pc, #44]	; (802b550 <__libc_init_array+0x40>)
 802b522:	4c0c      	ldr	r4, [pc, #48]	; (802b554 <__libc_init_array+0x44>)
 802b524:	f000 fd70 	bl	802c008 <_init>
 802b528:	1b64      	subs	r4, r4, r5
 802b52a:	10a4      	asrs	r4, r4, #2
 802b52c:	2600      	movs	r6, #0
 802b52e:	42a6      	cmp	r6, r4
 802b530:	d105      	bne.n	802b53e <__libc_init_array+0x2e>
 802b532:	bd70      	pop	{r4, r5, r6, pc}
 802b534:	f855 3b04 	ldr.w	r3, [r5], #4
 802b538:	4798      	blx	r3
 802b53a:	3601      	adds	r6, #1
 802b53c:	e7ee      	b.n	802b51c <__libc_init_array+0xc>
 802b53e:	f855 3b04 	ldr.w	r3, [r5], #4
 802b542:	4798      	blx	r3
 802b544:	3601      	adds	r6, #1
 802b546:	e7f2      	b.n	802b52e <__libc_init_array+0x1e>
 802b548:	08030a00 	.word	0x08030a00
 802b54c:	08030a00 	.word	0x08030a00
 802b550:	08030a00 	.word	0x08030a00
 802b554:	08030a14 	.word	0x08030a14

0802b558 <__retarget_lock_init_recursive>:
 802b558:	4770      	bx	lr

0802b55a <__retarget_lock_acquire_recursive>:
 802b55a:	4770      	bx	lr

0802b55c <__retarget_lock_release_recursive>:
 802b55c:	4770      	bx	lr

0802b55e <memcpy>:
 802b55e:	440a      	add	r2, r1
 802b560:	4291      	cmp	r1, r2
 802b562:	f100 33ff 	add.w	r3, r0, #4294967295
 802b566:	d100      	bne.n	802b56a <memcpy+0xc>
 802b568:	4770      	bx	lr
 802b56a:	b510      	push	{r4, lr}
 802b56c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b570:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b574:	4291      	cmp	r1, r2
 802b576:	d1f9      	bne.n	802b56c <memcpy+0xe>
 802b578:	bd10      	pop	{r4, pc}
	...

0802b57c <__register_exitproc>:
 802b57c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b580:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 802b634 <__register_exitproc+0xb8>
 802b584:	4606      	mov	r6, r0
 802b586:	f8d8 0000 	ldr.w	r0, [r8]
 802b58a:	461f      	mov	r7, r3
 802b58c:	460d      	mov	r5, r1
 802b58e:	4691      	mov	r9, r2
 802b590:	f7ff ffe3 	bl	802b55a <__retarget_lock_acquire_recursive>
 802b594:	4b23      	ldr	r3, [pc, #140]	; (802b624 <__register_exitproc+0xa8>)
 802b596:	681c      	ldr	r4, [r3, #0]
 802b598:	b934      	cbnz	r4, 802b5a8 <__register_exitproc+0x2c>
 802b59a:	4c23      	ldr	r4, [pc, #140]	; (802b628 <__register_exitproc+0xac>)
 802b59c:	601c      	str	r4, [r3, #0]
 802b59e:	4b23      	ldr	r3, [pc, #140]	; (802b62c <__register_exitproc+0xb0>)
 802b5a0:	b113      	cbz	r3, 802b5a8 <__register_exitproc+0x2c>
 802b5a2:	681b      	ldr	r3, [r3, #0]
 802b5a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802b5a8:	6863      	ldr	r3, [r4, #4]
 802b5aa:	2b1f      	cmp	r3, #31
 802b5ac:	dd07      	ble.n	802b5be <__register_exitproc+0x42>
 802b5ae:	f8d8 0000 	ldr.w	r0, [r8]
 802b5b2:	f7ff ffd3 	bl	802b55c <__retarget_lock_release_recursive>
 802b5b6:	f04f 30ff 	mov.w	r0, #4294967295
 802b5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b5be:	b32e      	cbz	r6, 802b60c <__register_exitproc+0x90>
 802b5c0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802b5c4:	b968      	cbnz	r0, 802b5e2 <__register_exitproc+0x66>
 802b5c6:	4b1a      	ldr	r3, [pc, #104]	; (802b630 <__register_exitproc+0xb4>)
 802b5c8:	2b00      	cmp	r3, #0
 802b5ca:	d0f0      	beq.n	802b5ae <__register_exitproc+0x32>
 802b5cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 802b5d0:	f7ff fcbe 	bl	802af50 <malloc>
 802b5d4:	2800      	cmp	r0, #0
 802b5d6:	d0ea      	beq.n	802b5ae <__register_exitproc+0x32>
 802b5d8:	2300      	movs	r3, #0
 802b5da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802b5de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802b5e2:	6863      	ldr	r3, [r4, #4]
 802b5e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b5e8:	2201      	movs	r2, #1
 802b5ea:	409a      	lsls	r2, r3
 802b5ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b5f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802b5f4:	4313      	orrs	r3, r2
 802b5f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802b5fa:	2e02      	cmp	r6, #2
 802b5fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802b600:	bf02      	ittt	eq
 802b602:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802b606:	4313      	orreq	r3, r2
 802b608:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802b60c:	6863      	ldr	r3, [r4, #4]
 802b60e:	f8d8 0000 	ldr.w	r0, [r8]
 802b612:	1c5a      	adds	r2, r3, #1
 802b614:	3302      	adds	r3, #2
 802b616:	6062      	str	r2, [r4, #4]
 802b618:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802b61c:	f7ff ff9e 	bl	802b55c <__retarget_lock_release_recursive>
 802b620:	2000      	movs	r0, #0
 802b622:	e7ca      	b.n	802b5ba <__register_exitproc+0x3e>
 802b624:	2400bba0 	.word	0x2400bba0
 802b628:	2400bb14 	.word	0x2400bb14
 802b62c:	080309a0 	.word	0x080309a0
 802b630:	0802af51 	.word	0x0802af51
 802b634:	24000128 	.word	0x24000128

0802b638 <_free_r>:
 802b638:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802b63a:	2900      	cmp	r1, #0
 802b63c:	d044      	beq.n	802b6c8 <_free_r+0x90>
 802b63e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b642:	9001      	str	r0, [sp, #4]
 802b644:	2b00      	cmp	r3, #0
 802b646:	f1a1 0404 	sub.w	r4, r1, #4
 802b64a:	bfb8      	it	lt
 802b64c:	18e4      	addlt	r4, r4, r3
 802b64e:	f7ff fd2f 	bl	802b0b0 <__malloc_lock>
 802b652:	4a1e      	ldr	r2, [pc, #120]	; (802b6cc <_free_r+0x94>)
 802b654:	9801      	ldr	r0, [sp, #4]
 802b656:	6813      	ldr	r3, [r2, #0]
 802b658:	b933      	cbnz	r3, 802b668 <_free_r+0x30>
 802b65a:	6063      	str	r3, [r4, #4]
 802b65c:	6014      	str	r4, [r2, #0]
 802b65e:	b003      	add	sp, #12
 802b660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802b664:	f7ff bd2a 	b.w	802b0bc <__malloc_unlock>
 802b668:	42a3      	cmp	r3, r4
 802b66a:	d908      	bls.n	802b67e <_free_r+0x46>
 802b66c:	6825      	ldr	r5, [r4, #0]
 802b66e:	1961      	adds	r1, r4, r5
 802b670:	428b      	cmp	r3, r1
 802b672:	bf01      	itttt	eq
 802b674:	6819      	ldreq	r1, [r3, #0]
 802b676:	685b      	ldreq	r3, [r3, #4]
 802b678:	1949      	addeq	r1, r1, r5
 802b67a:	6021      	streq	r1, [r4, #0]
 802b67c:	e7ed      	b.n	802b65a <_free_r+0x22>
 802b67e:	461a      	mov	r2, r3
 802b680:	685b      	ldr	r3, [r3, #4]
 802b682:	b10b      	cbz	r3, 802b688 <_free_r+0x50>
 802b684:	42a3      	cmp	r3, r4
 802b686:	d9fa      	bls.n	802b67e <_free_r+0x46>
 802b688:	6811      	ldr	r1, [r2, #0]
 802b68a:	1855      	adds	r5, r2, r1
 802b68c:	42a5      	cmp	r5, r4
 802b68e:	d10b      	bne.n	802b6a8 <_free_r+0x70>
 802b690:	6824      	ldr	r4, [r4, #0]
 802b692:	4421      	add	r1, r4
 802b694:	1854      	adds	r4, r2, r1
 802b696:	42a3      	cmp	r3, r4
 802b698:	6011      	str	r1, [r2, #0]
 802b69a:	d1e0      	bne.n	802b65e <_free_r+0x26>
 802b69c:	681c      	ldr	r4, [r3, #0]
 802b69e:	685b      	ldr	r3, [r3, #4]
 802b6a0:	6053      	str	r3, [r2, #4]
 802b6a2:	440c      	add	r4, r1
 802b6a4:	6014      	str	r4, [r2, #0]
 802b6a6:	e7da      	b.n	802b65e <_free_r+0x26>
 802b6a8:	d902      	bls.n	802b6b0 <_free_r+0x78>
 802b6aa:	230c      	movs	r3, #12
 802b6ac:	6003      	str	r3, [r0, #0]
 802b6ae:	e7d6      	b.n	802b65e <_free_r+0x26>
 802b6b0:	6825      	ldr	r5, [r4, #0]
 802b6b2:	1961      	adds	r1, r4, r5
 802b6b4:	428b      	cmp	r3, r1
 802b6b6:	bf04      	itt	eq
 802b6b8:	6819      	ldreq	r1, [r3, #0]
 802b6ba:	685b      	ldreq	r3, [r3, #4]
 802b6bc:	6063      	str	r3, [r4, #4]
 802b6be:	bf04      	itt	eq
 802b6c0:	1949      	addeq	r1, r1, r5
 802b6c2:	6021      	streq	r1, [r4, #0]
 802b6c4:	6054      	str	r4, [r2, #4]
 802b6c6:	e7ca      	b.n	802b65e <_free_r+0x26>
 802b6c8:	b003      	add	sp, #12
 802b6ca:	bd30      	pop	{r4, r5, pc}
 802b6cc:	2400b9c8 	.word	0x2400b9c8

0802b6d0 <__sfputc_r>:
 802b6d0:	6893      	ldr	r3, [r2, #8]
 802b6d2:	3b01      	subs	r3, #1
 802b6d4:	2b00      	cmp	r3, #0
 802b6d6:	b410      	push	{r4}
 802b6d8:	6093      	str	r3, [r2, #8]
 802b6da:	da08      	bge.n	802b6ee <__sfputc_r+0x1e>
 802b6dc:	6994      	ldr	r4, [r2, #24]
 802b6de:	42a3      	cmp	r3, r4
 802b6e0:	db01      	blt.n	802b6e6 <__sfputc_r+0x16>
 802b6e2:	290a      	cmp	r1, #10
 802b6e4:	d103      	bne.n	802b6ee <__sfputc_r+0x1e>
 802b6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b6ea:	f000 bb73 	b.w	802bdd4 <__swbuf_r>
 802b6ee:	6813      	ldr	r3, [r2, #0]
 802b6f0:	1c58      	adds	r0, r3, #1
 802b6f2:	6010      	str	r0, [r2, #0]
 802b6f4:	7019      	strb	r1, [r3, #0]
 802b6f6:	4608      	mov	r0, r1
 802b6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b6fc:	4770      	bx	lr

0802b6fe <__sfputs_r>:
 802b6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b700:	4606      	mov	r6, r0
 802b702:	460f      	mov	r7, r1
 802b704:	4614      	mov	r4, r2
 802b706:	18d5      	adds	r5, r2, r3
 802b708:	42ac      	cmp	r4, r5
 802b70a:	d101      	bne.n	802b710 <__sfputs_r+0x12>
 802b70c:	2000      	movs	r0, #0
 802b70e:	e007      	b.n	802b720 <__sfputs_r+0x22>
 802b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b714:	463a      	mov	r2, r7
 802b716:	4630      	mov	r0, r6
 802b718:	f7ff ffda 	bl	802b6d0 <__sfputc_r>
 802b71c:	1c43      	adds	r3, r0, #1
 802b71e:	d1f3      	bne.n	802b708 <__sfputs_r+0xa>
 802b720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b724 <_vfiprintf_r>:
 802b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b728:	460d      	mov	r5, r1
 802b72a:	b09d      	sub	sp, #116	; 0x74
 802b72c:	4614      	mov	r4, r2
 802b72e:	4698      	mov	r8, r3
 802b730:	4606      	mov	r6, r0
 802b732:	b118      	cbz	r0, 802b73c <_vfiprintf_r+0x18>
 802b734:	6a03      	ldr	r3, [r0, #32]
 802b736:	b90b      	cbnz	r3, 802b73c <_vfiprintf_r+0x18>
 802b738:	f7ff fd60 	bl	802b1fc <__sinit>
 802b73c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b73e:	07d9      	lsls	r1, r3, #31
 802b740:	d405      	bmi.n	802b74e <_vfiprintf_r+0x2a>
 802b742:	89ab      	ldrh	r3, [r5, #12]
 802b744:	059a      	lsls	r2, r3, #22
 802b746:	d402      	bmi.n	802b74e <_vfiprintf_r+0x2a>
 802b748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b74a:	f7ff ff06 	bl	802b55a <__retarget_lock_acquire_recursive>
 802b74e:	89ab      	ldrh	r3, [r5, #12]
 802b750:	071b      	lsls	r3, r3, #28
 802b752:	d501      	bpl.n	802b758 <_vfiprintf_r+0x34>
 802b754:	692b      	ldr	r3, [r5, #16]
 802b756:	b99b      	cbnz	r3, 802b780 <_vfiprintf_r+0x5c>
 802b758:	4629      	mov	r1, r5
 802b75a:	4630      	mov	r0, r6
 802b75c:	f000 fb78 	bl	802be50 <__swsetup_r>
 802b760:	b170      	cbz	r0, 802b780 <_vfiprintf_r+0x5c>
 802b762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b764:	07dc      	lsls	r4, r3, #31
 802b766:	d504      	bpl.n	802b772 <_vfiprintf_r+0x4e>
 802b768:	f04f 30ff 	mov.w	r0, #4294967295
 802b76c:	b01d      	add	sp, #116	; 0x74
 802b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b772:	89ab      	ldrh	r3, [r5, #12]
 802b774:	0598      	lsls	r0, r3, #22
 802b776:	d4f7      	bmi.n	802b768 <_vfiprintf_r+0x44>
 802b778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b77a:	f7ff feef 	bl	802b55c <__retarget_lock_release_recursive>
 802b77e:	e7f3      	b.n	802b768 <_vfiprintf_r+0x44>
 802b780:	2300      	movs	r3, #0
 802b782:	9309      	str	r3, [sp, #36]	; 0x24
 802b784:	2320      	movs	r3, #32
 802b786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b78a:	f8cd 800c 	str.w	r8, [sp, #12]
 802b78e:	2330      	movs	r3, #48	; 0x30
 802b790:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802b944 <_vfiprintf_r+0x220>
 802b794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b798:	f04f 0901 	mov.w	r9, #1
 802b79c:	4623      	mov	r3, r4
 802b79e:	469a      	mov	sl, r3
 802b7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b7a4:	b10a      	cbz	r2, 802b7aa <_vfiprintf_r+0x86>
 802b7a6:	2a25      	cmp	r2, #37	; 0x25
 802b7a8:	d1f9      	bne.n	802b79e <_vfiprintf_r+0x7a>
 802b7aa:	ebba 0b04 	subs.w	fp, sl, r4
 802b7ae:	d00b      	beq.n	802b7c8 <_vfiprintf_r+0xa4>
 802b7b0:	465b      	mov	r3, fp
 802b7b2:	4622      	mov	r2, r4
 802b7b4:	4629      	mov	r1, r5
 802b7b6:	4630      	mov	r0, r6
 802b7b8:	f7ff ffa1 	bl	802b6fe <__sfputs_r>
 802b7bc:	3001      	adds	r0, #1
 802b7be:	f000 80a9 	beq.w	802b914 <_vfiprintf_r+0x1f0>
 802b7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b7c4:	445a      	add	r2, fp
 802b7c6:	9209      	str	r2, [sp, #36]	; 0x24
 802b7c8:	f89a 3000 	ldrb.w	r3, [sl]
 802b7cc:	2b00      	cmp	r3, #0
 802b7ce:	f000 80a1 	beq.w	802b914 <_vfiprintf_r+0x1f0>
 802b7d2:	2300      	movs	r3, #0
 802b7d4:	f04f 32ff 	mov.w	r2, #4294967295
 802b7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b7dc:	f10a 0a01 	add.w	sl, sl, #1
 802b7e0:	9304      	str	r3, [sp, #16]
 802b7e2:	9307      	str	r3, [sp, #28]
 802b7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b7e8:	931a      	str	r3, [sp, #104]	; 0x68
 802b7ea:	4654      	mov	r4, sl
 802b7ec:	2205      	movs	r2, #5
 802b7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b7f2:	4854      	ldr	r0, [pc, #336]	; (802b944 <_vfiprintf_r+0x220>)
 802b7f4:	f7d4 fd74 	bl	80002e0 <memchr>
 802b7f8:	9a04      	ldr	r2, [sp, #16]
 802b7fa:	b9d8      	cbnz	r0, 802b834 <_vfiprintf_r+0x110>
 802b7fc:	06d1      	lsls	r1, r2, #27
 802b7fe:	bf44      	itt	mi
 802b800:	2320      	movmi	r3, #32
 802b802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b806:	0713      	lsls	r3, r2, #28
 802b808:	bf44      	itt	mi
 802b80a:	232b      	movmi	r3, #43	; 0x2b
 802b80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b810:	f89a 3000 	ldrb.w	r3, [sl]
 802b814:	2b2a      	cmp	r3, #42	; 0x2a
 802b816:	d015      	beq.n	802b844 <_vfiprintf_r+0x120>
 802b818:	9a07      	ldr	r2, [sp, #28]
 802b81a:	4654      	mov	r4, sl
 802b81c:	2000      	movs	r0, #0
 802b81e:	f04f 0c0a 	mov.w	ip, #10
 802b822:	4621      	mov	r1, r4
 802b824:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b828:	3b30      	subs	r3, #48	; 0x30
 802b82a:	2b09      	cmp	r3, #9
 802b82c:	d94d      	bls.n	802b8ca <_vfiprintf_r+0x1a6>
 802b82e:	b1b0      	cbz	r0, 802b85e <_vfiprintf_r+0x13a>
 802b830:	9207      	str	r2, [sp, #28]
 802b832:	e014      	b.n	802b85e <_vfiprintf_r+0x13a>
 802b834:	eba0 0308 	sub.w	r3, r0, r8
 802b838:	fa09 f303 	lsl.w	r3, r9, r3
 802b83c:	4313      	orrs	r3, r2
 802b83e:	9304      	str	r3, [sp, #16]
 802b840:	46a2      	mov	sl, r4
 802b842:	e7d2      	b.n	802b7ea <_vfiprintf_r+0xc6>
 802b844:	9b03      	ldr	r3, [sp, #12]
 802b846:	1d19      	adds	r1, r3, #4
 802b848:	681b      	ldr	r3, [r3, #0]
 802b84a:	9103      	str	r1, [sp, #12]
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	bfbb      	ittet	lt
 802b850:	425b      	neglt	r3, r3
 802b852:	f042 0202 	orrlt.w	r2, r2, #2
 802b856:	9307      	strge	r3, [sp, #28]
 802b858:	9307      	strlt	r3, [sp, #28]
 802b85a:	bfb8      	it	lt
 802b85c:	9204      	strlt	r2, [sp, #16]
 802b85e:	7823      	ldrb	r3, [r4, #0]
 802b860:	2b2e      	cmp	r3, #46	; 0x2e
 802b862:	d10c      	bne.n	802b87e <_vfiprintf_r+0x15a>
 802b864:	7863      	ldrb	r3, [r4, #1]
 802b866:	2b2a      	cmp	r3, #42	; 0x2a
 802b868:	d134      	bne.n	802b8d4 <_vfiprintf_r+0x1b0>
 802b86a:	9b03      	ldr	r3, [sp, #12]
 802b86c:	1d1a      	adds	r2, r3, #4
 802b86e:	681b      	ldr	r3, [r3, #0]
 802b870:	9203      	str	r2, [sp, #12]
 802b872:	2b00      	cmp	r3, #0
 802b874:	bfb8      	it	lt
 802b876:	f04f 33ff 	movlt.w	r3, #4294967295
 802b87a:	3402      	adds	r4, #2
 802b87c:	9305      	str	r3, [sp, #20]
 802b87e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802b954 <_vfiprintf_r+0x230>
 802b882:	7821      	ldrb	r1, [r4, #0]
 802b884:	2203      	movs	r2, #3
 802b886:	4650      	mov	r0, sl
 802b888:	f7d4 fd2a 	bl	80002e0 <memchr>
 802b88c:	b138      	cbz	r0, 802b89e <_vfiprintf_r+0x17a>
 802b88e:	9b04      	ldr	r3, [sp, #16]
 802b890:	eba0 000a 	sub.w	r0, r0, sl
 802b894:	2240      	movs	r2, #64	; 0x40
 802b896:	4082      	lsls	r2, r0
 802b898:	4313      	orrs	r3, r2
 802b89a:	3401      	adds	r4, #1
 802b89c:	9304      	str	r3, [sp, #16]
 802b89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b8a2:	4829      	ldr	r0, [pc, #164]	; (802b948 <_vfiprintf_r+0x224>)
 802b8a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b8a8:	2206      	movs	r2, #6
 802b8aa:	f7d4 fd19 	bl	80002e0 <memchr>
 802b8ae:	2800      	cmp	r0, #0
 802b8b0:	d03f      	beq.n	802b932 <_vfiprintf_r+0x20e>
 802b8b2:	4b26      	ldr	r3, [pc, #152]	; (802b94c <_vfiprintf_r+0x228>)
 802b8b4:	bb1b      	cbnz	r3, 802b8fe <_vfiprintf_r+0x1da>
 802b8b6:	9b03      	ldr	r3, [sp, #12]
 802b8b8:	3307      	adds	r3, #7
 802b8ba:	f023 0307 	bic.w	r3, r3, #7
 802b8be:	3308      	adds	r3, #8
 802b8c0:	9303      	str	r3, [sp, #12]
 802b8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b8c4:	443b      	add	r3, r7
 802b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 802b8c8:	e768      	b.n	802b79c <_vfiprintf_r+0x78>
 802b8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 802b8ce:	460c      	mov	r4, r1
 802b8d0:	2001      	movs	r0, #1
 802b8d2:	e7a6      	b.n	802b822 <_vfiprintf_r+0xfe>
 802b8d4:	2300      	movs	r3, #0
 802b8d6:	3401      	adds	r4, #1
 802b8d8:	9305      	str	r3, [sp, #20]
 802b8da:	4619      	mov	r1, r3
 802b8dc:	f04f 0c0a 	mov.w	ip, #10
 802b8e0:	4620      	mov	r0, r4
 802b8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b8e6:	3a30      	subs	r2, #48	; 0x30
 802b8e8:	2a09      	cmp	r2, #9
 802b8ea:	d903      	bls.n	802b8f4 <_vfiprintf_r+0x1d0>
 802b8ec:	2b00      	cmp	r3, #0
 802b8ee:	d0c6      	beq.n	802b87e <_vfiprintf_r+0x15a>
 802b8f0:	9105      	str	r1, [sp, #20]
 802b8f2:	e7c4      	b.n	802b87e <_vfiprintf_r+0x15a>
 802b8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 802b8f8:	4604      	mov	r4, r0
 802b8fa:	2301      	movs	r3, #1
 802b8fc:	e7f0      	b.n	802b8e0 <_vfiprintf_r+0x1bc>
 802b8fe:	ab03      	add	r3, sp, #12
 802b900:	9300      	str	r3, [sp, #0]
 802b902:	462a      	mov	r2, r5
 802b904:	4b12      	ldr	r3, [pc, #72]	; (802b950 <_vfiprintf_r+0x22c>)
 802b906:	a904      	add	r1, sp, #16
 802b908:	4630      	mov	r0, r6
 802b90a:	f3af 8000 	nop.w
 802b90e:	4607      	mov	r7, r0
 802b910:	1c78      	adds	r0, r7, #1
 802b912:	d1d6      	bne.n	802b8c2 <_vfiprintf_r+0x19e>
 802b914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b916:	07d9      	lsls	r1, r3, #31
 802b918:	d405      	bmi.n	802b926 <_vfiprintf_r+0x202>
 802b91a:	89ab      	ldrh	r3, [r5, #12]
 802b91c:	059a      	lsls	r2, r3, #22
 802b91e:	d402      	bmi.n	802b926 <_vfiprintf_r+0x202>
 802b920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b922:	f7ff fe1b 	bl	802b55c <__retarget_lock_release_recursive>
 802b926:	89ab      	ldrh	r3, [r5, #12]
 802b928:	065b      	lsls	r3, r3, #25
 802b92a:	f53f af1d 	bmi.w	802b768 <_vfiprintf_r+0x44>
 802b92e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b930:	e71c      	b.n	802b76c <_vfiprintf_r+0x48>
 802b932:	ab03      	add	r3, sp, #12
 802b934:	9300      	str	r3, [sp, #0]
 802b936:	462a      	mov	r2, r5
 802b938:	4b05      	ldr	r3, [pc, #20]	; (802b950 <_vfiprintf_r+0x22c>)
 802b93a:	a904      	add	r1, sp, #16
 802b93c:	4630      	mov	r0, r6
 802b93e:	f000 f879 	bl	802ba34 <_printf_i>
 802b942:	e7e4      	b.n	802b90e <_vfiprintf_r+0x1ea>
 802b944:	080309a4 	.word	0x080309a4
 802b948:	080309ae 	.word	0x080309ae
 802b94c:	00000000 	.word	0x00000000
 802b950:	0802b6ff 	.word	0x0802b6ff
 802b954:	080309aa 	.word	0x080309aa

0802b958 <_printf_common>:
 802b958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b95c:	4616      	mov	r6, r2
 802b95e:	4699      	mov	r9, r3
 802b960:	688a      	ldr	r2, [r1, #8]
 802b962:	690b      	ldr	r3, [r1, #16]
 802b964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802b968:	4293      	cmp	r3, r2
 802b96a:	bfb8      	it	lt
 802b96c:	4613      	movlt	r3, r2
 802b96e:	6033      	str	r3, [r6, #0]
 802b970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802b974:	4607      	mov	r7, r0
 802b976:	460c      	mov	r4, r1
 802b978:	b10a      	cbz	r2, 802b97e <_printf_common+0x26>
 802b97a:	3301      	adds	r3, #1
 802b97c:	6033      	str	r3, [r6, #0]
 802b97e:	6823      	ldr	r3, [r4, #0]
 802b980:	0699      	lsls	r1, r3, #26
 802b982:	bf42      	ittt	mi
 802b984:	6833      	ldrmi	r3, [r6, #0]
 802b986:	3302      	addmi	r3, #2
 802b988:	6033      	strmi	r3, [r6, #0]
 802b98a:	6825      	ldr	r5, [r4, #0]
 802b98c:	f015 0506 	ands.w	r5, r5, #6
 802b990:	d106      	bne.n	802b9a0 <_printf_common+0x48>
 802b992:	f104 0a19 	add.w	sl, r4, #25
 802b996:	68e3      	ldr	r3, [r4, #12]
 802b998:	6832      	ldr	r2, [r6, #0]
 802b99a:	1a9b      	subs	r3, r3, r2
 802b99c:	42ab      	cmp	r3, r5
 802b99e:	dc26      	bgt.n	802b9ee <_printf_common+0x96>
 802b9a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802b9a4:	1e13      	subs	r3, r2, #0
 802b9a6:	6822      	ldr	r2, [r4, #0]
 802b9a8:	bf18      	it	ne
 802b9aa:	2301      	movne	r3, #1
 802b9ac:	0692      	lsls	r2, r2, #26
 802b9ae:	d42b      	bmi.n	802ba08 <_printf_common+0xb0>
 802b9b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802b9b4:	4649      	mov	r1, r9
 802b9b6:	4638      	mov	r0, r7
 802b9b8:	47c0      	blx	r8
 802b9ba:	3001      	adds	r0, #1
 802b9bc:	d01e      	beq.n	802b9fc <_printf_common+0xa4>
 802b9be:	6823      	ldr	r3, [r4, #0]
 802b9c0:	6922      	ldr	r2, [r4, #16]
 802b9c2:	f003 0306 	and.w	r3, r3, #6
 802b9c6:	2b04      	cmp	r3, #4
 802b9c8:	bf02      	ittt	eq
 802b9ca:	68e5      	ldreq	r5, [r4, #12]
 802b9cc:	6833      	ldreq	r3, [r6, #0]
 802b9ce:	1aed      	subeq	r5, r5, r3
 802b9d0:	68a3      	ldr	r3, [r4, #8]
 802b9d2:	bf0c      	ite	eq
 802b9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802b9d8:	2500      	movne	r5, #0
 802b9da:	4293      	cmp	r3, r2
 802b9dc:	bfc4      	itt	gt
 802b9de:	1a9b      	subgt	r3, r3, r2
 802b9e0:	18ed      	addgt	r5, r5, r3
 802b9e2:	2600      	movs	r6, #0
 802b9e4:	341a      	adds	r4, #26
 802b9e6:	42b5      	cmp	r5, r6
 802b9e8:	d11a      	bne.n	802ba20 <_printf_common+0xc8>
 802b9ea:	2000      	movs	r0, #0
 802b9ec:	e008      	b.n	802ba00 <_printf_common+0xa8>
 802b9ee:	2301      	movs	r3, #1
 802b9f0:	4652      	mov	r2, sl
 802b9f2:	4649      	mov	r1, r9
 802b9f4:	4638      	mov	r0, r7
 802b9f6:	47c0      	blx	r8
 802b9f8:	3001      	adds	r0, #1
 802b9fa:	d103      	bne.n	802ba04 <_printf_common+0xac>
 802b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 802ba00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba04:	3501      	adds	r5, #1
 802ba06:	e7c6      	b.n	802b996 <_printf_common+0x3e>
 802ba08:	18e1      	adds	r1, r4, r3
 802ba0a:	1c5a      	adds	r2, r3, #1
 802ba0c:	2030      	movs	r0, #48	; 0x30
 802ba0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ba12:	4422      	add	r2, r4
 802ba14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ba18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ba1c:	3302      	adds	r3, #2
 802ba1e:	e7c7      	b.n	802b9b0 <_printf_common+0x58>
 802ba20:	2301      	movs	r3, #1
 802ba22:	4622      	mov	r2, r4
 802ba24:	4649      	mov	r1, r9
 802ba26:	4638      	mov	r0, r7
 802ba28:	47c0      	blx	r8
 802ba2a:	3001      	adds	r0, #1
 802ba2c:	d0e6      	beq.n	802b9fc <_printf_common+0xa4>
 802ba2e:	3601      	adds	r6, #1
 802ba30:	e7d9      	b.n	802b9e6 <_printf_common+0x8e>
	...

0802ba34 <_printf_i>:
 802ba34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ba38:	7e0f      	ldrb	r7, [r1, #24]
 802ba3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802ba3c:	2f78      	cmp	r7, #120	; 0x78
 802ba3e:	4691      	mov	r9, r2
 802ba40:	4680      	mov	r8, r0
 802ba42:	460c      	mov	r4, r1
 802ba44:	469a      	mov	sl, r3
 802ba46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802ba4a:	d807      	bhi.n	802ba5c <_printf_i+0x28>
 802ba4c:	2f62      	cmp	r7, #98	; 0x62
 802ba4e:	d80a      	bhi.n	802ba66 <_printf_i+0x32>
 802ba50:	2f00      	cmp	r7, #0
 802ba52:	f000 80d4 	beq.w	802bbfe <_printf_i+0x1ca>
 802ba56:	2f58      	cmp	r7, #88	; 0x58
 802ba58:	f000 80c0 	beq.w	802bbdc <_printf_i+0x1a8>
 802ba5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ba60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802ba64:	e03a      	b.n	802badc <_printf_i+0xa8>
 802ba66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802ba6a:	2b15      	cmp	r3, #21
 802ba6c:	d8f6      	bhi.n	802ba5c <_printf_i+0x28>
 802ba6e:	a101      	add	r1, pc, #4	; (adr r1, 802ba74 <_printf_i+0x40>)
 802ba70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802ba74:	0802bacd 	.word	0x0802bacd
 802ba78:	0802bae1 	.word	0x0802bae1
 802ba7c:	0802ba5d 	.word	0x0802ba5d
 802ba80:	0802ba5d 	.word	0x0802ba5d
 802ba84:	0802ba5d 	.word	0x0802ba5d
 802ba88:	0802ba5d 	.word	0x0802ba5d
 802ba8c:	0802bae1 	.word	0x0802bae1
 802ba90:	0802ba5d 	.word	0x0802ba5d
 802ba94:	0802ba5d 	.word	0x0802ba5d
 802ba98:	0802ba5d 	.word	0x0802ba5d
 802ba9c:	0802ba5d 	.word	0x0802ba5d
 802baa0:	0802bbe5 	.word	0x0802bbe5
 802baa4:	0802bb0d 	.word	0x0802bb0d
 802baa8:	0802bb9f 	.word	0x0802bb9f
 802baac:	0802ba5d 	.word	0x0802ba5d
 802bab0:	0802ba5d 	.word	0x0802ba5d
 802bab4:	0802bc07 	.word	0x0802bc07
 802bab8:	0802ba5d 	.word	0x0802ba5d
 802babc:	0802bb0d 	.word	0x0802bb0d
 802bac0:	0802ba5d 	.word	0x0802ba5d
 802bac4:	0802ba5d 	.word	0x0802ba5d
 802bac8:	0802bba7 	.word	0x0802bba7
 802bacc:	682b      	ldr	r3, [r5, #0]
 802bace:	1d1a      	adds	r2, r3, #4
 802bad0:	681b      	ldr	r3, [r3, #0]
 802bad2:	602a      	str	r2, [r5, #0]
 802bad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802bad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802badc:	2301      	movs	r3, #1
 802bade:	e09f      	b.n	802bc20 <_printf_i+0x1ec>
 802bae0:	6820      	ldr	r0, [r4, #0]
 802bae2:	682b      	ldr	r3, [r5, #0]
 802bae4:	0607      	lsls	r7, r0, #24
 802bae6:	f103 0104 	add.w	r1, r3, #4
 802baea:	6029      	str	r1, [r5, #0]
 802baec:	d501      	bpl.n	802baf2 <_printf_i+0xbe>
 802baee:	681e      	ldr	r6, [r3, #0]
 802baf0:	e003      	b.n	802bafa <_printf_i+0xc6>
 802baf2:	0646      	lsls	r6, r0, #25
 802baf4:	d5fb      	bpl.n	802baee <_printf_i+0xba>
 802baf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 802bafa:	2e00      	cmp	r6, #0
 802bafc:	da03      	bge.n	802bb06 <_printf_i+0xd2>
 802bafe:	232d      	movs	r3, #45	; 0x2d
 802bb00:	4276      	negs	r6, r6
 802bb02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bb06:	485a      	ldr	r0, [pc, #360]	; (802bc70 <_printf_i+0x23c>)
 802bb08:	230a      	movs	r3, #10
 802bb0a:	e012      	b.n	802bb32 <_printf_i+0xfe>
 802bb0c:	682b      	ldr	r3, [r5, #0]
 802bb0e:	6820      	ldr	r0, [r4, #0]
 802bb10:	1d19      	adds	r1, r3, #4
 802bb12:	6029      	str	r1, [r5, #0]
 802bb14:	0605      	lsls	r5, r0, #24
 802bb16:	d501      	bpl.n	802bb1c <_printf_i+0xe8>
 802bb18:	681e      	ldr	r6, [r3, #0]
 802bb1a:	e002      	b.n	802bb22 <_printf_i+0xee>
 802bb1c:	0641      	lsls	r1, r0, #25
 802bb1e:	d5fb      	bpl.n	802bb18 <_printf_i+0xe4>
 802bb20:	881e      	ldrh	r6, [r3, #0]
 802bb22:	4853      	ldr	r0, [pc, #332]	; (802bc70 <_printf_i+0x23c>)
 802bb24:	2f6f      	cmp	r7, #111	; 0x6f
 802bb26:	bf0c      	ite	eq
 802bb28:	2308      	moveq	r3, #8
 802bb2a:	230a      	movne	r3, #10
 802bb2c:	2100      	movs	r1, #0
 802bb2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802bb32:	6865      	ldr	r5, [r4, #4]
 802bb34:	60a5      	str	r5, [r4, #8]
 802bb36:	2d00      	cmp	r5, #0
 802bb38:	bfa2      	ittt	ge
 802bb3a:	6821      	ldrge	r1, [r4, #0]
 802bb3c:	f021 0104 	bicge.w	r1, r1, #4
 802bb40:	6021      	strge	r1, [r4, #0]
 802bb42:	b90e      	cbnz	r6, 802bb48 <_printf_i+0x114>
 802bb44:	2d00      	cmp	r5, #0
 802bb46:	d04b      	beq.n	802bbe0 <_printf_i+0x1ac>
 802bb48:	4615      	mov	r5, r2
 802bb4a:	fbb6 f1f3 	udiv	r1, r6, r3
 802bb4e:	fb03 6711 	mls	r7, r3, r1, r6
 802bb52:	5dc7      	ldrb	r7, [r0, r7]
 802bb54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802bb58:	4637      	mov	r7, r6
 802bb5a:	42bb      	cmp	r3, r7
 802bb5c:	460e      	mov	r6, r1
 802bb5e:	d9f4      	bls.n	802bb4a <_printf_i+0x116>
 802bb60:	2b08      	cmp	r3, #8
 802bb62:	d10b      	bne.n	802bb7c <_printf_i+0x148>
 802bb64:	6823      	ldr	r3, [r4, #0]
 802bb66:	07de      	lsls	r6, r3, #31
 802bb68:	d508      	bpl.n	802bb7c <_printf_i+0x148>
 802bb6a:	6923      	ldr	r3, [r4, #16]
 802bb6c:	6861      	ldr	r1, [r4, #4]
 802bb6e:	4299      	cmp	r1, r3
 802bb70:	bfde      	ittt	le
 802bb72:	2330      	movle	r3, #48	; 0x30
 802bb74:	f805 3c01 	strble.w	r3, [r5, #-1]
 802bb78:	f105 35ff 	addle.w	r5, r5, #4294967295
 802bb7c:	1b52      	subs	r2, r2, r5
 802bb7e:	6122      	str	r2, [r4, #16]
 802bb80:	f8cd a000 	str.w	sl, [sp]
 802bb84:	464b      	mov	r3, r9
 802bb86:	aa03      	add	r2, sp, #12
 802bb88:	4621      	mov	r1, r4
 802bb8a:	4640      	mov	r0, r8
 802bb8c:	f7ff fee4 	bl	802b958 <_printf_common>
 802bb90:	3001      	adds	r0, #1
 802bb92:	d14a      	bne.n	802bc2a <_printf_i+0x1f6>
 802bb94:	f04f 30ff 	mov.w	r0, #4294967295
 802bb98:	b004      	add	sp, #16
 802bb9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bb9e:	6823      	ldr	r3, [r4, #0]
 802bba0:	f043 0320 	orr.w	r3, r3, #32
 802bba4:	6023      	str	r3, [r4, #0]
 802bba6:	4833      	ldr	r0, [pc, #204]	; (802bc74 <_printf_i+0x240>)
 802bba8:	2778      	movs	r7, #120	; 0x78
 802bbaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802bbae:	6823      	ldr	r3, [r4, #0]
 802bbb0:	6829      	ldr	r1, [r5, #0]
 802bbb2:	061f      	lsls	r7, r3, #24
 802bbb4:	f851 6b04 	ldr.w	r6, [r1], #4
 802bbb8:	d402      	bmi.n	802bbc0 <_printf_i+0x18c>
 802bbba:	065f      	lsls	r7, r3, #25
 802bbbc:	bf48      	it	mi
 802bbbe:	b2b6      	uxthmi	r6, r6
 802bbc0:	07df      	lsls	r7, r3, #31
 802bbc2:	bf48      	it	mi
 802bbc4:	f043 0320 	orrmi.w	r3, r3, #32
 802bbc8:	6029      	str	r1, [r5, #0]
 802bbca:	bf48      	it	mi
 802bbcc:	6023      	strmi	r3, [r4, #0]
 802bbce:	b91e      	cbnz	r6, 802bbd8 <_printf_i+0x1a4>
 802bbd0:	6823      	ldr	r3, [r4, #0]
 802bbd2:	f023 0320 	bic.w	r3, r3, #32
 802bbd6:	6023      	str	r3, [r4, #0]
 802bbd8:	2310      	movs	r3, #16
 802bbda:	e7a7      	b.n	802bb2c <_printf_i+0xf8>
 802bbdc:	4824      	ldr	r0, [pc, #144]	; (802bc70 <_printf_i+0x23c>)
 802bbde:	e7e4      	b.n	802bbaa <_printf_i+0x176>
 802bbe0:	4615      	mov	r5, r2
 802bbe2:	e7bd      	b.n	802bb60 <_printf_i+0x12c>
 802bbe4:	682b      	ldr	r3, [r5, #0]
 802bbe6:	6826      	ldr	r6, [r4, #0]
 802bbe8:	6961      	ldr	r1, [r4, #20]
 802bbea:	1d18      	adds	r0, r3, #4
 802bbec:	6028      	str	r0, [r5, #0]
 802bbee:	0635      	lsls	r5, r6, #24
 802bbf0:	681b      	ldr	r3, [r3, #0]
 802bbf2:	d501      	bpl.n	802bbf8 <_printf_i+0x1c4>
 802bbf4:	6019      	str	r1, [r3, #0]
 802bbf6:	e002      	b.n	802bbfe <_printf_i+0x1ca>
 802bbf8:	0670      	lsls	r0, r6, #25
 802bbfa:	d5fb      	bpl.n	802bbf4 <_printf_i+0x1c0>
 802bbfc:	8019      	strh	r1, [r3, #0]
 802bbfe:	2300      	movs	r3, #0
 802bc00:	6123      	str	r3, [r4, #16]
 802bc02:	4615      	mov	r5, r2
 802bc04:	e7bc      	b.n	802bb80 <_printf_i+0x14c>
 802bc06:	682b      	ldr	r3, [r5, #0]
 802bc08:	1d1a      	adds	r2, r3, #4
 802bc0a:	602a      	str	r2, [r5, #0]
 802bc0c:	681d      	ldr	r5, [r3, #0]
 802bc0e:	6862      	ldr	r2, [r4, #4]
 802bc10:	2100      	movs	r1, #0
 802bc12:	4628      	mov	r0, r5
 802bc14:	f7d4 fb64 	bl	80002e0 <memchr>
 802bc18:	b108      	cbz	r0, 802bc1e <_printf_i+0x1ea>
 802bc1a:	1b40      	subs	r0, r0, r5
 802bc1c:	6060      	str	r0, [r4, #4]
 802bc1e:	6863      	ldr	r3, [r4, #4]
 802bc20:	6123      	str	r3, [r4, #16]
 802bc22:	2300      	movs	r3, #0
 802bc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802bc28:	e7aa      	b.n	802bb80 <_printf_i+0x14c>
 802bc2a:	6923      	ldr	r3, [r4, #16]
 802bc2c:	462a      	mov	r2, r5
 802bc2e:	4649      	mov	r1, r9
 802bc30:	4640      	mov	r0, r8
 802bc32:	47d0      	blx	sl
 802bc34:	3001      	adds	r0, #1
 802bc36:	d0ad      	beq.n	802bb94 <_printf_i+0x160>
 802bc38:	6823      	ldr	r3, [r4, #0]
 802bc3a:	079b      	lsls	r3, r3, #30
 802bc3c:	d413      	bmi.n	802bc66 <_printf_i+0x232>
 802bc3e:	68e0      	ldr	r0, [r4, #12]
 802bc40:	9b03      	ldr	r3, [sp, #12]
 802bc42:	4298      	cmp	r0, r3
 802bc44:	bfb8      	it	lt
 802bc46:	4618      	movlt	r0, r3
 802bc48:	e7a6      	b.n	802bb98 <_printf_i+0x164>
 802bc4a:	2301      	movs	r3, #1
 802bc4c:	4632      	mov	r2, r6
 802bc4e:	4649      	mov	r1, r9
 802bc50:	4640      	mov	r0, r8
 802bc52:	47d0      	blx	sl
 802bc54:	3001      	adds	r0, #1
 802bc56:	d09d      	beq.n	802bb94 <_printf_i+0x160>
 802bc58:	3501      	adds	r5, #1
 802bc5a:	68e3      	ldr	r3, [r4, #12]
 802bc5c:	9903      	ldr	r1, [sp, #12]
 802bc5e:	1a5b      	subs	r3, r3, r1
 802bc60:	42ab      	cmp	r3, r5
 802bc62:	dcf2      	bgt.n	802bc4a <_printf_i+0x216>
 802bc64:	e7eb      	b.n	802bc3e <_printf_i+0x20a>
 802bc66:	2500      	movs	r5, #0
 802bc68:	f104 0619 	add.w	r6, r4, #25
 802bc6c:	e7f5      	b.n	802bc5a <_printf_i+0x226>
 802bc6e:	bf00      	nop
 802bc70:	080309b5 	.word	0x080309b5
 802bc74:	080309c6 	.word	0x080309c6

0802bc78 <__sflush_r>:
 802bc78:	898a      	ldrh	r2, [r1, #12]
 802bc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc7e:	4605      	mov	r5, r0
 802bc80:	0710      	lsls	r0, r2, #28
 802bc82:	460c      	mov	r4, r1
 802bc84:	d458      	bmi.n	802bd38 <__sflush_r+0xc0>
 802bc86:	684b      	ldr	r3, [r1, #4]
 802bc88:	2b00      	cmp	r3, #0
 802bc8a:	dc05      	bgt.n	802bc98 <__sflush_r+0x20>
 802bc8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bc8e:	2b00      	cmp	r3, #0
 802bc90:	dc02      	bgt.n	802bc98 <__sflush_r+0x20>
 802bc92:	2000      	movs	r0, #0
 802bc94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bc98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bc9a:	2e00      	cmp	r6, #0
 802bc9c:	d0f9      	beq.n	802bc92 <__sflush_r+0x1a>
 802bc9e:	2300      	movs	r3, #0
 802bca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bca4:	682f      	ldr	r7, [r5, #0]
 802bca6:	6a21      	ldr	r1, [r4, #32]
 802bca8:	602b      	str	r3, [r5, #0]
 802bcaa:	d032      	beq.n	802bd12 <__sflush_r+0x9a>
 802bcac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bcae:	89a3      	ldrh	r3, [r4, #12]
 802bcb0:	075a      	lsls	r2, r3, #29
 802bcb2:	d505      	bpl.n	802bcc0 <__sflush_r+0x48>
 802bcb4:	6863      	ldr	r3, [r4, #4]
 802bcb6:	1ac0      	subs	r0, r0, r3
 802bcb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bcba:	b10b      	cbz	r3, 802bcc0 <__sflush_r+0x48>
 802bcbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bcbe:	1ac0      	subs	r0, r0, r3
 802bcc0:	2300      	movs	r3, #0
 802bcc2:	4602      	mov	r2, r0
 802bcc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bcc6:	6a21      	ldr	r1, [r4, #32]
 802bcc8:	4628      	mov	r0, r5
 802bcca:	47b0      	blx	r6
 802bccc:	1c43      	adds	r3, r0, #1
 802bcce:	89a3      	ldrh	r3, [r4, #12]
 802bcd0:	d106      	bne.n	802bce0 <__sflush_r+0x68>
 802bcd2:	6829      	ldr	r1, [r5, #0]
 802bcd4:	291d      	cmp	r1, #29
 802bcd6:	d82b      	bhi.n	802bd30 <__sflush_r+0xb8>
 802bcd8:	4a29      	ldr	r2, [pc, #164]	; (802bd80 <__sflush_r+0x108>)
 802bcda:	410a      	asrs	r2, r1
 802bcdc:	07d6      	lsls	r6, r2, #31
 802bcde:	d427      	bmi.n	802bd30 <__sflush_r+0xb8>
 802bce0:	2200      	movs	r2, #0
 802bce2:	6062      	str	r2, [r4, #4]
 802bce4:	04d9      	lsls	r1, r3, #19
 802bce6:	6922      	ldr	r2, [r4, #16]
 802bce8:	6022      	str	r2, [r4, #0]
 802bcea:	d504      	bpl.n	802bcf6 <__sflush_r+0x7e>
 802bcec:	1c42      	adds	r2, r0, #1
 802bcee:	d101      	bne.n	802bcf4 <__sflush_r+0x7c>
 802bcf0:	682b      	ldr	r3, [r5, #0]
 802bcf2:	b903      	cbnz	r3, 802bcf6 <__sflush_r+0x7e>
 802bcf4:	6560      	str	r0, [r4, #84]	; 0x54
 802bcf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bcf8:	602f      	str	r7, [r5, #0]
 802bcfa:	2900      	cmp	r1, #0
 802bcfc:	d0c9      	beq.n	802bc92 <__sflush_r+0x1a>
 802bcfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bd02:	4299      	cmp	r1, r3
 802bd04:	d002      	beq.n	802bd0c <__sflush_r+0x94>
 802bd06:	4628      	mov	r0, r5
 802bd08:	f7ff fc96 	bl	802b638 <_free_r>
 802bd0c:	2000      	movs	r0, #0
 802bd0e:	6360      	str	r0, [r4, #52]	; 0x34
 802bd10:	e7c0      	b.n	802bc94 <__sflush_r+0x1c>
 802bd12:	2301      	movs	r3, #1
 802bd14:	4628      	mov	r0, r5
 802bd16:	47b0      	blx	r6
 802bd18:	1c41      	adds	r1, r0, #1
 802bd1a:	d1c8      	bne.n	802bcae <__sflush_r+0x36>
 802bd1c:	682b      	ldr	r3, [r5, #0]
 802bd1e:	2b00      	cmp	r3, #0
 802bd20:	d0c5      	beq.n	802bcae <__sflush_r+0x36>
 802bd22:	2b1d      	cmp	r3, #29
 802bd24:	d001      	beq.n	802bd2a <__sflush_r+0xb2>
 802bd26:	2b16      	cmp	r3, #22
 802bd28:	d101      	bne.n	802bd2e <__sflush_r+0xb6>
 802bd2a:	602f      	str	r7, [r5, #0]
 802bd2c:	e7b1      	b.n	802bc92 <__sflush_r+0x1a>
 802bd2e:	89a3      	ldrh	r3, [r4, #12]
 802bd30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd34:	81a3      	strh	r3, [r4, #12]
 802bd36:	e7ad      	b.n	802bc94 <__sflush_r+0x1c>
 802bd38:	690f      	ldr	r7, [r1, #16]
 802bd3a:	2f00      	cmp	r7, #0
 802bd3c:	d0a9      	beq.n	802bc92 <__sflush_r+0x1a>
 802bd3e:	0793      	lsls	r3, r2, #30
 802bd40:	680e      	ldr	r6, [r1, #0]
 802bd42:	bf08      	it	eq
 802bd44:	694b      	ldreq	r3, [r1, #20]
 802bd46:	600f      	str	r7, [r1, #0]
 802bd48:	bf18      	it	ne
 802bd4a:	2300      	movne	r3, #0
 802bd4c:	eba6 0807 	sub.w	r8, r6, r7
 802bd50:	608b      	str	r3, [r1, #8]
 802bd52:	f1b8 0f00 	cmp.w	r8, #0
 802bd56:	dd9c      	ble.n	802bc92 <__sflush_r+0x1a>
 802bd58:	6a21      	ldr	r1, [r4, #32]
 802bd5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bd5c:	4643      	mov	r3, r8
 802bd5e:	463a      	mov	r2, r7
 802bd60:	4628      	mov	r0, r5
 802bd62:	47b0      	blx	r6
 802bd64:	2800      	cmp	r0, #0
 802bd66:	dc06      	bgt.n	802bd76 <__sflush_r+0xfe>
 802bd68:	89a3      	ldrh	r3, [r4, #12]
 802bd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd6e:	81a3      	strh	r3, [r4, #12]
 802bd70:	f04f 30ff 	mov.w	r0, #4294967295
 802bd74:	e78e      	b.n	802bc94 <__sflush_r+0x1c>
 802bd76:	4407      	add	r7, r0
 802bd78:	eba8 0800 	sub.w	r8, r8, r0
 802bd7c:	e7e9      	b.n	802bd52 <__sflush_r+0xda>
 802bd7e:	bf00      	nop
 802bd80:	dfbffffe 	.word	0xdfbffffe

0802bd84 <_fflush_r>:
 802bd84:	b538      	push	{r3, r4, r5, lr}
 802bd86:	690b      	ldr	r3, [r1, #16]
 802bd88:	4605      	mov	r5, r0
 802bd8a:	460c      	mov	r4, r1
 802bd8c:	b913      	cbnz	r3, 802bd94 <_fflush_r+0x10>
 802bd8e:	2500      	movs	r5, #0
 802bd90:	4628      	mov	r0, r5
 802bd92:	bd38      	pop	{r3, r4, r5, pc}
 802bd94:	b118      	cbz	r0, 802bd9e <_fflush_r+0x1a>
 802bd96:	6a03      	ldr	r3, [r0, #32]
 802bd98:	b90b      	cbnz	r3, 802bd9e <_fflush_r+0x1a>
 802bd9a:	f7ff fa2f 	bl	802b1fc <__sinit>
 802bd9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bda2:	2b00      	cmp	r3, #0
 802bda4:	d0f3      	beq.n	802bd8e <_fflush_r+0xa>
 802bda6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802bda8:	07d0      	lsls	r0, r2, #31
 802bdaa:	d404      	bmi.n	802bdb6 <_fflush_r+0x32>
 802bdac:	0599      	lsls	r1, r3, #22
 802bdae:	d402      	bmi.n	802bdb6 <_fflush_r+0x32>
 802bdb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bdb2:	f7ff fbd2 	bl	802b55a <__retarget_lock_acquire_recursive>
 802bdb6:	4628      	mov	r0, r5
 802bdb8:	4621      	mov	r1, r4
 802bdba:	f7ff ff5d 	bl	802bc78 <__sflush_r>
 802bdbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802bdc0:	07da      	lsls	r2, r3, #31
 802bdc2:	4605      	mov	r5, r0
 802bdc4:	d4e4      	bmi.n	802bd90 <_fflush_r+0xc>
 802bdc6:	89a3      	ldrh	r3, [r4, #12]
 802bdc8:	059b      	lsls	r3, r3, #22
 802bdca:	d4e1      	bmi.n	802bd90 <_fflush_r+0xc>
 802bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bdce:	f7ff fbc5 	bl	802b55c <__retarget_lock_release_recursive>
 802bdd2:	e7dd      	b.n	802bd90 <_fflush_r+0xc>

0802bdd4 <__swbuf_r>:
 802bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bdd6:	460e      	mov	r6, r1
 802bdd8:	4614      	mov	r4, r2
 802bdda:	4605      	mov	r5, r0
 802bddc:	b118      	cbz	r0, 802bde6 <__swbuf_r+0x12>
 802bdde:	6a03      	ldr	r3, [r0, #32]
 802bde0:	b90b      	cbnz	r3, 802bde6 <__swbuf_r+0x12>
 802bde2:	f7ff fa0b 	bl	802b1fc <__sinit>
 802bde6:	69a3      	ldr	r3, [r4, #24]
 802bde8:	60a3      	str	r3, [r4, #8]
 802bdea:	89a3      	ldrh	r3, [r4, #12]
 802bdec:	071a      	lsls	r2, r3, #28
 802bdee:	d525      	bpl.n	802be3c <__swbuf_r+0x68>
 802bdf0:	6923      	ldr	r3, [r4, #16]
 802bdf2:	b31b      	cbz	r3, 802be3c <__swbuf_r+0x68>
 802bdf4:	6823      	ldr	r3, [r4, #0]
 802bdf6:	6922      	ldr	r2, [r4, #16]
 802bdf8:	1a98      	subs	r0, r3, r2
 802bdfa:	6963      	ldr	r3, [r4, #20]
 802bdfc:	b2f6      	uxtb	r6, r6
 802bdfe:	4283      	cmp	r3, r0
 802be00:	4637      	mov	r7, r6
 802be02:	dc04      	bgt.n	802be0e <__swbuf_r+0x3a>
 802be04:	4621      	mov	r1, r4
 802be06:	4628      	mov	r0, r5
 802be08:	f7ff ffbc 	bl	802bd84 <_fflush_r>
 802be0c:	b9e0      	cbnz	r0, 802be48 <__swbuf_r+0x74>
 802be0e:	68a3      	ldr	r3, [r4, #8]
 802be10:	3b01      	subs	r3, #1
 802be12:	60a3      	str	r3, [r4, #8]
 802be14:	6823      	ldr	r3, [r4, #0]
 802be16:	1c5a      	adds	r2, r3, #1
 802be18:	6022      	str	r2, [r4, #0]
 802be1a:	701e      	strb	r6, [r3, #0]
 802be1c:	6962      	ldr	r2, [r4, #20]
 802be1e:	1c43      	adds	r3, r0, #1
 802be20:	429a      	cmp	r2, r3
 802be22:	d004      	beq.n	802be2e <__swbuf_r+0x5a>
 802be24:	89a3      	ldrh	r3, [r4, #12]
 802be26:	07db      	lsls	r3, r3, #31
 802be28:	d506      	bpl.n	802be38 <__swbuf_r+0x64>
 802be2a:	2e0a      	cmp	r6, #10
 802be2c:	d104      	bne.n	802be38 <__swbuf_r+0x64>
 802be2e:	4621      	mov	r1, r4
 802be30:	4628      	mov	r0, r5
 802be32:	f7ff ffa7 	bl	802bd84 <_fflush_r>
 802be36:	b938      	cbnz	r0, 802be48 <__swbuf_r+0x74>
 802be38:	4638      	mov	r0, r7
 802be3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802be3c:	4621      	mov	r1, r4
 802be3e:	4628      	mov	r0, r5
 802be40:	f000 f806 	bl	802be50 <__swsetup_r>
 802be44:	2800      	cmp	r0, #0
 802be46:	d0d5      	beq.n	802bdf4 <__swbuf_r+0x20>
 802be48:	f04f 37ff 	mov.w	r7, #4294967295
 802be4c:	e7f4      	b.n	802be38 <__swbuf_r+0x64>
	...

0802be50 <__swsetup_r>:
 802be50:	b538      	push	{r3, r4, r5, lr}
 802be52:	4b2a      	ldr	r3, [pc, #168]	; (802befc <__swsetup_r+0xac>)
 802be54:	4605      	mov	r5, r0
 802be56:	6818      	ldr	r0, [r3, #0]
 802be58:	460c      	mov	r4, r1
 802be5a:	b118      	cbz	r0, 802be64 <__swsetup_r+0x14>
 802be5c:	6a03      	ldr	r3, [r0, #32]
 802be5e:	b90b      	cbnz	r3, 802be64 <__swsetup_r+0x14>
 802be60:	f7ff f9cc 	bl	802b1fc <__sinit>
 802be64:	89a3      	ldrh	r3, [r4, #12]
 802be66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802be6a:	0718      	lsls	r0, r3, #28
 802be6c:	d422      	bmi.n	802beb4 <__swsetup_r+0x64>
 802be6e:	06d9      	lsls	r1, r3, #27
 802be70:	d407      	bmi.n	802be82 <__swsetup_r+0x32>
 802be72:	2309      	movs	r3, #9
 802be74:	602b      	str	r3, [r5, #0]
 802be76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802be7a:	81a3      	strh	r3, [r4, #12]
 802be7c:	f04f 30ff 	mov.w	r0, #4294967295
 802be80:	e034      	b.n	802beec <__swsetup_r+0x9c>
 802be82:	0758      	lsls	r0, r3, #29
 802be84:	d512      	bpl.n	802beac <__swsetup_r+0x5c>
 802be86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802be88:	b141      	cbz	r1, 802be9c <__swsetup_r+0x4c>
 802be8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be8e:	4299      	cmp	r1, r3
 802be90:	d002      	beq.n	802be98 <__swsetup_r+0x48>
 802be92:	4628      	mov	r0, r5
 802be94:	f7ff fbd0 	bl	802b638 <_free_r>
 802be98:	2300      	movs	r3, #0
 802be9a:	6363      	str	r3, [r4, #52]	; 0x34
 802be9c:	89a3      	ldrh	r3, [r4, #12]
 802be9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802bea2:	81a3      	strh	r3, [r4, #12]
 802bea4:	2300      	movs	r3, #0
 802bea6:	6063      	str	r3, [r4, #4]
 802bea8:	6923      	ldr	r3, [r4, #16]
 802beaa:	6023      	str	r3, [r4, #0]
 802beac:	89a3      	ldrh	r3, [r4, #12]
 802beae:	f043 0308 	orr.w	r3, r3, #8
 802beb2:	81a3      	strh	r3, [r4, #12]
 802beb4:	6923      	ldr	r3, [r4, #16]
 802beb6:	b94b      	cbnz	r3, 802becc <__swsetup_r+0x7c>
 802beb8:	89a3      	ldrh	r3, [r4, #12]
 802beba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802bebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bec2:	d003      	beq.n	802becc <__swsetup_r+0x7c>
 802bec4:	4621      	mov	r1, r4
 802bec6:	4628      	mov	r0, r5
 802bec8:	f000 f840 	bl	802bf4c <__smakebuf_r>
 802becc:	89a0      	ldrh	r0, [r4, #12]
 802bece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802bed2:	f010 0301 	ands.w	r3, r0, #1
 802bed6:	d00a      	beq.n	802beee <__swsetup_r+0x9e>
 802bed8:	2300      	movs	r3, #0
 802beda:	60a3      	str	r3, [r4, #8]
 802bedc:	6963      	ldr	r3, [r4, #20]
 802bede:	425b      	negs	r3, r3
 802bee0:	61a3      	str	r3, [r4, #24]
 802bee2:	6923      	ldr	r3, [r4, #16]
 802bee4:	b943      	cbnz	r3, 802bef8 <__swsetup_r+0xa8>
 802bee6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802beea:	d1c4      	bne.n	802be76 <__swsetup_r+0x26>
 802beec:	bd38      	pop	{r3, r4, r5, pc}
 802beee:	0781      	lsls	r1, r0, #30
 802bef0:	bf58      	it	pl
 802bef2:	6963      	ldrpl	r3, [r4, #20]
 802bef4:	60a3      	str	r3, [r4, #8]
 802bef6:	e7f4      	b.n	802bee2 <__swsetup_r+0x92>
 802bef8:	2000      	movs	r0, #0
 802befa:	e7f7      	b.n	802beec <__swsetup_r+0x9c>
 802befc:	24000124 	.word	0x24000124

0802bf00 <__swhatbuf_r>:
 802bf00:	b570      	push	{r4, r5, r6, lr}
 802bf02:	460c      	mov	r4, r1
 802bf04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bf08:	2900      	cmp	r1, #0
 802bf0a:	b096      	sub	sp, #88	; 0x58
 802bf0c:	4615      	mov	r5, r2
 802bf0e:	461e      	mov	r6, r3
 802bf10:	da0d      	bge.n	802bf2e <__swhatbuf_r+0x2e>
 802bf12:	89a3      	ldrh	r3, [r4, #12]
 802bf14:	f013 0f80 	tst.w	r3, #128	; 0x80
 802bf18:	f04f 0100 	mov.w	r1, #0
 802bf1c:	bf0c      	ite	eq
 802bf1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802bf22:	2340      	movne	r3, #64	; 0x40
 802bf24:	2000      	movs	r0, #0
 802bf26:	6031      	str	r1, [r6, #0]
 802bf28:	602b      	str	r3, [r5, #0]
 802bf2a:	b016      	add	sp, #88	; 0x58
 802bf2c:	bd70      	pop	{r4, r5, r6, pc}
 802bf2e:	466a      	mov	r2, sp
 802bf30:	f000 f848 	bl	802bfc4 <_fstat_r>
 802bf34:	2800      	cmp	r0, #0
 802bf36:	dbec      	blt.n	802bf12 <__swhatbuf_r+0x12>
 802bf38:	9901      	ldr	r1, [sp, #4]
 802bf3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802bf3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802bf42:	4259      	negs	r1, r3
 802bf44:	4159      	adcs	r1, r3
 802bf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bf4a:	e7eb      	b.n	802bf24 <__swhatbuf_r+0x24>

0802bf4c <__smakebuf_r>:
 802bf4c:	898b      	ldrh	r3, [r1, #12]
 802bf4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bf50:	079d      	lsls	r5, r3, #30
 802bf52:	4606      	mov	r6, r0
 802bf54:	460c      	mov	r4, r1
 802bf56:	d507      	bpl.n	802bf68 <__smakebuf_r+0x1c>
 802bf58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bf5c:	6023      	str	r3, [r4, #0]
 802bf5e:	6123      	str	r3, [r4, #16]
 802bf60:	2301      	movs	r3, #1
 802bf62:	6163      	str	r3, [r4, #20]
 802bf64:	b002      	add	sp, #8
 802bf66:	bd70      	pop	{r4, r5, r6, pc}
 802bf68:	ab01      	add	r3, sp, #4
 802bf6a:	466a      	mov	r2, sp
 802bf6c:	f7ff ffc8 	bl	802bf00 <__swhatbuf_r>
 802bf70:	9900      	ldr	r1, [sp, #0]
 802bf72:	4605      	mov	r5, r0
 802bf74:	4630      	mov	r0, r6
 802bf76:	f7ff f81b 	bl	802afb0 <_malloc_r>
 802bf7a:	b948      	cbnz	r0, 802bf90 <__smakebuf_r+0x44>
 802bf7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf80:	059a      	lsls	r2, r3, #22
 802bf82:	d4ef      	bmi.n	802bf64 <__smakebuf_r+0x18>
 802bf84:	f023 0303 	bic.w	r3, r3, #3
 802bf88:	f043 0302 	orr.w	r3, r3, #2
 802bf8c:	81a3      	strh	r3, [r4, #12]
 802bf8e:	e7e3      	b.n	802bf58 <__smakebuf_r+0xc>
 802bf90:	89a3      	ldrh	r3, [r4, #12]
 802bf92:	6020      	str	r0, [r4, #0]
 802bf94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802bf98:	81a3      	strh	r3, [r4, #12]
 802bf9a:	9b00      	ldr	r3, [sp, #0]
 802bf9c:	6163      	str	r3, [r4, #20]
 802bf9e:	9b01      	ldr	r3, [sp, #4]
 802bfa0:	6120      	str	r0, [r4, #16]
 802bfa2:	b15b      	cbz	r3, 802bfbc <__smakebuf_r+0x70>
 802bfa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bfa8:	4630      	mov	r0, r6
 802bfaa:	f000 f81d 	bl	802bfe8 <_isatty_r>
 802bfae:	b128      	cbz	r0, 802bfbc <__smakebuf_r+0x70>
 802bfb0:	89a3      	ldrh	r3, [r4, #12]
 802bfb2:	f023 0303 	bic.w	r3, r3, #3
 802bfb6:	f043 0301 	orr.w	r3, r3, #1
 802bfba:	81a3      	strh	r3, [r4, #12]
 802bfbc:	89a3      	ldrh	r3, [r4, #12]
 802bfbe:	431d      	orrs	r5, r3
 802bfc0:	81a5      	strh	r5, [r4, #12]
 802bfc2:	e7cf      	b.n	802bf64 <__smakebuf_r+0x18>

0802bfc4 <_fstat_r>:
 802bfc4:	b538      	push	{r3, r4, r5, lr}
 802bfc6:	4d07      	ldr	r5, [pc, #28]	; (802bfe4 <_fstat_r+0x20>)
 802bfc8:	2300      	movs	r3, #0
 802bfca:	4604      	mov	r4, r0
 802bfcc:	4608      	mov	r0, r1
 802bfce:	4611      	mov	r1, r2
 802bfd0:	602b      	str	r3, [r5, #0]
 802bfd2:	f7d5 fc06 	bl	80017e2 <_fstat>
 802bfd6:	1c43      	adds	r3, r0, #1
 802bfd8:	d102      	bne.n	802bfe0 <_fstat_r+0x1c>
 802bfda:	682b      	ldr	r3, [r5, #0]
 802bfdc:	b103      	cbz	r3, 802bfe0 <_fstat_r+0x1c>
 802bfde:	6023      	str	r3, [r4, #0]
 802bfe0:	bd38      	pop	{r3, r4, r5, pc}
 802bfe2:	bf00      	nop
 802bfe4:	2400bb0c 	.word	0x2400bb0c

0802bfe8 <_isatty_r>:
 802bfe8:	b538      	push	{r3, r4, r5, lr}
 802bfea:	4d06      	ldr	r5, [pc, #24]	; (802c004 <_isatty_r+0x1c>)
 802bfec:	2300      	movs	r3, #0
 802bfee:	4604      	mov	r4, r0
 802bff0:	4608      	mov	r0, r1
 802bff2:	602b      	str	r3, [r5, #0]
 802bff4:	f7d5 fc05 	bl	8001802 <_isatty>
 802bff8:	1c43      	adds	r3, r0, #1
 802bffa:	d102      	bne.n	802c002 <_isatty_r+0x1a>
 802bffc:	682b      	ldr	r3, [r5, #0]
 802bffe:	b103      	cbz	r3, 802c002 <_isatty_r+0x1a>
 802c000:	6023      	str	r3, [r4, #0]
 802c002:	bd38      	pop	{r3, r4, r5, pc}
 802c004:	2400bb0c 	.word	0x2400bb0c

0802c008 <_init>:
 802c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c00a:	bf00      	nop
 802c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c00e:	bc08      	pop	{r3}
 802c010:	469e      	mov	lr, r3
 802c012:	4770      	bx	lr

0802c014 <_fini>:
 802c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c016:	bf00      	nop
 802c018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c01a:	bc08      	pop	{r3}
 802c01c:	469e      	mov	lr, r3
 802c01e:	4770      	bx	lr
