
PhonPhot_Complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bdcc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000491c  0802c06c  0802c06c  0002d06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000028  08030988  08030988  00031988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080309b0  080309b0  0009cae0  2**0
                  CONTENTS
  5 .ARM          00000008  080309b0  080309b0  000319b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080309b8  080309b8  0009cae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080309b8  080309b8  000319b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080309cc  080309cc  000319cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080309d4  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bb80  2400012c  08030b00  0003212c  2**2
                  ALLOC
 11 ._user_heap_stack 00002004  2400bcac  08030b00  00032cac  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0009cae0  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 00000bd4  90000000  90000000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 0000021c  90000bd4  90000bd4  00034bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00067cf0  90000df0  90000df0  00034df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ipc_data     00000050  30000000  30000000  00033000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .debug_info   000b21a0  00000000  00000000  0009cb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00014d12  00000000  00000000  0014ecae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004850  00000000  00000000  001639c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000350f  00000000  00000000  00168210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00013193  00000000  00000000  0016b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00055f5d  00000000  00000000  0017e8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001b87f2  00000000  00000000  001d480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000c2  00000000  00000000  0038d001  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000134f4  00000000  00000000  0038d0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000a5  00000000  00000000  003a05b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802c054 	.word	0x0802c054

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	0802c054 	.word	0x0802c054

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <IPCSetVoiceVolumeNormalized>:
{
  return shared_memory.voice_volume_normalized;
}

void IPCSetVoiceVolumeNormalized( float new_vol )
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	ed87 0a01 	vstr	s0, [r7, #4]
  shared_memory.voice_volume_normalized = new_vol;
 800038a:	4a04      	ldr	r2, [pc, #16]	@ (800039c <IPCSetVoiceVolumeNormalized+0x1c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	30000000 	.word	0x30000000

080003a0 <IPCSetVoiceMuteState>:
{
  return shared_memory.voice_mute_active;
}

void IPCSetVoiceMuteState( boolean_t new_state )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  shared_memory.voice_mute_active = new_state;
 80003aa:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <IPCSetVoiceMuteState+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7113      	strb	r3, [r2, #4]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	30000000 	.word	0x30000000

080003c0 <IPCGetAnomalyDetectState>:

boolean_t IPCGetAnomalyDetectState( void )
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  return shared_memory.anomaly_detection_active;
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <IPCGetAnomalyDetectState+0x14>)
 80003c6:	795b      	ldrb	r3, [r3, #5]
 80003c8:	b2db      	uxtb	r3, r3
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	30000000 	.word	0x30000000

080003d8 <IPCGetAlarmMuteState>:
{
  shared_memory.anomaly_magnitude_db = new_mag;
}

boolean_t IPCGetAlarmMuteState( void )
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  return shared_memory.alarm_mute;
 80003dc:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <IPCGetAlarmMuteState+0x14>)
 80003de:	799b      	ldrb	r3, [r3, #6]
 80003e0:	b2db      	uxtb	r3, r3
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	30000000 	.word	0x30000000

080003f0 <IPCSetAlarmMuteState>:

void IPCSetAlarmMuteState( boolean_t new_state )
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]
  shared_memory.alarm_mute = new_state;
 80003fa:	4a04      	ldr	r2, [pc, #16]	@ (800040c <IPCSetAlarmMuteState+0x1c>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	7193      	strb	r3, [r2, #6]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	30000000 	.word	0x30000000

08000410 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000418:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800041c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	2b00      	cmp	r3, #0
 8000426:	d013      	beq.n	8000450 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800042c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000430:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00b      	beq.n	8000450 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000438:	e000      	b.n	800043c <ITM_SendChar+0x2c>
    {
      __NOP();
 800043a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800043c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000446:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800044a:	687a      	ldr	r2, [r7, #4]
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_write>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int _write(int file, char *ptr, int len)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	e009      	b.n	8000484 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	1c5a      	adds	r2, r3, #1
 8000474:	60ba      	str	r2, [r7, #8]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ffc9 	bl	8000410 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3301      	adds	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	697a      	ldr	r2, [r7, #20]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	dbf1      	blt.n	8000470 <_write+0x12>
	}
	return len;
 800048c:	687b      	ldr	r3, [r7, #4]
}
 800048e:	4618      	mov	r0, r3
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <main>:


int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800049e:	f000 fc1d 	bl	8000cdc <MPU_Config>
  /* Enable D-Cache---------------------------------------------------------*/
  //SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004a6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004a8:	bf00      	nop
 80004aa:	4b47      	ldr	r3, [pc, #284]	@ (80005c8 <main+0x130>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d004      	beq.n	80004c0 <main+0x28>
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	1e5a      	subs	r2, r3, #1
 80004ba:	60fa      	str	r2, [r7, #12]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	dcf4      	bgt.n	80004aa <main+0x12>
  if ( timeout < 0 )
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da01      	bge.n	80004ca <main+0x32>
  {
    Error_Handler();
 80004c6:	f000 fc53 	bl	8000d70 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f010 fca9 	bl	8010e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f88d 	bl	80005ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004d2:	f000 f915 	bl	8000700 <PeriphCommonClock_Config>

  /* USER CODE BEGIN Boot_Mode_Sequence_2 */
  /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
  HSEM notification */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 80004d6:	4b3c      	ldr	r3, [pc, #240]	@ (80005c8 <main+0x130>)
 80004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004dc:	4a3a      	ldr	r2, [pc, #232]	@ (80005c8 <main+0x130>)
 80004de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004e6:	4b38      	ldr	r3, [pc, #224]	@ (80005c8 <main+0x130>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
  /*Take HSEM */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f011 fbdb 	bl	8011cb0 <HAL_HSEM_FastTake>
  /*Release HSEM in order to notify the CPU2(CM4)*/
  HAL_HSEM_Release(HSEM_ID_0,0);
 80004fa:	2100      	movs	r1, #0
 80004fc:	2000      	movs	r0, #0
 80004fe:	f011 fbf1 	bl	8011ce4 <HAL_HSEM_Release>
  /* wait until CPU2 wakes up from stop mode */
  timeout = 0xFFFF;
 8000502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000506:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000508:	bf00      	nop
 800050a:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <main+0x130>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000512:	2b00      	cmp	r3, #0
 8000514:	d104      	bne.n	8000520 <main+0x88>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	60fa      	str	r2, [r7, #12]
 800051c:	2b00      	cmp	r3, #0
 800051e:	dcf4      	bgt.n	800050a <main+0x72>
  if ( timeout < 0 )
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	2b00      	cmp	r3, #0
 8000524:	da01      	bge.n	800052a <main+0x92>
  {
    Error_Handler();
 8000526:	f000 fc23 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */

  __HAL_RCC_DMA1_CLK_ENABLE();
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <main+0x130>)
 800052c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000530:	4a25      	ldr	r2, [pc, #148]	@ (80005c8 <main+0x130>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <main+0x130>)
 800053c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000548:	f000 faa4 	bl	8000a94 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800054c:	f000 f9cc 	bl	80008e8 <MX_QUADSPI_Init>
  MX_FMC_Init();
 8000550:	f000 fa4a 	bl	80009e8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000554:	f000 f944 	bl	80007e0 <MX_LTDC_Init>
  MX_CRC_Init();
 8000558:	f000 f902 	bl	8000760 <MX_CRC_Init>
  MX_DMA2D_Init();
 800055c:	f000 f922 	bl	80007a4 <MX_DMA2D_Init>
  MX_TIM4_Init();
 8000560:	f000 f9f0 	bl	8000944 <MX_TIM4_Init>
  MX_TouchGFX_Init();
 8000564:	f001 f9f5 	bl	8001952 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  TIM4->SMCR &= ~TIM_SMCR_SMS;
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <main+0x134>)
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	4917      	ldr	r1, [pc, #92]	@ (80005cc <main+0x134>)
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <main+0x138>)
 8000570:	4013      	ands	r3, r2
 8000572:	608b      	str	r3, [r1, #8]
  // only need to set the low 3 bits of SMS
  TIM4->SMCR |= 0b011;
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <main+0x134>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <main+0x134>)
 800057a:	f043 0303 	orr.w	r3, r3, #3
 800057e:	6093      	str	r3, [r2, #8]

  // set timer channel inputs
  TIM4->CCMR1 |= (0x01 << 0) | (0x01 << 8);
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <main+0x134>)
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	4911      	ldr	r1, [pc, #68]	@ (80005cc <main+0x134>)
 8000586:	f240 1301 	movw	r3, #257	@ 0x101
 800058a:	4313      	orrs	r3, r2
 800058c:	618b      	str	r3, [r1, #24]

  // start/enable timer
  TIM4->CR1 |= TIM_CR1_CEN;
 800058e:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <main+0x134>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a0e      	ldr	r2, [pc, #56]	@ (80005cc <main+0x134>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059a:	f00a fbdb 	bl	800ad54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059e:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <main+0x13c>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <main+0x140>)
 80005a4:	f00a fc20 	bl	800ade8 <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <main+0x144>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80005ae:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <main+0x148>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <main+0x14c>)
 80005b4:	f00a fc18 	bl	800ade8 <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0b      	ldr	r2, [pc, #44]	@ (80005e8 <main+0x150>)
 80005bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005be:	f00a fbed 	bl	800ad9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x12a>
 80005c6:	bf00      	nop
 80005c8:	58024400 	.word	0x58024400
 80005cc:	40000800 	.word	0x40000800
 80005d0:	fffefff8 	.word	0xfffefff8
 80005d4:	0802cd74 	.word	0x0802cd74
 80005d8:	08000ccd 	.word	0x08000ccd
 80005dc:	24000348 	.word	0x24000348
 80005e0:	0802cd98 	.word	0x0802cd98
 80005e4:	0800195f 	.word	0x0800195f
 80005e8:	2400034c 	.word	0x2400034c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	224c      	movs	r2, #76	@ 0x4c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f02a febb 	bl	802b376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f02a feb5 	bl	802b376 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800060c:	2004      	movs	r0, #4
 800060e:	f012 fee5 	bl	80133dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b37      	ldr	r3, [pc, #220]	@ (80006f4 <SystemClock_Config+0x108>)
 8000618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061a:	4a36      	ldr	r2, [pc, #216]	@ (80006f4 <SystemClock_Config+0x108>)
 800061c:	f023 0301 	bic.w	r3, r3, #1
 8000620:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000622:	4b34      	ldr	r3, [pc, #208]	@ (80006f4 <SystemClock_Config+0x108>)
 8000624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemClock_Config+0x10c>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a31      	ldr	r2, [pc, #196]	@ (80006f8 <SystemClock_Config+0x10c>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b2f      	ldr	r3, [pc, #188]	@ (80006f8 <SystemClock_Config+0x10c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000644:	bf00      	nop
 8000646:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <SystemClock_Config+0x10c>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000652:	d1f8      	bne.n	8000646 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemClock_Config+0x110>)
 8000656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000658:	f023 0303 	bic.w	r3, r3, #3
 800065c:	4a27      	ldr	r2, [pc, #156]	@ (80006fc <SystemClock_Config+0x110>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000676:	2305      	movs	r3, #5
 8000678:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 144;
 800067a:	2390      	movs	r3, #144	@ 0x90
 800067c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000686:	2304      	movs	r3, #4
 8000688:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800068a:	2308      	movs	r3, #8
 800068c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068e:	2300      	movs	r3, #0
 8000690:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069a:	4618      	mov	r0, r3
 800069c:	f013 fdda 	bl	8014254 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006a6:	f000 fb63 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	233f      	movs	r3, #63	@ 0x3f
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2303      	movs	r3, #3
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006b6:	2308      	movs	r3, #8
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ba:	2340      	movs	r3, #64	@ 0x40
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006be:	2340      	movs	r3, #64	@ 0x40
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006c8:	2340      	movs	r3, #64	@ 0x40
 80006ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f014 fa19 	bl	8014b08 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80006dc:	f000 fb48 	bl	8000d70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006e0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006e4:	2100      	movs	r1, #0
 80006e6:	2000      	movs	r0, #0
 80006e8:	f014 fbc4 	bl	8014e74 <HAL_RCC_MCOConfig>
}
 80006ec:	bf00      	nop
 80006ee:	3770      	adds	r7, #112	@ 0x70
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58000400 	.word	0x58000400
 80006f8:	58024800 	.word	0x58024800
 80006fc:	58024400 	.word	0x58024400

08000700 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0b0      	sub	sp, #192	@ 0xc0
 8000704:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000706:	463b      	mov	r3, r7
 8000708:	22c0      	movs	r2, #192	@ 0xc0
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f02a fe32 	bl	802b376 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000712:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 800071e:	2305      	movs	r3, #5
 8000720:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 100;
 8000722:	2364      	movs	r3, #100	@ 0x64
 8000724:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 10;
 8000726:	230a      	movs	r3, #10
 8000728:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800072a:	230a      	movs	r3, #10
 800072c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000732:	2380      	movs	r3, #128	@ 0x80
 8000734:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000744:	463b      	mov	r3, r7
 8000746:	4618      	mov	r0, r3
 8000748:	f014 fe16 	bl	8015378 <HAL_RCCEx_PeriphCLKConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000752:	f000 fb0d 	bl	8000d70 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	37c0      	adds	r7, #192	@ 0xc0
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000764:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <MX_CRC_Init+0x3c>)
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <MX_CRC_Init+0x40>)
 8000768:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076a:	4b0c      	ldr	r3, [pc, #48]	@ (800079c <MX_CRC_Init+0x3c>)
 800076c:	2200      	movs	r2, #0
 800076e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <MX_CRC_Init+0x3c>)
 8000772:	2200      	movs	r2, #0
 8000774:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_CRC_Init+0x3c>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <MX_CRC_Init+0x3c>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_CRC_Init+0x3c>)
 8000784:	2201      	movs	r2, #1
 8000786:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_CRC_Init+0x3c>)
 800078a:	f010 fd3f 	bl	801120c <HAL_CRC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000794:	f000 faec 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	24000148 	.word	0x24000148
 80007a0:	58024c00 	.word	0x58024c00

080007a4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_DMA2D_Init+0x34>)
 80007aa:	4a0c      	ldr	r2, [pc, #48]	@ (80007dc <MX_DMA2D_Init+0x38>)
 80007ac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_DMA2D_Init+0x34>)
 80007b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b4:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_DMA2D_Init+0x34>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_DMA2D_Init+0x34>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_DMA2D_Init+0x34>)
 80007c4:	f010 fe14 	bl	80113f0 <HAL_DMA2D_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80007ce:	f000 facf 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2400016c 	.word	0x2400016c
 80007dc:	52001000 	.word	0x52001000

080007e0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08e      	sub	sp, #56	@ 0x38
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80007e6:	f000 fac9 	bl	8000d7c <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2234      	movs	r2, #52	@ 0x34
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f02a fdc0 	bl	802b376 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007f6:	4b3a      	ldr	r3, [pc, #232]	@ (80008e0 <MX_LTDC_Init+0x100>)
 80007f8:	4a3a      	ldr	r2, [pc, #232]	@ (80008e4 <MX_LTDC_Init+0x104>)
 80007fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007fc:	4b38      	ldr	r3, [pc, #224]	@ (80008e0 <MX_LTDC_Init+0x100>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000802:	4b37      	ldr	r3, [pc, #220]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080e:	4b34      	ldr	r3, [pc, #208]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000814:	4b32      	ldr	r3, [pc, #200]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000816:	2228      	movs	r2, #40	@ 0x28
 8000818:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800081a:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800081c:	2209      	movs	r2, #9
 800081e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000820:	4b2f      	ldr	r3, [pc, #188]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000822:	2235      	movs	r2, #53	@ 0x35
 8000824:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000826:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000828:	220b      	movs	r2, #11
 800082a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800082c:	4b2c      	ldr	r3, [pc, #176]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800082e:	f240 2215 	movw	r2, #533	@ 0x215
 8000832:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000834:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000836:	f240 121b 	movw	r2, #283	@ 0x11b
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 800083c:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800083e:	f240 2235 	movw	r2, #565	@ 0x235
 8000842:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000844:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000846:	f240 121d 	movw	r2, #285	@ 0x11d
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800084c:	4b24      	ldr	r3, [pc, #144]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000854:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800085c:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <MX_LTDC_Init+0x100>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000864:	481e      	ldr	r0, [pc, #120]	@ (80008e0 <MX_LTDC_Init+0x100>)
 8000866:	f012 f8bd 	bl	80129e4 <HAL_LTDC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 8000870:	f000 fa7e 	bl	8000d70 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000878:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800087c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000882:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000886:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800088c:	23ff      	movs	r3, #255	@ 0xff
 800088e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000898:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800089a:	2305      	movs	r3, #5
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800089e:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80008a4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80008aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_LTDC_Init+0x100>)
 80008ca:	f012 fa13 	bl	8012cf4 <HAL_LTDC_ConfigLayer>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80008d4:	f000 fa4c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3738      	adds	r7, #56	@ 0x38
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	240001d4 	.word	0x240001d4
 80008e4:	50001000 	.word	0x50001000

080008e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 80008ee:	4a13      	ldr	r2, [pc, #76]	@ (800093c <MX_QUADSPI_Init+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 8000900:	2210      	movs	r2, #16
 8000902:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 8000906:	221a      	movs	r2, #26
 8000908:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 800090c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000910:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 800091a:	2240      	movs	r2, #64	@ 0x40
 800091c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_QUADSPI_Init+0x50>)
 8000920:	f012 fdb6 	bl	8013490 <HAL_QSPI_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 800092a:	f000 fa21 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800092e:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_QUADSPI_Init+0x58>)
 8000930:	f000 fa98 	bl	8000e64 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2400027c 	.word	0x2400027c
 800093c:	52005000 	.word	0x52005000
 8000940:	08000d71 	.word	0x08000d71

08000944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 8000966:	4a1f      	ldr	r2, [pc, #124]	@ (80009e4 <MX_TIM4_Init+0xa0>)
 8000968:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 8000978:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800097c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800098a:	4815      	ldr	r0, [pc, #84]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 800098c:	f016 f917 	bl	8016bbe <HAL_TIM_Base_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000996:	f000 f9eb 	bl	8000d70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800099a:	2307      	movs	r3, #7
 800099c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerFilter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 80009ae:	f016 faf4 	bl	8016f9a <HAL_TIM_SlaveConfigSynchro>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 f9da 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_TIM4_Init+0x9c>)
 80009ca:	f016 fd55 	bl	8017478 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 f9cc 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	240002c8 	.word	0x240002c8
 80009e4:	40000800 	.word	0x40000800

080009e8 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]
 80009fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000a00:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <MX_FMC_Init+0xa4>)
 8000a04:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a20:	2240      	movs	r2, #64	@ 0x40
 8000a22:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a2a:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a38:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a3c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000a54:	2306      	movs	r3, #6
 8000a56:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_FMC_Init+0xa0>)
 8000a6a:	f015 fff3 	bl	8016a54 <HAL_SDRAM_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a74:	f000 f97c 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_FMC_Init+0xa8>)
 8000a7a:	f000 fa14 	bl	8000ea6 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	24000314 	.word	0x24000314
 8000a8c:	52004140 	.word	0x52004140
 8000a90:	08000d71 	.word	0x08000d71

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b090      	sub	sp, #64	@ 0x40
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000aaa:	4b81      	ldr	r3, [pc, #516]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b7d      	ldr	r3, [pc, #500]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac8:	4b79      	ldr	r3, [pc, #484]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	4a78      	ldr	r2, [pc, #480]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad8:	4b75      	ldr	r3, [pc, #468]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ae6:	4b72      	ldr	r3, [pc, #456]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	4a70      	ldr	r2, [pc, #448]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000aee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af6:	4b6e      	ldr	r3, [pc, #440]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b04:	4b6a      	ldr	r3, [pc, #424]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	4a69      	ldr	r2, [pc, #420]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b14:	4b66      	ldr	r3, [pc, #408]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b22:	4b63      	ldr	r3, [pc, #396]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	4a61      	ldr	r2, [pc, #388]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b32:	4b5f      	ldr	r3, [pc, #380]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	4b5b      	ldr	r3, [pc, #364]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	4a5a      	ldr	r2, [pc, #360]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b50:	4b57      	ldr	r3, [pc, #348]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b54      	ldr	r3, [pc, #336]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	4a52      	ldr	r2, [pc, #328]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6e:	4b50      	ldr	r3, [pc, #320]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	4a4b      	ldr	r2, [pc, #300]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8c:	4b48      	ldr	r3, [pc, #288]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b9a:	4b45      	ldr	r3, [pc, #276]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	4a43      	ldr	r2, [pc, #268]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000ba2:	f043 0320 	orr.w	r3, r3, #32
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000baa:	4b41      	ldr	r3, [pc, #260]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	f003 0320 	and.w	r3, r3, #32
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb8:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc8:	4b39      	ldr	r3, [pc, #228]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b36      	ldr	r3, [pc, #216]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	4a34      	ldr	r2, [pc, #208]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be6:	4b32      	ldr	r3, [pc, #200]	@ (8000cb0 <MX_GPIO_Init+0x21c>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_ImprGnD_GPIO_Port, D3_ImprGnD_Pin, GPIO_PIN_RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	@ 0x40
 8000bf8:	482e      	ldr	r0, [pc, #184]	@ (8000cb4 <MX_GPIO_Init+0x220>)
 8000bfa:	f011 f83f 	bl	8011c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfe:	2308      	movs	r3, #8
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4829      	ldr	r0, [pc, #164]	@ (8000cb8 <MX_GPIO_Init+0x224>)
 8000c12:	f010 fd61 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c30:	4619      	mov	r1, r3
 8000c32:	4820      	ldr	r0, [pc, #128]	@ (8000cb4 <MX_GPIO_Init+0x220>)
 8000c34:	f010 fd50 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_SWToggle_Pin */
  GPIO_InitStruct.Pin = D2_SWToggle_Pin;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D2_SWToggle_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c48:	4619      	mov	r1, r3
 8000c4a:	481c      	ldr	r0, [pc, #112]	@ (8000cbc <MX_GPIO_Init+0x228>)
 8000c4c:	f010 fd44 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_MoButton_Pin */
  GPIO_InitStruct.Pin = D4_MoButton_Pin;
 8000c50:	2302      	movs	r3, #2
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(D4_MoButton_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_GPIO_Init+0x22c>)
 8000c64:	f010 fd38 	bl	80116d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_ImprGnD_Pin */
  GPIO_InitStruct.Pin = D3_ImprGnD_Pin;
 8000c68:	2340      	movs	r3, #64	@ 0x40
 8000c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(D3_ImprGnD_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_GPIO_Init+0x220>)
 8000c80:	f010 fd2a 	bl	80116d8 <HAL_GPIO_Init>

  // PE3, used for alarm LEDs
  // Use hal to set things
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c84:	2308      	movs	r3, #8
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_GPIO_Init+0x230>)
 8000c90:	f010 fd22 	bl	80116d8 <HAL_GPIO_Init>

  // PH15, also used for alarm LEDs
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4809      	ldr	r0, [pc, #36]	@ (8000cc8 <MX_GPIO_Init+0x234>)
 8000ca2:	f010 fd19 	bl	80116d8 <HAL_GPIO_Init>
}
 8000ca6:	bf00      	nop
 8000ca8:	3740      	adds	r7, #64	@ 0x40
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	58022000 	.word	0x58022000
 8000cbc:	58021800 	.word	0x58021800
 8000cc0:	58022800 	.word	0x58022800
 8000cc4:	58021000 	.word	0x58021000
 8000cc8:	58021c00 	.word	0x58021c00

08000ccc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f00a f919 	bl	800af0c <osDelay>
 8000cda:	e7fb      	b.n	8000cd4 <StartDefaultTask+0x8>

08000cdc <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000cee:	f010 fa11 	bl	8011114 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000cfa:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000cfe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000d00:	2313      	movs	r3, #19
 8000d02:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d20:	463b      	mov	r3, r7
 8000d22:	4618      	mov	r0, r3
 8000d24:	f010 fa2e 	bl	8011184 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000d2c:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000d30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000d32:	231a      	movs	r3, #26
 8000d34:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f010 fa23 	bl	8011184 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d3e:	2004      	movs	r0, #4
 8000d40:	f010 fa00 	bl	8011144 <HAL_MPU_Enable>

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f010 f89b 	bl	8010e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40001000 	.word	0x40001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000d82:	4b36      	ldr	r3, [pc, #216]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000d84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d88:	4a34      	ldr	r2, [pc, #208]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000d8a:	f043 0308 	orr.w	r3, r3, #8
 8000d8e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8000d92:	4b32      	ldr	r3, [pc, #200]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000d94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000dbe:	4b27      	ldr	r3, [pc, #156]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	4a25      	ldr	r2, [pc, #148]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dce:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	4a16      	ldr	r2, [pc, #88]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000e20:	f043 0308 	orr.w	r3, r3, #8
 8000e24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <initLtdcClocks+0xe0>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <initLtdcClocks+0xe4>)
 8000e46:	f010 fc47 	bl	80116d8 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <initLtdcClocks+0xe4>)
 8000e50:	f010 ff14 	bl	8011c7c <HAL_GPIO_WritePin>
}
 8000e54:	bf00      	nop
 8000e56:	3730      	adds	r7, #48	@ 0x30
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58020c00 	.word	0x58020c00

08000e64 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000e70:	2301      	movs	r3, #1
 8000e72:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000e74:	2340      	movs	r3, #64	@ 0x40
 8000e76:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f00e ff88 	bl	800fd94 <BSP_QSPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f00f f85a 	bl	800ff48 <BSP_QSPI_EnableMemoryMappedMode>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4798      	blx	r3
   }
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f00f fbb8 	bl	8010624 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f00f fb59 	bl	801056c <BSP_SDRAM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <initBspSdRam+0x1e>
   {
      error_handler();
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4798      	blx	r3
   }
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x38>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_MspInit+0x38>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee2:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_MspInit+0x38>)
 8000ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f06f 0001 	mvn.w	r0, #1
 8000ef8:	f010 f8d6 	bl	80110a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	@ (8000f44 <HAL_CRC_MspInit+0x3c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10e      	bne.n	8000f38 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_CRC_MspInit+0x40>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <HAL_CRC_MspInit+0x40>)
 8000f22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2a:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_CRC_MspInit+0x40>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	58024c00 	.word	0x58024c00
 8000f48:	58024400 	.word	0x58024400

08000f4c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0e      	ldr	r2, [pc, #56]	@ (8000f94 <HAL_DMA2D_MspInit+0x48>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d116      	bne.n	8000f8c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_DMA2D_MspInit+0x4c>)
 8000f60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f64:	4a0c      	ldr	r2, [pc, #48]	@ (8000f98 <HAL_DMA2D_MspInit+0x4c>)
 8000f66:	f043 0310 	orr.w	r3, r3, #16
 8000f6a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_DMA2D_MspInit+0x4c>)
 8000f70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2105      	movs	r1, #5
 8000f80:	205a      	movs	r0, #90	@ 0x5a
 8000f82:	f010 f891 	bl	80110a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f86:	205a      	movs	r0, #90	@ 0x5a
 8000f88:	f010 f8a8 	bl	80110dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	52001000 	.word	0x52001000
 8000f98:	58024400 	.word	0x58024400

08000f9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0be      	sub	sp, #248	@ 0xf8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	22c0      	movs	r2, #192	@ 0xc0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f02a f9da 	bl	802b376 <memset>
  if(hltdc->Instance==LTDC)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a69      	ldr	r2, [pc, #420]	@ (800116c <HAL_LTDC_MspInit+0x1d0>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 80cb 	bne.w	8001164 <HAL_LTDC_MspInit+0x1c8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fce:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000fda:	2305      	movs	r3, #5
 8000fdc:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000fde:	23a0      	movs	r3, #160	@ 0xa0
 8000fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000fea:	2353      	movs	r3, #83	@ 0x53
 8000fec:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000fee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f014 f9b9 	bl	8015378 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 800100c:	f7ff feb0 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001010:	4b57      	ldr	r3, [pc, #348]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001016:	4a56      	ldr	r2, [pc, #344]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001020:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001022:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800102e:	4b50      	ldr	r3, [pc, #320]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a4e      	ldr	r2, [pc, #312]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001036:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b4c      	ldr	r3, [pc, #304]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800104c:	4b48      	ldr	r3, [pc, #288]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a47      	ldr	r2, [pc, #284]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b44      	ldr	r3, [pc, #272]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800106a:	4b41      	ldr	r3, [pc, #260]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	4a3f      	ldr	r2, [pc, #252]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001088:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	4a38      	ldr	r2, [pc, #224]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001094:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <HAL_LTDC_MspInit+0x1d4>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 80010a6:	23fc      	movs	r3, #252	@ 0xfc
 80010a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010be:	230e      	movs	r3, #14
 80010c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80010c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010c8:	4619      	mov	r1, r3
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <HAL_LTDC_MspInit+0x1d8>)
 80010cc:	f010 fb04 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 80010d0:	f24d 2303 	movw	r3, #53763	@ 0xd203
 80010d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ea:	230e      	movs	r3, #14
 80010ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4820      	ldr	r0, [pc, #128]	@ (8001178 <HAL_LTDC_MspInit+0x1dc>)
 80010f8:	f010 faee 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 80010fc:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001100:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001116:	230e      	movs	r3, #14
 8001118:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800111c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001120:	4619      	mov	r1, r3
 8001122:	4816      	ldr	r0, [pc, #88]	@ (800117c <HAL_LTDC_MspInit+0x1e0>)
 8001124:	f010 fad8 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001128:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800112c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001142:	230e      	movs	r3, #14
 8001144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001148:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800114c:	4619      	mov	r1, r3
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <HAL_LTDC_MspInit+0x1e4>)
 8001150:	f010 fac2 	bl	80116d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2105      	movs	r1, #5
 8001158:	2058      	movs	r0, #88	@ 0x58
 800115a:	f00f ffa5 	bl	80110a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800115e:	2058      	movs	r0, #88	@ 0x58
 8001160:	f00f ffbc 	bl	80110dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001164:	bf00      	nop
 8001166:	37f8      	adds	r7, #248	@ 0xf8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	50001000 	.word	0x50001000
 8001170:	58024400 	.word	0x58024400
 8001174:	58022800 	.word	0x58022800
 8001178:	58022000 	.word	0x58022000
 800117c:	58022400 	.word	0x58022400
 8001180:	58021c00 	.word	0x58021c00

08001184 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0be      	sub	sp, #248	@ 0xf8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	22c0      	movs	r2, #192	@ 0xc0
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f02a f8e6 	bl	802b376 <memset>
  if(hqspi->Instance==QUADSPI)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a77      	ldr	r2, [pc, #476]	@ (800138c <HAL_QSPI_MspInit+0x208>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	f040 80e7 	bne.w	8001384 <HAL_QSPI_MspInit+0x200>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80011b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f014 f8d4 	bl	8015378 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 80011d6:	f7ff fdcb 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011da:	4b6d      	ldr	r3, [pc, #436]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 80011dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80011ea:	4b69      	ldr	r3, [pc, #420]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 80011ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80011f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f8:	4b65      	ldr	r3, [pc, #404]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fe:	4a64      	ldr	r2, [pc, #400]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001204:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001208:	4b61      	ldr	r3, [pc, #388]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001212:	61bb      	str	r3, [r7, #24]
 8001214:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001216:	4b5e      	ldr	r3, [pc, #376]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121c:	4a5c      	ldr	r2, [pc, #368]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001226:	4b5a      	ldr	r3, [pc, #360]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001234:	4b56      	ldr	r3, [pc, #344]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123a:	4a55      	ldr	r2, [pc, #340]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 800123c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001240:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001244:	4b52      	ldr	r3, [pc, #328]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	4b4f      	ldr	r3, [pc, #316]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	4a4d      	ldr	r2, [pc, #308]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001262:	4b4b      	ldr	r3, [pc, #300]	@ (8001390 <HAL_QSPI_MspInit+0x20c>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001270:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800128a:	2309      	movs	r3, #9
 800128c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001290:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001294:	4619      	mov	r1, r3
 8001296:	483f      	ldr	r0, [pc, #252]	@ (8001394 <HAL_QSPI_MspInit+0x210>)
 8001298:	f010 fa1e 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800129c:	2340      	movs	r3, #64	@ 0x40
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012b4:	230a      	movs	r3, #10
 80012b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ba:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012be:	4619      	mov	r1, r3
 80012c0:	4834      	ldr	r0, [pc, #208]	@ (8001394 <HAL_QSPI_MspInit+0x210>)
 80012c2:	f010 fa09 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80012c6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012e0:	2309      	movs	r3, #9
 80012e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012ea:	4619      	mov	r1, r3
 80012ec:	482a      	ldr	r0, [pc, #168]	@ (8001398 <HAL_QSPI_MspInit+0x214>)
 80012ee:	f010 f9f3 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800130c:	230a      	movs	r3, #10
 800130e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001312:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001316:	4619      	mov	r1, r3
 8001318:	481f      	ldr	r0, [pc, #124]	@ (8001398 <HAL_QSPI_MspInit+0x214>)
 800131a:	f010 f9dd 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800131e:	230c      	movs	r3, #12
 8001320:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001336:	2309      	movs	r3, #9
 8001338:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800133c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001340:	4619      	mov	r1, r3
 8001342:	4816      	ldr	r0, [pc, #88]	@ (800139c <HAL_QSPI_MspInit+0x218>)
 8001344:	f010 f9c8 	bl	80116d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001348:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800134c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001362:	2309      	movs	r3, #9
 8001364:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001368:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800136c:	4619      	mov	r1, r3
 800136e:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <HAL_QSPI_MspInit+0x21c>)
 8001370:	f010 f9b2 	bl	80116d8 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	205c      	movs	r0, #92	@ 0x5c
 800137a:	f00f fe95 	bl	80110a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800137e:	205c      	movs	r0, #92	@ 0x5c
 8001380:	f00f feac 	bl	80110dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	37f8      	adds	r7, #248	@ 0xf8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	52005000 	.word	0x52005000
 8001390:	58024400 	.word	0x58024400
 8001394:	58021800 	.word	0x58021800
 8001398:	58021400 	.word	0x58021400
 800139c:	58021c00 	.word	0x58021c00
 80013a0:	58020c00 	.word	0x58020c00

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	@ 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1a      	ldr	r2, [pc, #104]	@ (800142c <HAL_TIM_Base_MspInit+0x88>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12d      	bne.n	8001422 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013cc:	4a18      	ldr	r2, [pc, #96]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ea:	4a11      	ldr	r2, [pc, #68]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <HAL_TIM_Base_MspInit+0x8c>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001402:	23c0      	movs	r3, #192	@ 0xc0
 8001404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140a:	2301      	movs	r3, #1
 800140c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001412:	2302      	movs	r3, #2
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	@ (8001434 <HAL_TIM_Base_MspInit+0x90>)
 800141e:	f010 f95b 	bl	80116d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40000800 	.word	0x40000800
 8001430:	58024400 	.word	0x58024400
 8001434:	58020400 	.word	0x58020400

08001438 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b0b8      	sub	sp, #224	@ 0xe0
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800143e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800144e:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <HAL_FMC_MspInit+0x15c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 8099 	bne.w	800158a <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8001458:	4b4e      	ldr	r3, [pc, #312]	@ (8001594 <HAL_FMC_MspInit+0x15c>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	22c0      	movs	r2, #192	@ 0xc0
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f029 ff85 	bl	802b376 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800146c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001478:	2300      	movs	r3, #0
 800147a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	4618      	mov	r0, r3
 8001482:	f013 ff79 	bl	8015378 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 800148c:	f7ff fc70 	bl	8000d70 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001490:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_FMC_MspInit+0x160>)
 8001492:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001496:	4a40      	ldr	r2, [pc, #256]	@ (8001598 <HAL_FMC_MspInit+0x160>)
 8001498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800149c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80014a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001598 <HAL_FMC_MspInit+0x160>)
 80014a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80014ae:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014d2:	4619      	mov	r1, r3
 80014d4:	4831      	ldr	r0, [pc, #196]	@ (800159c <HAL_FMC_MspInit+0x164>)
 80014d6:	f010 f8ff 	bl	80116d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014da:	f248 1333 	movw	r3, #33075	@ 0x8133
 80014de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014fa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014fe:	4619      	mov	r1, r3
 8001500:	4827      	ldr	r0, [pc, #156]	@ (80015a0 <HAL_FMC_MspInit+0x168>)
 8001502:	f010 f8e9 	bl	80116d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001506:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800150a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001520:	230c      	movs	r3, #12
 8001522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800152a:	4619      	mov	r1, r3
 800152c:	481d      	ldr	r0, [pc, #116]	@ (80015a4 <HAL_FMC_MspInit+0x16c>)
 800152e:	f010 f8d3 	bl	80116d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001532:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001536:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800154c:	230c      	movs	r3, #12
 800154e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001552:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001556:	4619      	mov	r1, r3
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <HAL_FMC_MspInit+0x170>)
 800155a:	f010 f8bd 	bl	80116d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800155e:	23e0      	movs	r3, #224	@ 0xe0
 8001560:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001576:	230c      	movs	r3, #12
 8001578:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800157c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <HAL_FMC_MspInit+0x174>)
 8001584:	f010 f8a8 	bl	80116d8 <HAL_GPIO_Init>
 8001588:	e000      	b.n	800158c <HAL_FMC_MspInit+0x154>
    return;
 800158a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800158c:	37e0      	adds	r7, #224	@ 0xe0
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	24000350 	.word	0x24000350
 8001598:	58024400 	.word	0x58024400
 800159c:	58021000 	.word	0x58021000
 80015a0:	58021800 	.word	0x58021800
 80015a4:	58020c00 	.word	0x58020c00
 80015a8:	58021400 	.word	0x58021400
 80015ac:	58021c00 	.word	0x58021c00

080015b0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015b8:	f7ff ff3e 	bl	8001438 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80015c8:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_FMC_MspDeInit+0x58>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d123      	bne.n	8001618 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 80015d0:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_FMC_MspDeInit+0x58>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 80015d6:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_FMC_MspDeInit+0x5c>)
 80015d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015dc:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <HAL_FMC_MspDeInit+0x5c>)
 80015de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80015e6:	f64f 7183 	movw	r1, #65411	@ 0xff83
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <HAL_FMC_MspDeInit+0x60>)
 80015ec:	f010 fa24 	bl	8011a38 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80015f0:	f248 1133 	movw	r1, #33075	@ 0x8133
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <HAL_FMC_MspDeInit+0x64>)
 80015f6:	f010 fa1f 	bl	8011a38 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80015fa:	f24c 7103 	movw	r1, #50947	@ 0xc703
 80015fe:	480b      	ldr	r0, [pc, #44]	@ (800162c <HAL_FMC_MspDeInit+0x68>)
 8001600:	f010 fa1a 	bl	8011a38 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001604:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001608:	4809      	ldr	r0, [pc, #36]	@ (8001630 <HAL_FMC_MspDeInit+0x6c>)
 800160a:	f010 fa15 	bl	8011a38 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800160e:	21e0      	movs	r1, #224	@ 0xe0
 8001610:	4808      	ldr	r0, [pc, #32]	@ (8001634 <HAL_FMC_MspDeInit+0x70>)
 8001612:	f010 fa11 	bl	8011a38 <HAL_GPIO_DeInit>
 8001616:	e000      	b.n	800161a <HAL_FMC_MspDeInit+0x56>
    return;
 8001618:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 800161a:	bd80      	pop	{r7, pc}
 800161c:	24000354 	.word	0x24000354
 8001620:	58024400 	.word	0x58024400
 8001624:	58021000 	.word	0x58021000
 8001628:	58021800 	.word	0x58021800
 800162c:	58020c00 	.word	0x58020c00
 8001630:	58021400 	.word	0x58021400
 8001634:	58021c00 	.word	0x58021c00

08001638 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 8001640:	f7ff ffc0 	bl	80015c4 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	@ 0x40
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d827      	bhi.n	80016aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800165a:	2200      	movs	r2, #0
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	2036      	movs	r0, #54	@ 0x36
 8001660:	f00f fd22 	bl	80110a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001664:	2036      	movs	r0, #54	@ 0x36
 8001666:	f00f fd39 	bl	80110dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800166a:	4a29      	ldr	r2, [pc, #164]	@ (8001710 <HAL_InitTick+0xc4>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001670:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <HAL_InitTick+0xc8>)
 8001672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001676:	4a27      	ldr	r2, [pc, #156]	@ (8001714 <HAL_InitTick+0xc8>)
 8001678:	f043 0310 	orr.w	r3, r3, #16
 800167c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_InitTick+0xc8>)
 8001682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800168e:	f107 0210 	add.w	r2, r7, #16
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f013 fe2b 	bl	80152f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <HAL_InitTick+0x6a>
 80016a8:	e001      	b.n	80016ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e02b      	b.n	8001706 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ae:	f013 fdf5 	bl	801529c <HAL_RCC_GetPCLK1Freq>
 80016b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80016b4:	e004      	b.n	80016c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016b6:	f013 fdf1 	bl	801529c <HAL_RCC_GetPCLK1Freq>
 80016ba:	4603      	mov	r3, r0
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <HAL_InitTick+0xcc>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	0c9b      	lsrs	r3, r3, #18
 80016ca:	3b01      	subs	r3, #1
 80016cc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_InitTick+0xd0>)
 80016d0:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_InitTick+0xd4>)
 80016d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_InitTick+0xd0>)
 80016d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_InitTick+0xd0>)
 80016de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_InitTick+0xd0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_InitTick+0xd0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016ee:	480b      	ldr	r0, [pc, #44]	@ (800171c <HAL_InitTick+0xd0>)
 80016f0:	f015 fa65 	bl	8016bbe <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d104      	bne.n	8001704 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016fa:	4808      	ldr	r0, [pc, #32]	@ (800171c <HAL_InitTick+0xd0>)
 80016fc:	f015 fab6 	bl	8016c6c <HAL_TIM_Base_Start_IT>
 8001700:	4603      	mov	r3, r0
 8001702:	e000      	b.n	8001706 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
}
 8001706:	4618      	mov	r0, r3
 8001708:	3740      	adds	r7, #64	@ 0x40
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	24000050 	.word	0x24000050
 8001714:	58024400 	.word	0x58024400
 8001718:	431bde83 	.word	0x431bde83
 800171c:	24000358 	.word	0x24000358
 8001720:	40001000 	.word	0x40001000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <TIM6_DAC_IRQHandler+0x10>)
 8001762:	f015 fafb 	bl	8016d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	24000358 	.word	0x24000358

08001770 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <LTDC_IRQHandler+0x10>)
 8001776:	f011 fa05 	bl	8012b84 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	240001d4 	.word	0x240001d4

08001784 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA2D_IRQHandler+0x10>)
 800178a:	f00f fe95 	bl	80114b8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2400016c 	.word	0x2400016c

08001798 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <QUADSPI_IRQHandler+0x10>)
 800179e:	f011 feeb 	bl	8013578 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2400027c 	.word	0x2400027c

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c6:	f029 fecf 	bl	802b568 <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
	return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ee:	bf00      	nop
 80017f0:	e7fd      	b.n	80017ee <_exit+0x12>

080017f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001804:	f3af 8000 	nop.w
 8001808:	4601      	mov	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
	}

return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_close>:
	}
	return len;
}

int _close(int file)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001854:	605a      	str	r2, [r3, #4]
	return 0;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_isatty>:

int _isatty(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
	return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f029 fe50 	bl	802b568 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	24080000 	.word	0x24080000
 80018f4:	00001000 	.word	0x00001000
 80018f8:	240003a4 	.word	0x240003a4
 80018fc:	2400bcb0 	.word	0x2400bcb0

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001904:	f00c fe5a 	bl	800e5bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001908:	480c      	ldr	r0, [pc, #48]	@ (800193c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190a:	490d      	ldr	r1, [pc, #52]	@ (8001940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001910:	e002      	b.n	8001918 <LoopCopyDataInit>

08001912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001916:	3304      	adds	r3, #4

08001918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800191c:	d3f9      	bcc.n	8001912 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001920:	4c0a      	ldr	r4, [pc, #40]	@ (800194c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001924:	e001      	b.n	800192a <LoopFillZerobss>

08001926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001928:	3204      	adds	r2, #4

0800192a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800192c:	d3fb      	bcc.n	8001926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192e:	f029 fe21 	bl	802b574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7fe fdb1 	bl	8000498 <main>
  bx  lr
 8001936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001938:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800193c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001940:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001944:	080309d4 	.word	0x080309d4
  ldr r2, =_sbss
 8001948:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 800194c:	2400bcac 	.word	0x2400bcac

08001950 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC3_IRQHandler>

08001952 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8001956:	f001 fc5f 	bl	8003218 <touchgfx_init>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}

0800195e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001966:	f001 fc81 	bl	800326c <touchgfx_taskEntry>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    {
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	601a      	str	r2, [r3, #0]
    }
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	0802cddc 	.word	0x0802cddc

08001994 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    }
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ffe9 	bl	8001974 <_ZN8touchgfx15TouchControllerD1Ev>
 80019a2:	2104      	movs	r1, #4
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f029 fab0 	bl	802af0a <_ZdlPvj>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 80019bc:	f000 faa8 	bl	8001f10 <_ZN25STM32H745ITouchController4initEv>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f000 fabe 	bl	8001f58 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffbb 	bl	8001974 <_ZN8touchgfx15TouchControllerD1Ev>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	0802cdc4 	.word	0x0802cdc4

08001a0c <_ZN20STM32TouchControllerD0Ev>:
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ffe7 	bl	80019e8 <_ZN20STM32TouchControllerD1Ev>
 8001a1a:	2104      	movs	r1, #4
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f029 fa74 	bl	802af0a <_ZdlPvj>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d80c      	bhi.n	8001a56 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8001a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a44 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a55 	.word	0x08001a55
 8001a4c:	08001a55 	.word	0x08001a55
 8001a50:	08001a55 	.word	0x08001a55
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
 8001a54:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d80c      	bhi.n	8001a8e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8001a74:	a201      	add	r2, pc, #4	@ (adr r2, 8001a7c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 8001a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7a:	bf00      	nop
 8001a7c:	08001a8d 	.word	0x08001a8d
 8001a80:	08001a8d 	.word	0x08001a8d
 8001a84:	08001a8d 	.word	0x08001a8d
 8001a88:	08001a8d 	.word	0x08001a8d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
 8001a8c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop

08001a9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d80c      	bhi.n	8001ac6 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8001aac:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab2:	bf00      	nop
 8001ab4:	08001ac5 	.word	0x08001ac5
 8001ab8:	08001ac5 	.word	0x08001ac5
 8001abc:	08001ac5 	.word	0x08001ac5
 8001ac0:	08001ac5 	.word	0x08001ac5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8001ac4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop

08001ad4 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    {
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	601a      	str	r2, [r3, #0]
    }
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	0802e5b4 	.word	0x0802e5b4

08001af4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    }
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe9 	bl	8001ad4 <_ZN8touchgfx3HALD1Ev>
 8001b02:	217c      	movs	r1, #124	@ 0x7c
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f029 fa00 	bl	802af0a <_ZdlPvj>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	78fa      	ldrb	r2, [r7, #3]
 8001b24:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        displayOrientationChangeRequested = true;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    }
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d304      	bcc.n	8001b60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	883a      	ldrh	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d205      	bcs.n	8001b6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001b64:	219e      	movs	r1, #158	@ 0x9e
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001b68:	f029 f9fe 	bl	802af68 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b6c:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001b6e:	887b      	ldrh	r3, [r7, #2]
 8001b70:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	8013      	strh	r3, [r2, #0]
    }
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2400b8c0 	.word	0x2400b8c0
 8001b84:	2400b8c2 	.word	0x2400b8c2
 8001b88:	0802c088 	.word	0x0802c088
 8001b8c:	0802c0ec 	.word	0x0802c0ec
 8001b90:	0802c130 	.word	0x0802c130
 8001b94:	2400b8c6 	.word	0x2400b8c6
 8001b98:	2400b8c8 	.word	0x2400b8c8

08001b9c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3077 	ldrb.w	r3, [r3, #119]	@ 0x77
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4798      	blx	r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	e000      	b.n	8001bc4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001bc2:	2300      	movs	r3, #0
    }
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f017 fd17 	bl	8019608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	33a4      	adds	r3, #164	@ 0xa4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
    }
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
    {
        return false;
 8001bf8:	2300      	movs	r3, #0
    }
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double
     *                              buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d106      	bne.n	8001c2a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001c20:	f44f 712b 	mov.w	r1, #684	@ 0x2ac
 8001c24:	4811      	ldr	r0, [pc, #68]	@ (8001c6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8001c26:	f029 f99f 	bl	802af68 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	641a      	str	r2, [r3, #64]	@ 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8001c4a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8001c5a:	701a      	strb	r2, [r3, #0]
    }
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	0802c178 	.word	0x0802c178
 8001c68:	0802c1b0 	.word	0x0802c1b0
 8001c6c:	0802c130 	.word	0x0802c130
 8001c70:	2400b8ca 	.word	0x2400b8ca
 8001c74:	2400b8cb 	.word	0x2400b8cb

08001c78 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001c80:	2300      	movs	r3, #0
    }
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4798      	blx	r3
        }
    }
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3318      	adds	r3, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4798      	blx	r3
 8001ce6:	4603      	mov	r3, r0
    }
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 2074 	ldrb.w	r2, [r3, #116]	@ 0x74
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d011      	beq.n	8001d2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11e      	bne.n	8001d4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d18:	881a      	ldrh	r2, [r3, #0]
 8001d1a:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d1c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001d1e:	4a11      	ldr	r2, [pc, #68]	@ (8001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d20:	89bb      	ldrh	r3, [r7, #12]
 8001d22:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001d2a:	e010      	b.n	8001d4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00c      	beq.n	8001d4e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	@ (8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001d40:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001d44:	89fb      	ldrh	r3, [r7, #14]
 8001d46:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
    }
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	2400b8c4 	.word	0x2400b8c4
 8001d60:	2400b8c2 	.word	0x2400b8c2
 8001d64:	2400b8c0 	.word	0x2400b8c0

08001d68 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f016 fdfd 	bl	8018972 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fe9f 	bl	8001ad4 <_ZN8touchgfx3HALD1Ev>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0802d144 	.word	0x0802d144

08001da4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffe7 	bl	8001d80 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001db2:	217c      	movs	r1, #124	@ 0x7c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f029 f8a8 	bl	802af0a <_ZdlPvj>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ffca 	bl	8001d68 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f001 fd30 	bl	800384c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f001 fdbc 	bl	800397c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6839      	ldr	r1, [r7, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f001 fdbb 	bl	8003998 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fdc3 	bl	80039c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	f001 fe08 	bl	8003a70 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fd0d 	bl	8003894 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fd11 	bl	80038b4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fd13 	bl	80038d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fd15 	bl	80038ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4a05      	ldr	r2, [pc, #20]	@ (8001eec <_ZN11TouchGFXHALD1Ev+0x20>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff4f 	bl	8001d80 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	0802cdf4 	.word	0x0802cdf4

08001ef0 <_ZN11TouchGFXHALD0Ev>:
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ffe7 	bl	8001ecc <_ZN11TouchGFXHALD1Ev>
 8001efe:	217c      	movs	r1, #124	@ 0x7c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f029 f802 	bl	802af0a <_ZdlPvj>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001f16:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f1a:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001f1c:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f20:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001f22:	2308      	movs	r3, #8
 8001f24:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f00e fcfe 	bl	8010930 <BSP_TS_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d103      	bne.n	8001f4c <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e000      	b.n	8001f4e <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001f4c:	bf00      	nop
}
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	240003a8 	.word	0x240003a8

08001f58 <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001f62:	4b11      	ldr	r3, [pc, #68]	@ (8001fa8 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e014      	b.n	8001f9e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001f74:	490d      	ldr	r1, [pc, #52]	@ (8001fac <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f76:	2000      	movs	r0, #0
 8001f78:	f00e fd96 	bl	8010aa8 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001f84:	2300      	movs	r3, #0
 8001f86:	e00a      	b.n	8001f9e <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	601a      	str	r2, [r3, #0]
    return true;
 8001f9c:	2301      	movs	r3, #1
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	240003a8 	.word	0x240003a8
 8001fac:	240003ac 	.word	0x240003ac

08001fb0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f008 ffc2 	bl	800af42 <osSemaphoreNew>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001fc2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001fd0:	2128      	movs	r1, #40	@ 0x28
 8001fd2:	480e      	ldr	r0, [pc, #56]	@ (800200c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001fd4:	f028 ffc8 	bl	802af68 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2104      	movs	r1, #4
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f009 f8cf 	bl	800b180 <osMessageQueueNew>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8002010 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001fe6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001fe8:	4b09      	ldr	r3, [pc, #36]	@ (8002010 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d105      	bne.n	8001ffc <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ff4:	212c      	movs	r1, #44	@ 0x2c
 8001ff6:	4805      	ldr	r0, [pc, #20]	@ (800200c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001ff8:	f028 ffb6 	bl	802af68 <__assert_func>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	240003b8 	.word	0x240003b8
 8002004:	0802c200 	.word	0x0802c200
 8002008:	0802c24c 	.word	0x0802c24c
 800200c:	0802c27c 	.word	0x0802c27c
 8002010:	240003bc 	.word	0x240003bc
 8002014:	0802c30c 	.word	0x0802c30c

08002018 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	4618      	mov	r0, r3
 8002026:	f009 f815 	bl	800b054 <osSemaphoreAcquire>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	240003b8 	.word	0x240003b8

08002034 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002038:	4b03      	ldr	r3, [pc, #12]	@ (8002048 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f009 f85b 	bl	800b0f8 <osSemaphoreRelease>
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	240003b8 	.word	0x240003b8

0800204c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002050:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f008 fffc 	bl	800b054 <osSemaphoreAcquire>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	240003b8 	.word	0x240003b8

08002064 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8002068:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f009 f843 	bl	800b0f8 <osSemaphoreRelease>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	240003b8 	.word	0x240003b8

0800207c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	2300      	movs	r3, #0
 8002086:	2200      	movs	r2, #0
 8002088:	4903      	ldr	r1, [pc, #12]	@ (8002098 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800208a:	f009 f8ed 	bl	800b268 <osMessageQueuePut>
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	240003bc 	.word	0x240003bc
 8002098:	24000004 	.word	0x24000004

0800209c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	1d39      	adds	r1, r7, #4
 80020a8:	2300      	movs	r3, #0
 80020aa:	2200      	movs	r2, #0
 80020ac:	f009 f93c 	bl	800b328 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	1d39      	adds	r1, r7, #4
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ba:	2200      	movs	r2, #0
 80020bc:	f009 f934 	bl	800b328 <osMessageQueueGet>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	240003bc 	.word	0x240003bc

080020cc <__NVIC_EnableIRQ>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_DisableIRQ>:
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db12      	blt.n	8002140 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	490a      	ldr	r1, [pc, #40]	@ (800214c <__NVIC_DisableIRQ+0x44>)
 8002122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002126:	095b      	lsrs	r3, r3, #5
 8002128:	2001      	movs	r0, #1
 800212a:	fa00 f202 	lsl.w	r2, r0, r2
 800212e:	3320      	adds	r3, #32
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002134:	f3bf 8f4f 	dsb	sy
}
 8002138:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800213a:	f3bf 8f6f 	isb	sy
}
 800213e:	bf00      	nop
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100

08002150 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
        : color(0)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    {
    }
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
    }
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    {
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
    }
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	0802cf14 	.word	0x0802cf14

080021a4 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    }
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ffe9 	bl	8002184 <_ZN8touchgfx9DMA_QueueD1Ev>
 80021b2:	2104      	movs	r1, #4
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f028 fea8 	bl	802af0a <_ZdlPvj>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4618      	mov	r0, r3
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	3344      	adds	r3, #68	@ 0x44
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
    }
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    {
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
    }
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	0802eb0c 	.word	0x0802eb0c

08002200 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    }
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ffe9 	bl	80021e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800220e:	210c      	movs	r1, #12
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f028 fe7a 	bl	802af0a <_ZdlPvj>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	721a      	strb	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	725a      	strb	r2, [r3, #9]
    {
    }
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	0802eb0c 	.word	0x0802eb0c

08002254 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800225c:	2301      	movs	r3, #1
    }
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3328      	adds	r3, #40	@ 0x28
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3
    }
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
        return instance;
 800228c:	4b03      	ldr	r3, [pc, #12]	@ (800229c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
    }
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2400b8cc 	.word	0x2400b8cc

080022a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3314      	adds	r3, #20
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4610      	mov	r0, r2
 80022b8:	4798      	blx	r3
    }
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80022ca:	f7ff ffdd 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ffe5 	bl	80022a0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	330c      	adds	r3, #12
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff30 	bl	8002150 <_ZN8touchgfx9colortypeC1Ev>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80022fc:	b5b0      	push	{r4, r5, r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	330c      	adds	r3, #12
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7ff ff87 	bl	8002220 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <_ZN8STM32DMAC1Ev+0x50>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f103 000c 	add.w	r0, r3, #12
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3320      	adds	r3, #32
 8002322:	2260      	movs	r2, #96	@ 0x60
 8002324:	4619      	mov	r1, r3
 8002326:	f017 fad5 	bl	80198d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3320      	adds	r3, #32
 800232e:	245f      	movs	r4, #95	@ 0x5f
 8002330:	461d      	mov	r5, r3
 8002332:	e004      	b.n	800233e <_ZN8STM32DMAC1Ev+0x42>
 8002334:	4628      	mov	r0, r5
 8002336:	f7ff ffd2 	bl	80022de <_ZN8touchgfx6BlitOpC1Ev>
 800233a:	3c01      	subs	r4, #1
 800233c:	3520      	adds	r5, #32
 800233e:	2c00      	cmp	r4, #0
 8002340:	daf8      	bge.n	8002334 <_ZN8STM32DMAC1Ev+0x38>
{
}
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bdb0      	pop	{r4, r5, r7, pc}
 800234c:	0802cec4 	.word	0x0802cec4

08002350 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4a09      	ldr	r2, [pc, #36]	@ (8002380 <_ZN8STM32DMAD1Ev+0x30>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800235e:	205a      	movs	r0, #90	@ 0x5a
 8002360:	f7ff fed2 	bl	8002108 <__NVIC_DisableIRQ>
}
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	330c      	adds	r3, #12
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fabf 	bl	80028ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff35 	bl	80021e0 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	0802cec4 	.word	0x0802cec4

08002384 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
}
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffdf 	bl	8002350 <_ZN8STM32DMAD1Ev>
 8002392:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f028 fdb7 	bl	802af0a <_ZdlPvj>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023b6:	4a11      	ldr	r2, [pc, #68]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023b8:	f043 0310 	orr.w	r3, r3, #16
 80023bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80023c0:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80023da:	4b08      	ldr	r3, [pc, #32]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023de:	4a07      	ldr	r2, [pc, #28]	@ (80023fc <_ZN8STM32DMA10initializeEv+0x54>)
 80023e0:	f023 0310 	bic.w	r3, r3, #16
 80023e4:	67d3      	str	r3, [r2, #124]	@ 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <_ZN8STM32DMA10initializeEv+0x58>)
 80023e8:	4a06      	ldr	r2, [pc, #24]	@ (8002404 <_ZN8STM32DMA10initializeEv+0x5c>)
 80023ea:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80023ec:	205a      	movs	r0, #90	@ 0x5a
 80023ee:	f7ff fe6d 	bl	80020cc <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	58024400 	.word	0x58024400
 8002400:	2400016c 	.word	0x2400016c
 8002404:	080022c3 	.word	0x080022c3

08002408 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

    switch (format)
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	2b0b      	cmp	r3, #11
 800241c:	d826      	bhi.n	800246c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800241e:	a201      	add	r2, pc, #4	@ (adr r2, 8002424 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	08002461 	.word	0x08002461
 8002428:	0800245b 	.word	0x0800245b
 800242c:	08002455 	.word	0x08002455
 8002430:	0800246d 	.word	0x0800246d
 8002434:	0800246d 	.word	0x0800246d
 8002438:	0800246d 	.word	0x0800246d
 800243c:	0800246d 	.word	0x0800246d
 8002440:	08002467 	.word	0x08002467
 8002444:	08002467 	.word	0x08002467
 8002448:	08002467 	.word	0x08002467
 800244c:	08002467 	.word	0x08002467
 8002450:	08002467 	.word	0x08002467
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
        break;
 8002458:	e00e      	b.n	8002478 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800245a:	2301      	movs	r3, #1
 800245c:	60fb      	str	r3, [r7, #12]
        break;
 800245e:	e00b      	b.n	8002478 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002460:	2302      	movs	r3, #2
 8002462:	60fb      	str	r3, [r7, #12]
        break;
 8002464:	e008      	b.n	8002478 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8002466:	2305      	movs	r3, #5
 8002468:	60fb      	str	r3, [r7, #12]
        break;
 800246a:	e005      	b.n	8002478 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800246c:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800246e:	4a06      	ldr	r2, [pc, #24]	@ (8002488 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002470:	2166      	movs	r1, #102	@ 0x66
 8002472:	4806      	ldr	r0, [pc, #24]	@ (800248c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002474:	f028 fd78 	bl	802af68 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	0802c350 	.word	0x0802c350
 8002488:	0802c36c 	.word	0x0802c36c
 800248c:	0802c3b8 	.word	0x0802c3b8

08002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

    switch (format)
 80024a0:	78fb      	ldrb	r3, [r7, #3]
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d821      	bhi.n	80024ea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80024a6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024e5 	.word	0x080024e5
 80024b0:	080024df 	.word	0x080024df
 80024b4:	080024d9 	.word	0x080024d9
 80024b8:	080024eb 	.word	0x080024eb
 80024bc:	080024eb 	.word	0x080024eb
 80024c0:	080024eb 	.word	0x080024eb
 80024c4:	080024eb 	.word	0x080024eb
 80024c8:	080024df 	.word	0x080024df
 80024cc:	080024df 	.word	0x080024df
 80024d0:	080024df 	.word	0x080024df
 80024d4:	080024df 	.word	0x080024df
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
        break;
 80024dc:	e00b      	b.n	80024f6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80024de:	2301      	movs	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
        break;
 80024e2:	e008      	b.n	80024f6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80024e4:	2302      	movs	r3, #2
 80024e6:	60fb      	str	r3, [r7, #12]
        break;
 80024e8:	e005      	b.n	80024f6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80024ea:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80024ec:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80024ee:	2187      	movs	r1, #135	@ 0x87
 80024f0:	4805      	ldr	r0, [pc, #20]	@ (8002508 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80024f2:	f028 fd39 	bl	802af68 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0802c350 	.word	0x0802c350
 8002504:	0802c448 	.word	0x0802c448
 8002508:	0802c3b8 	.word	0x0802c3b8

0800250c <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002514:	f240 33ef 	movw	r3, #1007	@ 0x3ef
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b089      	sub	sp, #36	@ 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	7f5b      	ldrb	r3, [r3, #29]
 8002532:	4619      	mov	r1, r3
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff67 	bl	8002408 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800253a:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7f9b      	ldrb	r3, [r3, #30]
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ff60 	bl	8002408 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002548:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7f9b      	ldrb	r3, [r3, #30]
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff9d 	bl	8002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002556:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	8b5b      	ldrh	r3, [r3, #26]
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	8a9b      	ldrh	r3, [r3, #20]
 8002562:	1ad2      	subs	r2, r2, r3
 8002564:	4b93      	ldr	r3, [pc, #588]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	8b5b      	ldrh	r3, [r3, #26]
 800256c:	461a      	mov	r2, r3
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	8a9b      	ldrh	r3, [r3, #20]
 8002572:	1ad2      	subs	r2, r2, r3
 8002574:	4b8f      	ldr	r3, [pc, #572]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002576:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	8b1b      	ldrh	r3, [r3, #24]
 800257c:	461a      	mov	r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	8a9b      	ldrh	r3, [r3, #20]
 8002582:	1ad2      	subs	r2, r2, r3
 8002584:	4b8b      	ldr	r3, [pc, #556]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002586:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002588:	4a8a      	ldr	r2, [pc, #552]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	8adb      	ldrh	r3, [r3, #22]
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	8a9b      	ldrh	r3, [r3, #20]
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	4b85      	ldr	r3, [pc, #532]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	4b83      	ldr	r3, [pc, #524]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4b81      	ldr	r3, [pc, #516]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025ae:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b8:	d035      	beq.n	8002626 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x102>
 80025ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025be:	f200 80dd 	bhi.w	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 80025c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c6:	d014      	beq.n	80025f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80025c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025cc:	f200 80d6 	bhi.w	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 80025d0:	2b80      	cmp	r3, #128	@ 0x80
 80025d2:	d056      	beq.n	8002682 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15e>
 80025d4:	2b80      	cmp	r3, #128	@ 0x80
 80025d6:	f200 80d1 	bhi.w	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 80025da:	2b40      	cmp	r3, #64	@ 0x40
 80025dc:	f000 80ba 	beq.w	8002754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	f200 80cb 	bhi.w	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d037      	beq.n	800265a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	f000 80b2 	beq.w	8002754 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
 80025f0:	e0c4      	b.n	800277c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x258>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	7f1b      	ldrb	r3, [r3, #28]
 80025f6:	061a      	lsls	r2, r3, #24
 80025f8:	496e      	ldr	r1, [pc, #440]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80025fa:	4b6f      	ldr	r3, [pc, #444]	@ (80027b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	4c6b      	ldr	r4, [pc, #428]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fdb0 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 800260c:	4603      	mov	r3, r0
 800260e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002610:	4a68      	ldr	r2, [pc, #416]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	4b66      	ldr	r3, [pc, #408]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800261c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800261e:	4b65      	ldr	r3, [pc, #404]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002620:	4a66      	ldr	r2, [pc, #408]	@ (80027bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002622:	601a      	str	r2, [r3, #0]
        break;
 8002624:	e0c2      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
 800262a:	061a      	lsls	r2, r3, #24
 800262c:	4961      	ldr	r1, [pc, #388]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800262e:	4b64      	ldr	r3, [pc, #400]	@ (80027c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	61cb      	str	r3, [r1, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	330c      	adds	r3, #12
 8002638:	4c5e      	ldr	r4, [pc, #376]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fd96 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 8002640:	4603      	mov	r3, r0
 8002642:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002644:	4a5b      	ldr	r2, [pc, #364]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002650:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002652:	4b58      	ldr	r3, [pc, #352]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002654:	4a59      	ldr	r2, [pc, #356]	@ (80027bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002656:	601a      	str	r2, [r3, #0]
        break;
 8002658:	e0a8      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	7f1b      	ldrb	r3, [r3, #28]
 800265e:	061a      	lsls	r2, r3, #24
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	4a53      	ldr	r2, [pc, #332]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800266c:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	4b4f      	ldr	r3, [pc, #316]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002678:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800267a:	4b4e      	ldr	r3, [pc, #312]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800267c:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800267e:	601a      	str	r2, [r3, #0]
        break;
 8002680:	e094      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8002682:	2301      	movs	r3, #1
 8002684:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	4b48      	ldr	r3, [pc, #288]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	7f1b      	ldrb	r3, [r3, #28]
 8002698:	061a      	lsls	r2, r3, #24
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	4a45      	ldr	r2, [pc, #276]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80026a6:	4a43      	ldr	r2, [pc, #268]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	6253      	str	r3, [r2, #36]	@ 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	4b40      	ldr	r3, [pc, #256]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026b2:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a0>
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d00d      	beq.n	80026de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ba>
 80026c2:	e020      	b.n	8002706 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80026c4:	4b3b      	ldr	r3, [pc, #236]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	4b3e      	ldr	r3, [pc, #248]	@ (80027c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	8852      	ldrh	r2, [r2, #2]
 80026d0:	3a01      	subs	r2, #1
 80026d2:	0212      	lsls	r2, r2, #8
 80026d4:	4611      	mov	r1, r2
 80026d6:	4a37      	ldr	r2, [pc, #220]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026d8:	430b      	orrs	r3, r1
 80026da:	61d3      	str	r3, [r2, #28]
                break;
 80026dc:	e01a      	b.n	8002714 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	7f1b      	ldrb	r3, [r3, #28]
 80026e2:	2bff      	cmp	r3, #255	@ 0xff
 80026e4:	d101      	bne.n	80026ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c6>
                {
                  blend = false;
 80026e6:	2300      	movs	r3, #0
 80026e8:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80026ea:	4b32      	ldr	r3, [pc, #200]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026ec:	69da      	ldr	r2, [r3, #28]
 80026ee:	4b35      	ldr	r3, [pc, #212]	@ (80027c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	8852      	ldrh	r2, [r2, #2]
 80026f6:	3a01      	subs	r2, #1
 80026f8:	0212      	lsls	r2, r2, #8
 80026fa:	4313      	orrs	r3, r2
 80026fc:	4a2d      	ldr	r2, [pc, #180]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	61d3      	str	r3, [r2, #28]
                break;
 8002704:	e006      	b.n	8002714 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002706:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002708:	4a30      	ldr	r2, [pc, #192]	@ (80027cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800270a:	f240 1111 	movw	r1, #273	@ 0x111
 800270e:	4830      	ldr	r0, [pc, #192]	@ (80027d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8002710:	f028 fc2a 	bl	802af68 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002714:	4b27      	ldr	r3, [pc, #156]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a26      	ldr	r2, [pc, #152]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800271a:	f043 0320 	orr.w	r3, r3, #32
 800271e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002720:	bf00      	nop
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f4      	bne.n	8002722 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1fe>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002738:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800273a:	2210      	movs	r2, #16
 800273c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002748:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
      break;
 800274a:	e02f      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800274e:	4a21      	ldr	r2, [pc, #132]	@ (80027d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 8002750:	601a      	str	r2, [r3, #0]
      break;
 8002752:	e02b      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	7f1b      	ldrb	r3, [r3, #28]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002764:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002766:	4a13      	ldr	r2, [pc, #76]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	4b10      	ldr	r3, [pc, #64]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002772:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002774:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002776:	4a11      	ldr	r2, [pc, #68]	@ (80027bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002778:	601a      	str	r2, [r3, #0]
        break;
 800277a:	e017      	b.n	80027ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	7f1b      	ldrb	r3, [r3, #28]
 8002780:	061a      	lsls	r2, r3, #24
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	4a0b      	ldr	r2, [pc, #44]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	7f5a      	ldrb	r2, [r3, #29]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7f9b      	ldrb	r3, [r3, #30]
 8002796:	429a      	cmp	r2, r3
 8002798:	d003      	beq.n	80027a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27e>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800279a:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800279c:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>)
 800279e:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80027a0:	e003      	b.n	80027aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x286>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80027a2:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80027a4:	f240 2201 	movw	r2, #513	@ 0x201
 80027a8:	601a      	str	r2, [r3, #0]
        break;
 80027aa:	bf00      	nop
    }
}
 80027ac:	bf00      	nop
 80027ae:	3724      	adds	r7, #36	@ 0x24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	52001000 	.word	0x52001000
 80027b8:	0002000a 	.word	0x0002000a
 80027bc:	00020201 	.word	0x00020201
 80027c0:	00020009 	.word	0x00020009
 80027c4:	ffff00ef 	.word	0xffff00ef
 80027c8:	0802c494 	.word	0x0802c494
 80027cc:	0802c4b0 	.word	0x0802c4b0
 80027d0:	0802c3b8 	.word	0x0802c3b8
 80027d4:	00010201 	.word	0x00010201

080027d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f9b      	ldrb	r3, [r3, #30]
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff fe51 	bl	8002490 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80027ee:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80027f0:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	8adb      	ldrh	r3, [r3, #22]
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	8a9b      	ldrh	r3, [r3, #20]
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	431a      	orrs	r2, r3
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002806:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800280e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	8b5b      	ldrh	r3, [r3, #26]
 8002814:	461a      	mov	r2, r3
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	8a9b      	ldrh	r3, [r3, #20]
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800281e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d12d      	bne.n	8002884 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	8b5b      	ldrh	r3, [r3, #26]
 800282c:	461a      	mov	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	8a9b      	ldrh	r3, [r3, #20]
 8002832:	1ad2      	subs	r2, r2, r3
 8002834:	4b29      	ldr	r3, [pc, #164]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002836:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	8b5b      	ldrh	r3, [r3, #26]
 800283c:	461a      	mov	r2, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	8a9b      	ldrh	r3, [r3, #20]
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002846:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002848:	4a24      	ldr	r2, [pc, #144]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6253      	str	r3, [r2, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7f1b      	ldrb	r3, [r3, #28]
 8002852:	061a      	lsls	r2, r3, #24
 8002854:	4921      	ldr	r1, [pc, #132]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002856:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002858:	4313      	orrs	r3, r2
 800285a:	61cb      	str	r3, [r1, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	4c1e      	ldr	r4, [pc, #120]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fc82 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 8002868:	4603      	mov	r3, r0
 800286a:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002872:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800287a:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800287c:	4b17      	ldr	r3, [pc, #92]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800287e:	4a19      	ldr	r2, [pc, #100]	@ (80028e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002880:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8002882:	e027      	b.n	80028d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfc>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002884:	4a15      	ldr	r2, [pc, #84]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800288a:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	330c      	adds	r3, #12
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fc69 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 800289a:	4603      	mov	r3, r0
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f403 4478 	and.w	r4, r3, #63488	@ 0xf800
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fc60 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80028b4:	431c      	orrs	r4, r3
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fc56 	bl	800216c <_ZNK8touchgfx9colortypecvmEv>
 80028c0:	4603      	mov	r3, r0
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	4a04      	ldr	r2, [pc, #16]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80028ca:	4323      	orrs	r3, r4
 80028cc:	6393      	str	r3, [r2, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80028ce:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x104>)
 80028d0:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	52001000 	.word	0x52001000
 80028e0:	00010009 	.word	0x00010009
 80028e4:	00020201 	.word	0x00020201
 80028e8:	00030201 	.word	0x00030201

080028ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	4a05      	ldr	r2, [pc, #20]	@ (800290c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fc41 	bl	8002184 <_ZN8touchgfx9DMA_QueueD1Ev>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	0802eb5c 	.word	0x0802eb5c

08002910 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffe7 	bl	80028ec <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800291e:	2114      	movs	r1, #20
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f028 faf2 	bl	802af0a <_ZdlPvj>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	801a      	strh	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	805a      	strh	r2, [r3, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	809a      	strh	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	80da      	strh	r2, [r3, #6]
    {
    }
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002968:	4a04      	ldr	r2, [pc, #16]	@ (800297c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6013      	str	r3, [r2, #0]
    }
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	2400b928 	.word	0x2400b928

08002980 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    {
 8002988:	4a04      	ldr	r2, [pc, #16]	@ (800299c <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]
    }
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	0802d130 	.word	0x0802d130

080029a0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    }
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ffe9 	bl	8002980 <_ZN8touchgfx12FontProviderD1Ev>
 80029ae:	2104      	movs	r1, #4
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f028 faaa 	bl	802af0a <_ZdlPvj>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80029ce:	4a0b      	ldr	r2, [pc, #44]	@ (80029fc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	611a      	str	r2, [r3, #16]
    {
    }
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	0802d120 	.word	0x0802d120

08002a00 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    {
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
    }
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	0802d120 	.word	0x0802d120

08002a20 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    }
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ffe9 	bl	8002a00 <_ZN8touchgfx7MVPHeapD1Ev>
 8002a2e:	2114      	movs	r1, #20
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f028 fa6a 	bl	802af0a <_ZdlPvj>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
    {
    }
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
    {
    }
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
    {
    }
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    {
    }
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
    {
    }
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
    {
 8002acc:	4a04      	ldr	r2, [pc, #16]	@ (8002ae0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
    }
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	0802d0f8 	.word	0x0802d0f8

08002ae4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    }
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ffe9 	bl	8002ac4 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002af2:	2104      	movs	r1, #4
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f028 fa08 	bl	802af0a <_ZdlPvj>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    {
 8002b0c:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	601a      	str	r2, [r3, #0]
    }
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	0802f154 	.word	0x0802f154

08002b24 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    }
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ffe9 	bl	8002b04 <_ZN8touchgfx3LCDD1Ev>
 8002b32:	2108      	movs	r1, #8
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f028 f9e8 	bl	802af0a <_ZdlPvj>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
    {
    }
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8002b6e:	6810      	ldr	r0, [r2, #0]
 8002b70:	6851      	ldr	r1, [r2, #4]
 8002b72:	c303      	stmia	r3!, {r0, r1}
    }
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
    {
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
    }
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	0802d0e0 	.word	0x0802d0e0

08002ba0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    }
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ffe9 	bl	8002b80 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002bae:	2104      	movs	r1, #4
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f028 f9aa 	bl	802af0a <_ZdlPvj>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
            : startX(0),
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	801a      	strh	r2, [r3, #0]
              startY(0),
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	805a      	strh	r2, [r3, #2]
              downX(0),
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	809a      	strh	r2, [r3, #4]
              downY(0),
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	739a      	strb	r2, [r3, #14]
        {
        }
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ffd5 	bl	8002bc0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	829a      	strh	r2, [r3, #20]
    {
    }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002c3a:	4a55      	ldr	r2, [pc, #340]	@ (8002d90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
          gestures(),
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	331c      	adds	r3, #28
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ffcc 	bl	8002c06 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3350      	adds	r3, #80	@ 0x50
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fe39 	bl	8002930 <_ZN8touchgfx4RectC1Ev>
          listener(0),
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	659a      	str	r2, [r3, #88]	@ 0x58
          lastX(0),
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastY(0),
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	661a      	str	r2, [r3, #96]	@ 0x60
          touchSampleRate(1),
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
          mcuLoadPct(0),
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          vSyncCnt(0),
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
          vSyncForFrame(1),
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
          vSyncCompensationEnabled(false),
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          clientDirty(false),
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          swapRequested(false),
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          lastTouched(false),
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          updateMCULoad(0),
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          cc_begin(0),
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	671a      	str	r2, [r3, #112]	@ 0x70
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
          displayOrientationChangeRequested(false),
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
          useAuxiliaryLCD(false),
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
          useDMAAcceleration(true),
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
          lastRenderMethod(HARDWARE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        instance = this;
 8002d46:	4a13      	ldr	r2, [pc, #76]	@ (8002d94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002d4c:	4a12      	ldr	r2, [pc, #72]	@ (8002d98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002d4e:	8b3b      	ldrh	r3, [r7, #24]
 8002d50:	8013      	strh	r3, [r2, #0]
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002d54:	881a      	ldrh	r2, [r3, #0]
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002d58:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002d5a:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002d5c:	8bbb      	ldrh	r3, [r7, #28]
 8002d5e:	8013      	strh	r3, [r2, #0]
 8002d60:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	4b0f      	ldr	r3, [pc, #60]	@ (8002da4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002d66:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002d6e:	8b3a      	ldrh	r2, [r7, #24]
 8002d70:	8bbb      	ldrh	r3, [r7, #28]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	bf34      	ite	cc
 8002d76:	2301      	movcc	r3, #1
 8002d78:	2300      	movcs	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	0802e5b4 	.word	0x0802e5b4
 8002d94:	2400b8cc 	.word	0x2400b8cc
 8002d98:	2400b8c0 	.word	0x2400b8c0
 8002d9c:	2400b8c6 	.word	0x2400b8c6
 8002da0:	2400b8c2 	.word	0x2400b8c2
 8002da4:	2400b8c8 	.word	0x2400b8c8
 8002da8:	2400b8c4 	.word	0x2400b8c4

08002dac <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	4a05      	ldr	r2, [pc, #20]	@ (8002dcc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fe81 	bl	8002ac4 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	0802f268 	.word	0x0802f268

08002dd0 <_ZN8touchgfx11ApplicationD0Ev>:
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ffe7 	bl	8002dac <_ZN8touchgfx11ApplicationD1Ev>
 8002dde:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f028 f891 	bl	802af0a <_ZdlPvj>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f804 	bl	8002e08 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4610      	mov	r0, r2
 8002e54:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        }
    }
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff97 	bl	8002dac <_ZN8touchgfx11ApplicationD1Ev>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	0802d09c 	.word	0x0802d09c

08002e8c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ffe7 	bl	8002e68 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e9a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f028 f833 	bl	802af0a <_ZdlPvj>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	4a08      	ldr	r2, [pc, #32]	@ (8002edc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 fb09 	bl	80034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ffcb 	bl	8002e68 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	0802d040 	.word	0x0802d040

08002ee0 <_ZN23FrontendApplicationBaseD0Ev>:
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffe1 	bl	8002eb0 <_ZN23FrontendApplicationBaseD1Ev>
 8002eee:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f028 f809 	bl	802af0a <_ZdlPvj>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	4a05      	ldr	r2, [pc, #20]	@ (8002f24 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ffcb 	bl	8002eb0 <_ZN23FrontendApplicationBaseD1Ev>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	0802cffc 	.word	0x0802cffc

08002f28 <_ZN19FrontendApplicationD0Ev>:
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ffe7 	bl	8002f04 <_ZN19FrontendApplicationD1Ev>
 8002f36:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f027 ffe5 	bl	802af0a <_ZdlPvj>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f007 fdc7 	bl	800aaec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f018 fd67 	bl	801ba34 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fb1e 	bl	80045bc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	f7ff fd0d 	bl	80029c0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	601a      	str	r2, [r3, #0]
    {

    }
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	0802cfe8 	.word	0x0802cfe8

08002fbc <__tcf_0>:
            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4801      	ldr	r0, [pc, #4]	@ (8002fc8 <__tcf_0+0xc>)
 8002fc2:	f000 f95d 	bl	8003280 <_ZN12FrontendHeapD1Ev>
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	240003c0 	.word	0x240003c0

08002fcc <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002fd0:	4b11      	ldr	r3, [pc, #68]	@ (8003018 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f3bf 8f5b 	dmb	ish
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d013      	beq.n	8003012 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8002fea:	480b      	ldr	r0, [pc, #44]	@ (8003018 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8002fec:	f027 ff8f 	bl	802af0e <__cxa_guard_acquire>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <_ZN12FrontendHeap11getInstanceEv+0x46>
 8003000:	4806      	ldr	r0, [pc, #24]	@ (800301c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8003002:	f000 f867 	bl	80030d4 <_ZN12FrontendHeapC1Ev>
 8003006:	4806      	ldr	r0, [pc, #24]	@ (8003020 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8003008:	f027 ffcc 	bl	802afa4 <atexit>
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800300e:	f027 ff8a 	bl	802af26 <__cxa_guard_release>
        return instance;
 8003012:	4b02      	ldr	r3, [pc, #8]	@ (800301c <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	240010a8 	.word	0x240010a8
 800301c:	240003c0 	.word	0x240003c0
 8003020:	08002fbd 	.word	0x08002fbd

08003024 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fce3 	bl	8002a00 <_ZN8touchgfx7MVPHeapD1Ev>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0802cfe8 	.word	0x0802cfe8

08003048 <_ZN16FrontendHeapBaseD0Ev>:
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ffe7 	bl	8003024 <_ZN16FrontendHeapBaseD1Ev>
 8003056:	2114      	movs	r1, #20
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f027 ff56 	bl	802af0a <_ZdlPvj>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f014 fc56 	bl	8017924 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003078:	4a03      	ldr	r2, [pc, #12]	@ (8003088 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0802cfb4 	.word	0x0802cfb4

0800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4618      	mov	r0, r3
 8003098:	f014 fc44 	bl	8017924 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800309c:	4a03      	ldr	r2, [pc, #12]	@ (80030ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	0802cf80 	.word	0x0802cf80

080030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f014 fc32 	bl	8017924 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80030c0:	4a03      	ldr	r2, [pc, #12]	@ (80030d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0802cf4c 	.word	0x0802cf4c

080030d4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]
        app(model, *this)
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0114 	add.w	r1, r3, #20
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f603 344c 	addw	r4, r3, #2892	@ 0xb4c
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
        app(model, *this)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4623      	mov	r3, r4
 80030fa:	f7ff ff45 	bl	8002f88 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <_ZN12FrontendHeapC1Ev+0x8c>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3314      	adds	r3, #20
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ffad 	bl	8003068 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	332c      	adds	r3, #44	@ 0x2c
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ffba 	bl	800308c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ffc6 	bl	80030b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f603 308c 	addw	r0, r3, #2956	@ 0xb8c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4619      	mov	r1, r3
 8003134:	f007 f830 	bl	800a198 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f603 43e4 	addw	r3, r3, #3300	@ 0xce4
 800313e:	4618      	mov	r0, r3
 8003140:	f007 fcc6 	bl	800aad0 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7ff ff0d 	bl	8002f6e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	bf00      	nop
 8003160:	0802cf38 	.word	0x0802cf38

08003164 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	8bbb      	ldrh	r3, [r7, #28]
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	8b3b      	ldrh	r3, [r7, #24]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	f7ff fd53 	bl	8002c2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8003186:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	601a      	str	r2, [r3, #0]
    }
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	0802d144 	.word	0x0802d144

0800319c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	8bbb      	ldrh	r3, [r7, #28]
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	8b3b      	ldrh	r3, [r7, #24]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	f7ff ffd3 	bl	8003164 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
    }
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	0802cdf4 	.word	0x0802cdf4

080031d4 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	4a04      	ldr	r2, [pc, #16]	@ (80031f0 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	0802cddc 	.word	0x0802cddc

080031f4 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ffe8 	bl	80031d4 <_ZN8touchgfx15TouchControllerC1Ev>
 8003204:	4a03      	ldr	r2, [pc, #12]	@ (8003214 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4618      	mov	r0, r3
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	0802cdc4 	.word	0x0802cdc4

08003218 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003218:	b590      	push	{r4, r7, lr}
 800321a:	b085      	sub	sp, #20
 800321c:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800321e:	f000 fd59 	bl	8003cd4 <_ZN14BitmapDatabase11getInstanceEv>
 8003222:	4604      	mov	r4, r0
 8003224:	f000 fd60 	bl	8003ce8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003228:	4603      	mov	r3, r0
 800322a:	4619      	mov	r1, r3
 800322c:	2300      	movs	r3, #0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	2200      	movs	r2, #0
 8003234:	4620      	mov	r0, r4
 8003236:	f01b fe11 	bl	801ee5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800323a:	4809      	ldr	r0, [pc, #36]	@ (8003260 <touchgfx_init+0x48>)
 800323c:	f7ff fb90 	bl	8002960 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8003240:	2000      	movs	r0, #0
 8003242:	f006 fef3 	bl	800a02c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003246:	4807      	ldr	r0, [pc, #28]	@ (8003264 <touchgfx_init+0x4c>)
 8003248:	f01b fd4a 	bl	801ece0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800324c:	f7ff febe 	bl	8002fcc <_ZN12FrontendHeap11getInstanceEv>
 8003250:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003252:	4805      	ldr	r0, [pc, #20]	@ (8003268 <touchgfx_init+0x50>)
 8003254:	f7fe fdc2 	bl	8001ddc <_ZN11TouchGFXHAL10initializeEv>
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}
 8003260:	24001d48 	.word	0x24001d48
 8003264:	24000008 	.word	0x24000008
 8003268:	24001d4c 	.word	0x24001d4c

0800326c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <touchgfx_taskEntry+0x10>)
 8003272:	f015 fbe6 	bl	8018a42 <_ZN8touchgfx3HAL9taskEntryEv>
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	24001d4c 	.word	0x24001d4c

08003280 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	4a10      	ldr	r2, [pc, #64]	@ (80032cc <_ZN12FrontendHeapD1Ev+0x4c>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f603 338c 	addw	r3, r3, #2956	@ 0xb8c
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fe35 	bl	8002f04 <_ZN19FrontendApplicationD1Ev>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f603 334c 	addw	r3, r3, #2892	@ 0xb4c
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f827 	bl	80032f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	332c      	adds	r3, #44	@ 0x2c
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f844 	bl	8003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3314      	adds	r3, #20
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 f863 	bl	8003380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff feb1 	bl	8003024 <_ZN16FrontendHeapBaseD1Ev>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	0802cf38 	.word	0x0802cf38

080032d0 <_ZN12FrontendHeapD0Ev>:
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ffd1 	bl	8003280 <_ZN12FrontendHeapD1Ev>
 80032de:	f640 41e8 	movw	r1, #3304	@ 0xce8
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f027 fe11 	bl	802af0a <_ZdlPvj>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	4a05      	ldr	r2, [pc, #20]	@ (8003314 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4618      	mov	r0, r3
 8003306:	f014 fb0b 	bl	8017920 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	0802cf4c 	.word	0x0802cf4c

08003318 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f7ff ffe7 	bl	80032f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8003326:	2140      	movs	r1, #64	@ 0x40
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f027 fdee 	bl	802af0a <_ZdlPvj>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	f014 fae9 	bl	8017920 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	0802cf80 	.word	0x0802cf80

0800335c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ffe7 	bl	8003338 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800336a:	f44f 6132 	mov.w	r1, #2848	@ 0xb20
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f027 fdcb 	bl	802af0a <_ZdlPvj>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	f014 fac5 	bl	8017920 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	0802cfb4 	.word	0x0802cfb4

080033a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ffe7 	bl	8003380 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80033b2:	2118      	movs	r1, #24
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f027 fda8 	bl	802af0a <_ZdlPvj>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_01 = 0; // verdana_20_4bpp
    static const touchgfx::FontId TYPOGRAPHY_02 = 4; // verdanab_12_4bpp
    static const uint16_t NUMBER_OF_FONTS = 5;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	4a05      	ldr	r2, [pc, #20]	@ (80033e4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fad3 	bl	8002980 <_ZN8touchgfx12FontProviderD1Ev>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	0802d214 	.word	0x0802d214

080033e8 <_ZN23ApplicationFontProviderD0Ev>:
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ffe7 	bl	80033c4 <_ZN23ApplicationFontProviderD1Ev>
 80033f6:	2104      	movs	r1, #4
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f027 fd86 	bl	802af0a <_ZdlPvj>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fb73 	bl	8002b04 <_ZN8touchgfx3LCDD1Ev>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	080303f8 	.word	0x080303f8

0800342c <_ZN8touchgfx8LCD16bppD0Ev>:
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ffe7 	bl	8003408 <_ZN8touchgfx8LCD16bppD1Ev>
 800343a:	2178      	movs	r1, #120	@ 0x78
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f027 fd64 	bl	802af0a <_ZdlPvj>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_Z41__static_initialization_and_destruction_0ii>:
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af02      	add	r7, sp, #8
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d119      	bne.n	8003490 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003462:	4293      	cmp	r3, r2
 8003464:	d114      	bne.n	8003490 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8003466:	4818      	ldr	r0, [pc, #96]	@ (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003468:	f7ff fec4 	bl	80031f4 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800346c:	4817      	ldr	r0, [pc, #92]	@ (80034cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800346e:	f7fe ff45 	bl	80022fc <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8003472:	4817      	ldr	r0, [pc, #92]	@ (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003474:	f01e fdba 	bl	8021fec <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 8003478:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003486:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003488:	4910      	ldr	r1, [pc, #64]	@ (80034cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800348a:	4812      	ldr	r0, [pc, #72]	@ (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800348c:	f7ff fe86 	bl	800319c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d113      	bne.n	80034be <_Z41__static_initialization_and_destruction_0ii+0x72>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800349c:	4293      	cmp	r3, r2
 800349e:	d10e      	bne.n	80034be <_Z41__static_initialization_and_destruction_0ii+0x72>
 80034a0:	480c      	ldr	r0, [pc, #48]	@ (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80034a2:	f7fe fd13 	bl	8001ecc <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80034a6:	480c      	ldr	r0, [pc, #48]	@ (80034d8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80034a8:	f7ff ff8c 	bl	80033c4 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80034ac:	4808      	ldr	r0, [pc, #32]	@ (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80034ae:	f7ff ffab 	bl	8003408 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80034b2:	4806      	ldr	r0, [pc, #24]	@ (80034cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80034b4:	f7fe ff4c 	bl	8002350 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80034b8:	4803      	ldr	r0, [pc, #12]	@ (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80034ba:	f7fe fa95 	bl	80019e8 <_ZN20STM32TouchControllerD1Ev>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	240010ac 	.word	0x240010ac
 80034cc:	240010b0 	.word	0x240010b0
 80034d0:	24001cd0 	.word	0x24001cd0
 80034d4:	24001d4c 	.word	0x24001d4c
 80034d8:	24000008 	.word	0x24000008

080034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	4a05      	ldr	r2, [pc, #20]	@ (80034fc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fb47 	bl	8002b80 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	0802d084 	.word	0x0802d084

08003500 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ffe7 	bl	80034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800350e:	2110      	movs	r1, #16
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f027 fcfa 	bl	802af0a <_ZdlPvj>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8003528:	2301      	movs	r3, #1
    }
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800353e:	2338      	movs	r3, #56	@ 0x38
    }
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003558:	887a      	ldrh	r2, [r7, #2]
 800355a:	4613      	mov	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	3308      	adds	r3, #8
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4413      	add	r3, r2
    }
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE1EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	3308      	adds	r3, #8
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	4413      	add	r3, r2
    }
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80035a4:	2301      	movs	r3, #1
    }
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80035ba:	f640 3318 	movw	r3, #2840	@ 0xb18
    }
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	460b      	mov	r3, r1
 80035d4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	f640 3218 	movw	r2, #2840	@ 0xb18
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	3308      	adds	r3, #8
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
    }
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	f640 3218 	movw	r2, #2840	@ 0xb18
 8003604:	fb02 f303 	mul.w	r3, r2, r3
 8003608:	3308      	adds	r3, #8
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
    }
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003622:	2301      	movs	r3, #1
    }
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003638:	2310      	movs	r3, #16
    }
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_ZN8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	3308      	adds	r3, #8
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
    }
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI25Localize_AnomalyPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	3308      	adds	r3, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
    }
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	1052      	asrs	r2, r2, #1
 800369c:	1899      	adds	r1, r3, r2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	e00a      	b.n	80036c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	68d2      	ldr	r2, [r2, #12]
 80036b8:	1052      	asrs	r2, r2, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	4413      	add	r3, r2
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4608      	mov	r0, r1
 80036c8:	4798      	blx	r3
    }
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d001      	beq.n	8003704 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003704:	2300      	movs	r3, #0
    }
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <_GLOBAL__sub_I_touchgfx_init>:
 8003712:	b580      	push	{r7, lr}
 8003714:	af00      	add	r7, sp, #0
 8003716:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800371a:	2001      	movs	r0, #1
 800371c:	f7ff fe96 	bl	800344c <_Z41__static_initialization_and_destruction_0ii>
 8003720:	bd80      	pop	{r7, pc}

08003722 <_GLOBAL__sub_D_touchgfx_init>:
 8003722:	b580      	push	{r7, lr}
 8003724:	af00      	add	r7, sp, #0
 8003726:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800372a:	2000      	movs	r0, #0
 800372c:	f7ff fe8e 	bl	800344c <_Z41__static_initialization_and_destruction_0ii>
 8003730:	bd80      	pop	{r7, pc}

08003732 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3320      	adds	r3, #32
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	4798      	blx	r3
    }
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800375c:	3301      	adds	r3, #1
 800375e:	b2da      	uxtb	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    }
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <__NVIC_EnableIRQ>:
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	88fb      	ldrh	r3, [r7, #6]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4907      	ldr	r1, [pc, #28]	@ (80037ac <__NVIC_EnableIRQ+0x38>)
 800378e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000e100 	.word	0xe000e100

080037b0 <__NVIC_DisableIRQ>:
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db12      	blt.n	80037e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	490a      	ldr	r1, [pc, #40]	@ (80037f4 <__NVIC_DisableIRQ+0x44>)
 80037ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	3320      	adds	r3, #32
 80037d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80037dc:	f3bf 8f4f 	dsb	sy
}
 80037e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80037e2:	f3bf 8f6f 	isb	sy
}
 80037e6:	bf00      	nop
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	@ (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800384c:	b5b0      	push	{r4, r5, r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4618      	mov	r0, r3
 8003858:	f015 f8e1 	bl	8018a1e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800385c:	687d      	ldr	r5, [r7, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3360      	adds	r3, #96	@ 0x60
 8003864:	681c      	ldr	r4, [r3, #0]
 8003866:	f018 fa11 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 800386a:	4603      	mov	r3, r0
 800386c:	4619      	mov	r1, r3
 800386e:	4628      	mov	r0, r5
 8003870:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3384      	adds	r3, #132	@ 0x84
 800387a:	681c      	ldr	r4, [r3, #0]
 800387c:	2300      	movs	r3, #0
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8003880:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8003884:	47a0      	blx	r4
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bdb0      	pop	{r4, r5, r7, pc}
 800388e:	bf00      	nop
 8003890:	d0200000 	.word	0xd0200000

08003894 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800389c:	2109      	movs	r1, #9
 800389e:	205a      	movs	r0, #90	@ 0x5a
 80038a0:	f7ff ffaa 	bl	80037f8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80038a4:	2109      	movs	r1, #9
 80038a6:	2058      	movs	r0, #88	@ 0x58
 80038a8:	f7ff ffa6 	bl	80037f8 <__NVIC_SetPriority>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80038bc:	205a      	movs	r0, #90	@ 0x5a
 80038be:	f7ff ff59 	bl	8003774 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80038c2:	2058      	movs	r0, #88	@ 0x58
 80038c4:	f7ff ff56 	bl	8003774 <__NVIC_EnableIRQ>
}
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80038d8:	205a      	movs	r0, #90	@ 0x5a
 80038da:	f7ff ff69 	bl	80037b0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80038de:	2058      	movs	r0, #88	@ 0x58
 80038e0:	f7ff ff66 	bl	80037b0 <__NVIC_DisableIRQ>
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003906:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800391a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	50001000 	.word	0x50001000
 8003940:	24001dc8 	.word	0x24001dc8
 8003944:	24001dca 	.word	0x24001dca

08003948 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4618      	mov	r0, r3
 8003954:	f015 f84a 	bl	80189ec <_ZN8touchgfx3HAL10beginFrameEv>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4618      	mov	r0, r3
 800396e:	f015 f849 	bl	8018a04 <_ZN8touchgfx3HAL8endFrameEv>

}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	50001084 	.word	0x50001084

08003998 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80039a2:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	50001084 	.word	0x50001084
 80039c0:	50001000 	.word	0x50001000

080039c4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f014 ffd3 	bl	801897e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039d8:	4b24      	ldr	r3, [pc, #144]	@ (8003a6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf14      	ite	ne
 80039e4:	2301      	movne	r3, #1
 80039e6:	2300      	moveq	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d03a      	beq.n	8003a64 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa0>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039ee:	4b1f      	ldr	r3, [pc, #124]	@ (8003a6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039f6:	f3bf 8f4f 	dsb	sy
}
 80039fa:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80039fc:	4b1b      	ldr	r3, [pc, #108]	@ (8003a6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 80039fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a02:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	0b5b      	lsrs	r3, r3, #13
 8003a08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a0c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a16:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003a20:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a26:	4911      	ldr	r1, [pc, #68]	@ (8003a6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1e5a      	subs	r2, r3, #1
 8003a32:	60fa      	str	r2, [r7, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	bf14      	ite	ne
 8003a38:	2301      	movne	r3, #1
 8003a3a:	2300      	moveq	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ea      	bne.n	8003a18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	613a      	str	r2, [r7, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf14      	ite	ne
 8003a4c:	2301      	movne	r3, #1
 8003a4e:	2300      	moveq	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1db      	bne.n	8003a0e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a56:	f3bf 8f4f 	dsb	sy
}
 8003a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a5c:	f3bf 8f6f 	isb	sy
}
 8003a60:	bf00      	nop
}
 8003a62:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a64:	bf00      	nop
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	f015 f8e6 	bl	8018c56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8003a8a:	4603      	mov	r3, r0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 8003a94:	b480      	push	{r7}
 8003a96:	b087      	sub	sp, #28
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d03a      	beq.n	8003b28 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003ab2:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003aba:	f3bf 8f4f 	dsb	sy
}
 8003abe:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac6:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ad0:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	08db      	lsrs	r3, r3, #3
 8003ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ada:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003ae4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003aea:	4912      	ldr	r1, [pc, #72]	@ (8003b34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	60fa      	str	r2, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1ea      	bne.n	8003adc <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	613a      	str	r2, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1db      	bne.n	8003ad2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b1a:	f3bf 8f4f 	dsb	sy
}
 8003b1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b20:	f3bf 8f6f 	isb	sy
}
 8003b24:	bf00      	nop
}
 8003b26:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003b28:	bf00      	nop
 8003b2a:	371c      	adds	r7, #28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d03a      	beq.n	8003bcc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003b5e:	f3bf 8f4f 	dsb	sy
}
 8003b62:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b6a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b74:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b7e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003b88:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003b8e:	4912      	ldr	r1, [pc, #72]	@ (8003bd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
      } while (ways-- != 0U);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	60fa      	str	r2, [r7, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ea      	bne.n	8003b80 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	613a      	str	r2, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1db      	bne.n	8003b76 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003bbe:	f3bf 8f4f 	dsb	sy
}
 8003bc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bc4:	f3bf 8f6f 	isb	sy
}
 8003bc8:	bf00      	nop
}
 8003bca:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003bcc:	bf00      	nop
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <HAL_LTDC_LineEventCallback+0x74>)
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_LTDC_LineEventCallback+0x78>)
 8003bea:	8812      	ldrh	r2, [r2, #0]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf0c      	ite	eq
 8003bf0:	2301      	moveq	r3, #1
 8003bf2:	2300      	movne	r3, #0
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d017      	beq.n	8003c2a <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003bfa:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <HAL_LTDC_LineEventCallback+0x7c>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f00f f8b5 	bl	8012d70 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003c06:	f7fe fb3f 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fd9e 	bl	800374e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003c12:	f7fe fa33 	bl	800207c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003c16:	f7fe fb37 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f015 fcf3 	bl	8019608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003c22:	2000      	movs	r0, #0
 8003c24:	f7fd ff02 	bl	8001a2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8003c28:	e00e      	b.n	8003c48 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_LTDC_LineEventCallback+0x78>)
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f00f f89d 	bl	8012d70 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7fd ff14 	bl	8001a64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 8003c3c:	f7fe fb24 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fd75 	bl	8003732 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 8003c48:	bf00      	nop
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	50001000 	.word	0x50001000
 8003c54:	24001dc8 	.word	0x24001dc8
 8003c58:	24001dca 	.word	0x24001dca

08003c5c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003c68:	887b      	ldrh	r3, [r7, #2]
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d82c      	bhi.n	8003cc8 <_ZN23ApplicationFontProvider7getFontEt+0x6c>
 8003c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003ca1 	.word	0x08003ca1
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cb5 	.word	0x08003cb5
 8003c88:	08003cbf 	.word	0x08003cbf
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003c8c:	f006 fa46 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003c90:	4603      	mov	r3, r0
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	e019      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003c96:	f006 fa41 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	e014      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::SMALL:
        // verdanab_8_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003ca0:	f006 fa3c 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	e00f      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_00:
        // verdanab_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8003caa:	f006 fa37 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	e00a      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_01:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003cb4:	f006 fa32 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	e005      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    case Typography::TYPOGRAPHY_02:
        // verdanab_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 8003cbe:	f006 fa2d 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	e000      	b.n	8003cca <_ZN23ApplicationFontProvider7getFontEt+0x6e>
    default:
        return 0;
 8003cc8:	2300      	movs	r3, #0
    }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop

08003cd4 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003cd8:	4b02      	ldr	r3, [pc, #8]	@ (8003ce4 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	0802d220 	.word	0x0802d220

08003ce8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003cec:	230e      	movs	r3, #14
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    {
 8003d00:	4a04      	ldr	r2, [pc, #16]	@ (8003d14 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
    }
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	0802d6c4 	.word	0x0802d6c4

08003d18 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    }
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ffe9 	bl	8003cf8 <_ZN8touchgfx4FontD1Ev>
 8003d26:	2110      	movs	r1, #16
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f027 f8ee 	bl	802af0a <_ZdlPvj>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e010      	b.n	8003d70 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	681c      	ldr	r4, [r3, #0]
 8003d5e:	f107 030f 	add.w	r3, r7, #15
 8003d62:	f107 0210 	add.w	r2, r7, #16
 8003d66:	8879      	ldrh	r1, [r7, #2]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	47a0      	blx	r4
 8003d6c:	6178      	str	r0, [r7, #20]
        return glyph;
 8003d6e:	697b      	ldr	r3, [r7, #20]
    }
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	895b      	ldrh	r3, [r3, #10]
    }
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	899b      	ldrh	r3, [r3, #12]
    }
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	889b      	ldrh	r3, [r3, #4]
    }
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	889b      	ldrh	r3, [r3, #4]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	7992      	ldrb	r2, [r2, #6]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
    }
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	79db      	ldrb	r3, [r3, #7]
 8003dec:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003df0:	b2db      	uxtb	r3, r3
    }
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	79db      	ldrb	r3, [r3, #7]
 8003e0a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e0e:	b2db      	uxtb	r3, r3
    }
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	4a05      	ldr	r2, [pc, #20]	@ (8003e3c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff ff63 	bl	8003cf8 <_ZN8touchgfx4FontD1Ev>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0802f52c 	.word	0x0802f52c

08003e40 <_ZN8touchgfx9ConstFontD0Ev>:
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffe7 	bl	8003e1c <_ZN8touchgfx9ConstFontD1Ev>
 8003e4e:	2118      	movs	r1, #24
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f027 f85a 	bl	802af0a <_ZdlPvj>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <_ZN8touchgfx13GeneratedFontD1Ev>:
 * An GeneratedFont has both glyph table and glyph data placed in a flash which
 * supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	4a05      	ldr	r2, [pc, #20]	@ (8003e80 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ffd3 	bl	8003e1c <_ZN8touchgfx9ConstFontD1Ev>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	0802d50c 	.word	0x0802d50c

08003e84 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7ff ffe7 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003e92:	2128      	movs	r1, #40	@ 0x28
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f027 f838 	bl	802af0a <_ZdlPvj>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZN8touchgfx9TypedTextD1Ev>:
    virtual ~TypedText()
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    {
 8003eac:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]
    }
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	0802d340 	.word	0x0802d340

08003ec4 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
    }
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff ffe9 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
 8003ed2:	2108      	movs	r1, #8
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f027 f818 	bl	802af0a <_ZdlPvj>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_ZN8touchgfx4RectC1Essss>:
     * @param  x      The x coordinate.
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	4608      	mov	r0, r1
 8003f06:	4611      	mov	r1, r2
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	813b      	strh	r3, [r7, #8]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80fb      	strh	r3, [r7, #6]
        : x(x), y(y), width(width), height(height)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	897a      	ldrh	r2, [r7, #10]
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	893a      	ldrh	r2, [r7, #8]
 8003f20:	805a      	strh	r2, [r3, #2]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88fa      	ldrh	r2, [r7, #6]
 8003f26:	809a      	strh	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8b3a      	ldrh	r2, [r7, #24]
 8003f2c:	80da      	strh	r2, [r3, #6]
    {
    }
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8003f44:	4a14      	ldr	r2, [pc, #80]	@ (8003f98 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	601a      	str	r2, [r3, #0]
        : rect(),
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe fcee 	bl	8002930 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	330c      	adds	r3, #12
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fe fce9 	bl	8002930 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	0802f4c8 	.word	0x0802f4c8

08003f9c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    {
 8003fa4:	4a04      	ldr	r2, [pc, #16]	@ (8003fb8 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]
    }
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	0802f4c8 	.word	0x0802f4c8

08003fbc <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    }
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ffe9 	bl	8003f9c <_ZN8touchgfx8DrawableD1Ev>
 8003fca:	2128      	movs	r1, #40	@ 0x28
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f026 ff9c 	bl	802af0a <_ZdlPvj>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8003fe4:	2300      	movs	r3, #0
    }
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
    {
        return rect;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3304      	adds	r3, #4
    }
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param  width  The width of this Drawable.
     * @param  height The height of this Drawable.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	4608      	mov	r0, r1
 8004014:	4611      	mov	r1, r2
 8004016:	461a      	mov	r2, r3
 8004018:	4603      	mov	r3, r0
 800401a:	817b      	strh	r3, [r7, #10]
 800401c:	460b      	mov	r3, r1
 800401e:	813b      	strh	r3, [r7, #8]
 8004020:	4613      	mov	r3, r2
 8004022:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004024:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004028:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800402c:	4619      	mov	r1, r3
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f844 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004034:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403c:	4619      	mov	r1, r3
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f898 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZNK8touchgfx8Drawable4getYEv>:
    /**
     * Gets the y coordinate of this Drawable, relative to its parent.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	809a      	strh	r2, [r3, #4]
    }
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	80da      	strh	r2, [r3, #6]
    }
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	332c      	adds	r3, #44	@ 0x2c
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80040d8:	4611      	mov	r1, r2
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
        setY(y);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3330      	adds	r3, #48	@ 0x30
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040ea:	4611      	mov	r1, r2
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
    }
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	887a      	ldrh	r2, [r7, #2]
 8004108:	811a      	strh	r2, [r3, #8]
    }
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	887a      	ldrh	r2, [r7, #2]
 8004126:	815a      	strh	r2, [r3, #10]
    }
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    {
    }
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
    {
    }
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
    {
    }
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3334      	adds	r3, #52	@ 0x34
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004190:	4611      	mov	r1, r2
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
        setHeight(height);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3338      	adds	r3, #56	@ 0x38
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80041a2:	4611      	mov	r1, r2
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
    }
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
    {
    }
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
    {
    }
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]
 800421a:	4613      	mov	r3, r2
 800421c:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3350      	adds	r3, #80	@ 0x50
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	8879      	ldrh	r1, [r7, #2]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800422e:	b292      	uxth	r2, r2
 8004230:	1a8a      	subs	r2, r1, r2
 8004232:	b292      	uxth	r2, r2
 8004234:	b210      	sxth	r0, r2
 8004236:	8839      	ldrh	r1, [r7, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800423e:	b292      	uxth	r2, r2
 8004240:	1a8a      	subs	r2, r1, r2
 8004242:	b292      	uxth	r2, r2
 8004244:	b212      	sxth	r2, r2
 8004246:	4601      	mov	r1, r0
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	4798      	blx	r3
    }
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004262:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800426a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004272:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff ffe1 	bl	8004254 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]
    }
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <_ZN8touchgfx3HAL3lcdEv+0x22>
 80042b8:	4b08      	ldr	r3, [pc, #32]	@ (80042dc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c8:	e002      	b.n	80042d0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 80042ca:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
    }
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2400b8cc 	.word	0x2400b8cc

080042e0 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80042e8:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	721a      	strb	r2, [r3, #8]
    {
    }
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	0802d4e8 	.word	0x0802d4e8

0800430c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    {
 8004314:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
    }
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	0802d4e8 	.word	0x0802d4e8

0800432c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    }
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff ffe9 	bl	800430c <_ZN8touchgfx10TransitionD1Ev>
 800433a:	210c      	movs	r1, #12
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f026 fde4 	bl	802af0a <_ZdlPvj>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
    {
    }
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
    {
    }
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    {
    }
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->draw();
 8004390:	f017 fc7c 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8004394:	4603      	mov	r3, r0
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	3230      	adds	r2, #48	@ 0x30
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	4790      	blx	r2
    }
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	605a      	str	r2, [r3, #4]
    }
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f017 fcc6 	bl	801bd60 <_ZN8touchgfx11ApplicationC1Ev>
 80043d4:	4a09      	ldr	r2, [pc, #36]	@ (80043fc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
          pendingScreenTransitionCallback(0)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        instance = this;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a04      	ldr	r2, [pc, #16]	@ (8004400 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 80043ee:	6013      	str	r3, [r2, #0]
    }
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	0802d09c 	.word	0x0802d09c
 8004400:	2400b918 	.word	0x2400b918

08004404 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	601a      	str	r2, [r3, #0]
    }
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	721a      	strb	r2, [r3, #8]
    }
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param       x    Not used since this Widget is the only "child".
     * @param       y    Not used since this Widget is the only "child".
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
 8004448:	4613      	mov	r3, r2
 800444a:	813b      	strh	r3, [r7, #8]
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fec3 	bl	80041da <_ZNK8touchgfx8Drawable9isVisibleEv>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fec9 	bl	80041f4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]
        }
    }
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	605a      	str	r2, [r3, #4]
    }
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fd48 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 80044ac:	4a03      	ldr	r2, [pc, #12]	@ (80044bc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	0802d460 	.word	0x0802d460

080044c0 <_ZN8touchgfx6WidgetD1Ev>:
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fd63 	bl	8003f9c <_ZN8touchgfx8DrawableD1Ev>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	0802d460 	.word	0x0802d460

080044e4 <_ZN8touchgfx6WidgetD0Ev>:
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffe7 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 80044f2:	2128      	movs	r1, #40	@ 0x28
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f026 fd08 	bl	802af0a <_ZdlPvj>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff56 	bl	80043c4 <_ZN8touchgfx14MVPApplicationC1Ev>
 8004518:	4a13      	ldr	r2, [pc, #76]	@ (8004568 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f92b 	bl	8004780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
      model(m)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800453a:	f7fd fea5 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 800453e:	4603      	mov	r3, r0
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	3208      	adds	r2, #8
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800454c:	2000      	movs	r0, #0
 800454e:	f005 fd6d 	bl	800a02c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8004552:	f7ff fea9 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8004556:	4603      	mov	r3, r0
 8004558:	4618      	mov	r0, r3
 800455a:	f01f fb92 	bl	8023c82 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	0802d040 	.word	0x0802d040

0800456c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4611      	mov	r1, r2
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ffe9 	bl	800456c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	3208      	adds	r2, #8
 80045aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80045ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 80045bc:	b590      	push	{r4, r7, lr}
 80045be:	b089      	sub	sp, #36	@ 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 80045ca:	4b10      	ldr	r3, [pc, #64]	@ (800460c <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	f107 0008 	add.w	r0, r7, #8
 80045d6:	f107 0318 	add.w	r3, r7, #24
 80045da:	cb0c      	ldmia	r3, {r2, r3}
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	f000 f8eb 	bl	80047b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80045e2:	f107 0308 	add.w	r3, r7, #8
 80045e6:	4619      	mov	r1, r3
 80045e8:	4620      	mov	r0, r4
 80045ea:	f7ff ffcb 	bl	8004584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff72 	bl	80034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 8004604:	bf00      	nop
 8004606:	3724      	adds	r7, #36	@ 0x24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}
 800460c:	08004611 	.word	0x08004611

08004610 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	4b04      	ldr	r3, [pc, #16]	@ (8004640 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 8004630:	4804      	ldr	r0, [pc, #16]	@ (8004644 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 8004632:	f000 f8f3 	bl	800481c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2400b90c 	.word	0x2400b90c
 8004644:	2400b908 	.word	0x2400b908

08004648 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouth()
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b089      	sub	sp, #36	@ 0x24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenWipeTransitionSouthImpl);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv+0x50>)
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	f107 0008 	add.w	r0, r7, #8
 8004662:	f107 0318 	add.w	r3, r7, #24
 8004666:	cb0c      	ldmia	r3, {r2, r3}
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	f000 f8a5 	bl	80047b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4619      	mov	r1, r3
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff ff85 	bl	8004584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800467a:	f107 0308 	add.w	r3, r7, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe ff2c 	bl	80034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 8004690:	bf00      	nop
 8004692:	3724      	adds	r7, #36	@ 0x24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	0800469d 	.word	0x0800469d

0800469c <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv>:

void FrontendApplicationBase::gotoMainScreenWipeTransitionSouthImpl()
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::WipeTransition<SOUTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x30>)
 80046bc:	4804      	ldr	r0, [pc, #16]	@ (80046d0 <_ZN23FrontendApplicationBase37gotoMainScreenWipeTransitionSouthImplEv+0x34>)
 80046be:	f000 f9c7 	bl	8004a50 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	2400b90c 	.word	0x2400b90c
 80046d0:	2400b908 	.word	0x2400b908

080046d4 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>:

// Localize_Anomaly

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorth()
{
 80046d4:	b590      	push	{r4, r7, lr}
 80046d6:	b089      	sub	sp, #36	@ 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 74a0 	add.w	r4, r3, #320	@ 0x140
 80046e2:	4b10      	ldr	r3, [pc, #64]	@ (8004724 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv+0x50>)
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	f107 0008 	add.w	r0, r7, #8
 80046ee:	f107 0318 	add.w	r3, r7, #24
 80046f2:	cb0c      	ldmia	r3, {r2, r3}
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	f000 f85f 	bl	80047b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 80046fa:	f107 0308 	add.w	r3, r7, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	4620      	mov	r0, r4
 8004702:	f7ff ff3f 	bl	8004584 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fee6 	bl	80034dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 72a0 	add.w	r2, r3, #320	@ 0x140
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
}
 800471c:	bf00      	nop
 800471e:	3724      	adds	r7, #36	@ 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	08004729 	.word	0x08004729

08004728 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv>:

void FrontendApplicationBase::gotoLocalize_AnomalyScreenWipeTransitionNorthImpl()
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af02      	add	r7, sp, #8
 800472e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Localize_AnomalyView, Localize_AnomalyPresenter, touchgfx::WipeTransition<NORTH>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f503 719c 	add.w	r1, r3, #312	@ 0x138
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x30>)
 8004748:	4804      	ldr	r0, [pc, #16]	@ (800475c <_ZN23FrontendApplicationBase49gotoLocalize_AnomalyScreenWipeTransitionNorthImplEv+0x34>)
 800474a:	f000 fa9d 	bl	8004c88 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800474e:	bf00      	nop
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	2400b90c 	.word	0x2400b90c
 800475c:	2400b908 	.word	0x2400b908

08004760 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	4a04      	ldr	r2, [pc, #16]	@ (800477c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	0802d0e0 	.word	0x0802d0e0

08004780 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun_0(0)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ffe8 	bl	8004760 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004790:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	605a      	str	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	609a      	str	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	60da      	str	r2, [r3, #12]
    }
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	0802d084 	.word	0x0802d084

080047b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4639      	mov	r1, r7
 80047c4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_0(pmemfun_0)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ffc8 	bl	8004760 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80047d0:	4a08      	ldr	r2, [pc, #32]	@ (80047f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	605a      	str	r2, [r3, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	3308      	adds	r3, #8
 80047e0:	463a      	mov	r2, r7
 80047e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	0802d084 	.word	0x0802d084

080047f8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fd6c 	bl	80042e0 <_ZN8touchgfx10TransitionC1Ev>
 8004808:	4a03      	ldr	r2, [pc, #12]	@ (8004818 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	0802d4c4 	.word	0x0802d4c4

0800481c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b08f      	sub	sp, #60	@ 0x3c
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3320      	adds	r3, #32
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4610      	mov	r0, r2
 800483a:	4798      	blx	r3
 800483c:	4603      	mov	r3, r0
 800483e:	f640 3217 	movw	r2, #2839	@ 0xb17
 8004842:	4293      	cmp	r3, r2
 8004844:	d805      	bhi.n	8004852 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004846:	4b7d      	ldr	r3, [pc, #500]	@ (8004a3c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004848:	4a7d      	ldr	r2, [pc, #500]	@ (8004a40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800484a:	21a3      	movs	r1, #163	@ 0xa3
 800484c:	487d      	ldr	r0, [pc, #500]	@ (8004a44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800484e:	f026 fb8b 	bl	802af68 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3320      	adds	r3, #32
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4610      	mov	r0, r2
 8004862:	4798      	blx	r3
 8004864:	4603      	mov	r3, r0
 8004866:	2b0f      	cmp	r3, #15
 8004868:	d805      	bhi.n	8004876 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800486a:	4b77      	ldr	r3, [pc, #476]	@ (8004a48 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800486c:	4a74      	ldr	r2, [pc, #464]	@ (8004a40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800486e:	21a4      	movs	r1, #164	@ 0xa4
 8004870:	4874      	ldr	r0, [pc, #464]	@ (8004a44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004872:	f026 fb79 	bl	802af68 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3320      	adds	r3, #32
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
 8004888:	4603      	mov	r3, r0
 800488a:	2b0b      	cmp	r3, #11
 800488c:	d805      	bhi.n	800489a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800488e:	4b6f      	ldr	r3, [pc, #444]	@ (8004a4c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004890:	4a6b      	ldr	r2, [pc, #428]	@ (8004a40 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004892:	21a5      	movs	r1, #165	@ 0xa5
 8004894:	486b      	ldr	r0, [pc, #428]	@ (8004a44 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004896:	f026 fb67 	bl	802af68 <__assert_func>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80048a6:	f017 f9f1 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 80048aa:	4603      	mov	r3, r0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f017 fa3b 	bl	801bd28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d008      	beq.n	80048cc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4610      	mov	r0, r2
 80048ca:	4798      	blx	r3
    if (*currentTrans)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d007      	beq.n	80048e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4610      	mov	r0, r2
 80048e2:	4798      	blx	r3
    if (*currentScreen)
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 80048ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3314      	adds	r3, #20
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4610      	mov	r0, r2
 80048fc:	4798      	blx	r3
    if (*currentPresenter)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d008      	beq.n	8004918 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3304      	adds	r3, #4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4610      	mov	r0, r2
 8004916:	4798      	blx	r3
    if (*currentScreen)
 8004918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4610      	mov	r0, r2
 800492e:	4798      	blx	r3
    if (*currentPresenter)
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3308      	adds	r3, #8
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4610      	mov	r0, r2
 8004948:	4798      	blx	r3
}
 800494a:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fab2 	bl	8004ebc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004958:	4603      	mov	r3, r0
 800495a:	4619      	mov	r1, r3
 800495c:	200c      	movs	r0, #12
 800495e:	f7ff fac1 	bl	8003ee4 <_ZnwjPv>
 8004962:	4604      	mov	r4, r0
 8004964:	4620      	mov	r0, r4
 8004966:	f7ff ff47 	bl	80047f8 <_ZN8touchgfx12NoTransitionC1Ev>
 800496a:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fab5 	bl	8004ee2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004978:	4603      	mov	r3, r0
 800497a:	4619      	mov	r1, r3
 800497c:	f640 3018 	movw	r0, #2840	@ 0xb18
 8004980:	f7ff fab0 	bl	8003ee4 <_ZnwjPv>
 8004984:	4604      	mov	r4, r0
 8004986:	4620      	mov	r0, r4
 8004988:	f005 fe0c 	bl	800a5a4 <_ZN8MainViewC1Ev>
 800498c:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fab7 	bl	8004f08 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800499a:	4603      	mov	r3, r0
 800499c:	4619      	mov	r1, r3
 800499e:	2010      	movs	r0, #16
 80049a0:	f7ff faa0 	bl	8003ee4 <_ZnwjPv>
 80049a4:	4604      	mov	r4, r0
 80049a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80049a8:	4620      	mov	r0, r4
 80049aa:	f005 fd6d 	bl	800a488 <_ZN13MainPresenterC1ER8MainView>
 80049ae:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049b4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ba:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80049c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ca:	3304      	adds	r3, #4
 80049cc:	e000      	b.n	80049d0 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80049ce:	2300      	movs	r3, #0
 80049d0:	4619      	mov	r1, r3
 80049d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80049d4:	f7ff fd16 	bl	8004404 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80049d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049da:	3304      	adds	r3, #4
 80049dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fd4e 	bl	8004480 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 faa0 	bl	8004f2e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	69f8      	ldr	r0, [r7, #28]
 8004a04:	4798      	blx	r3
    newPresenter->activate();
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	69b8      	ldr	r0, [r7, #24]
 8004a0e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	69f8      	ldr	r0, [r7, #28]
 8004a14:	f018 fdce 	bl	801d5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3310      	adds	r3, #16
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6978      	ldr	r0, [r7, #20]
 8004a22:	4798      	blx	r3
    newTransition->invalidate();
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6978      	ldr	r0, [r7, #20]
 8004a2e:	4798      	blx	r3
}
 8004a30:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	373c      	adds	r7, #60	@ 0x3c
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}
 8004a3c:	0802c4f0 	.word	0x0802c4f0
 8004a40:	0802c580 	.word	0x0802c580
 8004a44:	0802c64c 	.word	0x0802c64c
 8004a48:	0802c694 	.word	0x0802c694
 8004a4c:	0802c738 	.word	0x0802c738

08004a50 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b08f      	sub	sp, #60	@ 0x3c
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3320      	adds	r3, #32
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4798      	blx	r3
 8004a70:	4603      	mov	r3, r0
 8004a72:	f640 3217 	movw	r2, #2839	@ 0xb17
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d805      	bhi.n	8004a86 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 8004a7a:	4b7e      	ldr	r3, [pc, #504]	@ (8004c74 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004a7c:	4a7e      	ldr	r2, [pc, #504]	@ (8004c78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004a7e:	21a3      	movs	r1, #163	@ 0xa3
 8004a80:	487e      	ldr	r0, [pc, #504]	@ (8004c7c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004a82:	f026 fa71 	bl	802af68 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3320      	adds	r3, #32
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4610      	mov	r0, r2
 8004a96:	4798      	blx	r3
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d805      	bhi.n	8004aaa <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8004a9e:	4b78      	ldr	r3, [pc, #480]	@ (8004c80 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004aa0:	4a75      	ldr	r2, [pc, #468]	@ (8004c78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004aa2:	21a4      	movs	r1, #164	@ 0xa4
 8004aa4:	4875      	ldr	r0, [pc, #468]	@ (8004c7c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004aa6:	f026 fa5f 	bl	802af68 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3320      	adds	r3, #32
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b37      	cmp	r3, #55	@ 0x37
 8004ac0:	d805      	bhi.n	8004ace <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004ac2:	4b70      	ldr	r3, [pc, #448]	@ (8004c84 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8004ac4:	4a6c      	ldr	r2, [pc, #432]	@ (8004c78 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004ac6:	21a5      	movs	r1, #165	@ 0xa5
 8004ac8:	486c      	ldr	r0, [pc, #432]	@ (8004c7c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004aca:	f026 fa4d 	bl	802af68 <__assert_func>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004ada:	f017 f8d7 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f017 f921 	bl	801bd28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	330c      	adds	r3, #12
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
    if (*currentTrans)
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
    if (*currentScreen)
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4798      	blx	r3
    if (*currentPresenter)
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3304      	adds	r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
    if (*currentScreen)
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
    if (*currentPresenter)
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4610      	mov	r0, r2
 8004b7c:	4798      	blx	r3
}
 8004b7e:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f9df 	bl	8004f4a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	4619      	mov	r1, r3
 8004b90:	2038      	movs	r0, #56	@ 0x38
 8004b92:	f7ff f9a7 	bl	8003ee4 <_ZnwjPv>
 8004b96:	4604      	mov	r4, r0
 8004b98:	2114      	movs	r1, #20
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 fa1c 	bl	8004fd8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>
 8004ba0:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f99a 	bl	8004ee2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f640 3018 	movw	r0, #2840	@ 0xb18
 8004bb6:	f7ff f995 	bl	8003ee4 <_ZnwjPv>
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f005 fcf1 	bl	800a5a4 <_ZN8MainViewC1Ev>
 8004bc2:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f99c 	bl	8004f08 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	2010      	movs	r0, #16
 8004bd6:	f7ff f985 	bl	8003ee4 <_ZnwjPv>
 8004bda:	4604      	mov	r4, r0
 8004bdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bde:	4620      	mov	r0, r4
 8004be0:	f005 fc52 	bl	800a488 <_ZN13MainPresenterC1ER8MainView>
 8004be4:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004bea:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c00:	3304      	adds	r3, #4
 8004c02:	e000      	b.n	8004c06 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_14WipeTransitionILNS_9DirectionE1EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 8004c04:	2300      	movs	r3, #0
 8004c06:	4619      	mov	r1, r3
 8004c08:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004c0a:	f7ff fbfb 	bl	8004404 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c10:	3304      	adds	r3, #4
 8004c12:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fc33 	bl	8004480 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f985 	bl	8004f2e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69f8      	ldr	r0, [r7, #28]
 8004c3a:	4798      	blx	r3
    newPresenter->activate();
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69b8      	ldr	r0, [r7, #24]
 8004c44:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004c46:	6979      	ldr	r1, [r7, #20]
 8004c48:	69f8      	ldr	r0, [r7, #28]
 8004c4a:	f018 fcb3 	bl	801d5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3310      	adds	r3, #16
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6978      	ldr	r0, [r7, #20]
 8004c58:	4798      	blx	r3
    newTransition->invalidate();
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6978      	ldr	r0, [r7, #20]
 8004c64:	4798      	blx	r3
}
 8004c66:	bf00      	nop
    return newPresenter;
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	373c      	adds	r7, #60	@ 0x3c
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd90      	pop	{r4, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	0802c4f0 	.word	0x0802c4f0
 8004c78:	0802c7dc 	.word	0x0802c7dc
 8004c7c:	0802c64c 	.word	0x0802c64c
 8004c80:	0802c694 	.word	0x0802c694
 8004c84:	0802c738 	.word	0x0802c738

08004c88 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b08f      	sub	sp, #60	@ 0x3c
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3320      	adds	r3, #32
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4798      	blx	r3
 8004ca8:	4603      	mov	r3, r0
 8004caa:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8004cae:	d205      	bcs.n	8004cbc <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8004cb0:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	@ (8004eac <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004cb4:	21a3      	movs	r1, #163	@ 0xa3
 8004cb6:	487e      	ldr	r0, [pc, #504]	@ (8004eb0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004cb8:	f026 f956 	bl	802af68 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3320      	adds	r3, #32
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4798      	blx	r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b0f      	cmp	r3, #15
 8004cd2:	d805      	bhi.n	8004ce0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004cd4:	4b77      	ldr	r3, [pc, #476]	@ (8004eb4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004cd6:	4a75      	ldr	r2, [pc, #468]	@ (8004eac <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004cd8:	21a4      	movs	r1, #164	@ 0xa4
 8004cda:	4875      	ldr	r0, [pc, #468]	@ (8004eb0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004cdc:	f026 f944 	bl	802af68 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68da      	ldr	r2, [r3, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3320      	adds	r3, #32
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4798      	blx	r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b37      	cmp	r3, #55	@ 0x37
 8004cf6:	d805      	bhi.n	8004d04 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8004cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8004eac <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004cfc:	21a5      	movs	r1, #165	@ 0xa5
 8004cfe:	486c      	ldr	r0, [pc, #432]	@ (8004eb0 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004d00:	f026 f932 	bl	802af68 <__assert_func>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004d10:	f016 ffbc 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f017 f806 	bl	801bd28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	330c      	adds	r3, #12
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4610      	mov	r0, r2
 8004d34:	4798      	blx	r3
    if (*currentTrans)
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4798      	blx	r3
    if (*currentScreen)
 8004d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8004d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4610      	mov	r0, r2
 8004d66:	4798      	blx	r3
    if (*currentPresenter)
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4798      	blx	r3
    if (*currentScreen)
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8004d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4610      	mov	r0, r2
 8004d98:	4798      	blx	r3
    if (*currentPresenter)
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3308      	adds	r3, #8
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4610      	mov	r0, r2
 8004db2:	4798      	blx	r3
}
 8004db4:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f94d 	bl	800505c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	2038      	movs	r0, #56	@ 0x38
 8004dc8:	f7ff f88c 	bl	8003ee4 <_ZnwjPv>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	2114      	movs	r1, #20
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 f98b 	bl	80050ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>
 8004dd6:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f9c6 	bl	8005170 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4619      	mov	r1, r3
 8004de8:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8004dec:	f7ff f87a 	bl	8003ee4 <_ZnwjPv>
 8004df0:	4604      	mov	r4, r0
 8004df2:	4620      	mov	r0, r4
 8004df4:	f005 faea 	bl	800a3cc <_ZN20Localize_AnomalyViewC1Ev>
 8004df8:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f9c8 	bl	8005196 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>
 8004e06:	4603      	mov	r3, r0
 8004e08:	4619      	mov	r1, r3
 8004e0a:	2010      	movs	r0, #16
 8004e0c:	f7ff f86a 	bl	8003ee4 <_ZnwjPv>
 8004e10:	4604      	mov	r4, r0
 8004e12:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e14:	4620      	mov	r0, r4
 8004e16:	f005 fa81 	bl	800a31c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>
 8004e1a:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e20:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e26:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e2c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e36:	3304      	adds	r3, #4
 8004e38:	e000      	b.n	8004e3c <_ZN8touchgfx14makeTransitionI20Localize_AnomalyView25Localize_AnomalyPresenterNS_14WipeTransitionILNS_9DirectionE0EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004e40:	f7ff fae0 	bl	8004404 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e46:	3304      	adds	r3, #4
 8004e48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fb18 	bl	8004480 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f9b1 	bl	80051bc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69f8      	ldr	r0, [r7, #28]
 8004e70:	4798      	blx	r3
    newPresenter->activate();
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69b8      	ldr	r0, [r7, #24]
 8004e7a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004e7c:	6979      	ldr	r1, [r7, #20]
 8004e7e:	69f8      	ldr	r0, [r7, #28]
 8004e80:	f018 fb98 	bl	801d5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3310      	adds	r3, #16
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6978      	ldr	r0, [r7, #20]
 8004e8e:	4798      	blx	r3
    newTransition->invalidate();
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3314      	adds	r3, #20
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	4798      	blx	r3
}
 8004e9c:	bf00      	nop
    return newPresenter;
 8004e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	373c      	adds	r7, #60	@ 0x3c
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd90      	pop	{r4, r7, pc}
 8004ea8:	0802c4f0 	.word	0x0802c4f0
 8004eac:	0802c8bc 	.word	0x0802c8bc
 8004eb0:	0802c64c 	.word	0x0802c64c
 8004eb4:	0802c694 	.word	0x0802c694
 8004eb8:	0802c738 	.word	0x0802c738

08004ebc <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3324      	adds	r3, #36	@ 0x24
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
 8004ed8:	4603      	mov	r3, r0
    }
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3324      	adds	r3, #36	@ 0x24
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	4798      	blx	r3
 8004efe:	4603      	mov	r3, r0
    }
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3324      	adds	r3, #36	@ 0x24
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	887a      	ldrh	r2, [r7, #2]
 8004f1e:	4611      	mov	r1, r2
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	4603      	mov	r3, r0
    }
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This
     * function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE1EEEEERT_t>:
    T& at(const uint16_t index)
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3324      	adds	r3, #36	@ 0x24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	4611      	mov	r1, r2
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
    }
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7ff fa8e 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8004f80:	4a03      	ldr	r2, [pc, #12]	@ (8004f90 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev+0x20>)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	0802d374 	.word	0x0802d374

08004f94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>:
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	4a05      	ldr	r2, [pc, #20]	@ (8004fb4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev+0x20>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fa8b 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	0802d374 	.word	0x0802d374

08004fb8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD0Ev>:
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff ffe7 	bl	8004f94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 8004fc6:	2128      	movs	r1, #40	@ 0x28
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f025 ff9e 	bl	802af0a <_ZdlPvj>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff f97a 	bl	80042e0 <_ZN8touchgfx10TransitionC1Ev>
 8004fec:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x78>)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	81da      	strh	r2, [r3, #14]
          solid()
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3310      	adds	r3, #16
 8005008:	2228      	movs	r2, #40	@ 0x28
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f026 f9b2 	bl	802b376 <memset>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3310      	adds	r3, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff ffaa 	bl	8004f70 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectC1Ev>
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
            break;
        case NORTH:
        case SOUTH:
            targetValue = HAL::DISPLAY_HEIGHT;
 800501c:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b21a      	sxth	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	819a      	strh	r2, [r3, #12]
            break;
 8005026:	bf00      	nop
            // Nothing to do here
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f103 0010 	add.w	r0, r3, #16
 800502e:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x80>)
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b21a      	sxth	r2, r3
 8005034:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EEC1Eh+0x7c>)
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	b21b      	sxth	r3, r3
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	2200      	movs	r2, #0
 8005040:	2100      	movs	r1, #0
 8005042:	f7fe ffe2 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	0802d350 	.word	0x0802d350
 8005054:	2400b8c2 	.word	0x2400b8c2
 8005058:	2400b8c0 	.word	0x2400b8c0

0800505c <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE0EEEEERT_t>:
    T& at(const uint16_t index)
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3324      	adds	r3, #36	@ 0x24
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	887a      	ldrh	r2, [r7, #2]
 8005072:	4611      	mov	r1, r2
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
 8005078:	4603      	mov	r3, r0
    }
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>:
    class FullSolidRect : public Widget
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fa04 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8005094:	4a03      	ldr	r2, [pc, #12]	@ (80050a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev+0x20>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	0802d3fc 	.word	0x0802d3fc

080050a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>:
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4a05      	ldr	r2, [pc, #20]	@ (80050c8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev+0x20>)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fa01 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	0802d3fc 	.word	0x0802d3fc

080050cc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD0Ev>:
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ffe7 	bl	80050a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 80050da:	2128      	movs	r1, #40	@ 0x28
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f025 ff14 	bl	802af0a <_ZdlPvj>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh>:
    WipeTransition(const uint8_t transitionSteps = 20)
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
          solid()
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f8f0 	bl	80042e0 <_ZN8touchgfx10TransitionC1Ev>
 8005100:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x78>)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	601a      	str	r2, [r3, #0]
          animationSteps(transitionSteps),
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	725a      	strb	r2, [r3, #9]
          animationCounter(0),
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	729a      	strb	r2, [r3, #10]
          calculatedValue(0),
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	81da      	strh	r2, [r3, #14]
          solid()
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3310      	adds	r3, #16
 800511c:	2228      	movs	r2, #40	@ 0x28
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f026 f928 	bl	802b376 <memset>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3310      	adds	r3, #16
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ffaa 	bl	8005084 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectC1Ev>
            targetValue = HAL::DISPLAY_HEIGHT;
 8005130:	4b0d      	ldr	r3, [pc, #52]	@ (8005168 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b21a      	sxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	819a      	strh	r2, [r3, #12]
            break;
 800513a:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f103 0010 	add.w	r0, r3, #16
 8005142:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x80>)
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b21a      	sxth	r2, r3
 8005148:	4b07      	ldr	r3, [pc, #28]	@ (8005168 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EEC1Eh+0x7c>)
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b21b      	sxth	r3, r3
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	f7fe ff58 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	0802d3d8 	.word	0x0802d3d8
 8005168:	2400b8c2 	.word	0x2400b8c2
 800516c:	2400b8c0 	.word	0x2400b8c0

08005170 <_ZN8touchgfx17AbstractPartition2atI20Localize_AnomalyViewEERT_t>:
    T& at(const uint16_t index)
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3324      	adds	r3, #36	@ 0x24
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	887a      	ldrh	r2, [r7, #2]
 8005186:	4611      	mov	r1, r2
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	4798      	blx	r3
 800518c:	4603      	mov	r3, r0
    }
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_ZN8touchgfx17AbstractPartition2atI25Localize_AnomalyPresenterEERT_t>:
    T& at(const uint16_t index)
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	460b      	mov	r3, r1
 80051a0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3324      	adds	r3, #36	@ 0x24
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	887a      	ldrh	r2, [r7, #2]
 80051ac:	4611      	mov	r1, r2
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
 80051b2:	4603      	mov	r3, r0
    }
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterE4bindERS1_>:
    void bind(T& presenter)
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>:
class WipeTransition : public Transition
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	4a08      	ldr	r2, [pc, #32]	@ (8005204 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev+0x2c>)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3310      	adds	r3, #16
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fed2 	bl	8004f94 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRectD1Ev>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f88a 	bl	800430c <_ZN8touchgfx10TransitionD1Ev>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	0802d350 	.word	0x0802d350

08005208 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED0Ev>:
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff ffe1 	bl	80051d8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EED1Ev>
 8005216:	2138      	movs	r1, #56	@ 0x38
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f025 fe76 	bl	802af0a <_ZdlPvj>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>:
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	4a08      	ldr	r2, [pc, #32]	@ (8005254 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev+0x2c>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3310      	adds	r3, #16
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff ff34 	bl	80050a8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRectD1Ev>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f862 	bl	800430c <_ZN8touchgfx10TransitionD1Ev>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	0802d3d8 	.word	0x0802d3d8

08005258 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED0Ev>:
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7ff ffe1 	bl	8005228 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EED1Ev>
 8005266:	2138      	movs	r1, #56	@ 0x38
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f025 fe4e 	bl	802af0a <_ZdlPvj>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <_ZN8touchgfx12NoTransitionD1Ev>:
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	4a05      	ldr	r2, [pc, #20]	@ (8005298 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f83f 	bl	800430c <_ZN8touchgfx10TransitionD1Ev>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0802d4c4 	.word	0x0802d4c4

0800529c <_ZN8touchgfx12NoTransitionD0Ev>:
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ffe7 	bl	8005278 <_ZN8touchgfx12NoTransitionD1Ev>
 80052aa:	210c      	movs	r1, #12
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f025 fe2c 	bl	802af0a <_ZdlPvj>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b093      	sub	sp, #76	@ 0x4c
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f840 	bl	800434c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	7a9b      	ldrb	r3, [r3, #10]
 80052d0:	3301      	adds	r3, #1
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7a9a      	ldrb	r2, [r3, #10]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7a5b      	ldrb	r3, [r3, #9]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d82a      	bhi.n	800533a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x7e>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	7a9b      	ldrb	r3, [r3, #10]
 80052e8:	4618      	mov	r0, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7a5b      	ldrb	r3, [r3, #9]
 80052f4:	2100      	movs	r1, #0
 80052f6:	f018 f963 	bl	801d5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d019      	beq.n	8005348 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800531a:	b29b      	uxth	r3, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8005322:	2a00      	cmp	r2, #0
 8005324:	dd01      	ble.n	800532a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x6e>
 8005326:	2201      	movs	r2, #1
 8005328:	e001      	b.n	800532e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x72>
 800532a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800532e:	4413      	add	r3, r2
 8005330:	b29b      	uxth	r3, r3
 8005332:	b21a      	sxth	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	81da      	strh	r2, [r3, #14]
 8005338:	e006      	b.n	8005348 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x8c>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	729a      	strb	r2, [r3, #10]
            return;
 8005346:	e07e      	b.n	8005446 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
                break;
            }
        case SOUTH:
            {
                // Cover must have height of remaining part
                const uint16_t prevSolidHeight = solid.getHeight();
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3310      	adds	r3, #16
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe fe8a 	bl	8004066 <_ZNK8touchgfx8Drawable9getHeightEv>
 8005352:	4603      	mov	r3, r0
 8005354:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f103 0010 	add.w	r0, r3, #16
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 800535e:	881a      	ldrh	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005366:	b29b      	uxth	r3, r3
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	b29b      	uxth	r3, r3
 800536c:	b21b      	sxth	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	f7fe fed1 	bl	8004116 <_ZN8touchgfx8Drawable9setHeightEs>

                // Invalidate the uncovered part
                const uint16_t delta = prevSolidHeight - solid.getHeight();
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3310      	adds	r3, #16
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fe74 	bl	8004066 <_ZNK8touchgfx8Drawable9getHeightEv>
 800537e:	4603      	mov	r3, r0
 8005380:	b29b      	uxth	r3, r3
 8005382:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, solid.getHeight(), HAL::DISPLAY_WIDTH, delta);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3310      	adds	r3, #16
 800538c:	4618      	mov	r0, r3
 800538e:	f7fe fe6a 	bl	8004066 <_ZNK8touchgfx8Drawable9getHeightEv>
 8005392:	4603      	mov	r3, r0
 8005394:	4619      	mov	r1, r3
 8005396:	4b2e      	ldr	r3, [pc, #184]	@ (8005450 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b21a      	sxth	r2, r3
 800539c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80053a0:	f107 0018 	add.w	r0, r7, #24
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	460a      	mov	r2, r1
 80053aa:	2100      	movs	r1, #0
 80053ac:	f7fe fda6 	bl	8003efc <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4618      	mov	r0, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3310      	adds	r3, #16
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f107 0218 	add.w	r2, r7, #24
 80053c4:	4611      	mov	r1, r2
 80053c6:	4798      	blx	r3
                break;
 80053c8:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7a9b      	ldrb	r3, [r3, #10]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d139      	bne.n	8005446 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
 80053d2:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x198>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d035      	beq.n	8005446 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x18a>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3310      	adds	r3, #16
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fe fe07 	bl	8003ff2 <_ZNK8touchgfx8Drawable7getRectEv>
 80053e4:	4602      	mov	r2, r0
 80053e6:	f107 0310 	add.w	r3, r7, #16
 80053ea:	6810      	ldr	r0, [r2, #0]
 80053ec:	6851      	ldr	r1, [r2, #4]
 80053ee:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 80053f0:	f7fc ff4a 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 80053f4:	4603      	mov	r3, r0
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	3230      	adds	r2, #48	@ 0x30
 80053fa:	6812      	ldr	r2, [r2, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	4790      	blx	r2
 8005400:	63f8      	str	r0, [r7, #60]	@ 0x3c

            Rect source;
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	4618      	mov	r0, r3
 8005408:	f7fd fa92 	bl	8002930 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 800540c:	2300      	movs	r3, #0
 800540e:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x194>)
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b21b      	sxth	r3, r3
 800541a:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE15handleTickEventEv+0x190>)
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b21b      	sxth	r3, r3
 8005422:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8005424:	f7fc ff30 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 8005428:	f7fe ff3e 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 800542c:	6803      	ldr	r3, [r0, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	f107 0310 	add.w	r3, r7, #16
 8005436:	f107 0208 	add.w	r2, r7, #8
 800543a:	2100      	movs	r1, #0
 800543c:	9101      	str	r1, [sp, #4]
 800543e:	21ff      	movs	r1, #255	@ 0xff
 8005440:	9100      	str	r1, [sp, #0]
 8005442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005444:	47a0      	blx	r4
        }
    }
 8005446:	3744      	adds	r7, #68	@ 0x44
 8005448:	46bd      	mov	sp, r7
 800544a:	bd90      	pop	{r4, r7, pc}
 800544c:	2400b8c2 	.word	0x2400b8c2
 8005450:	2400b8c0 	.word	0x2400b8c0
 8005454:	2400b8ca 	.word	0x2400b8ca

08005458 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE8tearDownEv>:

    virtual void tearDown()
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6858      	ldr	r0, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3360      	adds	r3, #96	@ 0x60
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	3210      	adds	r2, #16
 8005472:	4611      	mov	r1, r2
 8005474:	4798      	blx	r3
    }
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE4initEv>:

    virtual void init()
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe ff73 	bl	8004374 <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6858      	ldr	r0, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	335c      	adds	r3, #92	@ 0x5c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	3210      	adds	r2, #16
 80054a0:	4611      	mov	r1, r2
 80054a2:	4798      	blx	r3
    }
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <_ZN8touchgfx14WipeTransitionILNS_9DirectionE1EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
    {
    }
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
        }
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE1EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af02      	add	r7, sp, #8
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	2200      	movs	r2, #0
 80054f2:	2100      	movs	r1, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7fe fd01 	bl	8003efc <_ZN8touchgfx4RectC1Essss>
        }
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b093      	sub	sp, #76	@ 0x4c
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe ff1c 	bl	800434c <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7a9b      	ldrb	r3, [r3, #10]
 8005518:	3301      	adds	r3, #1
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	729a      	strb	r2, [r3, #10]
        if (animationCounter <= (animationSteps))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7a9a      	ldrb	r2, [r3, #10]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	7a5b      	ldrb	r3, [r3, #9]
 8005528:	429a      	cmp	r2, r3
 800552a:	d82a      	bhi.n	8005582 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x7e>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7a9b      	ldrb	r3, [r3, #10]
 8005530:	4618      	mov	r0, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7a5b      	ldrb	r3, [r3, #9]
 800553c:	2100      	movs	r1, #0
 800553e:	f018 f83f 	bl	801d5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8005542:	4603      	mov	r3, r0
 8005544:	461a      	mov	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	81da      	strh	r2, [r3, #14]
            if (calculatedValue % 2)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005550:	b29b      	uxth	r3, r3
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d019      	beq.n	8005590 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005562:	b29b      	uxth	r3, r3
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800556a:	2a00      	cmp	r2, #0
 800556c:	dd01      	ble.n	8005572 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x6e>
 800556e:	2201      	movs	r2, #1
 8005570:	e001      	b.n	8005576 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x72>
 8005572:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005576:	4413      	add	r3, r2
 8005578:	b29b      	uxth	r3, r3
 800557a:	b21a      	sxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	81da      	strh	r2, [r3, #14]
 8005580:	e006      	b.n	8005590 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x8c>
            done = true;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	729a      	strb	r2, [r3, #10]
            return;
 800558e:	e07f      	b.n	8005690 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
                const uint16_t prevSolidPos = solid.getY();
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3310      	adds	r3, #16
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fd59 	bl	800404c <_ZNK8touchgfx8Drawable4getYEv>
 800559a:	4603      	mov	r3, r0
 800559c:	877b      	strh	r3, [r7, #58]	@ 0x3a
                solid.setHeight(HAL::DISPLAY_HEIGHT - calculatedValue);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 0010 	add.w	r0, r3, #16
 80055a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005698 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 80055a6:	881a      	ldrh	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	b21b      	sxth	r3, r3
 80055b6:	4619      	mov	r1, r3
 80055b8:	f7fe fdad 	bl	8004116 <_ZN8touchgfx8Drawable9setHeightEs>
                solid.setY(calculatedValue);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0210 	add.w	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7fe fd67 	bl	800409e <_ZN8touchgfx8Drawable4setYEs>
                const uint16_t delta = calculatedValue - prevSolidPos;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	873b      	strh	r3, [r7, #56]	@ 0x38
                Rect r(0, prevSolidPos, HAL::DISPLAY_WIDTH, delta);
 80055de:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80055e2:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	b219      	sxth	r1, r3
 80055e8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80055ec:	f107 0020 	add.w	r0, r7, #32
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	460b      	mov	r3, r1
 80055f4:	2100      	movs	r1, #0
 80055f6:	f7fe fc81 	bl	8003efc <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	4618      	mov	r0, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3310      	adds	r3, #16
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f107 0220 	add.w	r2, r7, #32
 800560e:	4611      	mov	r1, r2
 8005610:	4798      	blx	r3
                break;
 8005612:	bf00      	nop
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7a9b      	ldrb	r3, [r3, #10]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d139      	bne.n	8005690 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
 800561c:	4b20      	ldr	r3, [pc, #128]	@ (80056a0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x19c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d035      	beq.n	8005690 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x18c>
            Rect rect = solid.getRect(); // Part to copy between buffers
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3310      	adds	r3, #16
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe fce2 	bl	8003ff2 <_ZNK8touchgfx8Drawable7getRectEv>
 800562e:	4602      	mov	r2, r0
 8005630:	f107 0310 	add.w	r3, r7, #16
 8005634:	6810      	ldr	r0, [r2, #0]
 8005636:	6851      	ldr	r1, [r2, #4]
 8005638:	c303      	stmia	r3!, {r0, r1}
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 800563a:	f7fc fe25 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 800563e:	4603      	mov	r3, r0
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	3230      	adds	r2, #48	@ 0x30
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	4790      	blx	r2
 800564a:	63f8      	str	r0, [r7, #60]	@ 0x3c
            Rect source;
 800564c:	f107 0308 	add.w	r3, r7, #8
 8005650:	4618      	mov	r0, r3
 8005652:	f7fd f96d 	bl	8002930 <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 800565a:	2300      	movs	r3, #0
 800565c:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 800565e:	4b0f      	ldr	r3, [pc, #60]	@ (800569c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x198>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b21b      	sxth	r3, r3
 8005664:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8005666:	4b0c      	ldr	r3, [pc, #48]	@ (8005698 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE15handleTickEventEv+0x194>)
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b21b      	sxth	r3, r3
 800566c:	81fb      	strh	r3, [r7, #14]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 800566e:	f7fc fe0b 	bl	8002288 <_ZN8touchgfx3HAL11getInstanceEv>
 8005672:	f7fe fe19 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8005676:	6803      	ldr	r3, [r0, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	681c      	ldr	r4, [r3, #0]
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	f107 0208 	add.w	r2, r7, #8
 8005684:	2100      	movs	r1, #0
 8005686:	9101      	str	r1, [sp, #4]
 8005688:	21ff      	movs	r1, #255	@ 0xff
 800568a:	9100      	str	r1, [sp, #0]
 800568c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800568e:	47a0      	blx	r4
    }
 8005690:	3744      	adds	r7, #68	@ 0x44
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	bf00      	nop
 8005698:	2400b8c2 	.word	0x2400b8c2
 800569c:	2400b8c0 	.word	0x2400b8c0
 80056a0:	2400b8ca 	.word	0x2400b8ca

080056a4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE8tearDownEv>:
    virtual void tearDown()
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6858      	ldr	r0, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3360      	adds	r3, #96	@ 0x60
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	3210      	adds	r2, #16
 80056be:	4611      	mov	r1, r2
 80056c0:	4798      	blx	r3
    }
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE4initEv>:
    virtual void init()
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
        Transition::init();
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe fe4d 	bl	8004374 <_ZN8touchgfx10Transition4initEv>
        screenContainer->add(solid);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6858      	ldr	r0, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	335c      	adds	r3, #92	@ 0x5c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	3210      	adds	r2, #16
 80056ec:	4611      	mov	r1, r2
 80056ee:	4798      	blx	r3
    }
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE0EE10invalidateEv>:
    virtual void invalidate()
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
    }
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
        }
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE0EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af02      	add	r7, sp, #8
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fe fbdb 	bl	8003efc <_ZN8touchgfx4RectC1Essss>
        }
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    /**
     * Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
    }
 800575a:	4618      	mov	r0, r3
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8005772:	4618      	mov	r0, r3
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8005780:	b580      	push	{r7, lr}
 8005782:	b08c      	sub	sp, #48	@ 0x30
 8005784:	af08      	add	r7, sp, #32
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4611      	mov	r1, r2
 800578c:	461a      	mov	r2, r3
 800578e:	460b      	mov	r3, r1
 8005790:	80fb      	strh	r3, [r7, #6]
 8005792:	4613      	mov	r3, r2
 8005794:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	88b9      	ldrh	r1, [r7, #4]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800579e:	9306      	str	r3, [sp, #24]
 80057a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80057a2:	9305      	str	r3, [sp, #20]
 80057a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ae:	9303      	str	r3, [sp, #12]
 80057b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	7f3b      	ldrb	r3, [r7, #28]
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	7e3b      	ldrb	r3, [r7, #24]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	460b      	mov	r3, r1
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	f017 fad7 	bl	801cd74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80057c6:	4a0a      	ldr	r2, [pc, #40]	@ (80057f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057d0:	619a      	str	r2, [r3, #24]
      kerningData(kerningList),
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d6:	61da      	str	r2, [r3, #28]
      gsubTable(gsubData),
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057dc:	621a      	str	r2, [r3, #32]
      arabicTable(formsTable)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057e2:	625a      	str	r2, [r3, #36]	@ 0x24
{
}
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	0802d50c 	.word	0x0802d50c

080057f4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	889b      	ldrh	r3, [r3, #4]
 8005808:	0adb      	lsrs	r3, r3, #11
 800580a:	b29b      	uxth	r3, r3
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4413      	add	r3, r2
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8005826:	b480      	push	{r7}
 8005828:	b089      	sub	sp, #36	@ 0x24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	460b      	mov	r3, r1
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7b1b      	ldrb	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8005842:	2300      	movs	r3, #0
 8005844:	e031      	b.n	80058aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	69da      	ldr	r2, [r3, #28]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	7b5b      	ldrb	r3, [r3, #13]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	b21b      	sxth	r3, r3
 8005856:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800585a:	b219      	sxth	r1, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	7adb      	ldrb	r3, [r3, #11]
 8005860:	b21b      	sxth	r3, r3
 8005862:	430b      	orrs	r3, r1
 8005864:	b21b      	sxth	r3, r3
 8005866:	b29b      	uxth	r3, r3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	7b1b      	ldrb	r3, [r3, #12]
 8005872:	837b      	strh	r3, [r7, #26]
 8005874:	e013      	b.n	800589e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	897a      	ldrh	r2, [r7, #10]
 800587c:	429a      	cmp	r2, r3
 800587e:	d103      	bne.n	8005888 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005886:	e010      	b.n	80058aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	897a      	ldrh	r2, [r7, #10]
 800588e:	429a      	cmp	r2, r3
 8005890:	d309      	bcc.n	80058a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8005892:	8b7b      	ldrh	r3, [r7, #26]
 8005894:	3b01      	subs	r3, #1
 8005896:	837b      	strh	r3, [r7, #26]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	3304      	adds	r3, #4
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	8b7b      	ldrh	r3, [r7, #26]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e8      	bne.n	8005876 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80058a4:	e000      	b.n	80058a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80058a6:	bf00      	nop
        }
    }
    return 0;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3724      	adds	r7, #36	@ 0x24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
        : color(col)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	601a      	str	r2, [r3, #0]
    }
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	887a      	ldrh	r2, [r7, #2]
 80058e4:	801a      	strh	r2, [r3, #0]
    {
    }
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fb0c 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8005924:	4a05      	ldr	r2, [pc, #20]	@ (800593c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	629a      	str	r2, [r3, #40]	@ 0x28
    {
    }
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	0802de00 	.word	0x0802de00

08005940 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
    {
 8005948:	4a06      	ldr	r2, [pc, #24]	@ (8005964 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
    }
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	4618      	mov	r0, r3
 8005954:	f001 f812 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	0802f5c0 	.word	0x0802f5c0

08005968 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    }
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ffe5 	bl	8005940 <_ZN8touchgfx6ScreenD1Ev>
 8005976:	213c      	movs	r1, #60	@ 0x3c
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f025 fac6 	bl	802af0a <_ZdlPvj>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    {
    }
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    {
    }
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
    {
    }
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
    {
    }
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
    {
    }
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3304      	adds	r3, #4
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f012 fa8f 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	2326      	movs	r3, #38	@ 0x26
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2100      	movs	r1, #0
 8005a22:	f025 fca8 	bl	802b376 <memset>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fd37 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8005a2e:	4a09      	ldr	r2, [pc, #36]	@ (8005a54 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	22ff      	movs	r2, #255	@ 0xff
 8005a38:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3328      	adds	r3, #40	@ 0x28
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff ff37 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	0802ee74 	.word	0x0802ee74

08005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  color The color of the box.
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param  bitmap (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bitmap), alpha(255)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4618      	mov	r0, r3
 8005a82:	2326      	movs	r3, #38	@ 0x26
 8005a84:	461a      	mov	r2, r3
 8005a86:	2100      	movs	r1, #0
 8005a88:	f025 fc75 	bl	802b376 <memset>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fd04 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8005a94:	4a09      	ldr	r2, [pc, #36]	@ (8005abc <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	8812      	ldrh	r2, [r2, #0]
 8005aa0:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	22ff      	movs	r2, #255	@ 0xff
 8005aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    {
        Image::setBitmap(bitmap);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f014 fbde 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	0802f0ec 	.word	0x0802f0ec

08005ac0 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	4a05      	ldr	r2, [pc, #20]	@ (8005ae0 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fe fcf5 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	0802ee74 	.word	0x0802ee74

08005ae4 <_ZN8touchgfx3BoxD0Ev>:
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ffe7 	bl	8005ac0 <_ZN8touchgfx3BoxD1Ev>
 8005af2:	212c      	movs	r1, #44	@ 0x2c
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f025 fa08 	bl	802af0a <_ZdlPvj>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff7e 	bl	8005a10 <_ZN8touchgfx3BoxC1Ev>
 8005b14:	4a08      	ldr	r2, [pc, #32]	@ (8005b38 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	332c      	adds	r3, #44	@ 0x2c
 8005b1e:	2100      	movs	r1, #0
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fec8 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	861a      	strh	r2, [r3, #48]	@ 0x30
    {
    }
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	0802f088 	.word	0x0802f088

08005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     * Sets the color of the border drawn along the edge of the BoxWithBorder.
     *
     * @param  color The color of the border.
     * @see setColor, getBorderColor, Color::getColorFrom24BitRGB
     */
    void setBorderColor(colortype color)
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
    {
        borderColor = color;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8005b84:	4a06      	ldr	r2, [pc, #24]	@ (8005ba0 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	887a      	ldrh	r2, [r7, #2]
 8005b8e:	809a      	strh	r2, [r3, #4]
    }
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	0802d340 	.word	0x0802d340

08005ba4 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	2326      	movs	r3, #38	@ 0x26
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	f025 fbde 	bl	802b376 <memset>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fc6d 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8005bc2:	4a14      	ldr	r2, [pc, #80]	@ (8005c14 <_ZN8touchgfx8TextAreaC1Ev+0x70>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3328      	adds	r3, #40	@ 0x28
 8005bcc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ffd1 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3330      	adds	r3, #48	@ 0x30
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fe6a 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	22ff      	movs	r2, #255	@ 0xff
 8005bec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    {
    }
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	0802edcc 	.word	0x0802edcc

08005c18 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4618      	mov	r0, r3
 8005c24:	2326      	movs	r3, #38	@ 0x26
 8005c26:	461a      	mov	r2, r3
 8005c28:	2100      	movs	r1, #0
 8005c2a:	f025 fba4 	bl	802b376 <memset>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fc33 	bl	800449c <_ZN8touchgfx6WidgetC1Ev>
 8005c36:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
        setTouchable(true);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fe50 	bl	80058f4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	0802ec30 	.word	0x0802ec30

08005c64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	4a05      	ldr	r2, [pc, #20]	@ (8005ca0 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe fc15 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	0802ec30 	.word	0x0802ec30

08005ca4 <_ZN8touchgfx14AbstractButtonD0Ev>:
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff ffe7 	bl	8005c80 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005cb2:	2130      	movs	r1, #48	@ 0x30
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f025 f928 	bl	802af0a <_ZdlPvj>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ffa2 	bl	8005c18 <_ZN8touchgfx14AbstractButtonC1Ev>
 8005cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005d08 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	332e      	adds	r3, #46	@ 0x2e
 8005cde:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fdf6 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3330      	adds	r3, #48	@ 0x30
 8005cec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fdef 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	22ff      	movs	r2, #255	@ 0xff
 8005cfa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    {
    }
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	0802ef3c 	.word	0x0802ef3c

08005d0c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>:
class View : public Screen
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	4a05      	ldr	r2, [pc, #20]	@ (8005d2c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev+0x20>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fe0f 	bl	8005940 <_ZN8touchgfx6ScreenD1Ev>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	0802d5b4 	.word	0x0802d5b4

08005d30 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED0Ev>:
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff ffe7 	bl	8005d0c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005d3e:	2140      	movs	r1, #64	@ 0x40
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f025 f8e2 	bl	802af0a <_ZdlPvj>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <_ZN24Localize_AnomalyViewBaseD1Ev>:

class Localize_AnomalyViewBase : public touchgfx::View<Localize_AnomalyPresenter>
{
public:
    Localize_AnomalyViewBase();
    virtual ~Localize_AnomalyViewBase() {}
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	4a3c      	ldr	r2, [pc, #240]	@ (8005e4c <_ZN24Localize_AnomalyViewBaseD1Ev+0xfc>)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fde7 	bl	8006938 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 fe69 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fe41 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fdf7 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fe13 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fe2f 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fde5 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005db8:	4618      	mov	r0, r3
 8005dba:	f000 fe23 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fdd9 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fe61 	bl	8006a98 <_ZN8touchgfx6ButtonD1Ev>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fe33 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fe0b 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fdc1 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fdff 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	33f8      	adds	r3, #248	@ 0xf8
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fdb6 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	33c4      	adds	r3, #196	@ 0xc4
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fdf5 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3398      	adds	r3, #152	@ 0x98
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fdac 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	336c      	adds	r3, #108	@ 0x6c
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fdc9 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3340      	adds	r3, #64	@ 0x40
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fe44 	bl	8005ac0 <_ZN8touchgfx3BoxD1Ev>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff66 	bl	8005d0c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterED1Ev>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	0802d564 	.word	0x0802d564

08005e50 <_ZN24Localize_AnomalyViewBaseD0Ev>:
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff ff79 	bl	8005d50 <_ZN24Localize_AnomalyViewBaseD1Ev>
 8005e5e:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f025 f851 	bl	802af0a <_ZdlPvj>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <_ZN24Localize_AnomalyViewBase9function1Ev>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Localize_Anomaly
    }
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <_ZN24Localize_AnomalyViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005e8e:	f015 fefd 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8005e92:	4603      	mov	r3, r0
    }
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <_ZN24Localize_AnomalyViewBaseC1Ev>:
#include <gui_generated/localize_anomaly_screen/Localize_AnomalyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Localize_AnomalyViewBase::Localize_AnomalyViewBase() :
 8005e9c:	b590      	push	{r4, r7, lr}
 8005e9e:	b0b5      	sub	sp, #212	@ 0xd4
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Localize_AnomalyViewBase::buttonCallbackHandler)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 fce0 	bl	800686c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>
 8005eac:	4ae0      	ldr	r2, [pc, #896]	@ (8006230 <_ZN24Localize_AnomalyViewBaseC1Ev+0x394>)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3340      	adds	r3, #64	@ 0x40
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fdaa 	bl	8005a10 <_ZN8touchgfx3BoxC1Ev>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8005ec2:	f107 0314 	add.w	r3, r7, #20
 8005ec6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fd02 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8005ed0:	f107 0314 	add.w	r3, r7, #20
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f7ff fdcc 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3398      	adds	r3, #152	@ 0x98
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fd17 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	33c4      	adds	r3, #196	@ 0xc4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fe0a 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	33f8      	adds	r3, #248	@ 0xf8
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fd0d 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fdff 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fd01 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fdf3 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fe3d 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fec7 	bl	8005cc4 <_ZN8touchgfx6ButtonC1Ev>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fce9 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fddb 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fcdd 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fdcf 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 8005f6c:	f107 0318 	add.w	r3, r7, #24
 8005f70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fcad 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8005f7a:	f107 0318 	add.w	r3, r7, #24
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4620      	mov	r0, r4
 8005f82:	f7ff fd77 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fcc1 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fdb3 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fdfd 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 706c 	add.w	r0, r3, #944	@ 0x3b0
 8005fb0:	4ba0      	ldr	r3, [pc, #640]	@ (8006234 <_ZN24Localize_AnomalyViewBaseC1Ev+0x398>)
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	f107 031c 	add.w	r3, r7, #28
 8005fbc:	cb0c      	ldmia	r3, {r2, r3}
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	f000 fc7a 	bl	80068b8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8005fca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	f7fe f817 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005ff4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8005ff8:	041a      	lsls	r2, r3, #16
 8005ffa:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	431a      	orrs	r2, r3
 8006002:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8006006:	4313      	orrs	r3, r2
 8006008:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800600c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fc4f 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8006018:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800601a:	4619      	mov	r1, r3
 800601c:	4620      	mov	r0, r4
 800601e:	f7ff fd1b 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	336c      	adds	r3, #108	@ 0x6c
 8006026:	2200      	movs	r2, #0
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe f846 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8006036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fc49 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8006042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006046:	4619      	mov	r1, r3
 8006048:	4620      	mov	r0, r4
 800604a:	f014 f910 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 187, 460, 77);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8006054:	234d      	movs	r3, #77	@ 0x4d
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 800605c:	22bb      	movs	r2, #187	@ 0xbb
 800605e:	210a      	movs	r1, #10
 8006060:	f7fd ffd3 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 0, 460, 77);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 800606a:	234d      	movs	r3, #77	@ 0x4d
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	f7fd ffc8 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8006080:	234e      	movs	r3, #78	@ 0x4e
 8006082:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
 8006086:	2389      	movs	r3, #137	@ 0x89
 8006088:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
 800608c:	23ae      	movs	r3, #174	@ 0xae
 800608e:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 8006092:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8006096:	041a      	lsls	r2, r3, #16
 8006098:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	431a      	orrs	r2, r3
 80060a0:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80060a4:	4313      	orrs	r3, r2
 80060a6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80060aa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80060ae:	4611      	mov	r1, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fc00 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80060b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060b8:	4619      	mov	r1, r3
 80060ba:	4620      	mov	r0, r4
 80060bc:	f7ff fccc 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80060c6:	23ed      	movs	r3, #237	@ 0xed
 80060c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
 80060cc:	2366      	movs	r3, #102	@ 0x66
 80060ce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80060d2:	2363      	movs	r3, #99	@ 0x63
 80060d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80060d8:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 80060dc:	041a      	lsls	r2, r3, #16
 80060de:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	431a      	orrs	r2, r3
 80060e6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80060f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fbdd 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80060fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060fe:	4619      	mov	r1, r3
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff fd1b 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	33c4      	adds	r3, #196	@ 0xc4
 800610a:	2105      	movs	r1, #5
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fd23 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	33c4      	adds	r3, #196	@ 0xc4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f011 ff00 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 4, 450, 73);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 800612a:	2349      	movs	r3, #73	@ 0x49
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8006132:	2204      	movs	r2, #4
 8006134:	2105      	movs	r1, #5
 8006136:	f7fd ff68 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 1, 450, 67);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8006140:	2343      	movs	r3, #67	@ 0x43
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8006148:	2201      	movs	r2, #1
 800614a:	2100      	movs	r1, #0
 800614c:	f7fd ff5d 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8006156:	2343      	movs	r3, #67	@ 0x43
 8006158:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 800615c:	2365      	movs	r3, #101	@ 0x65
 800615e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 8006162:	238b      	movs	r3, #139	@ 0x8b
 8006164:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8006168:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800616c:	041a      	lsls	r2, r3, #16
 800616e:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	431a      	orrs	r2, r3
 8006176:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800617a:	4313      	orrs	r3, r2
 800617c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006180:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8006184:	4611      	mov	r1, r2
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fb95 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800618c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800618e:	4619      	mov	r1, r3
 8006190:	4620      	mov	r0, r4
 8006192:	f7ff fc61 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 800619c:	2300      	movs	r3, #0
 800619e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 80061a2:	2300      	movs	r3, #0
 80061a4:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
 80061a8:	2300      	movs	r3, #0
 80061aa:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 80061ae:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80061b2:	041a      	lsls	r2, r3, #16
 80061b4:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80061b8:	021b      	lsls	r3, r3, #8
 80061ba:	431a      	orrs	r2, r3
 80061bc:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80061c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80061ca:	4611      	mov	r1, r2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fb72 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80061d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061d4:	4619      	mov	r1, r3
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff fcb0 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80061e2:	2102      	movs	r1, #2
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff fcb7 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 80061f6:	4619      	mov	r1, r3
 80061f8:	4610      	mov	r0, r2
 80061fa:	f011 fe93 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	33f8      	adds	r3, #248	@ 0xf8
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f011 fe8a 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(142, 47, 177, 20);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 8006216:	2314      	movs	r3, #20
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	23b1      	movs	r3, #177	@ 0xb1
 800621c:	222f      	movs	r2, #47	@ 0x2f
 800621e:	218e      	movs	r1, #142	@ 0x8e
 8006220:	f7fd fef3 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 177, 17);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 800622a:	2311      	movs	r3, #17
 800622c:	e004      	b.n	8006238 <_ZN24Localize_AnomalyViewBaseC1Ev+0x39c>
 800622e:	bf00      	nop
 8006230:	0802d564 	.word	0x0802d564
 8006234:	08006841 	.word	0x08006841
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	23b1      	movs	r3, #177	@ 0xb1
 800623c:	2203      	movs	r2, #3
 800623e:	2100      	movs	r1, #0
 8006240:	f7fd fee3 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 800624a:	2300      	movs	r3, #0
 800624c:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
 8006256:	2300      	movs	r3, #0
 8006258:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800625c:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8006260:	041a      	lsls	r2, r3, #16
 8006262:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	431a      	orrs	r2, r3
 800626a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800626e:	4313      	orrs	r3, r2
 8006270:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006274:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fb1b 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8006280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006282:	4619      	mov	r1, r3
 8006284:	4620      	mov	r0, r4
 8006286:	f7ff fbe7 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 8006290:	23ed      	movs	r3, #237	@ 0xed
 8006292:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
 8006296:	2366      	movs	r3, #102	@ 0x66
 8006298:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 800629c:	2363      	movs	r3, #99	@ 0x63
 800629e:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 80062a2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80062a6:	041a      	lsls	r2, r3, #16
 80062a8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	431a      	orrs	r2, r3
 80062b0:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80062ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80062be:	4611      	mov	r1, r2
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff faf8 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80062c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062c8:	4619      	mov	r1, r3
 80062ca:	4620      	mov	r0, r4
 80062cc:	f7ff fc36 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80062d6:	2103      	movs	r1, #3
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fc3d 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f011 fe19 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text.setXY(7, 5);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80062f8:	2205      	movs	r2, #5
 80062fa:	2107      	movs	r1, #7
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd fedd 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 8006308:	23ff      	movs	r3, #255	@ 0xff
 800630a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800630e:	23ff      	movs	r3, #255	@ 0xff
 8006310:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8006314:	23ff      	movs	r3, #255	@ 0xff
 8006316:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800631a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800631e:	041a      	lsls	r2, r3, #16
 8006320:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8006324:	021b      	lsls	r3, r3, #8
 8006326:	431a      	orrs	r2, r3
 8006328:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 800632c:	4313      	orrs	r3, r2
 800632e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006332:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fabc 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800633e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006340:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8006344:	613b      	str	r3, [r7, #16]
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 8006346:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800634e:	bf00      	nop
    AnomalyDetection_Text.setLinespacing(0);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800635a:	2300      	movs	r3, #0
 800635c:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 8006360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006364:	f8b7 209e 	ldrh.w	r2, [r7, #158]	@ 0x9e
 8006368:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 800636a:	bf00      	nop
    AnomalyDetection_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6CIV));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 8006372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006376:	2107      	movs	r1, #7
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fbfd 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 800637e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006382:	4619      	mov	r1, r3
 8006384:	4620      	mov	r0, r4
 8006386:	f013 fcf8 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800638a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd fd88 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f011 fdbe 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Alarm_Mute_Indicator_Textbox_1_1_1);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f011 fdb4 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Localize_Button.setXY(188, 15);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80063c2:	220f      	movs	r2, #15
 80063c4:	21bc      	movs	r1, #188	@ 0xbc
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fd fe78 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f503 74fa 	add.w	r4, r3, #500	@ 0x1f4
 80063d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063d6:	2103      	movs	r1, #3
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fa7b 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80063de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80063e2:	2102      	movs	r1, #2
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fa75 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80063ea:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80063ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80063f2:	4619      	mov	r1, r3
 80063f4:	4620      	mov	r0, r4
 80063f6:	f013 fcf7 	bl	8019de8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f7ff fc2b 	bl	8005c64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Button_Panel.add(Localize_Button);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f011 fd81 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 194);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f503 700a 	add.w	r0, r3, #552	@ 0x228
 8006428:	23c2      	movs	r3, #194	@ 0xc2
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8006430:	2208      	movs	r2, #8
 8006432:	210a      	movs	r1, #10
 8006434:	f7fd fde9 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 183);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800643e:	23b7      	movs	r3, #183	@ 0xb7
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	f7fd fdde 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8006454:	234e      	movs	r3, #78	@ 0x4e
 8006456:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 800645a:	2389      	movs	r3, #137	@ 0x89
 800645c:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8006460:	23ae      	movs	r3, #174	@ 0xae
 8006462:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8006466:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 800646a:	041a      	lsls	r2, r3, #16
 800646c:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	431a      	orrs	r2, r3
 8006474:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8006478:	4313      	orrs	r3, r2
 800647a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800647e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fa16 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800648a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800648c:	4619      	mov	r1, r3
 800648e:	4620      	mov	r0, r4
 8006490:	f7ff fae2 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 800649a:	23ed      	movs	r3, #237	@ 0xed
 800649c:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 80064a0:	2366      	movs	r3, #102	@ 0x66
 80064a2:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 80064a6:	2363      	movs	r3, #99	@ 0x63
 80064a8:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 80064ac:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80064b0:	041a      	lsls	r2, r3, #16
 80064b2:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	431a      	orrs	r2, r3
 80064ba:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80064c4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff f9f3 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80064d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80064d2:	4619      	mov	r1, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff fb31 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80064e0:	2105      	movs	r1, #5
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7ff fb38 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f011 fd14 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 175);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f503 7022 	add.w	r0, r3, #648	@ 0x288
 8006502:	23af      	movs	r3, #175	@ 0xaf
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800650a:	2204      	movs	r2, #4
 800650c:	2105      	movs	r1, #5
 800650e:	f7fd fd7c 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 175);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8006518:	23af      	movs	r3, #175	@ 0xaf
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	f7fd fd71 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 800652e:	2343      	movs	r3, #67	@ 0x43
 8006530:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8006534:	2365      	movs	r3, #101	@ 0x65
 8006536:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 800653a:	238b      	movs	r3, #139	@ 0x8b
 800653c:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 8006540:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8006544:	041a      	lsls	r2, r3, #16
 8006546:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	431a      	orrs	r2, r3
 800654e:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8006552:	4313      	orrs	r3, r2
 8006554:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006558:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff f9a9 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8006564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006566:	4619      	mov	r1, r3
 8006568:	4620      	mov	r0, r4
 800656a:	f7ff fa75 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f503 742d 	add.w	r4, r3, #692	@ 0x2b4
 8006574:	2300      	movs	r3, #0
 8006576:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 800657a:	2300      	movs	r3, #0
 800657c:	f887 30b1 	strb.w	r3, [r7, #177]	@ 0xb1
 8006580:	2300      	movs	r3, #0
 8006582:	f887 30b0 	strb.w	r3, [r7, #176]	@ 0xb0
 8006586:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 800658a:	041a      	lsls	r2, r3, #16
 800658c:	f897 30b1 	ldrb.w	r3, [r7, #177]	@ 0xb1
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	431a      	orrs	r2, r3
 8006594:	f897 30b0 	ldrb.w	r3, [r7, #176]	@ 0xb0
 8006598:	4313      	orrs	r3, r2
 800659a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800659e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80065a2:	4611      	mov	r1, r2
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff f986 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80065aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ac:	4619      	mov	r1, r3
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7ff fac4 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff facb 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f011 fca7 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Directional_Vector.setXY(95, 9);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80065dc:	2209      	movs	r2, #9
 80065de:	215f      	movs	r1, #95	@ 0x5f
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd fd6b 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Directional_Vector.setBitmap(touchgfx::Bitmap(BITMAP_VECTOR_IMAGE_ID));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 743a 	add.w	r4, r3, #744	@ 0x2e8
 80065ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80065f0:	210c      	movs	r1, #12
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7ff f96e 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80065f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80065fc:	4619      	mov	r1, r3
 80065fe:	4620      	mov	r0, r4
 8006600:	f013 fe35 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Message_Board_Panel_1.add(Directional_Vector);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f011 fc86 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(167, 0, 117, 20);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800661e:	2314      	movs	r3, #20
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	2375      	movs	r3, #117	@ 0x75
 8006624:	2200      	movs	r2, #0
 8006626:	21a7      	movs	r1, #167	@ 0xa7
 8006628:	f7fd fcef 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 117, 17);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f503 7050 	add.w	r0, r3, #832	@ 0x340
 8006632:	2311      	movs	r3, #17
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2375      	movs	r3, #117	@ 0x75
 8006638:	2203      	movs	r2, #3
 800663a:	2100      	movs	r1, #0
 800663c:	f7fd fce5 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 8006646:	2300      	movs	r3, #0
 8006648:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5
 800664c:	2300      	movs	r3, #0
 800664e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8006652:	2300      	movs	r3, #0
 8006654:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8006658:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
 800665c:	041a      	lsls	r2, r3, #16
 800665e:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	431a      	orrs	r2, r3
 8006666:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800666a:	4313      	orrs	r3, r2
 800666c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8006670:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f91d 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800667c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800667e:	4619      	mov	r1, r3
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff f9e9 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f503 7450 	add.w	r4, r3, #832	@ 0x340
 800668c:	23ed      	movs	r3, #237	@ 0xed
 800668e:	f887 30b8 	strb.w	r3, [r7, #184]	@ 0xb8
 8006692:	2366      	movs	r3, #102	@ 0x66
 8006694:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8006698:	2363      	movs	r3, #99	@ 0x63
 800669a:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
 800669e:	f897 30b8 	ldrb.w	r3, [r7, #184]	@ 0xb8
 80066a2:	041a      	lsls	r2, r3, #16
 80066a4:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	431a      	orrs	r2, r3
 80066ac:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80066b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80066ba:	4611      	mov	r1, r2
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff f8fa 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80066c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066c4:	4619      	mov	r1, r3
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff fa38 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 80066d2:	2103      	movs	r1, #3
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fa3f 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f503 7350 	add.w	r3, r3, #832	@ 0x340
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f011 fc1b 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(4, 5);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 80066f4:	2205      	movs	r2, #5
 80066f6:	2104      	movs	r1, #4
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd fcdf 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 8006704:	23ff      	movs	r3, #255	@ 0xff
 8006706:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
 800670a:	23ff      	movs	r3, #255	@ 0xff
 800670c:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
 8006710:	23ff      	movs	r3, #255	@ 0xff
 8006712:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
 8006716:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 800671a:	041a      	lsls	r2, r3, #16
 800671c:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	431a      	orrs	r2, r3
 8006724:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 8006728:	4313      	orrs	r3, r2
 800672a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800672e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff f8be 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800673a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800673c:	f8c7 40bc 	str.w	r4, [r7, #188]	@ 0xbc
 8006740:	60fb      	str	r3, [r7, #12]
        this->color = color;
 8006742:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 800674a:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 8006752:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006756:	2300      	movs	r3, #0
 8006758:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
        linespace = space;
 800675c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006760:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	@ 0xc2
 8006764:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8006766:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HV8G));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 745d 	add.w	r4, r3, #884	@ 0x374
 800676e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8006772:	2108      	movs	r1, #8
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff f9ff 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 800677a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800677e:	4619      	mov	r1, r3
 8006780:	4620      	mov	r0, r4
 8006782:	f013 fafa 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8006786:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800678a:	4618      	mov	r0, r3
 800678c:	f7fd fb8a 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f011 fbc0 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f011 fbb6 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f011 fbac 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3340      	adds	r3, #64	@ 0x40
 80067d2:	4619      	mov	r1, r3
 80067d4:	4610      	mov	r0, r2
 80067d6:	f7ff f90b 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	336c      	adds	r3, #108	@ 0x6c
 80067e0:	4619      	mov	r1, r3
 80067e2:	4610      	mov	r0, r2
 80067e4:	f7ff f904 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3398      	adds	r3, #152	@ 0x98
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7ff f8fd 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f7ff f8f5 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4618      	mov	r0, r3
 800680a:	37cc      	adds	r7, #204	@ 0xcc
 800680c:	46bd      	mov	sp, r7
 800680e:	bd90      	pop	{r4, r7, pc}

08006810 <_ZN24Localize_AnomalyViewBase11setupScreenEv>:

void Localize_AnomalyViewBase::setupScreen()
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <_ZN24Localize_AnomalyViewBase15afterTransitionEv>:

//Called when the screen transition ends
void Localize_AnomalyViewBase::afterTransition()
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
    //Interaction1
    //When screen transition ends call virtual function
    //Call function1
    function1();
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	332c      	adds	r3, #44	@ 0x2c
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Localize_AnomalyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
    if (&src == &Localize_Button)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d106      	bne.n	8006864 <_ZN24Localize_AnomalyViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Switch_Main_Screen
        //When Localize_Button clicked change screen to Main
        //Go to Main with screen transition towards South
        application().gotoMainScreenWipeTransitionSouth();
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fb15 	bl	8005e86 <_ZN24Localize_AnomalyViewBase11applicationEv>
 800685c:	4603      	mov	r3, r0
 800685e:	4618      	mov	r0, r3
 8006860:	f7fd fef2 	bl	8004648 <_ZN23FrontendApplicationBase33gotoMainScreenWipeTransitionSouthEv>
    }
}
 8006864:	bf00      	nop
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev>:
    View()
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	f016 fcf0 	bl	801d25c <_ZN8touchgfx6ScreenC1Ev>
 800687c:	4a05      	ldr	r2, [pc, #20]	@ (8006894 <_ZN8touchgfx4ViewI25Localize_AnomalyPresenterEC1Ev+0x28>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	0802d5b4 	.word	0x0802d5b4

08006898 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	4a04      	ldr	r2, [pc, #16]	@ (80068b4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	0802d5e8 	.word	0x0802d5e8

080068b8 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4639      	mov	r1, r7
 80068c4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ffe4 	bl	8006898 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80068d0:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	605a      	str	r2, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3308      	adds	r3, #8
 80068e0:	463a      	mov	r2, r7
 80068e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068e6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	0802d59c 	.word	0x0802d59c

080068f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    }
 8006900:	4a04      	ldr	r2, [pc, #16]	@ (8006914 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	0802d5e8 	.word	0x0802d5e8

08006918 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
    }
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff ffe9 	bl	80068f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8006926:	2104      	movs	r1, #4
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f024 faee 	bl	802af0a <_ZdlPvj>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	4a05      	ldr	r2, [pc, #20]	@ (8006958 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff ffd5 	bl	80068f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	0802d59c 	.word	0x0802d59c

0800695c <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff ffe7 	bl	8006938 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800696a:	2110      	movs	r1, #16
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f024 facc 	bl	802af0a <_ZdlPvj>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	4a05      	ldr	r2, [pc, #20]	@ (800699c <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fd fb05 	bl	8003f9c <_ZN8touchgfx8DrawableD1Ev>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	0802de00 	.word	0x0802de00

080069a0 <_ZN8touchgfx9ContainerD0Ev>:
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ffe7 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 80069ae:	212c      	movs	r1, #44	@ 0x2c
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f024 faaa 	bl	802af0a <_ZdlPvj>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	4a05      	ldr	r2, [pc, #20]	@ (80069e0 <_ZN8touchgfx5ImageD1Ev+0x20>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd fd75 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	0802f0ec 	.word	0x0802f0ec

080069e4 <_ZN8touchgfx5ImageD0Ev>:
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff ffe7 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 80069f2:	212c      	movs	r1, #44	@ 0x2c
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f024 fa88 	bl	802af0a <_ZdlPvj>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	4a05      	ldr	r2, [pc, #20]	@ (8006a24 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff f853 	bl	8005ac0 <_ZN8touchgfx3BoxD1Ev>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	0802f088 	.word	0x0802f088

08006a28 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ffe7 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006a36:	2134      	movs	r1, #52	@ 0x34
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f024 fa66 	bl	802af0a <_ZdlPvj>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	4a08      	ldr	r2, [pc, #32]	@ (8006a74 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3328      	adds	r3, #40	@ 0x28
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fd fa22 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd fd2c 	bl	80044c0 <_ZN8touchgfx6WidgetD1Ev>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	0802edcc 	.word	0x0802edcc

08006a78 <_ZN8touchgfx8TextAreaD0Ev>:
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff ffe1 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006a86:	213c      	movs	r1, #60	@ 0x3c
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f024 fa3e 	bl	802af0a <_ZdlPvj>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	4a05      	ldr	r2, [pc, #20]	@ (8006ab8 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7ff f8e9 	bl	8005c80 <_ZN8touchgfx14AbstractButtonD1Ev>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	0802ef3c 	.word	0x0802ef3c

08006abc <_ZN8touchgfx6ButtonD0Ev>:
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff ffe7 	bl	8006a98 <_ZN8touchgfx6ButtonD1Ev>
 8006aca:	2134      	movs	r1, #52	@ 0x34
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f024 fa1c 	bl	802af0a <_ZdlPvj>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68d2      	ldr	r2, [r2, #12]
 8006aee:	1052      	asrs	r2, r2, #1
 8006af0:	1898      	adds	r0, r3, r2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	e00a      	b.n	8006b1a <_ZN8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68d2      	ldr	r2, [r2, #12]
 8006b0c:	1052      	asrs	r2, r2, #1
 8006b0e:	4413      	add	r3, r2
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6892      	ldr	r2, [r2, #8]
 8006b16:	4413      	add	r3, r2
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	4798      	blx	r3
    }
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d010      	beq.n	8006b58 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d107      	bne.n	8006b4e <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d001      	beq.n	8006b58 <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <_ZNK8touchgfx8CallbackI24Localize_AnomalyViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8006b58:	2300      	movs	r3, #0
    }
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	78fa      	ldrb	r2, [r7, #3]
 8006b76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
 8006b7a:	bf00      	nop
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
     * @param  callback The callback to be executed. The callback will be given a reference
     *                  to the Slider and the current value of the slider.
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
    {
        newValueCallback = &callback;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    }
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	8812      	ldrh	r2, [r2, #0]
 8006bb6:	869a      	strh	r2, [r3, #52]	@ 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f013 f912 	bl	8019de8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	4a05      	ldr	r2, [pc, #20]	@ (8006bec <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe feaf 	bl	8005940 <_ZN8touchgfx6ScreenD1Ev>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	0802d678 	.word	0x0802d678

08006bf0 <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ffe7 	bl	8006bcc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006bfe:	2140      	movs	r1, #64	@ 0x40
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f024 f982 	bl	802af0a <_ZdlPvj>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	4a93      	ldr	r2, [pc, #588]	@ (8006e68 <_ZN12MainViewBaseD1Ev+0x258>)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8006c24:	4618      	mov	r0, r3
 8006c26:	f002 fd77 	bl	8009718 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 fd93 	bl	800975c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff03 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7ff fedb 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fe91 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7ff ff19 	bl	8006a98 <_ZN8touchgfx6ButtonD1Ev>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff ff13 	bl	8006a98 <_ZN8touchgfx6ButtonD1Ev>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fea1 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fe9b 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fed9 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff feb1 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fe67 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fec7 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff fec1 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff fe99 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fe93 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fe49 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fea9 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff fea3 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff fe7b 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fe75 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fe2b 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff fe8b 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff fe63 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fe19 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fe57 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fe0d 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff fe4b 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8006d74:	4618      	mov	r0, r3
 8006d76:	f7ff fe01 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff fe3f 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fdf5 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f002 fdaf 	bl	80098fc <_ZN8touchgfx12ToggleButtonD1Ev>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8006da4:	4618      	mov	r0, r3
 8006da6:	f002 fd73 	bl	8009890 <_ZN8touchgfx6SliderD1Ev>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fe49 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fe21 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fdd7 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fd31 	bl	800983c <_ZN8touchgfx12TextProgressD1Ev>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fe0f 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fdc5 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fe25 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7ff fdfd 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7ff fdb3 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7ff fdf1 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	33f8      	adds	r3, #248	@ 0xf8
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fda8 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	33c4      	adds	r3, #196	@ 0xc4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fde7 	bl	8006a04 <_ZN8touchgfx13BoxWithBorderD1Ev>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3398      	adds	r3, #152	@ 0x98
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff fd9e 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	336c      	adds	r3, #108	@ 0x6c
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff fdbb 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3340      	adds	r3, #64	@ 0x40
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fe36 	bl	8005ac0 <_ZN8touchgfx3BoxD1Ev>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7ff feb8 	bl	8006bcc <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	0802d600 	.word	0x0802d600

08006e6c <_ZN12MainViewBaseD0Ev>:
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fecb 	bl	8006c10 <_ZN12MainViewBaseD1Ev>
 8006e7a:	f640 3118 	movw	r1, #2840	@ 0xb18
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f024 f843 	bl	802af0a <_ZdlPvj>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN12MainViewBase17set_volume_sliderEi>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void set_volume_slider(int value)
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Main
    }
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <_ZN12MainViewBase20update_anomaly_alertEv>:

    virtual void update_anomaly_alert()
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <_ZN12MainViewBase12toggle_voiceEv>:

    virtual void toggle_voice()
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <_ZN12MainViewBase18alert_mute_pressedEv>:

    virtual void alert_mute_pressed()
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_ZN12MainViewBase18set_volume_encoderEv>:

    virtual void set_volume_encoder()
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <_ZN12MainViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8006efc:	f014 fec6 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8006f00:	4603      	mov	r3, r0
    }
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fe fed4 	bl	8005cc4 <_ZN8touchgfx6ButtonC1Ev>
 8006f1c:	4a07      	ldr	r2, [pc, #28]	@ (8006f3c <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3334      	adds	r3, #52	@ 0x34
 8006f26:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fcd2 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	0802ec9c 	.word	0x0802ec9c

08006f40 <_ZN12MainViewBaseC1Ev>:
#include <gui_generated/main_screen/MainViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

MainViewBase::MainViewBase() :
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	f5ad 7d1d 	sub.w	sp, sp, #628	@ 0x274
 8006f46:	af02      	add	r7, sp, #8
 8006f48:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f4c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f50:	6018      	str	r0, [r3, #0]
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8006f52:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f56:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f002 fb55 	bl	800960c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8006f62:	4ae7      	ldr	r2, [pc, #924]	@ (8007300 <_ZN12MainViewBaseC1Ev+0x3c0>)
 8006f64:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f68:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	601a      	str	r2, [r3, #0]
 8006f70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f74:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3340      	adds	r3, #64	@ 0x40
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fd47 	bl	8005a10 <_ZN8touchgfx3BoxC1Ev>
 8006f82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006f86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8006f90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f94:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fe fc9b 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8006f9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7fe fd65 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8006faa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fae:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3398      	adds	r3, #152	@ 0x98
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe fcac 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8006fbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fc0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	33c4      	adds	r3, #196	@ 0xc4
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7fe fd9b 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006fce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fd2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	33f8      	adds	r3, #248	@ 0xf8
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fe fc9a 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8006fe0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006fe4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fd88 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8006ff4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8006ff8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007002:	4618      	mov	r0, r3
 8007004:	f7fe fc86 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007008:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800700c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fd74 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800701c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007020:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800702a:	4618      	mov	r0, r3
 800702c:	f7fe fdba 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8007030:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007034:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe fc68 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007044:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007048:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fd56 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007058:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800705c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007066:	4618      	mov	r0, r3
 8007068:	f010 fcfa 	bl	8017a60 <_ZN8touchgfx12TextProgressC1Ev>
 800706c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007070:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fc4a 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007080:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007084:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe fd38 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007094:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007098:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fd7e 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 80070a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f011 fbb4 	bl	8018824 <_ZN8touchgfx6SliderC1Ev>
 80070bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff ff1e 	bl	8006f0c <_ZN8touchgfx12ToggleButtonC1Ev>
 80070d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070d4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fc18 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 80070e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070e8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fd06 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80070f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80070fc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fc04 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 800710c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007110:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 800711a:	4618      	mov	r0, r3
 800711c:	f7fe fcf2 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007120:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007124:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe fbf0 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007134:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007138:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fcde 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007148:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800714c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fbdc 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 800715c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007160:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fcca 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007170:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007174:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fd10 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8007184:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007188:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fbbe 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007198:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800719c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fcac 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071b0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fca2 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 80071c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fce8 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 80071d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fcde 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 80071e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80071ec:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fb8c 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 80071fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007200:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fc7a 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007210:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007214:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fc70 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007224:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007228:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8007232:	4618      	mov	r0, r3
 8007234:	f7fe fcb6 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8007238:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800723c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fcac 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 800724c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007250:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725a:	4618      	mov	r0, r3
 800725c:	f7fe fb5a 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 8007260:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007264:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fc48 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007274:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007278:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8007282:	4618      	mov	r0, r3
 8007284:	f7fe fc8e 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
 8007288:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800728c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 8007296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800729a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fb18 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80072a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80072a8:	4619      	mov	r1, r3
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7fe fbe2 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80072b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072b4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 80072be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80072c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe fb04 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80072cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80072d0:	4619      	mov	r1, r3
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fe fbce 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80072d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe fcec 	bl	8005cc4 <_ZN8touchgfx6ButtonC1Ev>
 80072ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80072f0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 80072fa:	4618      	mov	r0, r3
 80072fc:	e002      	b.n	8007304 <_ZN12MainViewBaseC1Ev+0x3c4>
 80072fe:	bf00      	nop
 8007300:	0802d600 	.word	0x0802d600
 8007304:	f7fe fcde 	bl	8005cc4 <_ZN8touchgfx6ButtonC1Ev>
 8007308:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800730c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fafc 	bl	8005914 <_ZN8touchgfx9ContainerC1Ev>
 800731c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007320:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fbea 	bl	8005b04 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8007330:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007334:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 800733e:	4618      	mov	r0, r3
 8007340:	f7fe fc30 	bl	8005ba4 <_ZN8touchgfx8TextAreaC1Ev>
    buttonCallback(this, &MainViewBase::buttonCallbackHandler),
 8007344:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007348:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f603 20f8 	addw	r0, r3, #2808	@ 0xaf8
 8007352:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007356:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800735a:	4ae9      	ldr	r2, [pc, #932]	@ (8007700 <_ZN12MainViewBaseC1Ev+0x7c0>)
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007362:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007366:	2200      	movs	r2, #0
 8007368:	605a      	str	r2, [r3, #4]
 800736a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800736e:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8007372:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007376:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 800737a:	cb0c      	ldmia	r3, {r2, r3}
 800737c:	6809      	ldr	r1, [r1, #0]
 800737e:	f002 f95b 	bl	8009638 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
    sliderValueChangedCallback(this, &MainViewBase::sliderValueChangedCallbackHandler)
 8007382:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007386:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f603 3008 	addw	r0, r3, #2824	@ 0xb08
 8007390:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007394:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8007398:	4ada      	ldr	r2, [pc, #872]	@ (8007704 <_ZN12MainViewBaseC1Ev+0x7c4>)
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073a0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80073a4:	2200      	movs	r2, #0
 80073a6:	605a      	str	r2, [r3, #4]
 80073a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073ac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80073b0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80073b4:	f5a2 7119 	sub.w	r1, r2, #612	@ 0x264
 80073b8:	cb0c      	ldmia	r3, {r2, r3}
 80073ba:	6809      	ldr	r1, [r1, #0]
 80073bc:	f002 f96c 	bl	8009698 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{

    __background.setPosition(0, 0, 480, 272);
 80073c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80073ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80073d8:	2200      	movs	r2, #0
 80073da:	2100      	movs	r1, #0
 80073dc:	f7fc fe15 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80073e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80073e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80073ee:	2300      	movs	r3, #0
 80073f0:	f887 3176 	strb.w	r3, [r7, #374]	@ 0x176
 80073f4:	2300      	movs	r3, #0
 80073f6:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
 80073fa:	2300      	movs	r3, #0
 80073fc:	f887 3174 	strb.w	r3, [r7, #372]	@ 0x174
 8007400:	f897 3176 	ldrb.w	r3, [r7, #374]	@ 0x176
 8007404:	041a      	lsls	r2, r3, #16
 8007406:	f897 3175 	ldrb.w	r3, [r7, #373]	@ 0x175
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	431a      	orrs	r2, r3
 800740e:	f897 3174 	ldrb.w	r3, [r7, #372]	@ 0x174
 8007412:	4313      	orrs	r3, r2
 8007414:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007418:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800741c:	4611      	mov	r1, r2
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fa49 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007424:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8007428:	4619      	mov	r1, r3
 800742a:	4620      	mov	r0, r4
 800742c:	f7fe fb14 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    Main_Background.setXY(0, 0);
 8007430:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007434:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	336c      	adds	r3, #108	@ 0x6c
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f7fc fe3b 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Main_Background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_1_ID));
 8007446:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800744a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8007454:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007458:	2100      	movs	r1, #0
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fa3a 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007460:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007464:	4619      	mov	r1, r3
 8007466:	4620      	mov	r0, r4
 8007468:	f012 ff01 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Button_Panel.setPosition(10, 94, 460, 170);
 800746c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007470:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 800747a:	23aa      	movs	r3, #170	@ 0xaa
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8007482:	225e      	movs	r2, #94	@ 0x5e
 8007484:	210a      	movs	r1, #10
 8007486:	f7fc fdc0 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background.setPosition(0, 18, 460, 153);
 800748a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800748e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
 8007498:	2399      	movs	r3, #153	@ 0x99
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80074a0:	2212      	movs	r2, #18
 80074a2:	2100      	movs	r1, #0
 80074a4:	f7fc fdb1 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80074a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 80074b6:	234e      	movs	r3, #78	@ 0x4e
 80074b8:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
 80074bc:	2389      	movs	r3, #137	@ 0x89
 80074be:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
 80074c2:	23ae      	movs	r3, #174	@ 0xae
 80074c4:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
 80074c8:	f897 3179 	ldrb.w	r3, [r7, #377]	@ 0x179
 80074cc:	041a      	lsls	r2, r3, #16
 80074ce:	f897 3178 	ldrb.w	r3, [r7, #376]	@ 0x178
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	431a      	orrs	r2, r3
 80074d6:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80074da:	4313      	orrs	r3, r2
 80074dc:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80074e0:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe f9e5 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80074ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80074f0:	4619      	mov	r1, r3
 80074f2:	4620      	mov	r0, r4
 80074f4:	f7fe fab0 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80074f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80074fc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8007506:	23ed      	movs	r3, #237	@ 0xed
 8007508:	f887 317c 	strb.w	r3, [r7, #380]	@ 0x17c
 800750c:	2366      	movs	r3, #102	@ 0x66
 800750e:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
 8007512:	2363      	movs	r3, #99	@ 0x63
 8007514:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
 8007518:	f897 317c 	ldrb.w	r3, [r7, #380]	@ 0x17c
 800751c:	041a      	lsls	r2, r3, #16
 800751e:	f897 317b 	ldrb.w	r3, [r7, #379]	@ 0x17b
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	431a      	orrs	r2, r3
 8007526:	f897 317a 	ldrb.w	r3, [r7, #378]	@ 0x17a
 800752a:	4313      	orrs	r3, r2
 800752c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007530:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8007534:	4611      	mov	r1, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe f9bd 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800753c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007540:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	4620      	mov	r0, r4
 800754a:	f7fe faf7 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background.setBorderSize(5);
 800754e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007552:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	33c4      	adds	r3, #196	@ 0xc4
 800755a:	2105      	movs	r1, #5
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe fafb 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Button_Panel.add(Button_Panel_Background);
 8007562:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007566:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007570:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007574:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	33c4      	adds	r3, #196	@ 0xc4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f010 fcd0 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Comm_Panel.setPosition(5, 84, 450, 82);
 8007584:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007588:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 8007592:	2352      	movs	r3, #82	@ 0x52
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800759a:	2254      	movs	r2, #84	@ 0x54
 800759c:	2105      	movs	r1, #5
 800759e:	f7fc fd34 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Voice_Comm_Background.setPosition(0, 0, 450, 82);
 80075a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80075a6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 80075b0:	2352      	movs	r3, #82	@ 0x52
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80075b8:	2200      	movs	r2, #0
 80075ba:	2100      	movs	r1, #0
 80075bc:	f7fc fd25 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Voice_Comm_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80075c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80075c4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 80075ce:	2343      	movs	r3, #67	@ 0x43
 80075d0:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
 80075d4:	2365      	movs	r3, #101	@ 0x65
 80075d6:	f887 317e 	strb.w	r3, [r7, #382]	@ 0x17e
 80075da:	238b      	movs	r3, #139	@ 0x8b
 80075dc:	f887 317d 	strb.w	r3, [r7, #381]	@ 0x17d
 80075e0:	f897 317f 	ldrb.w	r3, [r7, #383]	@ 0x17f
 80075e4:	041a      	lsls	r2, r3, #16
 80075e6:	f897 317e 	ldrb.w	r3, [r7, #382]	@ 0x17e
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	431a      	orrs	r2, r3
 80075ee:	f897 317d 	ldrb.w	r3, [r7, #381]	@ 0x17d
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80075f8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe f959 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007604:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007608:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4619      	mov	r1, r3
 8007610:	4620      	mov	r0, r4
 8007612:	f7fe fa21 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voice_Comm_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007616:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800761a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3182 	strb.w	r3, [r7, #386]	@ 0x182
 800762a:	2300      	movs	r3, #0
 800762c:	f887 3181 	strb.w	r3, [r7, #385]	@ 0x181
 8007630:	2300      	movs	r3, #0
 8007632:	f887 3180 	strb.w	r3, [r7, #384]	@ 0x180
 8007636:	f897 3182 	ldrb.w	r3, [r7, #386]	@ 0x182
 800763a:	041a      	lsls	r2, r3, #16
 800763c:	f897 3181 	ldrb.w	r3, [r7, #385]	@ 0x181
 8007640:	021b      	lsls	r3, r3, #8
 8007642:	431a      	orrs	r2, r3
 8007644:	f897 3180 	ldrb.w	r3, [r7, #384]	@ 0x180
 8007648:	4313      	orrs	r3, r2
 800764a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800764e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8007652:	4611      	mov	r1, r2
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe f92e 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800765a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800765e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4619      	mov	r1, r3
 8007666:	4620      	mov	r0, r4
 8007668:	f7fe fa68 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voice_Comm_Background.setBorderSize(2);
 800766c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007670:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800767a:	2102      	movs	r1, #2
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fa6b 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voice_Comm_Panel.add(Voice_Comm_Background);
 8007682:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007686:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007690:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007694:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800769e:	4619      	mov	r1, r3
 80076a0:	4610      	mov	r0, r2
 80076a2:	f010 fc3f 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Textbox.setPosition(157, 0, 137, 20);
 80076a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076aa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f503 70ac 	add.w	r0, r3, #344	@ 0x158
 80076b4:	2314      	movs	r3, #20
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	2389      	movs	r3, #137	@ 0x89
 80076ba:	2200      	movs	r2, #0
 80076bc:	219d      	movs	r1, #157	@ 0x9d
 80076be:	f7fc fca4 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Voicecomm_Border.setPosition(-1, 3, 138, 17);
 80076c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f503 70c2 	add.w	r0, r3, #388	@ 0x184
 80076d0:	2311      	movs	r3, #17
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	238a      	movs	r3, #138	@ 0x8a
 80076d6:	2203      	movs	r2, #3
 80076d8:	f04f 31ff 	mov.w	r1, #4294967295
 80076dc:	f7fc fc95 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Voicecomm_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80076e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80076e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 80076ee:	2300      	movs	r3, #0
 80076f0:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3184 	strb.w	r3, [r7, #388]	@ 0x184
 80076fa:	2300      	movs	r3, #0
 80076fc:	e004      	b.n	8007708 <_ZN12MainViewBaseC1Ev+0x7c8>
 80076fe:	bf00      	nop
 8007700:	0800957d 	.word	0x0800957d
 8007704:	080095dd 	.word	0x080095dd
 8007708:	f887 3183 	strb.w	r3, [r7, #387]	@ 0x183
 800770c:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 8007710:	041a      	lsls	r2, r3, #16
 8007712:	f897 3184 	ldrb.w	r3, [r7, #388]	@ 0x184
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	431a      	orrs	r2, r3
 800771a:	f897 3183 	ldrb.w	r3, [r7, #387]	@ 0x183
 800771e:	4313      	orrs	r3, r2
 8007720:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007724:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe f8c3 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007730:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007734:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4619      	mov	r1, r3
 800773c:	4620      	mov	r0, r4
 800773e:	f7fe f98b 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Voicecomm_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007742:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007746:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f503 74c2 	add.w	r4, r3, #388	@ 0x184
 8007750:	23ed      	movs	r3, #237	@ 0xed
 8007752:	f887 3188 	strb.w	r3, [r7, #392]	@ 0x188
 8007756:	2366      	movs	r3, #102	@ 0x66
 8007758:	f887 3187 	strb.w	r3, [r7, #391]	@ 0x187
 800775c:	2363      	movs	r3, #99	@ 0x63
 800775e:	f887 3186 	strb.w	r3, [r7, #390]	@ 0x186
 8007762:	f897 3188 	ldrb.w	r3, [r7, #392]	@ 0x188
 8007766:	041a      	lsls	r2, r3, #16
 8007768:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	431a      	orrs	r2, r3
 8007770:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 8007774:	4313      	orrs	r3, r2
 8007776:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800777a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe f898 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007786:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800778a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	4620      	mov	r0, r4
 8007794:	f7fe f9d2 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Voicecomm_Border.setBorderSize(3);
 8007798:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800779c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80077a6:	2103      	movs	r1, #3
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe f9d5 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Voicecomm_Textbox.add(Voicecomm_Border);
 80077ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077b2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80077bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f010 fba9 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voicecomm_Text.setXY(7, 5);
 80077d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80077e0:	2205      	movs	r2, #5
 80077e2:	2107      	movs	r1, #7
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fc fc69 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Voicecomm_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80077ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80077ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 80077f8:	23ff      	movs	r3, #255	@ 0xff
 80077fa:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
 80077fe:	23ff      	movs	r3, #255	@ 0xff
 8007800:	f887 318a 	strb.w	r3, [r7, #394]	@ 0x18a
 8007804:	23ff      	movs	r3, #255	@ 0xff
 8007806:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
 800780a:	f897 318b 	ldrb.w	r3, [r7, #395]	@ 0x18b
 800780e:	041a      	lsls	r2, r3, #16
 8007810:	f897 318a 	ldrb.w	r3, [r7, #394]	@ 0x18a
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	431a      	orrs	r2, r3
 8007818:	f897 3189 	ldrb.w	r3, [r7, #393]	@ 0x189
 800781c:	4313      	orrs	r3, r2
 800781e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007822:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f844 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800782e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007832:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	f8c7 418c 	str.w	r4, [r7, #396]	@ 0x18c
 800783e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007842:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8007846:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007848:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800784c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007850:	f5a2 720f 	sub.w	r2, r2, #572	@ 0x23c
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8007858:	bf00      	nop
    Voicecomm_Text.setLinespacing(0);
 800785a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800785e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007868:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800786c:	2300      	movs	r3, #0
 800786e:	f8a7 3192 	strh.w	r3, [r7, #402]	@ 0x192
        linespace = space;
 8007872:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007876:	f8b7 2192 	ldrh.w	r2, [r7, #402]	@ 0x192
 800787a:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 800787c:	bf00      	nop
    Voicecomm_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2Q8N));
 800787e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007882:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f503 74dc 	add.w	r4, r3, #440	@ 0x1b8
 800788c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8007890:	2101      	movs	r1, #1
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe f970 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8007898:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800789c:	4619      	mov	r1, r3
 800789e:	4620      	mov	r0, r4
 80078a0:	f012 fa6b 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80078a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fc fafb 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Voicecomm_Textbox.add(Voicecomm_Text);
 80078ae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078b2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f503 72ac 	add.w	r2, r3, #344	@ 0x158
 80078bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80078ca:	4619      	mov	r1, r3
 80078cc:	4610      	mov	r0, r2
 80078ce:	f010 fb29 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Voicecomm_Textbox);
 80078d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 80078e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078e4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f010 fb17 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Textbox.setPosition(143, 58, 70, 16);
 80078f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80078fa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f503 70fa 	add.w	r0, r3, #500	@ 0x1f4
 8007904:	2310      	movs	r3, #16
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2346      	movs	r3, #70	@ 0x46
 800790a:	223a      	movs	r2, #58	@ 0x3a
 800790c:	218f      	movs	r1, #143	@ 0x8f
 800790e:	f7fc fb7c 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Volume_Text_Border.setPosition(0, 0, 70, 16);
 8007912:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007916:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 7008 	add.w	r0, r3, #544	@ 0x220
 8007920:	2310      	movs	r3, #16
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	2346      	movs	r3, #70	@ 0x46
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	f7fc fb6e 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Volume_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800792e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007932:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 800793c:	2300      	movs	r3, #0
 800793e:	f887 319c 	strb.w	r3, [r7, #412]	@ 0x19c
 8007942:	2300      	movs	r3, #0
 8007944:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8007948:	2300      	movs	r3, #0
 800794a:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
 800794e:	f897 319c 	ldrb.w	r3, [r7, #412]	@ 0x19c
 8007952:	041a      	lsls	r2, r3, #16
 8007954:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	431a      	orrs	r2, r3
 800795c:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 8007960:	4313      	orrs	r3, r2
 8007962:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007966:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd ffa2 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007972:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007976:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	4620      	mov	r0, r4
 8007980:	f7fe f86a 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Volume_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007984:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007988:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 8007992:	23ed      	movs	r3, #237	@ 0xed
 8007994:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f
 8007998:	2366      	movs	r3, #102	@ 0x66
 800799a:	f887 319e 	strb.w	r3, [r7, #414]	@ 0x19e
 800799e:	2363      	movs	r3, #99	@ 0x63
 80079a0:	f887 319d 	strb.w	r3, [r7, #413]	@ 0x19d
 80079a4:	f897 319f 	ldrb.w	r3, [r7, #415]	@ 0x19f
 80079a8:	041a      	lsls	r2, r3, #16
 80079aa:	f897 319e 	ldrb.w	r3, [r7, #414]	@ 0x19e
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	431a      	orrs	r2, r3
 80079b2:	f897 319d 	ldrb.w	r3, [r7, #413]	@ 0x19d
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80079bc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80079c0:	4611      	mov	r1, r2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fd ff77 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80079c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4619      	mov	r1, r3
 80079d4:	4620      	mov	r0, r4
 80079d6:	f7fe f8b1 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Volume_Text_Border.setBorderSize(3);
 80079da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079de:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80079e8:	2103      	movs	r1, #3
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe f8b4 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Volume_Textbox.add(Volume_Text_Border);
 80079f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80079f4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 80079fe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a02:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f010 fa88 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    textProgress1.setXY(3, 3);
 8007a14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a18:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007a22:	2203      	movs	r2, #3
 8007a24:	2103      	movs	r1, #3
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fc fb48 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    textProgress1.setProgressIndicatorPosition(0, 0, 64, 20);
 8007a2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a30:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8007a3a:	2314      	movs	r3, #20
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	2340      	movs	r3, #64	@ 0x40
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	f00f ffee 	bl	8017a24 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>
    textProgress1.setRange(0, 100);
 8007a48:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a4c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2264      	movs	r2, #100	@ 0x64
 8007a5e:	2100      	movs	r1, #0
 8007a60:	f010 f8e8 	bl	8017c34 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    textProgress1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007a64:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007a68:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8007a72:	23ff      	movs	r3, #255	@ 0xff
 8007a74:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 8007a78:	23ff      	movs	r3, #255	@ 0xff
 8007a7a:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 8007a7e:	23ff      	movs	r3, #255	@ 0xff
 8007a80:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 8007a84:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 8007a88:	041a      	lsls	r2, r3, #16
 8007a8a:	f897 31a1 	ldrb.w	r3, [r7, #417]	@ 0x1a1
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	431a      	orrs	r2, r3
 8007a92:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007a9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd ff07 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007aa8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007aac:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f00f ff47 	bl	8017948 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>
    textProgress1.setNumberOfDecimals(0);
 8007aba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007abe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007ac8:	2100      	movs	r1, #0
 8007aca:	4618      	mov	r0, r3
 8007acc:	f00f ff42 	bl	8017954 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>
    textProgress1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F9M9));
 8007ad0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ad4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8007ade:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007ae2:	2109      	movs	r1, #9
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe f847 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8007aea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007aee:	4619      	mov	r1, r3
 8007af0:	4620      	mov	r0, r4
 8007af2:	f00f ff45 	bl	8017980 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>
 8007af6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fc f9d2 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    textProgress1.setBackground(touchgfx::Bitmap(BITMAP_VOLUME_BACKGROUND2_ID));
 8007b00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b04:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f503 7415 	add.w	r4, r3, #596	@ 0x254
 8007b0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007b12:	210d      	movs	r1, #13
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fd fedd 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007b1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4620      	mov	r0, r4
 8007b22:	f010 f934 	bl	8017d8e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    textProgress1.setValue(50);
 8007b26:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b2a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007b34:	2132      	movs	r1, #50	@ 0x32
 8007b36:	4618      	mov	r0, r3
 8007b38:	f00f ff2e 	bl	8017998 <_ZN8touchgfx12TextProgress8setValueEi>
    Volume_Textbox.add(textProgress1);
 8007b3c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b40:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f503 72fa 	add.w	r2, r3, #500	@ 0x1f4
 8007b4a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b4e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f010 f9e2 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Volume_Textbox);
 8007b60:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b64:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007b6e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b72:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	4610      	mov	r0, r2
 8007b80:	f010 f9d0 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Textbox.setPosition(388, 58, 39, 17);
 8007b84:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007b88:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8007b92:	2311      	movs	r3, #17
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	2327      	movs	r3, #39	@ 0x27
 8007b98:	223a      	movs	r2, #58	@ 0x3a
 8007b9a:	f44f 71c2 	mov.w	r1, #388	@ 0x184
 8007b9e:	f7fc fa34 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Toggle_Text_Border.setPosition(0, 0, 38, 16);
 8007ba2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ba6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f503 7062 	add.w	r0, r3, #904	@ 0x388
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2326      	movs	r3, #38	@ 0x26
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	f7fc fa26 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Toggle_Text_Border.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8007bbe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007bc2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 8007bde:	f897 31a5 	ldrb.w	r3, [r7, #421]	@ 0x1a5
 8007be2:	041a      	lsls	r2, r3, #16
 8007be4:	f897 31a4 	ldrb.w	r3, [r7, #420]	@ 0x1a4
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	431a      	orrs	r2, r3
 8007bec:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007bf6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fd fe5a 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007c02:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c06:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7fd ff22 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Toggle_Text_Border.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8007c14:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c18:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f503 7462 	add.w	r4, r3, #904	@ 0x388
 8007c22:	23ed      	movs	r3, #237	@ 0xed
 8007c24:	f887 31a8 	strb.w	r3, [r7, #424]	@ 0x1a8
 8007c28:	2366      	movs	r3, #102	@ 0x66
 8007c2a:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
 8007c2e:	2363      	movs	r3, #99	@ 0x63
 8007c30:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
 8007c34:	f897 31a8 	ldrb.w	r3, [r7, #424]	@ 0x1a8
 8007c38:	041a      	lsls	r2, r3, #16
 8007c3a:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	431a      	orrs	r2, r3
 8007c42:	f897 31a6 	ldrb.w	r3, [r7, #422]	@ 0x1a6
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007c4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c50:	4611      	mov	r1, r2
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fd fe2f 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007c58:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c5c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4619      	mov	r1, r3
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7fd ff69 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Toggle_Text_Border.setBorderSize(3);
 8007c6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c6e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007c78:	2103      	movs	r1, #3
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fd ff6c 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Toggle_Textbox.add(Toggle_Text_Border);
 8007c80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007c8e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007c92:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f010 f940 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Toggle_Text.setXY(4, 3);
 8007ca4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ca8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	2104      	movs	r1, #4
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fc fa00 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Toggle_Text.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8007cbc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007cc0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007cca:	23ff      	movs	r3, #255	@ 0xff
 8007ccc:	f887 31ab 	strb.w	r3, [r7, #427]	@ 0x1ab
 8007cd0:	23ff      	movs	r3, #255	@ 0xff
 8007cd2:	f887 31aa 	strb.w	r3, [r7, #426]	@ 0x1aa
 8007cd6:	23ff      	movs	r3, #255	@ 0xff
 8007cd8:	f887 31a9 	strb.w	r3, [r7, #425]	@ 0x1a9
 8007cdc:	f897 31ab 	ldrb.w	r3, [r7, #427]	@ 0x1ab
 8007ce0:	041a      	lsls	r2, r3, #16
 8007ce2:	f897 31aa 	ldrb.w	r3, [r7, #426]	@ 0x1aa
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	f897 31a9 	ldrb.w	r3, [r7, #425]	@ 0x1a9
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007cf4:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd fddb 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007d00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f8c7 41ac 	str.w	r4, [r7, #428]	@ 0x1ac
 8007d10:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d14:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8007d18:	601a      	str	r2, [r3, #0]
        this->color = color;
 8007d1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007d1e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8007d22:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8007d2a:	bf00      	nop
    Toggle_Text.setLinespacing(0);
 8007d2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d30:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007d3a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f8a7 31b2 	strh.w	r3, [r7, #434]	@ 0x1b2
        linespace = space;
 8007d44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007d48:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	@ 0x1b2
 8007d4c:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8007d4e:	bf00      	nop
    Toggle_Text.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P64J));
 8007d50:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d54:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f503 746f 	add.w	r4, r3, #956	@ 0x3bc
 8007d5e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fd ff07 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8007d6a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007d6e:	4619      	mov	r1, r3
 8007d70:	4620      	mov	r0, r4
 8007d72:	f012 f802 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8007d76:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fc f892 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Toggle_Textbox.add(Toggle_Text);
 8007d80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f503 7257 	add.w	r2, r3, #860	@ 0x35c
 8007d8e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007d92:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f503 736f 	add.w	r3, r3, #956	@ 0x3bc
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f010 f8c0 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Voice_Comm_Panel.add(Toggle_Textbox);
 8007da4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007da8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007db2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007db6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f010 f8ae 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Volume_Slider.setXY(8, 25);
 8007dc8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007dcc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007dd6:	2219      	movs	r2, #25
 8007dd8:	2108      	movs	r1, #8
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fc f96e 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Volume_Slider.setBitmaps(touchgfx::Bitmap(BITMAP_SLIDER_DARK_ID), touchgfx::Bitmap(BITMAP_SLIDER_LIGHT_ID), touchgfx::Bitmap(BITMAP_UNPRESSED_BUTTON_ID));
 8007de0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007de4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f503 747e 	add.w	r4, r3, #1016	@ 0x3f8
 8007dee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007df2:	2104      	movs	r1, #4
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd fd6d 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007dfa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8007dfe:	2105      	movs	r1, #5
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd fd67 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007e06:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007e0a:	210b      	movs	r1, #11
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fd fd61 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007e12:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007e16:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8007e1a:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f010 fd5c 	bl	80188dc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    Volume_Slider.setupHorizontalSlider(2, 9, 0, 0, 310);
 8007e24:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e28:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f503 707e 	add.w	r0, r3, #1016	@ 0x3f8
 8007e32:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	2209      	movs	r2, #9
 8007e40:	2102      	movs	r1, #2
 8007e42:	f010 fbbf 	bl	80185c4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    Volume_Slider.setValueRange(0, 100);
 8007e46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e4a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007e54:	2264      	movs	r2, #100	@ 0x64
 8007e56:	2100      	movs	r1, #0
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f010 fb28 	bl	80184ae <_ZN8touchgfx6Slider13setValueRangeEii>
    Volume_Slider.setValue(50);
 8007e5e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e62:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007e6c:	2132      	movs	r1, #50	@ 0x32
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f010 faa9 	bl	80183c6 <_ZN8touchgfx6Slider8setValueEi>
    Volume_Slider.setNewValueCallback(sliderValueChangedCallback);
 8007e74:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e78:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f503 727e 	add.w	r2, r3, #1016	@ 0x3f8
 8007e82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f603 3308 	addw	r3, r3, #2824	@ 0xb08
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f7fe fe77 	bl	8006b86 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    Voice_Comm_Panel.add(Volume_Slider);
 8007e98:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007e9c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007ea6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007eaa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	f010 f834 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Voice_Toggle_Button.setXY(372, 23);
 8007ebc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ec0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007eca:	2217      	movs	r2, #23
 8007ecc:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fc f8f3 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Voice_Toggle_Button.setBitmaps(touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_ON2_ID), touchgfx::Bitmap(BITMAP_TOGGLE_BUTTON_OFF2_ID));
 8007ed6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007eda:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f203 44f4 	addw	r4, r3, #1268	@ 0x4f4
 8007ee4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007ee8:	210a      	movs	r1, #10
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fd fcf2 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007ef0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8007ef4:	2108      	movs	r1, #8
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fd fcec 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 8007efc:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8007f00:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007f04:	4619      	mov	r1, r3
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7fe fe4c 	bl	8006ba4 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    Voice_Toggle_Button.setAction(buttonCallback);
 8007f0c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f10:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 8007f1a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f1e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7fd fe9a 	bl	8005c64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    Voice_Comm_Panel.add(Voice_Toggle_Button);
 8007f30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f34:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f103 02f8 	add.w	r2, r3, #248	@ 0xf8
 8007f3e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f42:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f00f ffe8 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Voice_Comm_Panel);
 8007f54:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f58:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 8007f62:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f66:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	33f8      	adds	r3, #248	@ 0xf8
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f00f ffd7 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Anomaly_Detection_Panel.setPosition(5, 23, 450, 67);
 8007f76:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f7a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f203 502c 	addw	r0, r3, #1324	@ 0x52c
 8007f84:	2343      	movs	r3, #67	@ 0x43
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007f8c:	2217      	movs	r2, #23
 8007f8e:	2105      	movs	r1, #5
 8007f90:	f7fc f83b 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Anomaly_Detection_Background.setPosition(0, 0, 450, 63);
 8007f94:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007f98:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f503 60ab 	add.w	r0, r3, #1368	@ 0x558
 8007fa2:	233f      	movs	r3, #63	@ 0x3f
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8007faa:	2200      	movs	r2, #0
 8007fac:	2100      	movs	r1, #0
 8007fae:	f7fc f82c 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Anomaly_Detection_Background.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8007fb2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007fb6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8007fc0:	2343      	movs	r3, #67	@ 0x43
 8007fc2:	f887 31bb 	strb.w	r3, [r7, #443]	@ 0x1bb
 8007fc6:	2365      	movs	r3, #101	@ 0x65
 8007fc8:	f887 31ba 	strb.w	r3, [r7, #442]	@ 0x1ba
 8007fcc:	238b      	movs	r3, #139	@ 0x8b
 8007fce:	f887 31b9 	strb.w	r3, [r7, #441]	@ 0x1b9
 8007fd2:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8007fd6:	041a      	lsls	r2, r3, #16
 8007fd8:	f897 31ba 	ldrb.w	r3, [r7, #442]	@ 0x1ba
 8007fdc:	021b      	lsls	r3, r3, #8
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	f897 31b9 	ldrb.w	r3, [r7, #441]	@ 0x1b9
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8007fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fd fc60 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8007ff6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8007ffa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	4620      	mov	r0, r4
 8008004:	f7fd fd28 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008008:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800800c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f503 64ab 	add.w	r4, r3, #1368	@ 0x558
 8008016:	2300      	movs	r3, #0
 8008018:	f887 31be 	strb.w	r3, [r7, #446]	@ 0x1be
 800801c:	2300      	movs	r3, #0
 800801e:	f887 31bd 	strb.w	r3, [r7, #445]	@ 0x1bd
 8008022:	2300      	movs	r3, #0
 8008024:	f887 31bc 	strb.w	r3, [r7, #444]	@ 0x1bc
 8008028:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 800802c:	041a      	lsls	r2, r3, #16
 800802e:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	431a      	orrs	r2, r3
 8008036:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 800803a:	4313      	orrs	r3, r2
 800803c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008040:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7fd fc35 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800804c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008050:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	4620      	mov	r0, r4
 800805a:	f7fd fd6f 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Anomaly_Detection_Background.setBorderSize(2);
 800805e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008062:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 800806c:	2102      	movs	r1, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f7fd fd72 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Anomaly_Detection_Panel.add(Anomaly_Detection_Background);
 8008074:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008078:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f203 522c 	addw	r2, r3, #1324	@ 0x52c
 8008082:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008086:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f503 63ab 	add.w	r3, r3, #1368	@ 0x558
 8008090:	4619      	mov	r1, r3
 8008092:	4610      	mov	r0, r2
 8008094:	f00f ff46 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Button_Panel.add(Anomaly_Detection_Panel);
 8008098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800809c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f103 0298 	add.w	r2, r3, #152	@ 0x98
 80080a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080aa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f203 532c 	addw	r3, r3, #1324	@ 0x52c
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f00f ff34 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_panel.setPosition(10, 8, 460, 109);
 80080bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f203 508c 	addw	r0, r3, #1420	@ 0x58c
 80080ca:	236d      	movs	r3, #109	@ 0x6d
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80080d2:	2208      	movs	r2, #8
 80080d4:	210a      	movs	r1, #10
 80080d6:	f7fb ff98 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    Button_Panel_Background_1.setPosition(0, 0, 460, 109);
 80080da:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080de:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f503 60b7 	add.w	r0, r3, #1464	@ 0x5b8
 80080e8:	236d      	movs	r3, #109	@ 0x6d
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	f7fb ff89 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    Button_Panel_Background_1.setColor(touchgfx::Color::getColorFromRGB(78, 137, 174));
 80080f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80080fc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 8008106:	234e      	movs	r3, #78	@ 0x4e
 8008108:	f887 31c1 	strb.w	r3, [r7, #449]	@ 0x1c1
 800810c:	2389      	movs	r3, #137	@ 0x89
 800810e:	f887 31c0 	strb.w	r3, [r7, #448]	@ 0x1c0
 8008112:	23ae      	movs	r3, #174	@ 0xae
 8008114:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
 8008118:	f897 31c1 	ldrb.w	r3, [r7, #449]	@ 0x1c1
 800811c:	041a      	lsls	r2, r3, #16
 800811e:	f897 31c0 	ldrb.w	r3, [r7, #448]	@ 0x1c0
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	431a      	orrs	r2, r3
 8008126:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 800812a:	4313      	orrs	r3, r2
 800812c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8008134:	4611      	mov	r1, r2
 8008136:	4618      	mov	r0, r3
 8008138:	f7fd fbbd 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800813c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008140:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4619      	mov	r1, r3
 8008148:	4620      	mov	r0, r4
 800814a:	f7fd fc85 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800814e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008152:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f503 64b7 	add.w	r4, r3, #1464	@ 0x5b8
 800815c:	23ed      	movs	r3, #237	@ 0xed
 800815e:	f887 31c4 	strb.w	r3, [r7, #452]	@ 0x1c4
 8008162:	2366      	movs	r3, #102	@ 0x66
 8008164:	f887 31c3 	strb.w	r3, [r7, #451]	@ 0x1c3
 8008168:	2363      	movs	r3, #99	@ 0x63
 800816a:	f887 31c2 	strb.w	r3, [r7, #450]	@ 0x1c2
 800816e:	f897 31c4 	ldrb.w	r3, [r7, #452]	@ 0x1c4
 8008172:	041a      	lsls	r2, r3, #16
 8008174:	f897 31c3 	ldrb.w	r3, [r7, #451]	@ 0x1c3
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	431a      	orrs	r2, r3
 800817c:	f897 31c2 	ldrb.w	r3, [r7, #450]	@ 0x1c2
 8008180:	4313      	orrs	r3, r2
 8008182:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008186:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fb92 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008192:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008196:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4619      	mov	r1, r3
 800819e:	4620      	mov	r0, r4
 80081a0:	f7fd fccc 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    Button_Panel_Background_1.setBorderSize(5);
 80081a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081a8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 80081b2:	2105      	movs	r1, #5
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fd fccf 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_panel.add(Button_Panel_Background_1);
 80081ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 80081c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f503 63b7 	add.w	r3, r3, #1464	@ 0x5b8
 80081d6:	4619      	mov	r1, r3
 80081d8:	4610      	mov	r0, r2
 80081da:	f00f fea3 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Panel_1.setPosition(5, 4, 450, 100);
 80081de:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80081e2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f203 50ec 	addw	r0, r3, #1516	@ 0x5ec
 80081ec:	2364      	movs	r3, #100	@ 0x64
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 80081f4:	2204      	movs	r2, #4
 80081f6:	2105      	movs	r1, #5
 80081f8:	f7fb ff07 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Background_1.setPosition(0, 0, 450, 100);
 80081fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008200:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f503 60c3 	add.w	r0, r3, #1560	@ 0x618
 800820a:	2364      	movs	r3, #100	@ 0x64
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8008212:	2200      	movs	r2, #0
 8008214:	2100      	movs	r1, #0
 8008216:	f7fb fef8 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Background_1.setColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 800821a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800821e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 8008228:	2343      	movs	r3, #67	@ 0x43
 800822a:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
 800822e:	2365      	movs	r3, #101	@ 0x65
 8008230:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
 8008234:	238b      	movs	r3, #139	@ 0x8b
 8008236:	f887 31c5 	strb.w	r3, [r7, #453]	@ 0x1c5
 800823a:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
 800823e:	041a      	lsls	r2, r3, #16
 8008240:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	431a      	orrs	r2, r3
 8008248:	f897 31c5 	ldrb.w	r3, [r7, #453]	@ 0x1c5
 800824c:	4313      	orrs	r3, r2
 800824e:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008252:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008256:	4611      	mov	r1, r2
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fb2c 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800825e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008262:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	4620      	mov	r0, r4
 800826c:	f7fd fbf4 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008270:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008274:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f503 64c3 	add.w	r4, r3, #1560	@ 0x618
 800827e:	2300      	movs	r3, #0
 8008280:	f887 31ca 	strb.w	r3, [r7, #458]	@ 0x1ca
 8008284:	2300      	movs	r3, #0
 8008286:	f887 31c9 	strb.w	r3, [r7, #457]	@ 0x1c9
 800828a:	2300      	movs	r3, #0
 800828c:	f887 31c8 	strb.w	r3, [r7, #456]	@ 0x1c8
 8008290:	f897 31ca 	ldrb.w	r3, [r7, #458]	@ 0x1ca
 8008294:	041a      	lsls	r2, r3, #16
 8008296:	f897 31c9 	ldrb.w	r3, [r7, #457]	@ 0x1c9
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	431a      	orrs	r2, r3
 800829e:	f897 31c8 	ldrb.w	r3, [r7, #456]	@ 0x1c8
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80082a8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fd fb01 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80082b4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4619      	mov	r1, r3
 80082c0:	4620      	mov	r0, r4
 80082c2:	f7fd fc3b 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Background_1.setBorderSize(2);
 80082c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082ca:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80082d4:	2102      	movs	r1, #2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fc3e 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Panel_1.add(MessageBoard_Background_1);
 80082dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082e0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 80082ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80082ee:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f503 63c3 	add.w	r3, r3, #1560	@ 0x618
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f00f fe12 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Message_Board_Textbox_1.setPosition(176, 0, 99, 20);
 8008300:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008304:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f203 604c 	addw	r0, r3, #1612	@ 0x64c
 800830e:	2314      	movs	r3, #20
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	2363      	movs	r3, #99	@ 0x63
 8008314:	2200      	movs	r2, #0
 8008316:	21b0      	movs	r1, #176	@ 0xb0
 8008318:	f7fb fe77 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1.setPosition(0, 3, 99, 17);
 800831c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008320:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f503 60cf 	add.w	r0, r3, #1656	@ 0x678
 800832a:	2311      	movs	r3, #17
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	2363      	movs	r3, #99	@ 0x63
 8008330:	2203      	movs	r2, #3
 8008332:	2100      	movs	r1, #0
 8008334:	f7fb fe69 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008338:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800833c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 8008346:	2300      	movs	r3, #0
 8008348:	f887 31cd 	strb.w	r3, [r7, #461]	@ 0x1cd
 800834c:	2300      	movs	r3, #0
 800834e:	f887 31cc 	strb.w	r3, [r7, #460]	@ 0x1cc
 8008352:	2300      	movs	r3, #0
 8008354:	f887 31cb 	strb.w	r3, [r7, #459]	@ 0x1cb
 8008358:	f897 31cd 	ldrb.w	r3, [r7, #461]	@ 0x1cd
 800835c:	041a      	lsls	r2, r3, #16
 800835e:	f897 31cc 	ldrb.w	r3, [r7, #460]	@ 0x1cc
 8008362:	021b      	lsls	r3, r3, #8
 8008364:	431a      	orrs	r2, r3
 8008366:	f897 31cb 	ldrb.w	r3, [r7, #459]	@ 0x1cb
 800836a:	4313      	orrs	r3, r2
 800836c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008370:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f7fd fa9d 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800837c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008380:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	4620      	mov	r0, r4
 800838a:	f7fd fb65 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800838e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008392:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 64cf 	add.w	r4, r3, #1656	@ 0x678
 800839c:	23ed      	movs	r3, #237	@ 0xed
 800839e:	f887 31d0 	strb.w	r3, [r7, #464]	@ 0x1d0
 80083a2:	2366      	movs	r3, #102	@ 0x66
 80083a4:	f887 31cf 	strb.w	r3, [r7, #463]	@ 0x1cf
 80083a8:	2363      	movs	r3, #99	@ 0x63
 80083aa:	f887 31ce 	strb.w	r3, [r7, #462]	@ 0x1ce
 80083ae:	f897 31d0 	ldrb.w	r3, [r7, #464]	@ 0x1d0
 80083b2:	041a      	lsls	r2, r3, #16
 80083b4:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	431a      	orrs	r2, r3
 80083bc:	f897 31ce 	ldrb.w	r3, [r7, #462]	@ 0x1ce
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80083c6:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd fa72 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80083d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4619      	mov	r1, r3
 80083de:	4620      	mov	r0, r4
 80083e0:	f7fd fbac 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1.setBorderSize(3);
 80083e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083e8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 80083f2:	2103      	movs	r1, #3
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fd fbaf 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Message_Board_Textbox_1.add(MessageBoard_Border_1_1);
 80083fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80083fe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 8008408:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800840c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8008416:	4619      	mov	r1, r3
 8008418:	4610      	mov	r0, r2
 800841a:	f00f fd83 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Text_1.setXY(7, 5);
 800841e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008422:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 800842c:	2205      	movs	r2, #5
 800842e:	2107      	movs	r1, #7
 8008430:	4618      	mov	r0, r3
 8008432:	f7fb fe43 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Text_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008436:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800843a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 8008444:	23ff      	movs	r3, #255	@ 0xff
 8008446:	f887 31d3 	strb.w	r3, [r7, #467]	@ 0x1d3
 800844a:	23ff      	movs	r3, #255	@ 0xff
 800844c:	f887 31d2 	strb.w	r3, [r7, #466]	@ 0x1d2
 8008450:	23ff      	movs	r3, #255	@ 0xff
 8008452:	f887 31d1 	strb.w	r3, [r7, #465]	@ 0x1d1
 8008456:	f897 31d3 	ldrb.w	r3, [r7, #467]	@ 0x1d3
 800845a:	041a      	lsls	r2, r3, #16
 800845c:	f897 31d2 	ldrb.w	r3, [r7, #466]	@ 0x1d2
 8008460:	021b      	lsls	r3, r3, #8
 8008462:	431a      	orrs	r2, r3
 8008464:	f897 31d1 	ldrb.w	r3, [r7, #465]	@ 0x1d1
 8008468:	4313      	orrs	r3, r2
 800846a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800846e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008472:	4611      	mov	r1, r2
 8008474:	4618      	mov	r0, r3
 8008476:	f7fd fa1e 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800847a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800847e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	f8c7 41d4 	str.w	r4, [r7, #468]	@ 0x1d4
 800848a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800848e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008492:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008494:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8008498:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800849c:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80084a4:	bf00      	nop
    MessageBoard_Text_1.setLinespacing(0);
 80084a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084aa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 80084b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8a7 31da 	strh.w	r3, [r7, #474]	@ 0x1da
        linespace = space;
 80084be:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80084c2:	f8b7 21da 	ldrh.w	r2, [r7, #474]	@ 0x1da
 80084c6:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 80084c8:	bf00      	nop
    MessageBoard_Text_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0Y28));
 80084ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084ce:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f203 64ac 	addw	r4, r3, #1708	@ 0x6ac
 80084d8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80084dc:	2102      	movs	r1, #2
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fd fb4a 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 80084e4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80084e8:	4619      	mov	r1, r3
 80084ea:	4620      	mov	r0, r4
 80084ec:	f011 fc45 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80084f0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fb fcd5 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Message_Board_Textbox_1.add(MessageBoard_Text_1);
 80084fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80084fe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f203 624c 	addw	r2, r3, #1612	@ 0x64c
 8008508:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800850c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f203 63ac 	addw	r3, r3, #1708	@ 0x6ac
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f00f fd03 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(Message_Board_Textbox_1);
 800851e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008522:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 800852c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008530:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f203 634c 	addw	r3, r3, #1612	@ 0x64c
 800853a:	4619      	mov	r1, r3
 800853c:	4610      	mov	r0, r2
 800853e:	f00f fcf1 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceComm_Textbox_1.setPosition(294, 0, 114, 98);
 8008542:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008546:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f503 60dd 	add.w	r0, r3, #1768	@ 0x6e8
 8008550:	2362      	movs	r3, #98	@ 0x62
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	2372      	movs	r3, #114	@ 0x72
 8008556:	2200      	movs	r2, #0
 8008558:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800855c:	f7fb fd55 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    VoiceCommMess_Background.setPosition(2, 2, 112, 96);
 8008560:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008564:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f203 7014 	addw	r0, r3, #1812	@ 0x714
 800856e:	2360      	movs	r3, #96	@ 0x60
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	2370      	movs	r3, #112	@ 0x70
 8008574:	2202      	movs	r2, #2
 8008576:	2102      	movs	r1, #2
 8008578:	f7fb fd47 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800857c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008580:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 800858a:	23ed      	movs	r3, #237	@ 0xed
 800858c:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
 8008590:	2366      	movs	r3, #102	@ 0x66
 8008592:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
 8008596:	2363      	movs	r3, #99	@ 0x63
 8008598:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
 800859c:	f897 31e3 	ldrb.w	r3, [r7, #483]	@ 0x1e3
 80085a0:	041a      	lsls	r2, r3, #16
 80085a2:	f897 31e2 	ldrb.w	r3, [r7, #482]	@ 0x1e2
 80085a6:	021b      	lsls	r3, r3, #8
 80085a8:	431a      	orrs	r2, r3
 80085aa:	f897 31e1 	ldrb.w	r3, [r7, #481]	@ 0x1e1
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80085b4:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fd f97b 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80085c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085c4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4619      	mov	r1, r3
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7fd fa43 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80085d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80085d6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f203 7414 	addw	r4, r3, #1812	@ 0x714
 80085e0:	2300      	movs	r3, #0
 80085e2:	f887 31e6 	strb.w	r3, [r7, #486]	@ 0x1e6
 80085e6:	2300      	movs	r3, #0
 80085e8:	f887 31e5 	strb.w	r3, [r7, #485]	@ 0x1e5
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 31e4 	strb.w	r3, [r7, #484]	@ 0x1e4
 80085f2:	f897 31e6 	ldrb.w	r3, [r7, #486]	@ 0x1e6
 80085f6:	041a      	lsls	r2, r3, #16
 80085f8:	f897 31e5 	ldrb.w	r3, [r7, #485]	@ 0x1e5
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	431a      	orrs	r2, r3
 8008600:	f897 31e4 	ldrb.w	r3, [r7, #484]	@ 0x1e4
 8008604:	4313      	orrs	r3, r2
 8008606:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800860a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800860e:	4611      	mov	r1, r2
 8008610:	4618      	mov	r0, r3
 8008612:	f7fd f950 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008616:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800861a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4619      	mov	r1, r3
 8008622:	4620      	mov	r0, r4
 8008624:	f7fd fa8a 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background.setBorderSize(3);
 8008628:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800862c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 8008636:	2103      	movs	r1, #3
 8008638:	4618      	mov	r0, r3
 800863a:	f7fd fa8d 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background);
 800863e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008642:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 800864c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008650:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f203 7314 	addw	r3, r3, #1812	@ 0x714
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f00f fc61 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Background2.setPosition(16, 10, 84, 80);
 8008662:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008666:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f503 60e9 	add.w	r0, r3, #1864	@ 0x748
 8008670:	2350      	movs	r3, #80	@ 0x50
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	2354      	movs	r3, #84	@ 0x54
 8008676:	220a      	movs	r2, #10
 8008678:	2110      	movs	r1, #16
 800867a:	f7fb fcc6 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    VoiceCommMess_Background2.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800867e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008682:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 800868c:	2300      	movs	r3, #0
 800868e:	f887 31e9 	strb.w	r3, [r7, #489]	@ 0x1e9
 8008692:	2300      	movs	r3, #0
 8008694:	f887 31e8 	strb.w	r3, [r7, #488]	@ 0x1e8
 8008698:	2300      	movs	r3, #0
 800869a:	f887 31e7 	strb.w	r3, [r7, #487]	@ 0x1e7
 800869e:	f897 31e9 	ldrb.w	r3, [r7, #489]	@ 0x1e9
 80086a2:	041a      	lsls	r2, r3, #16
 80086a4:	f897 31e8 	ldrb.w	r3, [r7, #488]	@ 0x1e8
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	431a      	orrs	r2, r3
 80086ac:	f897 31e7 	ldrb.w	r3, [r7, #487]	@ 0x1e7
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80086b6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fd f8fa 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80086c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086c6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4619      	mov	r1, r3
 80086ce:	4620      	mov	r0, r4
 80086d0:	f7fd f9c2 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 80086d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80086d8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f503 64e9 	add.w	r4, r3, #1864	@ 0x748
 80086e2:	2343      	movs	r3, #67	@ 0x43
 80086e4:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec
 80086e8:	2365      	movs	r3, #101	@ 0x65
 80086ea:	f887 31eb 	strb.w	r3, [r7, #491]	@ 0x1eb
 80086ee:	238b      	movs	r3, #139	@ 0x8b
 80086f0:	f887 31ea 	strb.w	r3, [r7, #490]	@ 0x1ea
 80086f4:	f897 31ec 	ldrb.w	r3, [r7, #492]	@ 0x1ec
 80086f8:	041a      	lsls	r2, r3, #16
 80086fa:	f897 31eb 	ldrb.w	r3, [r7, #491]	@ 0x1eb
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	431a      	orrs	r2, r3
 8008702:	f897 31ea 	ldrb.w	r3, [r7, #490]	@ 0x1ea
 8008706:	4313      	orrs	r3, r2
 8008708:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	4611      	mov	r1, r2
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd f8cf 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008718:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800871c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4619      	mov	r1, r3
 8008724:	4620      	mov	r0, r4
 8008726:	f7fd fa09 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    VoiceCommMess_Background2.setBorderSize(3);
 800872a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800872e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 8008738:	2103      	movs	r1, #3
 800873a:	4618      	mov	r0, r3
 800873c:	f7fd fa0c 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    VoiceComm_Textbox_1.add(VoiceCommMess_Background2);
 8008740:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008744:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 800874e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008752:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f503 63e9 	add.w	r3, r3, #1864	@ 0x748
 800875c:	4619      	mov	r1, r3
 800875e:	4610      	mov	r0, r2
 8008760:	f00f fbe0 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_On.setXY(36, 13);
 8008764:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008768:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 8008772:	220d      	movs	r2, #13
 8008774:	2124      	movs	r1, #36	@ 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f7fb fca0 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_On.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800877c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008780:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 800878a:	23ff      	movs	r3, #255	@ 0xff
 800878c:	f887 31ef 	strb.w	r3, [r7, #495]	@ 0x1ef
 8008790:	23ff      	movs	r3, #255	@ 0xff
 8008792:	f887 31ee 	strb.w	r3, [r7, #494]	@ 0x1ee
 8008796:	23ff      	movs	r3, #255	@ 0xff
 8008798:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
 800879c:	f897 31ef 	ldrb.w	r3, [r7, #495]	@ 0x1ef
 80087a0:	041a      	lsls	r2, r3, #16
 80087a2:	f897 31ee 	ldrb.w	r3, [r7, #494]	@ 0x1ee
 80087a6:	021b      	lsls	r3, r3, #8
 80087a8:	431a      	orrs	r2, r3
 80087aa:	f897 31ed 	ldrb.w	r3, [r7, #493]	@ 0x1ed
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80087b4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80087b8:	4611      	mov	r1, r2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fd f87b 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80087c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087c4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 80087d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087d4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80087d8:	601a      	str	r2, [r3, #0]
        this->color = color;
 80087da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80087de:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80087e2:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 80087ea:	bf00      	nop
    VoiceCommMess_Text_On.setLinespacing(0);
 80087ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80087f0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 80087fa:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80087fe:	2300      	movs	r3, #0
 8008800:	f8a7 31f6 	strh.w	r3, [r7, #502]	@ 0x1f6
        linespace = space;
 8008804:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8008808:	f8b7 21f6 	ldrh.w	r2, [r7, #502]	@ 0x1f6
 800880c:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 800880e:	bf00      	nop
    VoiceCommMess_Text_On.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LNSV));
 8008810:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008814:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f203 747c 	addw	r4, r3, #1916	@ 0x77c
 800881e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8008822:	2105      	movs	r1, #5
 8008824:	4618      	mov	r0, r3
 8008826:	f7fd f9a7 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 800882a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800882e:	4619      	mov	r1, r3
 8008830:	4620      	mov	r0, r4
 8008832:	f011 faa2 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008836:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800883a:	4618      	mov	r0, r3
 800883c:	f7fb fb32 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_On);
 8008840:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008844:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 800884e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008852:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800885c:	4619      	mov	r1, r3
 800885e:	4610      	mov	r0, r2
 8008860:	f00f fb60 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    VoiceCommMess_Text_Off.setXY(36, 13);
 8008864:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008868:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8008872:	220d      	movs	r2, #13
 8008874:	2124      	movs	r1, #36	@ 0x24
 8008876:	4618      	mov	r0, r3
 8008878:	f7fb fc20 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    VoiceCommMess_Text_Off.setVisible(false);
 800887c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008880:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800888a:	2100      	movs	r1, #0
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe f96a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
    VoiceCommMess_Text_Off.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008892:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008896:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 80088a0:	23ff      	movs	r3, #255	@ 0xff
 80088a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
 80088a6:	23ff      	movs	r3, #255	@ 0xff
 80088a8:	f887 31fe 	strb.w	r3, [r7, #510]	@ 0x1fe
 80088ac:	23ff      	movs	r3, #255	@ 0xff
 80088ae:	f887 31fd 	strb.w	r3, [r7, #509]	@ 0x1fd
 80088b2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80088b6:	041a      	lsls	r2, r3, #16
 80088b8:	f897 31fe 	ldrb.w	r3, [r7, #510]	@ 0x1fe
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	431a      	orrs	r2, r3
 80088c0:	f897 31fd 	ldrb.w	r3, [r7, #509]	@ 0x1fd
 80088c4:	4313      	orrs	r3, r2
 80088c6:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80088ca:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fc fff0 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 80088d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 80088e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80088ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80088ee:	601a      	str	r2, [r3, #0]
        this->color = color;
 80088f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80088f4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80088f8:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008900:	bf00      	nop
    VoiceCommMess_Text_Off.setLinespacing(0);
 8008902:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008906:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8008910:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8008914:	2300      	movs	r3, #0
 8008916:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
        linespace = space;
 800891a:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800891e:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 8008922:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008924:	bf00      	nop
    VoiceCommMess_Text_Off.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GO11));
 8008926:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800892a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f503 64f7 	add.w	r4, r3, #1976	@ 0x7b8
 8008934:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008938:	210a      	movs	r1, #10
 800893a:	4618      	mov	r0, r3
 800893c:	f7fd f91c 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8008940:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008944:	4619      	mov	r1, r3
 8008946:	4620      	mov	r0, r4
 8008948:	f011 fa17 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800894c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8008950:	4618      	mov	r0, r3
 8008952:	f7fb faa7 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    VoiceComm_Textbox_1.add(VoiceCommMess_Text_Off);
 8008956:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800895a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f503 62dd 	add.w	r2, r3, #1768	@ 0x6e8
 8008964:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008968:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f00f fad5 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(VoiceComm_Textbox_1);
 800897a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800897e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008988:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800898c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f503 63dd 	add.w	r3, r3, #1768	@ 0x6e8
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f00f fac3 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyWarning_Textbox_1_1.setPosition(42, 0, 117, 98);
 800899e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089a2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f203 70f4 	addw	r0, r3, #2036	@ 0x7f4
 80089ac:	2362      	movs	r3, #98	@ 0x62
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	2375      	movs	r3, #117	@ 0x75
 80089b2:	2200      	movs	r2, #0
 80089b4:	212a      	movs	r1, #42	@ 0x2a
 80089b6:	f7fb fb28 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    MessageBoard_Border_1_1_1_2.setPosition(2, 2, 115, 96);
 80089ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089be:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f503 6002 	add.w	r0, r3, #2080	@ 0x820
 80089c8:	2360      	movs	r3, #96	@ 0x60
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	2373      	movs	r3, #115	@ 0x73
 80089ce:	2202      	movs	r2, #2
 80089d0:	2102      	movs	r1, #2
 80089d2:	f7fb fb1a 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 80089d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80089da:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 80089e4:	23ed      	movs	r3, #237	@ 0xed
 80089e6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 80089ea:	2366      	movs	r3, #102	@ 0x66
 80089ec:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
 80089f0:	2363      	movs	r3, #99	@ 0x63
 80089f2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
 80089f6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80089fa:	041a      	lsls	r2, r3, #16
 80089fc:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	431a      	orrs	r2, r3
 8008a04:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008a0e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8008a12:	4611      	mov	r1, r2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fc ff4e 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008a1a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a1e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4619      	mov	r1, r3
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7fd f816 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008a2c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a30:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f503 6402 	add.w	r4, r3, #2080	@ 0x820
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f887 3212 	strb.w	r3, [r7, #530]	@ 0x212
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211
 8008a46:	2300      	movs	r3, #0
 8008a48:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
 8008a4c:	f897 3212 	ldrb.w	r3, [r7, #530]	@ 0x212
 8008a50:	041a      	lsls	r2, r3, #16
 8008a52:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8008a56:	021b      	lsls	r3, r3, #8
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	f897 3210 	ldrb.w	r3, [r7, #528]	@ 0x210
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008a64:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8008a68:	4611      	mov	r1, r2
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fc ff23 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008a70:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a74:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f7fd f85d 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_2.setBorderSize(3);
 8008a82:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a86:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8008a90:	2103      	movs	r1, #3
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd f860 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_2);
 8008a98:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008a9c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008aa6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008aaa:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f00f fa34 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Border_1_1_1_1_1.setPosition(16, 10, 89, 80);
 8008abc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ac0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f603 0054 	addw	r0, r3, #2132	@ 0x854
 8008aca:	2350      	movs	r3, #80	@ 0x50
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	2359      	movs	r3, #89	@ 0x59
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	2110      	movs	r1, #16
 8008ad4:	f7fb fa99 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    MessageBoard_Border_1_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008ad8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008adc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
 8008aec:	2300      	movs	r3, #0
 8008aee:	f887 3214 	strb.w	r3, [r7, #532]	@ 0x214
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 3213 	strb.w	r3, [r7, #531]	@ 0x213
 8008af8:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8008afc:	041a      	lsls	r2, r3, #16
 8008afe:	f897 3214 	ldrb.w	r3, [r7, #532]	@ 0x214
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	431a      	orrs	r2, r3
 8008b06:	f897 3213 	ldrb.w	r3, [r7, #531]	@ 0x213
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008b10:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8008b14:	4611      	mov	r1, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fc fecd 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008b1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b20:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4619      	mov	r1, r3
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f7fc ff95 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(67, 101, 139));
 8008b2e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b32:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f603 0454 	addw	r4, r3, #2132	@ 0x854
 8008b3c:	2343      	movs	r3, #67	@ 0x43
 8008b3e:	f887 3218 	strb.w	r3, [r7, #536]	@ 0x218
 8008b42:	2365      	movs	r3, #101	@ 0x65
 8008b44:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8008b48:	238b      	movs	r3, #139	@ 0x8b
 8008b4a:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216
 8008b4e:	f897 3218 	ldrb.w	r3, [r7, #536]	@ 0x218
 8008b52:	041a      	lsls	r2, r3, #16
 8008b54:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8008b58:	021b      	lsls	r3, r3, #8
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8008b60:	4313      	orrs	r3, r2
 8008b62:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008b66:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fc fea2 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008b72:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b76:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f7fc ffdc 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    MessageBoard_Border_1_1_1_1_1.setBorderSize(3);
 8008b84:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b88:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008b92:	2103      	movs	r1, #3
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fc ffdf 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Border_1_1_1_1_1);
 8008b9a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008b9e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008ba8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f603 0354 	addw	r3, r3, #2132	@ 0x854
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f00f f9b3 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_1.setXY(29, 13);
 8008bbe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bc2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008bcc:	220d      	movs	r2, #13
 8008bce:	211d      	movs	r1, #29
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fb fa73 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008bd6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008bda:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008be4:	23ff      	movs	r3, #255	@ 0xff
 8008be6:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
 8008bea:	23ff      	movs	r3, #255	@ 0xff
 8008bec:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
 8008bf0:	23ff      	movs	r3, #255	@ 0xff
 8008bf2:	f887 3219 	strb.w	r3, [r7, #537]	@ 0x219
 8008bf6:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8008bfa:	041a      	lsls	r2, r3, #16
 8008bfc:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	431a      	orrs	r2, r3
 8008c04:	f897 3219 	ldrb.w	r3, [r7, #537]	@ 0x219
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008c0e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fc fe4e 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008c1a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c1e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	f8c7 421c 	str.w	r4, [r7, #540]	@ 0x21c
 8008c2a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c2e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8008c32:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008c34:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8008c38:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008c3c:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8008c40:	6812      	ldr	r2, [r2, #0]
 8008c42:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008c44:	bf00      	nop
    MessageBoard_Message_1.setLinespacing(0);
 8008c46:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c4a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008c54:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f8a7 3222 	strh.w	r3, [r7, #546]	@ 0x222
        linespace = space;
 8008c5e:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8008c62:	f8b7 2222 	ldrh.w	r2, [r7, #546]	@ 0x222
 8008c66:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008c68:	bf00      	nop
    MessageBoard_Message_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RLM0));
 8008c6a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c6e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f603 0488 	addw	r4, r3, #2184	@ 0x888
 8008c78:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008c7c:	2106      	movs	r1, #6
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fc ff7a 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8008c84:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f011 f875 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008c90:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fb f905 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_1);
 8008c9a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008c9e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008ca8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4610      	mov	r0, r2
 8008cba:	f00f f933 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    MessageBoard_Message_Muted.setXY(30, 13);
 8008cbe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cc2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008ccc:	220d      	movs	r2, #13
 8008cce:	211e      	movs	r1, #30
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fb f9f3 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    MessageBoard_Message_Muted.setVisible(false);
 8008cd6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cda:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fd ff3d 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
    MessageBoard_Message_Muted.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008cec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008cf0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008cfa:	23ff      	movs	r3, #255	@ 0xff
 8008cfc:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8008d00:	23ff      	movs	r3, #255	@ 0xff
 8008d02:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8008d06:	23ff      	movs	r3, #255	@ 0xff
 8008d08:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8008d0c:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8008d10:	041a      	lsls	r2, r3, #16
 8008d12:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008d24:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fc fdc3 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008d30:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d34:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f8c7 422c 	str.w	r4, [r7, #556]	@ 0x22c
 8008d40:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d44:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8008d48:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008d4a:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8008d4e:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008d52:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8008d56:	6812      	ldr	r2, [r2, #0]
 8008d58:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008d5a:	bf00      	nop
    MessageBoard_Message_Muted.setLinespacing(0);
 8008d5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d60:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008d6a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f8a7 3232 	strh.w	r3, [r7, #562]	@ 0x232
        linespace = space;
 8008d74:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8008d78:	f8b7 2232 	ldrh.w	r2, [r7, #562]	@ 0x232
 8008d7c:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008d7e:	bf00      	nop
    MessageBoard_Message_Muted.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RFKN));
 8008d80:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008d84:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f603 04c4 	addw	r4, r3, #2244	@ 0x8c4
 8008d8e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008d92:	210b      	movs	r1, #11
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fc feef 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8008d9a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4620      	mov	r0, r4
 8008da2:	f010 ffea 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8008da6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fb f87a 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    AnomalyWarning_Textbox_1_1.add(MessageBoard_Message_Muted);
 8008db0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008db4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f203 72f4 	addw	r2, r3, #2036	@ 0x7f4
 8008dbe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dc2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f00f f8a8 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_Board_Panel_1.add(AnomalyWarning_Textbox_1_1);
 8008dd4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dd8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f203 52ec 	addw	r2, r3, #1516	@ 0x5ec
 8008de2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008de6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f00f f896 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Message_panel.add(Message_Board_Panel_1);
 8008df8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008dfc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f203 528c 	addw	r2, r3, #1420	@ 0x58c
 8008e06:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e0a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f203 53ec 	addw	r3, r3, #1516	@ 0x5ec
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f00f f884 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Alarm_Mute_Indicator_Textbox_1_1.setPosition(64, 117, 129, 20);
 8008e1c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e20:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f503 6010 	add.w	r0, r3, #2304	@ 0x900
 8008e2a:	2314      	movs	r3, #20
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	2381      	movs	r3, #129	@ 0x81
 8008e30:	2275      	movs	r2, #117	@ 0x75
 8008e32:	2140      	movs	r1, #64	@ 0x40
 8008e34:	f7fb f8e9 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1.setPosition(0, 3, 129, 17);
 8008e38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e3c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f603 102c 	addw	r0, r3, #2348	@ 0x92c
 8008e46:	2311      	movs	r3, #17
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	2381      	movs	r3, #129	@ 0x81
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	2100      	movs	r1, #0
 8008e50:	f7fb f8db 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8008e54:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e58:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 323d 	strb.w	r3, [r7, #573]	@ 0x23d
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 323c 	strb.w	r3, [r7, #572]	@ 0x23c
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
 8008e74:	f897 323d 	ldrb.w	r3, [r7, #573]	@ 0x23d
 8008e78:	041a      	lsls	r2, r3, #16
 8008e7a:	f897 323c 	ldrb.w	r3, [r7, #572]	@ 0x23c
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	431a      	orrs	r2, r3
 8008e82:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8008e86:	4313      	orrs	r3, r2
 8008e88:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008e8c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fc fd0f 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008e98:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008e9c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f7fc fdd7 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 8008eaa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008eae:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f603 142c 	addw	r4, r3, #2348	@ 0x92c
 8008eb8:	23ed      	movs	r3, #237	@ 0xed
 8008eba:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
 8008ebe:	2366      	movs	r3, #102	@ 0x66
 8008ec0:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
 8008ec4:	2363      	movs	r3, #99	@ 0x63
 8008ec6:	f887 323e 	strb.w	r3, [r7, #574]	@ 0x23e
 8008eca:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8008ece:	041a      	lsls	r2, r3, #16
 8008ed0:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008ed4:	021b      	lsls	r3, r3, #8
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	f897 323e 	ldrb.w	r3, [r7, #574]	@ 0x23e
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008ee2:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fc fce4 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008eee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008ef2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7fc fe1e 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1.setBorderSize(3);
 8008f00:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f04:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008f0e:	2103      	movs	r1, #3
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fc fe21 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Border_1_1_1);
 8008f16:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f1a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8008f24:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f28:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f603 132c 	addw	r3, r3, #2348	@ 0x92c
 8008f32:	4619      	mov	r1, r3
 8008f34:	4610      	mov	r0, r2
 8008f36:	f00e fff5 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1.setXY(9, 5);
 8008f3a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f3e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008f48:	2205      	movs	r2, #5
 8008f4a:	2109      	movs	r1, #9
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fb f8b5 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8008f52:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f56:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008f60:	23ff      	movs	r3, #255	@ 0xff
 8008f62:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
 8008f66:	23ff      	movs	r3, #255	@ 0xff
 8008f68:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
 8008f6c:	23ff      	movs	r3, #255	@ 0xff
 8008f6e:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
 8008f72:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8008f76:	041a      	lsls	r2, r3, #16
 8008f78:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 8008f7c:	021b      	lsls	r3, r3, #8
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8008f8a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fc fc90 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8008f96:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008f9a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f8c7 4244 	str.w	r4, [r7, #580]	@ 0x244
 8008fa6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008faa:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8008fae:	601a      	str	r2, [r3, #0]
        this->color = color;
 8008fb0:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 8008fb4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8008fb8:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 8008fbc:	6812      	ldr	r2, [r2, #0]
 8008fbe:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8008fc0:	bf00      	nop
    AnomalyDetection_Text_1_1.setLinespacing(0);
 8008fc2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fc6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8008fd0:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8a7 324a 	strh.w	r3, [r7, #586]	@ 0x24a
        linespace = space;
 8008fda:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008fde:	f8b7 224a 	ldrh.w	r2, [r7, #586]	@ 0x24a
 8008fe2:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8008fe4:	bf00      	nop
    AnomalyDetection_Text_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BBOL));
 8008fe6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8008fea:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f503 6416 	add.w	r4, r3, #2400	@ 0x960
 8008ff4:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8008ff8:	2103      	movs	r1, #3
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fc fdbc 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8009000:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8009004:	4619      	mov	r1, r3
 8009006:	4620      	mov	r0, r4
 8009008:	f010 feb7 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800900c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8009010:	4618      	mov	r0, r3
 8009012:	f7fa ff47 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1.add(AnomalyDetection_Text_1_1);
 8009016:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800901a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f503 6210 	add.w	r2, r3, #2304	@ 0x900
 8009024:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009028:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f503 6316 	add.w	r3, r3, #2400	@ 0x960
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f00e ff75 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Disabled_Button2.setXY(92, 140);
 800903a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800903e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8009048:	228c      	movs	r2, #140	@ 0x8c
 800904a:	215c      	movs	r1, #92	@ 0x5c
 800904c:	4618      	mov	r0, r3
 800904e:	f7fb f835 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button2.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009052:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009056:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f603 149c 	addw	r4, r3, #2460	@ 0x99c
 8009060:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009064:	2102      	movs	r1, #2
 8009066:	4618      	mov	r0, r3
 8009068:	f7fc fc34 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 800906c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009070:	4619      	mov	r1, r3
 8009072:	4620      	mov	r0, r4
 8009074:	f011 f8fb 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Disabled_Button1.setXY(309, 141);
 8009078:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800907c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8009086:	228d      	movs	r2, #141	@ 0x8d
 8009088:	f240 1135 	movw	r1, #309	@ 0x135
 800908c:	4618      	mov	r0, r3
 800908e:	f7fb f815 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Disabled_Button1.setBitmap(touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009092:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009096:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f603 14c8 	addw	r4, r3, #2504	@ 0x9c8
 80090a0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fc fc14 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80090ac:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80090b0:	4619      	mov	r1, r3
 80090b2:	4620      	mov	r0, r4
 80090b4:	f011 f8db 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    Alert_Mute_Button.setXY(92, 140);
 80090b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 80090c6:	228c      	movs	r2, #140	@ 0x8c
 80090c8:	215c      	movs	r1, #92	@ 0x5c
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fa fff6 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Alert_Mute_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 80090d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80090d4:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f603 14f4 	addw	r4, r3, #2548	@ 0x9f4
 80090de:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80090e2:	2103      	movs	r1, #3
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fc fbf5 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80090ea:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80090ee:	2102      	movs	r1, #2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fc fbef 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 80090f6:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 80090fa:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80090fe:	4619      	mov	r1, r3
 8009100:	4620      	mov	r0, r4
 8009102:	f010 fe71 	bl	8019de8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Alert_Mute_Button.setAction(buttonCallback);
 8009106:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800910a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f603 12f4 	addw	r2, r3, #2548	@ 0x9f4
 8009114:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009118:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7fc fd9d 	bl	8005c64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Localize_Button.setXY(309, 140);
 800912a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800912e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 8009138:	228c      	movs	r2, #140	@ 0x8c
 800913a:	f240 1135 	movw	r1, #309	@ 0x135
 800913e:	4618      	mov	r0, r3
 8009140:	f7fa ffbc 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    Localize_Button.setBitmaps(touchgfx::Bitmap(BITMAP_RECT_BUTTON_UNPRESSED_ID), touchgfx::Bitmap(BITMAP_RECT_BUTTON_PRESSED_ID));
 8009144:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009148:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f603 2428 	addw	r4, r3, #2600	@ 0xa28
 8009152:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8009156:	2103      	movs	r1, #3
 8009158:	4618      	mov	r0, r3
 800915a:	f7fc fbbb 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 800915e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8009162:	2102      	movs	r1, #2
 8009164:	4618      	mov	r0, r3
 8009166:	f7fc fbb5 	bl	80058d4 <_ZN8touchgfx6BitmapC1Et>
 800916a:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 800916e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8009172:	4619      	mov	r1, r3
 8009174:	4620      	mov	r0, r4
 8009176:	f010 fe37 	bl	8019de8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    Localize_Button.setAction(buttonCallback);
 800917a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800917e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f603 2228 	addw	r2, r3, #2600	@ 0xa28
 8009188:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800918c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f603 23f8 	addw	r3, r3, #2808	@ 0xaf8
 8009196:	4619      	mov	r1, r3
 8009198:	4610      	mov	r0, r2
 800919a:	f7fc fd63 	bl	8005c64 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    Alarm_Mute_Indicator_Textbox_1_1_1.setPosition(283, 117, 129, 20);
 800919e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091a2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f603 205c 	addw	r0, r3, #2652	@ 0xa5c
 80091ac:	2314      	movs	r3, #20
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	2381      	movs	r3, #129	@ 0x81
 80091b2:	2275      	movs	r2, #117	@ 0x75
 80091b4:	f240 111b 	movw	r1, #283	@ 0x11b
 80091b8:	f7fa ff27 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>

    AnomalyDetection_Border_1_1_1_1.setPosition(0, 3, 129, 17);
 80091bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091c0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f603 2088 	addw	r0, r3, #2696	@ 0xa88
 80091ca:	2311      	movs	r3, #17
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	2381      	movs	r3, #129	@ 0x81
 80091d0:	2203      	movs	r2, #3
 80091d2:	2100      	movs	r1, #0
 80091d4:	f7fa ff19 	bl	800400a <_ZN8touchgfx8Drawable11setPositionEssss>
    AnomalyDetection_Border_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80091d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80091dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 80091e6:	2300      	movs	r3, #0
 80091e8:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255
 80091ec:	2300      	movs	r3, #0
 80091ee:	f887 3254 	strb.w	r3, [r7, #596]	@ 0x254
 80091f2:	2300      	movs	r3, #0
 80091f4:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 80091f8:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80091fc:	041a      	lsls	r2, r3, #16
 80091fe:	f897 3254 	ldrb.w	r3, [r7, #596]	@ 0x254
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	431a      	orrs	r2, r3
 8009206:	f897 3253 	ldrb.w	r3, [r7, #595]	@ 0x253
 800920a:	4313      	orrs	r3, r2
 800920c:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009210:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7fc fb4d 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800921c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009220:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4619      	mov	r1, r3
 8009228:	4620      	mov	r0, r4
 800922a:	f7fc fc15 	bl	8005a58 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderColor(touchgfx::Color::getColorFromRGB(237, 102, 99));
 800922e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009232:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f603 2488 	addw	r4, r3, #2696	@ 0xa88
 800923c:	23ed      	movs	r3, #237	@ 0xed
 800923e:	f887 3258 	strb.w	r3, [r7, #600]	@ 0x258
 8009242:	2366      	movs	r3, #102	@ 0x66
 8009244:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257
 8009248:	2363      	movs	r3, #99	@ 0x63
 800924a:	f887 3256 	strb.w	r3, [r7, #598]	@ 0x256
 800924e:	f897 3258 	ldrb.w	r3, [r7, #600]	@ 0x258
 8009252:	041a      	lsls	r2, r3, #16
 8009254:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8009258:	021b      	lsls	r3, r3, #8
 800925a:	431a      	orrs	r2, r3
 800925c:	f897 3256 	ldrb.w	r3, [r7, #598]	@ 0x256
 8009260:	4313      	orrs	r3, r2
 8009262:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8009266:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800926a:	4611      	mov	r1, r2
 800926c:	4618      	mov	r0, r3
 800926e:	f7fc fb22 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 8009272:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009276:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4619      	mov	r1, r3
 800927e:	4620      	mov	r0, r4
 8009280:	f7fc fc5c 	bl	8005b3c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    AnomalyDetection_Border_1_1_1_1.setBorderSize(3);
 8009284:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009288:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 8009292:	2103      	movs	r1, #3
 8009294:	4618      	mov	r0, r3
 8009296:	f7fc fc5f 	bl	8005b58 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Border_1_1_1_1);
 800929a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800929e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 80092a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f603 2388 	addw	r3, r3, #2696	@ 0xa88
 80092b6:	4619      	mov	r1, r3
 80092b8:	4610      	mov	r0, r2
 80092ba:	f00e fe33 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    AnomalyDetection_Text_1_1_1.setXY(15, 5);
 80092be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092c2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 80092cc:	2205      	movs	r2, #5
 80092ce:	210f      	movs	r1, #15
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7fa fef3 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
    AnomalyDetection_Text_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80092d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80092da:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 80092e4:	23ff      	movs	r3, #255	@ 0xff
 80092e6:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 80092ea:	23ff      	movs	r3, #255	@ 0xff
 80092ec:	f887 325a 	strb.w	r3, [r7, #602]	@ 0x25a
 80092f0:	23ff      	movs	r3, #255	@ 0xff
 80092f2:	f887 3259 	strb.w	r3, [r7, #601]	@ 0x259
 80092f6:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80092fa:	041a      	lsls	r2, r3, #16
 80092fc:	f897 325a 	ldrb.w	r3, [r7, #602]	@ 0x25a
 8009300:	021b      	lsls	r3, r3, #8
 8009302:	431a      	orrs	r2, r3
 8009304:	f897 3259 	ldrb.w	r3, [r7, #601]	@ 0x259
 8009308:	4313      	orrs	r3, r2
 800930a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 800930e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f7fc face 	bl	80058b6 <_ZN8touchgfx9colortypeC1Em>
 800931a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800931e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	f8c7 425c 	str.w	r4, [r7, #604]	@ 0x25c
 800932a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800932e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8009332:	601a      	str	r2, [r3, #0]
        this->color = color;
 8009334:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8009338:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800933c:	f5a2 7217 	sub.w	r2, r2, #604	@ 0x25c
 8009340:	6812      	ldr	r2, [r2, #0]
 8009342:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8009344:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setLinespacing(0);
 8009346:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800934a:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 8009354:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8009358:	2300      	movs	r3, #0
 800935a:	f8a7 3262 	strh.w	r3, [r7, #610]	@ 0x262
        linespace = space;
 800935e:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8009362:	f8b7 2262 	ldrh.w	r2, [r7, #610]	@ 0x262
 8009366:	869a      	strh	r2, [r3, #52]	@ 0x34
    }
 8009368:	bf00      	nop
    AnomalyDetection_Text_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V6ST));
 800936a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800936e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f603 24bc 	addw	r4, r3, #2748	@ 0xabc
 8009378:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800937c:	2104      	movs	r1, #4
 800937e:	4618      	mov	r0, r3
 8009380:	f7fc fbfa 	bl	8005b78 <_ZN8touchgfx9TypedTextC1Et>
 8009384:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009388:	4619      	mov	r1, r3
 800938a:	4620      	mov	r0, r4
 800938c:	f010 fcf5 	bl	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8009390:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8009394:	4618      	mov	r0, r3
 8009396:	f7fa fd85 	bl	8003ea4 <_ZN8touchgfx9TypedTextD1Ev>
    Alarm_Mute_Indicator_Textbox_1_1_1.add(AnomalyDetection_Text_1_1_1);
 800939a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800939e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f603 225c 	addw	r2, r3, #2652	@ 0xa5c
 80093a8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093ac:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f603 23bc 	addw	r3, r3, #2748	@ 0xabc
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f00e fdb3 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    add(__background);
 80093be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093c2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093cc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3340      	adds	r3, #64	@ 0x40
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7fc fb0a 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Main_Background);
 80093dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093e0:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093ea:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	336c      	adds	r3, #108	@ 0x6c
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fc fafb 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Button_Panel);
 80093fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80093fe:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009408:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3398      	adds	r3, #152	@ 0x98
 8009410:	4619      	mov	r1, r3
 8009412:	4610      	mov	r0, r2
 8009414:	f7fc faec 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Message_panel);
 8009418:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800941c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009426:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f203 538c 	addw	r3, r3, #1420	@ 0x58c
 8009430:	4619      	mov	r1, r3
 8009432:	4610      	mov	r0, r2
 8009434:	f7fc fadc 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1);
 8009438:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800943c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009446:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fc facc 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button2);
 8009458:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800945c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009466:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f7fc fabc 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Disabled_Button1);
 8009478:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800947c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8009486:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7fc faac 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alert_Mute_Button);
 8009498:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800949c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094a6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f7fc fa9c 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Localize_Button);
 80094b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094bc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094c6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 80094d0:	4619      	mov	r1, r3
 80094d2:	4610      	mov	r0, r2
 80094d4:	f7fc fa8c 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(Alarm_Mute_Indicator_Textbox_1_1_1);
 80094d8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094dc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094e6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f603 235c 	addw	r3, r3, #2652	@ 0xa5c
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f7fc fa7c 	bl	80059f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80094f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80094fc:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8009508:	46bd      	mov	sp, r7
 800950a:	bd90      	pop	{r4, r7, pc}

0800950c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

}
 8009514:	bf00      	nop
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
    if(87 == key)
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	2b57      	cmp	r3, #87	@ 0x57
 8009530:	d105      	bne.n	800953e <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Anomaly_Alert_Handler
        //When hardware button 87 clicked call virtual function
        //Call update_anomaly_alert
        update_anomaly_alert();
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3330      	adds	r3, #48	@ 0x30
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
    }
    if(88 == key)
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	2b58      	cmp	r3, #88	@ 0x58
 8009542:	d105      	bne.n	8009550 <_ZN12MainViewBase14handleKeyEventEh+0x30>
    {
        //Set_Volume_Rotary_Encoder
        //When hardware button 88 clicked call virtual function
        //Call set_volume_encoder
        set_volume_encoder();
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	333c      	adds	r3, #60	@ 0x3c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	4798      	blx	r3
    }
    if(89 == key)
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	2b59      	cmp	r3, #89	@ 0x59
 8009554:	d105      	bne.n	8009562 <_ZN12MainViewBase14handleKeyEventEh+0x42>
    {
        //Toggle_Voice_SW
        //When hardware button 89 clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3334      	adds	r3, #52	@ 0x34
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	4798      	blx	r3
    }
    if(90 == key)
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	2b5a      	cmp	r3, #90	@ 0x5a
 8009566:	d105      	bne.n	8009574 <_ZN12MainViewBase14handleKeyEventEh+0x54>
    {
        //Alert_Mute_Pressed_Button
        //When hardware button 90 clicked call virtual function
        //Call alert_mute_pressed
        alert_mute_pressed();
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	3338      	adds	r3, #56	@ 0x38
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
    }
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void MainViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
    if (&src == &Voice_Toggle_Button)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d106      	bne.n	80095a0 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Toggle_Voice
        //When Voice_Toggle_Button clicked call virtual function
        //Call toggle_voice
        toggle_voice();
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3334      	adds	r3, #52	@ 0x34
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
        //Switch_To_Anomaly_Screen
        //When Localize_Button clicked change screen to Localize_Anomaly
        //Go to Localize_Anomaly with screen transition towards North
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
    }
}
 800959e:	e019      	b.n	80095d4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Alert_Mute_Button)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d106      	bne.n	80095ba <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3e>
        alert_mute_pressed();
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3338      	adds	r3, #56	@ 0x38
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
}
 80095b8:	e00c      	b.n	80095d4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
    else if (&src == &Localize_Button)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 80095c0:	683a      	ldr	r2, [r7, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d106      	bne.n	80095d4 <_ZN12MainViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x58>
        application().gotoLocalize_AnomalyScreenWipeTransitionNorth();
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7fd fc94 	bl	8006ef4 <_ZN12MainViewBase11applicationEv>
 80095cc:	4603      	mov	r3, r0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fb f880 	bl	80046d4 <_ZN23FrontendApplicationBase45gotoLocalize_AnomalyScreenWipeTransitionNorthEv>
}
 80095d4:	bf00      	nop
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void MainViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
    if (&src == &Volume_Slider)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d106      	bne.n	8009602 <_ZN12MainViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x26>
    {
        //Set_Volume_Slider
        //When Volume_Slider value changed call virtual function
        //Call set_volume_slider
        set_volume_slider(value);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	332c      	adds	r3, #44	@ 0x2c
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	4798      	blx	r3
    }
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4618      	mov	r0, r3
 8009618:	f013 fe20 	bl	801d25c <_ZN8touchgfx6ScreenC1Ev>
 800961c:	4a05      	ldr	r2, [pc, #20]	@ (8009634 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	0802d678 	.word	0x0802d678

08009638 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	4639      	mov	r1, r7
 8009644:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4618      	mov	r0, r3
 800964c:	f7fd f924 	bl	8006898 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8009650:	4a08      	ldr	r2, [pc, #32]	@ (8009674 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	605a      	str	r2, [r3, #4]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3308      	adds	r3, #8
 8009660:	463a      	mov	r2, r7
 8009662:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009666:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	0802d660 	.word	0x0802d660

08009678 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	4a04      	ldr	r2, [pc, #16]	@ (8009694 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	0802d6ac 	.word	0x0802d6ac

08009698 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	4639      	mov	r1, r7
 80096a4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pobject), pmemfun_2(pmemfun_2)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ffe4 	bl	8009678 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 80096b0:	4a08      	ldr	r2, [pc, #32]	@ (80096d4 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3308      	adds	r3, #8
 80096c0:	463a      	mov	r2, r7
 80096c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80096c6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	0802d648 	.word	0x0802d648

080096d8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
    }
 80096e0:	4a04      	ldr	r2, [pc, #16]	@ (80096f4 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr
 80096f4:	0802d6ac 	.word	0x0802d6ac

080096f8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
    }
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ffe9 	bl	80096d8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8009706:	2104      	movs	r1, #4
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f021 fbfe 	bl	802af0a <_ZdlPvj>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4618      	mov	r0, r3
 8009712:	3708      	adds	r7, #8
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	4a05      	ldr	r2, [pc, #20]	@ (8009738 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff ffd5 	bl	80096d8 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}
 8009738:	0802d648 	.word	0x0802d648

0800973c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED0Ev>:
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff ffe7 	bl	8009718 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivED1Ev>
 800974a:	2110      	movs	r1, #16
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f021 fbdc 	bl	802af0a <_ZdlPvj>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	4a05      	ldr	r2, [pc, #20]	@ (800977c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd f8c3 	bl	80068f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4618      	mov	r0, r3
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	0802d660 	.word	0x0802d660

08009780 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff ffe7 	bl	800975c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800978e:	2110      	movs	r1, #16
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f021 fbba 	bl	802af0a <_ZdlPvj>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 * to implement a progress indicator. For more specific implementations see classes that
 * inherit from AbstractProgressIndicator.
 *
 * @see BoxProgress, CircleProgress, ImageProgress, LineProgress, TextProgress
 */
class AbstractProgressIndicator : public Container
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	4a0a      	ldr	r2, [pc, #40]	@ (80097d4 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3358      	adds	r3, #88	@ 0x58
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd f8e2 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	332c      	adds	r3, #44	@ 0x2c
 80097bc:	4618      	mov	r0, r3
 80097be:	f7fd f8ff 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fd f8d9 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	0802dc0c 	.word	0x0802dc0c

080097d8 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ffdd 	bl	80097a0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 80097e6:	21b4      	movs	r1, #180	@ 0xb4
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f021 fb8e 	bl	802af0a <_ZdlPvj>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 * expected to contain a wildcard &lt;placeholder> from the text.
 *
 * @note the text converter tool converts the <...> to ascii value 2 which is then being
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextArea
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	4a05      	ldr	r2, [pc, #20]	@ (8009818 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4618      	mov	r0, r3
 800980a:	f7fd f91d 	bl	8006a48 <_ZN8touchgfx8TextAreaD1Ev>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	0802efe0 	.word	0x0802efe0

0800981c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ffe7 	bl	80097f8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800982a:	2140      	movs	r1, #64	@ 0x40
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f021 fb6c 	bl	802af0a <_ZdlPvj>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ZN8touchgfx12TextProgressD1Ev>:
/**
 * A text progress will display progress as a number with a given number of decimals.
 *
 * @note The implementation does not use floating point variables to calculate the progress.
 */
class TextProgress : public AbstractProgressIndicator
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	4a08      	ldr	r2, [pc, #32]	@ (8009868 <_ZN8touchgfx12TextProgressD1Ev+0x2c>)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	601a      	str	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	33b4      	adds	r3, #180	@ 0xb4
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff ffd2 	bl	80097f8 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff ffa2 	bl	80097a0 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	0802daa8 	.word	0x0802daa8

0800986c <_ZN8touchgfx12TextProgressD0Ev>:
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f7ff ffe1 	bl	800983c <_ZN8touchgfx12TextProgressD1Ev>
 800987a:	f44f 7184 	mov.w	r1, #264	@ 0x108
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f021 fb43 	bl	802af0a <_ZdlPvj>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4618      	mov	r0, r3
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <_ZN8touchgfx6SliderD1Ev>:
class Slider : public Container
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	4a0f      	ldr	r2, [pc, #60]	@ (80098d8 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	33c0      	adds	r3, #192	@ 0xc0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f7fd f86a 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3394      	adds	r3, #148	@ 0x94
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd f887 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3368      	adds	r3, #104	@ 0x68
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fd f882 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	333c      	adds	r3, #60	@ 0x3c
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7fd f87d 	bl	80069c0 <_ZN8touchgfx5ImageD1Ev>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fd f857 	bl	800697c <_ZN8touchgfx9ContainerD1Ev>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	0802e114 	.word	0x0802e114

080098dc <_ZN8touchgfx6SliderD0Ev>:
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff ffd3 	bl	8009890 <_ZN8touchgfx6SliderD1Ev>
 80098ea:	21fc      	movs	r1, #252	@ 0xfc
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f021 fb0c 	bl	802af0a <_ZdlPvj>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <_ZN8touchgfx12ToggleButtonD1Ev>:
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	4a05      	ldr	r2, [pc, #20]	@ (800991c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	f7fd f8c3 	bl	8006a98 <_ZN8touchgfx6ButtonD1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	0802ec9c 	.word	0x0802ec9c

08009920 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff ffe7 	bl	80098fc <_ZN8touchgfx12ToggleButtonD1Ev>
 800992e:	2138      	movs	r1, #56	@ 0x38
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f021 faea 	bl	802af0a <_ZdlPvj>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	3708      	adds	r7, #8
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	68d2      	ldr	r2, [r2, #12]
 8009954:	1052      	asrs	r2, r2, #1
 8009956:	1898      	adds	r0, r3, r2
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d102      	bne.n	800996a <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	e00a      	b.n	8009980 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	68d2      	ldr	r2, [r2, #12]
 8009972:	1052      	asrs	r2, r2, #1
 8009974:	4413      	add	r3, r2
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	6892      	ldr	r2, [r2, #8]
 800997c:	4413      	add	r3, r2
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	4798      	blx	r3
    }
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d010      	beq.n	80099c0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d107      	bne.n	80099b6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 80099b2:	2301      	movs	r3, #1
 80099b4:	e000      	b.n	80099b8 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 80099b6:	2300      	movs	r3, #0
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d001      	beq.n	80099c0 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 80099bc:	2301      	movs	r3, #1
 80099be:	e000      	b.n	80099c2 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 80099c0:	2300      	movs	r3, #0
    }
 80099c2:	4618      	mov	r0, r3
 80099c4:	370c      	adds	r7, #12
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b082      	sub	sp, #8
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68d2      	ldr	r2, [r2, #12]
 80099e0:	1052      	asrs	r2, r2, #1
 80099e2:	1898      	adds	r0, r3, r2
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	e00a      	b.n	8009a0c <_ZN8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68d2      	ldr	r2, [r2, #12]
 80099fe:	1052      	asrs	r2, r2, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6892      	ldr	r2, [r2, #8]
 8009a08:	4413      	add	r3, r2
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	4798      	blx	r3
    }
 8009a10:	bf00      	nop
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d010      	beq.n	8009a4a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d107      	bne.n	8009a40 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f003 0301 	and.w	r3, r3, #1
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d001      	beq.n	8009a4a <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <_ZNK8touchgfx8CallbackI12MainViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8009a4a:	2300      	movs	r3, #0
    }
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	4801      	ldr	r0, [pc, #4]	@ (8009a64 <__tcf_0+0xc>)
 8009a5e:	f7fa f9ff 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	24001dcc 	.word	0x24001dcc

08009a68 <_Z23getFont_verdana_20_4bppv>:
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08c      	sub	sp, #48	@ 0x30
 8009a6c:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8009aec <_Z23getFont_verdana_20_4bppv+0x84>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f3bf 8f5b 	dmb	ish
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	bf0c      	ite	eq
 8009a7e:	2301      	moveq	r3, #1
 8009a80:	2300      	movne	r3, #0
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d02c      	beq.n	8009ae2 <_Z23getFont_verdana_20_4bppv+0x7a>
 8009a88:	4818      	ldr	r0, [pc, #96]	@ (8009aec <_Z23getFont_verdana_20_4bppv+0x84>)
 8009a8a:	f021 fa40 	bl	802af0e <__cxa_guard_acquire>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bf14      	ite	ne
 8009a94:	2301      	movne	r3, #1
 8009a96:	2300      	moveq	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d021      	beq.n	8009ae2 <_Z23getFont_verdana_20_4bppv+0x7a>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9308      	str	r3, [sp, #32]
 8009aaa:	233f      	movs	r3, #63	@ 0x3f
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	4b10      	ldr	r3, [pc, #64]	@ (8009af0 <_Z23getFont_verdana_20_4bppv+0x88>)
 8009ab0:	9306      	str	r3, [sp, #24]
 8009ab2:	4b10      	ldr	r3, [pc, #64]	@ (8009af4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009ab4:	9305      	str	r3, [sp, #20]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9304      	str	r3, [sp, #16]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9303      	str	r3, [sp, #12]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9302      	str	r3, [sp, #8]
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2314      	movs	r3, #20
 8009acc:	2201      	movs	r2, #1
 8009ace:	490a      	ldr	r1, [pc, #40]	@ (8009af8 <_Z23getFont_verdana_20_4bppv+0x90>)
 8009ad0:	480a      	ldr	r0, [pc, #40]	@ (8009afc <_Z23getFont_verdana_20_4bppv+0x94>)
 8009ad2:	f7fb fe55 	bl	8005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009ad6:	480a      	ldr	r0, [pc, #40]	@ (8009b00 <_Z23getFont_verdana_20_4bppv+0x98>)
 8009ad8:	f021 fa64 	bl	802afa4 <atexit>
 8009adc:	4803      	ldr	r0, [pc, #12]	@ (8009aec <_Z23getFont_verdana_20_4bppv+0x84>)
 8009ade:	f021 fa22 	bl	802af26 <__cxa_guard_release>
    return verdana_20_4bpp;
 8009ae2:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	24001df4 	.word	0x24001df4
 8009af0:	08030988 	.word	0x08030988
 8009af4:	0803099c 	.word	0x0803099c
 8009af8:	900007ec 	.word	0x900007ec
 8009afc:	24001dcc 	.word	0x24001dcc
 8009b00:	08009a59 	.word	0x08009a59

08009b04 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	4801      	ldr	r0, [pc, #4]	@ (8009b10 <__tcf_0+0xc>)
 8009b0a:	f7fa f9a9 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	24001df8 	.word	0x24001df8

08009b14 <_Z23getFont_verdana_40_4bppv>:
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08c      	sub	sp, #48	@ 0x30
 8009b18:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009b98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f3bf 8f5b 	dmb	ish
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bf0c      	ite	eq
 8009b2a:	2301      	moveq	r3, #1
 8009b2c:	2300      	movne	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d02c      	beq.n	8009b8e <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b34:	4818      	ldr	r0, [pc, #96]	@ (8009b98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b36:	f021 f9ea 	bl	802af0e <__cxa_guard_acquire>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	bf14      	ite	ne
 8009b40:	2301      	movne	r3, #1
 8009b42:	2300      	moveq	r3, #0
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d021      	beq.n	8009b8e <_Z23getFont_verdana_40_4bppv+0x7a>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b4e:	2300      	movs	r3, #0
 8009b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b52:	2300      	movs	r3, #0
 8009b54:	9308      	str	r3, [sp, #32]
 8009b56:	233f      	movs	r3, #63	@ 0x3f
 8009b58:	9307      	str	r3, [sp, #28]
 8009b5a:	4b10      	ldr	r3, [pc, #64]	@ (8009b9c <_Z23getFont_verdana_40_4bppv+0x88>)
 8009b5c:	9306      	str	r3, [sp, #24]
 8009b5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ba0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009b60:	9305      	str	r3, [sp, #20]
 8009b62:	2300      	movs	r3, #0
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	2300      	movs	r3, #0
 8009b68:	9303      	str	r3, [sp, #12]
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	9302      	str	r3, [sp, #8]
 8009b6e:	2304      	movs	r3, #4
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2328      	movs	r3, #40	@ 0x28
 8009b78:	2201      	movs	r2, #1
 8009b7a:	490a      	ldr	r1, [pc, #40]	@ (8009ba4 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009b7c:	480a      	ldr	r0, [pc, #40]	@ (8009ba8 <_Z23getFont_verdana_40_4bppv+0x94>)
 8009b7e:	f7fb fdff 	bl	8005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009b82:	480a      	ldr	r0, [pc, #40]	@ (8009bac <_Z23getFont_verdana_40_4bppv+0x98>)
 8009b84:	f021 fa0e 	bl	802afa4 <atexit>
 8009b88:	4803      	ldr	r0, [pc, #12]	@ (8009b98 <_Z23getFont_verdana_40_4bppv+0x84>)
 8009b8a:	f021 f9cc 	bl	802af26 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009b8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ba8 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	24001e20 	.word	0x24001e20
 8009b9c:	0803098c 	.word	0x0803098c
 8009ba0:	080309a0 	.word	0x080309a0
 8009ba4:	900007fc 	.word	0x900007fc
 8009ba8:	24001df8 	.word	0x24001df8
 8009bac:	08009b05 	.word	0x08009b05

08009bb0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_10_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_10_4bpp()
{
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	4801      	ldr	r0, [pc, #4]	@ (8009bbc <__tcf_0+0xc>)
 8009bb6:	f7fa f953 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	24001e24 	.word	0x24001e24

08009bc0 <_Z24getFont_verdanab_10_4bppv>:
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08c      	sub	sp, #48	@ 0x30
 8009bc4:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_10_4bpp(glyphs_verdanab_10_4bpp, 26, 10, 2, 4, 1, 0, 1, unicodes_verdanab_10_4bpp, kerning_verdanab_10_4bpp, 63, 0, 0, 0);
 8009bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c44 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f3bf 8f5b 	dmb	ish
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d02c      	beq.n	8009c3a <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009be0:	4818      	ldr	r0, [pc, #96]	@ (8009c44 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009be2:	f021 f994 	bl	802af0e <__cxa_guard_acquire>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bf14      	ite	ne
 8009bec:	2301      	movne	r3, #1
 8009bee:	2300      	moveq	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d021      	beq.n	8009c3a <_Z24getFont_verdanab_10_4bppv+0x7a>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfe:	2300      	movs	r3, #0
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	233f      	movs	r3, #63	@ 0x3f
 8009c04:	9307      	str	r3, [sp, #28]
 8009c06:	4b10      	ldr	r3, [pc, #64]	@ (8009c48 <_Z24getFont_verdanab_10_4bppv+0x88>)
 8009c08:	9306      	str	r3, [sp, #24]
 8009c0a:	4b10      	ldr	r3, [pc, #64]	@ (8009c4c <_Z24getFont_verdanab_10_4bppv+0x8c>)
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	2300      	movs	r3, #0
 8009c14:	9303      	str	r3, [sp, #12]
 8009c16:	2301      	movs	r3, #1
 8009c18:	9302      	str	r3, [sp, #8]
 8009c1a:	2304      	movs	r3, #4
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	2302      	movs	r3, #2
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	230a      	movs	r3, #10
 8009c24:	221a      	movs	r2, #26
 8009c26:	490a      	ldr	r1, [pc, #40]	@ (8009c50 <_Z24getFont_verdanab_10_4bppv+0x90>)
 8009c28:	480a      	ldr	r0, [pc, #40]	@ (8009c54 <_Z24getFont_verdanab_10_4bppv+0x94>)
 8009c2a:	f7fb fda9 	bl	8005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009c2e:	480a      	ldr	r0, [pc, #40]	@ (8009c58 <_Z24getFont_verdanab_10_4bppv+0x98>)
 8009c30:	f021 f9b8 	bl	802afa4 <atexit>
 8009c34:	4803      	ldr	r0, [pc, #12]	@ (8009c44 <_Z24getFont_verdanab_10_4bppv+0x84>)
 8009c36:	f021 f976 	bl	802af26 <__cxa_guard_release>
    return verdanab_10_4bpp;
 8009c3a:	4b06      	ldr	r3, [pc, #24]	@ (8009c54 <_Z24getFont_verdanab_10_4bppv+0x94>)
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	24001e4c 	.word	0x24001e4c
 8009c48:	08030990 	.word	0x08030990
 8009c4c:	080309a4 	.word	0x080309a4
 8009c50:	9000080c 	.word	0x9000080c
 8009c54:	24001e24 	.word	0x24001e24
 8009c58:	08009bb1 	.word	0x08009bb1

08009c5c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_12_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_12_4bpp()
{
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	4801      	ldr	r0, [pc, #4]	@ (8009c68 <__tcf_0+0xc>)
 8009c62:	f7fa f8fd 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	24001e50 	.word	0x24001e50

08009c6c <_Z24getFont_verdanab_12_4bppv>:
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08c      	sub	sp, #48	@ 0x30
 8009c70:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_12_4bpp(glyphs_verdanab_12_4bpp, 21, 12, 2, 4, 1, 0, 1, unicodes_verdanab_12_4bpp, kerning_verdanab_12_4bpp, 63, 0, 0, 0);
 8009c72:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f3bf 8f5b 	dmb	ish
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bf0c      	ite	eq
 8009c82:	2301      	moveq	r3, #1
 8009c84:	2300      	movne	r3, #0
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02c      	beq.n	8009ce6 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009c8c:	4818      	ldr	r0, [pc, #96]	@ (8009cf0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009c8e:	f021 f93e 	bl	802af0e <__cxa_guard_acquire>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	bf14      	ite	ne
 8009c98:	2301      	movne	r3, #1
 8009c9a:	2300      	moveq	r3, #0
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d021      	beq.n	8009ce6 <_Z24getFont_verdanab_12_4bppv+0x7a>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009caa:	2300      	movs	r3, #0
 8009cac:	9308      	str	r3, [sp, #32]
 8009cae:	233f      	movs	r3, #63	@ 0x3f
 8009cb0:	9307      	str	r3, [sp, #28]
 8009cb2:	4b10      	ldr	r3, [pc, #64]	@ (8009cf4 <_Z24getFont_verdanab_12_4bppv+0x88>)
 8009cb4:	9306      	str	r3, [sp, #24]
 8009cb6:	4b10      	ldr	r3, [pc, #64]	@ (8009cf8 <_Z24getFont_verdanab_12_4bppv+0x8c>)
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	2301      	movs	r3, #1
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9303      	str	r3, [sp, #12]
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	9302      	str	r3, [sp, #8]
 8009cc6:	2304      	movs	r3, #4
 8009cc8:	9301      	str	r3, [sp, #4]
 8009cca:	2302      	movs	r3, #2
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	230c      	movs	r3, #12
 8009cd0:	2215      	movs	r2, #21
 8009cd2:	490a      	ldr	r1, [pc, #40]	@ (8009cfc <_Z24getFont_verdanab_12_4bppv+0x90>)
 8009cd4:	480a      	ldr	r0, [pc, #40]	@ (8009d00 <_Z24getFont_verdanab_12_4bppv+0x94>)
 8009cd6:	f7fb fd53 	bl	8005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009cda:	480a      	ldr	r0, [pc, #40]	@ (8009d04 <_Z24getFont_verdanab_12_4bppv+0x98>)
 8009cdc:	f021 f962 	bl	802afa4 <atexit>
 8009ce0:	4803      	ldr	r0, [pc, #12]	@ (8009cf0 <_Z24getFont_verdanab_12_4bppv+0x84>)
 8009ce2:	f021 f920 	bl	802af26 <__cxa_guard_release>
    return verdanab_12_4bpp;
 8009ce6:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <_Z24getFont_verdanab_12_4bppv+0x94>)
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	24001e78 	.word	0x24001e78
 8009cf4:	08030994 	.word	0x08030994
 8009cf8:	080309a8 	.word	0x080309a8
 8009cfc:	90000978 	.word	0x90000978
 8009d00:	24001e50 	.word	0x24001e50
 8009d04:	08009c5d 	.word	0x08009c5d

08009d08 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanab_8_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanab_8_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_8_4bpp()
{
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	4801      	ldr	r0, [pc, #4]	@ (8009d14 <__tcf_0+0xc>)
 8009d0e:	f7fa f8a7 	bl	8003e60 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	24001e7c 	.word	0x24001e7c

08009d18 <_Z23getFont_verdanab_8_4bppv>:
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08c      	sub	sp, #48	@ 0x30
 8009d1c:	af0c      	add	r7, sp, #48	@ 0x30
    static touchgfx::GeneratedFont verdanab_8_4bpp(glyphs_verdanab_8_4bpp, 22, 8, 2, 4, 1, 0, 1, unicodes_verdanab_8_4bpp, kerning_verdanab_8_4bpp, 63, 0, 0, 0);
 8009d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8009d9c <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f3bf 8f5b 	dmb	ish
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	bf0c      	ite	eq
 8009d2e:	2301      	moveq	r3, #1
 8009d30:	2300      	movne	r3, #0
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d02c      	beq.n	8009d92 <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d38:	4818      	ldr	r0, [pc, #96]	@ (8009d9c <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d3a:	f021 f8e8 	bl	802af0e <__cxa_guard_acquire>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	bf14      	ite	ne
 8009d44:	2301      	movne	r3, #1
 8009d46:	2300      	moveq	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d021      	beq.n	8009d92 <_Z23getFont_verdanab_8_4bppv+0x7a>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d52:	2300      	movs	r3, #0
 8009d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d56:	2300      	movs	r3, #0
 8009d58:	9308      	str	r3, [sp, #32]
 8009d5a:	233f      	movs	r3, #63	@ 0x3f
 8009d5c:	9307      	str	r3, [sp, #28]
 8009d5e:	4b10      	ldr	r3, [pc, #64]	@ (8009da0 <_Z23getFont_verdanab_8_4bppv+0x88>)
 8009d60:	9306      	str	r3, [sp, #24]
 8009d62:	4b10      	ldr	r3, [pc, #64]	@ (8009da4 <_Z23getFont_verdanab_8_4bppv+0x8c>)
 8009d64:	9305      	str	r3, [sp, #20]
 8009d66:	2301      	movs	r3, #1
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	2301      	movs	r3, #1
 8009d70:	9302      	str	r3, [sp, #8]
 8009d72:	2304      	movs	r3, #4
 8009d74:	9301      	str	r3, [sp, #4]
 8009d76:	2302      	movs	r3, #2
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	2216      	movs	r2, #22
 8009d7e:	490a      	ldr	r1, [pc, #40]	@ (8009da8 <_Z23getFont_verdanab_8_4bppv+0x90>)
 8009d80:	480a      	ldr	r0, [pc, #40]	@ (8009dac <_Z23getFont_verdanab_8_4bppv+0x94>)
 8009d82:	f7fb fcfd 	bl	8005780 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009d86:	480a      	ldr	r0, [pc, #40]	@ (8009db0 <_Z23getFont_verdanab_8_4bppv+0x98>)
 8009d88:	f021 f90c 	bl	802afa4 <atexit>
 8009d8c:	4803      	ldr	r0, [pc, #12]	@ (8009d9c <_Z23getFont_verdanab_8_4bppv+0x84>)
 8009d8e:	f021 f8ca 	bl	802af26 <__cxa_guard_release>
    return verdanab_8_4bpp;
 8009d92:	4b06      	ldr	r3, [pc, #24]	@ (8009dac <_Z23getFont_verdanab_8_4bppv+0x94>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	24001ea4 	.word	0x24001ea4
 8009da0:	08030998 	.word	0x08030998
 8009da4:	080309ac 	.word	0x080309ac
 8009da8:	90000aa0 	.word	0x90000aa0
 8009dac:	24001e7c 	.word	0x24001e7c
 8009db0:	08009d09 	.word	0x08009d09

08009db4 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	817b      	strh	r3, [r7, #10]
    {
        return 0;
 8009dc2:	2300      	movs	r3, #0
    }
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009dd8:	2300      	movs	r3, #0
    }
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009de6:	b480      	push	{r7}
 8009de8:	b083      	sub	sp, #12
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8009dee:	2300      	movs	r3, #0
    }
 8009df0:	4618      	mov	r0, r3
 8009df2:	370c      	adds	r7, #12
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8009e0a:	4a07      	ldr	r2, [pc, #28]	@ (8009e28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6013      	str	r3, [r2, #0]
        fonts = f;
 8009e10:	4a06      	ldr	r2, [pc, #24]	@ (8009e2c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8009e16:	4a06      	ldr	r2, [pc, #24]	@ (8009e30 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8009e18:	88fb      	ldrh	r3, [r7, #6]
 8009e1a:	8013      	strh	r3, [r2, #0]
    }
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	2400b91c 	.word	0x2400b91c
 8009e2c:	2400b924 	.word	0x2400b924
 8009e30:	2400b920 	.word	0x2400b920

08009e34 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e34:	b40e      	push	{r1, r2, r3}
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b085      	sub	sp, #20
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8009e3e:	f107 0320 	add.w	r3, r7, #32
 8009e42:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	2100      	movs	r1, #0
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f012 fdc6 	bl	801c9dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009e50:	4603      	mov	r3, r0
 8009e52:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009e54:	89fb      	ldrh	r3, [r7, #14]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e60:	b003      	add	sp, #12
 8009e62:	4770      	bx	lr

08009e64 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8009e64:	b40c      	push	{r2, r3}
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8009e72:	f107 031c 	add.w	r3, r7, #28
 8009e76:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8009e78:	78f9      	ldrb	r1, [r7, #3]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f012 fdac 	bl	801c9dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8009e84:	4603      	mov	r3, r0
 8009e86:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8009e88:	89fb      	ldrh	r3, [r7, #14]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e94:	b002      	add	sp, #8
 8009e96:	4770      	bx	lr

08009e98 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b08a      	sub	sp, #40	@ 0x28
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d016      	beq.n	8009eda <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3322      	adds	r3, #34	@ 0x22
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	8adb      	ldrh	r3, [r3, #22]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8009eba:	4b43      	ldr	r3, [pc, #268]	@ (8009fc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009ebc:	4a43      	ldr	r2, [pc, #268]	@ (8009fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009ebe:	21c0      	movs	r1, #192	@ 0xc0
 8009ec0:	4843      	ldr	r0, [pc, #268]	@ (8009fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009ec2:	f021 f851 	bl	802af68 <__assert_func>
            return buffer[pos];
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec8:	8a9b      	ldrh	r3, [r3, #20]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8009eda:	2300      	movs	r3, #0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d06a      	beq.n	8009fb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f014 f937 	bl	801e154 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3322      	adds	r3, #34	@ 0x22
 8009eea:	623b      	str	r3, [r7, #32]
 8009eec:	2301      	movs	r3, #1
 8009eee:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	8adb      	ldrh	r3, [r3, #22]
 8009ef4:	8bfa      	ldrh	r2, [r7, #30]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d305      	bcc.n	8009f06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8009efa:	4b36      	ldr	r3, [pc, #216]	@ (8009fd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8009efc:	4a36      	ldr	r2, [pc, #216]	@ (8009fd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8009efe:	21c5      	movs	r1, #197	@ 0xc5
 8009f00:	4833      	ldr	r0, [pc, #204]	@ (8009fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f02:	f021 f831 	bl	802af68 <__assert_func>
            const uint16_t index = pos + offset;
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	8a9a      	ldrh	r2, [r3, #20]
 8009f0a:	8bfb      	ldrh	r3, [r7, #30]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8009f10:	8bbb      	ldrh	r3, [r7, #28]
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	d801      	bhi.n	8009f1a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8009f16:	8bbb      	ldrh	r3, [r7, #28]
 8009f18:	e001      	b.n	8009f1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8009f1a:	8bbb      	ldrh	r3, [r7, #28]
 8009f1c:	3b0a      	subs	r3, #10
 8009f1e:	6a3a      	ldr	r2, [r7, #32]
 8009f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f24:	f640 123f 	movw	r2, #2367	@ 0x93f
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d03f      	beq.n	8009fb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3322      	adds	r3, #34	@ 0x22
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	3222      	adds	r2, #34	@ 0x22
 8009f3e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	8ad2      	ldrh	r2, [r2, #22]
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	d105      	bne.n	8009f54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8009f48:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8009f4a:	4a20      	ldr	r2, [pc, #128]	@ (8009fcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8009f4c:	21c0      	movs	r1, #192	@ 0xc0
 8009f4e:	4820      	ldr	r0, [pc, #128]	@ (8009fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f50:	f021 f80a 	bl	802af68 <__assert_func>
            return buffer[pos];
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	8a92      	ldrh	r2, [r2, #20]
 8009f58:	4611      	mov	r1, r2
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	4613      	mov	r3, r2
 8009f64:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	8adb      	ldrh	r3, [r3, #22]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d806      	bhi.n	8009f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8009f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8009fdc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8009f70:	4a1b      	ldr	r2, [pc, #108]	@ (8009fe0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8009f72:	f240 110d 	movw	r1, #269	@ 0x10d
 8009f76:	4816      	ldr	r0, [pc, #88]	@ (8009fd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8009f78:	f020 fff6 	bl	802af68 <__assert_func>
            const uint16_t index = pos + 1;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	8a9b      	ldrh	r3, [r3, #20]
 8009f80:	3301      	adds	r3, #1
 8009f82:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8009f84:	89bb      	ldrh	r3, [r7, #12]
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d801      	bhi.n	8009f8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8009f8a:	89bb      	ldrh	r3, [r7, #12]
 8009f8c:	e000      	b.n	8009f90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	89f9      	ldrh	r1, [r7, #14]
 8009f94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8009f98:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3322      	adds	r3, #34	@ 0x22
 8009f9e:	61bb      	str	r3, [r7, #24]
 8009fa0:	f640 133f 	movw	r3, #2367	@ 0x93f
 8009fa4:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	8a9b      	ldrh	r3, [r3, #20]
 8009faa:	4619      	mov	r1, r3
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	8afa      	ldrh	r2, [r7, #22]
 8009fb0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8009fb4:	bf00      	nop
        }
    }
    return getNextChar();
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f013 ffb0 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8009fbc:	4603      	mov	r3, r0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3728      	adds	r7, #40	@ 0x28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	0802c9b4 	.word	0x0802c9b4
 8009fcc:	0802c9c0 	.word	0x0802c9c0
 8009fd0:	0802ca6c 	.word	0x0802ca6c
 8009fd4:	0802cab8 	.word	0x0802cab8
 8009fd8:	0802cac8 	.word	0x0802cac8
 8009fdc:	0802cb9c 	.word	0x0802cb9c
 8009fe0:	0802cba8 	.word	0x0802cba8

08009fe4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f013 ff4d 	bl	801de8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b088      	sub	sp, #32
 8009ffe:	af02      	add	r7, sp, #8
 800a000:	60f8      	str	r0, [r7, #12]
 800a002:	1d38      	adds	r0, r7, #4
 800a004:	e880 0006 	stmia.w	r0, {r1, r2}
 800a008:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800a00a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a00e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800a010:	1d39      	adds	r1, r7, #4
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f011 f9b4 	bl	801b38c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800a024:	bf00      	nop
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800a02c:	b590      	push	{r4, r7, lr}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d127      	bne.n	800a090 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800a040:	88fb      	ldrh	r3, [r7, #6]
 800a042:	4a1e      	ldr	r2, [pc, #120]	@ (800a0bc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d016      	beq.n	800a07a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	4a1b      	ldr	r2, [pc, #108]	@ (800a0bc <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800a050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a054:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	4413      	add	r3, r2
 800a05e:	4a18      	ldr	r2, [pc, #96]	@ (800a0c0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a060:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	4413      	add	r3, r2
 800a06a:	4a16      	ldr	r2, [pc, #88]	@ (800a0c4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a06c:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	4413      	add	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	e00a      	b.n	800a090 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800a07a:	4b11      	ldr	r3, [pc, #68]	@ (800a0c0 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800a07c:	4a12      	ldr	r2, [pc, #72]	@ (800a0c8 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800a07e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800a080:	4a12      	ldr	r2, [pc, #72]	@ (800a0cc <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800a082:	4b10      	ldr	r3, [pc, #64]	@ (800a0c4 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800a084:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	4a11      	ldr	r2, [pc, #68]	@ (800a0d0 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800a08a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a08e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800a096:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d4 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800a098:	88fb      	ldrh	r3, [r7, #6]
 800a09a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800a09c:	f000 f83e 	bl	800a11c <_ZN17TypedTextDatabase8getFontsEv>
 800a0a0:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800a0a2:	f000 f833 	bl	800a10c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7ff fea5 	bl	8009dfc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd90      	pop	{r4, r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	24001ea8 	.word	0x24001ea8
 800a0c0:	24001eb0 	.word	0x24001eb0
 800a0c4:	24001eb4 	.word	0x24001eb4
 800a0c8:	90000c04 	.word	0x90000c04
 800a0cc:	90000bd4 	.word	0x90000bd4
 800a0d0:	90000dec 	.word	0x90000dec
 800a0d4:	24001eac 	.word	0x24001eac

0800a0d8 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800a0e4:	4b07      	ldr	r3, [pc, #28]	@ (800a104 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b07      	ldr	r3, [pc, #28]	@ (800a108 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800a0ea:	6819      	ldr	r1, [r3, #0]
 800a0ec:	887b      	ldrh	r3, [r7, #2]
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	440b      	add	r3, r1
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	005b      	lsls	r3, r3, #1
 800a0f6:	4413      	add	r3, r2
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	24001eb0 	.word	0x24001eb0
 800a108:	24001eb4 	.word	0x24001eb4

0800a10c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800a10c:	b480      	push	{r7}
 800a10e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800a110:	230c      	movs	r3, #12
}
 800a112:	4618      	mov	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800a120:	4b02      	ldr	r3, [pc, #8]	@ (800a12c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	24001eb8 	.word	0x24001eb8

0800a130 <_Z41__static_initialization_and_destruction_0ii>:
    case 4:
        touchgfx_fonts[4] = &(getFont_verdanab_12_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d11d      	bne.n	800a17c <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a146:	4293      	cmp	r3, r2
 800a148:	d118      	bne.n	800a17c <_Z41__static_initialization_and_destruction_0ii+0x4c>
    &(getFont_verdana_20_4bpp()),
 800a14a:	f7ff fc8d 	bl	8009a68 <_Z23getFont_verdana_20_4bppv>
 800a14e:	4603      	mov	r3, r0
};
 800a150:	4a0c      	ldr	r2, [pc, #48]	@ (800a184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a152:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800a154:	f7ff fcde 	bl	8009b14 <_Z23getFont_verdana_40_4bppv>
 800a158:	4603      	mov	r3, r0
};
 800a15a:	4a0a      	ldr	r2, [pc, #40]	@ (800a184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a15c:	6053      	str	r3, [r2, #4]
    &(getFont_verdanab_8_4bpp()),
 800a15e:	f7ff fddb 	bl	8009d18 <_Z23getFont_verdanab_8_4bppv>
 800a162:	4603      	mov	r3, r0
};
 800a164:	4a07      	ldr	r2, [pc, #28]	@ (800a184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a166:	6093      	str	r3, [r2, #8]
    &(getFont_verdanab_10_4bpp()),
 800a168:	f7ff fd2a 	bl	8009bc0 <_Z24getFont_verdanab_10_4bppv>
 800a16c:	4603      	mov	r3, r0
};
 800a16e:	4a05      	ldr	r2, [pc, #20]	@ (800a184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a170:	60d3      	str	r3, [r2, #12]
    &(getFont_verdanab_12_4bpp())
 800a172:	f7ff fd7b 	bl	8009c6c <_Z24getFont_verdanab_12_4bppv>
 800a176:	4603      	mov	r3, r0
};
 800a178:	4a02      	ldr	r2, [pc, #8]	@ (800a184 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a17a:	6113      	str	r3, [r2, #16]
} // namespace TypedTextDatabase
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	24001eb8 	.word	0x24001eb8

0800a188 <_GLOBAL__sub_I_touchgfx_fonts>:
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a190:	2001      	movs	r0, #1
 800a192:	f7ff ffcd 	bl	800a130 <_Z41__static_initialization_and_destruction_0ii>
 800a196:	bd80      	pop	{r7, pc}

0800a198 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	68b9      	ldr	r1, [r7, #8]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fa f9aa 	bl	8004504 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a1b0:	4a03      	ldr	r2, [pc, #12]	@ (800a1c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]
{
}
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	0802cffc 	.word	0x0802cffc

0800a1c4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
    {
    }
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    {
    }
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
    {
 800a1f4:	4a04      	ldr	r2, [pc, #16]	@ (800a208 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	601a      	str	r2, [r3, #0]
    }
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	0802d750 	.word	0x0802d750

0800a20c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
    }
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7ff ffe9 	bl	800a1ec <_ZN8touchgfx9PresenterD1Ev>
 800a21a:	2104      	movs	r1, #4
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f020 fe74 	bl	802af0a <_ZdlPvj>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
    {
 800a234:	4a04      	ldr	r2, [pc, #16]	@ (800a248 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	601a      	str	r2, [r3, #0]
    }
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	0802d750 	.word	0x0802d750

0800a24c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	4a06      	ldr	r2, [pc, #24]	@ (800a270 <_ZN13ModelListenerC1Ev+0x24>)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	605a      	str	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4618      	mov	r0, r3
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	0802d740 	.word	0x0802d740

0800a274 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	4a04      	ldr	r2, [pc, #16]	@ (800a290 <_ZN13ModelListenerD1Ev+0x1c>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	0802d740 	.word	0x0802d740

0800a294 <_ZN13ModelListenerD0Ev>:
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7ff ffe9 	bl	800a274 <_ZN13ModelListenerD1Ev>
 800a2a2:	2108      	movs	r1, #8
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f020 fe30 	bl	802af0a <_ZdlPvj>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <_ZN25Localize_AnomalyPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Localize_AnomalyPresenter() {};
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	4a09      	ldr	r2, [pc, #36]	@ (800a2e4 <_ZN25Localize_AnomalyPresenterD1Ev+0x30>)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	4a09      	ldr	r2, [pc, #36]	@ (800a2e8 <_ZN25Localize_AnomalyPresenterD1Ev+0x34>)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	605a      	str	r2, [r3, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff ffd1 	bl	800a274 <_ZN13ModelListenerD1Ev>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff ff89 	bl	800a1ec <_ZN8touchgfx9PresenterD1Ev>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3708      	adds	r7, #8
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	0802d718 	.word	0x0802d718
 800a2e8:	0802d730 	.word	0x0802d730

0800a2ec <_ZThn4_N25Localize_AnomalyPresenterD1Ev>:
 800a2ec:	f1a0 0004 	sub.w	r0, r0, #4
 800a2f0:	e7e0      	b.n	800a2b4 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a2f2:	bf00      	nop

0800a2f4 <_ZN25Localize_AnomalyPresenterD0Ev>:
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ffd9 	bl	800a2b4 <_ZN25Localize_AnomalyPresenterD1Ev>
 800a302:	2110      	movs	r1, #16
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f020 fe00 	bl	802af0a <_ZdlPvj>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <_ZThn4_N25Localize_AnomalyPresenterD0Ev>:
 800a314:	f1a0 0004 	sub.w	r0, r0, #4
 800a318:	e7ec      	b.n	800a2f4 <_ZN25Localize_AnomalyPresenterD0Ev>
	...

0800a31c <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>
#include <gui/localize_anomaly_screen/Localize_AnomalyPresenter.hpp>

Localize_AnomalyPresenter::Localize_AnomalyPresenter(Localize_AnomalyView& v)
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
    : view(v)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7ff ff7f 	bl	800a22c <_ZN8touchgfx9PresenterC1Ev>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3304      	adds	r3, #4
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ff8a 	bl	800a24c <_ZN13ModelListenerC1Ev>
 800a338:	4a06      	ldr	r2, [pc, #24]	@ (800a354 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x38>)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	4a06      	ldr	r2, [pc, #24]	@ (800a358 <_ZN25Localize_AnomalyPresenterC1ER20Localize_AnomalyView+0x3c>)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	605a      	str	r2, [r3, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	60da      	str	r2, [r3, #12]
{

}
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	0802d718 	.word	0x0802d718
 800a358:	0802d730 	.word	0x0802d730

0800a35c <_ZN25Localize_AnomalyPresenter8activateEv>:

void Localize_AnomalyPresenter::activate()
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <_ZN25Localize_AnomalyPresenter10deactivateEv>:

void Localize_AnomalyPresenter::deactivate()
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]

}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <_ZN20Localize_AnomalyViewD1Ev>:

class Localize_AnomalyView : public Localize_AnomalyViewBase
{
public:
    Localize_AnomalyView();
    virtual ~Localize_AnomalyView() {}
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	4a05      	ldr	r2, [pc, #20]	@ (800a3a4 <_ZN20Localize_AnomalyViewD1Ev+0x20>)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fb fcdb 	bl	8005d50 <_ZN24Localize_AnomalyViewBaseD1Ev>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	0802d768 	.word	0x0802d768

0800a3a8 <_ZN20Localize_AnomalyViewD0Ev>:
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff ffe7 	bl	800a384 <_ZN20Localize_AnomalyViewD1Ev>
 800a3b6:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f020 fda5 	bl	802af0a <_ZdlPvj>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
	...

0800a3cc <_ZN20Localize_AnomalyViewC1Ev>:
#include <gui/localize_anomaly_screen/Localize_AnomalyView.hpp>

Localize_AnomalyView::Localize_AnomalyView()
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fb fd60 	bl	8005e9c <_ZN24Localize_AnomalyViewBaseC1Ev>
 800a3dc:	4a03      	ldr	r2, [pc, #12]	@ (800a3ec <_ZN20Localize_AnomalyViewC1Ev+0x20>)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	601a      	str	r2, [r3, #0]
{

}
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0802d768 	.word	0x0802d768

0800a3f0 <_ZN20Localize_AnomalyView11setupScreenEv>:

void Localize_AnomalyView::setupScreen()
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::setupScreen();
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7fc fa08 	bl	8006810 <_ZN24Localize_AnomalyViewBase11setupScreenEv>
}
 800a400:	bf00      	nop
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <_ZN20Localize_AnomalyView14tearDownScreenEv>:

void Localize_AnomalyView::tearDownScreen()
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
    Localize_AnomalyViewBase::tearDownScreen();
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	f7fb facc 	bl	80059b0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	4a09      	ldr	r2, [pc, #36]	@ (800a450 <_ZN13MainPresenterD1Ev+0x30>)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	4a09      	ldr	r2, [pc, #36]	@ (800a454 <_ZN13MainPresenterD1Ev+0x34>)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	605a      	str	r2, [r3, #4]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3304      	adds	r3, #4
 800a438:	4618      	mov	r0, r3
 800a43a:	f7ff ff1b 	bl	800a274 <_ZN13ModelListenerD1Ev>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fed3 	bl	800a1ec <_ZN8touchgfx9PresenterD1Ev>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4618      	mov	r0, r3
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	0802d7a0 	.word	0x0802d7a0
 800a454:	0802d7b8 	.word	0x0802d7b8

0800a458 <_ZThn4_N13MainPresenterD1Ev>:
 800a458:	f1a0 0004 	sub.w	r0, r0, #4
 800a45c:	e7e0      	b.n	800a420 <_ZN13MainPresenterD1Ev>
 800a45e:	bf00      	nop

0800a460 <_ZN13MainPresenterD0Ev>:
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff ffd9 	bl	800a420 <_ZN13MainPresenterD1Ev>
 800a46e:	2110      	movs	r1, #16
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f020 fd4a 	bl	802af0a <_ZdlPvj>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <_ZThn4_N13MainPresenterD0Ev>:
 800a480:	f1a0 0004 	sub.w	r0, r0, #4
 800a484:	e7ec      	b.n	800a460 <_ZN13MainPresenterD0Ev>
	...

0800a488 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
    : view(v)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fec9 	bl	800a22c <_ZN8touchgfx9PresenterC1Ev>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	3304      	adds	r3, #4
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff fed4 	bl	800a24c <_ZN13ModelListenerC1Ev>
 800a4a4:	4a06      	ldr	r2, [pc, #24]	@ (800a4c0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	4a06      	ldr	r2, [pc, #24]	@ (800a4c4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	605a      	str	r2, [r3, #4]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	60da      	str	r2, [r3, #12]
{
}
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3708      	adds	r7, #8
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	0802d7a0 	.word	0x0802d7a0
 800a4c4:	0802d7b8 	.word	0x0802d7b8

0800a4c8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>:
    /**
     * Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800a4f8:	4b07      	ldr	r3, [pc, #28]	@ (800a518 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800a502:	4a07      	ldr	r2, [pc, #28]	@ (800a520 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800a504:	2187      	movs	r1, #135	@ 0x87
 800a506:	4807      	ldr	r0, [pc, #28]	@ (800a524 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800a508:	f020 fd2e 	bl	802af68 <__assert_func>
        return bitmapId;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	881b      	ldrh	r3, [r3, #0]
    }
 800a510:	4618      	mov	r0, r3
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	2400b954 	.word	0x2400b954
 800a51c:	0802cc5c 	.word	0x0802cc5c
 800a520:	0802cc98 	.word	0x0802cc98
 800a524:	0802cccc 	.word	0x0802cccc

0800a528 <_ZNK8touchgfx12ToggleButton8getStateEv>:
     * Gets the state of the ToggleButton as set with forceState.
     *
     * @return True if the button has been toggled, i.e. the pressed state is shown when the
     *         button is not pressed.
     */
    bool getState() const
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b083      	sub	sp, #12
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
    {
        return up.getId() == originalPressed.getId();
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	332e      	adds	r3, #46	@ 0x2e
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff ffdb 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461c      	mov	r4, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3334      	adds	r3, #52	@ 0x34
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff ffd4 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 800a548:	4603      	mov	r3, r0
 800a54a:	429c      	cmp	r4, r3
 800a54c:	bf0c      	ite	eq
 800a54e:	2301      	moveq	r3, #1
 800a550:	2300      	movne	r3, #0
 800a552:	b2db      	uxtb	r3, r3
    }
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd90      	pop	{r4, r7, pc}

0800a55c <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	4a05      	ldr	r2, [pc, #20]	@ (800a57c <_ZN8MainViewD1Ev+0x20>)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fc fb4f 	bl	8006c10 <_ZN12MainViewBaseD1Ev>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	0802d7c8 	.word	0x0802d7c8

0800a580 <_ZN8MainViewD0Ev>:
 800a580:	b580      	push	{r7, lr}
 800a582:	b082      	sub	sp, #8
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff ffe7 	bl	800a55c <_ZN8MainViewD1Ev>
 800a58e:	f640 3118 	movw	r1, #2840	@ 0xb18
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f020 fcb9 	bl	802af0a <_ZdlPvj>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <_ZN8MainViewC1Ev>:
#include "ipc_interface.h"

systemState state;
int currentDelta = 0;

MainView::MainView()
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fc fcc6 	bl	8006f40 <_ZN12MainViewBaseC1Ev>
 800a5b4:	4a03      	ldr	r2, [pc, #12]	@ (800a5c4 <_ZN8MainViewC1Ev+0x20>)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	601a      	str	r2, [r3, #0]
{
}
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	0802d7c8 	.word	0x0802d7c8

0800a5c8 <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	//setup voiceToggle
	if(!state.voiceToggle) {
 800a5d0:	4b60      	ldr	r3, [pc, #384]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a5d2:	791b      	ldrb	r3, [r3, #4]
 800a5d4:	f083 0301 	eor.w	r3, r3, #1
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d026      	beq.n	800a62c <_ZN8MainView11setupScreenEv+0x64>
		VoiceCommMess_Text_On.setVisible(false);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fc fabd 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7fc fab6 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a600:	4618      	mov	r0, r3
 800a602:	f012 fb0d 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a60c:	4618      	mov	r0, r3
 800a60e:	f012 fb07 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

		Voice_Toggle_Button.forceState(true);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a618:	2101      	movs	r1, #1
 800a61a:	4618      	mov	r0, r3
 800a61c:	f00f f9a8 	bl	8019970 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a626:	4618      	mov	r0, r3
 800a628:	f012 fafa 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	//setup volume
	textProgress1.setValue(state.volume);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a632:	4a48      	ldr	r2, [pc, #288]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a634:	6812      	ldr	r2, [r2, #0]
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f00d f9ad 	bl	8017998 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a644:	4a43      	ldr	r2, [pc, #268]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a646:	6812      	ldr	r2, [r2, #0]
 800a648:	4611      	mov	r1, r2
 800a64a:	4618      	mov	r0, r3
 800a64c:	f00d febb 	bl	80183c6 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a656:	4618      	mov	r0, r3
 800a658:	f012 fae2 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//setup anomaly message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a662:	4a3c      	ldr	r2, [pc, #240]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a664:	7952      	ldrb	r2, [r2, #5]
 800a666:	b2d2      	uxtb	r2, r2
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fc fa7b 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a676:	4618      	mov	r0, r3
 800a678:	f012 fad2 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	MessageBoard_Message_1.setVisible(state.alert);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a682:	4a34      	ldr	r2, [pc, #208]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a684:	7992      	ldrb	r2, [r2, #6]
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fc fa6c 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a694:	4618      	mov	r0, r3
 800a696:	f012 fac3 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a6a0:	4b2c      	ldr	r3, [pc, #176]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6a2:	799b      	ldrb	r3, [r3, #6]
 800a6a4:	f083 0301 	eor.w	r3, r3, #1
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fc fa5a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f012 fab1 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a6c4:	4a23      	ldr	r2, [pc, #140]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6c6:	7952      	ldrb	r2, [r2, #5]
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fc fa4a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f012 faa1 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a6e4:	4a1b      	ldr	r2, [pc, #108]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a6e6:	7952      	ldrb	r2, [r2, #5]
 800a6e8:	b2d2      	uxtb	r2, r2
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fc fa3a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f012 fa91 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800a704:	4b13      	ldr	r3, [pc, #76]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a706:	795b      	ldrb	r3, [r3, #5]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	f083 0301 	eor.w	r3, r3, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	4619      	mov	r1, r3
 800a712:	4610      	mov	r0, r2
 800a714:	f7fc fa27 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800a71e:	4618      	mov	r0, r3
 800a720:	f012 fa7e 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800a72a:	4b0a      	ldr	r3, [pc, #40]	@ (800a754 <_ZN8MainView11setupScreenEv+0x18c>)
 800a72c:	795b      	ldrb	r3, [r3, #5]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	f083 0301 	eor.w	r3, r3, #1
 800a734:	b2db      	uxtb	r3, r3
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fc fa14 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800a744:	4618      	mov	r0, r3
 800a746:	f012 fa6b 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	2400000c 	.word	0x2400000c

0800a758 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <_ZN8MainView17set_volume_sliderEi>:

void MainView::set_volume_slider(int value) {
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	state.volume = value;
 800a776:	4a0e      	ldr	r2, [pc, #56]	@ (800a7b0 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	6013      	str	r3, [r2, #0]
	textProgress1.setValue(value);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	4618      	mov	r0, r3
 800a786:	f00d f907 	bl	8017998 <_ZN8touchgfx12TextProgress8setValueEi>

  // update IPC voice volume, normalized 0.0f to 1.0f
  IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a78a:	4b09      	ldr	r3, [pc, #36]	@ (800a7b0 <_ZN8MainView17set_volume_sliderEi+0x44>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a796:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800a7b4 <_ZN8MainView17set_volume_sliderEi+0x48>
 800a79a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a79e:	eeb0 0a47 	vmov.f32	s0, s14
 800a7a2:	f7f5 fded 	bl	8000380 <IPCSetVoiceVolumeNormalized>
}
 800a7a6:	bf00      	nop
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	2400000c 	.word	0x2400000c
 800a7b4:	42c80000 	.word	0x42c80000

0800a7b8 <_ZN8MainView18set_volume_encoderEv>:

void MainView::set_volume_encoder() {
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
	int tempVolume = state.volume + currentDelta;
 800a7c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a83c <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	4b1e      	ldr	r3, [pc, #120]	@ (800a840 <_ZN8MainView18set_volume_encoderEv+0x88>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	60fb      	str	r3, [r7, #12]
	if(tempVolume > 100) {
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b64      	cmp	r3, #100	@ 0x64
 800a7d0:	dd02      	ble.n	800a7d8 <_ZN8MainView18set_volume_encoderEv+0x20>
		tempVolume = 100;
 800a7d2:	2364      	movs	r3, #100	@ 0x64
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e004      	b.n	800a7e2 <_ZN8MainView18set_volume_encoderEv+0x2a>
	}
	else if(tempVolume < 0) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	da01      	bge.n	800a7e2 <_ZN8MainView18set_volume_encoderEv+0x2a>
		tempVolume = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
	}
	state.volume = tempVolume;
 800a7e2:	4a16      	ldr	r2, [pc, #88]	@ (800a83c <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6013      	str	r3, [r2, #0]

	// update IPC voice volume, normalized 0.0f to 1.0f
	IPCSetVoiceVolumeNormalized( (float)state.volume/100.0f );
 800a7e8:	4b14      	ldr	r3, [pc, #80]	@ (800a83c <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	ee07 3a90 	vmov	s15, r3
 800a7f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7f4:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800a844 <_ZN8MainView18set_volume_encoderEv+0x8c>
 800a7f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a7fc:	eeb0 0a47 	vmov.f32	s0, s14
 800a800:	f7f5 fdbe 	bl	8000380 <IPCSetVoiceVolumeNormalized>

	//setup volume
	textProgress1.setValue(state.volume);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a80a:	4a0c      	ldr	r2, [pc, #48]	@ (800a83c <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a80c:	6812      	ldr	r2, [r2, #0]
 800a80e:	4611      	mov	r1, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f00d f8c1 	bl	8017998 <_ZN8touchgfx12TextProgress8setValueEi>
	Volume_Slider.setValue(state.volume);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a81c:	4a07      	ldr	r2, [pc, #28]	@ (800a83c <_ZN8MainView18set_volume_encoderEv+0x84>)
 800a81e:	6812      	ldr	r2, [r2, #0]
 800a820:	4611      	mov	r1, r2
 800a822:	4618      	mov	r0, r3
 800a824:	f00d fdcf 	bl	80183c6 <_ZN8touchgfx6Slider8setValueEi>
	Volume_Slider.invalidate();
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 800a82e:	4618      	mov	r0, r3
 800a830:	f012 f9f6 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

}
 800a834:	bf00      	nop
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	2400000c 	.word	0x2400000c
 800a840:	24001ecc 	.word	0x24001ecc
 800a844:	42c80000 	.word	0x42c80000

0800a848 <_ZN8MainView12toggle_voiceEv>:

/*
 * Virtual function called when either toggle button is pressed
 */
void MainView::toggle_voice() {
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	//Toggle voiceToggle variable
	state.voiceToggle = !state.voiceToggle;
 800a850:	4b37      	ldr	r3, [pc, #220]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a852:	791b      	ldrb	r3, [r3, #4]
 800a854:	f083 0301 	eor.w	r3, r3, #1
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a85c:	711a      	strb	r2, [r3, #4]

	// update IPC, mute state is !voiceToggle
	IPCSetVoiceMuteState( (boolean_t)!state.voiceToggle );
 800a85e:	4b34      	ldr	r3, [pc, #208]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	f083 0301 	eor.w	r3, r3, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f5 fd99 	bl	80003a0 <IPCSetVoiceMuteState>

	//Update GUI accordingly
	if(state.voiceToggle) {
 800a86e:	4b30      	ldr	r3, [pc, #192]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a870:	791b      	ldrb	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d01a      	beq.n	800a8ac <_ZN8MainView12toggle_voiceEv+0x64>
		VoiceCommMess_Text_On.setVisible(true);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a87c:	2101      	movs	r1, #1
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fc f971 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(false);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fc f96a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a898:	4618      	mov	r0, r3
 800a89a:	f012 f9c1 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f012 f9bb 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
 800a8aa:	e019      	b.n	800a8e0 <_ZN8MainView12toggle_voiceEv+0x98>

	} else {
		VoiceCommMess_Text_On.setVisible(false);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7fc f956 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
		VoiceCommMess_Text_Off.setVisible(true);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fc f94f 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>

		VoiceCommMess_Text_On.invalidate();
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f203 737c 	addw	r3, r3, #1916	@ 0x77c
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f012 f9a6 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
		VoiceCommMess_Text_Off.invalidate();
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f503 63f7 	add.w	r3, r3, #1976	@ 0x7b8
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f012 f9a0 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	}

	if(Voice_Toggle_Button.getState() == state.voiceToggle) {
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7ff fe1e 	bl	800a528 <_ZNK8touchgfx12ToggleButton8getStateEv>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a8f2:	791b      	ldrb	r3, [r3, #4]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	bf0c      	ite	eq
 800a8f8:	2301      	moveq	r3, #1
 800a8fa:	2300      	movne	r3, #0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d011      	beq.n	800a926 <_ZN8MainView12toggle_voiceEv+0xde>
		Voice_Toggle_Button.forceState(!state.voiceToggle);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f203 42f4 	addw	r2, r3, #1268	@ 0x4f4
 800a908:	4b09      	ldr	r3, [pc, #36]	@ (800a930 <_ZN8MainView12toggle_voiceEv+0xe8>)
 800a90a:	791b      	ldrb	r3, [r3, #4]
 800a90c:	f083 0301 	eor.w	r3, r3, #1
 800a910:	b2db      	uxtb	r3, r3
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f00f f82b 	bl	8019970 <_ZN8touchgfx12ToggleButton10forceStateEb>
		Voice_Toggle_Button.invalidate();
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 800a920:	4618      	mov	r0, r3
 800a922:	f012 f97d 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800a926:	bf00      	nop
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	2400000c 	.word	0x2400000c

0800a934 <_ZN8MainView20update_anomaly_alertEv>:

void MainView::update_anomaly_alert() {
 800a934:	b580      	push	{r7, lr}
 800a936:	b082      	sub	sp, #8
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  // a direct cast to bool doesnt work here, need a conditional
	state.anomalyDetected = (IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800a93c:	f7f5 fd40 	bl	80003c0 <IPCGetAnomalyDetectState>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	bf14      	ite	ne
 800a946:	2301      	movne	r3, #1
 800a948:	2300      	moveq	r3, #0
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	4b40      	ldr	r3, [pc, #256]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a94e:	715a      	strb	r2, [r3, #5]
	state.alert = state.anomalyDetected;
 800a950:	4b3f      	ldr	r3, [pc, #252]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a952:	795b      	ldrb	r3, [r3, #5]
 800a954:	b2da      	uxtb	r2, r3
 800a956:	4b3e      	ldr	r3, [pc, #248]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a958:	719a      	strb	r2, [r3, #6]

	//Set alert message
	AnomalyWarning_Textbox_1_1.setVisible(state.anomalyDetected);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a960:	4a3b      	ldr	r2, [pc, #236]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a962:	7952      	ldrb	r2, [r2, #5]
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	4611      	mov	r1, r2
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fc f8fc 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	AnomalyWarning_Textbox_1_1.invalidate();
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f203 73f4 	addw	r3, r3, #2036	@ 0x7f4
 800a974:	4618      	mov	r0, r3
 800a976:	f012 f953 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set text of alert message
	MessageBoard_Message_1.setVisible(state.alert);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a980:	4a33      	ldr	r2, [pc, #204]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a982:	7992      	ldrb	r2, [r2, #6]
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc f8ed 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_1.invalidate();
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800a992:	4618      	mov	r0, r3
 800a994:	f012 f944 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	MessageBoard_Message_Muted.setVisible(!state.alert);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800a99e:	4b2c      	ldr	r3, [pc, #176]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9a0:	799b      	ldrb	r3, [r3, #6]
 800a9a2:	f083 0301 	eor.w	r3, r3, #1
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	f7fc f8db 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	MessageBoard_Message_Muted.invalidate();
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f012 f932 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set buttons
	Localize_Button.setVisible(state.anomalyDetected);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a9c2:	4a23      	ldr	r2, [pc, #140]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9c4:	7952      	ldrb	r2, [r2, #5]
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fc f8cb 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Localize_Button.invalidate();
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f603 2328 	addw	r3, r3, #2600	@ 0xa28
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f012 f922 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	Alert_Mute_Button.setVisible(state.anomalyDetected);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800a9e4:	7952      	ldrb	r2, [r2, #5]
 800a9e6:	b2d2      	uxtb	r2, r2
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fc f8bb 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Alert_Mute_Button.invalidate();
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f603 13f4 	addw	r3, r3, #2548	@ 0x9f4
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f012 f912 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>

	//Set disabled button images
	Disabled_Button1.setVisible(!state.anomalyDetected);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f603 12c8 	addw	r2, r3, #2504	@ 0x9c8
 800aa02:	4b13      	ldr	r3, [pc, #76]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa04:	795b      	ldrb	r3, [r3, #5]
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	f083 0301 	eor.w	r3, r3, #1
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	4619      	mov	r1, r3
 800aa10:	4610      	mov	r0, r2
 800aa12:	f7fc f8a8 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button1.invalidate();
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f603 13c8 	addw	r3, r3, #2504	@ 0x9c8
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f012 f8ff 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	Disabled_Button2.setVisible(!state.anomalyDetected);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f603 129c 	addw	r2, r3, #2460	@ 0x99c
 800aa28:	4b09      	ldr	r3, [pc, #36]	@ (800aa50 <_ZN8MainView20update_anomaly_alertEv+0x11c>)
 800aa2a:	795b      	ldrb	r3, [r3, #5]
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	f083 0301 	eor.w	r3, r3, #1
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fc f895 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
	Disabled_Button2.invalidate();
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f603 139c 	addw	r3, r3, #2460	@ 0x99c
 800aa42:	4618      	mov	r0, r3
 800aa44:	f012 f8ec 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	2400000c 	.word	0x2400000c

0800aa54 <_ZN8MainView18alert_mute_pressedEv>:

void MainView::alert_mute_pressed() {
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  // toggle IPC mute, doesnt matter if alarm is not active, output audio sets it active on new event
  IPCSetAlarmMuteState( (boolean_t)!IPCGetAlarmMuteState( ) );
 800aa5c:	f7f5 fcbc 	bl	80003d8 <IPCGetAlarmMuteState>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf0c      	ite	eq
 800aa66:	2301      	moveq	r3, #1
 800aa68:	2300      	movne	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7f5 fcbf 	bl	80003f0 <IPCSetAlarmMuteState>

	if(state.alert) {
 800aa72:	4b16      	ldr	r3, [pc, #88]	@ (800aacc <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa74:	799b      	ldrb	r3, [r3, #6]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d023      	beq.n	800aac2 <_ZN8MainView18alert_mute_pressedEv+0x6e>
		state.alert = false;
 800aa7a:	4b14      	ldr	r3, [pc, #80]	@ (800aacc <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	719a      	strb	r2, [r3, #6]

		MessageBoard_Message_1.setVisible(state.alert);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800aa86:	4a11      	ldr	r2, [pc, #68]	@ (800aacc <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aa88:	7992      	ldrb	r2, [r2, #6]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fc f86a 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_1.invalidate();
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f012 f8c1 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
		MessageBoard_Message_Muted.setVisible(!state.alert);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f603 02c4 	addw	r2, r3, #2244	@ 0x8c4
 800aaa4:	4b09      	ldr	r3, [pc, #36]	@ (800aacc <_ZN8MainView18alert_mute_pressedEv+0x78>)
 800aaa6:	799b      	ldrb	r3, [r3, #6]
 800aaa8:	f083 0301 	eor.w	r3, r3, #1
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	4619      	mov	r1, r3
 800aab0:	4610      	mov	r0, r2
 800aab2:	f7fc f858 	bl	8006b66 <_ZN8touchgfx8Drawable10setVisibleEb>
		MessageBoard_Message_Muted.invalidate();
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f603 03c4 	addw	r3, r3, #2244	@ 0x8c4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f012 f8af 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
	}
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	2400000c 	.word	0x2400000c

0800aad0 <_ZN5ModelC1Ev>:
#include "ipc_interface.h"

//#include "main.h"
boolean_t led1 = TRUE;
extern int currentDelta;
Model::Model() : modelListener(0)
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
{

}
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <_ZN5Model4tickEv>:
bool anomaly_detect_state_previous;
bool anomaly_detect_state_current = false;

uint16_t encoderCount = 0;
void Model::tick()
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  // update anomaly detect state from IPC
  anomaly_detect_state_previous = anomaly_detect_state_current;
 800aaf4:	4b67      	ldr	r3, [pc, #412]	@ (800ac94 <_ZN5Model4tickEv+0x1a8>)
 800aaf6:	781a      	ldrb	r2, [r3, #0]
 800aaf8:	4b67      	ldr	r3, [pc, #412]	@ (800ac98 <_ZN5Model4tickEv+0x1ac>)
 800aafa:	701a      	strb	r2, [r3, #0]
  // a direct cast to bool doesnt work here, need a conditional
  anomaly_detect_state_current = ((int)IPCGetAnomalyDetectState( ) != 0 ? true : false);
 800aafc:	f7f5 fc60 	bl	80003c0 <IPCGetAnomalyDetectState>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	2300      	moveq	r3, #0
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	4b61      	ldr	r3, [pc, #388]	@ (800ac94 <_ZN5Model4tickEv+0x1a8>)
 800ab0e:	701a      	strb	r2, [r3, #0]

  // only update GUI on change of state
  if ( anomaly_detect_state_current != anomaly_detect_state_previous )
 800ab10:	4b60      	ldr	r3, [pc, #384]	@ (800ac94 <_ZN5Model4tickEv+0x1a8>)
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	4b60      	ldr	r3, [pc, #384]	@ (800ac98 <_ZN5Model4tickEv+0x1ac>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d009      	beq.n	800ab30 <_ZN5Model4tickEv+0x44>
  {
    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(87);
 800ab1c:	f011 f8b6 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 800ab20:	4603      	mov	r3, r0
 800ab22:	461a      	mov	r2, r3
 800ab24:	6813      	ldr	r3, [r2, #0]
 800ab26:	330c      	adds	r3, #12
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2157      	movs	r1, #87	@ 0x57
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
  // Actuate and toggle alarm LEDS
  // * Originally went for series LEDs with center tap by driving output, but they remain lit even without output active,
  //     so added another output to conditionally provide 3v3 to the series
  // TODO - Might as well use one output for each LED, instead of the current kind of fixed arrangement
  // TODO - This level of hardware access should NOT be here, but it's 2 days to FDR and I'm long out of patience
  if ( anomaly_detect_state_current )
 800ab30:	4b58      	ldr	r3, [pc, #352]	@ (800ac94 <_ZN5Model4tickEv+0x1a8>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d028      	beq.n	800ab8a <_ZN5Model4tickEv+0x9e>
  {
    // enable the driving output
    GPIOH->BSRR |= 1 << 15;
 800ab38:	4b58      	ldr	r3, [pc, #352]	@ (800ac9c <_ZN5Model4tickEv+0x1b0>)
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	4a57      	ldr	r2, [pc, #348]	@ (800ac9c <_ZN5Model4tickEv+0x1b0>)
 800ab3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab42:	6193      	str	r3, [r2, #24]

    // half second on, half second off for each
    // wiring so that one or the other is on
    if ( HAL_GetTick( ) % 1000 < 500 )
 800ab44:	f006 f9bc 	bl	8010ec0 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b55      	ldr	r3, [pc, #340]	@ (800aca0 <_ZN5Model4tickEv+0x1b4>)
 800ab4c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab50:	099b      	lsrs	r3, r3, #6
 800ab52:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800ab56:	fb01 f303 	mul.w	r3, r1, r3
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800ab60:	4293      	cmp	r3, r2
 800ab62:	bf94      	ite	ls
 800ab64:	2301      	movls	r3, #1
 800ab66:	2300      	movhi	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d006      	beq.n	800ab7c <_ZN5Model4tickEv+0x90>
    {
      GPIOE->BSRR |= 1 << 3;
 800ab6e:	4b4d      	ldr	r3, [pc, #308]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	4a4c      	ldr	r2, [pc, #304]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab74:	f043 0308 	orr.w	r3, r3, #8
 800ab78:	6193      	str	r3, [r2, #24]
 800ab7a:	e012      	b.n	800aba2 <_ZN5Model4tickEv+0xb6>
    }
    else
    {
      GPIOE->BSRR |= 1 << (3 + 16);
 800ab7c:	4b49      	ldr	r3, [pc, #292]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	4a48      	ldr	r2, [pc, #288]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab86:	6193      	str	r3, [r2, #24]
 800ab88:	e00b      	b.n	800aba2 <_ZN5Model4tickEv+0xb6>
    }
  }
  else
  {
    // disable outputs driving LEDs
    GPIOH->BSRR |= 1 << (15 + 16);
 800ab8a:	4b44      	ldr	r3, [pc, #272]	@ (800ac9c <_ZN5Model4tickEv+0x1b0>)
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	4a43      	ldr	r2, [pc, #268]	@ (800ac9c <_ZN5Model4tickEv+0x1b0>)
 800ab90:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab94:	6193      	str	r3, [r2, #24]
    GPIOE->BSRR |= 1 << (3 + 16);
 800ab96:	4b43      	ldr	r3, [pc, #268]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	4a42      	ldr	r2, [pc, #264]	@ (800aca4 <_ZN5Model4tickEv+0x1b8>)
 800ab9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aba0:	6193      	str	r3, [r2, #24]
  }

  // voice mute
	bool currentSWStatus = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_3);
 800aba2:	2108      	movs	r1, #8
 800aba4:	4840      	ldr	r0, [pc, #256]	@ (800aca8 <_ZN5Model4tickEv+0x1bc>)
 800aba6:	f007 f851 	bl	8011c4c <HAL_GPIO_ReadPin>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	bf14      	ite	ne
 800abb0:	2301      	movne	r3, #1
 800abb2:	2300      	moveq	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]
    if(currentSWStatus != swStatus){
 800abb6:	4b3d      	ldr	r3, [pc, #244]	@ (800acac <_ZN5Model4tickEv+0x1c0>)
 800abb8:	781b      	ldrb	r3, [r3, #0]
 800abba:	7bfa      	ldrb	r2, [r7, #15]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d017      	beq.n	800abf0 <_ZN5Model4tickEv+0x104>
	   swStatus = currentSWStatus;
 800abc0:	4a3a      	ldr	r2, [pc, #232]	@ (800acac <_ZN5Model4tickEv+0x1c0>)
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	7013      	strb	r3, [r2, #0]
	   if(swFilter) {
 800abc6:	4b3a      	ldr	r3, [pc, #232]	@ (800acb0 <_ZN5Model4tickEv+0x1c4>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d009      	beq.n	800abe2 <_ZN5Model4tickEv+0xf6>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(89);
 800abce:	f011 f85d 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 800abd2:	4603      	mov	r3, r0
 800abd4:	461a      	mov	r2, r3
 800abd6:	6813      	ldr	r3, [r2, #0]
 800abd8:	330c      	adds	r3, #12
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	2159      	movs	r1, #89	@ 0x59
 800abde:	4610      	mov	r0, r2
 800abe0:	4798      	blx	r3
	   }
	   swFilter = !swFilter;
 800abe2:	4b33      	ldr	r3, [pc, #204]	@ (800acb0 <_ZN5Model4tickEv+0x1c4>)
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	f083 0301 	eor.w	r3, r3, #1
 800abea:	b2da      	uxtb	r2, r3
 800abec:	4b30      	ldr	r3, [pc, #192]	@ (800acb0 <_ZN5Model4tickEv+0x1c4>)
 800abee:	701a      	strb	r2, [r3, #0]
	}

  // alarm mute button
	bool currentMuteStatus = HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_1);
 800abf0:	2102      	movs	r1, #2
 800abf2:	4830      	ldr	r0, [pc, #192]	@ (800acb4 <_ZN5Model4tickEv+0x1c8>)
 800abf4:	f007 f82a 	bl	8011c4c <HAL_GPIO_ReadPin>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	bf14      	ite	ne
 800abfe:	2301      	movne	r3, #1
 800ac00:	2300      	moveq	r3, #0
 800ac02:	73bb      	strb	r3, [r7, #14]
    if(currentMuteStatus != muteStatus){
 800ac04:	4b2c      	ldr	r3, [pc, #176]	@ (800acb8 <_ZN5Model4tickEv+0x1cc>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	7bba      	ldrb	r2, [r7, #14]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d017      	beq.n	800ac3e <_ZN5Model4tickEv+0x152>
	   muteStatus = currentMuteStatus;
 800ac0e:	4a2a      	ldr	r2, [pc, #168]	@ (800acb8 <_ZN5Model4tickEv+0x1cc>)
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	7013      	strb	r3, [r2, #0]
	   if(muteFilter) {
 800ac14:	4b29      	ldr	r3, [pc, #164]	@ (800acbc <_ZN5Model4tickEv+0x1d0>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <_ZN5Model4tickEv+0x144>
		   static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(90);
 800ac1c:	f011 f836 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 800ac20:	4603      	mov	r3, r0
 800ac22:	461a      	mov	r2, r3
 800ac24:	6813      	ldr	r3, [r2, #0]
 800ac26:	330c      	adds	r3, #12
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	215a      	movs	r1, #90	@ 0x5a
 800ac2c:	4610      	mov	r0, r2
 800ac2e:	4798      	blx	r3
	   }
	   muteFilter = !muteFilter;
 800ac30:	4b22      	ldr	r3, [pc, #136]	@ (800acbc <_ZN5Model4tickEv+0x1d0>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f083 0301 	eor.w	r3, r3, #1
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	4b20      	ldr	r3, [pc, #128]	@ (800acbc <_ZN5Model4tickEv+0x1d0>)
 800ac3c:	701a      	strb	r2, [r3, #0]
	}

  // TIM4 serves as the encoder counter
  if (TIM4->CNT != encoderCount)
 800ac3e:	4b20      	ldr	r3, [pc, #128]	@ (800acc0 <_ZN5Model4tickEv+0x1d4>)
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	4a20      	ldr	r2, [pc, #128]	@ (800acc4 <_ZN5Model4tickEv+0x1d8>)
 800ac44:	8812      	ldrh	r2, [r2, #0]
 800ac46:	4293      	cmp	r3, r2
 800ac48:	bf14      	ite	ne
 800ac4a:	2301      	movne	r3, #1
 800ac4c:	2300      	moveq	r3, #0
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d01b      	beq.n	800ac8c <_ZN5Model4tickEv+0x1a0>
  {
    int16_t encoderDelta = TIM4->CNT - encoderCount;
 800ac54:	4b1a      	ldr	r3, [pc, #104]	@ (800acc0 <_ZN5Model4tickEv+0x1d4>)
 800ac56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	4b1a      	ldr	r3, [pc, #104]	@ (800acc4 <_ZN5Model4tickEv+0x1d8>)
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	81bb      	strh	r3, [r7, #12]
    encoderCount = TIM4->CNT;
 800ac64:	4b16      	ldr	r3, [pc, #88]	@ (800acc0 <_ZN5Model4tickEv+0x1d4>)
 800ac66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	4b16      	ldr	r3, [pc, #88]	@ (800acc4 <_ZN5Model4tickEv+0x1d8>)
 800ac6c:	801a      	strh	r2, [r3, #0]
    currentDelta = encoderDelta * 2;
 800ac6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	4a14      	ldr	r2, [pc, #80]	@ (800acc8 <_ZN5Model4tickEv+0x1dc>)
 800ac76:	6013      	str	r3, [r2, #0]

    static_cast<FrontendApplication*>(Application::getInstance())->handleKeyEvent(88);
 800ac78:	f011 f808 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	461a      	mov	r2, r3
 800ac80:	6813      	ldr	r3, [r2, #0]
 800ac82:	330c      	adds	r3, #12
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2158      	movs	r1, #88	@ 0x58
 800ac88:	4610      	mov	r0, r2
 800ac8a:	4798      	blx	r3
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	24001ed5 	.word	0x24001ed5
 800ac98:	24001ed4 	.word	0x24001ed4
 800ac9c:	58021c00 	.word	0x58021c00
 800aca0:	10624dd3 	.word	0x10624dd3
 800aca4:	58021000 	.word	0x58021000
 800aca8:	58021800 	.word	0x58021800
 800acac:	24001ed0 	.word	0x24001ed0
 800acb0:	24001ed1 	.word	0x24001ed1
 800acb4:	58022800 	.word	0x58022800
 800acb8:	24001ed2 	.word	0x24001ed2
 800acbc:	24001ed3 	.word	0x24001ed3
 800acc0:	40000800 	.word	0x40000800
 800acc4:	24001ed6 	.word	0x24001ed6
 800acc8:	24001ecc 	.word	0x24001ecc

0800accc <__NVIC_SetPriority>:
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	4603      	mov	r3, r0
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800acd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	db0a      	blt.n	800acf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	490c      	ldr	r1, [pc, #48]	@ (800ad18 <__NVIC_SetPriority+0x4c>)
 800ace6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acea:	0112      	lsls	r2, r2, #4
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	440b      	add	r3, r1
 800acf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800acf4:	e00a      	b.n	800ad0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	4908      	ldr	r1, [pc, #32]	@ (800ad1c <__NVIC_SetPriority+0x50>)
 800acfc:	88fb      	ldrh	r3, [r7, #6]
 800acfe:	f003 030f 	and.w	r3, r3, #15
 800ad02:	3b04      	subs	r3, #4
 800ad04:	0112      	lsls	r2, r2, #4
 800ad06:	b2d2      	uxtb	r2, r2
 800ad08:	440b      	add	r3, r1
 800ad0a:	761a      	strb	r2, [r3, #24]
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr
 800ad18:	e000e100 	.word	0xe000e100
 800ad1c:	e000ed00 	.word	0xe000ed00

0800ad20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ad20:	b580      	push	{r7, lr}
 800ad22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ad24:	4b05      	ldr	r3, [pc, #20]	@ (800ad3c <SysTick_Handler+0x1c>)
 800ad26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ad28:	f002 ff0c 	bl	800db44 <xTaskGetSchedulerState>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d001      	beq.n	800ad36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ad32:	f000 fff1 	bl	800bd18 <xPortSysTickHandler>
  }
}
 800ad36:	bf00      	nop
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	e000e010 	.word	0xe000e010

0800ad40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ad44:	2100      	movs	r1, #0
 800ad46:	f06f 0004 	mvn.w	r0, #4
 800ad4a:	f7ff ffbf 	bl	800accc <__NVIC_SetPriority>
#endif
}
 800ad4e:	bf00      	nop
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad5a:	f3ef 8305 	mrs	r3, IPSR
 800ad5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ad60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ad66:	f06f 0305 	mvn.w	r3, #5
 800ad6a:	607b      	str	r3, [r7, #4]
 800ad6c:	e00c      	b.n	800ad88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ad6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad98 <osKernelInitialize+0x44>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d105      	bne.n	800ad82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ad76:	4b08      	ldr	r3, [pc, #32]	@ (800ad98 <osKernelInitialize+0x44>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	e002      	b.n	800ad88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ad82:	f04f 33ff 	mov.w	r3, #4294967295
 800ad86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad88:	687b      	ldr	r3, [r7, #4]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
 800ad96:	bf00      	nop
 800ad98:	24001ed8 	.word	0x24001ed8

0800ad9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ada2:	f3ef 8305 	mrs	r3, IPSR
 800ada6:	603b      	str	r3, [r7, #0]
  return(result);
 800ada8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800adae:	f06f 0305 	mvn.w	r3, #5
 800adb2:	607b      	str	r3, [r7, #4]
 800adb4:	e010      	b.n	800add8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800adb6:	4b0b      	ldr	r3, [pc, #44]	@ (800ade4 <osKernelStart+0x48>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d109      	bne.n	800add2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800adbe:	f7ff ffbf 	bl	800ad40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800adc2:	4b08      	ldr	r3, [pc, #32]	@ (800ade4 <osKernelStart+0x48>)
 800adc4:	2202      	movs	r2, #2
 800adc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800adc8:	f002 fa58 	bl	800d27c <vTaskStartScheduler>
      stat = osOK;
 800adcc:	2300      	movs	r3, #0
 800adce:	607b      	str	r3, [r7, #4]
 800add0:	e002      	b.n	800add8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800add2:	f04f 33ff 	mov.w	r3, #4294967295
 800add6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800add8:	687b      	ldr	r3, [r7, #4]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3708      	adds	r7, #8
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	24001ed8 	.word	0x24001ed8

0800ade8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08e      	sub	sp, #56	@ 0x38
 800adec:	af04      	add	r7, sp, #16
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adf8:	f3ef 8305 	mrs	r3, IPSR
 800adfc:	617b      	str	r3, [r7, #20]
  return(result);
 800adfe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d17e      	bne.n	800af02 <osThreadNew+0x11a>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d07b      	beq.n	800af02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae0a:	2380      	movs	r3, #128	@ 0x80
 800ae0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ae0e:	2318      	movs	r3, #24
 800ae10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d045      	beq.n	800aeae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <osThreadNew+0x48>
        name = attr->name;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	699b      	ldr	r3, [r3, #24]
 800ae3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d008      	beq.n	800ae56 <osThreadNew+0x6e>
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2b38      	cmp	r3, #56	@ 0x38
 800ae48:	d805      	bhi.n	800ae56 <osThreadNew+0x6e>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <osThreadNew+0x72>
        return (NULL);
 800ae56:	2300      	movs	r3, #0
 800ae58:	e054      	b.n	800af04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d003      	beq.n	800ae6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	695b      	ldr	r3, [r3, #20]
 800ae66:	089b      	lsrs	r3, r3, #2
 800ae68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00e      	beq.n	800ae90 <osThreadNew+0xa8>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	2ba7      	cmp	r3, #167	@ 0xa7
 800ae78:	d90a      	bls.n	800ae90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d006      	beq.n	800ae90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <osThreadNew+0xa8>
        mem = 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	61bb      	str	r3, [r7, #24]
 800ae8e:	e010      	b.n	800aeb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <osThreadNew+0xca>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d108      	bne.n	800aeb2 <osThreadNew+0xca>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d104      	bne.n	800aeb2 <osThreadNew+0xca>
          mem = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	e001      	b.n	800aeb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d110      	bne.n	800aeda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aec0:	9202      	str	r2, [sp, #8]
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	6a3a      	ldr	r2, [r7, #32]
 800aecc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f001 ffe0 	bl	800ce94 <xTaskCreateStatic>
 800aed4:	4603      	mov	r3, r0
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	e013      	b.n	800af02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d110      	bne.n	800af02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	f107 0310 	add.w	r3, r7, #16
 800aee8:	9301      	str	r3, [sp, #4]
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f002 f82e 	bl	800cf54 <xTaskCreate>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d001      	beq.n	800af02 <osThreadNew+0x11a>
            hTask = NULL;
 800aefe:	2300      	movs	r3, #0
 800af00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af02:	693b      	ldr	r3, [r7, #16]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3728      	adds	r7, #40	@ 0x28
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af14:	f3ef 8305 	mrs	r3, IPSR
 800af18:	60bb      	str	r3, [r7, #8]
  return(result);
 800af1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <osDelay+0x1c>
    stat = osErrorISR;
 800af20:	f06f 0305 	mvn.w	r3, #5
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	e007      	b.n	800af38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af28:	2300      	movs	r3, #0
 800af2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d002      	beq.n	800af38 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f002 f96c 	bl	800d210 <vTaskDelay>
    }
  }

  return (stat);
 800af38:	68fb      	ldr	r3, [r7, #12]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800af42:	b580      	push	{r7, lr}
 800af44:	b08a      	sub	sp, #40	@ 0x28
 800af46:	af02      	add	r7, sp, #8
 800af48:	60f8      	str	r0, [r7, #12]
 800af4a:	60b9      	str	r1, [r7, #8]
 800af4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800af4e:	2300      	movs	r3, #0
 800af50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af52:	f3ef 8305 	mrs	r3, IPSR
 800af56:	613b      	str	r3, [r7, #16]
  return(result);
 800af58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d175      	bne.n	800b04a <osSemaphoreNew+0x108>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d072      	beq.n	800b04a <osSemaphoreNew+0x108>
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d86e      	bhi.n	800b04a <osSemaphoreNew+0x108>
    mem = -1;
 800af6c:	f04f 33ff 	mov.w	r3, #4294967295
 800af70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d015      	beq.n	800afa4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <osSemaphoreNew+0x4c>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b4f      	cmp	r3, #79	@ 0x4f
 800af86:	d902      	bls.n	800af8e <osSemaphoreNew+0x4c>
        mem = 1;
 800af88:	2301      	movs	r3, #1
 800af8a:	61bb      	str	r3, [r7, #24]
 800af8c:	e00c      	b.n	800afa8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d108      	bne.n	800afa8 <osSemaphoreNew+0x66>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <osSemaphoreNew+0x66>
          mem = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	61bb      	str	r3, [r7, #24]
 800afa2:	e001      	b.n	800afa8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afae:	d04c      	beq.n	800b04a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d128      	bne.n	800b008 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d10a      	bne.n	800afd2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	2203      	movs	r2, #3
 800afc2:	9200      	str	r2, [sp, #0]
 800afc4:	2200      	movs	r2, #0
 800afc6:	2100      	movs	r1, #0
 800afc8:	2001      	movs	r0, #1
 800afca:	f000 ffa1 	bl	800bf10 <xQueueGenericCreateStatic>
 800afce:	61f8      	str	r0, [r7, #28]
 800afd0:	e005      	b.n	800afde <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800afd2:	2203      	movs	r2, #3
 800afd4:	2100      	movs	r1, #0
 800afd6:	2001      	movs	r0, #1
 800afd8:	f001 f817 	bl	800c00a <xQueueGenericCreate>
 800afdc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d022      	beq.n	800b02a <osSemaphoreNew+0xe8>
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d01f      	beq.n	800b02a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800afea:	2300      	movs	r3, #0
 800afec:	2200      	movs	r2, #0
 800afee:	2100      	movs	r1, #0
 800aff0:	69f8      	ldr	r0, [r7, #28]
 800aff2:	f001 f8d7 	bl	800c1a4 <xQueueGenericSend>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d016      	beq.n	800b02a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800affc:	69f8      	ldr	r0, [r7, #28]
 800affe:	f001 fd75 	bl	800caec <vQueueDelete>
            hSemaphore = NULL;
 800b002:	2300      	movs	r3, #0
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e010      	b.n	800b02a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d108      	bne.n	800b020 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	461a      	mov	r2, r3
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f001 f855 	bl	800c0c6 <xQueueCreateCountingSemaphoreStatic>
 800b01c:	61f8      	str	r0, [r7, #28]
 800b01e:	e004      	b.n	800b02a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f001 f888 	bl	800c138 <xQueueCreateCountingSemaphore>
 800b028:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00c      	beq.n	800b04a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <osSemaphoreNew+0xfc>
          name = attr->name;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	617b      	str	r3, [r7, #20]
 800b03c:	e001      	b.n	800b042 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b042:	6979      	ldr	r1, [r7, #20]
 800b044:	69f8      	ldr	r0, [r7, #28]
 800b046:	f001 fe9d 	bl	800cd84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b04a:	69fb      	ldr	r3, [r7, #28]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b062:	2300      	movs	r3, #0
 800b064:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d103      	bne.n	800b074 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b06c:	f06f 0303 	mvn.w	r3, #3
 800b070:	617b      	str	r3, [r7, #20]
 800b072:	e039      	b.n	800b0e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b074:	f3ef 8305 	mrs	r3, IPSR
 800b078:	60fb      	str	r3, [r7, #12]
  return(result);
 800b07a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d022      	beq.n	800b0c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d003      	beq.n	800b08e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b086:	f06f 0303 	mvn.w	r3, #3
 800b08a:	617b      	str	r3, [r7, #20]
 800b08c:	e02c      	b.n	800b0e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b08e:	2300      	movs	r3, #0
 800b090:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	461a      	mov	r2, r3
 800b098:	2100      	movs	r1, #0
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f001 fca4 	bl	800c9e8 <xQueueReceiveFromISR>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d003      	beq.n	800b0ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b0a6:	f06f 0302 	mvn.w	r3, #2
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	e01c      	b.n	800b0e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d019      	beq.n	800b0e8 <osSemaphoreAcquire+0x94>
 800b0b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <osSemaphoreAcquire+0xa0>)
 800b0b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	e010      	b.n	800b0e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6938      	ldr	r0, [r7, #16]
 800b0ca:	f001 fb7d 	bl	800c7c8 <xQueueSemaphoreTake>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d009      	beq.n	800b0e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b0da:	f06f 0301 	mvn.w	r3, #1
 800b0de:	617b      	str	r3, [r7, #20]
 800b0e0:	e002      	b.n	800b0e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b0e2:	f06f 0302 	mvn.w	r3, #2
 800b0e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b0e8:	697b      	ldr	r3, [r7, #20]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3718      	adds	r7, #24
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	e000ed04 	.word	0xe000ed04

0800b0f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b104:	2300      	movs	r3, #0
 800b106:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b10e:	f06f 0303 	mvn.w	r3, #3
 800b112:	617b      	str	r3, [r7, #20]
 800b114:	e02c      	b.n	800b170 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b116:	f3ef 8305 	mrs	r3, IPSR
 800b11a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b11c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d01a      	beq.n	800b158 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b122:	2300      	movs	r3, #0
 800b124:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b126:	f107 0308 	add.w	r3, r7, #8
 800b12a:	4619      	mov	r1, r3
 800b12c:	6938      	ldr	r0, [r7, #16]
 800b12e:	f001 f9d9 	bl	800c4e4 <xQueueGiveFromISR>
 800b132:	4603      	mov	r3, r0
 800b134:	2b01      	cmp	r3, #1
 800b136:	d003      	beq.n	800b140 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b138:	f06f 0302 	mvn.w	r3, #2
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	e017      	b.n	800b170 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d014      	beq.n	800b170 <osSemaphoreRelease+0x78>
 800b146:	4b0d      	ldr	r3, [pc, #52]	@ (800b17c <osSemaphoreRelease+0x84>)
 800b148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	e00b      	b.n	800b170 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b158:	2300      	movs	r3, #0
 800b15a:	2200      	movs	r2, #0
 800b15c:	2100      	movs	r1, #0
 800b15e:	6938      	ldr	r0, [r7, #16]
 800b160:	f001 f820 	bl	800c1a4 <xQueueGenericSend>
 800b164:	4603      	mov	r3, r0
 800b166:	2b01      	cmp	r3, #1
 800b168:	d002      	beq.n	800b170 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b16a:	f06f 0302 	mvn.w	r3, #2
 800b16e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b170:	697b      	ldr	r3, [r7, #20]
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	e000ed04 	.word	0xe000ed04

0800b180 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b180:	b580      	push	{r7, lr}
 800b182:	b08a      	sub	sp, #40	@ 0x28
 800b184:	af02      	add	r7, sp, #8
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b190:	f3ef 8305 	mrs	r3, IPSR
 800b194:	613b      	str	r3, [r7, #16]
  return(result);
 800b196:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d15f      	bne.n	800b25c <osMessageQueueNew+0xdc>
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d05c      	beq.n	800b25c <osMessageQueueNew+0xdc>
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d059      	beq.n	800b25c <osMessageQueueNew+0xdc>
    mem = -1;
 800b1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d029      	beq.n	800b208 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d012      	beq.n	800b1e2 <osMessageQueueNew+0x62>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	2b4f      	cmp	r3, #79	@ 0x4f
 800b1c2:	d90e      	bls.n	800b1e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00a      	beq.n	800b1e2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	695a      	ldr	r2, [r3, #20]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	fb01 f303 	mul.w	r3, r1, r3
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d302      	bcc.n	800b1e2 <osMessageQueueNew+0x62>
        mem = 1;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	61bb      	str	r3, [r7, #24]
 800b1e0:	e014      	b.n	800b20c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d110      	bne.n	800b20c <osMessageQueueNew+0x8c>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10c      	bne.n	800b20c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d108      	bne.n	800b20c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d104      	bne.n	800b20c <osMessageQueueNew+0x8c>
          mem = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	61bb      	str	r3, [r7, #24]
 800b206:	e001      	b.n	800b20c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d10b      	bne.n	800b22a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	2100      	movs	r1, #0
 800b21c:	9100      	str	r1, [sp, #0]
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 fe75 	bl	800bf10 <xQueueGenericCreateStatic>
 800b226:	61f8      	str	r0, [r7, #28]
 800b228:	e008      	b.n	800b23c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d105      	bne.n	800b23c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b230:	2200      	movs	r2, #0
 800b232:	68b9      	ldr	r1, [r7, #8]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f000 fee8 	bl	800c00a <xQueueGenericCreate>
 800b23a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d00c      	beq.n	800b25c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d003      	beq.n	800b250 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	e001      	b.n	800b254 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b254:	6979      	ldr	r1, [r7, #20]
 800b256:	69f8      	ldr	r0, [r7, #28]
 800b258:	f001 fd94 	bl	800cd84 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b25c:	69fb      	ldr	r3, [r7, #28]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3720      	adds	r7, #32
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
	...

0800b268 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	b088      	sub	sp, #32
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	4613      	mov	r3, r2
 800b276:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b280:	f3ef 8305 	mrs	r3, IPSR
 800b284:	617b      	str	r3, [r7, #20]
  return(result);
 800b286:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d028      	beq.n	800b2de <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <osMessageQueuePut+0x36>
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <osMessageQueuePut+0x36>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b29e:	f06f 0303 	mvn.w	r3, #3
 800b2a2:	61fb      	str	r3, [r7, #28]
 800b2a4:	e038      	b.n	800b318 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b2aa:	f107 0210 	add.w	r2, r7, #16
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	69b8      	ldr	r0, [r7, #24]
 800b2b4:	f001 f878 	bl	800c3a8 <xQueueGenericSendFromISR>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d003      	beq.n	800b2c6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b2be:	f06f 0302 	mvn.w	r3, #2
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e028      	b.n	800b318 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d025      	beq.n	800b318 <osMessageQueuePut+0xb0>
 800b2cc:	4b15      	ldr	r3, [pc, #84]	@ (800b324 <osMessageQueuePut+0xbc>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	e01c      	b.n	800b318 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <osMessageQueuePut+0x82>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d103      	bne.n	800b2f2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b2ea:	f06f 0303 	mvn.w	r3, #3
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	e012      	b.n	800b318 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	69b8      	ldr	r0, [r7, #24]
 800b2fa:	f000 ff53 	bl	800c1a4 <xQueueGenericSend>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b01      	cmp	r3, #1
 800b302:	d009      	beq.n	800b318 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b30a:	f06f 0301 	mvn.w	r3, #1
 800b30e:	61fb      	str	r3, [r7, #28]
 800b310:	e002      	b.n	800b318 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b312:	f06f 0302 	mvn.w	r3, #2
 800b316:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b318:	69fb      	ldr	r3, [r7, #28]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3720      	adds	r7, #32
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	e000ed04 	.word	0xe000ed04

0800b328 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
 800b334:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b33e:	f3ef 8305 	mrs	r3, IPSR
 800b342:	617b      	str	r3, [r7, #20]
  return(result);
 800b344:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b346:	2b00      	cmp	r3, #0
 800b348:	d028      	beq.n	800b39c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <osMessageQueueGet+0x34>
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <osMessageQueueGet+0x34>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b35c:	f06f 0303 	mvn.w	r3, #3
 800b360:	61fb      	str	r3, [r7, #28]
 800b362:	e037      	b.n	800b3d4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b364:	2300      	movs	r3, #0
 800b366:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b368:	f107 0310 	add.w	r3, r7, #16
 800b36c:	461a      	mov	r2, r3
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	69b8      	ldr	r0, [r7, #24]
 800b372:	f001 fb39 	bl	800c9e8 <xQueueReceiveFromISR>
 800b376:	4603      	mov	r3, r0
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d003      	beq.n	800b384 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b37c:	f06f 0302 	mvn.w	r3, #2
 800b380:	61fb      	str	r3, [r7, #28]
 800b382:	e027      	b.n	800b3d4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d024      	beq.n	800b3d4 <osMessageQueueGet+0xac>
 800b38a:	4b15      	ldr	r3, [pc, #84]	@ (800b3e0 <osMessageQueueGet+0xb8>)
 800b38c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	f3bf 8f4f 	dsb	sy
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	e01b      	b.n	800b3d4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <osMessageQueueGet+0x80>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d103      	bne.n	800b3b0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b3a8:	f06f 0303 	mvn.w	r3, #3
 800b3ac:	61fb      	str	r3, [r7, #28]
 800b3ae:	e011      	b.n	800b3d4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	69b8      	ldr	r0, [r7, #24]
 800b3b6:	f001 f925 	bl	800c604 <xQueueReceive>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d009      	beq.n	800b3d4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b3c6:	f06f 0301 	mvn.w	r3, #1
 800b3ca:	61fb      	str	r3, [r7, #28]
 800b3cc:	e002      	b.n	800b3d4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b3ce:	f06f 0302 	mvn.w	r3, #2
 800b3d2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b3d4:	69fb      	ldr	r3, [r7, #28]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3720      	adds	r7, #32
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	e000ed04 	.word	0xe000ed04

0800b3e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a07      	ldr	r2, [pc, #28]	@ (800b410 <vApplicationGetIdleTaskMemory+0x2c>)
 800b3f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	4a06      	ldr	r2, [pc, #24]	@ (800b414 <vApplicationGetIdleTaskMemory+0x30>)
 800b3fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2280      	movs	r2, #128	@ 0x80
 800b400:	601a      	str	r2, [r3, #0]
}
 800b402:	bf00      	nop
 800b404:	3714      	adds	r7, #20
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	24001edc 	.word	0x24001edc
 800b414:	24001f84 	.word	0x24001f84

0800b418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	4a07      	ldr	r2, [pc, #28]	@ (800b444 <vApplicationGetTimerTaskMemory+0x2c>)
 800b428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	4a06      	ldr	r2, [pc, #24]	@ (800b448 <vApplicationGetTimerTaskMemory+0x30>)
 800b42e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b436:	601a      	str	r2, [r3, #0]
}
 800b438:	bf00      	nop
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr
 800b444:	24002184 	.word	0x24002184
 800b448:	2400222c 	.word	0x2400222c

0800b44c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08a      	sub	sp, #40	@ 0x28
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b454:	2300      	movs	r3, #0
 800b456:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b458:	f001 ff80 	bl	800d35c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b45c:	4b5c      	ldr	r3, [pc, #368]	@ (800b5d0 <pvPortMalloc+0x184>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b464:	f000 f924 	bl	800b6b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b468:	4b5a      	ldr	r3, [pc, #360]	@ (800b5d4 <pvPortMalloc+0x188>)
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4013      	ands	r3, r2
 800b470:	2b00      	cmp	r3, #0
 800b472:	f040 8095 	bne.w	800b5a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01e      	beq.n	800b4ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b47c:	2208      	movs	r2, #8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4413      	add	r3, r2
 800b482:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d015      	beq.n	800b4ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f023 0307 	bic.w	r3, r3, #7
 800b494:	3308      	adds	r3, #8
 800b496:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00b      	beq.n	800b4ba <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	e7fd      	b.n	800b4b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d06f      	beq.n	800b5a0 <pvPortMalloc+0x154>
 800b4c0:	4b45      	ldr	r3, [pc, #276]	@ (800b5d8 <pvPortMalloc+0x18c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d86a      	bhi.n	800b5a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b4ca:	4b44      	ldr	r3, [pc, #272]	@ (800b5dc <pvPortMalloc+0x190>)
 800b4cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b4ce:	4b43      	ldr	r3, [pc, #268]	@ (800b5dc <pvPortMalloc+0x190>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4d4:	e004      	b.n	800b4e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d903      	bls.n	800b4f2 <pvPortMalloc+0xa6>
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1f1      	bne.n	800b4d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b4f2:	4b37      	ldr	r3, [pc, #220]	@ (800b5d0 <pvPortMalloc+0x184>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d051      	beq.n	800b5a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4fc:	6a3b      	ldr	r3, [r7, #32]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2208      	movs	r2, #8
 800b502:	4413      	add	r3, r2
 800b504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	1ad2      	subs	r2, r2, r3
 800b516:	2308      	movs	r3, #8
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d920      	bls.n	800b560 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4413      	add	r3, r2
 800b524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00b      	beq.n	800b548 <pvPortMalloc+0xfc>
	__asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
}
 800b542:	bf00      	nop
 800b544:	bf00      	nop
 800b546:	e7fd      	b.n	800b544 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b55a:	69b8      	ldr	r0, [r7, #24]
 800b55c:	f000 f90a 	bl	800b774 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b560:	4b1d      	ldr	r3, [pc, #116]	@ (800b5d8 <pvPortMalloc+0x18c>)
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	1ad3      	subs	r3, r2, r3
 800b56a:	4a1b      	ldr	r2, [pc, #108]	@ (800b5d8 <pvPortMalloc+0x18c>)
 800b56c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b56e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5d8 <pvPortMalloc+0x18c>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e0 <pvPortMalloc+0x194>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	429a      	cmp	r2, r3
 800b578:	d203      	bcs.n	800b582 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b57a:	4b17      	ldr	r3, [pc, #92]	@ (800b5d8 <pvPortMalloc+0x18c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a18      	ldr	r2, [pc, #96]	@ (800b5e0 <pvPortMalloc+0x194>)
 800b580:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b584:	685a      	ldr	r2, [r3, #4]
 800b586:	4b13      	ldr	r3, [pc, #76]	@ (800b5d4 <pvPortMalloc+0x188>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b58e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	2200      	movs	r2, #0
 800b594:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b596:	4b13      	ldr	r3, [pc, #76]	@ (800b5e4 <pvPortMalloc+0x198>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a11      	ldr	r2, [pc, #68]	@ (800b5e4 <pvPortMalloc+0x198>)
 800b59e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5a0:	f001 feea 	bl	800d378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00b      	beq.n	800b5c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	60fb      	str	r3, [r7, #12]
}
 800b5c0:	bf00      	nop
 800b5c2:	bf00      	nop
 800b5c4:	e7fd      	b.n	800b5c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3728      	adds	r7, #40	@ 0x28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	2400a634 	.word	0x2400a634
 800b5d4:	2400a648 	.word	0x2400a648
 800b5d8:	2400a638 	.word	0x2400a638
 800b5dc:	2400a62c 	.word	0x2400a62c
 800b5e0:	2400a63c 	.word	0x2400a63c
 800b5e4:	2400a640 	.word	0x2400a640

0800b5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d04f      	beq.n	800b69a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5fa:	2308      	movs	r3, #8
 800b5fc:	425b      	negs	r3, r3
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	4413      	add	r3, r2
 800b602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	4b25      	ldr	r3, [pc, #148]	@ (800b6a4 <vPortFree+0xbc>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4013      	ands	r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <vPortFree+0x46>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d00b      	beq.n	800b64e <vPortFree+0x66>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	60bb      	str	r3, [r7, #8]
}
 800b648:	bf00      	nop
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	4b14      	ldr	r3, [pc, #80]	@ (800b6a4 <vPortFree+0xbc>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4013      	ands	r3, r2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01e      	beq.n	800b69a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11a      	bne.n	800b69a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a4 <vPortFree+0xbc>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	43db      	mvns	r3, r3
 800b66e:	401a      	ands	r2, r3
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b674:	f001 fe72 	bl	800d35c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a8 <vPortFree+0xc0>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4413      	add	r3, r2
 800b682:	4a09      	ldr	r2, [pc, #36]	@ (800b6a8 <vPortFree+0xc0>)
 800b684:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b686:	6938      	ldr	r0, [r7, #16]
 800b688:	f000 f874 	bl	800b774 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b68c:	4b07      	ldr	r3, [pc, #28]	@ (800b6ac <vPortFree+0xc4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	4a06      	ldr	r2, [pc, #24]	@ (800b6ac <vPortFree+0xc4>)
 800b694:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b696:	f001 fe6f 	bl	800d378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b69a:	bf00      	nop
 800b69c:	3718      	adds	r7, #24
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	2400a648 	.word	0x2400a648
 800b6a8:	2400a638 	.word	0x2400a638
 800b6ac:	2400a644 	.word	0x2400a644

0800b6b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b085      	sub	sp, #20
 800b6b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b6ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b6bc:	4b27      	ldr	r3, [pc, #156]	@ (800b75c <prvHeapInit+0xac>)
 800b6be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f003 0307 	and.w	r3, r3, #7
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00c      	beq.n	800b6e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3307      	adds	r3, #7
 800b6ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f023 0307 	bic.w	r3, r3, #7
 800b6d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	4a1f      	ldr	r2, [pc, #124]	@ (800b75c <prvHeapInit+0xac>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b760 <prvHeapInit+0xb0>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b6ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b760 <prvHeapInit+0xb0>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6fc:	2208      	movs	r2, #8
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f023 0307 	bic.w	r3, r3, #7
 800b70a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	4a15      	ldr	r2, [pc, #84]	@ (800b764 <prvHeapInit+0xb4>)
 800b710:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b712:	4b14      	ldr	r3, [pc, #80]	@ (800b764 <prvHeapInit+0xb4>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2200      	movs	r2, #0
 800b718:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b71a:	4b12      	ldr	r3, [pc, #72]	@ (800b764 <prvHeapInit+0xb4>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	1ad2      	subs	r2, r2, r3
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b730:	4b0c      	ldr	r3, [pc, #48]	@ (800b764 <prvHeapInit+0xb4>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	4a0a      	ldr	r2, [pc, #40]	@ (800b768 <prvHeapInit+0xb8>)
 800b73e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	4a09      	ldr	r2, [pc, #36]	@ (800b76c <prvHeapInit+0xbc>)
 800b746:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b748:	4b09      	ldr	r3, [pc, #36]	@ (800b770 <prvHeapInit+0xc0>)
 800b74a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b74e:	601a      	str	r2, [r3, #0]
}
 800b750:	bf00      	nop
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	2400262c 	.word	0x2400262c
 800b760:	2400a62c 	.word	0x2400a62c
 800b764:	2400a634 	.word	0x2400a634
 800b768:	2400a63c 	.word	0x2400a63c
 800b76c:	2400a638 	.word	0x2400a638
 800b770:	2400a648 	.word	0x2400a648

0800b774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b77c:	4b28      	ldr	r3, [pc, #160]	@ (800b820 <prvInsertBlockIntoFreeList+0xac>)
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e002      	b.n	800b788 <prvInsertBlockIntoFreeList+0x14>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d8f7      	bhi.n	800b782 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	4413      	add	r3, r2
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d108      	bne.n	800b7b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	441a      	add	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	441a      	add	r2, r3
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d118      	bne.n	800b7fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	4b15      	ldr	r3, [pc, #84]	@ (800b824 <prvInsertBlockIntoFreeList+0xb0>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d00d      	beq.n	800b7f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	441a      	add	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	e008      	b.n	800b804 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b824 <prvInsertBlockIntoFreeList+0xb0>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	e003      	b.n	800b804 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	429a      	cmp	r2, r3
 800b80a:	d002      	beq.n	800b812 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b812:	bf00      	nop
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	2400a62c 	.word	0x2400a62c
 800b824:	2400a634 	.word	0x2400a634

0800b828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f103 0208 	add.w	r2, r3, #8
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295
 800b840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f103 0208 	add.w	r2, r3, #8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f103 0208 	add.w	r2, r3, #8
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b882:	b480      	push	{r7}
 800b884:	b085      	sub	sp, #20
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	601a      	str	r2, [r3, #0]
}
 800b8be:	bf00      	nop
 800b8c0:	3714      	adds	r7, #20
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d103      	bne.n	800b8ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	e00c      	b.n	800b904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	60fb      	str	r3, [r7, #12]
 800b8f0:	e002      	b.n	800b8f8 <vListInsert+0x2e>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	429a      	cmp	r2, r3
 800b902:	d2f6      	bcs.n	800b8f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	601a      	str	r2, [r3, #0]
}
 800b930:	bf00      	nop
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6892      	ldr	r2, [r2, #8]
 800b952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6852      	ldr	r2, [r2, #4]
 800b95c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	429a      	cmp	r2, r3
 800b966:	d103      	bne.n	800b970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	689a      	ldr	r2, [r3, #8]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	1e5a      	subs	r2, r3, #1
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3b04      	subs	r3, #4
 800b9a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3b04      	subs	r3, #4
 800b9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	f023 0201 	bic.w	r2, r3, #1
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	3b04      	subs	r3, #4
 800b9be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b9f4 <pxPortInitialiseStack+0x64>)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3b14      	subs	r3, #20
 800b9ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	3b04      	subs	r3, #4
 800b9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f06f 0202 	mvn.w	r2, #2
 800b9de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	3b20      	subs	r3, #32
 800b9e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3714      	adds	r7, #20
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	0800b9f9 	.word	0x0800b9f9

0800b9f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba02:	4b13      	ldr	r3, [pc, #76]	@ (800ba50 <prvTaskExitError+0x58>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d00b      	beq.n	800ba24 <prvTaskExitError+0x2c>
	__asm volatile
 800ba0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba10:	f383 8811 	msr	BASEPRI, r3
 800ba14:	f3bf 8f6f 	isb	sy
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	60fb      	str	r3, [r7, #12]
}
 800ba1e:	bf00      	nop
 800ba20:	bf00      	nop
 800ba22:	e7fd      	b.n	800ba20 <prvTaskExitError+0x28>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba28:	f383 8811 	msr	BASEPRI, r3
 800ba2c:	f3bf 8f6f 	isb	sy
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	60bb      	str	r3, [r7, #8]
}
 800ba36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba38:	bf00      	nop
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0fc      	beq.n	800ba3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	3714      	adds	r7, #20
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	24000014 	.word	0x24000014
	...

0800ba60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba60:	4b07      	ldr	r3, [pc, #28]	@ (800ba80 <pxCurrentTCBConst2>)
 800ba62:	6819      	ldr	r1, [r3, #0]
 800ba64:	6808      	ldr	r0, [r1, #0]
 800ba66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6a:	f380 8809 	msr	PSP, r0
 800ba6e:	f3bf 8f6f 	isb	sy
 800ba72:	f04f 0000 	mov.w	r0, #0
 800ba76:	f380 8811 	msr	BASEPRI, r0
 800ba7a:	4770      	bx	lr
 800ba7c:	f3af 8000 	nop.w

0800ba80 <pxCurrentTCBConst2>:
 800ba80:	2400a694 	.word	0x2400a694
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop

0800ba88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba88:	4808      	ldr	r0, [pc, #32]	@ (800baac <prvPortStartFirstTask+0x24>)
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	6800      	ldr	r0, [r0, #0]
 800ba8e:	f380 8808 	msr	MSP, r0
 800ba92:	f04f 0000 	mov.w	r0, #0
 800ba96:	f380 8814 	msr	CONTROL, r0
 800ba9a:	b662      	cpsie	i
 800ba9c:	b661      	cpsie	f
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	df00      	svc	0
 800baa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baaa:	bf00      	nop
 800baac:	e000ed08 	.word	0xe000ed08

0800bab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bab6:	4b47      	ldr	r3, [pc, #284]	@ (800bbd4 <xPortStartScheduler+0x124>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a47      	ldr	r2, [pc, #284]	@ (800bbd8 <xPortStartScheduler+0x128>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d10b      	bne.n	800bad8 <xPortStartScheduler+0x28>
	__asm volatile
 800bac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	613b      	str	r3, [r7, #16]
}
 800bad2:	bf00      	nop
 800bad4:	bf00      	nop
 800bad6:	e7fd      	b.n	800bad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bad8:	4b3e      	ldr	r3, [pc, #248]	@ (800bbd4 <xPortStartScheduler+0x124>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a3f      	ldr	r2, [pc, #252]	@ (800bbdc <xPortStartScheduler+0x12c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d10b      	bne.n	800bafa <xPortStartScheduler+0x4a>
	__asm volatile
 800bae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	60fb      	str	r3, [r7, #12]
}
 800baf4:	bf00      	nop
 800baf6:	bf00      	nop
 800baf8:	e7fd      	b.n	800baf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bafa:	4b39      	ldr	r3, [pc, #228]	@ (800bbe0 <xPortStartScheduler+0x130>)
 800bafc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	22ff      	movs	r2, #255	@ 0xff
 800bb0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	4b31      	ldr	r3, [pc, #196]	@ (800bbe4 <xPortStartScheduler+0x134>)
 800bb20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb22:	4b31      	ldr	r3, [pc, #196]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb24:	2207      	movs	r2, #7
 800bb26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb28:	e009      	b.n	800bb3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bb2a:	4b2f      	ldr	r3, [pc, #188]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	4a2d      	ldr	r2, [pc, #180]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb34:	78fb      	ldrb	r3, [r7, #3]
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb3e:	78fb      	ldrb	r3, [r7, #3]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb46:	2b80      	cmp	r3, #128	@ 0x80
 800bb48:	d0ef      	beq.n	800bb2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb4a:	4b27      	ldr	r3, [pc, #156]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f1c3 0307 	rsb	r3, r3, #7
 800bb52:	2b04      	cmp	r3, #4
 800bb54:	d00b      	beq.n	800bb6e <xPortStartScheduler+0xbe>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	60bb      	str	r3, [r7, #8]
}
 800bb68:	bf00      	nop
 800bb6a:	bf00      	nop
 800bb6c:	e7fd      	b.n	800bb6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb6e:	4b1e      	ldr	r3, [pc, #120]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	021b      	lsls	r3, r3, #8
 800bb74:	4a1c      	ldr	r2, [pc, #112]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb78:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bb80:	4a19      	ldr	r2, [pc, #100]	@ (800bbe8 <xPortStartScheduler+0x138>)
 800bb82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb8c:	4b17      	ldr	r3, [pc, #92]	@ (800bbec <xPortStartScheduler+0x13c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a16      	ldr	r2, [pc, #88]	@ (800bbec <xPortStartScheduler+0x13c>)
 800bb92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bb96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb98:	4b14      	ldr	r3, [pc, #80]	@ (800bbec <xPortStartScheduler+0x13c>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a13      	ldr	r2, [pc, #76]	@ (800bbec <xPortStartScheduler+0x13c>)
 800bb9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bba2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bba4:	f000 f8da 	bl	800bd5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bba8:	4b11      	ldr	r3, [pc, #68]	@ (800bbf0 <xPortStartScheduler+0x140>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbae:	f000 f8f9 	bl	800bda4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbb2:	4b10      	ldr	r3, [pc, #64]	@ (800bbf4 <xPortStartScheduler+0x144>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a0f      	ldr	r2, [pc, #60]	@ (800bbf4 <xPortStartScheduler+0x144>)
 800bbb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bbbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbbe:	f7ff ff63 	bl	800ba88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbc2:	f001 fd41 	bl	800d648 <vTaskSwitchContext>
	prvTaskExitError();
 800bbc6:	f7ff ff17 	bl	800b9f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	e000ed00 	.word	0xe000ed00
 800bbd8:	410fc271 	.word	0x410fc271
 800bbdc:	410fc270 	.word	0x410fc270
 800bbe0:	e000e400 	.word	0xe000e400
 800bbe4:	2400a64c 	.word	0x2400a64c
 800bbe8:	2400a650 	.word	0x2400a650
 800bbec:	e000ed20 	.word	0xe000ed20
 800bbf0:	24000014 	.word	0x24000014
 800bbf4:	e000ef34 	.word	0xe000ef34

0800bbf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	607b      	str	r3, [r7, #4]
}
 800bc10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc12:	4b10      	ldr	r3, [pc, #64]	@ (800bc54 <vPortEnterCritical+0x5c>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	4a0e      	ldr	r2, [pc, #56]	@ (800bc54 <vPortEnterCritical+0x5c>)
 800bc1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc54 <vPortEnterCritical+0x5c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d110      	bne.n	800bc46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc24:	4b0c      	ldr	r3, [pc, #48]	@ (800bc58 <vPortEnterCritical+0x60>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00b      	beq.n	800bc46 <vPortEnterCritical+0x4e>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	603b      	str	r3, [r7, #0]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <vPortEnterCritical+0x4a>
	}
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	24000014 	.word	0x24000014
 800bc58:	e000ed04 	.word	0xe000ed04

0800bc5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc62:	4b12      	ldr	r3, [pc, #72]	@ (800bcac <vPortExitCritical+0x50>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10b      	bne.n	800bc82 <vPortExitCritical+0x26>
	__asm volatile
 800bc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	607b      	str	r3, [r7, #4]
}
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	e7fd      	b.n	800bc7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc82:	4b0a      	ldr	r3, [pc, #40]	@ (800bcac <vPortExitCritical+0x50>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	4a08      	ldr	r2, [pc, #32]	@ (800bcac <vPortExitCritical+0x50>)
 800bc8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc8c:	4b07      	ldr	r3, [pc, #28]	@ (800bcac <vPortExitCritical+0x50>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d105      	bne.n	800bca0 <vPortExitCritical+0x44>
 800bc94:	2300      	movs	r3, #0
 800bc96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr
 800bcac:	24000014 	.word	0x24000014

0800bcb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcb0:	f3ef 8009 	mrs	r0, PSP
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	4b15      	ldr	r3, [pc, #84]	@ (800bd10 <pxCurrentTCBConst>)
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	f01e 0f10 	tst.w	lr, #16
 800bcc0:	bf08      	it	eq
 800bcc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6010      	str	r0, [r2, #0]
 800bccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bcd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bcd4:	f380 8811 	msr	BASEPRI, r0
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f001 fcb2 	bl	800d648 <vTaskSwitchContext>
 800bce4:	f04f 0000 	mov.w	r0, #0
 800bce8:	f380 8811 	msr	BASEPRI, r0
 800bcec:	bc09      	pop	{r0, r3}
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	6808      	ldr	r0, [r1, #0]
 800bcf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf6:	f01e 0f10 	tst.w	lr, #16
 800bcfa:	bf08      	it	eq
 800bcfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd00:	f380 8809 	msr	PSP, r0
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	f3af 8000 	nop.w

0800bd10 <pxCurrentTCBConst>:
 800bd10:	2400a694 	.word	0x2400a694
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop

0800bd18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	607b      	str	r3, [r7, #4]
}
 800bd30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd32:	f001 fbcf 	bl	800d4d4 <xTaskIncrementTick>
 800bd36:	4603      	mov	r3, r0
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	@ (800bd58 <xPortSysTickHandler+0x40>)
 800bd3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	2300      	movs	r3, #0
 800bd46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	f383 8811 	msr	BASEPRI, r3
}
 800bd4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	e000ed04 	.word	0xe000ed04

0800bd5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd60:	4b0b      	ldr	r3, [pc, #44]	@ (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd62:	2200      	movs	r2, #0
 800bd64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	@ (800bd94 <vPortSetupTimerInterrupt+0x38>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd98 <vPortSetupTimerInterrupt+0x3c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a0a      	ldr	r2, [pc, #40]	@ (800bd9c <vPortSetupTimerInterrupt+0x40>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	4a09      	ldr	r2, [pc, #36]	@ (800bda0 <vPortSetupTimerInterrupt+0x44>)
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd7e:	4b04      	ldr	r3, [pc, #16]	@ (800bd90 <vPortSetupTimerInterrupt+0x34>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
}
 800bd84:	bf00      	nop
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e010 	.word	0xe000e010
 800bd94:	e000e018 	.word	0xe000e018
 800bd98:	24000018 	.word	0x24000018
 800bd9c:	10624dd3 	.word	0x10624dd3
 800bda0:	e000e014 	.word	0xe000e014

0800bda4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bda4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bdb4 <vPortEnableVFP+0x10>
 800bda8:	6801      	ldr	r1, [r0, #0]
 800bdaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bdae:	6001      	str	r1, [r0, #0]
 800bdb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdb2:	bf00      	nop
 800bdb4:	e000ed88 	.word	0xe000ed88

0800bdb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdbe:	f3ef 8305 	mrs	r3, IPSR
 800bdc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b0f      	cmp	r3, #15
 800bdc8:	d915      	bls.n	800bdf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdca:	4a18      	ldr	r2, [pc, #96]	@ (800be2c <vPortValidateInterruptPriority+0x74>)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bdd4:	4b16      	ldr	r3, [pc, #88]	@ (800be30 <vPortValidateInterruptPriority+0x78>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	7afa      	ldrb	r2, [r7, #11]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d20b      	bcs.n	800bdf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	607b      	str	r3, [r7, #4]
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	e7fd      	b.n	800bdf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdf6:	4b0f      	ldr	r3, [pc, #60]	@ (800be34 <vPortValidateInterruptPriority+0x7c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bdfe:	4b0e      	ldr	r3, [pc, #56]	@ (800be38 <vPortValidateInterruptPriority+0x80>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	429a      	cmp	r2, r3
 800be04:	d90b      	bls.n	800be1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0a:	f383 8811 	msr	BASEPRI, r3
 800be0e:	f3bf 8f6f 	isb	sy
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	603b      	str	r3, [r7, #0]
}
 800be18:	bf00      	nop
 800be1a:	bf00      	nop
 800be1c:	e7fd      	b.n	800be1a <vPortValidateInterruptPriority+0x62>
	}
 800be1e:	bf00      	nop
 800be20:	3714      	adds	r7, #20
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	e000e3f0 	.word	0xe000e3f0
 800be30:	2400a64c 	.word	0x2400a64c
 800be34:	e000ed0c 	.word	0xe000ed0c
 800be38:	2400a650 	.word	0x2400a650

0800be3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d10b      	bne.n	800be68 <xQueueGenericReset+0x2c>
	__asm volatile
 800be50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	60bb      	str	r3, [r7, #8]
}
 800be62:	bf00      	nop
 800be64:	bf00      	nop
 800be66:	e7fd      	b.n	800be64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be68:	f7ff fec6 	bl	800bbf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be74:	68f9      	ldr	r1, [r7, #12]
 800be76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be78:	fb01 f303 	mul.w	r3, r1, r3
 800be7c:	441a      	add	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be98:	3b01      	subs	r3, #1
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be9e:	fb01 f303 	mul.w	r3, r1, r3
 800bea2:	441a      	add	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	22ff      	movs	r2, #255	@ 0xff
 800beac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	22ff      	movs	r2, #255	@ 0xff
 800beb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d114      	bne.n	800bee8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01a      	beq.n	800befc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3310      	adds	r3, #16
 800beca:	4618      	mov	r0, r3
 800becc:	f001 fc74 	bl	800d7b8 <xTaskRemoveFromEventList>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d012      	beq.n	800befc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bed6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf0c <xQueueGenericReset+0xd0>)
 800bed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bedc:	601a      	str	r2, [r3, #0]
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	e009      	b.n	800befc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3310      	adds	r3, #16
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff fc9b 	bl	800b828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3324      	adds	r3, #36	@ 0x24
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff fc96 	bl	800b828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800befc:	f7ff feae 	bl	800bc5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf00:	2301      	movs	r3, #1
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	e000ed04 	.word	0xe000ed04

0800bf10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08e      	sub	sp, #56	@ 0x38
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10b      	bne.n	800bf3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	e7fd      	b.n	800bf38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10b      	bne.n	800bf5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	e7fd      	b.n	800bf56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <xQueueGenericCreateStatic+0x56>
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d001      	beq.n	800bf6a <xQueueGenericCreateStatic+0x5a>
 800bf66:	2301      	movs	r3, #1
 800bf68:	e000      	b.n	800bf6c <xQueueGenericCreateStatic+0x5c>
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10b      	bne.n	800bf88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bf70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf74:	f383 8811 	msr	BASEPRI, r3
 800bf78:	f3bf 8f6f 	isb	sy
 800bf7c:	f3bf 8f4f 	dsb	sy
 800bf80:	623b      	str	r3, [r7, #32]
}
 800bf82:	bf00      	nop
 800bf84:	bf00      	nop
 800bf86:	e7fd      	b.n	800bf84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d102      	bne.n	800bf94 <xQueueGenericCreateStatic+0x84>
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <xQueueGenericCreateStatic+0x88>
 800bf94:	2301      	movs	r3, #1
 800bf96:	e000      	b.n	800bf9a <xQueueGenericCreateStatic+0x8a>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d10b      	bne.n	800bfb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	61fb      	str	r3, [r7, #28]
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	e7fd      	b.n	800bfb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfb6:	2350      	movs	r3, #80	@ 0x50
 800bfb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b50      	cmp	r3, #80	@ 0x50
 800bfbe:	d00b      	beq.n	800bfd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	61bb      	str	r3, [r7, #24]
}
 800bfd2:	bf00      	nop
 800bfd4:	bf00      	nop
 800bfd6:	e7fd      	b.n	800bfd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d00d      	beq.n	800c000 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	4613      	mov	r3, r2
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	68b9      	ldr	r1, [r7, #8]
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 f840 	bl	800c080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c002:	4618      	mov	r0, r3
 800c004:	3730      	adds	r7, #48	@ 0x30
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b08a      	sub	sp, #40	@ 0x28
 800c00e:	af02      	add	r7, sp, #8
 800c010:	60f8      	str	r0, [r7, #12]
 800c012:	60b9      	str	r1, [r7, #8]
 800c014:	4613      	mov	r3, r2
 800c016:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10b      	bne.n	800c036 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	613b      	str	r3, [r7, #16]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	68ba      	ldr	r2, [r7, #8]
 800c03a:	fb02 f303 	mul.w	r3, r2, r3
 800c03e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	3350      	adds	r3, #80	@ 0x50
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fa01 	bl	800b44c <pvPortMalloc>
 800c04a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d011      	beq.n	800c076 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c052:	69bb      	ldr	r3, [r7, #24]
 800c054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	3350      	adds	r3, #80	@ 0x50
 800c05a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c064:	79fa      	ldrb	r2, [r7, #7]
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	4613      	mov	r3, r2
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f805 	bl	800c080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c076:	69bb      	ldr	r3, [r7, #24]
	}
 800c078:	4618      	mov	r0, r3
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d103      	bne.n	800c09c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	69ba      	ldr	r2, [r7, #24]
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	e002      	b.n	800c0a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	69b8      	ldr	r0, [r7, #24]
 800c0b2:	f7ff fec3 	bl	800be3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	78fa      	ldrb	r2, [r7, #3]
 800c0ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c0be:	bf00      	nop
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b08a      	sub	sp, #40	@ 0x28
 800c0ca:	af02      	add	r7, sp, #8
 800c0cc:	60f8      	str	r0, [r7, #12]
 800c0ce:	60b9      	str	r1, [r7, #8]
 800c0d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800c0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0dc:	f383 8811 	msr	BASEPRI, r3
 800c0e0:	f3bf 8f6f 	isb	sy
 800c0e4:	f3bf 8f4f 	dsb	sy
 800c0e8:	61bb      	str	r3, [r7, #24]
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	e7fd      	b.n	800c0ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d90b      	bls.n	800c110 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	617b      	str	r3, [r7, #20]
}
 800c10a:	bf00      	nop
 800c10c:	bf00      	nop
 800c10e:	e7fd      	b.n	800c10c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c110:	2302      	movs	r3, #2
 800c112:	9300      	str	r3, [sp, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	2100      	movs	r1, #0
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7ff fef8 	bl	800bf10 <xQueueGenericCreateStatic>
 800c120:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c12e:	69fb      	ldr	r3, [r7, #28]
	}
 800c130:	4618      	mov	r0, r3
 800c132:	3720      	adds	r7, #32
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10b      	bne.n	800c160 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	613b      	str	r3, [r7, #16]
}
 800c15a:	bf00      	nop
 800c15c:	bf00      	nop
 800c15e:	e7fd      	b.n	800c15c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d90b      	bls.n	800c180 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	60fb      	str	r3, [r7, #12]
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	e7fd      	b.n	800c17c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c180:	2202      	movs	r2, #2
 800c182:	2100      	movs	r1, #0
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff ff40 	bl	800c00a <xQueueGenericCreate>
 800c18a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c198:	697b      	ldr	r3, [r7, #20]
	}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3718      	adds	r7, #24
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b08e      	sub	sp, #56	@ 0x38
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
 800c1b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10b      	bne.n	800c1d8 <xQueueGenericSend+0x34>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1d2:	bf00      	nop
 800c1d4:	bf00      	nop
 800c1d6:	e7fd      	b.n	800c1d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d103      	bne.n	800c1e6 <xQueueGenericSend+0x42>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d101      	bne.n	800c1ea <xQueueGenericSend+0x46>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	e000      	b.n	800c1ec <xQueueGenericSend+0x48>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d10b      	bne.n	800c208 <xQueueGenericSend+0x64>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	e7fd      	b.n	800c204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d103      	bne.n	800c216 <xQueueGenericSend+0x72>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <xQueueGenericSend+0x76>
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <xQueueGenericSend+0x78>
 800c21a:	2300      	movs	r3, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10b      	bne.n	800c238 <xQueueGenericSend+0x94>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	623b      	str	r3, [r7, #32]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c238:	f001 fc84 	bl	800db44 <xTaskGetSchedulerState>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d102      	bne.n	800c248 <xQueueGenericSend+0xa4>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d101      	bne.n	800c24c <xQueueGenericSend+0xa8>
 800c248:	2301      	movs	r3, #1
 800c24a:	e000      	b.n	800c24e <xQueueGenericSend+0xaa>
 800c24c:	2300      	movs	r3, #0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10b      	bne.n	800c26a <xQueueGenericSend+0xc6>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	61fb      	str	r3, [r7, #28]
}
 800c264:	bf00      	nop
 800c266:	bf00      	nop
 800c268:	e7fd      	b.n	800c266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c26a:	f7ff fcc5 	bl	800bbf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c276:	429a      	cmp	r2, r3
 800c278:	d302      	bcc.n	800c280 <xQueueGenericSend+0xdc>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d129      	bne.n	800c2d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c286:	f000 fc6d 	bl	800cb64 <prvCopyDataToQueue>
 800c28a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d010      	beq.n	800c2b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c296:	3324      	adds	r3, #36	@ 0x24
 800c298:	4618      	mov	r0, r3
 800c29a:	f001 fa8d 	bl	800d7b8 <xTaskRemoveFromEventList>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d013      	beq.n	800c2cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2a4:	4b3f      	ldr	r3, [pc, #252]	@ (800c3a4 <xQueueGenericSend+0x200>)
 800c2a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	f3bf 8f6f 	isb	sy
 800c2b4:	e00a      	b.n	800c2cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d007      	beq.n	800c2cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2bc:	4b39      	ldr	r3, [pc, #228]	@ (800c3a4 <xQueueGenericSend+0x200>)
 800c2be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2cc:	f7ff fcc6 	bl	800bc5c <vPortExitCritical>
				return pdPASS;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e063      	b.n	800c39c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d103      	bne.n	800c2e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2da:	f7ff fcbf 	bl	800bc5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	e05c      	b.n	800c39c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d106      	bne.n	800c2f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2e8:	f107 0314 	add.w	r3, r7, #20
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f001 fac7 	bl	800d880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2f6:	f7ff fcb1 	bl	800bc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2fa:	f001 f82f 	bl	800d35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2fe:	f7ff fc7b 	bl	800bbf8 <vPortEnterCritical>
 800c302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c308:	b25b      	sxtb	r3, r3
 800c30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30e:	d103      	bne.n	800c318 <xQueueGenericSend+0x174>
 800c310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c31a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c31e:	b25b      	sxtb	r3, r3
 800c320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c324:	d103      	bne.n	800c32e <xQueueGenericSend+0x18a>
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	2200      	movs	r2, #0
 800c32a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c32e:	f7ff fc95 	bl	800bc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c332:	1d3a      	adds	r2, r7, #4
 800c334:	f107 0314 	add.w	r3, r7, #20
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f001 fab6 	bl	800d8ac <xTaskCheckForTimeOut>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d124      	bne.n	800c390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c348:	f000 fd04 	bl	800cd54 <prvIsQueueFull>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d018      	beq.n	800c384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c354:	3310      	adds	r3, #16
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	4611      	mov	r1, r2
 800c35a:	4618      	mov	r0, r3
 800c35c:	f001 f9da 	bl	800d714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c362:	f000 fc8f 	bl	800cc84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c366:	f001 f807 	bl	800d378 <xTaskResumeAll>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f47f af7c 	bne.w	800c26a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c372:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a4 <xQueueGenericSend+0x200>)
 800c374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	f3bf 8f4f 	dsb	sy
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	e772      	b.n	800c26a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c386:	f000 fc7d 	bl	800cc84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c38a:	f000 fff5 	bl	800d378 <xTaskResumeAll>
 800c38e:	e76c      	b.n	800c26a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c392:	f000 fc77 	bl	800cc84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c396:	f000 ffef 	bl	800d378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c39a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3738      	adds	r7, #56	@ 0x38
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	e000ed04 	.word	0xe000ed04

0800c3a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b090      	sub	sp, #64	@ 0x40
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10b      	bne.n	800c3d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d103      	bne.n	800c3e6 <xQueueGenericSendFromISR+0x3e>
 800c3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <xQueueGenericSendFromISR+0x42>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e000      	b.n	800c3ec <xQueueGenericSendFromISR+0x44>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10b      	bne.n	800c408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d103      	bne.n	800c416 <xQueueGenericSendFromISR+0x6e>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c412:	2b01      	cmp	r3, #1
 800c414:	d101      	bne.n	800c41a <xQueueGenericSendFromISR+0x72>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xQueueGenericSendFromISR+0x74>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10b      	bne.n	800c438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	623b      	str	r3, [r7, #32]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c438:	f7ff fcbe 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800c43c:	f3ef 8211 	mrs	r2, BASEPRI
 800c440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	61fa      	str	r2, [r7, #28]
 800c452:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c454:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c456:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c460:	429a      	cmp	r2, r3
 800c462:	d302      	bcc.n	800c46a <xQueueGenericSendFromISR+0xc2>
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	2b02      	cmp	r3, #2
 800c468:	d12f      	bne.n	800c4ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c478:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c480:	f000 fb70 	bl	800cb64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c484:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48c:	d112      	bne.n	800c4b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c492:	2b00      	cmp	r3, #0
 800c494:	d016      	beq.n	800c4c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	3324      	adds	r3, #36	@ 0x24
 800c49a:	4618      	mov	r0, r3
 800c49c:	f001 f98c 	bl	800d7b8 <xTaskRemoveFromEventList>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00e      	beq.n	800c4c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00b      	beq.n	800c4c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	601a      	str	r2, [r3, #0]
 800c4b2:	e007      	b.n	800c4c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	b25a      	sxtb	r2, r3
 800c4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c4c8:	e001      	b.n	800c4ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	f383 8811 	msr	BASEPRI, r3
}
 800c4d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3740      	adds	r7, #64	@ 0x40
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08e      	sub	sp, #56	@ 0x38
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10b      	bne.n	800c510 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c4f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fc:	f383 8811 	msr	BASEPRI, r3
 800c500:	f3bf 8f6f 	isb	sy
 800c504:	f3bf 8f4f 	dsb	sy
 800c508:	623b      	str	r3, [r7, #32]
}
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
 800c50e:	e7fd      	b.n	800c50c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00b      	beq.n	800c530 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	61fb      	str	r3, [r7, #28]
}
 800c52a:	bf00      	nop
 800c52c:	bf00      	nop
 800c52e:	e7fd      	b.n	800c52c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <xQueueGiveFromISR+0x5c>
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d101      	bne.n	800c544 <xQueueGiveFromISR+0x60>
 800c540:	2301      	movs	r3, #1
 800c542:	e000      	b.n	800c546 <xQueueGiveFromISR+0x62>
 800c544:	2300      	movs	r3, #0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10b      	bne.n	800c562 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	61bb      	str	r3, [r7, #24]
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	e7fd      	b.n	800c55e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c562:	f7ff fc29 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800c566:	f3ef 8211 	mrs	r2, BASEPRI
 800c56a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	617a      	str	r2, [r7, #20]
 800c57c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c57e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c580:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c586:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c58c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c58e:	429a      	cmp	r2, r3
 800c590:	d22b      	bcs.n	800c5ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c59e:	1c5a      	adds	r2, r3, #1
 800c5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c5a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ac:	d112      	bne.n	800c5d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d016      	beq.n	800c5e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	3324      	adds	r3, #36	@ 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 f8fc 	bl	800d7b8 <xTaskRemoveFromEventList>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00e      	beq.n	800c5e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00b      	beq.n	800c5e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	e007      	b.n	800c5e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c5d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5d8:	3301      	adds	r3, #1
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	b25a      	sxtb	r2, r3
 800c5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5e8:	e001      	b.n	800c5ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f383 8811 	msr	BASEPRI, r3
}
 800c5f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3738      	adds	r7, #56	@ 0x38
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08c      	sub	sp, #48	@ 0x30
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c610:	2300      	movs	r3, #0
 800c612:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10b      	bne.n	800c636 <xQueueReceive+0x32>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c622:	f383 8811 	msr	BASEPRI, r3
 800c626:	f3bf 8f6f 	isb	sy
 800c62a:	f3bf 8f4f 	dsb	sy
 800c62e:	623b      	str	r3, [r7, #32]
}
 800c630:	bf00      	nop
 800c632:	bf00      	nop
 800c634:	e7fd      	b.n	800c632 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d103      	bne.n	800c644 <xQueueReceive+0x40>
 800c63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <xQueueReceive+0x44>
 800c644:	2301      	movs	r3, #1
 800c646:	e000      	b.n	800c64a <xQueueReceive+0x46>
 800c648:	2300      	movs	r3, #0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <xQueueReceive+0x62>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	61fb      	str	r3, [r7, #28]
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	e7fd      	b.n	800c662 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c666:	f001 fa6d 	bl	800db44 <xTaskGetSchedulerState>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d102      	bne.n	800c676 <xQueueReceive+0x72>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <xQueueReceive+0x76>
 800c676:	2301      	movs	r3, #1
 800c678:	e000      	b.n	800c67c <xQueueReceive+0x78>
 800c67a:	2300      	movs	r3, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <xQueueReceive+0x94>
	__asm volatile
 800c680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	61bb      	str	r3, [r7, #24]
}
 800c692:	bf00      	nop
 800c694:	bf00      	nop
 800c696:	e7fd      	b.n	800c694 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c698:	f7ff faae 	bl	800bbf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d01f      	beq.n	800c6e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c6a8:	68b9      	ldr	r1, [r7, #8]
 800c6aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6ac:	f000 fac4 	bl	800cc38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	1e5a      	subs	r2, r3, #1
 800c6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00f      	beq.n	800c6e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c2:	3310      	adds	r3, #16
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f001 f877 	bl	800d7b8 <xTaskRemoveFromEventList>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d007      	beq.n	800c6e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c7c4 <xQueueReceive+0x1c0>)
 800c6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6e0:	f7ff fabc 	bl	800bc5c <vPortExitCritical>
				return pdPASS;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e069      	b.n	800c7bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d103      	bne.n	800c6f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6ee:	f7ff fab5 	bl	800bc5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e062      	b.n	800c7bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d106      	bne.n	800c70a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6fc:	f107 0310 	add.w	r3, r7, #16
 800c700:	4618      	mov	r0, r3
 800c702:	f001 f8bd 	bl	800d880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c706:	2301      	movs	r3, #1
 800c708:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c70a:	f7ff faa7 	bl	800bc5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c70e:	f000 fe25 	bl	800d35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c712:	f7ff fa71 	bl	800bbf8 <vPortEnterCritical>
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c71c:	b25b      	sxtb	r3, r3
 800c71e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c722:	d103      	bne.n	800c72c <xQueueReceive+0x128>
 800c724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c726:	2200      	movs	r2, #0
 800c728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c732:	b25b      	sxtb	r3, r3
 800c734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c738:	d103      	bne.n	800c742 <xQueueReceive+0x13e>
 800c73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c73c:	2200      	movs	r2, #0
 800c73e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c742:	f7ff fa8b 	bl	800bc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c746:	1d3a      	adds	r2, r7, #4
 800c748:	f107 0310 	add.w	r3, r7, #16
 800c74c:	4611      	mov	r1, r2
 800c74e:	4618      	mov	r0, r3
 800c750:	f001 f8ac 	bl	800d8ac <xTaskCheckForTimeOut>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d123      	bne.n	800c7a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c75a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c75c:	f000 fae4 	bl	800cd28 <prvIsQueueEmpty>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d017      	beq.n	800c796 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	3324      	adds	r3, #36	@ 0x24
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	4611      	mov	r1, r2
 800c76e:	4618      	mov	r0, r3
 800c770:	f000 ffd0 	bl	800d714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c776:	f000 fa85 	bl	800cc84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c77a:	f000 fdfd 	bl	800d378 <xTaskResumeAll>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d189      	bne.n	800c698 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c784:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c4 <xQueueReceive+0x1c0>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
 800c794:	e780      	b.n	800c698 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c798:	f000 fa74 	bl	800cc84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c79c:	f000 fdec 	bl	800d378 <xTaskResumeAll>
 800c7a0:	e77a      	b.n	800c698 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c7a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7a4:	f000 fa6e 	bl	800cc84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7a8:	f000 fde6 	bl	800d378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7ae:	f000 fabb 	bl	800cd28 <prvIsQueueEmpty>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	f43f af6f 	beq.w	800c698 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c7ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3730      	adds	r7, #48	@ 0x30
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	e000ed04 	.word	0xe000ed04

0800c7c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08e      	sub	sp, #56	@ 0x38
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d10b      	bne.n	800c7fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e8:	f383 8811 	msr	BASEPRI, r3
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	623b      	str	r3, [r7, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	bf00      	nop
 800c7fa:	e7fd      	b.n	800c7f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c808:	f383 8811 	msr	BASEPRI, r3
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	61fb      	str	r3, [r7, #28]
}
 800c816:	bf00      	nop
 800c818:	bf00      	nop
 800c81a:	e7fd      	b.n	800c818 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c81c:	f001 f992 	bl	800db44 <xTaskGetSchedulerState>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d102      	bne.n	800c82c <xQueueSemaphoreTake+0x64>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d101      	bne.n	800c830 <xQueueSemaphoreTake+0x68>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e000      	b.n	800c832 <xQueueSemaphoreTake+0x6a>
 800c830:	2300      	movs	r3, #0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10b      	bne.n	800c84e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c83a:	f383 8811 	msr	BASEPRI, r3
 800c83e:	f3bf 8f6f 	isb	sy
 800c842:	f3bf 8f4f 	dsb	sy
 800c846:	61bb      	str	r3, [r7, #24]
}
 800c848:	bf00      	nop
 800c84a:	bf00      	nop
 800c84c:	e7fd      	b.n	800c84a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c84e:	f7ff f9d3 	bl	800bbf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c856:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d024      	beq.n	800c8a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c864:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d104      	bne.n	800c878 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c86e:	f001 fae3 	bl	800de38 <pvTaskIncrementMutexHeldCount>
 800c872:	4602      	mov	r2, r0
 800c874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c876:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00f      	beq.n	800c8a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c882:	3310      	adds	r3, #16
 800c884:	4618      	mov	r0, r3
 800c886:	f000 ff97 	bl	800d7b8 <xTaskRemoveFromEventList>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d007      	beq.n	800c8a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c890:	4b54      	ldr	r3, [pc, #336]	@ (800c9e4 <xQueueSemaphoreTake+0x21c>)
 800c892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c8a0:	f7ff f9dc 	bl	800bc5c <vPortExitCritical>
				return pdPASS;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e098      	b.n	800c9da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d112      	bne.n	800c8d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	617b      	str	r3, [r7, #20]
}
 800c8c6:	bf00      	nop
 800c8c8:	bf00      	nop
 800c8ca:	e7fd      	b.n	800c8c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c8cc:	f7ff f9c6 	bl	800bc5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	e082      	b.n	800c9da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8da:	f107 030c 	add.w	r3, r7, #12
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 ffce 	bl	800d880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8e8:	f7ff f9b8 	bl	800bc5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8ec:	f000 fd36 	bl	800d35c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8f0:	f7ff f982 	bl	800bbf8 <vPortEnterCritical>
 800c8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8fa:	b25b      	sxtb	r3, r3
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d103      	bne.n	800c90a <xQueueSemaphoreTake+0x142>
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	2200      	movs	r2, #0
 800c906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c90a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c910:	b25b      	sxtb	r3, r3
 800c912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c916:	d103      	bne.n	800c920 <xQueueSemaphoreTake+0x158>
 800c918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c920:	f7ff f99c 	bl	800bc5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c924:	463a      	mov	r2, r7
 800c926:	f107 030c 	add.w	r3, r7, #12
 800c92a:	4611      	mov	r1, r2
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 ffbd 	bl	800d8ac <xTaskCheckForTimeOut>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d132      	bne.n	800c99e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c938:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c93a:	f000 f9f5 	bl	800cd28 <prvIsQueueEmpty>
 800c93e:	4603      	mov	r3, r0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d026      	beq.n	800c992 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d109      	bne.n	800c960 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c94c:	f7ff f954 	bl	800bbf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	4618      	mov	r0, r3
 800c956:	f001 f913 	bl	800db80 <xTaskPriorityInherit>
 800c95a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c95c:	f7ff f97e 	bl	800bc5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c962:	3324      	adds	r3, #36	@ 0x24
 800c964:	683a      	ldr	r2, [r7, #0]
 800c966:	4611      	mov	r1, r2
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fed3 	bl	800d714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c96e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c970:	f000 f988 	bl	800cc84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c974:	f000 fd00 	bl	800d378 <xTaskResumeAll>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f47f af67 	bne.w	800c84e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c980:	4b18      	ldr	r3, [pc, #96]	@ (800c9e4 <xQueueSemaphoreTake+0x21c>)
 800c982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c986:	601a      	str	r2, [r3, #0]
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	e75d      	b.n	800c84e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c994:	f000 f976 	bl	800cc84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c998:	f000 fcee 	bl	800d378 <xTaskResumeAll>
 800c99c:	e757      	b.n	800c84e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c99e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9a0:	f000 f970 	bl	800cc84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c9a4:	f000 fce8 	bl	800d378 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9aa:	f000 f9bd 	bl	800cd28 <prvIsQueueEmpty>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f43f af4c 	beq.w	800c84e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00d      	beq.n	800c9d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c9bc:	f7ff f91c 	bl	800bbf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c9c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c9c2:	f000 f8b7 	bl	800cb34 <prvGetDisinheritPriorityAfterTimeout>
 800c9c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f001 f9ae 	bl	800dd30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c9d4:	f7ff f942 	bl	800bc5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c9d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3738      	adds	r7, #56	@ 0x38
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	e000ed04 	.word	0xe000ed04

0800c9e8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08e      	sub	sp, #56	@ 0x38
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10b      	bne.n	800ca16 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca02:	f383 8811 	msr	BASEPRI, r3
 800ca06:	f3bf 8f6f 	isb	sy
 800ca0a:	f3bf 8f4f 	dsb	sy
 800ca0e:	623b      	str	r3, [r7, #32]
}
 800ca10:	bf00      	nop
 800ca12:	bf00      	nop
 800ca14:	e7fd      	b.n	800ca12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d103      	bne.n	800ca24 <xQueueReceiveFromISR+0x3c>
 800ca1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <xQueueReceiveFromISR+0x40>
 800ca24:	2301      	movs	r3, #1
 800ca26:	e000      	b.n	800ca2a <xQueueReceiveFromISR+0x42>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10b      	bne.n	800ca46 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	61fb      	str	r3, [r7, #28]
}
 800ca40:	bf00      	nop
 800ca42:	bf00      	nop
 800ca44:	e7fd      	b.n	800ca42 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca46:	f7ff f9b7 	bl	800bdb8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca4a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca52:	f383 8811 	msr	BASEPRI, r3
 800ca56:	f3bf 8f6f 	isb	sy
 800ca5a:	f3bf 8f4f 	dsb	sy
 800ca5e:	61ba      	str	r2, [r7, #24]
 800ca60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ca62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca64:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d02f      	beq.n	800cad2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ca7c:	68b9      	ldr	r1, [r7, #8]
 800ca7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ca80:	f000 f8da 	bl	800cc38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ca84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca86:	1e5a      	subs	r2, r3, #1
 800ca88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ca8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ca90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca94:	d112      	bne.n	800cabc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d016      	beq.n	800cacc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa0:	3310      	adds	r3, #16
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fe88 	bl	800d7b8 <xTaskRemoveFromEventList>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00e      	beq.n	800cacc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	e007      	b.n	800cacc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac0:	3301      	adds	r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	b25a      	sxtb	r2, r3
 800cac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cac8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800cacc:	2301      	movs	r3, #1
 800cace:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad0:	e001      	b.n	800cad6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	f383 8811 	msr	BASEPRI, r3
}
 800cae0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3738      	adds	r7, #56	@ 0x38
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10b      	bne.n	800cb16 <vQueueDelete+0x2a>
	__asm volatile
 800cafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb02:	f383 8811 	msr	BASEPRI, r3
 800cb06:	f3bf 8f6f 	isb	sy
 800cb0a:	f3bf 8f4f 	dsb	sy
 800cb0e:	60bb      	str	r3, [r7, #8]
}
 800cb10:	bf00      	nop
 800cb12:	bf00      	nop
 800cb14:	e7fd      	b.n	800cb12 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f000 f95e 	bl	800cdd8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d102      	bne.n	800cb2c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7fe fd5e 	bl	800b5e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cb2c:	bf00      	nop
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d006      	beq.n	800cb52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e001      	b.n	800cb56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cb52:	2300      	movs	r3, #0
 800cb54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cb56:	68fb      	ldr	r3, [r7, #12]
	}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10d      	bne.n	800cb9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d14d      	bne.n	800cc26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f001 f85e 	bl	800dc50 <xTaskPriorityDisinherit>
 800cb94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	609a      	str	r2, [r3, #8]
 800cb9c:	e043      	b.n	800cc26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d119      	bne.n	800cbd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6858      	ldr	r0, [r3, #4]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbac:	461a      	mov	r2, r3
 800cbae:	68b9      	ldr	r1, [r7, #8]
 800cbb0:	f01e fd07 	bl	802b5c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	685a      	ldr	r2, [r3, #4]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbbc:	441a      	add	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d32b      	bcc.n	800cc26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	605a      	str	r2, [r3, #4]
 800cbd6:	e026      	b.n	800cc26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	68d8      	ldr	r0, [r3, #12]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	68b9      	ldr	r1, [r7, #8]
 800cbe4:	f01e fced 	bl	802b5c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	68da      	ldr	r2, [r3, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf0:	425b      	negs	r3, r3
 800cbf2:	441a      	add	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d207      	bcs.n	800cc14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0c:	425b      	negs	r3, r3
 800cc0e:	441a      	add	r2, r3
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d105      	bne.n	800cc26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d002      	beq.n	800cc26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	3b01      	subs	r3, #1
 800cc24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cc2e:	697b      	ldr	r3, [r7, #20]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d018      	beq.n	800cc7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc52:	441a      	add	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68da      	ldr	r2, [r3, #12]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d303      	bcc.n	800cc6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68d9      	ldr	r1, [r3, #12]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc74:	461a      	mov	r2, r3
 800cc76:	6838      	ldr	r0, [r7, #0]
 800cc78:	f01e fca3 	bl	802b5c2 <memcpy>
	}
}
 800cc7c:	bf00      	nop
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b084      	sub	sp, #16
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc8c:	f7fe ffb4 	bl	800bbf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc98:	e011      	b.n	800ccbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d012      	beq.n	800ccc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3324      	adds	r3, #36	@ 0x24
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 fd86 	bl	800d7b8 <xTaskRemoveFromEventList>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ccb2:	f000 fe5f 	bl	800d974 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	dce9      	bgt.n	800cc9a <prvUnlockQueue+0x16>
 800ccc6:	e000      	b.n	800ccca <prvUnlockQueue+0x46>
					break;
 800ccc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	22ff      	movs	r2, #255	@ 0xff
 800ccce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ccd2:	f7fe ffc3 	bl	800bc5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccd6:	f7fe ff8f 	bl	800bbf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cce2:	e011      	b.n	800cd08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	691b      	ldr	r3, [r3, #16]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d012      	beq.n	800cd12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3310      	adds	r3, #16
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 fd61 	bl	800d7b8 <xTaskRemoveFromEventList>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ccfc:	f000 fe3a 	bl	800d974 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	3b01      	subs	r3, #1
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	dce9      	bgt.n	800cce4 <prvUnlockQueue+0x60>
 800cd10:	e000      	b.n	800cd14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	22ff      	movs	r2, #255	@ 0xff
 800cd18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cd1c:	f7fe ff9e 	bl	800bc5c <vPortExitCritical>
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd30:	f7fe ff62 	bl	800bbf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d102      	bne.n	800cd42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	60fb      	str	r3, [r7, #12]
 800cd40:	e001      	b.n	800cd46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd46:	f7fe ff89 	bl	800bc5c <vPortExitCritical>

	return xReturn;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd5c:	f7fe ff4c 	bl	800bbf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d102      	bne.n	800cd72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e001      	b.n	800cd76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd76:	f7fe ff71 	bl	800bc5c <vPortExitCritical>

	return xReturn;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
 800cd8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd8e:	2300      	movs	r3, #0
 800cd90:	60fb      	str	r3, [r7, #12]
 800cd92:	e014      	b.n	800cdbe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd94:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd4 <vQueueAddToRegistry+0x50>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10b      	bne.n	800cdb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cda0:	490c      	ldr	r1, [pc, #48]	@ (800cdd4 <vQueueAddToRegistry+0x50>)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	683a      	ldr	r2, [r7, #0]
 800cda6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cdaa:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd4 <vQueueAddToRegistry+0x50>)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	4413      	add	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cdb6:	e006      	b.n	800cdc6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	60fb      	str	r3, [r7, #12]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b07      	cmp	r3, #7
 800cdc2:	d9e7      	bls.n	800cd94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop
 800cdc8:	3714      	adds	r7, #20
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	2400a654 	.word	0x2400a654

0800cdd8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cde0:	2300      	movs	r3, #0
 800cde2:	60fb      	str	r3, [r7, #12]
 800cde4:	e016      	b.n	800ce14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cde6:	4a10      	ldr	r2, [pc, #64]	@ (800ce28 <vQueueUnregisterQueue+0x50>)
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	4413      	add	r3, r2
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d10b      	bne.n	800ce0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cdf6:	4a0c      	ldr	r2, [pc, #48]	@ (800ce28 <vQueueUnregisterQueue+0x50>)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ce00:	4a09      	ldr	r2, [pc, #36]	@ (800ce28 <vQueueUnregisterQueue+0x50>)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	4413      	add	r3, r2
 800ce08:	2200      	movs	r2, #0
 800ce0a:	605a      	str	r2, [r3, #4]
				break;
 800ce0c:	e006      	b.n	800ce1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3301      	adds	r3, #1
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2b07      	cmp	r3, #7
 800ce18:	d9e5      	bls.n	800cde6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ce1a:	bf00      	nop
 800ce1c:	bf00      	nop
 800ce1e:	3714      	adds	r7, #20
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr
 800ce28:	2400a654 	.word	0x2400a654

0800ce2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ce3c:	f7fe fedc 	bl	800bbf8 <vPortEnterCritical>
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ce46:	b25b      	sxtb	r3, r3
 800ce48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce4c:	d103      	bne.n	800ce56 <vQueueWaitForMessageRestricted+0x2a>
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ce5c:	b25b      	sxtb	r3, r3
 800ce5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce62:	d103      	bne.n	800ce6c <vQueueWaitForMessageRestricted+0x40>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce6c:	f7fe fef6 	bl	800bc5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	3324      	adds	r3, #36	@ 0x24
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f000 fc6d 	bl	800d760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	f7ff fefc 	bl	800cc84 <prvUnlockQueue>
	}
 800ce8c:	bf00      	nop
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b08e      	sub	sp, #56	@ 0x38
 800ce98:	af04      	add	r7, sp, #16
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
 800cea0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10b      	bne.n	800cec0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceac:	f383 8811 	msr	BASEPRI, r3
 800ceb0:	f3bf 8f6f 	isb	sy
 800ceb4:	f3bf 8f4f 	dsb	sy
 800ceb8:	623b      	str	r3, [r7, #32]
}
 800ceba:	bf00      	nop
 800cebc:	bf00      	nop
 800cebe:	e7fd      	b.n	800cebc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10b      	bne.n	800cede <xTaskCreateStatic+0x4a>
	__asm volatile
 800cec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceca:	f383 8811 	msr	BASEPRI, r3
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	f3bf 8f4f 	dsb	sy
 800ced6:	61fb      	str	r3, [r7, #28]
}
 800ced8:	bf00      	nop
 800ceda:	bf00      	nop
 800cedc:	e7fd      	b.n	800ceda <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cede:	23a8      	movs	r3, #168	@ 0xa8
 800cee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	2ba8      	cmp	r3, #168	@ 0xa8
 800cee6:	d00b      	beq.n	800cf00 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	61bb      	str	r3, [r7, #24]
}
 800cefa:	bf00      	nop
 800cefc:	bf00      	nop
 800cefe:	e7fd      	b.n	800cefc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d01e      	beq.n	800cf46 <xTaskCreateStatic+0xb2>
 800cf08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d01b      	beq.n	800cf46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf20:	2300      	movs	r3, #0
 800cf22:	9303      	str	r3, [sp, #12]
 800cf24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf26:	9302      	str	r3, [sp, #8]
 800cf28:	f107 0314 	add.w	r3, r7, #20
 800cf2c:	9301      	str	r3, [sp, #4]
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f000 f851 	bl	800cfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf40:	f000 f8f6 	bl	800d130 <prvAddNewTaskToReadyList>
 800cf44:	e001      	b.n	800cf4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf4a:	697b      	ldr	r3, [r7, #20]
	}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3728      	adds	r7, #40	@ 0x28
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b08c      	sub	sp, #48	@ 0x30
 800cf58:	af04      	add	r7, sp, #16
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	4613      	mov	r3, r2
 800cf62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cf64:	88fb      	ldrh	r3, [r7, #6]
 800cf66:	009b      	lsls	r3, r3, #2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fa6f 	bl	800b44c <pvPortMalloc>
 800cf6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00e      	beq.n	800cf94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf76:	20a8      	movs	r0, #168	@ 0xa8
 800cf78:	f7fe fa68 	bl	800b44c <pvPortMalloc>
 800cf7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf8a:	e005      	b.n	800cf98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf8c:	6978      	ldr	r0, [r7, #20]
 800cf8e:	f7fe fb2b 	bl	800b5e8 <vPortFree>
 800cf92:	e001      	b.n	800cf98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d017      	beq.n	800cfce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cfa6:	88fa      	ldrh	r2, [r7, #6]
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	9303      	str	r3, [sp, #12]
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	9302      	str	r3, [sp, #8]
 800cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb2:	9301      	str	r3, [sp, #4]
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	68b9      	ldr	r1, [r7, #8]
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 f80f 	bl	800cfe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cfc2:	69f8      	ldr	r0, [r7, #28]
 800cfc4:	f000 f8b4 	bl	800d130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	61bb      	str	r3, [r7, #24]
 800cfcc:	e002      	b.n	800cfd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cfce:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cfd4:	69bb      	ldr	r3, [r7, #24]
	}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3720      	adds	r7, #32
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b088      	sub	sp, #32
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
 800cfec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	461a      	mov	r2, r3
 800cff8:	21a5      	movs	r1, #165	@ 0xa5
 800cffa:	f01e f9bc 	bl	802b376 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d000:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d002:	6879      	ldr	r1, [r7, #4]
 800d004:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d008:	440b      	add	r3, r1
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	f003 0307 	and.w	r3, r3, #7
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d00b      	beq.n	800d03a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	617b      	str	r3, [r7, #20]
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop
 800d038:	e7fd      	b.n	800d036 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d01f      	beq.n	800d080 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d040:	2300      	movs	r3, #0
 800d042:	61fb      	str	r3, [r7, #28]
 800d044:	e012      	b.n	800d06c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	4413      	add	r3, r2
 800d04c:	7819      	ldrb	r1, [r3, #0]
 800d04e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	4413      	add	r3, r2
 800d054:	3334      	adds	r3, #52	@ 0x34
 800d056:	460a      	mov	r2, r1
 800d058:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	4413      	add	r3, r2
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d006      	beq.n	800d074 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	3301      	adds	r3, #1
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	2b0f      	cmp	r3, #15
 800d070:	d9e9      	bls.n	800d046 <prvInitialiseNewTask+0x66>
 800d072:	e000      	b.n	800d076 <prvInitialiseNewTask+0x96>
			{
				break;
 800d074:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d07e:	e003      	b.n	800d088 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08a:	2b37      	cmp	r3, #55	@ 0x37
 800d08c:	d901      	bls.n	800d092 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d08e:	2337      	movs	r3, #55	@ 0x37
 800d090:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d096:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d09a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d09c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fbdd 	bl	800b868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b0:	3318      	adds	r3, #24
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe fbd8 	bl	800b868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0cc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	3354      	adds	r3, #84	@ 0x54
 800d0e2:	224c      	movs	r2, #76	@ 0x4c
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f01e f945 	bl	802b376 <memset>
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ee:	4a0d      	ldr	r2, [pc, #52]	@ (800d124 <prvInitialiseNewTask+0x144>)
 800d0f0:	659a      	str	r2, [r3, #88]	@ 0x58
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f4:	4a0c      	ldr	r2, [pc, #48]	@ (800d128 <prvInitialiseNewTask+0x148>)
 800d0f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0fa:	4a0c      	ldr	r2, [pc, #48]	@ (800d12c <prvInitialiseNewTask+0x14c>)
 800d0fc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	68f9      	ldr	r1, [r7, #12]
 800d102:	69b8      	ldr	r0, [r7, #24]
 800d104:	f7fe fc44 	bl	800b990 <pxPortInitialiseStack>
 800d108:	4602      	mov	r2, r0
 800d10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d11a:	bf00      	nop
 800d11c:	3720      	adds	r7, #32
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	2400b9d0 	.word	0x2400b9d0
 800d128:	2400ba38 	.word	0x2400ba38
 800d12c:	2400baa0 	.word	0x2400baa0

0800d130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d138:	f7fe fd5e 	bl	800bbf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d13c:	4b2d      	ldr	r3, [pc, #180]	@ (800d1f4 <prvAddNewTaskToReadyList+0xc4>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3301      	adds	r3, #1
 800d142:	4a2c      	ldr	r2, [pc, #176]	@ (800d1f4 <prvAddNewTaskToReadyList+0xc4>)
 800d144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d146:	4b2c      	ldr	r3, [pc, #176]	@ (800d1f8 <prvAddNewTaskToReadyList+0xc8>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d109      	bne.n	800d162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d14e:	4a2a      	ldr	r2, [pc, #168]	@ (800d1f8 <prvAddNewTaskToReadyList+0xc8>)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d154:	4b27      	ldr	r3, [pc, #156]	@ (800d1f4 <prvAddNewTaskToReadyList+0xc4>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d110      	bne.n	800d17e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d15c:	f000 fc2e 	bl	800d9bc <prvInitialiseTaskLists>
 800d160:	e00d      	b.n	800d17e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d162:	4b26      	ldr	r3, [pc, #152]	@ (800d1fc <prvAddNewTaskToReadyList+0xcc>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d109      	bne.n	800d17e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d16a:	4b23      	ldr	r3, [pc, #140]	@ (800d1f8 <prvAddNewTaskToReadyList+0xc8>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d174:	429a      	cmp	r2, r3
 800d176:	d802      	bhi.n	800d17e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d178:	4a1f      	ldr	r2, [pc, #124]	@ (800d1f8 <prvAddNewTaskToReadyList+0xc8>)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d17e:	4b20      	ldr	r3, [pc, #128]	@ (800d200 <prvAddNewTaskToReadyList+0xd0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	3301      	adds	r3, #1
 800d184:	4a1e      	ldr	r2, [pc, #120]	@ (800d200 <prvAddNewTaskToReadyList+0xd0>)
 800d186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d188:	4b1d      	ldr	r3, [pc, #116]	@ (800d200 <prvAddNewTaskToReadyList+0xd0>)
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d194:	4b1b      	ldr	r3, [pc, #108]	@ (800d204 <prvAddNewTaskToReadyList+0xd4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d903      	bls.n	800d1a4 <prvAddNewTaskToReadyList+0x74>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a0:	4a18      	ldr	r2, [pc, #96]	@ (800d204 <prvAddNewTaskToReadyList+0xd4>)
 800d1a2:	6013      	str	r3, [r2, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4a15      	ldr	r2, [pc, #84]	@ (800d208 <prvAddNewTaskToReadyList+0xd8>)
 800d1b2:	441a      	add	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	f7fe fb61 	bl	800b882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d1c0:	f7fe fd4c 	bl	800bc5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800d1fc <prvAddNewTaskToReadyList+0xcc>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00e      	beq.n	800d1ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <prvAddNewTaskToReadyList+0xc8>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d207      	bcs.n	800d1ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d1da:	4b0c      	ldr	r3, [pc, #48]	@ (800d20c <prvAddNewTaskToReadyList+0xdc>)
 800d1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	f3bf 8f4f 	dsb	sy
 800d1e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	2400ab68 	.word	0x2400ab68
 800d1f8:	2400a694 	.word	0x2400a694
 800d1fc:	2400ab74 	.word	0x2400ab74
 800d200:	2400ab84 	.word	0x2400ab84
 800d204:	2400ab70 	.word	0x2400ab70
 800d208:	2400a698 	.word	0x2400a698
 800d20c:	e000ed04 	.word	0xe000ed04

0800d210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d018      	beq.n	800d254 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d222:	4b14      	ldr	r3, [pc, #80]	@ (800d274 <vTaskDelay+0x64>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <vTaskDelay+0x32>
	__asm volatile
 800d22a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	60bb      	str	r3, [r7, #8]
}
 800d23c:	bf00      	nop
 800d23e:	bf00      	nop
 800d240:	e7fd      	b.n	800d23e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d242:	f000 f88b 	bl	800d35c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d246:	2100      	movs	r1, #0
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fe09 	bl	800de60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d24e:	f000 f893 	bl	800d378 <xTaskResumeAll>
 800d252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d107      	bne.n	800d26a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d25a:	4b07      	ldr	r3, [pc, #28]	@ (800d278 <vTaskDelay+0x68>)
 800d25c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d260:	601a      	str	r2, [r3, #0]
 800d262:	f3bf 8f4f 	dsb	sy
 800d266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d26a:	bf00      	nop
 800d26c:	3710      	adds	r7, #16
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	2400ab90 	.word	0x2400ab90
 800d278:	e000ed04 	.word	0xe000ed04

0800d27c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	@ 0x28
 800d280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d28a:	463a      	mov	r2, r7
 800d28c:	1d39      	adds	r1, r7, #4
 800d28e:	f107 0308 	add.w	r3, r7, #8
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe f8a6 	bl	800b3e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	9202      	str	r2, [sp, #8]
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	460a      	mov	r2, r1
 800d2aa:	4924      	ldr	r1, [pc, #144]	@ (800d33c <vTaskStartScheduler+0xc0>)
 800d2ac:	4824      	ldr	r0, [pc, #144]	@ (800d340 <vTaskStartScheduler+0xc4>)
 800d2ae:	f7ff fdf1 	bl	800ce94 <xTaskCreateStatic>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	4a23      	ldr	r2, [pc, #140]	@ (800d344 <vTaskStartScheduler+0xc8>)
 800d2b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d2b8:	4b22      	ldr	r3, [pc, #136]	@ (800d344 <vTaskStartScheduler+0xc8>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	617b      	str	r3, [r7, #20]
 800d2c4:	e001      	b.n	800d2ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d102      	bne.n	800d2d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d2d0:	f000 fe1a 	bl	800df08 <xTimerCreateTimerTask>
 800d2d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d11b      	bne.n	800d314 <vTaskStartScheduler+0x98>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	613b      	str	r3, [r7, #16]
}
 800d2ee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d2f0:	4b15      	ldr	r3, [pc, #84]	@ (800d348 <vTaskStartScheduler+0xcc>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	3354      	adds	r3, #84	@ 0x54
 800d2f6:	4a15      	ldr	r2, [pc, #84]	@ (800d34c <vTaskStartScheduler+0xd0>)
 800d2f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d2fa:	4b15      	ldr	r3, [pc, #84]	@ (800d350 <vTaskStartScheduler+0xd4>)
 800d2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d302:	4b14      	ldr	r3, [pc, #80]	@ (800d354 <vTaskStartScheduler+0xd8>)
 800d304:	2201      	movs	r2, #1
 800d306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d308:	4b13      	ldr	r3, [pc, #76]	@ (800d358 <vTaskStartScheduler+0xdc>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d30e:	f7fe fbcf 	bl	800bab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d312:	e00f      	b.n	800d334 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31a:	d10b      	bne.n	800d334 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	60fb      	str	r3, [r7, #12]
}
 800d32e:	bf00      	nop
 800d330:	bf00      	nop
 800d332:	e7fd      	b.n	800d330 <vTaskStartScheduler+0xb4>
}
 800d334:	bf00      	nop
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0802cd10 	.word	0x0802cd10
 800d340:	0800d98d 	.word	0x0800d98d
 800d344:	2400ab8c 	.word	0x2400ab8c
 800d348:	2400a694 	.word	0x2400a694
 800d34c:	240000d8 	.word	0x240000d8
 800d350:	2400ab88 	.word	0x2400ab88
 800d354:	2400ab74 	.word	0x2400ab74
 800d358:	2400ab6c 	.word	0x2400ab6c

0800d35c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d35c:	b480      	push	{r7}
 800d35e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d360:	4b04      	ldr	r3, [pc, #16]	@ (800d374 <vTaskSuspendAll+0x18>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3301      	adds	r3, #1
 800d366:	4a03      	ldr	r2, [pc, #12]	@ (800d374 <vTaskSuspendAll+0x18>)
 800d368:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d36a:	bf00      	nop
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	2400ab90 	.word	0x2400ab90

0800d378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d382:	2300      	movs	r3, #0
 800d384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d386:	4b42      	ldr	r3, [pc, #264]	@ (800d490 <xTaskResumeAll+0x118>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d10b      	bne.n	800d3a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	603b      	str	r3, [r7, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	bf00      	nop
 800d3a4:	e7fd      	b.n	800d3a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d3a6:	f7fe fc27 	bl	800bbf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3aa:	4b39      	ldr	r3, [pc, #228]	@ (800d490 <xTaskResumeAll+0x118>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	4a37      	ldr	r2, [pc, #220]	@ (800d490 <xTaskResumeAll+0x118>)
 800d3b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b4:	4b36      	ldr	r3, [pc, #216]	@ (800d490 <xTaskResumeAll+0x118>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d162      	bne.n	800d482 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3bc:	4b35      	ldr	r3, [pc, #212]	@ (800d494 <xTaskResumeAll+0x11c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d05e      	beq.n	800d482 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3c4:	e02f      	b.n	800d426 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c6:	4b34      	ldr	r3, [pc, #208]	@ (800d498 <xTaskResumeAll+0x120>)
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3318      	adds	r3, #24
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fe fab2 	bl	800b93c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe faad 	bl	800b93c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3e6:	4b2d      	ldr	r3, [pc, #180]	@ (800d49c <xTaskResumeAll+0x124>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d903      	bls.n	800d3f6 <xTaskResumeAll+0x7e>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800d49c <xTaskResumeAll+0x124>)
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	009b      	lsls	r3, r3, #2
 800d3fe:	4413      	add	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4a27      	ldr	r2, [pc, #156]	@ (800d4a0 <xTaskResumeAll+0x128>)
 800d404:	441a      	add	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fe fa38 	bl	800b882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d416:	4b23      	ldr	r3, [pc, #140]	@ (800d4a4 <xTaskResumeAll+0x12c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d302      	bcc.n	800d426 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d420:	4b21      	ldr	r3, [pc, #132]	@ (800d4a8 <xTaskResumeAll+0x130>)
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d426:	4b1c      	ldr	r3, [pc, #112]	@ (800d498 <xTaskResumeAll+0x120>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1cb      	bne.n	800d3c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d434:	f000 fb66 	bl	800db04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d438:	4b1c      	ldr	r3, [pc, #112]	@ (800d4ac <xTaskResumeAll+0x134>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d010      	beq.n	800d466 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d444:	f000 f846 	bl	800d4d4 <xTaskIncrementTick>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d002      	beq.n	800d454 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d44e:	4b16      	ldr	r3, [pc, #88]	@ (800d4a8 <xTaskResumeAll+0x130>)
 800d450:	2201      	movs	r2, #1
 800d452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	3b01      	subs	r3, #1
 800d458:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1f1      	bne.n	800d444 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d460:	4b12      	ldr	r3, [pc, #72]	@ (800d4ac <xTaskResumeAll+0x134>)
 800d462:	2200      	movs	r2, #0
 800d464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d466:	4b10      	ldr	r3, [pc, #64]	@ (800d4a8 <xTaskResumeAll+0x130>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d009      	beq.n	800d482 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d46e:	2301      	movs	r3, #1
 800d470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d472:	4b0f      	ldr	r3, [pc, #60]	@ (800d4b0 <xTaskResumeAll+0x138>)
 800d474:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d482:	f7fe fbeb 	bl	800bc5c <vPortExitCritical>

	return xAlreadyYielded;
 800d486:	68bb      	ldr	r3, [r7, #8]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	2400ab90 	.word	0x2400ab90
 800d494:	2400ab68 	.word	0x2400ab68
 800d498:	2400ab28 	.word	0x2400ab28
 800d49c:	2400ab70 	.word	0x2400ab70
 800d4a0:	2400a698 	.word	0x2400a698
 800d4a4:	2400a694 	.word	0x2400a694
 800d4a8:	2400ab7c 	.word	0x2400ab7c
 800d4ac:	2400ab78 	.word	0x2400ab78
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4ba:	4b05      	ldr	r3, [pc, #20]	@ (800d4d0 <xTaskGetTickCount+0x1c>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d4c0:	687b      	ldr	r3, [r7, #4]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr
 800d4ce:	bf00      	nop
 800d4d0:	2400ab6c 	.word	0x2400ab6c

0800d4d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4de:	4b4f      	ldr	r3, [pc, #316]	@ (800d61c <xTaskIncrementTick+0x148>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 8090 	bne.w	800d608 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d4e8:	4b4d      	ldr	r3, [pc, #308]	@ (800d620 <xTaskIncrementTick+0x14c>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d4f0:	4a4b      	ldr	r2, [pc, #300]	@ (800d620 <xTaskIncrementTick+0x14c>)
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d121      	bne.n	800d540 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d4fc:	4b49      	ldr	r3, [pc, #292]	@ (800d624 <xTaskIncrementTick+0x150>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00b      	beq.n	800d51e <xTaskIncrementTick+0x4a>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d50a:	f383 8811 	msr	BASEPRI, r3
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	f3bf 8f4f 	dsb	sy
 800d516:	603b      	str	r3, [r7, #0]
}
 800d518:	bf00      	nop
 800d51a:	bf00      	nop
 800d51c:	e7fd      	b.n	800d51a <xTaskIncrementTick+0x46>
 800d51e:	4b41      	ldr	r3, [pc, #260]	@ (800d624 <xTaskIncrementTick+0x150>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	60fb      	str	r3, [r7, #12]
 800d524:	4b40      	ldr	r3, [pc, #256]	@ (800d628 <xTaskIncrementTick+0x154>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a3e      	ldr	r2, [pc, #248]	@ (800d624 <xTaskIncrementTick+0x150>)
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	4a3e      	ldr	r2, [pc, #248]	@ (800d628 <xTaskIncrementTick+0x154>)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6013      	str	r3, [r2, #0]
 800d532:	4b3e      	ldr	r3, [pc, #248]	@ (800d62c <xTaskIncrementTick+0x158>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3301      	adds	r3, #1
 800d538:	4a3c      	ldr	r2, [pc, #240]	@ (800d62c <xTaskIncrementTick+0x158>)
 800d53a:	6013      	str	r3, [r2, #0]
 800d53c:	f000 fae2 	bl	800db04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d540:	4b3b      	ldr	r3, [pc, #236]	@ (800d630 <xTaskIncrementTick+0x15c>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	693a      	ldr	r2, [r7, #16]
 800d546:	429a      	cmp	r2, r3
 800d548:	d349      	bcc.n	800d5de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d54a:	4b36      	ldr	r3, [pc, #216]	@ (800d624 <xTaskIncrementTick+0x150>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d104      	bne.n	800d55e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d554:	4b36      	ldr	r3, [pc, #216]	@ (800d630 <xTaskIncrementTick+0x15c>)
 800d556:	f04f 32ff 	mov.w	r2, #4294967295
 800d55a:	601a      	str	r2, [r3, #0]
					break;
 800d55c:	e03f      	b.n	800d5de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d55e:	4b31      	ldr	r3, [pc, #196]	@ (800d624 <xTaskIncrementTick+0x150>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d56e:	693a      	ldr	r2, [r7, #16]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	429a      	cmp	r2, r3
 800d574:	d203      	bcs.n	800d57e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d576:	4a2e      	ldr	r2, [pc, #184]	@ (800d630 <xTaskIncrementTick+0x15c>)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d57c:	e02f      	b.n	800d5de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	3304      	adds	r3, #4
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe f9da 	bl	800b93c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d004      	beq.n	800d59a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	3318      	adds	r3, #24
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe f9d1 	bl	800b93c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d59e:	4b25      	ldr	r3, [pc, #148]	@ (800d634 <xTaskIncrementTick+0x160>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d903      	bls.n	800d5ae <xTaskIncrementTick+0xda>
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5aa:	4a22      	ldr	r2, [pc, #136]	@ (800d634 <xTaskIncrementTick+0x160>)
 800d5ac:	6013      	str	r3, [r2, #0]
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b2:	4613      	mov	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	4413      	add	r3, r2
 800d5b8:	009b      	lsls	r3, r3, #2
 800d5ba:	4a1f      	ldr	r2, [pc, #124]	@ (800d638 <xTaskIncrementTick+0x164>)
 800d5bc:	441a      	add	r2, r3
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	f7fe f95c 	bl	800b882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5ce:	4b1b      	ldr	r3, [pc, #108]	@ (800d63c <xTaskIncrementTick+0x168>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d3b8      	bcc.n	800d54a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5dc:	e7b5      	b.n	800d54a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d5de:	4b17      	ldr	r3, [pc, #92]	@ (800d63c <xTaskIncrementTick+0x168>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5e4:	4914      	ldr	r1, [pc, #80]	@ (800d638 <xTaskIncrementTick+0x164>)
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	4413      	add	r3, r2
 800d5ec:	009b      	lsls	r3, r3, #2
 800d5ee:	440b      	add	r3, r1
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d901      	bls.n	800d5fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d5fa:	4b11      	ldr	r3, [pc, #68]	@ (800d640 <xTaskIncrementTick+0x16c>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d007      	beq.n	800d612 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d602:	2301      	movs	r3, #1
 800d604:	617b      	str	r3, [r7, #20]
 800d606:	e004      	b.n	800d612 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d608:	4b0e      	ldr	r3, [pc, #56]	@ (800d644 <xTaskIncrementTick+0x170>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3301      	adds	r3, #1
 800d60e:	4a0d      	ldr	r2, [pc, #52]	@ (800d644 <xTaskIncrementTick+0x170>)
 800d610:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d612:	697b      	ldr	r3, [r7, #20]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3718      	adds	r7, #24
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	2400ab90 	.word	0x2400ab90
 800d620:	2400ab6c 	.word	0x2400ab6c
 800d624:	2400ab20 	.word	0x2400ab20
 800d628:	2400ab24 	.word	0x2400ab24
 800d62c:	2400ab80 	.word	0x2400ab80
 800d630:	2400ab88 	.word	0x2400ab88
 800d634:	2400ab70 	.word	0x2400ab70
 800d638:	2400a698 	.word	0x2400a698
 800d63c:	2400a694 	.word	0x2400a694
 800d640:	2400ab7c 	.word	0x2400ab7c
 800d644:	2400ab78 	.word	0x2400ab78

0800d648 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d64e:	4b2b      	ldr	r3, [pc, #172]	@ (800d6fc <vTaskSwitchContext+0xb4>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d003      	beq.n	800d65e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d656:	4b2a      	ldr	r3, [pc, #168]	@ (800d700 <vTaskSwitchContext+0xb8>)
 800d658:	2201      	movs	r2, #1
 800d65a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d65c:	e047      	b.n	800d6ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d65e:	4b28      	ldr	r3, [pc, #160]	@ (800d700 <vTaskSwitchContext+0xb8>)
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d664:	4b27      	ldr	r3, [pc, #156]	@ (800d704 <vTaskSwitchContext+0xbc>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]
 800d66a:	e011      	b.n	800d690 <vTaskSwitchContext+0x48>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d10b      	bne.n	800d68a <vTaskSwitchContext+0x42>
	__asm volatile
 800d672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d676:	f383 8811 	msr	BASEPRI, r3
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	607b      	str	r3, [r7, #4]
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop
 800d688:	e7fd      	b.n	800d686 <vTaskSwitchContext+0x3e>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	60fb      	str	r3, [r7, #12]
 800d690:	491d      	ldr	r1, [pc, #116]	@ (800d708 <vTaskSwitchContext+0xc0>)
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	4613      	mov	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	4413      	add	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	440b      	add	r3, r1
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d0e3      	beq.n	800d66c <vTaskSwitchContext+0x24>
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4a16      	ldr	r2, [pc, #88]	@ (800d708 <vTaskSwitchContext+0xc0>)
 800d6b0:	4413      	add	r3, r2
 800d6b2:	60bb      	str	r3, [r7, #8]
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	685b      	ldr	r3, [r3, #4]
 800d6b8:	685a      	ldr	r2, [r3, #4]
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	605a      	str	r2, [r3, #4]
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	685a      	ldr	r2, [r3, #4]
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d104      	bne.n	800d6d4 <vTaskSwitchContext+0x8c>
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	605a      	str	r2, [r3, #4]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	4a0c      	ldr	r2, [pc, #48]	@ (800d70c <vTaskSwitchContext+0xc4>)
 800d6dc:	6013      	str	r3, [r2, #0]
 800d6de:	4a09      	ldr	r2, [pc, #36]	@ (800d704 <vTaskSwitchContext+0xbc>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d6e4:	4b09      	ldr	r3, [pc, #36]	@ (800d70c <vTaskSwitchContext+0xc4>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3354      	adds	r3, #84	@ 0x54
 800d6ea:	4a09      	ldr	r2, [pc, #36]	@ (800d710 <vTaskSwitchContext+0xc8>)
 800d6ec:	6013      	str	r3, [r2, #0]
}
 800d6ee:	bf00      	nop
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	2400ab90 	.word	0x2400ab90
 800d700:	2400ab7c 	.word	0x2400ab7c
 800d704:	2400ab70 	.word	0x2400ab70
 800d708:	2400a698 	.word	0x2400a698
 800d70c:	2400a694 	.word	0x2400a694
 800d710:	240000d8 	.word	0x240000d8

0800d714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10b      	bne.n	800d73c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	60fb      	str	r3, [r7, #12]
}
 800d736:	bf00      	nop
 800d738:	bf00      	nop
 800d73a:	e7fd      	b.n	800d738 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d73c:	4b07      	ldr	r3, [pc, #28]	@ (800d75c <vTaskPlaceOnEventList+0x48>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3318      	adds	r3, #24
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7fe f8c0 	bl	800b8ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d74a:	2101      	movs	r1, #1
 800d74c:	6838      	ldr	r0, [r7, #0]
 800d74e:	f000 fb87 	bl	800de60 <prvAddCurrentTaskToDelayedList>
}
 800d752:	bf00      	nop
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	2400a694 	.word	0x2400a694

0800d760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10b      	bne.n	800d78a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d776:	f383 8811 	msr	BASEPRI, r3
 800d77a:	f3bf 8f6f 	isb	sy
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	617b      	str	r3, [r7, #20]
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop
 800d788:	e7fd      	b.n	800d786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d78a:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	3318      	adds	r3, #24
 800d790:	4619      	mov	r1, r3
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7fe f875 	bl	800b882 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d79e:	f04f 33ff 	mov.w	r3, #4294967295
 800d7a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d7a4:	6879      	ldr	r1, [r7, #4]
 800d7a6:	68b8      	ldr	r0, [r7, #8]
 800d7a8:	f000 fb5a 	bl	800de60 <prvAddCurrentTaskToDelayedList>
	}
 800d7ac:	bf00      	nop
 800d7ae:	3718      	adds	r7, #24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	2400a694 	.word	0x2400a694

0800d7b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10b      	bne.n	800d7e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	60fb      	str	r3, [r7, #12]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	3318      	adds	r3, #24
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fe f8a6 	bl	800b93c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d868 <xTaskRemoveFromEventList+0xb0>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d11d      	bne.n	800d834 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	3304      	adds	r3, #4
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fe f89d 	bl	800b93c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d806:	4b19      	ldr	r3, [pc, #100]	@ (800d86c <xTaskRemoveFromEventList+0xb4>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d903      	bls.n	800d816 <xTaskRemoveFromEventList+0x5e>
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d812:	4a16      	ldr	r2, [pc, #88]	@ (800d86c <xTaskRemoveFromEventList+0xb4>)
 800d814:	6013      	str	r3, [r2, #0]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d81a:	4613      	mov	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4413      	add	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4a13      	ldr	r2, [pc, #76]	@ (800d870 <xTaskRemoveFromEventList+0xb8>)
 800d824:	441a      	add	r2, r3
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	3304      	adds	r3, #4
 800d82a:	4619      	mov	r1, r3
 800d82c:	4610      	mov	r0, r2
 800d82e:	f7fe f828 	bl	800b882 <vListInsertEnd>
 800d832:	e005      	b.n	800d840 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	3318      	adds	r3, #24
 800d838:	4619      	mov	r1, r3
 800d83a:	480e      	ldr	r0, [pc, #56]	@ (800d874 <xTaskRemoveFromEventList+0xbc>)
 800d83c:	f7fe f821 	bl	800b882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d844:	4b0c      	ldr	r3, [pc, #48]	@ (800d878 <xTaskRemoveFromEventList+0xc0>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d905      	bls.n	800d85a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d84e:	2301      	movs	r3, #1
 800d850:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d852:	4b0a      	ldr	r3, [pc, #40]	@ (800d87c <xTaskRemoveFromEventList+0xc4>)
 800d854:	2201      	movs	r2, #1
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	e001      	b.n	800d85e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d85e:	697b      	ldr	r3, [r7, #20]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	2400ab90 	.word	0x2400ab90
 800d86c:	2400ab70 	.word	0x2400ab70
 800d870:	2400a698 	.word	0x2400a698
 800d874:	2400ab28 	.word	0x2400ab28
 800d878:	2400a694 	.word	0x2400a694
 800d87c:	2400ab7c 	.word	0x2400ab7c

0800d880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d888:	4b06      	ldr	r3, [pc, #24]	@ (800d8a4 <vTaskInternalSetTimeOutState+0x24>)
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d890:	4b05      	ldr	r3, [pc, #20]	@ (800d8a8 <vTaskInternalSetTimeOutState+0x28>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	605a      	str	r2, [r3, #4]
}
 800d898:	bf00      	nop
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	2400ab80 	.word	0x2400ab80
 800d8a8:	2400ab6c 	.word	0x2400ab6c

0800d8ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b088      	sub	sp, #32
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10b      	bne.n	800d8d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	613b      	str	r3, [r7, #16]
}
 800d8ce:	bf00      	nop
 800d8d0:	bf00      	nop
 800d8d2:	e7fd      	b.n	800d8d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10b      	bne.n	800d8f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d8da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8de:	f383 8811 	msr	BASEPRI, r3
 800d8e2:	f3bf 8f6f 	isb	sy
 800d8e6:	f3bf 8f4f 	dsb	sy
 800d8ea:	60fb      	str	r3, [r7, #12]
}
 800d8ec:	bf00      	nop
 800d8ee:	bf00      	nop
 800d8f0:	e7fd      	b.n	800d8ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d8f2:	f7fe f981 	bl	800bbf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d8f6:	4b1d      	ldr	r3, [pc, #116]	@ (800d96c <xTaskCheckForTimeOut+0xc0>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	69ba      	ldr	r2, [r7, #24]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90e:	d102      	bne.n	800d916 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d910:	2300      	movs	r3, #0
 800d912:	61fb      	str	r3, [r7, #28]
 800d914:	e023      	b.n	800d95e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681a      	ldr	r2, [r3, #0]
 800d91a:	4b15      	ldr	r3, [pc, #84]	@ (800d970 <xTaskCheckForTimeOut+0xc4>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d007      	beq.n	800d932 <xTaskCheckForTimeOut+0x86>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	69ba      	ldr	r2, [r7, #24]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d302      	bcc.n	800d932 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d92c:	2301      	movs	r3, #1
 800d92e:	61fb      	str	r3, [r7, #28]
 800d930:	e015      	b.n	800d95e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d20b      	bcs.n	800d954 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	1ad2      	subs	r2, r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff ff99 	bl	800d880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d94e:	2300      	movs	r3, #0
 800d950:	61fb      	str	r3, [r7, #28]
 800d952:	e004      	b.n	800d95e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2200      	movs	r2, #0
 800d958:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d95a:	2301      	movs	r3, #1
 800d95c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d95e:	f7fe f97d 	bl	800bc5c <vPortExitCritical>

	return xReturn;
 800d962:	69fb      	ldr	r3, [r7, #28]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3720      	adds	r7, #32
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	2400ab6c 	.word	0x2400ab6c
 800d970:	2400ab80 	.word	0x2400ab80

0800d974 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d974:	b480      	push	{r7}
 800d976:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d978:	4b03      	ldr	r3, [pc, #12]	@ (800d988 <vTaskMissedYield+0x14>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	601a      	str	r2, [r3, #0]
}
 800d97e:	bf00      	nop
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	2400ab7c 	.word	0x2400ab7c

0800d98c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d994:	f000 f852 	bl	800da3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d998:	4b06      	ldr	r3, [pc, #24]	@ (800d9b4 <prvIdleTask+0x28>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d9f9      	bls.n	800d994 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9a0:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <prvIdleTask+0x2c>)
 800d9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9b0:	e7f0      	b.n	800d994 <prvIdleTask+0x8>
 800d9b2:	bf00      	nop
 800d9b4:	2400a698 	.word	0x2400a698
 800d9b8:	e000ed04 	.word	0xe000ed04

0800d9bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	e00c      	b.n	800d9e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4a12      	ldr	r2, [pc, #72]	@ (800da1c <prvInitialiseTaskLists+0x60>)
 800d9d4:	4413      	add	r3, r2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fd ff26 	bl	800b828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	607b      	str	r3, [r7, #4]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b37      	cmp	r3, #55	@ 0x37
 800d9e6:	d9ef      	bls.n	800d9c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d9e8:	480d      	ldr	r0, [pc, #52]	@ (800da20 <prvInitialiseTaskLists+0x64>)
 800d9ea:	f7fd ff1d 	bl	800b828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d9ee:	480d      	ldr	r0, [pc, #52]	@ (800da24 <prvInitialiseTaskLists+0x68>)
 800d9f0:	f7fd ff1a 	bl	800b828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d9f4:	480c      	ldr	r0, [pc, #48]	@ (800da28 <prvInitialiseTaskLists+0x6c>)
 800d9f6:	f7fd ff17 	bl	800b828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d9fa:	480c      	ldr	r0, [pc, #48]	@ (800da2c <prvInitialiseTaskLists+0x70>)
 800d9fc:	f7fd ff14 	bl	800b828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da00:	480b      	ldr	r0, [pc, #44]	@ (800da30 <prvInitialiseTaskLists+0x74>)
 800da02:	f7fd ff11 	bl	800b828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da06:	4b0b      	ldr	r3, [pc, #44]	@ (800da34 <prvInitialiseTaskLists+0x78>)
 800da08:	4a05      	ldr	r2, [pc, #20]	@ (800da20 <prvInitialiseTaskLists+0x64>)
 800da0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da0c:	4b0a      	ldr	r3, [pc, #40]	@ (800da38 <prvInitialiseTaskLists+0x7c>)
 800da0e:	4a05      	ldr	r2, [pc, #20]	@ (800da24 <prvInitialiseTaskLists+0x68>)
 800da10:	601a      	str	r2, [r3, #0]
}
 800da12:	bf00      	nop
 800da14:	3708      	adds	r7, #8
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	2400a698 	.word	0x2400a698
 800da20:	2400aaf8 	.word	0x2400aaf8
 800da24:	2400ab0c 	.word	0x2400ab0c
 800da28:	2400ab28 	.word	0x2400ab28
 800da2c:	2400ab3c 	.word	0x2400ab3c
 800da30:	2400ab54 	.word	0x2400ab54
 800da34:	2400ab20 	.word	0x2400ab20
 800da38:	2400ab24 	.word	0x2400ab24

0800da3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da42:	e019      	b.n	800da78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da44:	f7fe f8d8 	bl	800bbf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da48:	4b10      	ldr	r3, [pc, #64]	@ (800da8c <prvCheckTasksWaitingTermination+0x50>)
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3304      	adds	r3, #4
 800da54:	4618      	mov	r0, r3
 800da56:	f7fd ff71 	bl	800b93c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da5a:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <prvCheckTasksWaitingTermination+0x54>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3b01      	subs	r3, #1
 800da60:	4a0b      	ldr	r2, [pc, #44]	@ (800da90 <prvCheckTasksWaitingTermination+0x54>)
 800da62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da64:	4b0b      	ldr	r3, [pc, #44]	@ (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	3b01      	subs	r3, #1
 800da6a:	4a0a      	ldr	r2, [pc, #40]	@ (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da6e:	f7fe f8f5 	bl	800bc5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f810 	bl	800da98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da78:	4b06      	ldr	r3, [pc, #24]	@ (800da94 <prvCheckTasksWaitingTermination+0x58>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d1e1      	bne.n	800da44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da80:	bf00      	nop
 800da82:	bf00      	nop
 800da84:	3708      	adds	r7, #8
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	2400ab3c 	.word	0x2400ab3c
 800da90:	2400ab68 	.word	0x2400ab68
 800da94:	2400ab50 	.word	0x2400ab50

0800da98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	3354      	adds	r3, #84	@ 0x54
 800daa4:	4618      	mov	r0, r3
 800daa6:	f01d fcaf 	bl	802b408 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d108      	bne.n	800dac6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fd fd95 	bl	800b5e8 <vPortFree>
				vPortFree( pxTCB );
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7fd fd92 	bl	800b5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dac4:	e019      	b.n	800dafa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d103      	bne.n	800dad8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7fd fd89 	bl	800b5e8 <vPortFree>
	}
 800dad6:	e010      	b.n	800dafa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d00b      	beq.n	800dafa <prvDeleteTCB+0x62>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60fb      	str	r3, [r7, #12]
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	e7fd      	b.n	800daf6 <prvDeleteTCB+0x5e>
	}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db0a:	4b0c      	ldr	r3, [pc, #48]	@ (800db3c <prvResetNextTaskUnblockTime+0x38>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d104      	bne.n	800db1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db14:	4b0a      	ldr	r3, [pc, #40]	@ (800db40 <prvResetNextTaskUnblockTime+0x3c>)
 800db16:	f04f 32ff 	mov.w	r2, #4294967295
 800db1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db1c:	e008      	b.n	800db30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db1e:	4b07      	ldr	r3, [pc, #28]	@ (800db3c <prvResetNextTaskUnblockTime+0x38>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	4a04      	ldr	r2, [pc, #16]	@ (800db40 <prvResetNextTaskUnblockTime+0x3c>)
 800db2e:	6013      	str	r3, [r2, #0]
}
 800db30:	bf00      	nop
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr
 800db3c:	2400ab20 	.word	0x2400ab20
 800db40:	2400ab88 	.word	0x2400ab88

0800db44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db4a:	4b0b      	ldr	r3, [pc, #44]	@ (800db78 <xTaskGetSchedulerState+0x34>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d102      	bne.n	800db58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db52:	2301      	movs	r3, #1
 800db54:	607b      	str	r3, [r7, #4]
 800db56:	e008      	b.n	800db6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db58:	4b08      	ldr	r3, [pc, #32]	@ (800db7c <xTaskGetSchedulerState+0x38>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d102      	bne.n	800db66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db60:	2302      	movs	r3, #2
 800db62:	607b      	str	r3, [r7, #4]
 800db64:	e001      	b.n	800db6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db66:	2300      	movs	r3, #0
 800db68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db6a:	687b      	ldr	r3, [r7, #4]
	}
 800db6c:	4618      	mov	r0, r3
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr
 800db78:	2400ab74 	.word	0x2400ab74
 800db7c:	2400ab90 	.word	0x2400ab90

0800db80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800db8c:	2300      	movs	r3, #0
 800db8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d051      	beq.n	800dc3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db9a:	4b2a      	ldr	r3, [pc, #168]	@ (800dc44 <xTaskPriorityInherit+0xc4>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d241      	bcs.n	800dc28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	699b      	ldr	r3, [r3, #24]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	db06      	blt.n	800dbba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbac:	4b25      	ldr	r3, [pc, #148]	@ (800dc44 <xTaskPriorityInherit+0xc4>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	6959      	ldr	r1, [r3, #20]
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	4413      	add	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4a1f      	ldr	r2, [pc, #124]	@ (800dc48 <xTaskPriorityInherit+0xc8>)
 800dbcc:	4413      	add	r3, r2
 800dbce:	4299      	cmp	r1, r3
 800dbd0:	d122      	bne.n	800dc18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fd feb0 	bl	800b93c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dbdc:	4b19      	ldr	r3, [pc, #100]	@ (800dc44 <xTaskPriorityInherit+0xc4>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbea:	4b18      	ldr	r3, [pc, #96]	@ (800dc4c <xTaskPriorityInherit+0xcc>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d903      	bls.n	800dbfa <xTaskPriorityInherit+0x7a>
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf6:	4a15      	ldr	r2, [pc, #84]	@ (800dc4c <xTaskPriorityInherit+0xcc>)
 800dbf8:	6013      	str	r3, [r2, #0]
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbfe:	4613      	mov	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4413      	add	r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	4a10      	ldr	r2, [pc, #64]	@ (800dc48 <xTaskPriorityInherit+0xc8>)
 800dc08:	441a      	add	r2, r3
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	4619      	mov	r1, r3
 800dc10:	4610      	mov	r0, r2
 800dc12:	f7fd fe36 	bl	800b882 <vListInsertEnd>
 800dc16:	e004      	b.n	800dc22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc18:	4b0a      	ldr	r3, [pc, #40]	@ (800dc44 <xTaskPriorityInherit+0xc4>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc22:	2301      	movs	r3, #1
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	e008      	b.n	800dc3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc2c:	4b05      	ldr	r3, [pc, #20]	@ (800dc44 <xTaskPriorityInherit+0xc4>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d201      	bcs.n	800dc3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc36:	2301      	movs	r3, #1
 800dc38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	2400a694 	.word	0x2400a694
 800dc48:	2400a698 	.word	0x2400a698
 800dc4c:	2400ab70 	.word	0x2400ab70

0800dc50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d058      	beq.n	800dd18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dc66:	4b2f      	ldr	r3, [pc, #188]	@ (800dd24 <xTaskPriorityDisinherit+0xd4>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	693a      	ldr	r2, [r7, #16]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d00b      	beq.n	800dc88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	60fb      	str	r3, [r7, #12]
}
 800dc82:	bf00      	nop
 800dc84:	bf00      	nop
 800dc86:	e7fd      	b.n	800dc84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d10b      	bne.n	800dca8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	60bb      	str	r3, [r7, #8]
}
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
 800dca6:	e7fd      	b.n	800dca4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcac:	1e5a      	subs	r2, r3, #1
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d02c      	beq.n	800dd18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d128      	bne.n	800dd18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3304      	adds	r3, #4
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7fd fe36 	bl	800b93c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcdc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dce8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <xTaskPriorityDisinherit+0xd8>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d903      	bls.n	800dcf8 <xTaskPriorityDisinherit+0xa8>
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf4:	4a0c      	ldr	r2, [pc, #48]	@ (800dd28 <xTaskPriorityDisinherit+0xd8>)
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4a09      	ldr	r2, [pc, #36]	@ (800dd2c <xTaskPriorityDisinherit+0xdc>)
 800dd06:	441a      	add	r2, r3
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4610      	mov	r0, r2
 800dd10:	f7fd fdb7 	bl	800b882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd18:	697b      	ldr	r3, [r7, #20]
	}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3718      	adds	r7, #24
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	2400a694 	.word	0x2400a694
 800dd28:	2400ab70 	.word	0x2400ab70
 800dd2c:	2400a698 	.word	0x2400a698

0800dd30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d06c      	beq.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d10b      	bne.n	800dd68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd54:	f383 8811 	msr	BASEPRI, r3
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	f3bf 8f4f 	dsb	sy
 800dd60:	60fb      	str	r3, [r7, #12]
}
 800dd62:	bf00      	nop
 800dd64:	bf00      	nop
 800dd66:	e7fd      	b.n	800dd64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d902      	bls.n	800dd78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	61fb      	str	r3, [r7, #28]
 800dd76:	e002      	b.n	800dd7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dd78:	69bb      	ldr	r3, [r7, #24]
 800dd7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd82:	69fa      	ldr	r2, [r7, #28]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d04c      	beq.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dd88:	69bb      	ldr	r3, [r7, #24]
 800dd8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd8c:	697a      	ldr	r2, [r7, #20]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d147      	bne.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dd92:	4b26      	ldr	r3, [pc, #152]	@ (800de2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	69ba      	ldr	r2, [r7, #24]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d10b      	bne.n	800ddb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	60bb      	str	r3, [r7, #8]
}
 800ddae:	bf00      	nop
 800ddb0:	bf00      	nop
 800ddb2:	e7fd      	b.n	800ddb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ddb4:	69bb      	ldr	r3, [r7, #24]
 800ddb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ddba:	69bb      	ldr	r3, [r7, #24]
 800ddbc:	69fa      	ldr	r2, [r7, #28]
 800ddbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	699b      	ldr	r3, [r3, #24]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	db04      	blt.n	800ddd2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	6959      	ldr	r1, [r3, #20]
 800ddd6:	693a      	ldr	r2, [r7, #16]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	4a13      	ldr	r2, [pc, #76]	@ (800de30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dde2:	4413      	add	r3, r2
 800dde4:	4299      	cmp	r1, r3
 800dde6:	d11c      	bne.n	800de22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fd fda5 	bl	800b93c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddf6:	4b0f      	ldr	r3, [pc, #60]	@ (800de34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d903      	bls.n	800de06 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de02:	4a0c      	ldr	r2, [pc, #48]	@ (800de34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800de04:	6013      	str	r3, [r2, #0]
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de0a:	4613      	mov	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	4a07      	ldr	r2, [pc, #28]	@ (800de30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800de14:	441a      	add	r2, r3
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	3304      	adds	r3, #4
 800de1a:	4619      	mov	r1, r3
 800de1c:	4610      	mov	r0, r2
 800de1e:	f7fd fd30 	bl	800b882 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de22:	bf00      	nop
 800de24:	3720      	adds	r7, #32
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	2400a694 	.word	0x2400a694
 800de30:	2400a698 	.word	0x2400a698
 800de34:	2400ab70 	.word	0x2400ab70

0800de38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800de38:	b480      	push	{r7}
 800de3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800de3c:	4b07      	ldr	r3, [pc, #28]	@ (800de5c <pvTaskIncrementMutexHeldCount+0x24>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d004      	beq.n	800de4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800de44:	4b05      	ldr	r3, [pc, #20]	@ (800de5c <pvTaskIncrementMutexHeldCount+0x24>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de4a:	3201      	adds	r2, #1
 800de4c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800de4e:	4b03      	ldr	r3, [pc, #12]	@ (800de5c <pvTaskIncrementMutexHeldCount+0x24>)
 800de50:	681b      	ldr	r3, [r3, #0]
	}
 800de52:	4618      	mov	r0, r3
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	2400a694 	.word	0x2400a694

0800de60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800de6a:	4b21      	ldr	r3, [pc, #132]	@ (800def0 <prvAddCurrentTaskToDelayedList+0x90>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de70:	4b20      	ldr	r3, [pc, #128]	@ (800def4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	3304      	adds	r3, #4
 800de76:	4618      	mov	r0, r3
 800de78:	f7fd fd60 	bl	800b93c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de82:	d10a      	bne.n	800de9a <prvAddCurrentTaskToDelayedList+0x3a>
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d007      	beq.n	800de9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de8a:	4b1a      	ldr	r3, [pc, #104]	@ (800def4 <prvAddCurrentTaskToDelayedList+0x94>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3304      	adds	r3, #4
 800de90:	4619      	mov	r1, r3
 800de92:	4819      	ldr	r0, [pc, #100]	@ (800def8 <prvAddCurrentTaskToDelayedList+0x98>)
 800de94:	f7fd fcf5 	bl	800b882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800de98:	e026      	b.n	800dee8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4413      	add	r3, r2
 800dea0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dea2:	4b14      	ldr	r3, [pc, #80]	@ (800def4 <prvAddCurrentTaskToDelayedList+0x94>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d209      	bcs.n	800dec6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800deb2:	4b12      	ldr	r3, [pc, #72]	@ (800defc <prvAddCurrentTaskToDelayedList+0x9c>)
 800deb4:	681a      	ldr	r2, [r3, #0]
 800deb6:	4b0f      	ldr	r3, [pc, #60]	@ (800def4 <prvAddCurrentTaskToDelayedList+0x94>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fd fd03 	bl	800b8ca <vListInsert>
}
 800dec4:	e010      	b.n	800dee8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dec6:	4b0e      	ldr	r3, [pc, #56]	@ (800df00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	4b0a      	ldr	r3, [pc, #40]	@ (800def4 <prvAddCurrentTaskToDelayedList+0x94>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	3304      	adds	r3, #4
 800ded0:	4619      	mov	r1, r3
 800ded2:	4610      	mov	r0, r2
 800ded4:	f7fd fcf9 	bl	800b8ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ded8:	4b0a      	ldr	r3, [pc, #40]	@ (800df04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d202      	bcs.n	800dee8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dee2:	4a08      	ldr	r2, [pc, #32]	@ (800df04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	6013      	str	r3, [r2, #0]
}
 800dee8:	bf00      	nop
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	2400ab6c 	.word	0x2400ab6c
 800def4:	2400a694 	.word	0x2400a694
 800def8:	2400ab54 	.word	0x2400ab54
 800defc:	2400ab24 	.word	0x2400ab24
 800df00:	2400ab20 	.word	0x2400ab20
 800df04:	2400ab88 	.word	0x2400ab88

0800df08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b08a      	sub	sp, #40	@ 0x28
 800df0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800df0e:	2300      	movs	r3, #0
 800df10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800df12:	f000 fb13 	bl	800e53c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800df16:	4b1d      	ldr	r3, [pc, #116]	@ (800df8c <xTimerCreateTimerTask+0x84>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d021      	beq.n	800df62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800df26:	1d3a      	adds	r2, r7, #4
 800df28:	f107 0108 	add.w	r1, r7, #8
 800df2c:	f107 030c 	add.w	r3, r7, #12
 800df30:	4618      	mov	r0, r3
 800df32:	f7fd fa71 	bl	800b418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	9202      	str	r2, [sp, #8]
 800df3e:	9301      	str	r3, [sp, #4]
 800df40:	2302      	movs	r3, #2
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	2300      	movs	r3, #0
 800df46:	460a      	mov	r2, r1
 800df48:	4911      	ldr	r1, [pc, #68]	@ (800df90 <xTimerCreateTimerTask+0x88>)
 800df4a:	4812      	ldr	r0, [pc, #72]	@ (800df94 <xTimerCreateTimerTask+0x8c>)
 800df4c:	f7fe ffa2 	bl	800ce94 <xTaskCreateStatic>
 800df50:	4603      	mov	r3, r0
 800df52:	4a11      	ldr	r2, [pc, #68]	@ (800df98 <xTimerCreateTimerTask+0x90>)
 800df54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800df56:	4b10      	ldr	r3, [pc, #64]	@ (800df98 <xTimerCreateTimerTask+0x90>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800df5e:	2301      	movs	r3, #1
 800df60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10b      	bne.n	800df80 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800df68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	613b      	str	r3, [r7, #16]
}
 800df7a:	bf00      	nop
 800df7c:	bf00      	nop
 800df7e:	e7fd      	b.n	800df7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800df80:	697b      	ldr	r3, [r7, #20]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3718      	adds	r7, #24
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	2400abc4 	.word	0x2400abc4
 800df90:	0802cd18 	.word	0x0802cd18
 800df94:	0800e0d5 	.word	0x0800e0d5
 800df98:	2400abc8 	.word	0x2400abc8

0800df9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08a      	sub	sp, #40	@ 0x28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	607a      	str	r2, [r7, #4]
 800dfa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10b      	bne.n	800dfcc <xTimerGenericCommand+0x30>
	__asm volatile
 800dfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb8:	f383 8811 	msr	BASEPRI, r3
 800dfbc:	f3bf 8f6f 	isb	sy
 800dfc0:	f3bf 8f4f 	dsb	sy
 800dfc4:	623b      	str	r3, [r7, #32]
}
 800dfc6:	bf00      	nop
 800dfc8:	bf00      	nop
 800dfca:	e7fd      	b.n	800dfc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dfcc:	4b19      	ldr	r3, [pc, #100]	@ (800e034 <xTimerGenericCommand+0x98>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d02a      	beq.n	800e02a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b05      	cmp	r3, #5
 800dfe4:	dc18      	bgt.n	800e018 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dfe6:	f7ff fdad 	bl	800db44 <xTaskGetSchedulerState>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	d109      	bne.n	800e004 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dff0:	4b10      	ldr	r3, [pc, #64]	@ (800e034 <xTimerGenericCommand+0x98>)
 800dff2:	6818      	ldr	r0, [r3, #0]
 800dff4:	f107 0110 	add.w	r1, r7, #16
 800dff8:	2300      	movs	r3, #0
 800dffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dffc:	f7fe f8d2 	bl	800c1a4 <xQueueGenericSend>
 800e000:	6278      	str	r0, [r7, #36]	@ 0x24
 800e002:	e012      	b.n	800e02a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e004:	4b0b      	ldr	r3, [pc, #44]	@ (800e034 <xTimerGenericCommand+0x98>)
 800e006:	6818      	ldr	r0, [r3, #0]
 800e008:	f107 0110 	add.w	r1, r7, #16
 800e00c:	2300      	movs	r3, #0
 800e00e:	2200      	movs	r2, #0
 800e010:	f7fe f8c8 	bl	800c1a4 <xQueueGenericSend>
 800e014:	6278      	str	r0, [r7, #36]	@ 0x24
 800e016:	e008      	b.n	800e02a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e018:	4b06      	ldr	r3, [pc, #24]	@ (800e034 <xTimerGenericCommand+0x98>)
 800e01a:	6818      	ldr	r0, [r3, #0]
 800e01c:	f107 0110 	add.w	r1, r7, #16
 800e020:	2300      	movs	r3, #0
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	f7fe f9c0 	bl	800c3a8 <xQueueGenericSendFromISR>
 800e028:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3728      	adds	r7, #40	@ 0x28
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	2400abc4 	.word	0x2400abc4

0800e038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b088      	sub	sp, #32
 800e03c:	af02      	add	r7, sp, #8
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e042:	4b23      	ldr	r3, [pc, #140]	@ (800e0d0 <prvProcessExpiredTimer+0x98>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	3304      	adds	r3, #4
 800e050:	4618      	mov	r0, r3
 800e052:	f7fd fc73 	bl	800b93c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e05c:	f003 0304 	and.w	r3, r3, #4
 800e060:	2b00      	cmp	r3, #0
 800e062:	d023      	beq.n	800e0ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	699a      	ldr	r2, [r3, #24]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	18d1      	adds	r1, r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	683a      	ldr	r2, [r7, #0]
 800e070:	6978      	ldr	r0, [r7, #20]
 800e072:	f000 f8d5 	bl	800e220 <prvInsertTimerInActiveList>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d020      	beq.n	800e0be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e07c:	2300      	movs	r3, #0
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	2300      	movs	r3, #0
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	2100      	movs	r1, #0
 800e086:	6978      	ldr	r0, [r7, #20]
 800e088:	f7ff ff88 	bl	800df9c <xTimerGenericCommand>
 800e08c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d114      	bne.n	800e0be <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e098:	f383 8811 	msr	BASEPRI, r3
 800e09c:	f3bf 8f6f 	isb	sy
 800e0a0:	f3bf 8f4f 	dsb	sy
 800e0a4:	60fb      	str	r3, [r7, #12]
}
 800e0a6:	bf00      	nop
 800e0a8:	bf00      	nop
 800e0aa:	e7fd      	b.n	800e0a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0b2:	f023 0301 	bic.w	r3, r3, #1
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	6978      	ldr	r0, [r7, #20]
 800e0c4:	4798      	blx	r3
}
 800e0c6:	bf00      	nop
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2400abbc 	.word	0x2400abbc

0800e0d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0dc:	f107 0308 	add.w	r3, r7, #8
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 f859 	bl	800e198 <prvGetNextExpireTime>
 800e0e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 f805 	bl	800e0fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e0f2:	f000 f8d7 	bl	800e2a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e0f6:	bf00      	nop
 800e0f8:	e7f0      	b.n	800e0dc <prvTimerTask+0x8>
	...

0800e0fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e106:	f7ff f929 	bl	800d35c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e10a:	f107 0308 	add.w	r3, r7, #8
 800e10e:	4618      	mov	r0, r3
 800e110:	f000 f866 	bl	800e1e0 <prvSampleTimeNow>
 800e114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d130      	bne.n	800e17e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10a      	bne.n	800e138 <prvProcessTimerOrBlockTask+0x3c>
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	429a      	cmp	r2, r3
 800e128:	d806      	bhi.n	800e138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e12a:	f7ff f925 	bl	800d378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e12e:	68f9      	ldr	r1, [r7, #12]
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff ff81 	bl	800e038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e136:	e024      	b.n	800e182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d008      	beq.n	800e150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e13e:	4b13      	ldr	r3, [pc, #76]	@ (800e18c <prvProcessTimerOrBlockTask+0x90>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d101      	bne.n	800e14c <prvProcessTimerOrBlockTask+0x50>
 800e148:	2301      	movs	r3, #1
 800e14a:	e000      	b.n	800e14e <prvProcessTimerOrBlockTask+0x52>
 800e14c:	2300      	movs	r3, #0
 800e14e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e150:	4b0f      	ldr	r3, [pc, #60]	@ (800e190 <prvProcessTimerOrBlockTask+0x94>)
 800e152:	6818      	ldr	r0, [r3, #0]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	4619      	mov	r1, r3
 800e15e:	f7fe fe65 	bl	800ce2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e162:	f7ff f909 	bl	800d378 <xTaskResumeAll>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10a      	bne.n	800e182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e16c:	4b09      	ldr	r3, [pc, #36]	@ (800e194 <prvProcessTimerOrBlockTask+0x98>)
 800e16e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e172:	601a      	str	r2, [r3, #0]
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	f3bf 8f6f 	isb	sy
}
 800e17c:	e001      	b.n	800e182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e17e:	f7ff f8fb 	bl	800d378 <xTaskResumeAll>
}
 800e182:	bf00      	nop
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	2400abc0 	.word	0x2400abc0
 800e190:	2400abc4 	.word	0x2400abc4
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e1a0:	4b0e      	ldr	r3, [pc, #56]	@ (800e1dc <prvGetNextExpireTime+0x44>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d101      	bne.n	800e1ae <prvGetNextExpireTime+0x16>
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	e000      	b.n	800e1b0 <prvGetNextExpireTime+0x18>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e1bc:	4b07      	ldr	r3, [pc, #28]	@ (800e1dc <prvGetNextExpireTime+0x44>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	60fb      	str	r3, [r7, #12]
 800e1c6:	e001      	b.n	800e1cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	2400abbc 	.word	0x2400abbc

0800e1e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e1e8:	f7ff f964 	bl	800d4b4 <xTaskGetTickCount>
 800e1ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e1ee:	4b0b      	ldr	r3, [pc, #44]	@ (800e21c <prvSampleTimeNow+0x3c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d205      	bcs.n	800e204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e1f8:	f000 f93a 	bl	800e470 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2201      	movs	r2, #1
 800e200:	601a      	str	r2, [r3, #0]
 800e202:	e002      	b.n	800e20a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e20a:	4a04      	ldr	r2, [pc, #16]	@ (800e21c <prvSampleTimeNow+0x3c>)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e210:	68fb      	ldr	r3, [r7, #12]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	2400abcc 	.word	0x2400abcc

0800e220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	429a      	cmp	r2, r3
 800e244:	d812      	bhi.n	800e26c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	1ad2      	subs	r2, r2, r3
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	429a      	cmp	r2, r3
 800e252:	d302      	bcc.n	800e25a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e254:	2301      	movs	r3, #1
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	e01b      	b.n	800e292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e25a:	4b10      	ldr	r3, [pc, #64]	@ (800e29c <prvInsertTimerInActiveList+0x7c>)
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	3304      	adds	r3, #4
 800e262:	4619      	mov	r1, r3
 800e264:	4610      	mov	r0, r2
 800e266:	f7fd fb30 	bl	800b8ca <vListInsert>
 800e26a:	e012      	b.n	800e292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d206      	bcs.n	800e282 <prvInsertTimerInActiveList+0x62>
 800e274:	68ba      	ldr	r2, [r7, #8]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d302      	bcc.n	800e282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e27c:	2301      	movs	r3, #1
 800e27e:	617b      	str	r3, [r7, #20]
 800e280:	e007      	b.n	800e292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e282:	4b07      	ldr	r3, [pc, #28]	@ (800e2a0 <prvInsertTimerInActiveList+0x80>)
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	3304      	adds	r3, #4
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7fd fb1c 	bl	800b8ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e292:	697b      	ldr	r3, [r7, #20]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3718      	adds	r7, #24
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	2400abc0 	.word	0x2400abc0
 800e2a0:	2400abbc 	.word	0x2400abbc

0800e2a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b08e      	sub	sp, #56	@ 0x38
 800e2a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e2aa:	e0ce      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	da19      	bge.n	800e2e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e2b2:	1d3b      	adds	r3, r7, #4
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d10b      	bne.n	800e2d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	61fb      	str	r3, [r7, #28]
}
 800e2d0:	bf00      	nop
 800e2d2:	bf00      	nop
 800e2d4:	e7fd      	b.n	800e2d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2dc:	6850      	ldr	r0, [r2, #4]
 800e2de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2e0:	6892      	ldr	r2, [r2, #8]
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f2c0 80ae 	blt.w	800e44a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2f4:	695b      	ldr	r3, [r3, #20]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d004      	beq.n	800e304 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	3304      	adds	r3, #4
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fd fb1c 	bl	800b93c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e304:	463b      	mov	r3, r7
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff ff6a 	bl	800e1e0 <prvSampleTimeNow>
 800e30c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b09      	cmp	r3, #9
 800e312:	f200 8097 	bhi.w	800e444 <prvProcessReceivedCommands+0x1a0>
 800e316:	a201      	add	r2, pc, #4	@ (adr r2, 800e31c <prvProcessReceivedCommands+0x78>)
 800e318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31c:	0800e345 	.word	0x0800e345
 800e320:	0800e345 	.word	0x0800e345
 800e324:	0800e345 	.word	0x0800e345
 800e328:	0800e3bb 	.word	0x0800e3bb
 800e32c:	0800e3cf 	.word	0x0800e3cf
 800e330:	0800e41b 	.word	0x0800e41b
 800e334:	0800e345 	.word	0x0800e345
 800e338:	0800e345 	.word	0x0800e345
 800e33c:	0800e3bb 	.word	0x0800e3bb
 800e340:	0800e3cf 	.word	0x0800e3cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e34a:	f043 0301 	orr.w	r3, r3, #1
 800e34e:	b2da      	uxtb	r2, r3
 800e350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e352:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35a:	699b      	ldr	r3, [r3, #24]
 800e35c:	18d1      	adds	r1, r2, r3
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e364:	f7ff ff5c 	bl	800e220 <prvInsertTimerInActiveList>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d06c      	beq.n	800e448 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e370:	6a1b      	ldr	r3, [r3, #32]
 800e372:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e374:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e37c:	f003 0304 	and.w	r3, r3, #4
 800e380:	2b00      	cmp	r3, #0
 800e382:	d061      	beq.n	800e448 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e388:	699b      	ldr	r3, [r3, #24]
 800e38a:	441a      	add	r2, r3
 800e38c:	2300      	movs	r3, #0
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	2300      	movs	r3, #0
 800e392:	2100      	movs	r1, #0
 800e394:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e396:	f7ff fe01 	bl	800df9c <xTimerGenericCommand>
 800e39a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e39c:	6a3b      	ldr	r3, [r7, #32]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d152      	bne.n	800e448 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	61bb      	str	r3, [r7, #24]
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop
 800e3b8:	e7fd      	b.n	800e3b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3c0:	f023 0301 	bic.w	r3, r3, #1
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e3cc:	e03d      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3d4:	f043 0301 	orr.w	r3, r3, #1
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e3e0:	68ba      	ldr	r2, [r7, #8]
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e8:	699b      	ldr	r3, [r3, #24]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10b      	bne.n	800e406 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	617b      	str	r3, [r7, #20]
}
 800e400:	bf00      	nop
 800e402:	bf00      	nop
 800e404:	e7fd      	b.n	800e402 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e408:	699a      	ldr	r2, [r3, #24]
 800e40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e40c:	18d1      	adds	r1, r2, r3
 800e40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e414:	f7ff ff04 	bl	800e220 <prvInsertTimerInActiveList>
					break;
 800e418:	e017      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e420:	f003 0302 	and.w	r3, r3, #2
 800e424:	2b00      	cmp	r3, #0
 800e426:	d103      	bne.n	800e430 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e428:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e42a:	f7fd f8dd 	bl	800b5e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e42e:	e00c      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e432:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e436:	f023 0301 	bic.w	r3, r3, #1
 800e43a:	b2da      	uxtb	r2, r3
 800e43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e442:	e002      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e444:	bf00      	nop
 800e446:	e000      	b.n	800e44a <prvProcessReceivedCommands+0x1a6>
					break;
 800e448:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e44a:	4b08      	ldr	r3, [pc, #32]	@ (800e46c <prvProcessReceivedCommands+0x1c8>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	1d39      	adds	r1, r7, #4
 800e450:	2200      	movs	r2, #0
 800e452:	4618      	mov	r0, r3
 800e454:	f7fe f8d6 	bl	800c604 <xQueueReceive>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	f47f af26 	bne.w	800e2ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e460:	bf00      	nop
 800e462:	bf00      	nop
 800e464:	3730      	adds	r7, #48	@ 0x30
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	2400abc4 	.word	0x2400abc4

0800e470 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e476:	e049      	b.n	800e50c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e478:	4b2e      	ldr	r3, [pc, #184]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e482:	4b2c      	ldr	r3, [pc, #176]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	3304      	adds	r3, #4
 800e490:	4618      	mov	r0, r3
 800e492:	f7fd fa53 	bl	800b93c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6a1b      	ldr	r3, [r3, #32]
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4a4:	f003 0304 	and.w	r3, r3, #4
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d02f      	beq.n	800e50c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	693a      	ldr	r2, [r7, #16]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d90e      	bls.n	800e4dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4ca:	4b1a      	ldr	r3, [pc, #104]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	f7fd f9f8 	bl	800b8ca <vListInsert>
 800e4da:	e017      	b.n	800e50c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e4dc:	2300      	movs	r3, #0
 800e4de:	9300      	str	r3, [sp, #0]
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	2100      	movs	r1, #0
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	f7ff fd58 	bl	800df9c <xTimerGenericCommand>
 800e4ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10b      	bne.n	800e50c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	603b      	str	r3, [r7, #0]
}
 800e506:	bf00      	nop
 800e508:	bf00      	nop
 800e50a:	e7fd      	b.n	800e508 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e50c:	4b09      	ldr	r3, [pc, #36]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d1b0      	bne.n	800e478 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e516:	4b07      	ldr	r3, [pc, #28]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e51c:	4b06      	ldr	r3, [pc, #24]	@ (800e538 <prvSwitchTimerLists+0xc8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a04      	ldr	r2, [pc, #16]	@ (800e534 <prvSwitchTimerLists+0xc4>)
 800e522:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e524:	4a04      	ldr	r2, [pc, #16]	@ (800e538 <prvSwitchTimerLists+0xc8>)
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	6013      	str	r3, [r2, #0]
}
 800e52a:	bf00      	nop
 800e52c:	3718      	adds	r7, #24
 800e52e:	46bd      	mov	sp, r7
 800e530:	bd80      	pop	{r7, pc}
 800e532:	bf00      	nop
 800e534:	2400abbc 	.word	0x2400abbc
 800e538:	2400abc0 	.word	0x2400abc0

0800e53c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e542:	f7fd fb59 	bl	800bbf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e546:	4b15      	ldr	r3, [pc, #84]	@ (800e59c <prvCheckForValidListAndQueue+0x60>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d120      	bne.n	800e590 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e54e:	4814      	ldr	r0, [pc, #80]	@ (800e5a0 <prvCheckForValidListAndQueue+0x64>)
 800e550:	f7fd f96a 	bl	800b828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e554:	4813      	ldr	r0, [pc, #76]	@ (800e5a4 <prvCheckForValidListAndQueue+0x68>)
 800e556:	f7fd f967 	bl	800b828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e55a:	4b13      	ldr	r3, [pc, #76]	@ (800e5a8 <prvCheckForValidListAndQueue+0x6c>)
 800e55c:	4a10      	ldr	r2, [pc, #64]	@ (800e5a0 <prvCheckForValidListAndQueue+0x64>)
 800e55e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e560:	4b12      	ldr	r3, [pc, #72]	@ (800e5ac <prvCheckForValidListAndQueue+0x70>)
 800e562:	4a10      	ldr	r2, [pc, #64]	@ (800e5a4 <prvCheckForValidListAndQueue+0x68>)
 800e564:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e566:	2300      	movs	r3, #0
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	4b11      	ldr	r3, [pc, #68]	@ (800e5b0 <prvCheckForValidListAndQueue+0x74>)
 800e56c:	4a11      	ldr	r2, [pc, #68]	@ (800e5b4 <prvCheckForValidListAndQueue+0x78>)
 800e56e:	2110      	movs	r1, #16
 800e570:	200a      	movs	r0, #10
 800e572:	f7fd fccd 	bl	800bf10 <xQueueGenericCreateStatic>
 800e576:	4603      	mov	r3, r0
 800e578:	4a08      	ldr	r2, [pc, #32]	@ (800e59c <prvCheckForValidListAndQueue+0x60>)
 800e57a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e57c:	4b07      	ldr	r3, [pc, #28]	@ (800e59c <prvCheckForValidListAndQueue+0x60>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d005      	beq.n	800e590 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e584:	4b05      	ldr	r3, [pc, #20]	@ (800e59c <prvCheckForValidListAndQueue+0x60>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	490b      	ldr	r1, [pc, #44]	@ (800e5b8 <prvCheckForValidListAndQueue+0x7c>)
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fbfa 	bl	800cd84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e590:	f7fd fb64 	bl	800bc5c <vPortExitCritical>
}
 800e594:	bf00      	nop
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	2400abc4 	.word	0x2400abc4
 800e5a0:	2400ab94 	.word	0x2400ab94
 800e5a4:	2400aba8 	.word	0x2400aba8
 800e5a8:	2400abbc 	.word	0x2400abbc
 800e5ac:	2400abc0 	.word	0x2400abc0
 800e5b0:	2400ac70 	.word	0x2400ac70
 800e5b4:	2400abd0 	.word	0x2400abd0
 800e5b8:	0802cd20 	.word	0x0802cd20

0800e5bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800e5c0:	4b3f      	ldr	r3, [pc, #252]	@ (800e6c0 <SystemInit+0x104>)
 800e5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5c6:	4a3e      	ldr	r2, [pc, #248]	@ (800e6c0 <SystemInit+0x104>)
 800e5c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e5cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800e5d0:	4b3b      	ldr	r3, [pc, #236]	@ (800e6c0 <SystemInit+0x104>)
 800e5d2:	691b      	ldr	r3, [r3, #16]
 800e5d4:	4a3a      	ldr	r2, [pc, #232]	@ (800e6c0 <SystemInit+0x104>)
 800e5d6:	f043 0310 	orr.w	r3, r3, #16
 800e5da:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e5dc:	4b39      	ldr	r3, [pc, #228]	@ (800e6c4 <SystemInit+0x108>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 030f 	and.w	r3, r3, #15
 800e5e4:	2b06      	cmp	r3, #6
 800e5e6:	d807      	bhi.n	800e5f8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e5e8:	4b36      	ldr	r3, [pc, #216]	@ (800e6c4 <SystemInit+0x108>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f023 030f 	bic.w	r3, r3, #15
 800e5f0:	4a34      	ldr	r2, [pc, #208]	@ (800e6c4 <SystemInit+0x108>)
 800e5f2:	f043 0307 	orr.w	r3, r3, #7
 800e5f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800e5f8:	4b33      	ldr	r3, [pc, #204]	@ (800e6c8 <SystemInit+0x10c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a32      	ldr	r2, [pc, #200]	@ (800e6c8 <SystemInit+0x10c>)
 800e5fe:	f043 0301 	orr.w	r3, r3, #1
 800e602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800e604:	4b30      	ldr	r3, [pc, #192]	@ (800e6c8 <SystemInit+0x10c>)
 800e606:	2200      	movs	r2, #0
 800e608:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800e60a:	4b2f      	ldr	r3, [pc, #188]	@ (800e6c8 <SystemInit+0x10c>)
 800e60c:	681a      	ldr	r2, [r3, #0]
 800e60e:	492e      	ldr	r1, [pc, #184]	@ (800e6c8 <SystemInit+0x10c>)
 800e610:	4b2e      	ldr	r3, [pc, #184]	@ (800e6cc <SystemInit+0x110>)
 800e612:	4013      	ands	r3, r2
 800e614:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800e616:	4b2b      	ldr	r3, [pc, #172]	@ (800e6c4 <SystemInit+0x108>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f003 0308 	and.w	r3, r3, #8
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d007      	beq.n	800e632 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800e622:	4b28      	ldr	r3, [pc, #160]	@ (800e6c4 <SystemInit+0x108>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f023 030f 	bic.w	r3, r3, #15
 800e62a:	4a26      	ldr	r2, [pc, #152]	@ (800e6c4 <SystemInit+0x108>)
 800e62c:	f043 0307 	orr.w	r3, r3, #7
 800e630:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800e632:	4b25      	ldr	r3, [pc, #148]	@ (800e6c8 <SystemInit+0x10c>)
 800e634:	2200      	movs	r2, #0
 800e636:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800e638:	4b23      	ldr	r3, [pc, #140]	@ (800e6c8 <SystemInit+0x10c>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800e63e:	4b22      	ldr	r3, [pc, #136]	@ (800e6c8 <SystemInit+0x10c>)
 800e640:	2200      	movs	r2, #0
 800e642:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800e644:	4b20      	ldr	r3, [pc, #128]	@ (800e6c8 <SystemInit+0x10c>)
 800e646:	4a22      	ldr	r2, [pc, #136]	@ (800e6d0 <SystemInit+0x114>)
 800e648:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800e64a:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c8 <SystemInit+0x10c>)
 800e64c:	4a21      	ldr	r2, [pc, #132]	@ (800e6d4 <SystemInit+0x118>)
 800e64e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800e650:	4b1d      	ldr	r3, [pc, #116]	@ (800e6c8 <SystemInit+0x10c>)
 800e652:	4a21      	ldr	r2, [pc, #132]	@ (800e6d8 <SystemInit+0x11c>)
 800e654:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800e656:	4b1c      	ldr	r3, [pc, #112]	@ (800e6c8 <SystemInit+0x10c>)
 800e658:	2200      	movs	r2, #0
 800e65a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800e65c:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c8 <SystemInit+0x10c>)
 800e65e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6d8 <SystemInit+0x11c>)
 800e660:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800e662:	4b19      	ldr	r3, [pc, #100]	@ (800e6c8 <SystemInit+0x10c>)
 800e664:	2200      	movs	r2, #0
 800e666:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800e668:	4b17      	ldr	r3, [pc, #92]	@ (800e6c8 <SystemInit+0x10c>)
 800e66a:	4a1b      	ldr	r2, [pc, #108]	@ (800e6d8 <SystemInit+0x11c>)
 800e66c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800e66e:	4b16      	ldr	r3, [pc, #88]	@ (800e6c8 <SystemInit+0x10c>)
 800e670:	2200      	movs	r2, #0
 800e672:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e674:	4b14      	ldr	r3, [pc, #80]	@ (800e6c8 <SystemInit+0x10c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a13      	ldr	r2, [pc, #76]	@ (800e6c8 <SystemInit+0x10c>)
 800e67a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e67e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800e680:	4b11      	ldr	r3, [pc, #68]	@ (800e6c8 <SystemInit+0x10c>)
 800e682:	2200      	movs	r2, #0
 800e684:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800e686:	4b15      	ldr	r3, [pc, #84]	@ (800e6dc <SystemInit+0x120>)
 800e688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e68a:	4a14      	ldr	r2, [pc, #80]	@ (800e6dc <SystemInit+0x120>)
 800e68c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e690:	6253      	str	r3, [r2, #36]	@ 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800e692:	4b13      	ldr	r3, [pc, #76]	@ (800e6e0 <SystemInit+0x124>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	4b13      	ldr	r3, [pc, #76]	@ (800e6e4 <SystemInit+0x128>)
 800e698:	4013      	ands	r3, r2
 800e69a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e69e:	d202      	bcs.n	800e6a6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800e6a0:	4b11      	ldr	r3, [pc, #68]	@ (800e6e8 <SystemInit+0x12c>)
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800e6a6:	4b11      	ldr	r3, [pc, #68]	@ (800e6ec <SystemInit+0x130>)
 800e6a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800e6ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800e6ae:	4b04      	ldr	r3, [pc, #16]	@ (800e6c0 <SystemInit+0x104>)
 800e6b0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800e6b4:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800e6b6:	bf00      	nop
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	e000ed00 	.word	0xe000ed00
 800e6c4:	52002000 	.word	0x52002000
 800e6c8:	58024400 	.word	0x58024400
 800e6cc:	eaf6ed7f 	.word	0xeaf6ed7f
 800e6d0:	02020200 	.word	0x02020200
 800e6d4:	01ff0000 	.word	0x01ff0000
 800e6d8:	01010280 	.word	0x01010280
 800e6dc:	580000c0 	.word	0x580000c0
 800e6e0:	5c001000 	.word	0x5c001000
 800e6e4:	ffff0000 	.word	0xffff0000
 800e6e8:	51008108 	.word	0x51008108
 800e6ec:	52004000 	.word	0x52004000

0800e6f0 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d103      	bne.n	800e708 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800e700:	f04f 33ff 	mov.w	r3, #4294967295
 800e704:	60fb      	str	r3, [r7, #12]
 800e706:	e02c      	b.n	800e762 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	685a      	ldr	r2, [r3, #4]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	891a      	ldrh	r2, [r3, #8]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	68da      	ldr	r2, [r3, #12]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	691a      	ldr	r2, [r3, #16]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	695a      	ldr	r2, [r3, #20]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a0c      	ldr	r2, [pc, #48]	@ (800e76c <FT5336_RegisterBusIO+0x7c>)
 800e73c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a0b      	ldr	r2, [pc, #44]	@ (800e770 <FT5336_RegisterBusIO+0x80>)
 800e742:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d004      	beq.n	800e75c <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	4798      	blx	r3
 800e758:	60f8      	str	r0, [r7, #12]
 800e75a:	e002      	b.n	800e762 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800e75c:	f04f 33ff 	mov.w	r3, #4294967295
 800e760:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800e762:	68fb      	ldr	r3, [r7, #12]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	0800eb69 	.word	0x0800eb69
 800e770:	0800eb9d 	.word	0x0800eb9d

0800e774 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2201      	movs	r2, #1
 800e782:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	2201      	movs	r2, #1
 800e788:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2205      	movs	r2, #5
 800e78e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e796:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800e79e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b084      	sub	sp, #16
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10d      	bne.n	800e7e0 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f000 f987 	bl	800eade <FT5336_DisableIT>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if(ret != FT5336_OK)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800e7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b085      	sub	sp, #20
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d103      	bne.n	800e814 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2200      	movs	r2, #0
 800e810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return ret;
 800e814:	68fb      	ldr	r3, [r7, #12]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3714      	adds	r7, #20
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr

0800e822 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f103 0218 	add.w	r2, r3, #24
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	b2db      	uxtb	r3, r3
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f000 fa25 	bl	800ec8a <ft5336_radian_value>
 800e840:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f103 0218 	add.w	r2, r3, #24
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	4619      	mov	r1, r3
 800e850:	4610      	mov	r0, r2
 800e852:	f000 fa2b 	bl	800ecac <ft5336_offset_left_right>
 800e856:	4602      	mov	r2, r0
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	4413      	add	r3, r2
 800e85c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f103 0218 	add.w	r2, r3, #24
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f000 fa2e 	bl	800ecce <ft5336_offset_up_down>
 800e872:	4602      	mov	r2, r0
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	4413      	add	r3, r2
 800e878:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f103 0218 	add.w	r2, r3, #24
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	b2db      	uxtb	r3, r3
 800e886:	4619      	mov	r1, r3
 800e888:	4610      	mov	r0, r2
 800e88a:	f000 fa31 	bl	800ecf0 <ft5336_disatnce_left_right>
 800e88e:	4602      	mov	r2, r0
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4413      	add	r3, r2
 800e894:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f103 0218 	add.w	r2, r3, #24
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	f000 fa34 	bl	800ed12 <ft5336_distance_up_down>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f103 0218 	add.w	r2, r3, #24
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	695b      	ldr	r3, [r3, #20]
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f000 fa37 	bl	800ed34 <ft5336_distance_zoom>
 800e8c6:	4602      	mov	r2, r0
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800e8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e8da:	68fb      	ldr	r3, [r7, #12]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	3318      	adds	r3, #24
 800e8f2:	6839      	ldr	r1, [r7, #0]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 fa3f 	bl	800ed78 <ft5336_chip_id>
 800e8fa:	4603      	mov	r3, r0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3708      	adds	r7, #8
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f908 	bl	800eb28 <FT5336_DetectTouch>
 800e918:	4603      	mov	r3, r0
 800e91a:	461a      	mov	r2, r3
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f103 0018 	add.w	r0, r3, #24
 800e926:	f107 0208 	add.w	r2, r7, #8
 800e92a:	2304      	movs	r3, #4
 800e92c:	2103      	movs	r1, #3
 800e92e:	f000 f94f 	bl	800ebd0 <ft5336_read_reg>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800e938:	f04f 33ff 	mov.w	r3, #4294967295
 800e93c:	60fb      	str	r3, [r7, #12]
 800e93e:	e00f      	b.n	800e960 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800e940:	7a3b      	ldrb	r3, [r7, #8]
 800e942:	021b      	lsls	r3, r3, #8
 800e944:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e948:	7a7a      	ldrb	r2, [r7, #9]
 800e94a:	431a      	orrs	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800e950:	7abb      	ldrb	r3, [r7, #10]
 800e952:	021b      	lsls	r3, r3, #8
 800e954:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e958:	7afa      	ldrb	r2, [r7, #11]
 800e95a:	431a      	orrs	r2, r3
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e960:	68fb      	ldr	r3, [r7, #12]
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b08c      	sub	sp, #48	@ 0x30
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800e974:	2300      	movs	r3, #0
 800e976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f8d5 	bl	800eb28 <FT5336_DetectTouch>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f103 0018 	add.w	r0, r3, #24
 800e98c:	f107 0208 	add.w	r2, r7, #8
 800e990:	231e      	movs	r3, #30
 800e992:	2103      	movs	r1, #3
 800e994:	f000 f91c 	bl	800ebd0 <ft5336_read_reg>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d003      	beq.n	800e9a6 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800e99e:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9a4:	e077      	b.n	800ea96 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9aa:	e071      	b.n	800ea90 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800e9ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	4413      	add	r3, r2
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	3330      	adds	r3, #48	@ 0x30
 800e9b8:	443b      	add	r3, r7
 800e9ba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800e9c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	005b      	lsls	r3, r3, #1
 800e9ce:	3301      	adds	r3, #1
 800e9d0:	3330      	adds	r3, #48	@ 0x30
 800e9d2:	443b      	add	r3, r7
 800e9d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9d8:	ea41 0203 	orr.w	r2, r1, r3
 800e9dc:	6839      	ldr	r1, [r7, #0]
 800e9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e0:	009b      	lsls	r3, r3, #2
 800e9e2:	440b      	add	r3, r1
 800e9e4:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800e9e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	005b      	lsls	r3, r3, #1
 800e9ec:	4413      	add	r3, r2
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	3302      	adds	r3, #2
 800e9f2:	3330      	adds	r3, #48	@ 0x30
 800e9f4:	443b      	add	r3, r7
 800e9f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800e9fa:	021b      	lsls	r3, r3, #8
 800e9fc:	f403 6170 	and.w	r1, r3, #3840	@ 0xf00
 800ea00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea02:	4613      	mov	r3, r2
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	4413      	add	r3, r2
 800ea08:	005b      	lsls	r3, r3, #1
 800ea0a:	3303      	adds	r3, #3
 800ea0c:	3330      	adds	r3, #48	@ 0x30
 800ea0e:	443b      	add	r3, r7
 800ea10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ea14:	4319      	orrs	r1, r3
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea1a:	3206      	adds	r2, #6
 800ea1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800ea20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea22:	4613      	mov	r3, r2
 800ea24:	005b      	lsls	r3, r3, #1
 800ea26:	4413      	add	r3, r2
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	3330      	adds	r3, #48	@ 0x30
 800ea2c:	443b      	add	r3, r7
 800ea2e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ea32:	099b      	lsrs	r3, r3, #6
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	4619      	mov	r1, r3
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea3c:	3210      	adds	r2, #16
 800ea3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800ea42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea44:	4613      	mov	r3, r2
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	4413      	add	r3, r2
 800ea4a:	005b      	lsls	r3, r3, #1
 800ea4c:	3304      	adds	r3, #4
 800ea4e:	3330      	adds	r3, #48	@ 0x30
 800ea50:	443b      	add	r3, r7
 800ea52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ea56:	4619      	mov	r1, r3
 800ea58:	683a      	ldr	r2, [r7, #0]
 800ea5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea5c:	330a      	adds	r3, #10
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	4413      	add	r3, r2
 800ea62:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800ea64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea66:	4613      	mov	r3, r2
 800ea68:	005b      	lsls	r3, r3, #1
 800ea6a:	4413      	add	r3, r2
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	3305      	adds	r3, #5
 800ea70:	3330      	adds	r3, #48	@ 0x30
 800ea72:	443b      	add	r3, r7
 800ea74:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ea78:	091b      	lsrs	r3, r3, #4
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea82:	3314      	adds	r3, #20
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4413      	add	r3, r2
 800ea88:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800ea8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea92:	2b04      	cmp	r3, #4
 800ea94:	d98a      	bls.n	800e9ac <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800ea96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3730      	adds	r7, #48	@ 0x30
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	3318      	adds	r3, #24
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	4618      	mov	r0, r3
 800eab2:	f000 f8bb 	bl	800ec2c <ft5336_gest_id>
 800eab6:	4603      	mov	r3, r0
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	3318      	adds	r3, #24
 800eacc:	2101      	movs	r1, #1
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 f941 	bl	800ed56 <ft5336_g_mode>
 800ead4:	4603      	mov	r3, r0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}

0800eade <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800eade:	b580      	push	{r7, lr}
 800eae0:	b082      	sub	sp, #8
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3318      	adds	r3, #24
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f000 f932 	bl	800ed56 <ft5336_g_mode>
 800eaf2:	4603      	mov	r3, r0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	370c      	adds	r7, #12
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b083      	sub	sp, #12
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3318      	adds	r3, #24
 800eb34:	f107 020b 	add.w	r2, r7, #11
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f000 f886 	bl	800ec4c <ft5336_td_status>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d003      	beq.n	800eb4e <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800eb46:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	e007      	b.n	800eb5e <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800eb4e:	7afb      	ldrb	r3, [r7, #11]
 800eb50:	2b05      	cmp	r3, #5
 800eb52:	d902      	bls.n	800eb5a <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]
 800eb58:	e001      	b.n	800eb5e <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800eb5a:	7afb      	ldrb	r3, [r7, #11]
 800eb5c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eb68:	b590      	push	{r4, r7, lr}
 800eb6a:	b087      	sub	sp, #28
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	461a      	mov	r2, r3
 800eb74:	460b      	mov	r3, r1
 800eb76:	72fb      	strb	r3, [r7, #11]
 800eb78:	4613      	mov	r3, r2
 800eb7a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	691c      	ldr	r4, [r3, #16]
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	8918      	ldrh	r0, [r3, #8]
 800eb88:	7afb      	ldrb	r3, [r7, #11]
 800eb8a:	b299      	uxth	r1, r3
 800eb8c:	893b      	ldrh	r3, [r7, #8]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	47a0      	blx	r4
 800eb92:	4603      	mov	r3, r0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	371c      	adds	r7, #28
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd90      	pop	{r4, r7, pc}

0800eb9c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800eb9c:	b590      	push	{r4, r7, lr}
 800eb9e:	b087      	sub	sp, #28
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	607a      	str	r2, [r7, #4]
 800eba6:	461a      	mov	r2, r3
 800eba8:	460b      	mov	r3, r1
 800ebaa:	72fb      	strb	r3, [r7, #11]
 800ebac:	4613      	mov	r3, r2
 800ebae:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	68dc      	ldr	r4, [r3, #12]
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	8918      	ldrh	r0, [r3, #8]
 800ebbc:	7afb      	ldrb	r3, [r7, #11]
 800ebbe:	b299      	uxth	r1, r3
 800ebc0:	893b      	ldrh	r3, [r7, #8]
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	47a0      	blx	r4
 800ebc6:	4603      	mov	r3, r0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	371c      	adds	r7, #28
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd90      	pop	{r4, r7, pc}

0800ebd0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800ebd0:	b590      	push	{r4, r7, lr}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	607a      	str	r2, [r7, #4]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	460b      	mov	r3, r1
 800ebde:	72fb      	strb	r3, [r7, #11]
 800ebe0:	4613      	mov	r3, r2
 800ebe2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	685c      	ldr	r4, [r3, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6898      	ldr	r0, [r3, #8]
 800ebec:	893b      	ldrh	r3, [r7, #8]
 800ebee:	7af9      	ldrb	r1, [r7, #11]
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	47a0      	blx	r4
 800ebf4:	4603      	mov	r3, r0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3714      	adds	r7, #20
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd90      	pop	{r4, r7, pc}

0800ebfe <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ebfe:	b590      	push	{r4, r7, lr}
 800ec00:	b085      	sub	sp, #20
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	60f8      	str	r0, [r7, #12]
 800ec06:	607a      	str	r2, [r7, #4]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	72fb      	strb	r3, [r7, #11]
 800ec0e:	4613      	mov	r3, r2
 800ec10:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681c      	ldr	r4, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6898      	ldr	r0, [r3, #8]
 800ec1a:	893b      	ldrh	r3, [r7, #8]
 800ec1c:	7af9      	ldrb	r1, [r7, #11]
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	47a0      	blx	r4
 800ec22:	4603      	mov	r3, r0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd90      	pop	{r4, r7, pc}

0800ec2c <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800ec36:	2301      	movs	r3, #1
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7ff ffc7 	bl	800ebd0 <ft5336_read_reg>
 800ec42:	4603      	mov	r3, r0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800ec56:	2301      	movs	r3, #1
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	2102      	movs	r1, #2
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ffb7 	bl	800ebd0 <ft5336_read_reg>
 800ec62:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	f003 030f 	and.w	r3, r3, #15
 800ec72:	b2da      	uxtb	r2, r3
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	781a      	ldrb	r2, [r3, #0]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800ec80:	68fb      	ldr	r3, [r7, #12]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	460b      	mov	r3, r1
 800ec94:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800ec96:	1cfa      	adds	r2, r7, #3
 800ec98:	2301      	movs	r3, #1
 800ec9a:	2191      	movs	r1, #145	@ 0x91
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f7ff ffae 	bl	800ebfe <ft5336_write_reg>
 800eca2:	4603      	mov	r3, r0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800ecb8:	1cfa      	adds	r2, r7, #3
 800ecba:	2301      	movs	r3, #1
 800ecbc:	2192      	movs	r1, #146	@ 0x92
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff ff9d 	bl	800ebfe <ft5336_write_reg>
 800ecc4:	4603      	mov	r3, r0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800ecda:	1cfa      	adds	r2, r7, #3
 800ecdc:	2301      	movs	r3, #1
 800ecde:	2193      	movs	r1, #147	@ 0x93
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7ff ff8c 	bl	800ebfe <ft5336_write_reg>
 800ece6:	4603      	mov	r3, r0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800ecfc:	1cfa      	adds	r2, r7, #3
 800ecfe:	2301      	movs	r3, #1
 800ed00:	2194      	movs	r1, #148	@ 0x94
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7ff ff7b 	bl	800ebfe <ft5336_write_reg>
 800ed08:	4603      	mov	r3, r0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}

0800ed12 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b082      	sub	sp, #8
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800ed1e:	1cfa      	adds	r2, r7, #3
 800ed20:	2301      	movs	r3, #1
 800ed22:	2195      	movs	r1, #149	@ 0x95
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f7ff ff6a 	bl	800ebfe <ft5336_write_reg>
 800ed2a:	4603      	mov	r3, r0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800ed40:	1cfa      	adds	r2, r7, #3
 800ed42:	2301      	movs	r3, #1
 800ed44:	2196      	movs	r1, #150	@ 0x96
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff ff59 	bl	800ebfe <ft5336_write_reg>
 800ed4c:	4603      	mov	r3, r0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800ed62:	1cfa      	adds	r2, r7, #3
 800ed64:	2301      	movs	r3, #1
 800ed66:	21a4      	movs	r1, #164	@ 0xa4
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff ff48 	bl	800ebfe <ft5336_write_reg>
 800ed6e:	4603      	mov	r3, r0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800ed82:	2301      	movs	r3, #1
 800ed84:	683a      	ldr	r2, [r7, #0]
 800ed86:	21a8      	movs	r1, #168	@ 0xa8
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7ff ff21 	bl	800ebd0 <ft5336_read_reg>
 800ed8e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d107      	bne.n	800eda6 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	781a      	ldrb	r2, [r3, #0]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	781a      	ldrb	r2, [r3, #0]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800eda6:	68fb      	ldr	r3, [r7, #12]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b083      	sub	sp, #12
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800edbe:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800edc6:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edce:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800edd8:	fbb2 f2f3 	udiv	r2, r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800ede8:	fbb2 f2f3 	udiv	r2, r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	370c      	adds	r7, #12
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b090      	sub	sp, #64	@ 0x40
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	460b      	mov	r3, r1
 800ee08:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ee0a:	78fb      	ldrb	r3, [r7, #3]
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d102      	bne.n	800ee16 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800ee10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ee14:	e001      	b.n	800ee1a <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800ee16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ee1a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800ee1c:	23b7      	movs	r3, #183	@ 0xb7
 800ee1e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ee20:	2300      	movs	r3, #0
 800ee22:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ee24:	2300      	movs	r3, #0
 800ee26:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ee30:	2300      	movs	r3, #0
 800ee32:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ee34:	2300      	movs	r3, #0
 800ee36:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 f860 	bl	800ef06 <MT25TL01G_WriteEnable>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee4c:	f06f 0301 	mvn.w	r3, #1
 800ee50:	e019      	b.n	800ee86 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ee52:	f107 0308 	add.w	r3, r7, #8
 800ee56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f004 fd45 	bl	80138ec <HAL_QSPI_Command>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee68:	f06f 0301 	mvn.w	r3, #1
 800ee6c:	e00b      	b.n	800ee86 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	4619      	mov	r1, r3
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 f80b 	bl	800ee8e <MT25TL01G_AutoPollingMemReady>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d002      	beq.n	800ee84 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ee7e:	f06f 0301 	mvn.w	r3, #1
 800ee82:	e000      	b.n	800ee86 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800ee84:	2300      	movs	r3, #0
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3740      	adds	r7, #64	@ 0x40
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b096      	sub	sp, #88	@ 0x58
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ee9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ee9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800eea0:	2305      	movs	r3, #5
 800eea2:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800eea4:	2300      	movs	r3, #0
 800eea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800eeac:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800eeb0:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 2;
 800eeb2:	2302      	movs	r3, #2
 800eeb4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800eeba:	2300      	movs	r3, #0
 800eebc:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800eebe:	2300      	movs	r3, #0
 800eec0:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800eec6:	2300      	movs	r3, #0
 800eec8:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800eeca:	2310      	movs	r3, #16
 800eecc:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800eece:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800eed2:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800eed4:	f240 1301 	movw	r3, #257	@ 0x101
 800eed8:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800eeda:	2302      	movs	r3, #2
 800eedc:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800eede:	f107 0208 	add.w	r2, r7, #8
 800eee2:	f107 0120 	add.w	r1, r7, #32
 800eee6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f004 fe8b 	bl	8013c06 <HAL_QSPI_AutoPolling>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800eef6:	f06f 0304 	mvn.w	r3, #4
 800eefa:	e000      	b.n	800eefe <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800eefc:	2300      	movs	r3, #0

}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3758      	adds	r7, #88	@ 0x58
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}

0800ef06 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ef06:	b580      	push	{r7, lr}
 800ef08:	b096      	sub	sp, #88	@ 0x58
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
 800ef0e:	460b      	mov	r3, r1
 800ef10:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ef12:	78fb      	ldrb	r3, [r7, #3]
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d102      	bne.n	800ef1e <MT25TL01G_WriteEnable+0x18>
 800ef18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ef1c:	e001      	b.n	800ef22 <MT25TL01G_WriteEnable+0x1c>
 800ef1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ef22:	63bb      	str	r3, [r7, #56]	@ 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800ef24:	2306      	movs	r3, #6
 800ef26:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800ef30:	2300      	movs	r3, #0
 800ef32:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 800ef34:	2300      	movs	r3, #0
 800ef36:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ef40:	2300      	movs	r3, #0
 800ef42:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef44:	f107 0320 	add.w	r3, r7, #32
 800ef48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f004 fccc 	bl	80138ec <HAL_QSPI_Command>
 800ef54:	4603      	mov	r3, r0
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d002      	beq.n	800ef60 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ef5a:	f06f 0301 	mvn.w	r3, #1
 800ef5e:	e029      	b.n	800efb4 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800ef60:	f240 2302 	movw	r3, #514	@ 0x202
 800ef64:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800ef66:	f240 2302 	movw	r3, #514	@ 0x202
 800ef6a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800ef70:	2302      	movs	r3, #2
 800ef72:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800ef74:	2310      	movs	r3, #16
 800ef76:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ef78:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ef7c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ef7e:	2305      	movs	r3, #5
 800ef80:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ef82:	78fb      	ldrb	r3, [r7, #3]
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	d102      	bne.n	800ef8e <MT25TL01G_WriteEnable+0x88>
 800ef88:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800ef8c:	e001      	b.n	800ef92 <MT25TL01G_WriteEnable+0x8c>
 800ef8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ef92:	647b      	str	r3, [r7, #68]	@ 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ef94:	f107 0208 	add.w	r2, r7, #8
 800ef98:	f107 0120 	add.w	r1, r7, #32
 800ef9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800efa0:	6878      	ldr	r0, [r7, #4]
 800efa2:	f004 fe30 	bl	8013c06 <HAL_QSPI_AutoPolling>
 800efa6:	4603      	mov	r3, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800efac:	f06f 0304 	mvn.w	r3, #4
 800efb0:	e000      	b.n	800efb4 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3758      	adds	r7, #88	@ 0x58
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b090      	sub	sp, #64	@ 0x40
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800efc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efc8:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800efca:	2335      	movs	r3, #53	@ 0x35
 800efcc:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800efce:	2300      	movs	r3, #0
 800efd0:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800efd2:	2300      	movs	r3, #0
 800efd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800efd6:	2300      	movs	r3, #0
 800efd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800efde:	2300      	movs	r3, #0
 800efe0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800efe2:	2300      	movs	r3, #0
 800efe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800efe6:	2300      	movs	r3, #0
 800efe8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800efea:	f107 0308 	add.w	r3, r7, #8
 800efee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eff2:	4619      	mov	r1, r3
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f004 fc79 	bl	80138ec <HAL_QSPI_Command>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f000:	f06f 0301 	mvn.w	r3, #1
 800f004:	e000      	b.n	800f008 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3740      	adds	r7, #64	@ 0x40
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b090      	sub	sp, #64	@ 0x40
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f01c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800f01e:	23f5      	movs	r3, #245	@ 0xf5
 800f020:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f022:	2300      	movs	r3, #0
 800f024:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f026:	2300      	movs	r3, #0
 800f028:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f02a:	2300      	movs	r3, #0
 800f02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f032:	2300      	movs	r3, #0
 800f034:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f036:	2300      	movs	r3, #0
 800f038:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f03a:	2300      	movs	r3, #0
 800f03c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f03e:	f107 0308 	add.w	r3, r7, #8
 800f042:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f046:	4619      	mov	r1, r3
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f004 fc4f 	bl	80138ec <HAL_QSPI_Command>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f054:	f06f 0301 	mvn.w	r3, #1
 800f058:	e000      	b.n	800f05c <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3740      	adds	r7, #64	@ 0x40
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b092      	sub	sp, #72	@ 0x48
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f070:	78fb      	ldrb	r3, [r7, #3]
 800f072:	2b03      	cmp	r3, #3
 800f074:	d83a      	bhi.n	800f0ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800f076:	a201      	add	r2, pc, #4	@ (adr r2, 800f07c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f08d 	.word	0x0800f08d
 800f080:	0800f0a5 	.word	0x0800f0a5
 800f084:	0800f0bd 	.word	0x0800f0bd
 800f088:	0800f0d5 	.word	0x0800f0d5
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f08c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f090:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800f092:	230e      	movs	r3, #14
 800f094:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f09a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f09c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f0a0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f0a2:	e023      	b.n	800f0ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f0a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800f0aa:	233d      	movs	r3, #61	@ 0x3d
 800f0ac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f0b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f0b8:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f0ba:	e017      	b.n	800f0ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f0bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800f0c2:	23ee      	movs	r3, #238	@ 0xee
 800f0c4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f0c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f0ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f0cc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f0d0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f0d2:	e00b      	b.n	800f0ec <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f0d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f0d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800f0da:	23ed      	movs	r3, #237	@ 0xed
 800f0dc:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f0de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f0e4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f0e8:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f0ea:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f0ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800f0f0:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800f0f6:	2308      	movs	r3, #8
 800f0f8:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800f0fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800f100:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f104:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f106:	2300      	movs	r3, #0
 800f108:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f10a:	2300      	movs	r3, #0
 800f10c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f112:	f107 0208 	add.w	r2, r7, #8
 800f116:	f107 0310 	add.w	r3, r7, #16
 800f11a:	4619      	mov	r1, r3
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f004 fde9 	bl	8013cf4 <HAL_QSPI_MemoryMapped>
 800f122:	4603      	mov	r3, r0
 800f124:	2b00      	cmp	r3, #0
 800f126:	d002      	beq.n	800f12e <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f128:	f06f 0305 	mvn.w	r3, #5
 800f12c:	e000      	b.n	800f130 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800f12e:	2300      	movs	r3, #0
}
 800f130:	4618      	mov	r0, r3
 800f132:	3748      	adds	r7, #72	@ 0x48
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b092      	sub	sp, #72	@ 0x48
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	2b03      	cmp	r3, #3
 800f148:	d83a      	bhi.n	800f1c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800f14a:	a201      	add	r2, pc, #4	@ (adr r2, 800f150 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800f14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f150:	0800f161 	.word	0x0800f161
 800f154:	0800f179 	.word	0x0800f179
 800f158:	0800f191 	.word	0x0800f191
 800f15c:	0800f1a9 	.word	0x0800f1a9
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f164:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800f166:	230c      	movs	r3, #12
 800f168:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800f16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800f170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800f174:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 800f176:	e023      	b.n	800f1c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f178:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f17c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f17e:	23bc      	movs	r3, #188	@ 0xbc
 800f180:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800f182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f186:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800f188:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f18c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f18e:	e017      	b.n	800f1c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800f190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f194:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800f196:	23ec      	movs	r3, #236	@ 0xec
 800f198:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f19a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f19e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f1a0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f1a4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f1a6:	e00b      	b.n	800f1c0 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800f1a8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f1ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800f1ae:	23eb      	movs	r3, #235	@ 0xeb
 800f1b0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800f1b2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800f1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800f1b8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800f1bc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800f1be:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800f1c0:	2308      	movs	r3, #8
 800f1c2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800f1c4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800f1c8:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800f1e2:	f107 0208 	add.w	r2, r7, #8
 800f1e6:	f107 0310 	add.w	r3, r7, #16
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f004 fd81 	bl	8013cf4 <HAL_QSPI_MemoryMapped>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d002      	beq.n	800f1fe <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800f1f8:	f06f 0305 	mvn.w	r3, #5
 800f1fc:	e000      	b.n	800f200 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3748      	adds	r7, #72	@ 0x48
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b090      	sub	sp, #64	@ 0x40
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	460b      	mov	r3, r1
 800f212:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	2b03      	cmp	r3, #3
 800f218:	d102      	bne.n	800f220 <MT25TL01G_ResetEnable+0x18>
 800f21a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f21e:	e001      	b.n	800f224 <MT25TL01G_ResetEnable+0x1c>
 800f220:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f224:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800f226:	2366      	movs	r3, #102	@ 0x66
 800f228:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f22a:	2300      	movs	r3, #0
 800f22c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f22e:	2300      	movs	r3, #0
 800f230:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f232:	2300      	movs	r3, #0
 800f234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f23a:	2300      	movs	r3, #0
 800f23c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f23e:	2300      	movs	r3, #0
 800f240:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f242:	2300      	movs	r3, #0
 800f244:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f246:	f107 0308 	add.w	r3, r7, #8
 800f24a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f24e:	4619      	mov	r1, r3
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f004 fb4b 	bl	80138ec <HAL_QSPI_Command>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f25c:	f06f 0301 	mvn.w	r3, #1
 800f260:	e000      	b.n	800f264 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800f262:	2300      	movs	r3, #0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3740      	adds	r7, #64	@ 0x40
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b090      	sub	sp, #64	@ 0x40
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d102      	bne.n	800f284 <MT25TL01G_ResetMemory+0x18>
 800f27e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800f282:	e001      	b.n	800f288 <MT25TL01G_ResetMemory+0x1c>
 800f284:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f288:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800f28a:	2399      	movs	r3, #153	@ 0x99
 800f28c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800f28e:	2300      	movs	r3, #0
 800f290:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800f292:	2300      	movs	r3, #0
 800f294:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800f296:	2300      	movs	r3, #0
 800f298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800f29a:	2300      	movs	r3, #0
 800f29c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800f2aa:	f107 0308 	add.w	r3, r7, #8
 800f2ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f004 fb19 	bl	80138ec <HAL_QSPI_Command>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800f2c0:	f06f 0301 	mvn.w	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800f2c6:	2300      	movs	r3, #0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3740      	adds	r7, #64	@ 0x40
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800f2da:	f04f 33ff 	mov.w	r3, #4294967295
 800f2de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 f832 	bl	800f350 <MT48LC4M32B2_ClockEnable>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d128      	bne.n	800f344 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800f2f2:	2001      	movs	r0, #1
 800f2f4:	f000 f8e2 	bl	800f4bc <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 f84a 	bl	800f398 <MT48LC4M32B2_Precharge>
 800f304:	4603      	mov	r3, r0
 800f306:	2b00      	cmp	r3, #0
 800f308:	d11c      	bne.n	800f344 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	6819      	ldr	r1, [r3, #0]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	461a      	mov	r2, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f897 	bl	800f448 <MT48LC4M32B2_RefreshMode>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d111      	bne.n	800f344 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f000 f85c 	bl	800f3e0 <MT48LC4M32B2_ModeRegConfig>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10a      	bne.n	800f344 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	689b      	ldr	r3, [r3, #8]
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f8ad 	bl	800f494 <MT48LC4M32B2_RefreshRate>
 800f33a:	4603      	mov	r3, r0
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d101      	bne.n	800f344 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800f340:	2300      	movs	r3, #0
 800f342:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800f344:	68fb      	ldr	r3, [r7, #12]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
	...

0800f350 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800f35a:	4b0e      	ldr	r3, [pc, #56]	@ (800f394 <MT48LC4M32B2_ClockEnable+0x44>)
 800f35c:	2201      	movs	r2, #1
 800f35e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f360:	4a0c      	ldr	r2, [pc, #48]	@ (800f394 <MT48LC4M32B2_ClockEnable+0x44>)
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f366:	4b0b      	ldr	r3, [pc, #44]	@ (800f394 <MT48LC4M32B2_ClockEnable+0x44>)
 800f368:	2201      	movs	r2, #1
 800f36a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f36c:	4b09      	ldr	r3, [pc, #36]	@ (800f394 <MT48LC4M32B2_ClockEnable+0x44>)
 800f36e:	2200      	movs	r2, #0
 800f370:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f372:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f376:	4907      	ldr	r1, [pc, #28]	@ (800f394 <MT48LC4M32B2_ClockEnable+0x44>)
 800f378:	6878      	ldr	r0, [r7, #4]
 800f37a:	f007 fbc3 	bl	8016b04 <HAL_SDRAM_SendCommand>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	d002      	beq.n	800f38a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f384:	f04f 33ff 	mov.w	r3, #4294967295
 800f388:	e000      	b.n	800f38c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f38a:	2300      	movs	r3, #0
  }
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}
 800f394:	2400acc0 	.word	0x2400acc0

0800f398 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
 800f3a0:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800f3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800f3dc <MT48LC4M32B2_Precharge+0x44>)
 800f3a4:	2202      	movs	r2, #2
 800f3a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800f3a8:	4a0c      	ldr	r2, [pc, #48]	@ (800f3dc <MT48LC4M32B2_Precharge+0x44>)
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800f3dc <MT48LC4M32B2_Precharge+0x44>)
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f3b4:	4b09      	ldr	r3, [pc, #36]	@ (800f3dc <MT48LC4M32B2_Precharge+0x44>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f3ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f3be:	4907      	ldr	r1, [pc, #28]	@ (800f3dc <MT48LC4M32B2_Precharge+0x44>)
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f007 fb9f 	bl	8016b04 <HAL_SDRAM_SendCommand>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	e000      	b.n	800f3d4 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f3d2:	2300      	movs	r3, #0
  }
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}
 800f3dc:	2400acc0 	.word	0x2400acc0

0800f3e0 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f3f2:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800f3f8:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800f3fe:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800f408:	4b0e      	ldr	r3, [pc, #56]	@ (800f444 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f40a:	2204      	movs	r2, #4
 800f40c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	4a0c      	ldr	r2, [pc, #48]	@ (800f444 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f414:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800f416:	4b0b      	ldr	r3, [pc, #44]	@ (800f444 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f418:	2201      	movs	r2, #1
 800f41a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800f41c:	4a09      	ldr	r2, [pc, #36]	@ (800f444 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f426:	4907      	ldr	r1, [pc, #28]	@ (800f444 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f007 fb6b 	bl	8016b04 <HAL_SDRAM_SendCommand>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b00      	cmp	r3, #0
 800f432:	d002      	beq.n	800f43a <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800f434:	f04f 33ff 	mov.w	r3, #4294967295
 800f438:	e000      	b.n	800f43c <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f43a:	2300      	movs	r3, #0
  }
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3710      	adds	r7, #16
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	2400acc0 	.word	0x2400acc0

0800f448 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800f454:	4a0e      	ldr	r2, [pc, #56]	@ (800f490 <MT48LC4M32B2_RefreshMode+0x48>)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800f45a:	4a0d      	ldr	r2, [pc, #52]	@ (800f490 <MT48LC4M32B2_RefreshMode+0x48>)
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800f460:	4b0b      	ldr	r3, [pc, #44]	@ (800f490 <MT48LC4M32B2_RefreshMode+0x48>)
 800f462:	2208      	movs	r2, #8
 800f464:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800f466:	4b0a      	ldr	r3, [pc, #40]	@ (800f490 <MT48LC4M32B2_RefreshMode+0x48>)
 800f468:	2200      	movs	r2, #0
 800f46a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800f46c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f470:	4907      	ldr	r1, [pc, #28]	@ (800f490 <MT48LC4M32B2_RefreshMode+0x48>)
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f007 fb46 	bl	8016b04 <HAL_SDRAM_SendCommand>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d002      	beq.n	800f484 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800f47e:	f04f 33ff 	mov.w	r3, #4294967295
 800f482:	e000      	b.n	800f486 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f484:	2300      	movs	r3, #0
  }
}
 800f486:	4618      	mov	r0, r3
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	2400acc0 	.word	0x2400acc0

0800f494 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800f49e:	6839      	ldr	r1, [r7, #0]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f007 fb64 	bl	8016b6e <HAL_SDRAM_ProgramRefreshRate>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800f4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b0:	e000      	b.n	800f4b4 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800f4b2:	2300      	movs	r3, #0
  }
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800f4c4:	f001 fcfc 	bl	8010ec0 <HAL_GetTick>
 800f4c8:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800f4ca:	bf00      	nop
 800f4cc:	f001 fcf8 	bl	8010ec0 <HAL_GetTick>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d8f7      	bhi.n	800f4cc <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
	...

0800f4e8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800f4f2:	4b16      	ldr	r3, [pc, #88]	@ (800f54c <BSP_I2C4_Init+0x64>)
 800f4f4:	4a16      	ldr	r2, [pc, #88]	@ (800f550 <BSP_I2C4_Init+0x68>)
 800f4f6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800f4f8:	4b16      	ldr	r3, [pc, #88]	@ (800f554 <BSP_I2C4_Init+0x6c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d11f      	bne.n	800f540 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800f500:	4b14      	ldr	r3, [pc, #80]	@ (800f554 <BSP_I2C4_Init+0x6c>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3301      	adds	r3, #1
 800f506:	4a13      	ldr	r2, [pc, #76]	@ (800f554 <BSP_I2C4_Init+0x6c>)
 800f508:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800f50a:	4810      	ldr	r0, [pc, #64]	@ (800f54c <BSP_I2C4_Init+0x64>)
 800f50c:	f002 ff00 	bl	8012310 <HAL_I2C_GetState>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d114      	bne.n	800f540 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800f516:	480d      	ldr	r0, [pc, #52]	@ (800f54c <BSP_I2C4_Init+0x64>)
 800f518:	f000 fb60 	bl	800fbdc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800f51c:	f005 fed4 	bl	80152c8 <HAL_RCC_GetPCLK2Freq>
 800f520:	4603      	mov	r3, r0
 800f522:	490d      	ldr	r1, [pc, #52]	@ (800f558 <BSP_I2C4_Init+0x70>)
 800f524:	4618      	mov	r0, r3
 800f526:	f000 f8e3 	bl	800f6f0 <I2C_GetTiming>
 800f52a:	4603      	mov	r3, r0
 800f52c:	4619      	mov	r1, r3
 800f52e:	4807      	ldr	r0, [pc, #28]	@ (800f54c <BSP_I2C4_Init+0x64>)
 800f530:	f000 f838 	bl	800f5a4 <MX_I2C4_Init>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d002      	beq.n	800f540 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800f53a:	f06f 0307 	mvn.w	r3, #7
 800f53e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800f540:	687b      	ldr	r3, [r7, #4]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	2400b6d8 	.word	0x2400b6d8
 800f550:	58001c00 	.word	0x58001c00
 800f554:	2400acd0 	.word	0x2400acd0
 800f558:	000186a0 	.word	0x000186a0

0800f55c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800f562:	2300      	movs	r3, #0
 800f564:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800f566:	4b0d      	ldr	r3, [pc, #52]	@ (800f59c <BSP_I2C4_DeInit+0x40>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4a0b      	ldr	r2, [pc, #44]	@ (800f59c <BSP_I2C4_DeInit+0x40>)
 800f56e:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800f570:	4b0a      	ldr	r3, [pc, #40]	@ (800f59c <BSP_I2C4_DeInit+0x40>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10b      	bne.n	800f590 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800f578:	4809      	ldr	r0, [pc, #36]	@ (800f5a0 <BSP_I2C4_DeInit+0x44>)
 800f57a:	f000 fb9b 	bl	800fcb4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800f57e:	4808      	ldr	r0, [pc, #32]	@ (800f5a0 <BSP_I2C4_DeInit+0x44>)
 800f580:	f002 fc54 	bl	8011e2c <HAL_I2C_DeInit>
 800f584:	4603      	mov	r3, r0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800f58a:	f06f 0307 	mvn.w	r3, #7
 800f58e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800f590:	687b      	ldr	r3, [r7, #4]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3708      	adds	r7, #8
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}
 800f59a:	bf00      	nop
 800f59c:	2400acd0 	.word	0x2400acd0
 800f5a0:	2400b6d8 	.word	0x2400b6d8

0800f5a4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b084      	sub	sp, #16
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f002 fb92 	bl	8011d0c <HAL_I2C_Init>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	73fb      	strb	r3, [r7, #15]
 800f5f2:	e014      	b.n	800f61e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800f5f8:	68b9      	ldr	r1, [r7, #8]
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f003 f95a 	bl	80128b4 <HAL_I2CEx_ConfigAnalogFilter>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d002      	beq.n	800f60c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	73fb      	strb	r3, [r7, #15]
 800f60a:	e008      	b.n	800f61e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800f60c:	2100      	movs	r1, #0
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f003 f99b 	bl	801294a <HAL_I2CEx_ConfigDigitalFilter>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d001      	beq.n	800f61e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b088      	sub	sp, #32
 800f62c:	af02      	add	r7, sp, #8
 800f62e:	60ba      	str	r2, [r7, #8]
 800f630:	461a      	mov	r2, r3
 800f632:	4603      	mov	r3, r0
 800f634:	81fb      	strh	r3, [r7, #14]
 800f636:	460b      	mov	r3, r1
 800f638:	81bb      	strh	r3, [r7, #12]
 800f63a:	4613      	mov	r3, r2
 800f63c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f63e:	89b9      	ldrh	r1, [r7, #12]
 800f640:	89f8      	ldrh	r0, [r7, #14]
 800f642:	88fb      	ldrh	r3, [r7, #6]
 800f644:	9300      	str	r3, [sp, #0]
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2201      	movs	r2, #1
 800f64a:	f000 fb57 	bl	800fcfc <I2C4_WriteReg>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d102      	bne.n	800f65a <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]
 800f658:	e00c      	b.n	800f674 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f65a:	4809      	ldr	r0, [pc, #36]	@ (800f680 <BSP_I2C4_WriteReg+0x58>)
 800f65c:	f002 fe66 	bl	801232c <HAL_I2C_GetError>
 800f660:	4603      	mov	r3, r0
 800f662:	2b04      	cmp	r3, #4
 800f664:	d103      	bne.n	800f66e <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f666:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f66a:	617b      	str	r3, [r7, #20]
 800f66c:	e002      	b.n	800f674 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f66e:	f06f 0303 	mvn.w	r3, #3
 800f672:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f674:	697b      	ldr	r3, [r7, #20]
}
 800f676:	4618      	mov	r0, r3
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	2400b6d8 	.word	0x2400b6d8

0800f684 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af02      	add	r7, sp, #8
 800f68a:	60ba      	str	r2, [r7, #8]
 800f68c:	461a      	mov	r2, r3
 800f68e:	4603      	mov	r3, r0
 800f690:	81fb      	strh	r3, [r7, #14]
 800f692:	460b      	mov	r3, r1
 800f694:	81bb      	strh	r3, [r7, #12]
 800f696:	4613      	mov	r3, r2
 800f698:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800f69a:	89b9      	ldrh	r1, [r7, #12]
 800f69c:	89f8      	ldrh	r0, [r7, #14]
 800f69e:	88fb      	ldrh	r3, [r7, #6]
 800f6a0:	9300      	str	r3, [sp, #0]
 800f6a2:	68bb      	ldr	r3, [r7, #8]
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f000 fb4f 	bl	800fd48 <I2C4_ReadReg>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d102      	bne.n	800f6b6 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	617b      	str	r3, [r7, #20]
 800f6b4:	e00c      	b.n	800f6d0 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800f6b6:	4809      	ldr	r0, [pc, #36]	@ (800f6dc <BSP_I2C4_ReadReg+0x58>)
 800f6b8:	f002 fe38 	bl	801232c <HAL_I2C_GetError>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b04      	cmp	r3, #4
 800f6c0:	d103      	bne.n	800f6ca <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800f6c2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800f6c6:	617b      	str	r3, [r7, #20]
 800f6c8:	e002      	b.n	800f6d0 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800f6ca:	f06f 0303 	mvn.w	r3, #3
 800f6ce:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800f6d0:	697b      	ldr	r3, [r7, #20]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	3718      	adds	r7, #24
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	2400b6d8 	.word	0x2400b6d8

0800f6e0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800f6e4:	f001 fbec 	bl	8010ec0 <HAL_GetTick>
 800f6e8:	4603      	mov	r3, r0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	bd80      	pop	{r7, pc}
	...

0800f6f0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d06b      	beq.n	800f7dc <I2C_GetTiming+0xec>
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d068      	beq.n	800f7dc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f70a:	2300      	movs	r3, #0
 800f70c:	613b      	str	r3, [r7, #16]
 800f70e:	e060      	b.n	800f7d2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f710:	4a35      	ldr	r2, [pc, #212]	@ (800f7e8 <I2C_GetTiming+0xf8>)
 800f712:	693b      	ldr	r3, [r7, #16]
 800f714:	212c      	movs	r1, #44	@ 0x2c
 800f716:	fb01 f303 	mul.w	r3, r1, r3
 800f71a:	4413      	add	r3, r2
 800f71c:	3304      	adds	r3, #4
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	683a      	ldr	r2, [r7, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	d352      	bcc.n	800f7cc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800f726:	4a30      	ldr	r2, [pc, #192]	@ (800f7e8 <I2C_GetTiming+0xf8>)
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	212c      	movs	r1, #44	@ 0x2c
 800f72c:	fb01 f303 	mul.w	r3, r1, r3
 800f730:	4413      	add	r3, r2
 800f732:	3308      	adds	r3, #8
 800f734:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d847      	bhi.n	800f7cc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800f73c:	6939      	ldr	r1, [r7, #16]
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f856 	bl	800f7f0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800f744:	6939      	ldr	r1, [r7, #16]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f940 	bl	800f9cc <I2C_Compute_SCLL_SCLH>
 800f74c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b7f      	cmp	r3, #127	@ 0x7f
 800f752:	d842      	bhi.n	800f7da <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f754:	4925      	ldr	r1, [pc, #148]	@ (800f7ec <I2C_GetTiming+0xfc>)
 800f756:	68fa      	ldr	r2, [r7, #12]
 800f758:	4613      	mov	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4413      	add	r3, r2
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	440b      	add	r3, r1
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f766:	4821      	ldr	r0, [pc, #132]	@ (800f7ec <I2C_GetTiming+0xfc>)
 800f768:	68fa      	ldr	r2, [r7, #12]
 800f76a:	4613      	mov	r3, r2
 800f76c:	009b      	lsls	r3, r3, #2
 800f76e:	4413      	add	r3, r2
 800f770:	009b      	lsls	r3, r3, #2
 800f772:	4403      	add	r3, r0
 800f774:	3304      	adds	r3, #4
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	051b      	lsls	r3, r3, #20
 800f77a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f77e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f780:	481a      	ldr	r0, [pc, #104]	@ (800f7ec <I2C_GetTiming+0xfc>)
 800f782:	68fa      	ldr	r2, [r7, #12]
 800f784:	4613      	mov	r3, r2
 800f786:	009b      	lsls	r3, r3, #2
 800f788:	4413      	add	r3, r2
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	4403      	add	r3, r0
 800f78e:	3308      	adds	r3, #8
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	041b      	lsls	r3, r3, #16
 800f794:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800f798:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800f79a:	4814      	ldr	r0, [pc, #80]	@ (800f7ec <I2C_GetTiming+0xfc>)
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	4613      	mov	r3, r2
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	4413      	add	r3, r2
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	4403      	add	r3, r0
 800f7a8:	330c      	adds	r3, #12
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	021b      	lsls	r3, r3, #8
 800f7ae:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800f7b0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800f7b2:	480e      	ldr	r0, [pc, #56]	@ (800f7ec <I2C_GetTiming+0xfc>)
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	009b      	lsls	r3, r3, #2
 800f7ba:	4413      	add	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4403      	add	r3, r0
 800f7c0:	3310      	adds	r3, #16
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800f7c6:	430b      	orrs	r3, r1
 800f7c8:	617b      	str	r3, [r7, #20]
        }
        break;
 800f7ca:	e006      	b.n	800f7da <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	613b      	str	r3, [r7, #16]
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	d99b      	bls.n	800f710 <I2C_GetTiming+0x20>
 800f7d8:	e000      	b.n	800f7dc <I2C_GetTiming+0xec>
        break;
 800f7da:	bf00      	nop
      }
    }
  }

  return ret;
 800f7dc:	697b      	ldr	r3, [r7, #20]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	0802d818 	.word	0x0802d818
 800f7ec:	2400acd4 	.word	0x2400acd4

0800f7f0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b08f      	sub	sp, #60	@ 0x3c
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800f7fa:	2310      	movs	r3, #16
 800f7fc:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	085a      	lsrs	r2, r3, #1
 800f802:	4b6e      	ldr	r3, [pc, #440]	@ (800f9bc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800f804:	4413      	add	r3, r2
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	fbb3 f3f2 	udiv	r3, r3, r2
 800f80c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800f80e:	2332      	movs	r3, #50	@ 0x32
 800f810:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800f812:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f816:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f818:	4a69      	ldr	r2, [pc, #420]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	212c      	movs	r1, #44	@ 0x2c
 800f81e:	fb01 f303 	mul.w	r3, r1, r3
 800f822:	4413      	add	r3, r2
 800f824:	3324      	adds	r3, #36	@ 0x24
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4618      	mov	r0, r3
 800f82a:	4a65      	ldr	r2, [pc, #404]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	212c      	movs	r1, #44	@ 0x2c
 800f830:	fb01 f303 	mul.w	r3, r1, r3
 800f834:	4413      	add	r3, r2
 800f836:	330c      	adds	r3, #12
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f83c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f83e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800f840:	495f      	ldr	r1, [pc, #380]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	202c      	movs	r0, #44	@ 0x2c
 800f846:	fb00 f303 	mul.w	r3, r0, r3
 800f84a:	440b      	add	r3, r1
 800f84c:	3328      	adds	r3, #40	@ 0x28
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3303      	adds	r3, #3
 800f852:	69f9      	ldr	r1, [r7, #28]
 800f854:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f85c:	4a58      	ldr	r2, [pc, #352]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	212c      	movs	r1, #44	@ 0x2c
 800f862:	fb01 f303 	mul.w	r3, r1, r3
 800f866:	4413      	add	r3, r2
 800f868:	3310      	adds	r3, #16
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	4618      	mov	r0, r3
 800f86e:	4a54      	ldr	r2, [pc, #336]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f870:	683b      	ldr	r3, [r7, #0]
 800f872:	212c      	movs	r1, #44	@ 0x2c
 800f874:	fb01 f303 	mul.w	r3, r1, r3
 800f878:	4413      	add	r3, r2
 800f87a:	3320      	adds	r3, #32
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f880:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f882:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800f884:	494e      	ldr	r1, [pc, #312]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	202c      	movs	r0, #44	@ 0x2c
 800f88a:	fb00 f303 	mul.w	r3, r0, r3
 800f88e:	440b      	add	r3, r1
 800f890:	3328      	adds	r3, #40	@ 0x28
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3304      	adds	r3, #4
 800f896:	69f9      	ldr	r1, [r7, #28]
 800f898:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800f8a0:	4a47      	ldr	r2, [pc, #284]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	212c      	movs	r1, #44	@ 0x2c
 800f8a6:	fb01 f303 	mul.w	r3, r1, r3
 800f8aa:	4413      	add	r3, r2
 800f8ac:	3320      	adds	r3, #32
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	4a43      	ldr	r2, [pc, #268]	@ (800f9c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800f8b4:	683b      	ldr	r3, [r7, #0]
 800f8b6:	212c      	movs	r1, #44	@ 0x2c
 800f8b8:	fb01 f303 	mul.w	r3, r1, r3
 800f8bc:	4413      	add	r3, r2
 800f8be:	3314      	adds	r3, #20
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4403      	add	r3, r0
 800f8c4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	dc01      	bgt.n	800f8d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800f8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dc01      	bgt.n	800f8da <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f8da:	2300      	movs	r3, #0
 800f8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f8de:	e062      	b.n	800f9a6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8e4:	e059      	b.n	800f99a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8ec:	3201      	adds	r2, #1
 800f8ee:	fb03 f202 	mul.w	r2, r3, r2
 800f8f2:	69fb      	ldr	r3, [r7, #28]
 800f8f4:	fb02 f303 	mul.w	r3, r2, r3
 800f8f8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d348      	bcc.n	800f994 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f902:	2300      	movs	r3, #0
 800f904:	623b      	str	r3, [r7, #32]
 800f906:	e042      	b.n	800f98e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800f908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f90a:	3301      	adds	r3, #1
 800f90c:	6a3a      	ldr	r2, [r7, #32]
 800f90e:	fb03 f202 	mul.w	r2, r3, r2
 800f912:	69fb      	ldr	r3, [r7, #28]
 800f914:	fb02 f303 	mul.w	r3, r2, r3
 800f918:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800f91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91c:	68ba      	ldr	r2, [r7, #8]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d332      	bcc.n	800f988 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800f922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f924:	68ba      	ldr	r2, [r7, #8]
 800f926:	429a      	cmp	r2, r3
 800f928:	d82e      	bhi.n	800f988 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800f92a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f92e:	429a      	cmp	r2, r3
 800f930:	d02a      	beq.n	800f988 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800f932:	4b24      	ldr	r3, [pc, #144]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	4924      	ldr	r1, [pc, #144]	@ (800f9c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f938:	4613      	mov	r3, r2
 800f93a:	009b      	lsls	r3, r3, #2
 800f93c:	4413      	add	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	440b      	add	r3, r1
 800f942:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f944:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800f946:	4b1f      	ldr	r3, [pc, #124]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	491f      	ldr	r1, [pc, #124]	@ (800f9c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f94c:	4613      	mov	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	009b      	lsls	r3, r3, #2
 800f954:	440b      	add	r3, r1
 800f956:	3304      	adds	r3, #4
 800f958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f95a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800f95c:	4b19      	ldr	r3, [pc, #100]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	4919      	ldr	r1, [pc, #100]	@ (800f9c8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800f962:	4613      	mov	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4413      	add	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	440b      	add	r3, r1
 800f96c:	3308      	adds	r3, #8
 800f96e:	6a3a      	ldr	r2, [r7, #32]
 800f970:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800f972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f974:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800f976:	4b13      	ldr	r3, [pc, #76]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	3301      	adds	r3, #1
 800f97c:	4a11      	ldr	r2, [pc, #68]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f97e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800f980:	4b10      	ldr	r3, [pc, #64]	@ (800f9c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	2b7f      	cmp	r3, #127	@ 0x7f
 800f986:	d812      	bhi.n	800f9ae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	3301      	adds	r3, #1
 800f98c:	623b      	str	r3, [r7, #32]
 800f98e:	6a3b      	ldr	r3, [r7, #32]
 800f990:	2b0f      	cmp	r3, #15
 800f992:	d9b9      	bls.n	800f908 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800f994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f996:	3301      	adds	r3, #1
 800f998:	627b      	str	r3, [r7, #36]	@ 0x24
 800f99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99c:	2b0f      	cmp	r3, #15
 800f99e:	d9a2      	bls.n	800f8e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9a8:	2b0f      	cmp	r3, #15
 800f9aa:	d999      	bls.n	800f8e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800f9ac:	e000      	b.n	800f9b0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800f9ae:	bf00      	nop
          }
        }
      }
    }
  }
}
 800f9b0:	373c      	adds	r7, #60	@ 0x3c
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	3b9aca00 	.word	0x3b9aca00
 800f9c0:	0802d818 	.word	0x0802d818
 800f9c4:	2400b6d4 	.word	0x2400b6d4
 800f9c8:	2400acd4 	.word	0x2400acd4

0800f9cc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b093      	sub	sp, #76	@ 0x4c
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800f9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9da:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	085a      	lsrs	r2, r3, #1
 800f9e0:	4b7a      	ldr	r3, [pc, #488]	@ (800fbcc <I2C_Compute_SCLL_SCLH+0x200>)
 800f9e2:	4413      	add	r3, r2
 800f9e4:	687a      	ldr	r2, [r7, #4]
 800f9e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800f9ec:	4a78      	ldr	r2, [pc, #480]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	212c      	movs	r1, #44	@ 0x2c
 800f9f2:	fb01 f303 	mul.w	r3, r1, r3
 800f9f6:	4413      	add	r3, r2
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	085a      	lsrs	r2, r3, #1
 800f9fc:	4b73      	ldr	r3, [pc, #460]	@ (800fbcc <I2C_Compute_SCLL_SCLH+0x200>)
 800f9fe:	4413      	add	r3, r2
 800fa00:	4973      	ldr	r1, [pc, #460]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa02:	683a      	ldr	r2, [r7, #0]
 800fa04:	202c      	movs	r0, #44	@ 0x2c
 800fa06:	fb00 f202 	mul.w	r2, r0, r2
 800fa0a:	440a      	add	r2, r1
 800fa0c:	6812      	ldr	r2, [r2, #0]
 800fa0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa12:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800fa14:	2332      	movs	r3, #50	@ 0x32
 800fa16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800fa18:	4a6d      	ldr	r2, [pc, #436]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	212c      	movs	r1, #44	@ 0x2c
 800fa1e:	fb01 f303 	mul.w	r3, r1, r3
 800fa22:	4413      	add	r3, r2
 800fa24:	3328      	adds	r3, #40	@ 0x28
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa2a:	fb02 f303 	mul.w	r3, r2, r3
 800fa2e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800fa30:	4a67      	ldr	r2, [pc, #412]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	212c      	movs	r1, #44	@ 0x2c
 800fa36:	fb01 f303 	mul.w	r3, r1, r3
 800fa3a:	4413      	add	r3, r2
 800fa3c:	3304      	adds	r3, #4
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a62      	ldr	r2, [pc, #392]	@ (800fbcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fa42:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa46:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800fa48:	4a61      	ldr	r2, [pc, #388]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	212c      	movs	r1, #44	@ 0x2c
 800fa4e:	fb01 f303 	mul.w	r3, r1, r3
 800fa52:	4413      	add	r3, r2
 800fa54:	3308      	adds	r3, #8
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a5c      	ldr	r2, [pc, #368]	@ (800fbcc <I2C_Compute_SCLL_SCLH+0x200>)
 800fa5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa5e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800fa60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa62:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fa64:	2300      	movs	r3, #0
 800fa66:	637b      	str	r3, [r7, #52]	@ 0x34
 800fa68:	e0a3      	b.n	800fbb2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800fa6a:	495a      	ldr	r1, [pc, #360]	@ (800fbd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800fa6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	1c5a      	adds	r2, r3, #1
 800fa7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa7e:	fb02 f303 	mul.w	r3, r2, r3
 800fa82:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fa84:	2300      	movs	r3, #0
 800fa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fa88:	e08c      	b.n	800fba4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800fa8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa8c:	6a3b      	ldr	r3, [r7, #32]
 800fa8e:	441a      	add	r2, r3
 800fa90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa92:	3301      	adds	r3, #1
 800fa94:	6979      	ldr	r1, [r7, #20]
 800fa96:	fb03 f101 	mul.w	r1, r3, r1
 800fa9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	440b      	add	r3, r1
 800faa0:	4413      	add	r3, r2
 800faa2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800faa4:	4a4a      	ldr	r2, [pc, #296]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	212c      	movs	r1, #44	@ 0x2c
 800faaa:	fb01 f303 	mul.w	r3, r1, r3
 800faae:	4413      	add	r3, r2
 800fab0:	3318      	adds	r3, #24
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	693a      	ldr	r2, [r7, #16]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d971      	bls.n	800fb9e <I2C_Compute_SCLL_SCLH+0x1d2>
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	089b      	lsrs	r3, r3, #2
 800fac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fac8:	429a      	cmp	r2, r3
 800faca:	d268      	bcs.n	800fb9e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800facc:	2300      	movs	r3, #0
 800face:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fad0:	e062      	b.n	800fb98 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800fad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fad4:	6a3b      	ldr	r3, [r7, #32]
 800fad6:	441a      	add	r2, r3
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	3301      	adds	r3, #1
 800fadc:	6979      	ldr	r1, [r7, #20]
 800fade:	fb03 f101 	mul.w	r1, r3, r1
 800fae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae4:	005b      	lsls	r3, r3, #1
 800fae6:	440b      	add	r3, r1
 800fae8:	4413      	add	r3, r2
 800faea:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800faec:	693a      	ldr	r2, [r7, #16]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	441a      	add	r2, r3
 800faf2:	4937      	ldr	r1, [pc, #220]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	202c      	movs	r0, #44	@ 0x2c
 800faf8:	fb00 f303 	mul.w	r3, r0, r3
 800fafc:	440b      	add	r3, r1
 800fafe:	3320      	adds	r3, #32
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	441a      	add	r2, r3
 800fb04:	4932      	ldr	r1, [pc, #200]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	202c      	movs	r0, #44	@ 0x2c
 800fb0a:	fb00 f303 	mul.w	r3, r0, r3
 800fb0e:	440b      	add	r3, r1
 800fb10:	3324      	adds	r3, #36	@ 0x24
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4413      	add	r3, r2
 800fb16:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800fb18:	68ba      	ldr	r2, [r7, #8]
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d338      	bcc.n	800fb92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fb20:	68ba      	ldr	r2, [r7, #8]
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	429a      	cmp	r2, r3
 800fb26:	d834      	bhi.n	800fb92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fb28:	4a29      	ldr	r2, [pc, #164]	@ (800fbd0 <I2C_Compute_SCLL_SCLH+0x204>)
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	212c      	movs	r1, #44	@ 0x2c
 800fb2e:	fb01 f303 	mul.w	r3, r1, r3
 800fb32:	4413      	add	r3, r2
 800fb34:	331c      	adds	r3, #28
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d329      	bcc.n	800fb92 <I2C_Compute_SCLL_SCLH+0x1c6>
 800fb3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d225      	bcs.n	800fb92 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800fb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da02      	bge.n	800fb5a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800fb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb56:	425b      	negs	r3, r3
 800fb58:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d917      	bls.n	800fb92 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800fb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb64:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800fb66:	491b      	ldr	r1, [pc, #108]	@ (800fbd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800fb68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	009b      	lsls	r3, r3, #2
 800fb6e:	4413      	add	r3, r2
 800fb70:	009b      	lsls	r3, r3, #2
 800fb72:	440b      	add	r3, r1
 800fb74:	3310      	adds	r3, #16
 800fb76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fb78:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800fb7a:	4916      	ldr	r1, [pc, #88]	@ (800fbd4 <I2C_Compute_SCLL_SCLH+0x208>)
 800fb7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb7e:	4613      	mov	r3, r2
 800fb80:	009b      	lsls	r3, r3, #2
 800fb82:	4413      	add	r3, r2
 800fb84:	009b      	lsls	r3, r3, #2
 800fb86:	440b      	add	r3, r1
 800fb88:	330c      	adds	r3, #12
 800fb8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb8c:	601a      	str	r2, [r3, #0]
              ret = count;
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb90:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800fb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb94:	3301      	adds	r3, #1
 800fb96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb9a:	2bff      	cmp	r3, #255	@ 0xff
 800fb9c:	d999      	bls.n	800fad2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800fb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba0:	3301      	adds	r3, #1
 800fba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba6:	2bff      	cmp	r3, #255	@ 0xff
 800fba8:	f67f af6f 	bls.w	800fa8a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800fbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbae:	3301      	adds	r3, #1
 800fbb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fbb2:	4b09      	ldr	r3, [pc, #36]	@ (800fbd8 <I2C_Compute_SCLL_SCLH+0x20c>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	f4ff af56 	bcc.w	800fa6a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800fbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	374c      	adds	r7, #76	@ 0x4c
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr
 800fbcc:	3b9aca00 	.word	0x3b9aca00
 800fbd0:	0802d818 	.word	0x0802d818
 800fbd4:	2400acd4 	.word	0x2400acd4
 800fbd8:	2400b6d4 	.word	0x2400b6d4

0800fbdc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08a      	sub	sp, #40	@ 0x28
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800fbe4:	4b31      	ldr	r3, [pc, #196]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fbe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fbea:	4a30      	ldr	r2, [pc, #192]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fbec:	f043 0308 	orr.w	r3, r3, #8
 800fbf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fbf4:	4b2d      	ldr	r3, [pc, #180]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fbf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fbfa:	f003 0308 	and.w	r3, r3, #8
 800fbfe:	613b      	str	r3, [r7, #16]
 800fc00:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800fc02:	4b2a      	ldr	r3, [pc, #168]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc08:	4a28      	ldr	r2, [pc, #160]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc0a:	f043 0308 	orr.w	r3, r3, #8
 800fc0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800fc12:	4b26      	ldr	r3, [pc, #152]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800fc18:	f003 0308 	and.w	r3, r3, #8
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800fc20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc24:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fc26:	2312      	movs	r3, #18
 800fc28:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fc2e:	2302      	movs	r3, #2
 800fc30:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800fc32:	2304      	movs	r3, #4
 800fc34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800fc36:	f107 0314 	add.w	r3, r7, #20
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	481c      	ldr	r0, [pc, #112]	@ (800fcb0 <I2C4_MspInit+0xd4>)
 800fc3e:	f001 fd4b 	bl	80116d8 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800fc42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc46:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800fc48:	2312      	movs	r3, #18
 800fc4a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800fc50:	2302      	movs	r3, #2
 800fc52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800fc54:	2304      	movs	r3, #4
 800fc56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800fc58:	f107 0314 	add.w	r3, r7, #20
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	4814      	ldr	r0, [pc, #80]	@ (800fcb0 <I2C4_MspInit+0xd4>)
 800fc60:	f001 fd3a 	bl	80116d8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800fc64:	4b11      	ldr	r3, [pc, #68]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc6a:	4a10      	ldr	r2, [pc, #64]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc70:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800fc74:	4b0d      	ldr	r3, [pc, #52]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fc7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc7e:	60bb      	str	r3, [r7, #8]
 800fc80:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800fc82:	4b0a      	ldr	r3, [pc, #40]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fc88:	4a08      	ldr	r2, [pc, #32]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc8e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800fc92:	4b06      	ldr	r3, [pc, #24]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fc98:	4a04      	ldr	r2, [pc, #16]	@ (800fcac <I2C4_MspInit+0xd0>)
 800fc9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc9e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800fca2:	bf00      	nop
 800fca4:	3728      	adds	r7, #40	@ 0x28
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	58024400 	.word	0x58024400
 800fcb0:	58020c00 	.word	0x58020c00

0800fcb4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b088      	sub	sp, #32
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800fcbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fcc0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	480b      	ldr	r0, [pc, #44]	@ (800fcf4 <I2C4_MspDeInit+0x40>)
 800fcc8:	f001 feb6 	bl	8011a38 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800fccc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fcd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4807      	ldr	r0, [pc, #28]	@ (800fcf4 <I2C4_MspDeInit+0x40>)
 800fcd8:	f001 feae 	bl	8011a38 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800fcdc:	4b06      	ldr	r3, [pc, #24]	@ (800fcf8 <I2C4_MspDeInit+0x44>)
 800fcde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800fce2:	4a05      	ldr	r2, [pc, #20]	@ (800fcf8 <I2C4_MspDeInit+0x44>)
 800fce4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fce8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 800fcec:	bf00      	nop
 800fcee:	3720      	adds	r7, #32
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	58020c00 	.word	0x58020c00
 800fcf8:	58024400 	.word	0x58024400

0800fcfc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b088      	sub	sp, #32
 800fd00:	af04      	add	r7, sp, #16
 800fd02:	607b      	str	r3, [r7, #4]
 800fd04:	4603      	mov	r3, r0
 800fd06:	81fb      	strh	r3, [r7, #14]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	81bb      	strh	r3, [r7, #12]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fd10:	8978      	ldrh	r0, [r7, #10]
 800fd12:	89ba      	ldrh	r2, [r7, #12]
 800fd14:	89f9      	ldrh	r1, [r7, #14]
 800fd16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd1a:	9302      	str	r3, [sp, #8]
 800fd1c:	8b3b      	ldrh	r3, [r7, #24]
 800fd1e:	9301      	str	r3, [sp, #4]
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	4603      	mov	r3, r0
 800fd26:	4807      	ldr	r0, [pc, #28]	@ (800fd44 <I2C4_WriteReg+0x48>)
 800fd28:	f002 f8c4 	bl	8011eb4 <HAL_I2C_Mem_Write>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d101      	bne.n	800fd36 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fd32:	2300      	movs	r3, #0
 800fd34:	e001      	b.n	800fd3a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fd36:	f06f 0307 	mvn.w	r3, #7
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	2400b6d8 	.word	0x2400b6d8

0800fd48 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b088      	sub	sp, #32
 800fd4c:	af04      	add	r7, sp, #16
 800fd4e:	607b      	str	r3, [r7, #4]
 800fd50:	4603      	mov	r3, r0
 800fd52:	81fb      	strh	r3, [r7, #14]
 800fd54:	460b      	mov	r3, r1
 800fd56:	81bb      	strh	r3, [r7, #12]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800fd5c:	8978      	ldrh	r0, [r7, #10]
 800fd5e:	89ba      	ldrh	r2, [r7, #12]
 800fd60:	89f9      	ldrh	r1, [r7, #14]
 800fd62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fd66:	9302      	str	r3, [sp, #8]
 800fd68:	8b3b      	ldrh	r3, [r7, #24]
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	9300      	str	r3, [sp, #0]
 800fd70:	4603      	mov	r3, r0
 800fd72:	4807      	ldr	r0, [pc, #28]	@ (800fd90 <I2C4_ReadReg+0x48>)
 800fd74:	f002 f9b2 	bl	80120dc <HAL_I2C_Mem_Read>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	e001      	b.n	800fd86 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800fd82:	f06f 0307 	mvn.w	r3, #7
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	2400b6d8 	.word	0x2400b6d8

0800fd94 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b090      	sub	sp, #64	@ 0x40
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800fd9e:	2300      	movs	r3, #0
 800fda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d003      	beq.n	800fdb0 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800fda8:	f06f 0301 	mvn.w	r3, #1
 800fdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdae:	e090      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800fdb0:	494a      	ldr	r1, [pc, #296]	@ (800fedc <BSP_QSPI_Init+0x148>)
 800fdb2:	687a      	ldr	r2, [r7, #4]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	005b      	lsls	r3, r3, #1
 800fdb8:	4413      	add	r3, r2
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	440b      	add	r3, r1
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f040 8086 	bne.w	800fed2 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800fdc6:	4846      	ldr	r0, [pc, #280]	@ (800fee0 <BSP_QSPI_Init+0x14c>)
 800fdc8:	f000 f99c 	bl	8010104 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800fdcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d17f      	bne.n	800fed2 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800fdd2:	f107 031c 	add.w	r3, r7, #28
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fe ffea 	bl	800edb0 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	785b      	ldrb	r3, [r3, #1]
 800fde0:	461a      	mov	r2, r3
 800fde2:	4b40      	ldr	r3, [pc, #256]	@ (800fee4 <BSP_QSPI_Init+0x150>)
 800fde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fde8:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800fdea:	2340      	movs	r3, #64	@ 0x40
 800fdec:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fdf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf4:	fa93 f3a3 	rbit	r3, r3
 800fdf8:	633b      	str	r3, [r7, #48]	@ 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfc:	63bb      	str	r3, [r7, #56]	@ 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800fe04:	2320      	movs	r3, #32
 800fe06:	e003      	b.n	800fe10 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800fe08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0a:	fab3 f383 	clz	r3, r3
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	3b01      	subs	r3, #1
 800fe12:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	785b      	ldrb	r3, [r3, #1]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d101      	bne.n	800fe20 <BSP_QSPI_Init+0x8c>
 800fe1c:	2310      	movs	r3, #16
 800fe1e:	e000      	b.n	800fe22 <BSP_QSPI_Init+0x8e>
 800fe20:	2300      	movs	r3, #0
 800fe22:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800fe24:	f107 030c 	add.w	r3, r7, #12
 800fe28:	4619      	mov	r1, r3
 800fe2a:	482d      	ldr	r0, [pc, #180]	@ (800fee0 <BSP_QSPI_Init+0x14c>)
 800fe2c:	f000 f85c 	bl	800fee8 <MX_QSPI_Init>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d003      	beq.n	800fe3e <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800fe36:	f06f 0303 	mvn.w	r3, #3
 800fe3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe3c:	e049      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 faa8 	bl	8010394 <QSPI_ResetMemory>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d003      	beq.n	800fe52 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe4a:	f06f 0304 	mvn.w	r3, #4
 800fe4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe50:	e03f      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fe52:	4922      	ldr	r1, [pc, #136]	@ (800fedc <BSP_QSPI_Init+0x148>)
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	4613      	mov	r3, r2
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	4413      	add	r3, r2
 800fe5c:	009b      	lsls	r3, r3, #2
 800fe5e:	440b      	add	r3, r1
 800fe60:	3301      	adds	r3, #1
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	4619      	mov	r1, r3
 800fe66:	481e      	ldr	r0, [pc, #120]	@ (800fee0 <BSP_QSPI_Init+0x14c>)
 800fe68:	f7ff f811 	bl	800ee8e <MT25TL01G_AutoPollingMemReady>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d003      	beq.n	800fe7a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe72:	f06f 0304 	mvn.w	r3, #4
 800fe76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe78:	e02b      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800fe7a:	4918      	ldr	r1, [pc, #96]	@ (800fedc <BSP_QSPI_Init+0x148>)
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	4413      	add	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	440b      	add	r3, r1
 800fe88:	3301      	adds	r3, #1
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4814      	ldr	r0, [pc, #80]	@ (800fee0 <BSP_QSPI_Init+0x14c>)
 800fe90:	f7fe ffb5 	bl	800edfe <MT25TL01G_Enter4BytesAddressMode>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe9a:	f06f 0304 	mvn.w	r3, #4
 800fe9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fea0:	e017      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f000 fae2 	bl	801046c <QSPI_DummyCyclesCfg>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d003      	beq.n	800feb6 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800feae:	f06f 0304 	mvn.w	r3, #4
 800feb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800feb4:	e00d      	b.n	800fed2 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	7819      	ldrb	r1, [r3, #0]
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	785b      	ldrb	r3, [r3, #1]
 800febe:	461a      	mov	r2, r3
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 f89d 	bl	8010000 <BSP_QSPI_ConfigFlash>
 800fec6:	4603      	mov	r3, r0
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d002      	beq.n	800fed2 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800fecc:	f06f 0304 	mvn.w	r3, #4
 800fed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800fed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3740      	adds	r7, #64	@ 0x40
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	2400b72c 	.word	0x2400b72c
 800fee0:	2400027c 	.word	0x2400027c
 800fee4:	0802d89c 	.word	0x0802d89c

0800fee8 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4a13      	ldr	r2, [pc, #76]	@ (800ff44 <MX_QSPI_Init+0x5c>)
 800fef6:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	685a      	ldr	r2, [r3, #4]
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2201      	movs	r2, #1
 800ff04:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	689a      	ldr	r2, [r3, #8]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800ff1c:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2200      	movs	r2, #0
 800ff22:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	68da      	ldr	r2, [r3, #12]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f003 faac 	bl	8013490 <HAL_QSPI_Init>
 800ff38:	4603      	mov	r3, r0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	52005000 	.word	0x52005000

0800ff48 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b084      	sub	sp, #16
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ff50:	2300      	movs	r3, #0
 800ff52:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ff5a:	f06f 0301 	mvn.w	r3, #1
 800ff5e:	60fb      	str	r3, [r7, #12]
 800ff60:	e045      	b.n	800ffee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800ff62:	4925      	ldr	r1, [pc, #148]	@ (800fff8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	4613      	mov	r3, r2
 800ff68:	005b      	lsls	r3, r3, #1
 800ff6a:	4413      	add	r3, r2
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	440b      	add	r3, r1
 800ff70:	3302      	adds	r3, #2
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d11d      	bne.n	800ffb4 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ff78:	491f      	ldr	r1, [pc, #124]	@ (800fff8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	4413      	add	r3, r2
 800ff82:	009b      	lsls	r3, r3, #2
 800ff84:	440b      	add	r3, r1
 800ff86:	3301      	adds	r3, #1
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	481b      	ldr	r0, [pc, #108]	@ (800fffc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ff8e:	f7ff f8d3 	bl	800f138 <MT25TL01G_EnableMemoryMappedModeSTR>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d003      	beq.n	800ffa0 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff98:	f06f 0304 	mvn.w	r3, #4
 800ff9c:	60fb      	str	r3, [r7, #12]
 800ff9e:	e026      	b.n	800ffee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ffa0:	4915      	ldr	r1, [pc, #84]	@ (800fff8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ffa2:	687a      	ldr	r2, [r7, #4]
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	005b      	lsls	r3, r3, #1
 800ffa8:	4413      	add	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	440b      	add	r3, r1
 800ffae:	2202      	movs	r2, #2
 800ffb0:	701a      	strb	r2, [r3, #0]
 800ffb2:	e01c      	b.n	800ffee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ffb4:	4910      	ldr	r1, [pc, #64]	@ (800fff8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4613      	mov	r3, r2
 800ffba:	005b      	lsls	r3, r3, #1
 800ffbc:	4413      	add	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	440b      	add	r3, r1
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	480c      	ldr	r0, [pc, #48]	@ (800fffc <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800ffca:	f7ff f84b 	bl	800f064 <MT25TL01G_EnableMemoryMappedModeDTR>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d003      	beq.n	800ffdc <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ffd4:	f06f 0304 	mvn.w	r3, #4
 800ffd8:	60fb      	str	r3, [r7, #12]
 800ffda:	e008      	b.n	800ffee <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800ffdc:	4906      	ldr	r1, [pc, #24]	@ (800fff8 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	4413      	add	r3, r2
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	440b      	add	r3, r1
 800ffea:	2202      	movs	r2, #2
 800ffec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ffee:	68fb      	ldr	r3, [r7, #12]
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	2400b72c 	.word	0x2400b72c
 800fffc:	2400027c 	.word	0x2400027c

08010000 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	460b      	mov	r3, r1
 801000a:	70fb      	strb	r3, [r7, #3]
 801000c:	4613      	mov	r3, r2
 801000e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8010010:	2300      	movs	r3, #0
 8010012:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d003      	beq.n	8010022 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801001a:	f06f 0301 	mvn.w	r3, #1
 801001e:	60fb      	str	r3, [r7, #12]
 8010020:	e067      	b.n	80100f2 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8010022:	4936      	ldr	r1, [pc, #216]	@ (80100fc <BSP_QSPI_ConfigFlash+0xfc>)
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	4613      	mov	r3, r2
 8010028:	005b      	lsls	r3, r3, #1
 801002a:	4413      	add	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	440b      	add	r3, r1
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b02      	cmp	r3, #2
 8010034:	d103      	bne.n	801003e <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8010036:	f06f 0319 	mvn.w	r3, #25
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	e059      	b.n	80100f2 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 801003e:	78bb      	ldrb	r3, [r7, #2]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <BSP_QSPI_ConfigFlash+0x48>
 8010044:	2310      	movs	r3, #16
 8010046:	e000      	b.n	801004a <BSP_QSPI_ConfigFlash+0x4a>
 8010048:	2300      	movs	r3, #0
 801004a:	4a2d      	ldr	r2, [pc, #180]	@ (8010100 <BSP_QSPI_ConfigFlash+0x100>)
 801004c:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 801004e:	482c      	ldr	r0, [pc, #176]	@ (8010100 <BSP_QSPI_ConfigFlash+0x100>)
 8010050:	f003 fa1e 	bl	8013490 <HAL_QSPI_Init>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d003      	beq.n	8010062 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 801005a:	f06f 0303 	mvn.w	r3, #3
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	e047      	b.n	80100f2 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8010062:	4926      	ldr	r1, [pc, #152]	@ (80100fc <BSP_QSPI_ConfigFlash+0xfc>)
 8010064:	687a      	ldr	r2, [r7, #4]
 8010066:	4613      	mov	r3, r2
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	4413      	add	r3, r2
 801006c:	009b      	lsls	r3, r3, #2
 801006e:	440b      	add	r3, r1
 8010070:	3301      	adds	r3, #1
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	2b03      	cmp	r3, #3
 8010076:	d10c      	bne.n	8010092 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8010078:	78fb      	ldrb	r3, [r7, #3]
 801007a:	2b03      	cmp	r3, #3
 801007c:	d016      	beq.n	80100ac <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 801007e:	4820      	ldr	r0, [pc, #128]	@ (8010100 <BSP_QSPI_ConfigFlash+0x100>)
 8010080:	f7fe ffc6 	bl	800f010 <MT25TL01G_ExitQPIMode>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d010      	beq.n	80100ac <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 801008a:	f06f 0304 	mvn.w	r3, #4
 801008e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010090:	e00c      	b.n	80100ac <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 8010092:	78fb      	ldrb	r3, [r7, #3]
 8010094:	2b03      	cmp	r3, #3
 8010096:	d10b      	bne.n	80100b0 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8010098:	4819      	ldr	r0, [pc, #100]	@ (8010100 <BSP_QSPI_ConfigFlash+0x100>)
 801009a:	f7fe ff8f 	bl	800efbc <MT25TL01G_EnterQPIMode>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d005      	beq.n	80100b0 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80100a4:	f06f 0304 	mvn.w	r3, #4
 80100a8:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 80100aa:	e001      	b.n	80100b0 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 80100ac:	bf00      	nop
 80100ae:	e000      	b.n	80100b2 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 80100b0:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d11c      	bne.n	80100f2 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80100b8:	4910      	ldr	r1, [pc, #64]	@ (80100fc <BSP_QSPI_ConfigFlash+0xfc>)
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	4613      	mov	r3, r2
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	440b      	add	r3, r1
 80100c6:	2201      	movs	r2, #1
 80100c8:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80100ca:	490c      	ldr	r1, [pc, #48]	@ (80100fc <BSP_QSPI_ConfigFlash+0xfc>)
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	440b      	add	r3, r1
 80100d8:	3301      	adds	r3, #1
 80100da:	78fa      	ldrb	r2, [r7, #3]
 80100dc:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80100de:	4907      	ldr	r1, [pc, #28]	@ (80100fc <BSP_QSPI_ConfigFlash+0xfc>)
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	4613      	mov	r3, r2
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	4413      	add	r3, r2
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	440b      	add	r3, r1
 80100ec:	3302      	adds	r3, #2
 80100ee:	78ba      	ldrb	r2, [r7, #2]
 80100f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80100f2:	68fb      	ldr	r3, [r7, #12]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}
 80100fc:	2400b72c 	.word	0x2400b72c
 8010100:	2400027c 	.word	0x2400027c

08010104 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b094      	sub	sp, #80	@ 0x50
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 801010c:	4b9c      	ldr	r3, [pc, #624]	@ (8010380 <QSPI_MspInit+0x27c>)
 801010e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010112:	4a9b      	ldr	r2, [pc, #620]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010118:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801011c:	4b98      	ldr	r3, [pc, #608]	@ (8010380 <QSPI_MspInit+0x27c>)
 801011e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010126:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 801012a:	4b95      	ldr	r3, [pc, #596]	@ (8010380 <QSPI_MspInit+0x27c>)
 801012c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801012e:	4a94      	ldr	r2, [pc, #592]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010134:	67d3      	str	r3, [r2, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8010136:	4b92      	ldr	r3, [pc, #584]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801013a:	4a91      	ldr	r2, [pc, #580]	@ (8010380 <QSPI_MspInit+0x27c>)
 801013c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010140:	67d3      	str	r3, [r2, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8010142:	4b8f      	ldr	r3, [pc, #572]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010148:	4a8d      	ldr	r2, [pc, #564]	@ (8010380 <QSPI_MspInit+0x27c>)
 801014a:	f043 0320 	orr.w	r3, r3, #32
 801014e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010152:	4b8b      	ldr	r3, [pc, #556]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010158:	f003 0320 	and.w	r3, r3, #32
 801015c:	637b      	str	r3, [r7, #52]	@ 0x34
 801015e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8010160:	4b87      	ldr	r3, [pc, #540]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010166:	4a86      	ldr	r2, [pc, #536]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801016c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010170:	4b83      	ldr	r3, [pc, #524]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801017a:	633b      	str	r3, [r7, #48]	@ 0x30
 801017c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 801017e:	4b80      	ldr	r3, [pc, #512]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010184:	4a7e      	ldr	r2, [pc, #504]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010186:	f043 0308 	orr.w	r3, r3, #8
 801018a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801018e:	4b7c      	ldr	r3, [pc, #496]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010194:	f003 0308 	and.w	r3, r3, #8
 8010198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801019a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 801019c:	4b78      	ldr	r3, [pc, #480]	@ (8010380 <QSPI_MspInit+0x27c>)
 801019e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101a2:	4a77      	ldr	r2, [pc, #476]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101a4:	f043 0320 	orr.w	r3, r3, #32
 80101a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80101ac:	4b74      	ldr	r3, [pc, #464]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101b2:	f003 0320 	and.w	r3, r3, #32
 80101b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80101ba:	4b71      	ldr	r3, [pc, #452]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101c0:	4a6f      	ldr	r2, [pc, #444]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101c2:	f043 0320 	orr.w	r3, r3, #32
 80101c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80101ca:	4b6d      	ldr	r3, [pc, #436]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101d0:	f003 0320 	and.w	r3, r3, #32
 80101d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80101d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80101d8:	4b69      	ldr	r3, [pc, #420]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101de:	4a68      	ldr	r2, [pc, #416]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101e0:	f043 0320 	orr.w	r3, r3, #32
 80101e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80101e8:	4b65      	ldr	r3, [pc, #404]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101ee:	f003 0320 	and.w	r3, r3, #32
 80101f2:	623b      	str	r3, [r7, #32]
 80101f4:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80101f6:	4b62      	ldr	r3, [pc, #392]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80101fc:	4a60      	ldr	r2, [pc, #384]	@ (8010380 <QSPI_MspInit+0x27c>)
 80101fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010206:	4b5e      	ldr	r3, [pc, #376]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801020c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010210:	61fb      	str	r3, [r7, #28]
 8010212:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8010214:	4b5a      	ldr	r3, [pc, #360]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801021a:	4a59      	ldr	r2, [pc, #356]	@ (8010380 <QSPI_MspInit+0x27c>)
 801021c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010220:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010224:	4b56      	ldr	r3, [pc, #344]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801022a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801022e:	61bb      	str	r3, [r7, #24]
 8010230:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8010232:	4b53      	ldr	r3, [pc, #332]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010238:	4a51      	ldr	r2, [pc, #324]	@ (8010380 <QSPI_MspInit+0x27c>)
 801023a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801023e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010242:	4b4f      	ldr	r3, [pc, #316]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801024c:	617b      	str	r3, [r7, #20]
 801024e:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8010250:	4b4b      	ldr	r3, [pc, #300]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010256:	4a4a      	ldr	r2, [pc, #296]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801025c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010260:	4b47      	ldr	r3, [pc, #284]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801026a:	613b      	str	r3, [r7, #16]
 801026c:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 801026e:	4b44      	ldr	r3, [pc, #272]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010274:	4a42      	ldr	r2, [pc, #264]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801027a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801027e:	4b40      	ldr	r3, [pc, #256]	@ (8010380 <QSPI_MspInit+0x27c>)
 8010280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010288:	60fb      	str	r3, [r7, #12]
 801028a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 801028c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010292:	2302      	movs	r3, #2
 8010294:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8010296:	2303      	movs	r3, #3
 8010298:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 801029a:	2300      	movs	r3, #0
 801029c:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801029e:	2309      	movs	r3, #9
 80102a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80102a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80102a6:	4619      	mov	r1, r3
 80102a8:	4836      	ldr	r0, [pc, #216]	@ (8010384 <QSPI_MspInit+0x280>)
 80102aa:	f001 fa15 	bl	80116d8 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80102ae:	2340      	movs	r3, #64	@ 0x40
 80102b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80102b2:	2301      	movs	r3, #1
 80102b4:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80102b6:	230a      	movs	r3, #10
 80102b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80102ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80102be:	4619      	mov	r1, r3
 80102c0:	4831      	ldr	r0, [pc, #196]	@ (8010388 <QSPI_MspInit+0x284>)
 80102c2:	f001 fa09 	bl	80116d8 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80102c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80102ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80102cc:	2300      	movs	r3, #0
 80102ce:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80102d0:	2309      	movs	r3, #9
 80102d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80102d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80102d8:	4619      	mov	r1, r3
 80102da:	482c      	ldr	r0, [pc, #176]	@ (801038c <QSPI_MspInit+0x288>)
 80102dc:	f001 f9fc 	bl	80116d8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80102e0:	2304      	movs	r3, #4
 80102e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80102e4:	2309      	movs	r3, #9
 80102e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80102e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80102ec:	4619      	mov	r1, r3
 80102ee:	4828      	ldr	r0, [pc, #160]	@ (8010390 <QSPI_MspInit+0x28c>)
 80102f0:	f001 f9f2 	bl	80116d8 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80102f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80102f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80102fa:	230a      	movs	r3, #10
 80102fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80102fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010302:	4619      	mov	r1, r3
 8010304:	481f      	ldr	r0, [pc, #124]	@ (8010384 <QSPI_MspInit+0x280>)
 8010306:	f001 f9e7 	bl	80116d8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 801030a:	2308      	movs	r3, #8
 801030c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801030e:	2309      	movs	r3, #9
 8010310:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010312:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010316:	4619      	mov	r1, r3
 8010318:	481d      	ldr	r0, [pc, #116]	@ (8010390 <QSPI_MspInit+0x28c>)
 801031a:	f001 f9dd 	bl	80116d8 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 801031e:	2380      	movs	r3, #128	@ 0x80
 8010320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010322:	2309      	movs	r3, #9
 8010324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8010326:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801032a:	4619      	mov	r1, r3
 801032c:	4815      	ldr	r0, [pc, #84]	@ (8010384 <QSPI_MspInit+0x280>)
 801032e:	f001 f9d3 	bl	80116d8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8010332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8010338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801033c:	4619      	mov	r1, r3
 801033e:	4812      	ldr	r0, [pc, #72]	@ (8010388 <QSPI_MspInit+0x284>)
 8010340:	f001 f9ca 	bl	80116d8 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8010344:	2340      	movs	r3, #64	@ 0x40
 8010346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8010348:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801034c:	4619      	mov	r1, r3
 801034e:	480d      	ldr	r0, [pc, #52]	@ (8010384 <QSPI_MspInit+0x280>)
 8010350:	f001 f9c2 	bl	80116d8 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8010354:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 801035a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801035e:	4619      	mov	r1, r3
 8010360:	4809      	ldr	r0, [pc, #36]	@ (8010388 <QSPI_MspInit+0x284>)
 8010362:	f001 f9b9 	bl	80116d8 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8010366:	2200      	movs	r2, #0
 8010368:	210f      	movs	r1, #15
 801036a:	205c      	movs	r0, #92	@ 0x5c
 801036c:	f000 fe9c 	bl	80110a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8010370:	205c      	movs	r0, #92	@ 0x5c
 8010372:	f000 feb3 	bl	80110dc <HAL_NVIC_EnableIRQ>
}
 8010376:	bf00      	nop
 8010378:	3750      	adds	r7, #80	@ 0x50
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	58024400 	.word	0x58024400
 8010384:	58021400 	.word	0x58021400
 8010388:	58021800 	.word	0x58021800
 801038c:	58020c00 	.word	0x58020c00
 8010390:	58021c00 	.word	0x58021c00

08010394 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b084      	sub	sp, #16
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801039c:	2300      	movs	r3, #0
 801039e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80103a0:	2103      	movs	r1, #3
 80103a2:	4830      	ldr	r0, [pc, #192]	@ (8010464 <QSPI_ResetMemory+0xd0>)
 80103a4:	f7fe ff30 	bl	800f208 <MT25TL01G_ResetEnable>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d003      	beq.n	80103b6 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 80103ae:	f06f 0304 	mvn.w	r3, #4
 80103b2:	60fb      	str	r3, [r7, #12]
 80103b4:	e051      	b.n	801045a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80103b6:	2103      	movs	r1, #3
 80103b8:	482a      	ldr	r0, [pc, #168]	@ (8010464 <QSPI_ResetMemory+0xd0>)
 80103ba:	f7fe ff57 	bl	800f26c <MT25TL01G_ResetMemory>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d003      	beq.n	80103cc <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80103c4:	f06f 0304 	mvn.w	r3, #4
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	e046      	b.n	801045a <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80103cc:	4926      	ldr	r1, [pc, #152]	@ (8010468 <QSPI_ResetMemory+0xd4>)
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4613      	mov	r3, r2
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	4413      	add	r3, r2
 80103d6:	009b      	lsls	r3, r3, #2
 80103d8:	440b      	add	r3, r1
 80103da:	3301      	adds	r3, #1
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	4619      	mov	r1, r3
 80103e0:	4820      	ldr	r0, [pc, #128]	@ (8010464 <QSPI_ResetMemory+0xd0>)
 80103e2:	f7fe fd54 	bl	800ee8e <MT25TL01G_AutoPollingMemReady>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d003      	beq.n	80103f4 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80103ec:	f06f 0304 	mvn.w	r3, #4
 80103f0:	60fb      	str	r3, [r7, #12]
 80103f2:	e032      	b.n	801045a <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80103f4:	2100      	movs	r1, #0
 80103f6:	481b      	ldr	r0, [pc, #108]	@ (8010464 <QSPI_ResetMemory+0xd0>)
 80103f8:	f7fe ff06 	bl	800f208 <MT25TL01G_ResetEnable>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d003      	beq.n	801040a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010402:	f06f 0304 	mvn.w	r3, #4
 8010406:	60fb      	str	r3, [r7, #12]
 8010408:	e027      	b.n	801045a <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801040a:	2100      	movs	r1, #0
 801040c:	4815      	ldr	r0, [pc, #84]	@ (8010464 <QSPI_ResetMemory+0xd0>)
 801040e:	f7fe ff2d 	bl	800f26c <MT25TL01G_ResetMemory>
 8010412:	4603      	mov	r3, r0
 8010414:	2b00      	cmp	r3, #0
 8010416:	d003      	beq.n	8010420 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010418:	f06f 0304 	mvn.w	r3, #4
 801041c:	60fb      	str	r3, [r7, #12]
 801041e:	e01c      	b.n	801045a <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8010420:	4911      	ldr	r1, [pc, #68]	@ (8010468 <QSPI_ResetMemory+0xd4>)
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	4613      	mov	r3, r2
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	4413      	add	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	440b      	add	r3, r1
 801042e:	2201      	movs	r2, #1
 8010430:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 8010432:	490d      	ldr	r1, [pc, #52]	@ (8010468 <QSPI_ResetMemory+0xd4>)
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	4613      	mov	r3, r2
 8010438:	005b      	lsls	r3, r3, #1
 801043a:	4413      	add	r3, r2
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	440b      	add	r3, r1
 8010440:	3301      	adds	r3, #1
 8010442:	2200      	movs	r2, #0
 8010444:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8010446:	4908      	ldr	r1, [pc, #32]	@ (8010468 <QSPI_ResetMemory+0xd4>)
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	440b      	add	r3, r1
 8010454:	3302      	adds	r3, #2
 8010456:	2200      	movs	r2, #0
 8010458:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 801045a:	68fb      	ldr	r3, [r7, #12]
}
 801045c:	4618      	mov	r0, r3
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	2400027c 	.word	0x2400027c
 8010468:	2400b72c 	.word	0x2400b72c

0801046c <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b092      	sub	sp, #72	@ 0x48
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 8010474:	2300      	movs	r3, #0
 8010476:	647b      	str	r3, [r7, #68]	@ 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8010478:	2300      	movs	r3, #0
 801047a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 801047c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010480:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8010482:	2385      	movs	r3, #133	@ 0x85
 8010484:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8010486:	2300      	movs	r3, #0
 8010488:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 801048a:	2300      	movs	r3, #0
 801048c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 801048e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8010492:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 8010494:	2300      	movs	r3, #0
 8010496:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8010498:	2302      	movs	r3, #2
 801049a:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 801049c:	2300      	movs	r3, #0
 801049e:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80104a0:	2300      	movs	r3, #0
 80104a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80104a4:	2300      	movs	r3, #0
 80104a6:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80104a8:	f107 030c 	add.w	r3, r7, #12
 80104ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104b0:	4619      	mov	r1, r3
 80104b2:	482b      	ldr	r0, [pc, #172]	@ (8010560 <QSPI_DummyCyclesCfg+0xf4>)
 80104b4:	f003 fa1a 	bl	80138ec <HAL_QSPI_Command>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d002      	beq.n	80104c4 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104be:	f06f 0304 	mvn.w	r3, #4
 80104c2:	e048      	b.n	8010556 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80104c4:	f107 030a 	add.w	r3, r7, #10
 80104c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104cc:	4619      	mov	r1, r3
 80104ce:	4824      	ldr	r0, [pc, #144]	@ (8010560 <QSPI_DummyCyclesCfg+0xf4>)
 80104d0:	f003 fafc 	bl	8013acc <HAL_QSPI_Receive>
 80104d4:	4603      	mov	r3, r0
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d002      	beq.n	80104e0 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80104da:	f06f 0304 	mvn.w	r3, #4
 80104de:	e03a      	b.n	8010556 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80104e0:	4920      	ldr	r1, [pc, #128]	@ (8010564 <QSPI_DummyCyclesCfg+0xf8>)
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	4613      	mov	r3, r2
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	4413      	add	r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	440b      	add	r3, r1
 80104ee:	3301      	adds	r3, #1
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	4619      	mov	r1, r3
 80104f4:	481a      	ldr	r0, [pc, #104]	@ (8010560 <QSPI_DummyCyclesCfg+0xf4>)
 80104f6:	f7fe fd06 	bl	800ef06 <MT25TL01G_WriteEnable>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010500:	f06f 0304 	mvn.w	r3, #4
 8010504:	e027      	b.n	8010556 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8010506:	2381      	movs	r3, #129	@ 0x81
 8010508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 801050a:	897a      	ldrh	r2, [r7, #10]
 801050c:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8010510:	4013      	ands	r3, r2
 8010512:	b29a      	uxth	r2, r3
 8010514:	4b14      	ldr	r3, [pc, #80]	@ (8010568 <QSPI_DummyCyclesCfg+0xfc>)
 8010516:	4313      	orrs	r3, r2
 8010518:	b29b      	uxth	r3, r3
 801051a:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801051c:	f107 030c 	add.w	r3, r7, #12
 8010520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010524:	4619      	mov	r1, r3
 8010526:	480e      	ldr	r0, [pc, #56]	@ (8010560 <QSPI_DummyCyclesCfg+0xf4>)
 8010528:	f003 f9e0 	bl	80138ec <HAL_QSPI_Command>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010532:	f06f 0304 	mvn.w	r3, #4
 8010536:	e00e      	b.n	8010556 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010538:	f107 030a 	add.w	r3, r7, #10
 801053c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010540:	4619      	mov	r1, r3
 8010542:	4807      	ldr	r0, [pc, #28]	@ (8010560 <QSPI_DummyCyclesCfg+0xf4>)
 8010544:	f003 fa30 	bl	80139a8 <HAL_QSPI_Transmit>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 801054e:	f06f 0304 	mvn.w	r3, #4
 8010552:	e000      	b.n	8010556 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 8010554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8010556:	4618      	mov	r0, r3
 8010558:	3748      	adds	r7, #72	@ 0x48
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	2400027c 	.word	0x2400027c
 8010564:	2400b72c 	.word	0x2400b72c
 8010568:	ffff8080 	.word	0xffff8080

0801056c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b084      	sub	sp, #16
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010574:	2300      	movs	r3, #0
 8010576:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d003      	beq.n	8010586 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 801057e:	f06f 0301 	mvn.w	r3, #1
 8010582:	60fb      	str	r3, [r7, #12]
 8010584:	e044      	b.n	8010610 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2234      	movs	r2, #52	@ 0x34
 801058a:	fb02 f303 	mul.w	r3, r2, r3
 801058e:	4a23      	ldr	r2, [pc, #140]	@ (801061c <BSP_SDRAM_Init+0xb0>)
 8010590:	4413      	add	r3, r2
 8010592:	4618      	mov	r0, r3
 8010594:	f000 f8b8 	bl	8010708 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2234      	movs	r2, #52	@ 0x34
 801059c:	fb02 f303 	mul.w	r3, r2, r3
 80105a0:	4a1e      	ldr	r2, [pc, #120]	@ (801061c <BSP_SDRAM_Init+0xb0>)
 80105a2:	4413      	add	r3, r2
 80105a4:	2210      	movs	r2, #16
 80105a6:	2104      	movs	r1, #4
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 f861 	bl	8010670 <MX_SDRAM_BANK2_Init>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d003      	beq.n	80105bc <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 80105b4:	f04f 33ff 	mov.w	r3, #4294967295
 80105b8:	60fb      	str	r3, [r7, #12]
 80105ba:	e029      	b.n	8010610 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80105bc:	4b18      	ldr	r3, [pc, #96]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105be:	2208      	movs	r2, #8
 80105c0:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 80105c2:	4b17      	ldr	r3, [pc, #92]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105c4:	2203      	movs	r2, #3
 80105c6:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80105c8:	4b15      	ldr	r3, [pc, #84]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105ca:	f240 6203 	movw	r2, #1539	@ 0x603
 80105ce:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 80105d0:	4b13      	ldr	r3, [pc, #76]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 80105d6:	4b12      	ldr	r3, [pc, #72]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105d8:	2200      	movs	r2, #0
 80105da:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 80105dc:	4b10      	ldr	r3, [pc, #64]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105de:	2230      	movs	r2, #48	@ 0x30
 80105e0:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 80105e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105e4:	2200      	movs	r2, #0
 80105e6:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 80105e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80105ee:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2234      	movs	r2, #52	@ 0x34
 80105f4:	fb02 f303 	mul.w	r3, r2, r3
 80105f8:	4a08      	ldr	r2, [pc, #32]	@ (801061c <BSP_SDRAM_Init+0xb0>)
 80105fa:	4413      	add	r3, r2
 80105fc:	4908      	ldr	r1, [pc, #32]	@ (8010620 <BSP_SDRAM_Init+0xb4>)
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe fe66 	bl	800f2d0 <MT48LC4M32B2_Init>
 8010604:	4603      	mov	r3, r0
 8010606:	2b00      	cmp	r3, #0
 8010608:	d002      	beq.n	8010610 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 801060a:	f06f 0304 	mvn.w	r3, #4
 801060e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8010610:	68fb      	ldr	r3, [r7, #12]
}
 8010612:	4618      	mov	r0, r3
 8010614:	3710      	adds	r7, #16
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	2400b738 	.word	0x2400b738
 8010620:	2400b76c 	.word	0x2400b76c

08010624 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 801062c:	2300      	movs	r3, #0
 801062e:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d003      	beq.n	801063e <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8010636:	f06f 0301 	mvn.w	r3, #1
 801063a:	60fb      	str	r3, [r7, #12]
 801063c:	e011      	b.n	8010662 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2234      	movs	r2, #52	@ 0x34
 8010642:	fb02 f303 	mul.w	r3, r2, r3
 8010646:	4a09      	ldr	r2, [pc, #36]	@ (801066c <BSP_SDRAM_DeInit+0x48>)
 8010648:	4413      	add	r3, r2
 801064a:	4618      	mov	r0, r3
 801064c:	f006 fa3e 	bl	8016acc <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2234      	movs	r2, #52	@ 0x34
 8010654:	fb02 f303 	mul.w	r3, r2, r3
 8010658:	4a04      	ldr	r2, [pc, #16]	@ (801066c <BSP_SDRAM_DeInit+0x48>)
 801065a:	4413      	add	r3, r2
 801065c:	4618      	mov	r0, r3
 801065e:	f000 f951 	bl	8010904 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 8010662:	68fb      	ldr	r3, [r7, #12]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	2400b738 	.word	0x2400b738

08010670 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b08c      	sub	sp, #48	@ 0x30
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 801067c:	4b20      	ldr	r3, [pc, #128]	@ (8010700 <MX_SDRAM_BANK2_Init+0x90>)
 801067e:	4a21      	ldr	r2, [pc, #132]	@ (8010704 <MX_SDRAM_BANK2_Init+0x94>)
 8010680:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2201      	movs	r2, #1
 8010686:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	2200      	movs	r2, #0
 801068c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801069a:	4b19      	ldr	r3, [pc, #100]	@ (8010700 <MX_SDRAM_BANK2_Init+0x90>)
 801069c:	2240      	movs	r2, #64	@ 0x40
 801069e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80106a6:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2200      	movs	r2, #0
 80106ac:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80106b4:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80106bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	2200      	movs	r2, #0
 80106c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 80106c4:	2302      	movs	r3, #2
 80106c6:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80106c8:	2307      	movs	r3, #7
 80106ca:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 80106cc:	2304      	movs	r3, #4
 80106ce:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80106d0:	2307      	movs	r3, #7
 80106d2:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80106d4:	2302      	movs	r3, #2
 80106d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sdram_timing.RPDelay              = 2;
 80106d8:	2302      	movs	r3, #2
 80106da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sdram_timing.RCDDelay             = 2;
 80106dc:	2302      	movs	r3, #2
 80106de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80106e0:	f107 0314 	add.w	r3, r7, #20
 80106e4:	4619      	mov	r1, r3
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f006 f9b4 	bl	8016a54 <HAL_SDRAM_Init>
 80106ec:	4603      	mov	r3, r0
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d001      	beq.n	80106f6 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	e000      	b.n	80106f8 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3730      	adds	r7, #48	@ 0x30
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	2400b738 	.word	0x2400b738
 8010704:	52004140 	.word	0x52004140

08010708 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b08e      	sub	sp, #56	@ 0x38
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8010710:	4b73      	ldr	r3, [pc, #460]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010712:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010716:	4a72      	ldr	r2, [pc, #456]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010718:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801071c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8010720:	4b6f      	ldr	r3, [pc, #444]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801072a:	623b      	str	r3, [r7, #32]
 801072c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 801072e:	4b6c      	ldr	r3, [pc, #432]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010730:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010734:	4a6a      	ldr	r2, [pc, #424]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010736:	f043 0301 	orr.w	r3, r3, #1
 801073a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 801073e:	4b68      	ldr	r3, [pc, #416]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010740:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	61fb      	str	r3, [r7, #28]
 801074a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801074c:	4b64      	ldr	r3, [pc, #400]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801074e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010752:	4a63      	ldr	r2, [pc, #396]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010754:	f043 0308 	orr.w	r3, r3, #8
 8010758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801075c:	4b60      	ldr	r3, [pc, #384]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801075e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010762:	f003 0308 	and.w	r3, r3, #8
 8010766:	61bb      	str	r3, [r7, #24]
 8010768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801076a:	4b5d      	ldr	r3, [pc, #372]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010770:	4a5b      	ldr	r2, [pc, #364]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010772:	f043 0310 	orr.w	r3, r3, #16
 8010776:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801077a:	4b59      	ldr	r3, [pc, #356]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010780:	f003 0310 	and.w	r3, r3, #16
 8010784:	617b      	str	r3, [r7, #20]
 8010786:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8010788:	4b55      	ldr	r3, [pc, #340]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801078e:	4a54      	ldr	r2, [pc, #336]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 8010790:	f043 0320 	orr.w	r3, r3, #32
 8010794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010798:	4b51      	ldr	r3, [pc, #324]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 801079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801079e:	f003 0320 	and.w	r3, r3, #32
 80107a2:	613b      	str	r3, [r7, #16]
 80107a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80107a6:	4b4e      	ldr	r3, [pc, #312]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107ac:	4a4c      	ldr	r2, [pc, #304]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80107b6:	4b4a      	ldr	r3, [pc, #296]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80107c4:	4b46      	ldr	r3, [pc, #280]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107ca:	4a45      	ldr	r2, [pc, #276]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80107d4:	4b42      	ldr	r3, [pc, #264]	@ (80108e0 <SDRAM_MspInit+0x1d8>)
 80107d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80107da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107de:	60bb      	str	r3, [r7, #8]
 80107e0:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80107e2:	2302      	movs	r3, #2
 80107e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80107e6:	2301      	movs	r3, #1
 80107e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80107ea:	2303      	movs	r3, #3
 80107ec:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80107ee:	230c      	movs	r3, #12
 80107f0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80107f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80107f6:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80107f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107fc:	4619      	mov	r1, r3
 80107fe:	4839      	ldr	r0, [pc, #228]	@ (80108e4 <SDRAM_MspInit+0x1dc>)
 8010800:	f000 ff6a 	bl	80116d8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8010804:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8010808:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801080a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801080e:	4619      	mov	r1, r3
 8010810:	4835      	ldr	r0, [pc, #212]	@ (80108e8 <SDRAM_MspInit+0x1e0>)
 8010812:	f000 ff61 	bl	80116d8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8010816:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801081a:	627b      	str	r3, [r7, #36]	@ 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801081c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010820:	4619      	mov	r1, r3
 8010822:	4832      	ldr	r0, [pc, #200]	@ (80108ec <SDRAM_MspInit+0x1e4>)
 8010824:	f000 ff58 	bl	80116d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8010828:	f248 1333 	movw	r3, #33075	@ 0x8133
 801082c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 801082e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010832:	4619      	mov	r1, r3
 8010834:	482e      	ldr	r0, [pc, #184]	@ (80108f0 <SDRAM_MspInit+0x1e8>)
 8010836:	f000 ff4f 	bl	80116d8 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 801083a:	23e0      	movs	r3, #224	@ 0xe0
 801083c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 801083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010842:	4619      	mov	r1, r3
 8010844:	482b      	ldr	r0, [pc, #172]	@ (80108f4 <SDRAM_MspInit+0x1ec>)
 8010846:	f000 ff47 	bl	80116d8 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 801084a:	4b2b      	ldr	r3, [pc, #172]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 801084c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8010850:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8010852:	4b29      	ldr	r3, [pc, #164]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010858:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 801085a:	4b27      	ldr	r3, [pc, #156]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 801085c:	2280      	movs	r2, #128	@ 0x80
 801085e:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8010860:	4b25      	ldr	r3, [pc, #148]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010862:	2200      	movs	r2, #0
 8010864:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 8010866:	4b24      	ldr	r3, [pc, #144]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010868:	f240 2202 	movw	r2, #514	@ 0x202
 801086c:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 801086e:	4b22      	ldr	r3, [pc, #136]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010870:	f640 0208 	movw	r2, #2056	@ 0x808
 8010874:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8010876:	4b20      	ldr	r3, [pc, #128]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010878:	2220      	movs	r2, #32
 801087a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 801087c:	4b1e      	ldr	r3, [pc, #120]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 801087e:	2280      	movs	r2, #128	@ 0x80
 8010880:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8010882:	4b1d      	ldr	r3, [pc, #116]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010884:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8010888:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 801088a:	4b1b      	ldr	r3, [pc, #108]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 801088c:	2200      	movs	r2, #0
 801088e:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8010890:	4b19      	ldr	r3, [pc, #100]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010892:	2200      	movs	r2, #0
 8010894:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 8010896:	4b18      	ldr	r3, [pc, #96]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 8010898:	2280      	movs	r2, #128	@ 0x80
 801089a:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 801089c:	4b16      	ldr	r3, [pc, #88]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 801089e:	2200      	movs	r2, #0
 80108a0:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80108a2:	4b15      	ldr	r3, [pc, #84]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	639a      	str	r2, [r3, #56]	@ 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80108a8:	4b13      	ldr	r3, [pc, #76]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108aa:	4a14      	ldr	r2, [pc, #80]	@ (80108fc <SDRAM_MspInit+0x1f4>)
 80108ac:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80108ae:	4b14      	ldr	r3, [pc, #80]	@ (8010900 <SDRAM_MspInit+0x1f8>)
 80108b0:	4a11      	ldr	r2, [pc, #68]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80108b4:	4b10      	ldr	r3, [pc, #64]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108b6:	4a12      	ldr	r2, [pc, #72]	@ (8010900 <SDRAM_MspInit+0x1f8>)
 80108b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80108ba:	480f      	ldr	r0, [pc, #60]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108bc:	f002 fc76 	bl	80131ac <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80108c0:	480d      	ldr	r0, [pc, #52]	@ (80108f8 <SDRAM_MspInit+0x1f0>)
 80108c2:	f002 fc27 	bl	8013114 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80108c6:	2200      	movs	r2, #0
 80108c8:	210f      	movs	r1, #15
 80108ca:	207a      	movs	r0, #122	@ 0x7a
 80108cc:	f000 fbec 	bl	80110a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80108d0:	207a      	movs	r0, #122	@ 0x7a
 80108d2:	f000 fc03 	bl	80110dc <HAL_NVIC_EnableIRQ>
}
 80108d6:	bf00      	nop
 80108d8:	3738      	adds	r7, #56	@ 0x38
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	58024400 	.word	0x58024400
 80108e4:	58020c00 	.word	0x58020c00
 80108e8:	58021000 	.word	0x58021000
 80108ec:	58021400 	.word	0x58021400
 80108f0:	58021800 	.word	0x58021800
 80108f4:	58021c00 	.word	0x58021c00
 80108f8:	2400b78c 	.word	0x2400b78c
 80108fc:	52000040 	.word	0x52000040
 8010900:	2400b738 	.word	0x2400b738

08010904 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 801090c:	207a      	movs	r0, #122	@ 0x7a
 801090e:	f000 fbf3 	bl	80110f8 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8010912:	4b05      	ldr	r3, [pc, #20]	@ (8010928 <SDRAM_MspDeInit+0x24>)
 8010914:	4a05      	ldr	r2, [pc, #20]	@ (801092c <SDRAM_MspDeInit+0x28>)
 8010916:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8010918:	4803      	ldr	r0, [pc, #12]	@ (8010928 <SDRAM_MspDeInit+0x24>)
 801091a:	f002 fc47 	bl	80131ac <HAL_MDMA_DeInit>
}
 801091e:	bf00      	nop
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	2400b7f8 	.word	0x2400b7f8
 801092c:	52000040 	.word	0x52000040

08010930 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b088      	sub	sp, #32
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801093a:	2300      	movs	r3, #0
 801093c:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d11c      	bne.n	801097e <BSP_TS_Init+0x4e>
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d018      	beq.n	801097e <BSP_TS_Init+0x4e>
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8010954:	d813      	bhi.n	801097e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00f      	beq.n	801097e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	685b      	ldr	r3, [r3, #4]
 8010962:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8010966:	d80a      	bhi.n	801097e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	68da      	ldr	r2, [r3, #12]
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	6819      	ldr	r1, [r3, #0]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	428b      	cmp	r3, r1
 8010976:	bf28      	it	cs
 8010978:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 801097a:	429a      	cmp	r2, r3
 801097c:	d903      	bls.n	8010986 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801097e:	f06f 0301 	mvn.w	r3, #1
 8010982:	61fb      	str	r3, [r7, #28]
 8010984:	e085      	b.n	8010a92 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f9e6 	bl	8010d58 <FT5336_Probe>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d003      	beq.n	801099a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 8010992:	f04f 33ff 	mov.w	r3, #4294967295
 8010996:	61fb      	str	r3, [r7, #28]
 8010998:	e07b      	b.n	8010a92 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	6819      	ldr	r1, [r3, #0]
 801099e:	483f      	ldr	r0, [pc, #252]	@ (8010a9c <BSP_TS_Init+0x16c>)
 80109a0:	687a      	ldr	r2, [r7, #4]
 80109a2:	4613      	mov	r3, r2
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	4413      	add	r3, r2
 80109a8:	00db      	lsls	r3, r3, #3
 80109aa:	4403      	add	r3, r0
 80109ac:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	6859      	ldr	r1, [r3, #4]
 80109b2:	483a      	ldr	r0, [pc, #232]	@ (8010a9c <BSP_TS_Init+0x16c>)
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	4613      	mov	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4413      	add	r3, r2
 80109bc:	00db      	lsls	r3, r3, #3
 80109be:	4403      	add	r3, r0
 80109c0:	3304      	adds	r3, #4
 80109c2:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	6899      	ldr	r1, [r3, #8]
 80109c8:	4834      	ldr	r0, [pc, #208]	@ (8010a9c <BSP_TS_Init+0x16c>)
 80109ca:	687a      	ldr	r2, [r7, #4]
 80109cc:	4613      	mov	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	4413      	add	r3, r2
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	4403      	add	r3, r0
 80109d6:	3308      	adds	r3, #8
 80109d8:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	68d9      	ldr	r1, [r3, #12]
 80109de:	482f      	ldr	r0, [pc, #188]	@ (8010a9c <BSP_TS_Init+0x16c>)
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	4613      	mov	r3, r2
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	4413      	add	r3, r2
 80109e8:	00db      	lsls	r3, r3, #3
 80109ea:	4403      	add	r3, r0
 80109ec:	330c      	adds	r3, #12
 80109ee:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80109f0:	4b2b      	ldr	r3, [pc, #172]	@ (8010aa0 <BSP_TS_Init+0x170>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	69db      	ldr	r3, [r3, #28]
 80109f6:	492b      	ldr	r1, [pc, #172]	@ (8010aa4 <BSP_TS_Init+0x174>)
 80109f8:	687a      	ldr	r2, [r7, #4]
 80109fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80109fe:	f107 010c 	add.w	r1, r7, #12
 8010a02:	4610      	mov	r0, r2
 8010a04:	4798      	blx	r3
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	da03      	bge.n	8010a14 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010a0c:	f06f 0304 	mvn.w	r3, #4
 8010a10:	61fb      	str	r3, [r7, #28]
 8010a12:	e03e      	b.n	8010a92 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8010a14:	6939      	ldr	r1, [r7, #16]
 8010a16:	4821      	ldr	r0, [pc, #132]	@ (8010a9c <BSP_TS_Init+0x16c>)
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	4613      	mov	r3, r2
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	4413      	add	r3, r2
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	4403      	add	r3, r0
 8010a24:	3310      	adds	r3, #16
 8010a26:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8010a28:	6979      	ldr	r1, [r7, #20]
 8010a2a:	481c      	ldr	r0, [pc, #112]	@ (8010a9c <BSP_TS_Init+0x16c>)
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4413      	add	r3, r2
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	4403      	add	r3, r0
 8010a38:	3314      	adds	r3, #20
 8010a3a:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	61bb      	str	r3, [r7, #24]
 8010a40:	e024      	b.n	8010a8c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	68db      	ldr	r3, [r3, #12]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	1c59      	adds	r1, r3, #1
 8010a4e:	4813      	ldr	r0, [pc, #76]	@ (8010a9c <BSP_TS_Init+0x16c>)
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	69ba      	ldr	r2, [r7, #24]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	3306      	adds	r3, #6
 8010a60:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	685a      	ldr	r2, [r3, #4]
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	4413      	add	r3, r2
 8010a6e:	1c59      	adds	r1, r3, #1
 8010a70:	480a      	ldr	r0, [pc, #40]	@ (8010a9c <BSP_TS_Init+0x16c>)
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	4613      	mov	r3, r2
 8010a76:	009b      	lsls	r3, r3, #2
 8010a78:	4413      	add	r3, r2
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	69ba      	ldr	r2, [r7, #24]
 8010a7e:	4413      	add	r3, r2
 8010a80:	3308      	adds	r3, #8
 8010a82:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	61bb      	str	r3, [r7, #24]
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	2b01      	cmp	r3, #1
 8010a90:	d9d7      	bls.n	8010a42 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 8010a92:	69fb      	ldr	r3, [r7, #28]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3720      	adds	r7, #32
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	2400b86c 	.word	0x2400b86c
 8010aa0:	2400b864 	.word	0x2400b864
 8010aa4:	2400b868 	.word	0x2400b868

08010aa8 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08a      	sub	sp, #40	@ 0x28
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d003      	beq.n	8010ac4 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010abc:	f06f 0301 	mvn.w	r3, #1
 8010ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ac2:	e13e      	b.n	8010d42 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8010ac4:	4ba1      	ldr	r3, [pc, #644]	@ (8010d4c <BSP_TS_GetState+0x2a4>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	691b      	ldr	r3, [r3, #16]
 8010aca:	49a1      	ldr	r1, [pc, #644]	@ (8010d50 <BSP_TS_GetState+0x2a8>)
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010ad2:	f107 0108 	add.w	r1, r7, #8
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	4798      	blx	r3
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	da03      	bge.n	8010ae8 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010ae0:	f06f 0304 	mvn.w	r3, #4
 8010ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ae6:	e12c      	b.n	8010d42 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 8110 	beq.w	8010d10 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8010af8:	4996      	ldr	r1, [pc, #600]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	4613      	mov	r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	4413      	add	r3, r2
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	440b      	add	r3, r1
 8010b06:	3308      	adds	r3, #8
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f003 0308 	and.w	r3, r3, #8
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d003      	beq.n	8010b1a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8010b1a:	498e      	ldr	r1, [pc, #568]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	440b      	add	r3, r1
 8010b28:	3308      	adds	r3, #8
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f003 0302 	and.w	r3, r3, #2
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d00c      	beq.n	8010b4e <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8010b34:	4987      	ldr	r1, [pc, #540]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	4613      	mov	r3, r2
 8010b3a:	009b      	lsls	r3, r3, #2
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	440b      	add	r3, r1
 8010b42:	3310      	adds	r3, #16
 8010b44:	681a      	ldr	r2, [r3, #0]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8010b4e:	4981      	ldr	r1, [pc, #516]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	4613      	mov	r3, r2
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	4413      	add	r3, r2
 8010b58:	00db      	lsls	r3, r3, #3
 8010b5a:	440b      	add	r3, r1
 8010b5c:	3308      	adds	r3, #8
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f003 0304 	and.w	r3, r3, #4
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00b      	beq.n	8010b80 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8010b68:	497a      	ldr	r1, [pc, #488]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	4413      	add	r3, r2
 8010b72:	00db      	lsls	r3, r3, #3
 8010b74:	440b      	add	r3, r1
 8010b76:	3314      	adds	r3, #20
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8010b80:	4974      	ldr	r1, [pc, #464]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	4613      	mov	r3, r2
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	4413      	add	r3, r2
 8010b8a:	00db      	lsls	r3, r3, #3
 8010b8c:	440b      	add	r3, r1
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	6a3a      	ldr	r2, [r7, #32]
 8010b92:	fb02 f103 	mul.w	r1, r2, r3
 8010b96:	486f      	ldr	r0, [pc, #444]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	4613      	mov	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	4413      	add	r3, r2
 8010ba0:	00db      	lsls	r3, r3, #3
 8010ba2:	4403      	add	r3, r0
 8010ba4:	3310      	adds	r3, #16
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	fbb1 f2f3 	udiv	r2, r1, r3
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8010bb0:	4968      	ldr	r1, [pc, #416]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4413      	add	r3, r2
 8010bba:	00db      	lsls	r3, r3, #3
 8010bbc:	440b      	add	r3, r1
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	69fa      	ldr	r2, [r7, #28]
 8010bc4:	fb02 f103 	mul.w	r1, r2, r3
 8010bc8:	4862      	ldr	r0, [pc, #392]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	00db      	lsls	r3, r3, #3
 8010bd4:	4403      	add	r3, r0
 8010bd6:	3314      	adds	r3, #20
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	fbb1 f2f3 	udiv	r2, r1, r3
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8010be2:	68ba      	ldr	r2, [r7, #8]
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	6859      	ldr	r1, [r3, #4]
 8010bec:	4859      	ldr	r0, [pc, #356]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	4413      	add	r3, r2
 8010bf6:	00db      	lsls	r3, r3, #3
 8010bf8:	4403      	add	r3, r0
 8010bfa:	3318      	adds	r3, #24
 8010bfc:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010bfe:	4299      	cmp	r1, r3
 8010c00:	d90c      	bls.n	8010c1c <BSP_TS_GetState+0x174>
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	6859      	ldr	r1, [r3, #4]
 8010c06:	4853      	ldr	r0, [pc, #332]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	4413      	add	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	4403      	add	r3, r0
 8010c14:	3318      	adds	r3, #24
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	1acb      	subs	r3, r1, r3
 8010c1a:	e00b      	b.n	8010c34 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 8010c1c:	494d      	ldr	r1, [pc, #308]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	4613      	mov	r3, r2
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	440b      	add	r3, r1
 8010c2a:	3318      	adds	r3, #24
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8010c32:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8010c34:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	6899      	ldr	r1, [r3, #8]
 8010c3a:	4846      	ldr	r0, [pc, #280]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	4403      	add	r3, r0
 8010c48:	3320      	adds	r3, #32
 8010c4a:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	d90c      	bls.n	8010c6a <BSP_TS_GetState+0x1c2>
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	6899      	ldr	r1, [r3, #8]
 8010c54:	483f      	ldr	r0, [pc, #252]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	4613      	mov	r3, r2
 8010c5a:	009b      	lsls	r3, r3, #2
 8010c5c:	4413      	add	r3, r2
 8010c5e:	00db      	lsls	r3, r3, #3
 8010c60:	4403      	add	r3, r0
 8010c62:	3320      	adds	r3, #32
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	1acb      	subs	r3, r1, r3
 8010c68:	e00b      	b.n	8010c82 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8010c6a:	493a      	ldr	r1, [pc, #232]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	4413      	add	r3, r2
 8010c74:	00db      	lsls	r3, r3, #3
 8010c76:	440b      	add	r3, r1
 8010c78:	3320      	adds	r3, #32
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8010c80:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8010c82:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8010c84:	4933      	ldr	r1, [pc, #204]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	4613      	mov	r3, r2
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	4413      	add	r3, r2
 8010c8e:	00db      	lsls	r3, r3, #3
 8010c90:	440b      	add	r3, r1
 8010c92:	330c      	adds	r3, #12
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	69ba      	ldr	r2, [r7, #24]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d80b      	bhi.n	8010cb4 <BSP_TS_GetState+0x20c>
 8010c9c:	492d      	ldr	r1, [pc, #180]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	009b      	lsls	r3, r3, #2
 8010ca4:	4413      	add	r3, r2
 8010ca6:	00db      	lsls	r3, r3, #3
 8010ca8:	440b      	add	r3, r1
 8010caa:	330c      	adds	r3, #12
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	697a      	ldr	r2, [r7, #20]
 8010cb0:	429a      	cmp	r2, r3
 8010cb2:	d916      	bls.n	8010ce2 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	6859      	ldr	r1, [r3, #4]
 8010cb8:	4826      	ldr	r0, [pc, #152]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	4403      	add	r3, r0
 8010cc6:	3318      	adds	r3, #24
 8010cc8:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	6899      	ldr	r1, [r3, #8]
 8010cce:	4821      	ldr	r0, [pc, #132]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	4413      	add	r3, r2
 8010cd8:	00db      	lsls	r3, r3, #3
 8010cda:	4403      	add	r3, r0
 8010cdc:	3320      	adds	r3, #32
 8010cde:	6019      	str	r1, [r3, #0]
 8010ce0:	e02f      	b.n	8010d42 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010ce2:	491c      	ldr	r1, [pc, #112]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	4613      	mov	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4413      	add	r3, r2
 8010cec:	00db      	lsls	r3, r3, #3
 8010cee:	440b      	add	r3, r1
 8010cf0:	3318      	adds	r3, #24
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010cf8:	4916      	ldr	r1, [pc, #88]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010cfa:	687a      	ldr	r2, [r7, #4]
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4413      	add	r3, r2
 8010d02:	00db      	lsls	r3, r3, #3
 8010d04:	440b      	add	r3, r1
 8010d06:	3320      	adds	r3, #32
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	609a      	str	r2, [r3, #8]
 8010d0e:	e018      	b.n	8010d42 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2200      	movs	r2, #0
 8010d14:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8010d16:	490f      	ldr	r1, [pc, #60]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010d18:	687a      	ldr	r2, [r7, #4]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	00db      	lsls	r3, r3, #3
 8010d22:	440b      	add	r3, r1
 8010d24:	3318      	adds	r3, #24
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8010d2c:	4909      	ldr	r1, [pc, #36]	@ (8010d54 <BSP_TS_GetState+0x2ac>)
 8010d2e:	687a      	ldr	r2, [r7, #4]
 8010d30:	4613      	mov	r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	4413      	add	r3, r2
 8010d36:	00db      	lsls	r3, r3, #3
 8010d38:	440b      	add	r3, r1
 8010d3a:	3320      	adds	r3, #32
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 8010d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3728      	adds	r7, #40	@ 0x28
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	2400b864 	.word	0x2400b864
 8010d50:	2400b868 	.word	0x2400b868
 8010d54:	2400b86c 	.word	0x2400b86c

08010d58 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b08a      	sub	sp, #40	@ 0x28
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010d60:	2300      	movs	r3, #0
 8010d62:	627b      	str	r3, [r7, #36]	@ 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 8010d64:	2300      	movs	r3, #0
 8010d66:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 8010d68:	2370      	movs	r3, #112	@ 0x70
 8010d6a:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8010d6c:	4b23      	ldr	r3, [pc, #140]	@ (8010dfc <FT5336_Probe+0xa4>)
 8010d6e:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8010d70:	4b23      	ldr	r3, [pc, #140]	@ (8010e00 <FT5336_Probe+0xa8>)
 8010d72:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8010d74:	4b23      	ldr	r3, [pc, #140]	@ (8010e04 <FT5336_Probe+0xac>)
 8010d76:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8010d78:	4b23      	ldr	r3, [pc, #140]	@ (8010e08 <FT5336_Probe+0xb0>)
 8010d7a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8010d7c:	4b23      	ldr	r3, [pc, #140]	@ (8010e0c <FT5336_Probe+0xb4>)
 8010d7e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8010d80:	f107 030c 	add.w	r3, r7, #12
 8010d84:	4619      	mov	r1, r3
 8010d86:	4822      	ldr	r0, [pc, #136]	@ (8010e10 <FT5336_Probe+0xb8>)
 8010d88:	f7fd fcb2 	bl	800e6f0 <FT5336_RegisterBusIO>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8010d92:	f06f 0307 	mvn.w	r3, #7
 8010d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d98:	e02a      	b.n	8010df0 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8010d9a:	f107 0308 	add.w	r3, r7, #8
 8010d9e:	4619      	mov	r1, r3
 8010da0:	481b      	ldr	r0, [pc, #108]	@ (8010e10 <FT5336_Probe+0xb8>)
 8010da2:	f7fd fd9f 	bl	800e8e4 <FT5336_ReadID>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d003      	beq.n	8010db4 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010dac:	f06f 0304 	mvn.w	r3, #4
 8010db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010db2:	e01d      	b.n	8010df0 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	2b51      	cmp	r3, #81	@ 0x51
 8010db8:	d003      	beq.n	8010dc2 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010dba:	f06f 0306 	mvn.w	r3, #6
 8010dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dc0:	e016      	b.n	8010df0 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8010dc2:	4a14      	ldr	r2, [pc, #80]	@ (8010e14 <FT5336_Probe+0xbc>)
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4912      	ldr	r1, [pc, #72]	@ (8010e10 <FT5336_Probe+0xb8>)
 8010dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8010dcc:	4b12      	ldr	r3, [pc, #72]	@ (8010e18 <FT5336_Probe+0xc0>)
 8010dce:	4a13      	ldr	r2, [pc, #76]	@ (8010e1c <FT5336_Probe+0xc4>)
 8010dd0:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8010dd2:	4b11      	ldr	r3, [pc, #68]	@ (8010e18 <FT5336_Probe+0xc0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	490e      	ldr	r1, [pc, #56]	@ (8010e14 <FT5336_Probe+0xbc>)
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010de0:	4610      	mov	r0, r2
 8010de2:	4798      	blx	r3
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010dea:	f06f 0304 	mvn.w	r3, #4
 8010dee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }

  return ret;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3728      	adds	r7, #40	@ 0x28
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	0800f4e9 	.word	0x0800f4e9
 8010e00:	0800f55d 	.word	0x0800f55d
 8010e04:	0800f685 	.word	0x0800f685
 8010e08:	0800f629 	.word	0x0800f629
 8010e0c:	0800f6e1 	.word	0x0800f6e1
 8010e10:	2400b894 	.word	0x2400b894
 8010e14:	2400b868 	.word	0x2400b868
 8010e18:	2400b864 	.word	0x2400b864
 8010e1c:	24000020 	.word	0x24000020

08010e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010e26:	2003      	movs	r0, #3
 8010e28:	f000 f933 	bl	8011092 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010e2c:	f004 f88c 	bl	8014f48 <HAL_RCC_GetSysClockFreq>
 8010e30:	4602      	mov	r2, r0
 8010e32:	4b15      	ldr	r3, [pc, #84]	@ (8010e88 <HAL_Init+0x68>)
 8010e34:	699b      	ldr	r3, [r3, #24]
 8010e36:	0a1b      	lsrs	r3, r3, #8
 8010e38:	f003 030f 	and.w	r3, r3, #15
 8010e3c:	4913      	ldr	r1, [pc, #76]	@ (8010e8c <HAL_Init+0x6c>)
 8010e3e:	5ccb      	ldrb	r3, [r1, r3]
 8010e40:	f003 031f 	and.w	r3, r3, #31
 8010e44:	fa22 f303 	lsr.w	r3, r2, r3
 8010e48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8010e88 <HAL_Init+0x68>)
 8010e4c:	699b      	ldr	r3, [r3, #24]
 8010e4e:	f003 030f 	and.w	r3, r3, #15
 8010e52:	4a0e      	ldr	r2, [pc, #56]	@ (8010e8c <HAL_Init+0x6c>)
 8010e54:	5cd3      	ldrb	r3, [r2, r3]
 8010e56:	f003 031f 	and.w	r3, r3, #31
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e60:	4a0b      	ldr	r2, [pc, #44]	@ (8010e90 <HAL_Init+0x70>)
 8010e62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010e64:	4a0b      	ldr	r2, [pc, #44]	@ (8010e94 <HAL_Init+0x74>)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010e6a:	200f      	movs	r0, #15
 8010e6c:	f7f0 fbee 	bl	800164c <HAL_InitTick>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8010e76:	2301      	movs	r3, #1
 8010e78:	e002      	b.n	8010e80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8010e7a:	f7f0 f827 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	58024400 	.word	0x58024400
 8010e8c:	0802d808 	.word	0x0802d808
 8010e90:	2400001c 	.word	0x2400001c
 8010e94:	24000018 	.word	0x24000018

08010e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010e9c:	4b06      	ldr	r3, [pc, #24]	@ (8010eb8 <HAL_IncTick+0x20>)
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4b06      	ldr	r3, [pc, #24]	@ (8010ebc <HAL_IncTick+0x24>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	4a04      	ldr	r2, [pc, #16]	@ (8010ebc <HAL_IncTick+0x24>)
 8010eaa:	6013      	str	r3, [r2, #0]
}
 8010eac:	bf00      	nop
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	24000054 	.word	0x24000054
 8010ebc:	2400b8bc 	.word	0x2400b8bc

08010ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010ec0:	b480      	push	{r7}
 8010ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8010ec4:	4b03      	ldr	r3, [pc, #12]	@ (8010ed4 <HAL_GetTick+0x14>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	2400b8bc 	.word	0x2400b8bc

08010ed8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8010ed8:	b480      	push	{r7}
 8010eda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8010edc:	4b03      	ldr	r3, [pc, #12]	@ (8010eec <HAL_GetREVID+0x14>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	0c1b      	lsrs	r3, r3, #16
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	5c001000 	.word	0x5c001000

08010ef0 <__NVIC_SetPriorityGrouping>:
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f003 0307 	and.w	r3, r3, #7
 8010efe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010f00:	4b0b      	ldr	r3, [pc, #44]	@ (8010f30 <__NVIC_SetPriorityGrouping+0x40>)
 8010f02:	68db      	ldr	r3, [r3, #12]
 8010f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010f0c:	4013      	ands	r3, r2
 8010f0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8010f18:	4b06      	ldr	r3, [pc, #24]	@ (8010f34 <__NVIC_SetPriorityGrouping+0x44>)
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010f1e:	4a04      	ldr	r2, [pc, #16]	@ (8010f30 <__NVIC_SetPriorityGrouping+0x40>)
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	60d3      	str	r3, [r2, #12]
}
 8010f24:	bf00      	nop
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr
 8010f30:	e000ed00 	.word	0xe000ed00
 8010f34:	05fa0000 	.word	0x05fa0000

08010f38 <__NVIC_GetPriorityGrouping>:
{
 8010f38:	b480      	push	{r7}
 8010f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010f3c:	4b04      	ldr	r3, [pc, #16]	@ (8010f50 <__NVIC_GetPriorityGrouping+0x18>)
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	0a1b      	lsrs	r3, r3, #8
 8010f42:	f003 0307 	and.w	r3, r3, #7
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr
 8010f50:	e000ed00 	.word	0xe000ed00

08010f54 <__NVIC_EnableIRQ>:
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	db0b      	blt.n	8010f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010f66:	88fb      	ldrh	r3, [r7, #6]
 8010f68:	f003 021f 	and.w	r2, r3, #31
 8010f6c:	4907      	ldr	r1, [pc, #28]	@ (8010f8c <__NVIC_EnableIRQ+0x38>)
 8010f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f72:	095b      	lsrs	r3, r3, #5
 8010f74:	2001      	movs	r0, #1
 8010f76:	fa00 f202 	lsl.w	r2, r0, r2
 8010f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010f7e:	bf00      	nop
 8010f80:	370c      	adds	r7, #12
 8010f82:	46bd      	mov	sp, r7
 8010f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f88:	4770      	bx	lr
 8010f8a:	bf00      	nop
 8010f8c:	e000e100 	.word	0xe000e100

08010f90 <__NVIC_DisableIRQ>:
{
 8010f90:	b480      	push	{r7}
 8010f92:	b083      	sub	sp, #12
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	4603      	mov	r3, r0
 8010f98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	db12      	blt.n	8010fc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010fa2:	88fb      	ldrh	r3, [r7, #6]
 8010fa4:	f003 021f 	and.w	r2, r3, #31
 8010fa8:	490a      	ldr	r1, [pc, #40]	@ (8010fd4 <__NVIC_DisableIRQ+0x44>)
 8010faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010fae:	095b      	lsrs	r3, r3, #5
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8010fb6:	3320      	adds	r3, #32
 8010fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8010fbc:	f3bf 8f4f 	dsb	sy
}
 8010fc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8010fc2:	f3bf 8f6f 	isb	sy
}
 8010fc6:	bf00      	nop
}
 8010fc8:	bf00      	nop
 8010fca:	370c      	adds	r7, #12
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr
 8010fd4:	e000e100 	.word	0xe000e100

08010fd8 <__NVIC_SetPriority>:
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	4603      	mov	r3, r0
 8010fe0:	6039      	str	r1, [r7, #0]
 8010fe2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	db0a      	blt.n	8011002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010fec:	683b      	ldr	r3, [r7, #0]
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	490c      	ldr	r1, [pc, #48]	@ (8011024 <__NVIC_SetPriority+0x4c>)
 8010ff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ff6:	0112      	lsls	r2, r2, #4
 8010ff8:	b2d2      	uxtb	r2, r2
 8010ffa:	440b      	add	r3, r1
 8010ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8011000:	e00a      	b.n	8011018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	b2da      	uxtb	r2, r3
 8011006:	4908      	ldr	r1, [pc, #32]	@ (8011028 <__NVIC_SetPriority+0x50>)
 8011008:	88fb      	ldrh	r3, [r7, #6]
 801100a:	f003 030f 	and.w	r3, r3, #15
 801100e:	3b04      	subs	r3, #4
 8011010:	0112      	lsls	r2, r2, #4
 8011012:	b2d2      	uxtb	r2, r2
 8011014:	440b      	add	r3, r1
 8011016:	761a      	strb	r2, [r3, #24]
}
 8011018:	bf00      	nop
 801101a:	370c      	adds	r7, #12
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr
 8011024:	e000e100 	.word	0xe000e100
 8011028:	e000ed00 	.word	0xe000ed00

0801102c <NVIC_EncodePriority>:
{
 801102c:	b480      	push	{r7}
 801102e:	b089      	sub	sp, #36	@ 0x24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f003 0307 	and.w	r3, r3, #7
 801103e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	f1c3 0307 	rsb	r3, r3, #7
 8011046:	2b04      	cmp	r3, #4
 8011048:	bf28      	it	cs
 801104a:	2304      	movcs	r3, #4
 801104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	3304      	adds	r3, #4
 8011052:	2b06      	cmp	r3, #6
 8011054:	d902      	bls.n	801105c <NVIC_EncodePriority+0x30>
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	3b03      	subs	r3, #3
 801105a:	e000      	b.n	801105e <NVIC_EncodePriority+0x32>
 801105c:	2300      	movs	r3, #0
 801105e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011060:	f04f 32ff 	mov.w	r2, #4294967295
 8011064:	69bb      	ldr	r3, [r7, #24]
 8011066:	fa02 f303 	lsl.w	r3, r2, r3
 801106a:	43da      	mvns	r2, r3
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	401a      	ands	r2, r3
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011074:	f04f 31ff 	mov.w	r1, #4294967295
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	fa01 f303 	lsl.w	r3, r1, r3
 801107e:	43d9      	mvns	r1, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011084:	4313      	orrs	r3, r2
}
 8011086:	4618      	mov	r0, r3
 8011088:	3724      	adds	r7, #36	@ 0x24
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f7ff ff28 	bl	8010ef0 <__NVIC_SetPriorityGrouping>
}
 80110a0:	bf00      	nop
 80110a2:	3708      	adds	r7, #8
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	4603      	mov	r3, r0
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	607a      	str	r2, [r7, #4]
 80110b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80110b6:	f7ff ff3f 	bl	8010f38 <__NVIC_GetPriorityGrouping>
 80110ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	68b9      	ldr	r1, [r7, #8]
 80110c0:	6978      	ldr	r0, [r7, #20]
 80110c2:	f7ff ffb3 	bl	801102c <NVIC_EncodePriority>
 80110c6:	4602      	mov	r2, r0
 80110c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110cc:	4611      	mov	r1, r2
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff ff82 	bl	8010fd8 <__NVIC_SetPriority>
}
 80110d4:	bf00      	nop
 80110d6:	3718      	adds	r7, #24
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	4603      	mov	r3, r0
 80110e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80110e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7ff ff32 	bl	8010f54 <__NVIC_EnableIRQ>
}
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b082      	sub	sp, #8
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	4603      	mov	r3, r0
 8011100:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8011102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011106:	4618      	mov	r0, r3
 8011108:	f7ff ff42 	bl	8010f90 <__NVIC_DisableIRQ>
}
 801110c:	bf00      	nop
 801110e:	3708      	adds	r7, #8
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}

08011114 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8011114:	b480      	push	{r7}
 8011116:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8011118:	f3bf 8f5f 	dmb	sy
}
 801111c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801111e:	4b07      	ldr	r3, [pc, #28]	@ (801113c <HAL_MPU_Disable+0x28>)
 8011120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011122:	4a06      	ldr	r2, [pc, #24]	@ (801113c <HAL_MPU_Disable+0x28>)
 8011124:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011128:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801112a:	4b05      	ldr	r3, [pc, #20]	@ (8011140 <HAL_MPU_Disable+0x2c>)
 801112c:	2200      	movs	r2, #0
 801112e:	605a      	str	r2, [r3, #4]
}
 8011130:	bf00      	nop
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	e000ed00 	.word	0xe000ed00
 8011140:	e000ed90 	.word	0xe000ed90

08011144 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801114c:	4a0b      	ldr	r2, [pc, #44]	@ (801117c <HAL_MPU_Enable+0x38>)
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f043 0301 	orr.w	r3, r3, #1
 8011154:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8011156:	4b0a      	ldr	r3, [pc, #40]	@ (8011180 <HAL_MPU_Enable+0x3c>)
 8011158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801115a:	4a09      	ldr	r2, [pc, #36]	@ (8011180 <HAL_MPU_Enable+0x3c>)
 801115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011160:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8011162:	f3bf 8f4f 	dsb	sy
}
 8011166:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011168:	f3bf 8f6f 	isb	sy
}
 801116c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801116e:	bf00      	nop
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	e000ed90 	.word	0xe000ed90
 8011180:	e000ed00 	.word	0xe000ed00

08011184 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	785a      	ldrb	r2, [r3, #1]
 8011190:	4b1d      	ldr	r3, [pc, #116]	@ (8011208 <HAL_MPU_ConfigRegion+0x84>)
 8011192:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d029      	beq.n	80111f0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 801119c:	4a1a      	ldr	r2, [pc, #104]	@ (8011208 <HAL_MPU_ConfigRegion+0x84>)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	7b1b      	ldrb	r3, [r3, #12]
 80111a8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	7adb      	ldrb	r3, [r3, #11]
 80111ae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80111b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	7a9b      	ldrb	r3, [r3, #10]
 80111b6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80111b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	7b5b      	ldrb	r3, [r3, #13]
 80111be:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80111c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	7b9b      	ldrb	r3, [r3, #14]
 80111c6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80111c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	7bdb      	ldrb	r3, [r3, #15]
 80111ce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80111d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	7a5b      	ldrb	r3, [r3, #9]
 80111d6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80111d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	7a1b      	ldrb	r3, [r3, #8]
 80111de:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80111e0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	7812      	ldrb	r2, [r2, #0]
 80111e6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80111e8:	4a07      	ldr	r2, [pc, #28]	@ (8011208 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80111ea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80111ec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80111ee:	e005      	b.n	80111fc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80111f0:	4b05      	ldr	r3, [pc, #20]	@ (8011208 <HAL_MPU_ConfigRegion+0x84>)
 80111f2:	2200      	movs	r2, #0
 80111f4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80111f6:	4b04      	ldr	r3, [pc, #16]	@ (8011208 <HAL_MPU_ConfigRegion+0x84>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	611a      	str	r2, [r3, #16]
}
 80111fc:	bf00      	nop
 80111fe:	370c      	adds	r7, #12
 8011200:	46bd      	mov	sp, r7
 8011202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011206:	4770      	bx	lr
 8011208:	e000ed90 	.word	0xe000ed90

0801120c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	e054      	b.n	80112c8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	7f5b      	ldrb	r3, [r3, #29]
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d105      	bne.n	8011234 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7ef fe6a 	bl	8000f08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2202      	movs	r2, #2
 8011238:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	791b      	ldrb	r3, [r3, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d10c      	bne.n	801125c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	4a22      	ldr	r2, [pc, #136]	@ (80112d0 <HAL_CRC_Init+0xc4>)
 8011248:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689a      	ldr	r2, [r3, #8]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	f022 0218 	bic.w	r2, r2, #24
 8011258:	609a      	str	r2, [r3, #8]
 801125a:	e00c      	b.n	8011276 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6899      	ldr	r1, [r3, #8]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	461a      	mov	r2, r3
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 f834 	bl	80112d4 <HAL_CRCEx_Polynomial_Set>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	e028      	b.n	80112c8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	795b      	ldrb	r3, [r3, #5]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d105      	bne.n	801128a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f04f 32ff 	mov.w	r2, #4294967295
 8011286:	611a      	str	r2, [r3, #16]
 8011288:	e004      	b.n	8011294 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	687a      	ldr	r2, [r7, #4]
 8011290:	6912      	ldr	r2, [r2, #16]
 8011292:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	689b      	ldr	r3, [r3, #8]
 801129a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	695a      	ldr	r2, [r3, #20]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	430a      	orrs	r2, r1
 80112a8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	699a      	ldr	r2, [r3, #24]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	430a      	orrs	r2, r1
 80112be:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2201      	movs	r2, #1
 80112c4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80112c6:	2300      	movs	r3, #0
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3708      	adds	r7, #8
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	04c11db7 	.word	0x04c11db7

080112d4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b087      	sub	sp, #28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80112e4:	231f      	movs	r3, #31
 80112e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d102      	bne.n	80112f8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80112f2:	2301      	movs	r3, #1
 80112f4:	75fb      	strb	r3, [r7, #23]
 80112f6:	e063      	b.n	80113c0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80112f8:	bf00      	nop
 80112fa:	693b      	ldr	r3, [r7, #16]
 80112fc:	1e5a      	subs	r2, r3, #1
 80112fe:	613a      	str	r2, [r7, #16]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d009      	beq.n	8011318 <HAL_CRCEx_Polynomial_Set+0x44>
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	f003 031f 	and.w	r3, r3, #31
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	fa22 f303 	lsr.w	r3, r2, r3
 8011310:	f003 0301 	and.w	r3, r3, #1
 8011314:	2b00      	cmp	r3, #0
 8011316:	d0f0      	beq.n	80112fa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b18      	cmp	r3, #24
 801131c:	d846      	bhi.n	80113ac <HAL_CRCEx_Polynomial_Set+0xd8>
 801131e:	a201      	add	r2, pc, #4	@ (adr r2, 8011324 <HAL_CRCEx_Polynomial_Set+0x50>)
 8011320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011324:	080113b3 	.word	0x080113b3
 8011328:	080113ad 	.word	0x080113ad
 801132c:	080113ad 	.word	0x080113ad
 8011330:	080113ad 	.word	0x080113ad
 8011334:	080113ad 	.word	0x080113ad
 8011338:	080113ad 	.word	0x080113ad
 801133c:	080113ad 	.word	0x080113ad
 8011340:	080113ad 	.word	0x080113ad
 8011344:	080113a1 	.word	0x080113a1
 8011348:	080113ad 	.word	0x080113ad
 801134c:	080113ad 	.word	0x080113ad
 8011350:	080113ad 	.word	0x080113ad
 8011354:	080113ad 	.word	0x080113ad
 8011358:	080113ad 	.word	0x080113ad
 801135c:	080113ad 	.word	0x080113ad
 8011360:	080113ad 	.word	0x080113ad
 8011364:	08011395 	.word	0x08011395
 8011368:	080113ad 	.word	0x080113ad
 801136c:	080113ad 	.word	0x080113ad
 8011370:	080113ad 	.word	0x080113ad
 8011374:	080113ad 	.word	0x080113ad
 8011378:	080113ad 	.word	0x080113ad
 801137c:	080113ad 	.word	0x080113ad
 8011380:	080113ad 	.word	0x080113ad
 8011384:	08011389 	.word	0x08011389
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	2b06      	cmp	r3, #6
 801138c:	d913      	bls.n	80113b6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 801138e:	2301      	movs	r3, #1
 8011390:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8011392:	e010      	b.n	80113b6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	2b07      	cmp	r3, #7
 8011398:	d90f      	bls.n	80113ba <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 801139e:	e00c      	b.n	80113ba <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80113a0:	693b      	ldr	r3, [r7, #16]
 80113a2:	2b0f      	cmp	r3, #15
 80113a4:	d90b      	bls.n	80113be <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80113aa:	e008      	b.n	80113be <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80113ac:	2301      	movs	r3, #1
 80113ae:	75fb      	strb	r3, [r7, #23]
        break;
 80113b0:	e006      	b.n	80113c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80113b2:	bf00      	nop
 80113b4:	e004      	b.n	80113c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80113b6:	bf00      	nop
 80113b8:	e002      	b.n	80113c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80113ba:	bf00      	nop
 80113bc:	e000      	b.n	80113c0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80113be:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80113c0:	7dfb      	ldrb	r3, [r7, #23]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d10d      	bne.n	80113e2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	689b      	ldr	r3, [r3, #8]
 80113d4:	f023 0118 	bic.w	r1, r3, #24
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	430a      	orrs	r2, r1
 80113e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80113e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80113e4:	4618      	mov	r0, r3
 80113e6:	371c      	adds	r7, #28
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr

080113f0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	e04f      	b.n	80114a2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8011408:	b2db      	uxtb	r3, r3
 801140a:	2b00      	cmp	r3, #0
 801140c:	d106      	bne.n	801141c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2200      	movs	r2, #0
 8011412:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8011416:	6878      	ldr	r0, [r7, #4]
 8011418:	f7ef fd98 	bl	8000f4c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2202      	movs	r2, #2
 8011420:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	681a      	ldr	r2, [r3, #0]
 801142a:	4b20      	ldr	r3, [pc, #128]	@ (80114ac <HAL_DMA2D_Init+0xbc>)
 801142c:	4013      	ands	r3, r2
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	6851      	ldr	r1, [r2, #4]
 8011432:	687a      	ldr	r2, [r7, #4]
 8011434:	69d2      	ldr	r2, [r2, #28]
 8011436:	4311      	orrs	r1, r2
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	6812      	ldr	r2, [r2, #0]
 801143c:	430b      	orrs	r3, r1
 801143e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011446:	4b1a      	ldr	r3, [pc, #104]	@ (80114b0 <HAL_DMA2D_Init+0xc0>)
 8011448:	4013      	ands	r3, r2
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	6891      	ldr	r1, [r2, #8]
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	6992      	ldr	r2, [r2, #24]
 8011452:	4311      	orrs	r1, r2
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	6812      	ldr	r2, [r2, #0]
 8011458:	430b      	orrs	r3, r1
 801145a:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011462:	4b14      	ldr	r3, [pc, #80]	@ (80114b4 <HAL_DMA2D_Init+0xc4>)
 8011464:	4013      	ands	r3, r2
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	68d1      	ldr	r1, [r2, #12]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	6812      	ldr	r2, [r2, #0]
 801146e:	430b      	orrs	r3, r1
 8011470:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011478:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	691b      	ldr	r3, [r3, #16]
 8011480:	051a      	lsls	r2, r3, #20
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	695b      	ldr	r3, [r3, #20]
 8011486:	055b      	lsls	r3, r3, #21
 8011488:	431a      	orrs	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	430a      	orrs	r2, r1
 8011490:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2201      	movs	r2, #1
 801149c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 80114a0:	2300      	movs	r3, #0
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3708      	adds	r7, #8
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	fff8ffbf 	.word	0xfff8ffbf
 80114b0:	fffffef8 	.word	0xfffffef8
 80114b4:	ffff0000 	.word	0xffff0000

080114b8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f003 0301 	and.w	r3, r3, #1
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d026      	beq.n	8011528 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d021      	beq.n	8011528 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80114f2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80114f8:	f043 0201 	orr.w	r2, r3, #1
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2201      	movs	r2, #1
 8011506:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2204      	movs	r2, #4
 801150c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	d003      	beq.n	8011528 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	f003 0320 	and.w	r3, r3, #32
 801152e:	2b00      	cmp	r3, #0
 8011530:	d026      	beq.n	8011580 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011538:	2b00      	cmp	r3, #0
 801153a:	d021      	beq.n	8011580 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801154a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2220      	movs	r2, #32
 8011552:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011558:	f043 0202 	orr.w	r2, r3, #2
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2204      	movs	r2, #4
 8011564:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2200      	movs	r2, #0
 801156c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011574:	2b00      	cmp	r3, #0
 8011576:	d003      	beq.n	8011580 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	f003 0308 	and.w	r3, r3, #8
 8011586:	2b00      	cmp	r3, #0
 8011588:	d026      	beq.n	80115d8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011590:	2b00      	cmp	r3, #0
 8011592:	d021      	beq.n	80115d8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80115a2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2208      	movs	r2, #8
 80115aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80115b0:	f043 0204 	orr.w	r2, r3, #4
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2204      	movs	r2, #4
 80115bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2200      	movs	r2, #0
 80115c4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d003      	beq.n	80115d8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	f003 0304 	and.w	r3, r3, #4
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d013      	beq.n	801160a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00e      	beq.n	801160a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	681a      	ldr	r2, [r3, #0]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80115fa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2204      	movs	r2, #4
 8011602:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 f853 	bl	80116b0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f003 0302 	and.w	r3, r3, #2
 8011610:	2b00      	cmp	r3, #0
 8011612:	d024      	beq.n	801165e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801161a:	2b00      	cmp	r3, #0
 801161c:	d01f      	beq.n	801165e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 801162c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2202      	movs	r2, #2
 8011634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2201      	movs	r2, #1
 8011642:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2200      	movs	r2, #0
 801164a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      if (hdma2d->XferCpltCallback != NULL)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a1b      	ldr	r3, [r3, #32]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d003      	beq.n	801165e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6a1b      	ldr	r3, [r3, #32]
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f003 0310 	and.w	r3, r3, #16
 8011664:	2b00      	cmp	r3, #0
 8011666:	d01f      	beq.n	80116a8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801166e:	2b00      	cmp	r3, #0
 8011670:	d01a      	beq.n	80116a8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8011680:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2210      	movs	r2, #16
 8011688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f000 f80e 	bl	80116c4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80116a8:	bf00      	nop
 80116aa:	3710      	adds	r7, #16
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b083      	sub	sp, #12
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80116b8:	bf00      	nop
 80116ba:	370c      	adds	r7, #12
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr

080116c4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b083      	sub	sp, #12
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80116cc:	bf00      	nop
 80116ce:	370c      	adds	r7, #12
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80116d8:	b480      	push	{r7}
 80116da:	b089      	sub	sp, #36	@ 0x24
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80116e2:	2300      	movs	r3, #0
 80116e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80116e6:	4b89      	ldr	r3, [pc, #548]	@ (801190c <HAL_GPIO_Init+0x234>)
 80116e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80116ea:	e194      	b.n	8011a16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	2101      	movs	r1, #1
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	fa01 f303 	lsl.w	r3, r1, r3
 80116f8:	4013      	ands	r3, r2
 80116fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	f000 8186 	beq.w	8011a10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	f003 0303 	and.w	r3, r3, #3
 801170c:	2b01      	cmp	r3, #1
 801170e:	d005      	beq.n	801171c <HAL_GPIO_Init+0x44>
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	f003 0303 	and.w	r3, r3, #3
 8011718:	2b02      	cmp	r3, #2
 801171a:	d130      	bne.n	801177e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	005b      	lsls	r3, r3, #1
 8011726:	2203      	movs	r2, #3
 8011728:	fa02 f303 	lsl.w	r3, r2, r3
 801172c:	43db      	mvns	r3, r3
 801172e:	69ba      	ldr	r2, [r7, #24]
 8011730:	4013      	ands	r3, r2
 8011732:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	68da      	ldr	r2, [r3, #12]
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	005b      	lsls	r3, r3, #1
 801173c:	fa02 f303 	lsl.w	r3, r2, r3
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	4313      	orrs	r3, r2
 8011744:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	69ba      	ldr	r2, [r7, #24]
 801174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8011752:	2201      	movs	r2, #1
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	fa02 f303 	lsl.w	r3, r2, r3
 801175a:	43db      	mvns	r3, r3
 801175c:	69ba      	ldr	r2, [r7, #24]
 801175e:	4013      	ands	r3, r2
 8011760:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	091b      	lsrs	r3, r3, #4
 8011768:	f003 0201 	and.w	r2, r3, #1
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	fa02 f303 	lsl.w	r3, r2, r3
 8011772:	69ba      	ldr	r2, [r7, #24]
 8011774:	4313      	orrs	r3, r2
 8011776:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	69ba      	ldr	r2, [r7, #24]
 801177c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	f003 0303 	and.w	r3, r3, #3
 8011786:	2b03      	cmp	r3, #3
 8011788:	d017      	beq.n	80117ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	2203      	movs	r2, #3
 8011796:	fa02 f303 	lsl.w	r3, r2, r3
 801179a:	43db      	mvns	r3, r3
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	4013      	ands	r3, r2
 80117a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	689a      	ldr	r2, [r3, #8]
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	fa02 f303 	lsl.w	r3, r2, r3
 80117ae:	69ba      	ldr	r2, [r7, #24]
 80117b0:	4313      	orrs	r3, r2
 80117b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	f003 0303 	and.w	r3, r3, #3
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	d123      	bne.n	801180e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	08da      	lsrs	r2, r3, #3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3208      	adds	r2, #8
 80117ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80117d4:	69fb      	ldr	r3, [r7, #28]
 80117d6:	f003 0307 	and.w	r3, r3, #7
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	220f      	movs	r2, #15
 80117de:	fa02 f303 	lsl.w	r3, r2, r3
 80117e2:	43db      	mvns	r3, r3
 80117e4:	69ba      	ldr	r2, [r7, #24]
 80117e6:	4013      	ands	r3, r2
 80117e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	691a      	ldr	r2, [r3, #16]
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	f003 0307 	and.w	r3, r3, #7
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	fa02 f303 	lsl.w	r3, r2, r3
 80117fa:	69ba      	ldr	r2, [r7, #24]
 80117fc:	4313      	orrs	r3, r2
 80117fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	08da      	lsrs	r2, r3, #3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3208      	adds	r2, #8
 8011808:	69b9      	ldr	r1, [r7, #24]
 801180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	2203      	movs	r2, #3
 801181a:	fa02 f303 	lsl.w	r3, r2, r3
 801181e:	43db      	mvns	r3, r3
 8011820:	69ba      	ldr	r2, [r7, #24]
 8011822:	4013      	ands	r3, r2
 8011824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	f003 0203 	and.w	r2, r3, #3
 801182e:	69fb      	ldr	r3, [r7, #28]
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	fa02 f303 	lsl.w	r3, r2, r3
 8011836:	69ba      	ldr	r2, [r7, #24]
 8011838:	4313      	orrs	r3, r2
 801183a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	69ba      	ldr	r2, [r7, #24]
 8011840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 80e0 	beq.w	8011a10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011850:	4b2f      	ldr	r3, [pc, #188]	@ (8011910 <HAL_GPIO_Init+0x238>)
 8011852:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011856:	4a2e      	ldr	r2, [pc, #184]	@ (8011910 <HAL_GPIO_Init+0x238>)
 8011858:	f043 0302 	orr.w	r3, r3, #2
 801185c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8011860:	4b2b      	ldr	r3, [pc, #172]	@ (8011910 <HAL_GPIO_Init+0x238>)
 8011862:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8011866:	f003 0302 	and.w	r3, r3, #2
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801186e:	4a29      	ldr	r2, [pc, #164]	@ (8011914 <HAL_GPIO_Init+0x23c>)
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	089b      	lsrs	r3, r3, #2
 8011874:	3302      	adds	r3, #2
 8011876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	f003 0303 	and.w	r3, r3, #3
 8011882:	009b      	lsls	r3, r3, #2
 8011884:	220f      	movs	r2, #15
 8011886:	fa02 f303 	lsl.w	r3, r2, r3
 801188a:	43db      	mvns	r3, r3
 801188c:	69ba      	ldr	r2, [r7, #24]
 801188e:	4013      	ands	r3, r2
 8011890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4a20      	ldr	r2, [pc, #128]	@ (8011918 <HAL_GPIO_Init+0x240>)
 8011896:	4293      	cmp	r3, r2
 8011898:	d052      	beq.n	8011940 <HAL_GPIO_Init+0x268>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4a1f      	ldr	r2, [pc, #124]	@ (801191c <HAL_GPIO_Init+0x244>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d031      	beq.n	8011906 <HAL_GPIO_Init+0x22e>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4a1e      	ldr	r2, [pc, #120]	@ (8011920 <HAL_GPIO_Init+0x248>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d02b      	beq.n	8011902 <HAL_GPIO_Init+0x22a>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4a1d      	ldr	r2, [pc, #116]	@ (8011924 <HAL_GPIO_Init+0x24c>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d025      	beq.n	80118fe <HAL_GPIO_Init+0x226>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	4a1c      	ldr	r2, [pc, #112]	@ (8011928 <HAL_GPIO_Init+0x250>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d01f      	beq.n	80118fa <HAL_GPIO_Init+0x222>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4a1b      	ldr	r2, [pc, #108]	@ (801192c <HAL_GPIO_Init+0x254>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d019      	beq.n	80118f6 <HAL_GPIO_Init+0x21e>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4a1a      	ldr	r2, [pc, #104]	@ (8011930 <HAL_GPIO_Init+0x258>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d013      	beq.n	80118f2 <HAL_GPIO_Init+0x21a>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4a19      	ldr	r2, [pc, #100]	@ (8011934 <HAL_GPIO_Init+0x25c>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d00d      	beq.n	80118ee <HAL_GPIO_Init+0x216>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4a18      	ldr	r2, [pc, #96]	@ (8011938 <HAL_GPIO_Init+0x260>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d007      	beq.n	80118ea <HAL_GPIO_Init+0x212>
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4a17      	ldr	r2, [pc, #92]	@ (801193c <HAL_GPIO_Init+0x264>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d101      	bne.n	80118e6 <HAL_GPIO_Init+0x20e>
 80118e2:	2309      	movs	r3, #9
 80118e4:	e02d      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118e6:	230a      	movs	r3, #10
 80118e8:	e02b      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118ea:	2308      	movs	r3, #8
 80118ec:	e029      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118ee:	2307      	movs	r3, #7
 80118f0:	e027      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118f2:	2306      	movs	r3, #6
 80118f4:	e025      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118f6:	2305      	movs	r3, #5
 80118f8:	e023      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118fa:	2304      	movs	r3, #4
 80118fc:	e021      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 80118fe:	2303      	movs	r3, #3
 8011900:	e01f      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 8011902:	2302      	movs	r3, #2
 8011904:	e01d      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 8011906:	2301      	movs	r3, #1
 8011908:	e01b      	b.n	8011942 <HAL_GPIO_Init+0x26a>
 801190a:	bf00      	nop
 801190c:	58000080 	.word	0x58000080
 8011910:	58024400 	.word	0x58024400
 8011914:	58000400 	.word	0x58000400
 8011918:	58020000 	.word	0x58020000
 801191c:	58020400 	.word	0x58020400
 8011920:	58020800 	.word	0x58020800
 8011924:	58020c00 	.word	0x58020c00
 8011928:	58021000 	.word	0x58021000
 801192c:	58021400 	.word	0x58021400
 8011930:	58021800 	.word	0x58021800
 8011934:	58021c00 	.word	0x58021c00
 8011938:	58022000 	.word	0x58022000
 801193c:	58022400 	.word	0x58022400
 8011940:	2300      	movs	r3, #0
 8011942:	69fa      	ldr	r2, [r7, #28]
 8011944:	f002 0203 	and.w	r2, r2, #3
 8011948:	0092      	lsls	r2, r2, #2
 801194a:	4093      	lsls	r3, r2
 801194c:	69ba      	ldr	r2, [r7, #24]
 801194e:	4313      	orrs	r3, r2
 8011950:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011952:	4938      	ldr	r1, [pc, #224]	@ (8011a34 <HAL_GPIO_Init+0x35c>)
 8011954:	69fb      	ldr	r3, [r7, #28]
 8011956:	089b      	lsrs	r3, r3, #2
 8011958:	3302      	adds	r3, #2
 801195a:	69ba      	ldr	r2, [r7, #24]
 801195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8011960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011968:	693b      	ldr	r3, [r7, #16]
 801196a:	43db      	mvns	r3, r3
 801196c:	69ba      	ldr	r2, [r7, #24]
 801196e:	4013      	ands	r3, r2
 8011970:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801197a:	2b00      	cmp	r3, #0
 801197c:	d003      	beq.n	8011986 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801197e:	69ba      	ldr	r2, [r7, #24]
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	4313      	orrs	r3, r2
 8011984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8011986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801198a:	69bb      	ldr	r3, [r7, #24]
 801198c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801198e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	43db      	mvns	r3, r3
 801199a:	69ba      	ldr	r2, [r7, #24]
 801199c:	4013      	ands	r3, r2
 801199e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d003      	beq.n	80119b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80119ac:	69ba      	ldr	r2, [r7, #24]
 80119ae:	693b      	ldr	r3, [r7, #16]
 80119b0:	4313      	orrs	r3, r2
 80119b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80119b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80119b8:	69bb      	ldr	r3, [r7, #24]
 80119ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	43db      	mvns	r3, r3
 80119c6:	69ba      	ldr	r2, [r7, #24]
 80119c8:	4013      	ands	r3, r2
 80119ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d003      	beq.n	80119e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80119d8:	69ba      	ldr	r2, [r7, #24]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	4313      	orrs	r3, r2
 80119de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80119e0:	697b      	ldr	r3, [r7, #20]
 80119e2:	69ba      	ldr	r2, [r7, #24]
 80119e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	43db      	mvns	r3, r3
 80119f0:	69ba      	ldr	r2, [r7, #24]
 80119f2:	4013      	ands	r3, r2
 80119f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d003      	beq.n	8011a0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8011a02:	69ba      	ldr	r2, [r7, #24]
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	4313      	orrs	r3, r2
 8011a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	69ba      	ldr	r2, [r7, #24]
 8011a0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8011a10:	69fb      	ldr	r3, [r7, #28]
 8011a12:	3301      	adds	r3, #1
 8011a14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f47f ae63 	bne.w	80116ec <HAL_GPIO_Init+0x14>
  }
}
 8011a26:	bf00      	nop
 8011a28:	bf00      	nop
 8011a2a:	3724      	adds	r7, #36	@ 0x24
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	58000400 	.word	0x58000400

08011a38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b087      	sub	sp, #28
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
 8011a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8011a42:	2300      	movs	r3, #0
 8011a44:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8011a46:	4b75      	ldr	r3, [pc, #468]	@ (8011c1c <HAL_GPIO_DeInit+0x1e4>)
 8011a48:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8011a4a:	e0d9      	b.n	8011c00 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	fa02 f303 	lsl.w	r3, r2, r3
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	4013      	ands	r3, r2
 8011a58:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	f000 80cc 	beq.w	8011bfa <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8011a62:	4a6f      	ldr	r2, [pc, #444]	@ (8011c20 <HAL_GPIO_DeInit+0x1e8>)
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	089b      	lsrs	r3, r3, #2
 8011a68:	3302      	adds	r3, #2
 8011a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a6e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	f003 0303 	and.w	r3, r3, #3
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	220f      	movs	r2, #15
 8011a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8011a7e:	68ba      	ldr	r2, [r7, #8]
 8011a80:	4013      	ands	r3, r2
 8011a82:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	4a67      	ldr	r2, [pc, #412]	@ (8011c24 <HAL_GPIO_DeInit+0x1ec>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	d037      	beq.n	8011afc <HAL_GPIO_DeInit+0xc4>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	4a66      	ldr	r2, [pc, #408]	@ (8011c28 <HAL_GPIO_DeInit+0x1f0>)
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d031      	beq.n	8011af8 <HAL_GPIO_DeInit+0xc0>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	4a65      	ldr	r2, [pc, #404]	@ (8011c2c <HAL_GPIO_DeInit+0x1f4>)
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d02b      	beq.n	8011af4 <HAL_GPIO_DeInit+0xbc>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	4a64      	ldr	r2, [pc, #400]	@ (8011c30 <HAL_GPIO_DeInit+0x1f8>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d025      	beq.n	8011af0 <HAL_GPIO_DeInit+0xb8>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	4a63      	ldr	r2, [pc, #396]	@ (8011c34 <HAL_GPIO_DeInit+0x1fc>)
 8011aa8:	4293      	cmp	r3, r2
 8011aaa:	d01f      	beq.n	8011aec <HAL_GPIO_DeInit+0xb4>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4a62      	ldr	r2, [pc, #392]	@ (8011c38 <HAL_GPIO_DeInit+0x200>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d019      	beq.n	8011ae8 <HAL_GPIO_DeInit+0xb0>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	4a61      	ldr	r2, [pc, #388]	@ (8011c3c <HAL_GPIO_DeInit+0x204>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d013      	beq.n	8011ae4 <HAL_GPIO_DeInit+0xac>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4a60      	ldr	r2, [pc, #384]	@ (8011c40 <HAL_GPIO_DeInit+0x208>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d00d      	beq.n	8011ae0 <HAL_GPIO_DeInit+0xa8>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8011c44 <HAL_GPIO_DeInit+0x20c>)
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d007      	beq.n	8011adc <HAL_GPIO_DeInit+0xa4>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a5e      	ldr	r2, [pc, #376]	@ (8011c48 <HAL_GPIO_DeInit+0x210>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d101      	bne.n	8011ad8 <HAL_GPIO_DeInit+0xa0>
 8011ad4:	2309      	movs	r3, #9
 8011ad6:	e012      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011ad8:	230a      	movs	r3, #10
 8011ada:	e010      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011adc:	2308      	movs	r3, #8
 8011ade:	e00e      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011ae0:	2307      	movs	r3, #7
 8011ae2:	e00c      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011ae4:	2306      	movs	r3, #6
 8011ae6:	e00a      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011ae8:	2305      	movs	r3, #5
 8011aea:	e008      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011aec:	2304      	movs	r3, #4
 8011aee:	e006      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011af0:	2303      	movs	r3, #3
 8011af2:	e004      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011af4:	2302      	movs	r3, #2
 8011af6:	e002      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011af8:	2301      	movs	r3, #1
 8011afa:	e000      	b.n	8011afe <HAL_GPIO_DeInit+0xc6>
 8011afc:	2300      	movs	r3, #0
 8011afe:	697a      	ldr	r2, [r7, #20]
 8011b00:	f002 0203 	and.w	r2, r2, #3
 8011b04:	0092      	lsls	r2, r2, #2
 8011b06:	4093      	lsls	r3, r2
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d136      	bne.n	8011b7c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	43db      	mvns	r3, r3
 8011b16:	401a      	ands	r2, r3
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	685a      	ldr	r2, [r3, #4]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	43db      	mvns	r3, r3
 8011b24:	401a      	ands	r2, r3
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8011b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011b2e:	685a      	ldr	r2, [r3, #4]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	43db      	mvns	r3, r3
 8011b34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011b38:	4013      	ands	r3, r2
 8011b3a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8011b3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	43db      	mvns	r3, r3
 8011b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011b4a:	4013      	ands	r3, r2
 8011b4c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	f003 0303 	and.w	r3, r3, #3
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	220f      	movs	r2, #15
 8011b58:	fa02 f303 	lsl.w	r3, r2, r3
 8011b5c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8011b5e:	4a30      	ldr	r2, [pc, #192]	@ (8011c20 <HAL_GPIO_DeInit+0x1e8>)
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	089b      	lsrs	r3, r3, #2
 8011b64:	3302      	adds	r3, #2
 8011b66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	43da      	mvns	r2, r3
 8011b6e:	482c      	ldr	r0, [pc, #176]	@ (8011c20 <HAL_GPIO_DeInit+0x1e8>)
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	089b      	lsrs	r3, r3, #2
 8011b74:	400a      	ands	r2, r1
 8011b76:	3302      	adds	r3, #2
 8011b78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	2103      	movs	r1, #3
 8011b86:	fa01 f303 	lsl.w	r3, r1, r3
 8011b8a:	431a      	orrs	r2, r3
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	08da      	lsrs	r2, r3, #3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	3208      	adds	r2, #8
 8011b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	f003 0307 	and.w	r3, r3, #7
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	220f      	movs	r2, #15
 8011ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8011baa:	43db      	mvns	r3, r3
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	08d2      	lsrs	r2, r2, #3
 8011bb0:	4019      	ands	r1, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3208      	adds	r2, #8
 8011bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	68da      	ldr	r2, [r3, #12]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	005b      	lsls	r3, r3, #1
 8011bc2:	2103      	movs	r1, #3
 8011bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8011bc8:	43db      	mvns	r3, r3
 8011bca:	401a      	ands	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685a      	ldr	r2, [r3, #4]
 8011bd4:	2101      	movs	r1, #1
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8011bdc:	43db      	mvns	r3, r3
 8011bde:	401a      	ands	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	689a      	ldr	r2, [r3, #8]
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	2103      	movs	r1, #3
 8011bee:	fa01 f303 	lsl.w	r3, r1, r3
 8011bf2:	43db      	mvns	r3, r3
 8011bf4:	401a      	ands	r2, r3
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	609a      	str	r2, [r3, #8]
    }

    position++;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	3301      	adds	r3, #1
 8011bfe:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8011c00:	683a      	ldr	r2, [r7, #0]
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	fa22 f303 	lsr.w	r3, r2, r3
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	f47f af1f 	bne.w	8011a4c <HAL_GPIO_DeInit+0x14>
  }
}
 8011c0e:	bf00      	nop
 8011c10:	bf00      	nop
 8011c12:	371c      	adds	r7, #28
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr
 8011c1c:	58000080 	.word	0x58000080
 8011c20:	58000400 	.word	0x58000400
 8011c24:	58020000 	.word	0x58020000
 8011c28:	58020400 	.word	0x58020400
 8011c2c:	58020800 	.word	0x58020800
 8011c30:	58020c00 	.word	0x58020c00
 8011c34:	58021000 	.word	0x58021000
 8011c38:	58021400 	.word	0x58021400
 8011c3c:	58021800 	.word	0x58021800
 8011c40:	58021c00 	.word	0x58021c00
 8011c44:	58022000 	.word	0x58022000
 8011c48:	58022400 	.word	0x58022400

08011c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b085      	sub	sp, #20
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	460b      	mov	r3, r1
 8011c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	691a      	ldr	r2, [r3, #16]
 8011c5c:	887b      	ldrh	r3, [r7, #2]
 8011c5e:	4013      	ands	r3, r2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d002      	beq.n	8011c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011c64:	2301      	movs	r3, #1
 8011c66:	73fb      	strb	r3, [r7, #15]
 8011c68:	e001      	b.n	8011c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3714      	adds	r7, #20
 8011c74:	46bd      	mov	sp, r7
 8011c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7a:	4770      	bx	lr

08011c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	807b      	strh	r3, [r7, #2]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011c8c:	787b      	ldrb	r3, [r7, #1]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d003      	beq.n	8011c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8011c92:	887a      	ldrh	r2, [r7, #2]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8011c98:	e003      	b.n	8011ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8011c9a:	887b      	ldrh	r3, [r7, #2]
 8011c9c:	041a      	lsls	r2, r3, #16
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	619a      	str	r2, [r3, #24]
}
 8011ca2:	bf00      	nop
 8011ca4:	370c      	adds	r7, #12
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cac:	4770      	bx	lr
	...

08011cb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8011cb0:	b480      	push	{r7}
 8011cb2:	b083      	sub	sp, #12
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8011cb8:	4a08      	ldr	r2, [pc, #32]	@ (8011cdc <HAL_HSEM_FastTake+0x2c>)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	3320      	adds	r3, #32
 8011cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cc2:	4a07      	ldr	r2, [pc, #28]	@ (8011ce0 <HAL_HSEM_FastTake+0x30>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d101      	bne.n	8011ccc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	e000      	b.n	8011cce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8011ccc:	2301      	movs	r3, #1
}
 8011cce:	4618      	mov	r0, r3
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	58026400 	.word	0x58026400
 8011ce0:	80000300 	.word	0x80000300

08011ce4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8011cee:	4906      	ldr	r1, [pc, #24]	@ (8011d08 <HAL_HSEM_Release+0x24>)
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8011cfc:	bf00      	nop
 8011cfe:	370c      	adds	r7, #12
 8011d00:	46bd      	mov	sp, r7
 8011d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d06:	4770      	bx	lr
 8011d08:	58026400 	.word	0x58026400

08011d0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d101      	bne.n	8011d1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e07f      	b.n	8011e1e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011d24:	b2db      	uxtb	r3, r3
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f000 f8a9 	bl	8011e8a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2224      	movs	r2, #36	@ 0x24
 8011d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f022 0201 	bic.w	r2, r2, #1
 8011d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	685a      	ldr	r2, [r3, #4]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8011d5c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	689a      	ldr	r2, [r3, #8]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011d6c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	d107      	bne.n	8011d86 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	689a      	ldr	r2, [r3, #8]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011d82:	609a      	str	r2, [r3, #8]
 8011d84:	e006      	b.n	8011d94 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	689a      	ldr	r2, [r3, #8]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8011d92:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	2b02      	cmp	r3, #2
 8011d9a:	d104      	bne.n	8011da6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011da4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	6859      	ldr	r1, [r3, #4]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	4b1d      	ldr	r3, [pc, #116]	@ (8011e28 <HAL_I2C_Init+0x11c>)
 8011db2:	430b      	orrs	r3, r1
 8011db4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	68da      	ldr	r2, [r3, #12]
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011dc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	691a      	ldr	r2, [r3, #16]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	695b      	ldr	r3, [r3, #20]
 8011dce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	430a      	orrs	r2, r1
 8011dde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	69d9      	ldr	r1, [r3, #28]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6a1a      	ldr	r2, [r3, #32]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	430a      	orrs	r2, r1
 8011dee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f042 0201 	orr.w	r2, r2, #1
 8011dfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2220      	movs	r2, #32
 8011e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2200      	movs	r2, #0
 8011e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2200      	movs	r2, #0
 8011e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	3708      	adds	r7, #8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	02008000 	.word	0x02008000

08011e2c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d101      	bne.n	8011e3e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	e021      	b.n	8011e82 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2224      	movs	r2, #36	@ 0x24
 8011e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	681a      	ldr	r2, [r3, #0]
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	f022 0201 	bic.w	r2, r2, #1
 8011e54:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 f821 	bl	8011e9e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2200      	movs	r2, #0
 8011e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}

08011e8a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8011e8a:	b480      	push	{r7}
 8011e8c:	b083      	sub	sp, #12
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8011e92:	bf00      	nop
 8011e94:	370c      	adds	r7, #12
 8011e96:	46bd      	mov	sp, r7
 8011e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9c:	4770      	bx	lr

08011e9e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8011e9e:	b480      	push	{r7}
 8011ea0:	b083      	sub	sp, #12
 8011ea2:	af00      	add	r7, sp, #0
 8011ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8011ea6:	bf00      	nop
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr
	...

08011eb4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b088      	sub	sp, #32
 8011eb8:	af02      	add	r7, sp, #8
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	4608      	mov	r0, r1
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	817b      	strh	r3, [r7, #10]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	813b      	strh	r3, [r7, #8]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8011ed4:	b2db      	uxtb	r3, r3
 8011ed6:	2b20      	cmp	r3, #32
 8011ed8:	f040 80f9 	bne.w	80120ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011edc:	6a3b      	ldr	r3, [r7, #32]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d002      	beq.n	8011ee8 <HAL_I2C_Mem_Write+0x34>
 8011ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d105      	bne.n	8011ef4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011eee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e0ed      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011efa:	2b01      	cmp	r3, #1
 8011efc:	d101      	bne.n	8011f02 <HAL_I2C_Mem_Write+0x4e>
 8011efe:	2302      	movs	r3, #2
 8011f00:	e0e6      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2201      	movs	r2, #1
 8011f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8011f0a:	f7fe ffd9 	bl	8010ec0 <HAL_GetTick>
 8011f0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	2319      	movs	r3, #25
 8011f16:	2201      	movs	r2, #1
 8011f18:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f000 fadd 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 8011f22:	4603      	mov	r3, r0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d001      	beq.n	8011f2c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	e0d1      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	2221      	movs	r2, #33	@ 0x21
 8011f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2240      	movs	r2, #64	@ 0x40
 8011f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6a3a      	ldr	r2, [r7, #32]
 8011f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	2200      	movs	r2, #0
 8011f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8011f54:	88f8      	ldrh	r0, [r7, #6]
 8011f56:	893a      	ldrh	r2, [r7, #8]
 8011f58:	8979      	ldrh	r1, [r7, #10]
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	4603      	mov	r3, r0
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f000 f9ed 	bl	8012344 <I2C_RequestMemoryWrite>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d005      	beq.n	8011f7c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2200      	movs	r2, #0
 8011f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e0a9      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011f80:	b29b      	uxth	r3, r3
 8011f82:	2bff      	cmp	r3, #255	@ 0xff
 8011f84:	d90e      	bls.n	8011fa4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	22ff      	movs	r2, #255	@ 0xff
 8011f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011f90:	b2da      	uxtb	r2, r3
 8011f92:	8979      	ldrh	r1, [r7, #10]
 8011f94:	2300      	movs	r3, #0
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f000 fc57 	bl	8012850 <I2C_TransferConfig>
 8011fa2:	e00f      	b.n	8011fc4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	8979      	ldrh	r1, [r7, #10]
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	9300      	str	r3, [sp, #0]
 8011fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011fbe:	68f8      	ldr	r0, [r7, #12]
 8011fc0:	f000 fc46 	bl	8012850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8011fc4:	697a      	ldr	r2, [r7, #20]
 8011fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f000 fad6 	bl	801257a <I2C_WaitOnTXISFlagUntilTimeout>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d001      	beq.n	8011fd8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e07b      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fdc:	781a      	ldrb	r2, [r3, #0]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fe8:	1c5a      	adds	r2, r3, #1
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	3b01      	subs	r3, #1
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012000:	3b01      	subs	r3, #1
 8012002:	b29a      	uxth	r2, r3
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801200c:	b29b      	uxth	r3, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d034      	beq.n	801207c <HAL_I2C_Mem_Write+0x1c8>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012016:	2b00      	cmp	r3, #0
 8012018:	d130      	bne.n	801207c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	9300      	str	r3, [sp, #0]
 801201e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012020:	2200      	movs	r2, #0
 8012022:	2180      	movs	r1, #128	@ 0x80
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f000 fa59 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d001      	beq.n	8012034 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8012030:	2301      	movs	r3, #1
 8012032:	e04d      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012038:	b29b      	uxth	r3, r3
 801203a:	2bff      	cmp	r3, #255	@ 0xff
 801203c:	d90e      	bls.n	801205c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	22ff      	movs	r2, #255	@ 0xff
 8012042:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012048:	b2da      	uxtb	r2, r3
 801204a:	8979      	ldrh	r1, [r7, #10]
 801204c:	2300      	movs	r3, #0
 801204e:	9300      	str	r3, [sp, #0]
 8012050:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012054:	68f8      	ldr	r0, [r7, #12]
 8012056:	f000 fbfb 	bl	8012850 <I2C_TransferConfig>
 801205a:	e00f      	b.n	801207c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012060:	b29a      	uxth	r2, r3
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801206a:	b2da      	uxtb	r2, r3
 801206c:	8979      	ldrh	r1, [r7, #10]
 801206e:	2300      	movs	r3, #0
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8012076:	68f8      	ldr	r0, [r7, #12]
 8012078:	f000 fbea 	bl	8012850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012080:	b29b      	uxth	r3, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	d19e      	bne.n	8011fc4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8012086:	697a      	ldr	r2, [r7, #20]
 8012088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f000 fabc 	bl	8012608 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012090:	4603      	mov	r3, r0
 8012092:	2b00      	cmp	r3, #0
 8012094:	d001      	beq.n	801209a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8012096:	2301      	movs	r3, #1
 8012098:	e01a      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	2220      	movs	r2, #32
 80120a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	6859      	ldr	r1, [r3, #4]
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681a      	ldr	r2, [r3, #0]
 80120ac:	4b0a      	ldr	r3, [pc, #40]	@ (80120d8 <HAL_I2C_Mem_Write+0x224>)
 80120ae:	400b      	ands	r3, r1
 80120b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2220      	movs	r2, #32
 80120b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2200      	movs	r2, #0
 80120be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80120ca:	2300      	movs	r3, #0
 80120cc:	e000      	b.n	80120d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80120ce:	2302      	movs	r3, #2
  }
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3718      	adds	r7, #24
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	fe00e800 	.word	0xfe00e800

080120dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b088      	sub	sp, #32
 80120e0:	af02      	add	r7, sp, #8
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	4608      	mov	r0, r1
 80120e6:	4611      	mov	r1, r2
 80120e8:	461a      	mov	r2, r3
 80120ea:	4603      	mov	r3, r0
 80120ec:	817b      	strh	r3, [r7, #10]
 80120ee:	460b      	mov	r3, r1
 80120f0:	813b      	strh	r3, [r7, #8]
 80120f2:	4613      	mov	r3, r2
 80120f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	2b20      	cmp	r3, #32
 8012100:	f040 80fd 	bne.w	80122fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8012104:	6a3b      	ldr	r3, [r7, #32]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <HAL_I2C_Mem_Read+0x34>
 801210a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801210c:	2b00      	cmp	r3, #0
 801210e:	d105      	bne.n	801211c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012116:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8012118:	2301      	movs	r3, #1
 801211a:	e0f1      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012122:	2b01      	cmp	r3, #1
 8012124:	d101      	bne.n	801212a <HAL_I2C_Mem_Read+0x4e>
 8012126:	2302      	movs	r3, #2
 8012128:	e0ea      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	2201      	movs	r2, #1
 801212e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8012132:	f7fe fec5 	bl	8010ec0 <HAL_GetTick>
 8012136:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	9300      	str	r3, [sp, #0]
 801213c:	2319      	movs	r3, #25
 801213e:	2201      	movs	r2, #1
 8012140:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8012144:	68f8      	ldr	r0, [r7, #12]
 8012146:	f000 f9c9 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 801214a:	4603      	mov	r3, r0
 801214c:	2b00      	cmp	r3, #0
 801214e:	d001      	beq.n	8012154 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8012150:	2301      	movs	r3, #1
 8012152:	e0d5      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2222      	movs	r2, #34	@ 0x22
 8012158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	2240      	movs	r2, #64	@ 0x40
 8012160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2200      	movs	r2, #0
 8012168:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	6a3a      	ldr	r2, [r7, #32]
 801216e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	2200      	movs	r2, #0
 801217a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801217c:	88f8      	ldrh	r0, [r7, #6]
 801217e:	893a      	ldrh	r2, [r7, #8]
 8012180:	8979      	ldrh	r1, [r7, #10]
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	4603      	mov	r3, r0
 801218c:	68f8      	ldr	r0, [r7, #12]
 801218e:	f000 f92d 	bl	80123ec <I2C_RequestMemoryRead>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d005      	beq.n	80121a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	2200      	movs	r2, #0
 801219c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80121a0:	2301      	movs	r3, #1
 80121a2:	e0ad      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	2bff      	cmp	r3, #255	@ 0xff
 80121ac:	d90e      	bls.n	80121cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	22ff      	movs	r2, #255	@ 0xff
 80121b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	8979      	ldrh	r1, [r7, #10]
 80121bc:	4b52      	ldr	r3, [pc, #328]	@ (8012308 <HAL_I2C_Mem_Read+0x22c>)
 80121be:	9300      	str	r3, [sp, #0]
 80121c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 fb43 	bl	8012850 <I2C_TransferConfig>
 80121ca:	e00f      	b.n	80121ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80121d0:	b29a      	uxth	r2, r3
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	8979      	ldrh	r1, [r7, #10]
 80121de:	4b4a      	ldr	r3, [pc, #296]	@ (8012308 <HAL_I2C_Mem_Read+0x22c>)
 80121e0:	9300      	str	r3, [sp, #0]
 80121e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f000 fb32 	bl	8012850 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80121ec:	697b      	ldr	r3, [r7, #20]
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121f2:	2200      	movs	r2, #0
 80121f4:	2104      	movs	r1, #4
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f000 f970 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8012202:	2301      	movs	r3, #1
 8012204:	e07c      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012210:	b2d2      	uxtb	r2, r2
 8012212:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012218:	1c5a      	adds	r2, r3, #1
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012222:	3b01      	subs	r3, #1
 8012224:	b29a      	uxth	r2, r3
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801222e:	b29b      	uxth	r3, r3
 8012230:	3b01      	subs	r3, #1
 8012232:	b29a      	uxth	r2, r3
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801223c:	b29b      	uxth	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d034      	beq.n	80122ac <HAL_I2C_Mem_Read+0x1d0>
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012246:	2b00      	cmp	r3, #0
 8012248:	d130      	bne.n	80122ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801224a:	697b      	ldr	r3, [r7, #20]
 801224c:	9300      	str	r3, [sp, #0]
 801224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012250:	2200      	movs	r2, #0
 8012252:	2180      	movs	r1, #128	@ 0x80
 8012254:	68f8      	ldr	r0, [r7, #12]
 8012256:	f000 f941 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 801225a:	4603      	mov	r3, r0
 801225c:	2b00      	cmp	r3, #0
 801225e:	d001      	beq.n	8012264 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8012260:	2301      	movs	r3, #1
 8012262:	e04d      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012268:	b29b      	uxth	r3, r3
 801226a:	2bff      	cmp	r3, #255	@ 0xff
 801226c:	d90e      	bls.n	801228c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	22ff      	movs	r2, #255	@ 0xff
 8012272:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012278:	b2da      	uxtb	r2, r3
 801227a:	8979      	ldrh	r1, [r7, #10]
 801227c:	2300      	movs	r3, #0
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f000 fae3 	bl	8012850 <I2C_TransferConfig>
 801228a:	e00f      	b.n	80122ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012290:	b29a      	uxth	r2, r3
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801229a:	b2da      	uxtb	r2, r3
 801229c:	8979      	ldrh	r1, [r7, #10]
 801229e:	2300      	movs	r3, #0
 80122a0:	9300      	str	r3, [sp, #0]
 80122a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80122a6:	68f8      	ldr	r0, [r7, #12]
 80122a8:	f000 fad2 	bl	8012850 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d19a      	bne.n	80121ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80122b6:	697a      	ldr	r2, [r7, #20]
 80122b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f000 f9a4 	bl	8012608 <I2C_WaitOnSTOPFlagUntilTimeout>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e01a      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2220      	movs	r2, #32
 80122d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	6859      	ldr	r1, [r3, #4]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	681a      	ldr	r2, [r3, #0]
 80122dc:	4b0b      	ldr	r3, [pc, #44]	@ (801230c <HAL_I2C_Mem_Read+0x230>)
 80122de:	400b      	ands	r3, r1
 80122e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2220      	movs	r2, #32
 80122e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2200      	movs	r2, #0
 80122ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2200      	movs	r2, #0
 80122f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80122fa:	2300      	movs	r3, #0
 80122fc:	e000      	b.n	8012300 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80122fe:	2302      	movs	r3, #2
  }
}
 8012300:	4618      	mov	r0, r3
 8012302:	3718      	adds	r7, #24
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}
 8012308:	80002400 	.word	0x80002400
 801230c:	fe00e800 	.word	0xfe00e800

08012310 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801231e:	b2db      	uxtb	r3, r3
}
 8012320:	4618      	mov	r0, r3
 8012322:	370c      	adds	r7, #12
 8012324:	46bd      	mov	sp, r7
 8012326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232a:	4770      	bx	lr

0801232c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8012338:	4618      	mov	r0, r3
 801233a:	370c      	adds	r7, #12
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr

08012344 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b086      	sub	sp, #24
 8012348:	af02      	add	r7, sp, #8
 801234a:	60f8      	str	r0, [r7, #12]
 801234c:	4608      	mov	r0, r1
 801234e:	4611      	mov	r1, r2
 8012350:	461a      	mov	r2, r3
 8012352:	4603      	mov	r3, r0
 8012354:	817b      	strh	r3, [r7, #10]
 8012356:	460b      	mov	r3, r1
 8012358:	813b      	strh	r3, [r7, #8]
 801235a:	4613      	mov	r3, r2
 801235c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801235e:	88fb      	ldrh	r3, [r7, #6]
 8012360:	b2da      	uxtb	r2, r3
 8012362:	8979      	ldrh	r1, [r7, #10]
 8012364:	4b20      	ldr	r3, [pc, #128]	@ (80123e8 <I2C_RequestMemoryWrite+0xa4>)
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801236c:	68f8      	ldr	r0, [r7, #12]
 801236e:	f000 fa6f 	bl	8012850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012372:	69fa      	ldr	r2, [r7, #28]
 8012374:	69b9      	ldr	r1, [r7, #24]
 8012376:	68f8      	ldr	r0, [r7, #12]
 8012378:	f000 f8ff 	bl	801257a <I2C_WaitOnTXISFlagUntilTimeout>
 801237c:	4603      	mov	r3, r0
 801237e:	2b00      	cmp	r3, #0
 8012380:	d001      	beq.n	8012386 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	e02c      	b.n	80123e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012386:	88fb      	ldrh	r3, [r7, #6]
 8012388:	2b01      	cmp	r3, #1
 801238a:	d105      	bne.n	8012398 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801238c:	893b      	ldrh	r3, [r7, #8]
 801238e:	b2da      	uxtb	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	629a      	str	r2, [r3, #40]	@ 0x28
 8012396:	e015      	b.n	80123c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8012398:	893b      	ldrh	r3, [r7, #8]
 801239a:	0a1b      	lsrs	r3, r3, #8
 801239c:	b29b      	uxth	r3, r3
 801239e:	b2da      	uxtb	r2, r3
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80123a6:	69fa      	ldr	r2, [r7, #28]
 80123a8:	69b9      	ldr	r1, [r7, #24]
 80123aa:	68f8      	ldr	r0, [r7, #12]
 80123ac:	f000 f8e5 	bl	801257a <I2C_WaitOnTXISFlagUntilTimeout>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80123b6:	2301      	movs	r3, #1
 80123b8:	e012      	b.n	80123e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80123ba:	893b      	ldrh	r3, [r7, #8]
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	2200      	movs	r2, #0
 80123cc:	2180      	movs	r1, #128	@ 0x80
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f000 f884 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 80123d4:	4603      	mov	r3, r0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d001      	beq.n	80123de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80123da:	2301      	movs	r3, #1
 80123dc:	e000      	b.n	80123e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80123de:	2300      	movs	r3, #0
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3710      	adds	r7, #16
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	80002000 	.word	0x80002000

080123ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af02      	add	r7, sp, #8
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	4608      	mov	r0, r1
 80123f6:	4611      	mov	r1, r2
 80123f8:	461a      	mov	r2, r3
 80123fa:	4603      	mov	r3, r0
 80123fc:	817b      	strh	r3, [r7, #10]
 80123fe:	460b      	mov	r3, r1
 8012400:	813b      	strh	r3, [r7, #8]
 8012402:	4613      	mov	r3, r2
 8012404:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8012406:	88fb      	ldrh	r3, [r7, #6]
 8012408:	b2da      	uxtb	r2, r3
 801240a:	8979      	ldrh	r1, [r7, #10]
 801240c:	4b20      	ldr	r3, [pc, #128]	@ (8012490 <I2C_RequestMemoryRead+0xa4>)
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	2300      	movs	r3, #0
 8012412:	68f8      	ldr	r0, [r7, #12]
 8012414:	f000 fa1c 	bl	8012850 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012418:	69fa      	ldr	r2, [r7, #28]
 801241a:	69b9      	ldr	r1, [r7, #24]
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f000 f8ac 	bl	801257a <I2C_WaitOnTXISFlagUntilTimeout>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d001      	beq.n	801242c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8012428:	2301      	movs	r3, #1
 801242a:	e02c      	b.n	8012486 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	2b01      	cmp	r3, #1
 8012430:	d105      	bne.n	801243e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012432:	893b      	ldrh	r3, [r7, #8]
 8012434:	b2da      	uxtb	r2, r3
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	629a      	str	r2, [r3, #40]	@ 0x28
 801243c:	e015      	b.n	801246a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801243e:	893b      	ldrh	r3, [r7, #8]
 8012440:	0a1b      	lsrs	r3, r3, #8
 8012442:	b29b      	uxth	r3, r3
 8012444:	b2da      	uxtb	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801244c:	69fa      	ldr	r2, [r7, #28]
 801244e:	69b9      	ldr	r1, [r7, #24]
 8012450:	68f8      	ldr	r0, [r7, #12]
 8012452:	f000 f892 	bl	801257a <I2C_WaitOnTXISFlagUntilTimeout>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801245c:	2301      	movs	r3, #1
 801245e:	e012      	b.n	8012486 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8012460:	893b      	ldrh	r3, [r7, #8]
 8012462:	b2da      	uxtb	r2, r3
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801246a:	69fb      	ldr	r3, [r7, #28]
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	2200      	movs	r2, #0
 8012472:	2140      	movs	r1, #64	@ 0x40
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f000 f831 	bl	80124dc <I2C_WaitOnFlagUntilTimeout>
 801247a:	4603      	mov	r3, r0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d001      	beq.n	8012484 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8012480:	2301      	movs	r3, #1
 8012482:	e000      	b.n	8012486 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8012484:	2300      	movs	r3, #0
}
 8012486:	4618      	mov	r0, r3
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}
 801248e:	bf00      	nop
 8012490:	80002000 	.word	0x80002000

08012494 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	699b      	ldr	r3, [r3, #24]
 80124a2:	f003 0302 	and.w	r3, r3, #2
 80124a6:	2b02      	cmp	r3, #2
 80124a8:	d103      	bne.n	80124b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2200      	movs	r2, #0
 80124b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	699b      	ldr	r3, [r3, #24]
 80124b8:	f003 0301 	and.w	r3, r3, #1
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d007      	beq.n	80124d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	699a      	ldr	r2, [r3, #24]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f042 0201 	orr.w	r2, r2, #1
 80124ce:	619a      	str	r2, [r3, #24]
  }
}
 80124d0:	bf00      	nop
 80124d2:	370c      	adds	r7, #12
 80124d4:	46bd      	mov	sp, r7
 80124d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124da:	4770      	bx	lr

080124dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	60f8      	str	r0, [r7, #12]
 80124e4:	60b9      	str	r1, [r7, #8]
 80124e6:	603b      	str	r3, [r7, #0]
 80124e8:	4613      	mov	r3, r2
 80124ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80124ec:	e031      	b.n	8012552 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f4:	d02d      	beq.n	8012552 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80124f6:	f7fe fce3 	bl	8010ec0 <HAL_GetTick>
 80124fa:	4602      	mov	r2, r0
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	1ad3      	subs	r3, r2, r3
 8012500:	683a      	ldr	r2, [r7, #0]
 8012502:	429a      	cmp	r2, r3
 8012504:	d302      	bcc.n	801250c <I2C_WaitOnFlagUntilTimeout+0x30>
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d122      	bne.n	8012552 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	699a      	ldr	r2, [r3, #24]
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	4013      	ands	r3, r2
 8012516:	68ba      	ldr	r2, [r7, #8]
 8012518:	429a      	cmp	r2, r3
 801251a:	bf0c      	ite	eq
 801251c:	2301      	moveq	r3, #1
 801251e:	2300      	movne	r3, #0
 8012520:	b2db      	uxtb	r3, r3
 8012522:	461a      	mov	r2, r3
 8012524:	79fb      	ldrb	r3, [r7, #7]
 8012526:	429a      	cmp	r2, r3
 8012528:	d113      	bne.n	8012552 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801252e:	f043 0220 	orr.w	r2, r3, #32
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2220      	movs	r2, #32
 801253a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2200      	movs	r2, #0
 8012542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	2200      	movs	r2, #0
 801254a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 801254e:	2301      	movs	r3, #1
 8012550:	e00f      	b.n	8012572 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	699a      	ldr	r2, [r3, #24]
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	4013      	ands	r3, r2
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	429a      	cmp	r2, r3
 8012560:	bf0c      	ite	eq
 8012562:	2301      	moveq	r3, #1
 8012564:	2300      	movne	r3, #0
 8012566:	b2db      	uxtb	r3, r3
 8012568:	461a      	mov	r2, r3
 801256a:	79fb      	ldrb	r3, [r7, #7]
 801256c:	429a      	cmp	r2, r3
 801256e:	d0be      	beq.n	80124ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012570:	2300      	movs	r3, #0
}
 8012572:	4618      	mov	r0, r3
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b084      	sub	sp, #16
 801257e:	af00      	add	r7, sp, #0
 8012580:	60f8      	str	r0, [r7, #12]
 8012582:	60b9      	str	r1, [r7, #8]
 8012584:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012586:	e033      	b.n	80125f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	68b9      	ldr	r1, [r7, #8]
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f000 f87f 	bl	8012690 <I2C_IsErrorOccurred>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d001      	beq.n	801259c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012598:	2301      	movs	r3, #1
 801259a:	e031      	b.n	8012600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a2:	d025      	beq.n	80125f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80125a4:	f7fe fc8c 	bl	8010ec0 <HAL_GetTick>
 80125a8:	4602      	mov	r2, r0
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	1ad3      	subs	r3, r2, r3
 80125ae:	68ba      	ldr	r2, [r7, #8]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d302      	bcc.n	80125ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d11a      	bne.n	80125f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	f003 0302 	and.w	r3, r3, #2
 80125c4:	2b02      	cmp	r3, #2
 80125c6:	d013      	beq.n	80125f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125cc:	f043 0220 	orr.w	r2, r3, #32
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2220      	movs	r2, #32
 80125d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	2200      	movs	r2, #0
 80125e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2200      	movs	r2, #0
 80125e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80125ec:	2301      	movs	r3, #1
 80125ee:	e007      	b.n	8012600 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	f003 0302 	and.w	r3, r3, #2
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d1c4      	bne.n	8012588 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80125fe:	2300      	movs	r3, #0
}
 8012600:	4618      	mov	r0, r3
 8012602:	3710      	adds	r7, #16
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012614:	e02f      	b.n	8012676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	68b9      	ldr	r1, [r7, #8]
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f000 f838 	bl	8012690 <I2C_IsErrorOccurred>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012626:	2301      	movs	r3, #1
 8012628:	e02d      	b.n	8012686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801262a:	f7fe fc49 	bl	8010ec0 <HAL_GetTick>
 801262e:	4602      	mov	r2, r0
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	429a      	cmp	r2, r3
 8012638:	d302      	bcc.n	8012640 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801263a:	68bb      	ldr	r3, [r7, #8]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d11a      	bne.n	8012676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	699b      	ldr	r3, [r3, #24]
 8012646:	f003 0320 	and.w	r3, r3, #32
 801264a:	2b20      	cmp	r3, #32
 801264c:	d013      	beq.n	8012676 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012652:	f043 0220 	orr.w	r2, r3, #32
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	2220      	movs	r2, #32
 801265e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8012672:	2301      	movs	r3, #1
 8012674:	e007      	b.n	8012686 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	699b      	ldr	r3, [r3, #24]
 801267c:	f003 0320 	and.w	r3, r3, #32
 8012680:	2b20      	cmp	r3, #32
 8012682:	d1c8      	bne.n	8012616 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
	...

08012690 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b08a      	sub	sp, #40	@ 0x28
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801269c:	2300      	movs	r3, #0
 801269e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	699b      	ldr	r3, [r3, #24]
 80126a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	f003 0310 	and.w	r3, r3, #16
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d068      	beq.n	801278e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2210      	movs	r2, #16
 80126c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80126c4:	e049      	b.n	801275a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80126c6:	68bb      	ldr	r3, [r7, #8]
 80126c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126cc:	d045      	beq.n	801275a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80126ce:	f7fe fbf7 	bl	8010ec0 <HAL_GetTick>
 80126d2:	4602      	mov	r2, r0
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	68ba      	ldr	r2, [r7, #8]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d302      	bcc.n	80126e4 <I2C_IsErrorOccurred+0x54>
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d13a      	bne.n	801275a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80126ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	699b      	ldr	r3, [r3, #24]
 80126fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8012702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8012706:	d121      	bne.n	801274c <I2C_IsErrorOccurred+0xbc>
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801270e:	d01d      	beq.n	801274c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8012710:	7cfb      	ldrb	r3, [r7, #19]
 8012712:	2b20      	cmp	r3, #32
 8012714:	d01a      	beq.n	801274c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	685a      	ldr	r2, [r3, #4]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012724:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012726:	f7fe fbcb 	bl	8010ec0 <HAL_GetTick>
 801272a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801272c:	e00e      	b.n	801274c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801272e:	f7fe fbc7 	bl	8010ec0 <HAL_GetTick>
 8012732:	4602      	mov	r2, r0
 8012734:	69fb      	ldr	r3, [r7, #28]
 8012736:	1ad3      	subs	r3, r2, r3
 8012738:	2b19      	cmp	r3, #25
 801273a:	d907      	bls.n	801274c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801273c:	6a3b      	ldr	r3, [r7, #32]
 801273e:	f043 0320 	orr.w	r3, r3, #32
 8012742:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012744:	2301      	movs	r3, #1
 8012746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801274a:	e006      	b.n	801275a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	699b      	ldr	r3, [r3, #24]
 8012752:	f003 0320 	and.w	r3, r3, #32
 8012756:	2b20      	cmp	r3, #32
 8012758:	d1e9      	bne.n	801272e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	699b      	ldr	r3, [r3, #24]
 8012760:	f003 0320 	and.w	r3, r3, #32
 8012764:	2b20      	cmp	r3, #32
 8012766:	d003      	beq.n	8012770 <I2C_IsErrorOccurred+0xe0>
 8012768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801276c:	2b00      	cmp	r3, #0
 801276e:	d0aa      	beq.n	80126c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8012770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012774:	2b00      	cmp	r3, #0
 8012776:	d103      	bne.n	8012780 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2220      	movs	r2, #32
 801277e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8012780:	6a3b      	ldr	r3, [r7, #32]
 8012782:	f043 0304 	orr.w	r3, r3, #4
 8012786:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8012788:	2301      	movs	r3, #1
 801278a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	699b      	ldr	r3, [r3, #24]
 8012794:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801279c:	2b00      	cmp	r3, #0
 801279e:	d00b      	beq.n	80127b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80127a0:	6a3b      	ldr	r3, [r7, #32]
 80127a2:	f043 0301 	orr.w	r3, r3, #1
 80127a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80127b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127b2:	2301      	movs	r3, #1
 80127b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00b      	beq.n	80127da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80127c2:	6a3b      	ldr	r3, [r7, #32]
 80127c4:	f043 0308 	orr.w	r3, r3, #8
 80127c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80127d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127d4:	2301      	movs	r3, #1
 80127d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d00b      	beq.n	80127fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80127e4:	6a3b      	ldr	r3, [r7, #32]
 80127e6:	f043 0302 	orr.w	r3, r3, #2
 80127ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80127f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80127f6:	2301      	movs	r3, #1
 80127f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80127fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012800:	2b00      	cmp	r3, #0
 8012802:	d01c      	beq.n	801283e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012804:	68f8      	ldr	r0, [r7, #12]
 8012806:	f7ff fe45 	bl	8012494 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	6859      	ldr	r1, [r3, #4]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	4b0d      	ldr	r3, [pc, #52]	@ (801284c <I2C_IsErrorOccurred+0x1bc>)
 8012816:	400b      	ands	r3, r1
 8012818:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801281e:	6a3b      	ldr	r3, [r7, #32]
 8012820:	431a      	orrs	r2, r3
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	2220      	movs	r2, #32
 801282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2200      	movs	r2, #0
 8012832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	2200      	movs	r2, #0
 801283a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 801283e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012842:	4618      	mov	r0, r3
 8012844:	3728      	adds	r7, #40	@ 0x28
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}
 801284a:	bf00      	nop
 801284c:	fe00e800 	.word	0xfe00e800

08012850 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012850:	b480      	push	{r7}
 8012852:	b087      	sub	sp, #28
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	607b      	str	r3, [r7, #4]
 801285a:	460b      	mov	r3, r1
 801285c:	817b      	strh	r3, [r7, #10]
 801285e:	4613      	mov	r3, r2
 8012860:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012862:	897b      	ldrh	r3, [r7, #10]
 8012864:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012868:	7a7b      	ldrb	r3, [r7, #9]
 801286a:	041b      	lsls	r3, r3, #16
 801286c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012870:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	4313      	orrs	r3, r2
 801287a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801287e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	685a      	ldr	r2, [r3, #4]
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	0d5b      	lsrs	r3, r3, #21
 801288a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 801288e:	4b08      	ldr	r3, [pc, #32]	@ (80128b0 <I2C_TransferConfig+0x60>)
 8012890:	430b      	orrs	r3, r1
 8012892:	43db      	mvns	r3, r3
 8012894:	ea02 0103 	and.w	r1, r2, r3
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	697a      	ldr	r2, [r7, #20]
 801289e:	430a      	orrs	r2, r1
 80128a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80128a2:	bf00      	nop
 80128a4:	371c      	adds	r7, #28
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	03ff63ff 	.word	0x03ff63ff

080128b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	2b20      	cmp	r3, #32
 80128c8:	d138      	bne.n	801293c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d101      	bne.n	80128d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80128d4:	2302      	movs	r3, #2
 80128d6:	e032      	b.n	801293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2201      	movs	r2, #1
 80128dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2224      	movs	r2, #36	@ 0x24
 80128e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f022 0201 	bic.w	r2, r2, #1
 80128f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8012906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	6819      	ldr	r1, [r3, #0]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	683a      	ldr	r2, [r7, #0]
 8012914:	430a      	orrs	r2, r1
 8012916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	681a      	ldr	r2, [r3, #0]
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f042 0201 	orr.w	r2, r2, #1
 8012926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2220      	movs	r2, #32
 801292c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8012938:	2300      	movs	r3, #0
 801293a:	e000      	b.n	801293e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801293c:	2302      	movs	r3, #2
  }
}
 801293e:	4618      	mov	r0, r3
 8012940:	370c      	adds	r7, #12
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr

0801294a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801294a:	b480      	push	{r7}
 801294c:	b085      	sub	sp, #20
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
 8012952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801295a:	b2db      	uxtb	r3, r3
 801295c:	2b20      	cmp	r3, #32
 801295e:	d139      	bne.n	80129d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8012966:	2b01      	cmp	r3, #1
 8012968:	d101      	bne.n	801296e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801296a:	2302      	movs	r3, #2
 801296c:	e033      	b.n	80129d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2201      	movs	r2, #1
 8012972:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2224      	movs	r2, #36	@ 0x24
 801297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	681a      	ldr	r2, [r3, #0]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f022 0201 	bic.w	r2, r2, #1
 801298c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801299c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	021b      	lsls	r3, r3, #8
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	4313      	orrs	r3, r2
 80129a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	f042 0201 	orr.w	r2, r2, #1
 80129be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2220      	movs	r2, #32
 80129c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2200      	movs	r2, #0
 80129cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80129d0:	2300      	movs	r3, #0
 80129d2:	e000      	b.n	80129d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80129d4:	2302      	movs	r3, #2
  }
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3714      	adds	r7, #20
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
	...

080129e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b084      	sub	sp, #16
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d101      	bne.n	80129f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80129f2:	2301      	movs	r3, #1
 80129f4:	e0bf      	b.n	8012b76 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2200      	movs	r2, #0
 8012a06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f7ee fac6 	bl	8000f9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2202      	movs	r2, #2
 8012a14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	699a      	ldr	r2, [r3, #24]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8012a26:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	6999      	ldr	r1, [r3, #24]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685a      	ldr	r2, [r3, #4]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	689b      	ldr	r3, [r3, #8]
 8012a36:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012a3c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	691b      	ldr	r3, [r3, #16]
 8012a42:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	430a      	orrs	r2, r1
 8012a4a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	6899      	ldr	r1, [r3, #8]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	4b4a      	ldr	r3, [pc, #296]	@ (8012b80 <HAL_LTDC_Init+0x19c>)
 8012a58:	400b      	ands	r3, r1
 8012a5a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	695b      	ldr	r3, [r3, #20]
 8012a60:	041b      	lsls	r3, r3, #16
 8012a62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	6899      	ldr	r1, [r3, #8]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	699a      	ldr	r2, [r3, #24]
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	431a      	orrs	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	430a      	orrs	r2, r1
 8012a78:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	68d9      	ldr	r1, [r3, #12]
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	4b3e      	ldr	r3, [pc, #248]	@ (8012b80 <HAL_LTDC_Init+0x19c>)
 8012a86:	400b      	ands	r3, r1
 8012a88:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	69db      	ldr	r3, [r3, #28]
 8012a8e:	041b      	lsls	r3, r3, #16
 8012a90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	68d9      	ldr	r1, [r3, #12]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6a1a      	ldr	r2, [r3, #32]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	431a      	orrs	r2, r3
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	430a      	orrs	r2, r1
 8012aa6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	6919      	ldr	r1, [r3, #16]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4b33      	ldr	r3, [pc, #204]	@ (8012b80 <HAL_LTDC_Init+0x19c>)
 8012ab4:	400b      	ands	r3, r1
 8012ab6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012abc:	041b      	lsls	r3, r3, #16
 8012abe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	6919      	ldr	r1, [r3, #16]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	431a      	orrs	r2, r3
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	430a      	orrs	r2, r1
 8012ad4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	6959      	ldr	r1, [r3, #20]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	4b27      	ldr	r3, [pc, #156]	@ (8012b80 <HAL_LTDC_Init+0x19c>)
 8012ae2:	400b      	ands	r3, r1
 8012ae4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aea:	041b      	lsls	r3, r3, #16
 8012aec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	6959      	ldr	r1, [r3, #20]
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	431a      	orrs	r2, r3
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	430a      	orrs	r2, r1
 8012b02:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012b0a:	021b      	lsls	r3, r3, #8
 8012b0c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8012b14:	041b      	lsls	r3, r3, #16
 8012b16:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8012b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012b2e:	68ba      	ldr	r2, [r7, #8]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	4313      	orrs	r3, r2
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8012b3a:	431a      	orrs	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	430a      	orrs	r2, r1
 8012b42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	f042 0206 	orr.w	r2, r2, #6
 8012b52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	699a      	ldr	r2, [r3, #24]
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	f042 0201 	orr.w	r2, r2, #1
 8012b62:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	2200      	movs	r2, #0
 8012b68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8012b74:	2300      	movs	r3, #0
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	f000f800 	.word	0xf000f800

08012b84 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b084      	sub	sp, #16
 8012b88:	af00      	add	r7, sp, #0
 8012b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b9a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f003 0304 	and.w	r3, r3, #4
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d023      	beq.n	8012bee <HAL_LTDC_IRQHandler+0x6a>
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	f003 0304 	and.w	r3, r3, #4
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d01e      	beq.n	8012bee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f022 0204 	bic.w	r2, r2, #4
 8012bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2204      	movs	r2, #4
 8012bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012bce:	f043 0201 	orr.w	r2, r3, #1
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2204      	movs	r2, #4
 8012bdc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012be8:	6878      	ldr	r0, [r7, #4]
 8012bea:	f000 f86f 	bl	8012ccc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f003 0302 	and.w	r3, r3, #2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d023      	beq.n	8012c40 <HAL_LTDC_IRQHandler+0xbc>
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	f003 0302 	and.w	r3, r3, #2
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d01e      	beq.n	8012c40 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	f022 0202 	bic.w	r2, r2, #2
 8012c10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2202      	movs	r2, #2
 8012c18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012c20:	f043 0202 	orr.w	r2, r3, #2
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2204      	movs	r2, #4
 8012c2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2200      	movs	r2, #0
 8012c36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f000 f846 	bl	8012ccc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f003 0301 	and.w	r3, r3, #1
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d01b      	beq.n	8012c82 <HAL_LTDC_IRQHandler+0xfe>
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	f003 0301 	and.w	r3, r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d016      	beq.n	8012c82 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	f022 0201 	bic.w	r2, r2, #1
 8012c62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2201      	movs	r2, #1
 8012c6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2201      	movs	r2, #1
 8012c70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2200      	movs	r2, #0
 8012c78:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f7f0 ffad 	bl	8003bdc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f003 0308 	and.w	r3, r3, #8
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d01b      	beq.n	8012cc4 <HAL_LTDC_IRQHandler+0x140>
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	f003 0308 	and.w	r3, r3, #8
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d016      	beq.n	8012cc4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	f022 0208 	bic.w	r2, r2, #8
 8012ca4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2208      	movs	r2, #8
 8012cac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	2201      	movs	r2, #1
 8012cb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f000 f80e 	bl	8012ce0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8012cd4:	bf00      	nop
 8012cd6:	370c      	adds	r7, #12
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cde:	4770      	bx	lr

08012ce0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8012ce8:	bf00      	nop
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012cf4:	b5b0      	push	{r4, r5, r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d101      	bne.n	8012d0e <HAL_LTDC_ConfigLayer+0x1a>
 8012d0a:	2302      	movs	r3, #2
 8012d0c:	e02c      	b.n	8012d68 <HAL_LTDC_ConfigLayer+0x74>
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	2201      	movs	r2, #1
 8012d12:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2202      	movs	r2, #2
 8012d1a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2134      	movs	r1, #52	@ 0x34
 8012d24:	fb01 f303 	mul.w	r3, r1, r3
 8012d28:	4413      	add	r3, r2
 8012d2a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	4614      	mov	r4, r2
 8012d32:	461d      	mov	r5, r3
 8012d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012d40:	682b      	ldr	r3, [r5, #0]
 8012d42:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	68b9      	ldr	r1, [r7, #8]
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f000 f849 	bl	8012de0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2201      	movs	r2, #1
 8012d54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2200      	movs	r2, #0
 8012d62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012d66:	2300      	movs	r3, #0
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3710      	adds	r7, #16
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bdb0      	pop	{r4, r5, r7, pc}

08012d70 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8012d70:	b480      	push	{r7}
 8012d72:	b083      	sub	sp, #12
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d101      	bne.n	8012d88 <HAL_LTDC_ProgramLineEvent+0x18>
 8012d84:	2302      	movs	r3, #2
 8012d86:	e023      	b.n	8012dd0 <HAL_LTDC_ProgramLineEvent+0x60>
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2201      	movs	r2, #1
 8012d8c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2202      	movs	r2, #2
 8012d94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	f022 0201 	bic.w	r2, r2, #1
 8012da6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8012da8:	4a0c      	ldr	r2, [pc, #48]	@ (8012ddc <HAL_LTDC_ProgramLineEvent+0x6c>)
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	f042 0201 	orr.w	r2, r2, #1
 8012dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8012dce:	2300      	movs	r3, #0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	370c      	adds	r7, #12
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dda:	4770      	bx	lr
 8012ddc:	50001000 	.word	0x50001000

08012de0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b089      	sub	sp, #36	@ 0x24
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	685a      	ldr	r2, [r3, #4]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	0c1b      	lsrs	r3, r3, #16
 8012df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012dfc:	4413      	add	r3, r2
 8012dfe:	041b      	lsls	r3, r3, #16
 8012e00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	461a      	mov	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	01db      	lsls	r3, r3, #7
 8012e0c:	4413      	add	r3, r2
 8012e0e:	3384      	adds	r3, #132	@ 0x84
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	6812      	ldr	r2, [r2, #0]
 8012e16:	4611      	mov	r1, r2
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	01d2      	lsls	r2, r2, #7
 8012e1c:	440a      	add	r2, r1
 8012e1e:	3284      	adds	r2, #132	@ 0x84
 8012e20:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012e24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	0c1b      	lsrs	r3, r3, #16
 8012e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012e36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012e38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	01db      	lsls	r3, r3, #7
 8012e44:	440b      	add	r3, r1
 8012e46:	3384      	adds	r3, #132	@ 0x84
 8012e48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8012e4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	68da      	ldr	r2, [r3, #12]
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e5e:	4413      	add	r3, r2
 8012e60:	041b      	lsls	r3, r3, #16
 8012e62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	461a      	mov	r2, r3
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	01db      	lsls	r3, r3, #7
 8012e6e:	4413      	add	r3, r2
 8012e70:	3384      	adds	r3, #132	@ 0x84
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	6812      	ldr	r2, [r2, #0]
 8012e78:	4611      	mov	r1, r2
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	01d2      	lsls	r2, r2, #7
 8012e7e:	440a      	add	r2, r1
 8012e80:	3284      	adds	r2, #132	@ 0x84
 8012e82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8012e86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	689a      	ldr	r2, [r3, #8]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8012e96:	4413      	add	r3, r2
 8012e98:	1c5a      	adds	r2, r3, #1
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	01db      	lsls	r3, r3, #7
 8012ea4:	440b      	add	r3, r1
 8012ea6:	3384      	adds	r3, #132	@ 0x84
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	69fb      	ldr	r3, [r7, #28]
 8012eac:	4313      	orrs	r3, r2
 8012eae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	01db      	lsls	r3, r3, #7
 8012eba:	4413      	add	r3, r2
 8012ebc:	3384      	adds	r3, #132	@ 0x84
 8012ebe:	691b      	ldr	r3, [r3, #16]
 8012ec0:	68fa      	ldr	r2, [r7, #12]
 8012ec2:	6812      	ldr	r2, [r2, #0]
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	687a      	ldr	r2, [r7, #4]
 8012ec8:	01d2      	lsls	r2, r2, #7
 8012eca:	440a      	add	r2, r1
 8012ecc:	3284      	adds	r2, #132	@ 0x84
 8012ece:	f023 0307 	bic.w	r3, r3, #7
 8012ed2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	461a      	mov	r2, r3
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	01db      	lsls	r3, r3, #7
 8012ede:	4413      	add	r3, r2
 8012ee0:	3384      	adds	r3, #132	@ 0x84
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	691b      	ldr	r3, [r3, #16]
 8012ee8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012ef0:	021b      	lsls	r3, r3, #8
 8012ef2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8012ef4:	68bb      	ldr	r3, [r7, #8]
 8012ef6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012efa:	041b      	lsls	r3, r3, #16
 8012efc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	699b      	ldr	r3, [r3, #24]
 8012f02:	061b      	lsls	r3, r3, #24
 8012f04:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	01db      	lsls	r3, r3, #7
 8012f10:	4413      	add	r3, r2
 8012f12:	3384      	adds	r3, #132	@ 0x84
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	01db      	lsls	r3, r3, #7
 8012f20:	4413      	add	r3, r2
 8012f22:	3384      	adds	r3, #132	@ 0x84
 8012f24:	461a      	mov	r2, r3
 8012f26:	2300      	movs	r3, #0
 8012f28:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012f30:	461a      	mov	r2, r3
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	431a      	orrs	r2, r3
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	431a      	orrs	r2, r3
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	4619      	mov	r1, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	01db      	lsls	r3, r3, #7
 8012f44:	440b      	add	r3, r1
 8012f46:	3384      	adds	r3, #132	@ 0x84
 8012f48:	4619      	mov	r1, r3
 8012f4a:	697b      	ldr	r3, [r7, #20]
 8012f4c:	4313      	orrs	r3, r2
 8012f4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	461a      	mov	r2, r3
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	01db      	lsls	r3, r3, #7
 8012f5a:	4413      	add	r3, r2
 8012f5c:	3384      	adds	r3, #132	@ 0x84
 8012f5e:	695b      	ldr	r3, [r3, #20]
 8012f60:	68fa      	ldr	r2, [r7, #12]
 8012f62:	6812      	ldr	r2, [r2, #0]
 8012f64:	4611      	mov	r1, r2
 8012f66:	687a      	ldr	r2, [r7, #4]
 8012f68:	01d2      	lsls	r2, r2, #7
 8012f6a:	440a      	add	r2, r1
 8012f6c:	3284      	adds	r2, #132	@ 0x84
 8012f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012f72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	461a      	mov	r2, r3
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	01db      	lsls	r3, r3, #7
 8012f7e:	4413      	add	r3, r2
 8012f80:	3384      	adds	r3, #132	@ 0x84
 8012f82:	461a      	mov	r2, r3
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	695b      	ldr	r3, [r3, #20]
 8012f88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	461a      	mov	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	01db      	lsls	r3, r3, #7
 8012f94:	4413      	add	r3, r2
 8012f96:	3384      	adds	r3, #132	@ 0x84
 8012f98:	69da      	ldr	r2, [r3, #28]
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	01db      	lsls	r3, r3, #7
 8012fa4:	440b      	add	r3, r1
 8012fa6:	3384      	adds	r3, #132	@ 0x84
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4b58      	ldr	r3, [pc, #352]	@ (801310c <LTDC_SetConfig+0x32c>)
 8012fac:	4013      	ands	r3, r2
 8012fae:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	69da      	ldr	r2, [r3, #28]
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	6a1b      	ldr	r3, [r3, #32]
 8012fb8:	68f9      	ldr	r1, [r7, #12]
 8012fba:	6809      	ldr	r1, [r1, #0]
 8012fbc:	4608      	mov	r0, r1
 8012fbe:	6879      	ldr	r1, [r7, #4]
 8012fc0:	01c9      	lsls	r1, r1, #7
 8012fc2:	4401      	add	r1, r0
 8012fc4:	3184      	adds	r1, #132	@ 0x84
 8012fc6:	4313      	orrs	r3, r2
 8012fc8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	01db      	lsls	r3, r3, #7
 8012fd4:	4413      	add	r3, r2
 8012fd6:	3384      	adds	r3, #132	@ 0x84
 8012fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	01db      	lsls	r3, r3, #7
 8012fe4:	4413      	add	r3, r2
 8012fe6:	3384      	adds	r3, #132	@ 0x84
 8012fe8:	461a      	mov	r2, r3
 8012fea:	2300      	movs	r3, #0
 8012fec:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	01db      	lsls	r3, r3, #7
 8012ff8:	4413      	add	r3, r2
 8012ffa:	3384      	adds	r3, #132	@ 0x84
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013002:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	691b      	ldr	r3, [r3, #16]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d102      	bne.n	8013012 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 801300c:	2304      	movs	r3, #4
 801300e:	61fb      	str	r3, [r7, #28]
 8013010:	e01b      	b.n	801304a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	2b01      	cmp	r3, #1
 8013018:	d102      	bne.n	8013020 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 801301a:	2303      	movs	r3, #3
 801301c:	61fb      	str	r3, [r7, #28]
 801301e:	e014      	b.n	801304a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	2b04      	cmp	r3, #4
 8013026:	d00b      	beq.n	8013040 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801302c:	2b02      	cmp	r3, #2
 801302e:	d007      	beq.n	8013040 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8013034:	2b03      	cmp	r3, #3
 8013036:	d003      	beq.n	8013040 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 801303c:	2b07      	cmp	r3, #7
 801303e:	d102      	bne.n	8013046 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8013040:	2302      	movs	r3, #2
 8013042:	61fb      	str	r3, [r7, #28]
 8013044:	e001      	b.n	801304a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8013046:	2301      	movs	r3, #1
 8013048:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	461a      	mov	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	01db      	lsls	r3, r3, #7
 8013054:	4413      	add	r3, r2
 8013056:	3384      	adds	r3, #132	@ 0x84
 8013058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801305a:	68fa      	ldr	r2, [r7, #12]
 801305c:	6812      	ldr	r2, [r2, #0]
 801305e:	4611      	mov	r1, r2
 8013060:	687a      	ldr	r2, [r7, #4]
 8013062:	01d2      	lsls	r2, r2, #7
 8013064:	440a      	add	r2, r1
 8013066:	3284      	adds	r2, #132	@ 0x84
 8013068:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 801306c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013072:	69fa      	ldr	r2, [r7, #28]
 8013074:	fb02 f303 	mul.w	r3, r2, r3
 8013078:	041a      	lsls	r2, r3, #16
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	6859      	ldr	r1, [r3, #4]
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	1acb      	subs	r3, r1, r3
 8013084:	69f9      	ldr	r1, [r7, #28]
 8013086:	fb01 f303 	mul.w	r3, r1, r3
 801308a:	3307      	adds	r3, #7
 801308c:	68f9      	ldr	r1, [r7, #12]
 801308e:	6809      	ldr	r1, [r1, #0]
 8013090:	4608      	mov	r0, r1
 8013092:	6879      	ldr	r1, [r7, #4]
 8013094:	01c9      	lsls	r1, r1, #7
 8013096:	4401      	add	r1, r0
 8013098:	3184      	adds	r1, #132	@ 0x84
 801309a:	4313      	orrs	r3, r2
 801309c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	461a      	mov	r2, r3
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	01db      	lsls	r3, r3, #7
 80130a8:	4413      	add	r3, r2
 80130aa:	3384      	adds	r3, #132	@ 0x84
 80130ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4619      	mov	r1, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	01db      	lsls	r3, r3, #7
 80130b8:	440b      	add	r3, r1
 80130ba:	3384      	adds	r3, #132	@ 0x84
 80130bc:	4619      	mov	r1, r3
 80130be:	4b14      	ldr	r3, [pc, #80]	@ (8013110 <LTDC_SetConfig+0x330>)
 80130c0:	4013      	ands	r3, r2
 80130c2:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	461a      	mov	r2, r3
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	01db      	lsls	r3, r3, #7
 80130ce:	4413      	add	r3, r2
 80130d0:	3384      	adds	r3, #132	@ 0x84
 80130d2:	461a      	mov	r2, r3
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	461a      	mov	r2, r3
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	01db      	lsls	r3, r3, #7
 80130e4:	4413      	add	r3, r2
 80130e6:	3384      	adds	r3, #132	@ 0x84
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	68fa      	ldr	r2, [r7, #12]
 80130ec:	6812      	ldr	r2, [r2, #0]
 80130ee:	4611      	mov	r1, r2
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	01d2      	lsls	r2, r2, #7
 80130f4:	440a      	add	r2, r1
 80130f6:	3284      	adds	r2, #132	@ 0x84
 80130f8:	f043 0301 	orr.w	r3, r3, #1
 80130fc:	6013      	str	r3, [r2, #0]
}
 80130fe:	bf00      	nop
 8013100:	3724      	adds	r7, #36	@ 0x24
 8013102:	46bd      	mov	sp, r7
 8013104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	fffff8f8 	.word	0xfffff8f8
 8013110:	fffff800 	.word	0xfffff800

08013114 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801311c:	f7fd fed0 	bl	8010ec0 <HAL_GetTick>
 8013120:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d101      	bne.n	801312c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8013128:	2301      	movs	r3, #1
 801312a:	e03b      	b.n	80131a4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2202      	movs	r2, #2
 8013138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68da      	ldr	r2, [r3, #12]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f022 0201 	bic.w	r2, r2, #1
 801314a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801314c:	e00f      	b.n	801316e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 801314e:	f7fd feb7 	bl	8010ec0 <HAL_GetTick>
 8013152:	4602      	mov	r2, r0
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	1ad3      	subs	r3, r2, r3
 8013158:	2b05      	cmp	r3, #5
 801315a:	d908      	bls.n	801316e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2240      	movs	r2, #64	@ 0x40
 8013160:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2203      	movs	r2, #3
 8013166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 801316a:	2301      	movs	r3, #1
 801316c:	e01a      	b.n	80131a4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	f003 0301 	and.w	r3, r3, #1
 8013178:	2b00      	cmp	r3, #0
 801317a:	d1e8      	bne.n	801314e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f000 f894 	bl	80132aa <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2200      	movs	r2, #0
 801318c:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2200      	movs	r2, #0
 8013198:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2201      	movs	r2, #1
 801319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80131a2:	2300      	movs	r3, #0
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3710      	adds	r7, #16
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b083      	sub	sp, #12
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80131ba:	2301      	movs	r3, #1
 80131bc:	e048      	b.n	8013250 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	68da      	ldr	r2, [r3, #12]
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	f022 0201 	bic.w	r2, r2, #1
 80131cc:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2200      	movs	r2, #0
 80131d4:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2200      	movs	r2, #0
 80131dc:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	2200      	movs	r2, #0
 80131e4:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2200      	movs	r2, #0
 80131ec:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2200      	movs	r2, #0
 80131f4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2200      	movs	r2, #0
 80131fc:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	2200      	movs	r2, #0
 8013204:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	2200      	movs	r2, #0
 801320c:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2200      	movs	r2, #0
 8013214:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	2200      	movs	r2, #0
 801321c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	221f      	movs	r2, #31
 8013224:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2200      	movs	r2, #0
 8013236:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2200      	movs	r2, #0
 8013242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2200      	movs	r2, #0
 801324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801324e:	2300      	movs	r3, #0
}
 8013250:	4618      	mov	r0, r3
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d101      	bne.n	801326e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801326a:	2301      	movs	r3, #1
 801326c:	e017      	b.n	801329e <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2b02      	cmp	r3, #2
 8013278:	d004      	beq.n	8013284 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2280      	movs	r2, #128	@ 0x80
 801327e:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 8013280:	2301      	movs	r3, #1
 8013282:	e00c      	b.n	801329e <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2204      	movs	r2, #4
 8013288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	68da      	ldr	r2, [r3, #12]
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	f022 0201 	bic.w	r2, r2, #1
 801329a:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	370c      	adds	r7, #12
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr

080132aa <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80132aa:	b480      	push	{r7}
 80132ac:	b085      	sub	sp, #20
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	68d9      	ldr	r1, [r3, #12]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	691a      	ldr	r2, [r3, #16]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	430a      	orrs	r2, r1
 80132c0:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	695a      	ldr	r2, [r3, #20]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	699b      	ldr	r3, [r3, #24]
 80132ca:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80132d0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80132dc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132e2:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80132e8:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132ee:	3b01      	subs	r3, #1
 80132f0:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80132f2:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80132fe:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8013300:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801330a:	d107      	bne.n	801331c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	691a      	ldr	r2, [r3, #16]
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 801331a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2200      	movs	r2, #0
 8013322:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013328:	2b00      	cmp	r3, #0
 801332a:	da11      	bge.n	8013350 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	695a      	ldr	r2, [r3, #20]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801333a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013340:	425b      	negs	r3, r3
 8013342:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	68fa      	ldr	r2, [r7, #12]
 801334a:	b292      	uxth	r2, r2
 801334c:	621a      	str	r2, [r3, #32]
 801334e:	e006      	b.n	801335e <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013354:	461a      	mov	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	b292      	uxth	r2, r2
 801335c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013362:	2b00      	cmp	r3, #0
 8013364:	da15      	bge.n	8013392 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	695a      	ldr	r2, [r3, #20]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8013374:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801337a:	425b      	negs	r3, r3
 801337c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	6a19      	ldr	r1, [r3, #32]
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	041a      	lsls	r2, r3, #16
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	430a      	orrs	r2, r1
 801338e:	621a      	str	r2, [r3, #32]
 8013390:	e009      	b.n	80133a6 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	6a19      	ldr	r1, [r3, #32]
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801339c:	041a      	lsls	r2, r3, #16
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	430a      	orrs	r2, r1
 80133a4:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80133ae:	d006      	beq.n	80133be <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	685a      	ldr	r2, [r3, #4]
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	b2d2      	uxtb	r2, r2
 80133ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80133bc:	e003      	b.n	80133c6 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2200      	movs	r2, #0
 80133c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2200      	movs	r2, #0
 80133cc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80133ce:	bf00      	nop
 80133d0:	3714      	adds	r7, #20
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr
	...

080133dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80133e4:	4b29      	ldr	r3, [pc, #164]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	f003 0307 	and.w	r3, r3, #7
 80133ec:	2b06      	cmp	r3, #6
 80133ee:	d00a      	beq.n	8013406 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80133f0:	4b26      	ldr	r3, [pc, #152]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80133f8:	687a      	ldr	r2, [r7, #4]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d001      	beq.n	8013402 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80133fe:	2301      	movs	r3, #1
 8013400:	e040      	b.n	8013484 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	e03e      	b.n	8013484 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8013406:	4b21      	ldr	r3, [pc, #132]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 8013408:	68db      	ldr	r3, [r3, #12]
 801340a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 801340e:	491f      	ldr	r1, [pc, #124]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	4313      	orrs	r3, r2
 8013414:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8013416:	f7fd fd53 	bl	8010ec0 <HAL_GetTick>
 801341a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801341c:	e009      	b.n	8013432 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801341e:	f7fd fd4f 	bl	8010ec0 <HAL_GetTick>
 8013422:	4602      	mov	r2, r0
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801342c:	d901      	bls.n	8013432 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801342e:	2301      	movs	r3, #1
 8013430:	e028      	b.n	8013484 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8013432:	4b16      	ldr	r3, [pc, #88]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 8013434:	685b      	ldr	r3, [r3, #4]
 8013436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801343a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801343e:	d1ee      	bne.n	801341e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2b1e      	cmp	r3, #30
 8013444:	d008      	beq.n	8013458 <HAL_PWREx_ConfigSupply+0x7c>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2b2e      	cmp	r3, #46	@ 0x2e
 801344a:	d005      	beq.n	8013458 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b1d      	cmp	r3, #29
 8013450:	d002      	beq.n	8013458 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2b2d      	cmp	r3, #45	@ 0x2d
 8013456:	d114      	bne.n	8013482 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8013458:	f7fd fd32 	bl	8010ec0 <HAL_GetTick>
 801345c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801345e:	e009      	b.n	8013474 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8013460:	f7fd fd2e 	bl	8010ec0 <HAL_GetTick>
 8013464:	4602      	mov	r2, r0
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	1ad3      	subs	r3, r2, r3
 801346a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801346e:	d901      	bls.n	8013474 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8013470:	2301      	movs	r3, #1
 8013472:	e007      	b.n	8013484 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8013474:	4b05      	ldr	r3, [pc, #20]	@ (801348c <HAL_PWREx_ConfigSupply+0xb0>)
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013480:	d1ee      	bne.n	8013460 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8013482:	2300      	movs	r3, #0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	58024800 	.word	0x58024800

08013490 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b086      	sub	sp, #24
 8013494:	af02      	add	r7, sp, #8
 8013496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013498:	f7fd fd12 	bl	8010ec0 <HAL_GetTick>
 801349c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d101      	bne.n	80134a8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80134a4:	2301      	movs	r3, #1
 80134a6:	e05f      	b.n	8013568 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d107      	bne.n	80134c4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7ed fe65 	bl	8001184 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80134ba:	f241 3188 	movw	r1, #5000	@ 0x1388
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f000 fcca 	bl	8013e58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	3b01      	subs	r3, #1
 80134d4:	021a      	lsls	r2, r3, #8
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	430a      	orrs	r2, r1
 80134dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2200      	movs	r2, #0
 80134e8:	2120      	movs	r1, #32
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f000 fcf5 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 80134f0:	4603      	mov	r3, r0
 80134f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80134f4:	7afb      	ldrb	r3, [r7, #11]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d135      	bne.n	8013566 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	681a      	ldr	r2, [r3, #0]
 8013500:	4b1b      	ldr	r3, [pc, #108]	@ (8013570 <HAL_QSPI_Init+0xe0>)
 8013502:	4013      	ands	r3, r2
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	6852      	ldr	r2, [r2, #4]
 8013508:	0611      	lsls	r1, r2, #24
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	68d2      	ldr	r2, [r2, #12]
 801350e:	4311      	orrs	r1, r2
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	69d2      	ldr	r2, [r2, #28]
 8013514:	4311      	orrs	r1, r2
 8013516:	687a      	ldr	r2, [r7, #4]
 8013518:	6a12      	ldr	r2, [r2, #32]
 801351a:	4311      	orrs	r1, r2
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	6812      	ldr	r2, [r2, #0]
 8013520:	430b      	orrs	r3, r1
 8013522:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	685a      	ldr	r2, [r3, #4]
 801352a:	4b12      	ldr	r3, [pc, #72]	@ (8013574 <HAL_QSPI_Init+0xe4>)
 801352c:	4013      	ands	r3, r2
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	6912      	ldr	r2, [r2, #16]
 8013532:	0411      	lsls	r1, r2, #16
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	6952      	ldr	r2, [r2, #20]
 8013538:	4311      	orrs	r1, r2
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	6992      	ldr	r2, [r2, #24]
 801353e:	4311      	orrs	r1, r2
 8013540:	687a      	ldr	r2, [r7, #4]
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	430b      	orrs	r3, r1
 8013546:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f042 0201 	orr.w	r2, r2, #1
 8013556:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	2200      	movs	r2, #0
 801355c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2201      	movs	r2, #1
 8013562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8013566:	7afb      	ldrb	r3, [r7, #11]
}
 8013568:	4618      	mov	r0, r3
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	00ffff2f 	.word	0x00ffff2f
 8013574:	ffe0f8fe 	.word	0xffe0f8fe

08013578 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b086      	sub	sp, #24
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	689b      	ldr	r3, [r3, #8]
 8013586:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	f003 0304 	and.w	r3, r3, #4
 8013596:	2b00      	cmp	r3, #0
 8013598:	d064      	beq.n	8013664 <HAL_QSPI_IRQHandler+0xec>
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d05f      	beq.n	8013664 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	3320      	adds	r3, #32
 80135aa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	2b12      	cmp	r3, #18
 80135b6:	d125      	bne.n	8013604 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80135b8:	e01c      	b.n	80135f4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00f      	beq.n	80135e2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135c6:	781a      	ldrb	r2, [r3, #0]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135d0:	1c5a      	adds	r2, r3, #1
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	625a      	str	r2, [r3, #36]	@ 0x24
          hqspi->TxXferCount--;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135da:	1e5a      	subs	r2, r3, #1
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80135e0:	e008      	b.n	80135f4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80135f0:	601a      	str	r2, [r3, #0]
          break;
 80135f2:	e033      	b.n	801365c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	f003 0304 	and.w	r3, r3, #4
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d1db      	bne.n	80135ba <HAL_QSPI_IRQHandler+0x42>
 8013602:	e02b      	b.n	801365c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801360a:	b2db      	uxtb	r3, r3
 801360c:	2b22      	cmp	r3, #34	@ 0x22
 801360e:	d125      	bne.n	801365c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8013610:	e01d      	b.n	801364e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013616:	2b00      	cmp	r3, #0
 8013618:	d010      	beq.n	801363c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801361e:	68fa      	ldr	r2, [r7, #12]
 8013620:	7812      	ldrb	r2, [r2, #0]
 8013622:	b2d2      	uxtb	r2, r2
 8013624:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801362a:	1c5a      	adds	r2, r3, #1
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	631a      	str	r2, [r3, #48]	@ 0x30
          hqspi->RxXferCount--;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013634:	1e5a      	subs	r2, r3, #1
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	639a      	str	r2, [r3, #56]	@ 0x38
 801363a:	e008      	b.n	801364e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	681a      	ldr	r2, [r3, #0]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801364a:	601a      	str	r2, [r3, #0]
          break;
 801364c:	e006      	b.n	801365c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	f003 0304 	and.w	r3, r3, #4
 8013658:	2b00      	cmp	r3, #0
 801365a:	d1da      	bne.n	8013612 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f000 fbdd 	bl	8013e1c <HAL_QSPI_FifoThresholdCallback>
 8013662:	e13c      	b.n	80138de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	f003 0302 	and.w	r3, r3, #2
 801366a:	2b00      	cmp	r3, #0
 801366c:	f000 80b0 	beq.w	80137d0 <HAL_QSPI_IRQHandler+0x258>
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013676:	2b00      	cmp	r3, #0
 8013678:	f000 80aa 	beq.w	80137d0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2202      	movs	r2, #2
 8013682:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8013692:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801369a:	b2db      	uxtb	r3, r3
 801369c:	2b12      	cmp	r3, #18
 801369e:	d120      	bne.n	80136e2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f003 0304 	and.w	r3, r3, #4
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d011      	beq.n	80136d2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	681a      	ldr	r2, [r3, #0]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f022 0204 	bic.w	r2, r2, #4
 80136bc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136c2:	681b      	ldr	r3, [r3, #0]
 80136c4:	68da      	ldr	r2, [r3, #12]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	f022 0201 	bic.w	r2, r2, #1
 80136d0:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2201      	movs	r2, #1
 80136d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f000 fb94 	bl	8013e08 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80136e0:	e0fa      	b.n	80138d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80136e8:	b2db      	uxtb	r3, r3
 80136ea:	2b22      	cmp	r3, #34	@ 0x22
 80136ec:	d143      	bne.n	8013776 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	f003 0304 	and.w	r3, r3, #4
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d012      	beq.n	8013722 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	f022 0204 	bic.w	r2, r2, #4
 801370a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	68da      	ldr	r2, [r3, #12]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f022 0201 	bic.w	r2, r2, #1
 801371e:	60da      	str	r2, [r3, #12]
 8013720:	e021      	b.n	8013766 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	3320      	adds	r3, #32
 8013728:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801372a:	e013      	b.n	8013754 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013730:	2b00      	cmp	r3, #0
 8013732:	d017      	beq.n	8013764 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013738:	68fa      	ldr	r2, [r7, #12]
 801373a:	7812      	ldrb	r2, [r2, #0]
 801373c:	b2d2      	uxtb	r2, r2
 801373e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013744:	1c5a      	adds	r2, r3, #1
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	631a      	str	r2, [r3, #48]	@ 0x30
            hqspi->RxXferCount--;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801374e:	1e5a      	subs	r2, r3, #1
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	639a      	str	r2, [r3, #56]	@ 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1e4      	bne.n	801372c <HAL_QSPI_IRQHandler+0x1b4>
 8013762:	e000      	b.n	8013766 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8013764:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	2201      	movs	r2, #1
 801376a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f000 fb40 	bl	8013df4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013774:	e0b0      	b.n	80138d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801377c:	b2db      	uxtb	r3, r3
 801377e:	2b02      	cmp	r3, #2
 8013780:	d107      	bne.n	8013792 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	2201      	movs	r2, #1
 8013786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f000 fb28 	bl	8013de0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8013790:	e0a2      	b.n	80138d8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013798:	b2db      	uxtb	r3, r3
 801379a:	2b08      	cmp	r3, #8
 801379c:	f040 809c 	bne.w	80138d8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	695a      	ldr	r2, [r3, #20]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80137ae:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2201      	movs	r2, #1
 80137b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d103      	bne.n	80137c8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 fb03 	bl	8013dcc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80137c6:	e087      	b.n	80138d8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 faf5 	bl	8013db8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80137ce:	e083      	b.n	80138d8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	f003 0308 	and.w	r3, r3, #8
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d01f      	beq.n	801381a <HAL_QSPI_IRQHandler+0x2a2>
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d01a      	beq.n	801381a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2208      	movs	r2, #8
 80137ea:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00b      	beq.n	8013812 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	681a      	ldr	r2, [r3, #0]
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8013808:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2201      	movs	r2, #1
 801380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 fb0c 	bl	8013e30 <HAL_QSPI_StatusMatchCallback>
 8013818:	e061      	b.n	80138de <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	2b00      	cmp	r3, #0
 8013822:	d047      	beq.n	80138b4 <HAL_QSPI_IRQHandler+0x33c>
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801382a:	2b00      	cmp	r3, #0
 801382c:	d042      	beq.n	80138b4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2201      	movs	r2, #1
 8013834:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	681a      	ldr	r2, [r3, #0]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8013844:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801384a:	f043 0202 	orr.w	r2, r3, #2
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	645a      	str	r2, [r3, #68]	@ 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	f003 0304 	and.w	r3, r3, #4
 801385c:	2b00      	cmp	r3, #0
 801385e:	d021      	beq.n	80138a4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	681a      	ldr	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f022 0204 	bic.w	r2, r2, #4
 801386e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013874:	4a1c      	ldr	r2, [pc, #112]	@ (80138e8 <HAL_QSPI_IRQHandler+0x370>)
 8013876:	659a      	str	r2, [r3, #88]	@ 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801387c:	4618      	mov	r0, r3
 801387e:	f7ff fced 	bl	801325c <HAL_MDMA_Abort_IT>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d029      	beq.n	80138dc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801388c:	f043 0204 	orr.w	r2, r3, #4
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2201      	movs	r2, #1
 8013898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 fa8b 	bl	8013db8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80138a2:	e01b      	b.n	80138dc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2201      	movs	r2, #1
 80138a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f000 fa83 	bl	8013db8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80138b2:	e013      	b.n	80138dc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	f003 0310 	and.w	r3, r3, #16
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00f      	beq.n	80138de <HAL_QSPI_IRQHandler+0x366>
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00a      	beq.n	80138de <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2210      	movs	r2, #16
 80138ce:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f000 fab7 	bl	8013e44 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80138d6:	e002      	b.n	80138de <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80138d8:	bf00      	nop
 80138da:	e000      	b.n	80138de <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80138dc:	bf00      	nop
}
 80138de:	bf00      	nop
 80138e0:	3718      	adds	r7, #24
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	08013e75 	.word	0x08013e75

080138ec <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b088      	sub	sp, #32
 80138f0:	af02      	add	r7, sp, #8
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80138f8:	f7fd fae2 	bl	8010ec0 <HAL_GetTick>
 80138fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013904:	b2db      	uxtb	r3, r3
 8013906:	2b01      	cmp	r3, #1
 8013908:	d101      	bne.n	801390e <HAL_QSPI_Command+0x22>
 801390a:	2302      	movs	r3, #2
 801390c:	e048      	b.n	80139a0 <HAL_QSPI_Command+0xb4>
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2201      	movs	r2, #1
 8013912:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b01      	cmp	r3, #1
 8013920:	d137      	bne.n	8013992 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2200      	movs	r2, #0
 8013926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	2202      	movs	r2, #2
 801392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	2200      	movs	r2, #0
 8013938:	2120      	movs	r1, #32
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f000 facd 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013940:	4603      	mov	r3, r0
 8013942:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013944:	7dfb      	ldrb	r3, [r7, #23]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d125      	bne.n	8013996 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801394a:	2200      	movs	r2, #0
 801394c:	68b9      	ldr	r1, [r7, #8]
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f000 fafa 	bl	8013f48 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013958:	2b00      	cmp	r3, #0
 801395a:	d115      	bne.n	8013988 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	9300      	str	r3, [sp, #0]
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	2201      	movs	r2, #1
 8013964:	2102      	movs	r1, #2
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f000 fab7 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 801396c:	4603      	mov	r3, r0
 801396e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8013970:	7dfb      	ldrb	r3, [r7, #23]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d10f      	bne.n	8013996 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2202      	movs	r2, #2
 801397c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2201      	movs	r2, #1
 8013982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013986:	e006      	b.n	8013996 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2201      	movs	r2, #1
 801398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013990:	e001      	b.n	8013996 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013992:	2302      	movs	r3, #2
 8013994:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2200      	movs	r2, #0
 801399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 801399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3718      	adds	r7, #24
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08a      	sub	sp, #40	@ 0x28
 80139ac:	af02      	add	r7, sp, #8
 80139ae:	60f8      	str	r0, [r7, #12]
 80139b0:	60b9      	str	r1, [r7, #8]
 80139b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80139b4:	2300      	movs	r3, #0
 80139b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80139b8:	f7fd fa82 	bl	8010ec0 <HAL_GetTick>
 80139bc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3320      	adds	r3, #32
 80139c4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80139cc:	b2db      	uxtb	r3, r3
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d101      	bne.n	80139d6 <HAL_QSPI_Transmit+0x2e>
 80139d2:	2302      	movs	r3, #2
 80139d4:	e076      	b.n	8013ac4 <HAL_QSPI_Transmit+0x11c>
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2201      	movs	r2, #1
 80139da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d165      	bne.n	8013ab6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	2200      	movs	r2, #0
 80139ee:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d056      	beq.n	8013aa4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2212      	movs	r2, #18
 80139fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	691b      	ldr	r3, [r3, #16]
 8013a04:	1c5a      	adds	r2, r3, #1
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	691b      	ldr	r3, [r3, #16]
 8013a10:	1c5a      	adds	r2, r3, #1
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	68ba      	ldr	r2, [r7, #8]
 8013a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	695a      	ldr	r2, [r3, #20]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8013a2a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8013a2c:	e01b      	b.n	8013a66 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	2201      	movs	r2, #1
 8013a36:	2104      	movs	r1, #4
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 fa4e 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8013a42:	7ffb      	ldrb	r3, [r7, #31]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d113      	bne.n	8013a70 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a4c:	781a      	ldrb	r2, [r3, #0]
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a56:	1c5a      	adds	r2, r3, #1
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a60:	1e5a      	subs	r2, r3, #1
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1df      	bne.n	8013a2e <HAL_QSPI_Transmit+0x86>
 8013a6e:	e000      	b.n	8013a72 <HAL_QSPI_Transmit+0xca>
          break;
 8013a70:	bf00      	nop
      }

      if (status == HAL_OK)
 8013a72:	7ffb      	ldrb	r3, [r7, #31]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d110      	bne.n	8013a9a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	69bb      	ldr	r3, [r7, #24]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	2102      	movs	r1, #2
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	f000 fa29 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8013a8c:	7ffb      	ldrb	r3, [r7, #31]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d103      	bne.n	8013a9a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	2202      	movs	r2, #2
 8013a98:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013aa2:	e00a      	b.n	8013aba <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013aa8:	f043 0208 	orr.w	r2, r3, #8
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	77fb      	strb	r3, [r7, #31]
 8013ab4:	e001      	b.n	8013aba <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013ab6:	2302      	movs	r3, #2
 8013ab8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	2200      	movs	r2, #0
 8013abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013ac2:	7ffb      	ldrb	r3, [r7, #31]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3720      	adds	r7, #32
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08a      	sub	sp, #40	@ 0x28
 8013ad0:	af02      	add	r7, sp, #8
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8013adc:	f7fd f9f0 	bl	8010ec0 <HAL_GetTick>
 8013ae0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	699b      	ldr	r3, [r3, #24]
 8013ae8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	3320      	adds	r3, #32
 8013af0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d101      	bne.n	8013b02 <HAL_QSPI_Receive+0x36>
 8013afe:	2302      	movs	r3, #2
 8013b00:	e07d      	b.n	8013bfe <HAL_QSPI_Receive+0x132>
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d16c      	bne.n	8013bf0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d05d      	beq.n	8013bde <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2222      	movs	r2, #34	@ 0x22
 8013b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	1c5a      	adds	r2, r3, #1
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	691b      	ldr	r3, [r3, #16]
 8013b3c:	1c5a      	adds	r2, r3, #1
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	695b      	ldr	r3, [r3, #20]
 8013b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8013b5a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	697a      	ldr	r2, [r7, #20]
 8013b62:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8013b64:	e01c      	b.n	8013ba0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	9300      	str	r3, [sp, #0]
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	2106      	movs	r1, #6
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f000 f9b2 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013b76:	4603      	mov	r3, r0
 8013b78:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8013b7a:	7ffb      	ldrb	r3, [r7, #31]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d114      	bne.n	8013baa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b84:	693a      	ldr	r2, [r7, #16]
 8013b86:	7812      	ldrb	r2, [r2, #0]
 8013b88:	b2d2      	uxtb	r2, r2
 8013b8a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b90:	1c5a      	adds	r2, r3, #1
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013b9a:	1e5a      	subs	r2, r3, #1
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1de      	bne.n	8013b66 <HAL_QSPI_Receive+0x9a>
 8013ba8:	e000      	b.n	8013bac <HAL_QSPI_Receive+0xe0>
          break;
 8013baa:	bf00      	nop
      }

      if (status == HAL_OK)
 8013bac:	7ffb      	ldrb	r3, [r7, #31]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d110      	bne.n	8013bd4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	2201      	movs	r2, #1
 8013bba:	2102      	movs	r1, #2
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f000 f98c 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8013bc6:	7ffb      	ldrb	r3, [r7, #31]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d103      	bne.n	8013bd4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	2202      	movs	r2, #2
 8013bd2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	2201      	movs	r2, #1
 8013bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013bdc:	e00a      	b.n	8013bf4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013be2:	f043 0208 	orr.w	r2, r3, #8
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8013bea:	2301      	movs	r3, #1
 8013bec:	77fb      	strb	r3, [r7, #31]
 8013bee:	e001      	b.n	8013bf4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013bf0:	2302      	movs	r3, #2
 8013bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8013bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3720      	adds	r7, #32
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b088      	sub	sp, #32
 8013c0a:	af02      	add	r7, sp, #8
 8013c0c:	60f8      	str	r0, [r7, #12]
 8013c0e:	60b9      	str	r1, [r7, #8]
 8013c10:	607a      	str	r2, [r7, #4]
 8013c12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013c14:	f7fd f954 	bl	8010ec0 <HAL_GetTick>
 8013c18:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	2b01      	cmp	r3, #1
 8013c24:	d101      	bne.n	8013c2a <HAL_QSPI_AutoPolling+0x24>
 8013c26:	2302      	movs	r3, #2
 8013c28:	e060      	b.n	8013cec <HAL_QSPI_AutoPolling+0xe6>
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2201      	movs	r2, #1
 8013c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d14f      	bne.n	8013cde <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2200      	movs	r2, #0
 8013c42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2242      	movs	r2, #66	@ 0x42
 8013c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	9300      	str	r3, [sp, #0]
 8013c50:	693b      	ldr	r3, [r7, #16]
 8013c52:	2200      	movs	r2, #0
 8013c54:	2120      	movs	r1, #32
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f000 f93f 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013c60:	7dfb      	ldrb	r3, [r7, #23]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d13d      	bne.n	8013ce2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	687a      	ldr	r2, [r7, #4]
 8013c6c:	6812      	ldr	r2, [r2, #0]
 8013c6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	6852      	ldr	r2, [r2, #4]
 8013c78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	6892      	ldr	r2, [r2, #8]
 8013c82:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	691b      	ldr	r3, [r3, #16]
 8013c92:	431a      	orrs	r2, r3
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8013c9c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68da      	ldr	r2, [r3, #12]
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8013ca6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8013caa:	68b9      	ldr	r1, [r7, #8]
 8013cac:	68f8      	ldr	r0, [r7, #12]
 8013cae:	f000 f94b 	bl	8013f48 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	9300      	str	r3, [sp, #0]
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	2201      	movs	r2, #1
 8013cba:	2108      	movs	r1, #8
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	f000 f90c 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8013cc6:	7dfb      	ldrb	r3, [r7, #23]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d10a      	bne.n	8013ce2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	2208      	movs	r2, #8
 8013cd2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8013cdc:	e001      	b.n	8013ce2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8013cde:	2302      	movs	r3, #2
 8013ce0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	3718      	adds	r7, #24
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}

08013cf4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b088      	sub	sp, #32
 8013cf8:	af02      	add	r7, sp, #8
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8013d00:	f7fd f8de 	bl	8010ec0 <HAL_GetTick>
 8013d04:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d101      	bne.n	8013d16 <HAL_QSPI_MemoryMapped+0x22>
 8013d12:	2302      	movs	r3, #2
 8013d14:	e04c      	b.n	8013db0 <HAL_QSPI_MemoryMapped+0xbc>
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	2201      	movs	r2, #1
 8013d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d13b      	bne.n	8013da2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2282      	movs	r2, #130	@ 0x82
 8013d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	2200      	movs	r2, #0
 8013d42:	2120      	movs	r1, #32
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f000 f8c8 	bl	8013eda <QSPI_WaitFlagStateUntilTimeout>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8013d4e:	7dfb      	ldrb	r3, [r7, #23]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d128      	bne.n	8013da6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f023 0108 	bic.w	r1, r3, #8
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	430a      	orrs	r2, r1
 8013d68:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	2b08      	cmp	r3, #8
 8013d70:	d110      	bne.n	8013d94 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	687a      	ldr	r2, [r7, #4]
 8013d78:	6812      	ldr	r2, [r2, #0]
 8013d7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2210      	movs	r2, #16
 8013d82:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8013d92:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8013d94:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8013d98:	68b9      	ldr	r1, [r7, #8]
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f000 f8d4 	bl	8013f48 <QSPI_Config>
 8013da0:	e001      	b.n	8013da6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8013da2:	2302      	movs	r3, #2
 8013da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	2200      	movs	r2, #0
 8013daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8013dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3718      	adds	r7, #24
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}

08013db8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8013dc0:	bf00      	nop
 8013dc2:	370c      	adds	r7, #12
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dca:	4770      	bx	lr

08013dcc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013dcc:	b480      	push	{r7}
 8013dce:	b083      	sub	sp, #12
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8013dd4:	bf00      	nop
 8013dd6:	370c      	adds	r7, #12
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dde:	4770      	bx	lr

08013de0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b083      	sub	sp, #12
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8013de8:	bf00      	nop
 8013dea:	370c      	adds	r7, #12
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b083      	sub	sp, #12
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8013dfc:	bf00      	nop
 8013dfe:	370c      	adds	r7, #12
 8013e00:	46bd      	mov	sp, r7
 8013e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e06:	4770      	bx	lr

08013e08 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8013e08:	b480      	push	{r7}
 8013e0a:	b083      	sub	sp, #12
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8013e10:	bf00      	nop
 8013e12:	370c      	adds	r7, #12
 8013e14:	46bd      	mov	sp, r7
 8013e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1a:	4770      	bx	lr

08013e1c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8013e24:	bf00      	nop
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8013e38:	bf00      	nop
 8013e3a:	370c      	adds	r7, #12
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr

08013e44 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8013e4c:	bf00      	nop
 8013e4e:	370c      	adds	r7, #12
 8013e50:	46bd      	mov	sp, r7
 8013e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e56:	4770      	bx	lr

08013e58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8013e58:	b480      	push	{r7}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8013e68:	bf00      	nop
 8013e6a:	370c      	adds	r7, #12
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e72:	4770      	bx	lr

08013e74 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013e80:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2200      	movs	r2, #0
 8013e86:	639a      	str	r2, [r3, #56]	@ 0x38
  hqspi->TxXferCount = 0U;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	2b08      	cmp	r3, #8
 8013e98:	d114      	bne.n	8013ec4 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	681a      	ldr	r2, [r3, #0]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013eb0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	f042 0202 	orr.w	r2, r2, #2
 8013ec0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8013ec2:	e006      	b.n	8013ed2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f7ff ff73 	bl	8013db8 <HAL_QSPI_ErrorCallback>
}
 8013ed2:	bf00      	nop
 8013ed4:	3710      	adds	r7, #16
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}

08013eda <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8013eda:	b580      	push	{r7, lr}
 8013edc:	b084      	sub	sp, #16
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	60f8      	str	r0, [r7, #12]
 8013ee2:	60b9      	str	r1, [r7, #8]
 8013ee4:	603b      	str	r3, [r7, #0]
 8013ee6:	4613      	mov	r3, r2
 8013ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013eea:	e01a      	b.n	8013f22 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013eec:	69bb      	ldr	r3, [r7, #24]
 8013eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef2:	d016      	beq.n	8013f22 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013ef4:	f7fc ffe4 	bl	8010ec0 <HAL_GetTick>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	1ad3      	subs	r3, r2, r3
 8013efe:	69ba      	ldr	r2, [r7, #24]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d302      	bcc.n	8013f0a <QSPI_WaitFlagStateUntilTimeout+0x30>
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10b      	bne.n	8013f22 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2204      	movs	r2, #4
 8013f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f16:	f043 0201 	orr.w	r2, r3, #1
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8013f1e:	2301      	movs	r3, #1
 8013f20:	e00e      	b.n	8013f40 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	689a      	ldr	r2, [r3, #8]
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	4013      	ands	r3, r2
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	bf14      	ite	ne
 8013f30:	2301      	movne	r3, #1
 8013f32:	2300      	moveq	r3, #0
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	461a      	mov	r2, r3
 8013f38:	79fb      	ldrb	r3, [r7, #7]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d1d6      	bne.n	8013eec <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8013f3e:	2300      	movs	r3, #0
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}

08013f48 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8013f48:	b480      	push	{r7}
 8013f4a:	b085      	sub	sp, #20
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	60f8      	str	r0, [r7, #12]
 8013f50:	60b9      	str	r1, [r7, #8]
 8013f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d009      	beq.n	8013f70 <QSPI_Config+0x28>
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013f62:	d005      	beq.n	8013f70 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	3a01      	subs	r2, #1
 8013f6e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	699b      	ldr	r3, [r3, #24]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	f000 80b9 	beq.w	80140ec <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	6a1b      	ldr	r3, [r3, #32]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d05f      	beq.n	8014042 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	6892      	ldr	r2, [r2, #8]
 8013f8a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	69db      	ldr	r3, [r3, #28]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d031      	beq.n	8013ff8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013f94:	68bb      	ldr	r3, [r7, #8]
 8013f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f9c:	431a      	orrs	r2, r3
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013fa2:	431a      	orrs	r2, r3
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fa8:	431a      	orrs	r2, r3
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	695b      	ldr	r3, [r3, #20]
 8013fae:	049b      	lsls	r3, r3, #18
 8013fb0:	431a      	orrs	r2, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	691b      	ldr	r3, [r3, #16]
 8013fb6:	431a      	orrs	r2, r3
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	6a1b      	ldr	r3, [r3, #32]
 8013fbc:	431a      	orrs	r2, r3
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	68db      	ldr	r3, [r3, #12]
 8013fc2:	431a      	orrs	r2, r3
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	69db      	ldr	r3, [r3, #28]
 8013fc8:	431a      	orrs	r2, r3
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	699b      	ldr	r3, [r3, #24]
 8013fce:	431a      	orrs	r2, r3
 8013fd0:	68bb      	ldr	r3, [r7, #8]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	ea42 0103 	orr.w	r1, r2, r3
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	430a      	orrs	r2, r1
 8013fe0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8013fe8:	f000 812e 	beq.w	8014248 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	68ba      	ldr	r2, [r7, #8]
 8013ff2:	6852      	ldr	r2, [r2, #4]
 8013ff4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8013ff6:	e127      	b.n	8014248 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014000:	431a      	orrs	r2, r3
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014006:	431a      	orrs	r2, r3
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801400c:	431a      	orrs	r2, r3
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	695b      	ldr	r3, [r3, #20]
 8014012:	049b      	lsls	r3, r3, #18
 8014014:	431a      	orrs	r2, r3
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	691b      	ldr	r3, [r3, #16]
 801401a:	431a      	orrs	r2, r3
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	6a1b      	ldr	r3, [r3, #32]
 8014020:	431a      	orrs	r2, r3
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	69db      	ldr	r3, [r3, #28]
 8014026:	431a      	orrs	r2, r3
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	699b      	ldr	r3, [r3, #24]
 801402c:	431a      	orrs	r2, r3
 801402e:	68bb      	ldr	r3, [r7, #8]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	ea42 0103 	orr.w	r1, r2, r3
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	430a      	orrs	r2, r1
 801403e:	615a      	str	r2, [r3, #20]
}
 8014040:	e102      	b.n	8014248 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	69db      	ldr	r3, [r3, #28]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d02e      	beq.n	80140a8 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014052:	431a      	orrs	r2, r3
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014058:	431a      	orrs	r2, r3
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801405e:	431a      	orrs	r2, r3
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	695b      	ldr	r3, [r3, #20]
 8014064:	049b      	lsls	r3, r3, #18
 8014066:	431a      	orrs	r2, r3
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	6a1b      	ldr	r3, [r3, #32]
 801406c:	431a      	orrs	r2, r3
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	431a      	orrs	r2, r3
 8014074:	68bb      	ldr	r3, [r7, #8]
 8014076:	69db      	ldr	r3, [r3, #28]
 8014078:	431a      	orrs	r2, r3
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	699b      	ldr	r3, [r3, #24]
 801407e:	431a      	orrs	r2, r3
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	ea42 0103 	orr.w	r1, r2, r3
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	687a      	ldr	r2, [r7, #4]
 801408e:	430a      	orrs	r2, r1
 8014090:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014098:	f000 80d6 	beq.w	8014248 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	68ba      	ldr	r2, [r7, #8]
 80140a2:	6852      	ldr	r2, [r2, #4]
 80140a4:	619a      	str	r2, [r3, #24]
}
 80140a6:	e0cf      	b.n	8014248 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80140b0:	431a      	orrs	r2, r3
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80140b6:	431a      	orrs	r2, r3
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140bc:	431a      	orrs	r2, r3
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	695b      	ldr	r3, [r3, #20]
 80140c2:	049b      	lsls	r3, r3, #18
 80140c4:	431a      	orrs	r2, r3
 80140c6:	68bb      	ldr	r3, [r7, #8]
 80140c8:	6a1b      	ldr	r3, [r3, #32]
 80140ca:	431a      	orrs	r2, r3
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	69db      	ldr	r3, [r3, #28]
 80140d0:	431a      	orrs	r2, r3
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	699b      	ldr	r3, [r3, #24]
 80140d6:	431a      	orrs	r2, r3
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	ea42 0103 	orr.w	r1, r2, r3
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	430a      	orrs	r2, r1
 80140e8:	615a      	str	r2, [r3, #20]
}
 80140ea:	e0ad      	b.n	8014248 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6a1b      	ldr	r3, [r3, #32]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d058      	beq.n	80141a6 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	6892      	ldr	r2, [r2, #8]
 80140fc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	69db      	ldr	r3, [r3, #28]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d02d      	beq.n	8014162 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801410a:	68bb      	ldr	r3, [r7, #8]
 801410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801410e:	431a      	orrs	r2, r3
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014114:	431a      	orrs	r2, r3
 8014116:	68bb      	ldr	r3, [r7, #8]
 8014118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801411a:	431a      	orrs	r2, r3
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	695b      	ldr	r3, [r3, #20]
 8014120:	049b      	lsls	r3, r3, #18
 8014122:	431a      	orrs	r2, r3
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	691b      	ldr	r3, [r3, #16]
 8014128:	431a      	orrs	r2, r3
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	431a      	orrs	r2, r3
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	431a      	orrs	r2, r3
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	69db      	ldr	r3, [r3, #28]
 801413a:	431a      	orrs	r2, r3
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	699b      	ldr	r3, [r3, #24]
 8014140:	ea42 0103 	orr.w	r1, r2, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	430a      	orrs	r2, r1
 801414c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8014154:	d078      	beq.n	8014248 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	6852      	ldr	r2, [r2, #4]
 801415e:	619a      	str	r2, [r3, #24]
}
 8014160:	e072      	b.n	8014248 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801416a:	431a      	orrs	r2, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014170:	431a      	orrs	r2, r3
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014176:	431a      	orrs	r2, r3
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	695b      	ldr	r3, [r3, #20]
 801417c:	049b      	lsls	r3, r3, #18
 801417e:	431a      	orrs	r2, r3
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	431a      	orrs	r2, r3
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	6a1b      	ldr	r3, [r3, #32]
 801418a:	431a      	orrs	r2, r3
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	69db      	ldr	r3, [r3, #28]
 8014190:	431a      	orrs	r2, r3
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	699b      	ldr	r3, [r3, #24]
 8014196:	ea42 0103 	orr.w	r1, r2, r3
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	430a      	orrs	r2, r1
 80141a2:	615a      	str	r2, [r3, #20]
}
 80141a4:	e050      	b.n	8014248 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	69db      	ldr	r3, [r3, #28]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d02a      	beq.n	8014204 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141b6:	431a      	orrs	r2, r3
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141bc:	431a      	orrs	r2, r3
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141c2:	431a      	orrs	r2, r3
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	695b      	ldr	r3, [r3, #20]
 80141c8:	049b      	lsls	r3, r3, #18
 80141ca:	431a      	orrs	r2, r3
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	6a1b      	ldr	r3, [r3, #32]
 80141d0:	431a      	orrs	r2, r3
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	431a      	orrs	r2, r3
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	69db      	ldr	r3, [r3, #28]
 80141dc:	431a      	orrs	r2, r3
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	699b      	ldr	r3, [r3, #24]
 80141e2:	ea42 0103 	orr.w	r1, r2, r3
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	687a      	ldr	r2, [r7, #4]
 80141ec:	430a      	orrs	r2, r1
 80141ee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80141f6:	d027      	beq.n	8014248 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	68ba      	ldr	r2, [r7, #8]
 80141fe:	6852      	ldr	r2, [r2, #4]
 8014200:	619a      	str	r2, [r3, #24]
}
 8014202:	e021      	b.n	8014248 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014208:	2b00      	cmp	r3, #0
 801420a:	d01d      	beq.n	8014248 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014214:	431a      	orrs	r2, r3
 8014216:	68bb      	ldr	r3, [r7, #8]
 8014218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801421a:	431a      	orrs	r2, r3
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014220:	431a      	orrs	r2, r3
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	695b      	ldr	r3, [r3, #20]
 8014226:	049b      	lsls	r3, r3, #18
 8014228:	431a      	orrs	r2, r3
 801422a:	68bb      	ldr	r3, [r7, #8]
 801422c:	6a1b      	ldr	r3, [r3, #32]
 801422e:	431a      	orrs	r2, r3
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	69db      	ldr	r3, [r3, #28]
 8014234:	431a      	orrs	r2, r3
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	699b      	ldr	r3, [r3, #24]
 801423a:	ea42 0103 	orr.w	r1, r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	430a      	orrs	r2, r1
 8014246:	615a      	str	r2, [r3, #20]
}
 8014248:	bf00      	nop
 801424a:	3714      	adds	r7, #20
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr

08014254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b08c      	sub	sp, #48	@ 0x30
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d102      	bne.n	8014268 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014262:	2301      	movs	r3, #1
 8014264:	f000 bc48 	b.w	8014af8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f003 0301 	and.w	r3, r3, #1
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 8088 	beq.w	8014386 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014276:	4b99      	ldr	r3, [pc, #612]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014278:	691b      	ldr	r3, [r3, #16]
 801427a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014280:	4b96      	ldr	r3, [pc, #600]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014284:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014288:	2b10      	cmp	r3, #16
 801428a:	d007      	beq.n	801429c <HAL_RCC_OscConfig+0x48>
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	2b18      	cmp	r3, #24
 8014290:	d111      	bne.n	80142b6 <HAL_RCC_OscConfig+0x62>
 8014292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014294:	f003 0303 	and.w	r3, r3, #3
 8014298:	2b02      	cmp	r3, #2
 801429a:	d10c      	bne.n	80142b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801429c:	4b8f      	ldr	r3, [pc, #572]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d06d      	beq.n	8014384 <HAL_RCC_OscConfig+0x130>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d169      	bne.n	8014384 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80142b0:	2301      	movs	r3, #1
 80142b2:	f000 bc21 	b.w	8014af8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80142be:	d106      	bne.n	80142ce <HAL_RCC_OscConfig+0x7a>
 80142c0:	4b86      	ldr	r3, [pc, #536]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a85      	ldr	r2, [pc, #532]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80142ca:	6013      	str	r3, [r2, #0]
 80142cc:	e02e      	b.n	801432c <HAL_RCC_OscConfig+0xd8>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d10c      	bne.n	80142f0 <HAL_RCC_OscConfig+0x9c>
 80142d6:	4b81      	ldr	r3, [pc, #516]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142d8:	681b      	ldr	r3, [r3, #0]
 80142da:	4a80      	ldr	r2, [pc, #512]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80142e0:	6013      	str	r3, [r2, #0]
 80142e2:	4b7e      	ldr	r3, [pc, #504]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	4a7d      	ldr	r2, [pc, #500]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80142ec:	6013      	str	r3, [r2, #0]
 80142ee:	e01d      	b.n	801432c <HAL_RCC_OscConfig+0xd8>
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	685b      	ldr	r3, [r3, #4]
 80142f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80142f8:	d10c      	bne.n	8014314 <HAL_RCC_OscConfig+0xc0>
 80142fa:	4b78      	ldr	r3, [pc, #480]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	4a77      	ldr	r2, [pc, #476]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8014304:	6013      	str	r3, [r2, #0]
 8014306:	4b75      	ldr	r3, [pc, #468]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4a74      	ldr	r2, [pc, #464]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 801430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014310:	6013      	str	r3, [r2, #0]
 8014312:	e00b      	b.n	801432c <HAL_RCC_OscConfig+0xd8>
 8014314:	4b71      	ldr	r3, [pc, #452]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4a70      	ldr	r2, [pc, #448]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 801431a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801431e:	6013      	str	r3, [r2, #0]
 8014320:	4b6e      	ldr	r3, [pc, #440]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	4a6d      	ldr	r2, [pc, #436]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d013      	beq.n	801435c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014334:	f7fc fdc4 	bl	8010ec0 <HAL_GetTick>
 8014338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801433a:	e008      	b.n	801434e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801433c:	f7fc fdc0 	bl	8010ec0 <HAL_GetTick>
 8014340:	4602      	mov	r2, r0
 8014342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014344:	1ad3      	subs	r3, r2, r3
 8014346:	2b64      	cmp	r3, #100	@ 0x64
 8014348:	d901      	bls.n	801434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801434a:	2303      	movs	r3, #3
 801434c:	e3d4      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801434e:	4b63      	ldr	r3, [pc, #396]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014356:	2b00      	cmp	r3, #0
 8014358:	d0f0      	beq.n	801433c <HAL_RCC_OscConfig+0xe8>
 801435a:	e014      	b.n	8014386 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801435c:	f7fc fdb0 	bl	8010ec0 <HAL_GetTick>
 8014360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014362:	e008      	b.n	8014376 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8014364:	f7fc fdac 	bl	8010ec0 <HAL_GetTick>
 8014368:	4602      	mov	r2, r0
 801436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801436c:	1ad3      	subs	r3, r2, r3
 801436e:	2b64      	cmp	r3, #100	@ 0x64
 8014370:	d901      	bls.n	8014376 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8014372:	2303      	movs	r3, #3
 8014374:	e3c0      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014376:	4b59      	ldr	r3, [pc, #356]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1f0      	bne.n	8014364 <HAL_RCC_OscConfig+0x110>
 8014382:	e000      	b.n	8014386 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f003 0302 	and.w	r3, r3, #2
 801438e:	2b00      	cmp	r3, #0
 8014390:	f000 80ca 	beq.w	8014528 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014394:	4b51      	ldr	r3, [pc, #324]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014396:	691b      	ldr	r3, [r3, #16]
 8014398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801439c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801439e:	4b4f      	ldr	r3, [pc, #316]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80143a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80143a4:	6a3b      	ldr	r3, [r7, #32]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d007      	beq.n	80143ba <HAL_RCC_OscConfig+0x166>
 80143aa:	6a3b      	ldr	r3, [r7, #32]
 80143ac:	2b18      	cmp	r3, #24
 80143ae:	d156      	bne.n	801445e <HAL_RCC_OscConfig+0x20a>
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	f003 0303 	and.w	r3, r3, #3
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d151      	bne.n	801445e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80143ba:	4b48      	ldr	r3, [pc, #288]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f003 0304 	and.w	r3, r3, #4
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d005      	beq.n	80143d2 <HAL_RCC_OscConfig+0x17e>
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	68db      	ldr	r3, [r3, #12]
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d101      	bne.n	80143d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80143ce:	2301      	movs	r3, #1
 80143d0:	e392      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80143d2:	4b42      	ldr	r3, [pc, #264]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	f023 0219 	bic.w	r2, r3, #25
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	493f      	ldr	r1, [pc, #252]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80143e0:	4313      	orrs	r3, r2
 80143e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80143e4:	f7fc fd6c 	bl	8010ec0 <HAL_GetTick>
 80143e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80143ea:	e008      	b.n	80143fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80143ec:	f7fc fd68 	bl	8010ec0 <HAL_GetTick>
 80143f0:	4602      	mov	r2, r0
 80143f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f4:	1ad3      	subs	r3, r2, r3
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	d901      	bls.n	80143fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80143fa:	2303      	movs	r3, #3
 80143fc:	e37c      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80143fe:	4b37      	ldr	r3, [pc, #220]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	f003 0304 	and.w	r3, r3, #4
 8014406:	2b00      	cmp	r3, #0
 8014408:	d0f0      	beq.n	80143ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801440a:	f7fc fd65 	bl	8010ed8 <HAL_GetREVID>
 801440e:	4603      	mov	r3, r0
 8014410:	f241 0203 	movw	r2, #4099	@ 0x1003
 8014414:	4293      	cmp	r3, r2
 8014416:	d817      	bhi.n	8014448 <HAL_RCC_OscConfig+0x1f4>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	691b      	ldr	r3, [r3, #16]
 801441c:	2b40      	cmp	r3, #64	@ 0x40
 801441e:	d108      	bne.n	8014432 <HAL_RCC_OscConfig+0x1de>
 8014420:	4b2e      	ldr	r3, [pc, #184]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8014428:	4a2c      	ldr	r2, [pc, #176]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 801442a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801442e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014430:	e07a      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014432:	4b2a      	ldr	r3, [pc, #168]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	691b      	ldr	r3, [r3, #16]
 801443e:	031b      	lsls	r3, r3, #12
 8014440:	4926      	ldr	r1, [pc, #152]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014442:	4313      	orrs	r3, r2
 8014444:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014446:	e06f      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014448:	4b24      	ldr	r3, [pc, #144]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	691b      	ldr	r3, [r3, #16]
 8014454:	061b      	lsls	r3, r3, #24
 8014456:	4921      	ldr	r1, [pc, #132]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014458:	4313      	orrs	r3, r2
 801445a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801445c:	e064      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	68db      	ldr	r3, [r3, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d047      	beq.n	80144f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014466:	4b1d      	ldr	r3, [pc, #116]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	f023 0219 	bic.w	r2, r3, #25
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	68db      	ldr	r3, [r3, #12]
 8014472:	491a      	ldr	r1, [pc, #104]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014474:	4313      	orrs	r3, r2
 8014476:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014478:	f7fc fd22 	bl	8010ec0 <HAL_GetTick>
 801447c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801447e:	e008      	b.n	8014492 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014480:	f7fc fd1e 	bl	8010ec0 <HAL_GetTick>
 8014484:	4602      	mov	r2, r0
 8014486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014488:	1ad3      	subs	r3, r2, r3
 801448a:	2b02      	cmp	r3, #2
 801448c:	d901      	bls.n	8014492 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801448e:	2303      	movs	r3, #3
 8014490:	e332      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014492:	4b12      	ldr	r3, [pc, #72]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	f003 0304 	and.w	r3, r3, #4
 801449a:	2b00      	cmp	r3, #0
 801449c:	d0f0      	beq.n	8014480 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801449e:	f7fc fd1b 	bl	8010ed8 <HAL_GetREVID>
 80144a2:	4603      	mov	r3, r0
 80144a4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d819      	bhi.n	80144e0 <HAL_RCC_OscConfig+0x28c>
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	691b      	ldr	r3, [r3, #16]
 80144b0:	2b40      	cmp	r3, #64	@ 0x40
 80144b2:	d108      	bne.n	80144c6 <HAL_RCC_OscConfig+0x272>
 80144b4:	4b09      	ldr	r3, [pc, #36]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80144bc:	4a07      	ldr	r2, [pc, #28]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80144be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80144c2:	6053      	str	r3, [r2, #4]
 80144c4:	e030      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
 80144c6:	4b05      	ldr	r3, [pc, #20]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80144c8:	685b      	ldr	r3, [r3, #4]
 80144ca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	691b      	ldr	r3, [r3, #16]
 80144d2:	031b      	lsls	r3, r3, #12
 80144d4:	4901      	ldr	r1, [pc, #4]	@ (80144dc <HAL_RCC_OscConfig+0x288>)
 80144d6:	4313      	orrs	r3, r2
 80144d8:	604b      	str	r3, [r1, #4]
 80144da:	e025      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
 80144dc:	58024400 	.word	0x58024400
 80144e0:	4b9a      	ldr	r3, [pc, #616]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80144e2:	685b      	ldr	r3, [r3, #4]
 80144e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	691b      	ldr	r3, [r3, #16]
 80144ec:	061b      	lsls	r3, r3, #24
 80144ee:	4997      	ldr	r1, [pc, #604]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80144f0:	4313      	orrs	r3, r2
 80144f2:	604b      	str	r3, [r1, #4]
 80144f4:	e018      	b.n	8014528 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80144f6:	4b95      	ldr	r3, [pc, #596]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	4a94      	ldr	r2, [pc, #592]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80144fc:	f023 0301 	bic.w	r3, r3, #1
 8014500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014502:	f7fc fcdd 	bl	8010ec0 <HAL_GetTick>
 8014506:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014508:	e008      	b.n	801451c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801450a:	f7fc fcd9 	bl	8010ec0 <HAL_GetTick>
 801450e:	4602      	mov	r2, r0
 8014510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014512:	1ad3      	subs	r3, r2, r3
 8014514:	2b02      	cmp	r3, #2
 8014516:	d901      	bls.n	801451c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8014518:	2303      	movs	r3, #3
 801451a:	e2ed      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801451c:	4b8b      	ldr	r3, [pc, #556]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	f003 0304 	and.w	r3, r3, #4
 8014524:	2b00      	cmp	r3, #0
 8014526:	d1f0      	bne.n	801450a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f003 0310 	and.w	r3, r3, #16
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 80a9 	beq.w	8014688 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014536:	4b85      	ldr	r3, [pc, #532]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014538:	691b      	ldr	r3, [r3, #16]
 801453a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801453e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014540:	4b82      	ldr	r3, [pc, #520]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014544:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014546:	69bb      	ldr	r3, [r7, #24]
 8014548:	2b08      	cmp	r3, #8
 801454a:	d007      	beq.n	801455c <HAL_RCC_OscConfig+0x308>
 801454c:	69bb      	ldr	r3, [r7, #24]
 801454e:	2b18      	cmp	r3, #24
 8014550:	d13a      	bne.n	80145c8 <HAL_RCC_OscConfig+0x374>
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	f003 0303 	and.w	r3, r3, #3
 8014558:	2b01      	cmp	r3, #1
 801455a:	d135      	bne.n	80145c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801455c:	4b7b      	ldr	r3, [pc, #492]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014564:	2b00      	cmp	r3, #0
 8014566:	d005      	beq.n	8014574 <HAL_RCC_OscConfig+0x320>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	69db      	ldr	r3, [r3, #28]
 801456c:	2b80      	cmp	r3, #128	@ 0x80
 801456e:	d001      	beq.n	8014574 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8014570:	2301      	movs	r3, #1
 8014572:	e2c1      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014574:	f7fc fcb0 	bl	8010ed8 <HAL_GetREVID>
 8014578:	4603      	mov	r3, r0
 801457a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801457e:	4293      	cmp	r3, r2
 8014580:	d817      	bhi.n	80145b2 <HAL_RCC_OscConfig+0x35e>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6a1b      	ldr	r3, [r3, #32]
 8014586:	2b20      	cmp	r3, #32
 8014588:	d108      	bne.n	801459c <HAL_RCC_OscConfig+0x348>
 801458a:	4b70      	ldr	r3, [pc, #448]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8014592:	4a6e      	ldr	r2, [pc, #440]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014594:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014598:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801459a:	e075      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801459c:	4b6b      	ldr	r3, [pc, #428]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6a1b      	ldr	r3, [r3, #32]
 80145a8:	069b      	lsls	r3, r3, #26
 80145aa:	4968      	ldr	r1, [pc, #416]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145ac:	4313      	orrs	r3, r2
 80145ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80145b0:	e06a      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80145b2:	4b66      	ldr	r3, [pc, #408]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145b4:	68db      	ldr	r3, [r3, #12]
 80145b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6a1b      	ldr	r3, [r3, #32]
 80145be:	061b      	lsls	r3, r3, #24
 80145c0:	4962      	ldr	r1, [pc, #392]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145c2:	4313      	orrs	r3, r2
 80145c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80145c6:	e05f      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	69db      	ldr	r3, [r3, #28]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d042      	beq.n	8014656 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80145d0:	4b5e      	ldr	r3, [pc, #376]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a5d      	ldr	r2, [pc, #372]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80145dc:	f7fc fc70 	bl	8010ec0 <HAL_GetTick>
 80145e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80145e2:	e008      	b.n	80145f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80145e4:	f7fc fc6c 	bl	8010ec0 <HAL_GetTick>
 80145e8:	4602      	mov	r2, r0
 80145ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	2b02      	cmp	r3, #2
 80145f0:	d901      	bls.n	80145f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80145f2:	2303      	movs	r3, #3
 80145f4:	e280      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80145f6:	4b55      	ldr	r3, [pc, #340]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d0f0      	beq.n	80145e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014602:	f7fc fc69 	bl	8010ed8 <HAL_GetREVID>
 8014606:	4603      	mov	r3, r0
 8014608:	f241 0203 	movw	r2, #4099	@ 0x1003
 801460c:	4293      	cmp	r3, r2
 801460e:	d817      	bhi.n	8014640 <HAL_RCC_OscConfig+0x3ec>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6a1b      	ldr	r3, [r3, #32]
 8014614:	2b20      	cmp	r3, #32
 8014616:	d108      	bne.n	801462a <HAL_RCC_OscConfig+0x3d6>
 8014618:	4b4c      	ldr	r3, [pc, #304]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801461a:	685b      	ldr	r3, [r3, #4]
 801461c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8014620:	4a4a      	ldr	r2, [pc, #296]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014622:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014626:	6053      	str	r3, [r2, #4]
 8014628:	e02e      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
 801462a:	4b48      	ldr	r3, [pc, #288]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6a1b      	ldr	r3, [r3, #32]
 8014636:	069b      	lsls	r3, r3, #26
 8014638:	4944      	ldr	r1, [pc, #272]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801463a:	4313      	orrs	r3, r2
 801463c:	604b      	str	r3, [r1, #4]
 801463e:	e023      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
 8014640:	4b42      	ldr	r3, [pc, #264]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	6a1b      	ldr	r3, [r3, #32]
 801464c:	061b      	lsls	r3, r3, #24
 801464e:	493f      	ldr	r1, [pc, #252]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014650:	4313      	orrs	r3, r2
 8014652:	60cb      	str	r3, [r1, #12]
 8014654:	e018      	b.n	8014688 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014656:	4b3d      	ldr	r3, [pc, #244]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	4a3c      	ldr	r2, [pc, #240]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801465c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8014660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014662:	f7fc fc2d 	bl	8010ec0 <HAL_GetTick>
 8014666:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014668:	e008      	b.n	801467c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801466a:	f7fc fc29 	bl	8010ec0 <HAL_GetTick>
 801466e:	4602      	mov	r2, r0
 8014670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014672:	1ad3      	subs	r3, r2, r3
 8014674:	2b02      	cmp	r3, #2
 8014676:	d901      	bls.n	801467c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8014678:	2303      	movs	r3, #3
 801467a:	e23d      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801467c:	4b33      	ldr	r3, [pc, #204]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014684:	2b00      	cmp	r3, #0
 8014686:	d1f0      	bne.n	801466a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	f003 0308 	and.w	r3, r3, #8
 8014690:	2b00      	cmp	r3, #0
 8014692:	d036      	beq.n	8014702 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	695b      	ldr	r3, [r3, #20]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d019      	beq.n	80146d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801469c:	4b2b      	ldr	r3, [pc, #172]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801469e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146a0:	4a2a      	ldr	r2, [pc, #168]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80146a2:	f043 0301 	orr.w	r3, r3, #1
 80146a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80146a8:	f7fc fc0a 	bl	8010ec0 <HAL_GetTick>
 80146ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80146ae:	e008      	b.n	80146c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80146b0:	f7fc fc06 	bl	8010ec0 <HAL_GetTick>
 80146b4:	4602      	mov	r2, r0
 80146b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d901      	bls.n	80146c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80146be:	2303      	movs	r3, #3
 80146c0:	e21a      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80146c2:	4b22      	ldr	r3, [pc, #136]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80146c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146c6:	f003 0302 	and.w	r3, r3, #2
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d0f0      	beq.n	80146b0 <HAL_RCC_OscConfig+0x45c>
 80146ce:	e018      	b.n	8014702 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80146d0:	4b1e      	ldr	r3, [pc, #120]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80146d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146d4:	4a1d      	ldr	r2, [pc, #116]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80146d6:	f023 0301 	bic.w	r3, r3, #1
 80146da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80146dc:	f7fc fbf0 	bl	8010ec0 <HAL_GetTick>
 80146e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80146e2:	e008      	b.n	80146f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80146e4:	f7fc fbec 	bl	8010ec0 <HAL_GetTick>
 80146e8:	4602      	mov	r2, r0
 80146ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ec:	1ad3      	subs	r3, r2, r3
 80146ee:	2b02      	cmp	r3, #2
 80146f0:	d901      	bls.n	80146f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80146f2:	2303      	movs	r3, #3
 80146f4:	e200      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80146f6:	4b15      	ldr	r3, [pc, #84]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 80146f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146fa:	f003 0302 	and.w	r3, r3, #2
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d1f0      	bne.n	80146e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f003 0320 	and.w	r3, r3, #32
 801470a:	2b00      	cmp	r3, #0
 801470c:	d039      	beq.n	8014782 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	699b      	ldr	r3, [r3, #24]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d01c      	beq.n	8014750 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014716:	4b0d      	ldr	r3, [pc, #52]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	4a0c      	ldr	r2, [pc, #48]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801471c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8014720:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014722:	f7fc fbcd 	bl	8010ec0 <HAL_GetTick>
 8014726:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014728:	e008      	b.n	801473c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801472a:	f7fc fbc9 	bl	8010ec0 <HAL_GetTick>
 801472e:	4602      	mov	r2, r0
 8014730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014732:	1ad3      	subs	r3, r2, r3
 8014734:	2b02      	cmp	r3, #2
 8014736:	d901      	bls.n	801473c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8014738:	2303      	movs	r3, #3
 801473a:	e1dd      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801473c:	4b03      	ldr	r3, [pc, #12]	@ (801474c <HAL_RCC_OscConfig+0x4f8>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014744:	2b00      	cmp	r3, #0
 8014746:	d0f0      	beq.n	801472a <HAL_RCC_OscConfig+0x4d6>
 8014748:	e01b      	b.n	8014782 <HAL_RCC_OscConfig+0x52e>
 801474a:	bf00      	nop
 801474c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014750:	4b9b      	ldr	r3, [pc, #620]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4a9a      	ldr	r2, [pc, #616]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801475a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801475c:	f7fc fbb0 	bl	8010ec0 <HAL_GetTick>
 8014760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014762:	e008      	b.n	8014776 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014764:	f7fc fbac 	bl	8010ec0 <HAL_GetTick>
 8014768:	4602      	mov	r2, r0
 801476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801476c:	1ad3      	subs	r3, r2, r3
 801476e:	2b02      	cmp	r3, #2
 8014770:	d901      	bls.n	8014776 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8014772:	2303      	movs	r3, #3
 8014774:	e1c0      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014776:	4b92      	ldr	r3, [pc, #584]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801477e:	2b00      	cmp	r3, #0
 8014780:	d1f0      	bne.n	8014764 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	f003 0304 	and.w	r3, r3, #4
 801478a:	2b00      	cmp	r3, #0
 801478c:	f000 8081 	beq.w	8014892 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014790:	4b8c      	ldr	r3, [pc, #560]	@ (80149c4 <HAL_RCC_OscConfig+0x770>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4a8b      	ldr	r2, [pc, #556]	@ (80149c4 <HAL_RCC_OscConfig+0x770>)
 8014796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801479a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801479c:	f7fc fb90 	bl	8010ec0 <HAL_GetTick>
 80147a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80147a2:	e008      	b.n	80147b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80147a4:	f7fc fb8c 	bl	8010ec0 <HAL_GetTick>
 80147a8:	4602      	mov	r2, r0
 80147aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147ac:	1ad3      	subs	r3, r2, r3
 80147ae:	2b64      	cmp	r3, #100	@ 0x64
 80147b0:	d901      	bls.n	80147b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80147b2:	2303      	movs	r3, #3
 80147b4:	e1a0      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80147b6:	4b83      	ldr	r3, [pc, #524]	@ (80149c4 <HAL_RCC_OscConfig+0x770>)
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d0f0      	beq.n	80147a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	689b      	ldr	r3, [r3, #8]
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d106      	bne.n	80147d8 <HAL_RCC_OscConfig+0x584>
 80147ca:	4b7d      	ldr	r3, [pc, #500]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147ce:	4a7c      	ldr	r2, [pc, #496]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147d0:	f043 0301 	orr.w	r3, r3, #1
 80147d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80147d6:	e02d      	b.n	8014834 <HAL_RCC_OscConfig+0x5e0>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10c      	bne.n	80147fa <HAL_RCC_OscConfig+0x5a6>
 80147e0:	4b77      	ldr	r3, [pc, #476]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147e4:	4a76      	ldr	r2, [pc, #472]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147e6:	f023 0301 	bic.w	r3, r3, #1
 80147ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80147ec:	4b74      	ldr	r3, [pc, #464]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80147f0:	4a73      	ldr	r2, [pc, #460]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80147f2:	f023 0304 	bic.w	r3, r3, #4
 80147f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80147f8:	e01c      	b.n	8014834 <HAL_RCC_OscConfig+0x5e0>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	689b      	ldr	r3, [r3, #8]
 80147fe:	2b05      	cmp	r3, #5
 8014800:	d10c      	bne.n	801481c <HAL_RCC_OscConfig+0x5c8>
 8014802:	4b6f      	ldr	r3, [pc, #444]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014806:	4a6e      	ldr	r2, [pc, #440]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014808:	f043 0304 	orr.w	r3, r3, #4
 801480c:	6713      	str	r3, [r2, #112]	@ 0x70
 801480e:	4b6c      	ldr	r3, [pc, #432]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014812:	4a6b      	ldr	r2, [pc, #428]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014814:	f043 0301 	orr.w	r3, r3, #1
 8014818:	6713      	str	r3, [r2, #112]	@ 0x70
 801481a:	e00b      	b.n	8014834 <HAL_RCC_OscConfig+0x5e0>
 801481c:	4b68      	ldr	r3, [pc, #416]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801481e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014820:	4a67      	ldr	r2, [pc, #412]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014822:	f023 0301 	bic.w	r3, r3, #1
 8014826:	6713      	str	r3, [r2, #112]	@ 0x70
 8014828:	4b65      	ldr	r3, [pc, #404]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801482c:	4a64      	ldr	r2, [pc, #400]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801482e:	f023 0304 	bic.w	r3, r3, #4
 8014832:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d015      	beq.n	8014868 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801483c:	f7fc fb40 	bl	8010ec0 <HAL_GetTick>
 8014840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014842:	e00a      	b.n	801485a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014844:	f7fc fb3c 	bl	8010ec0 <HAL_GetTick>
 8014848:	4602      	mov	r2, r0
 801484a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801484c:	1ad3      	subs	r3, r2, r3
 801484e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014852:	4293      	cmp	r3, r2
 8014854:	d901      	bls.n	801485a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8014856:	2303      	movs	r3, #3
 8014858:	e14e      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801485a:	4b59      	ldr	r3, [pc, #356]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801485c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801485e:	f003 0302 	and.w	r3, r3, #2
 8014862:	2b00      	cmp	r3, #0
 8014864:	d0ee      	beq.n	8014844 <HAL_RCC_OscConfig+0x5f0>
 8014866:	e014      	b.n	8014892 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014868:	f7fc fb2a 	bl	8010ec0 <HAL_GetTick>
 801486c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801486e:	e00a      	b.n	8014886 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014870:	f7fc fb26 	bl	8010ec0 <HAL_GetTick>
 8014874:	4602      	mov	r2, r0
 8014876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801487e:	4293      	cmp	r3, r2
 8014880:	d901      	bls.n	8014886 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8014882:	2303      	movs	r3, #3
 8014884:	e138      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014886:	4b4e      	ldr	r3, [pc, #312]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801488a:	f003 0302 	and.w	r3, r3, #2
 801488e:	2b00      	cmp	r3, #0
 8014890:	d1ee      	bne.n	8014870 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014896:	2b00      	cmp	r3, #0
 8014898:	f000 812d 	beq.w	8014af6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801489c:	4b48      	ldr	r3, [pc, #288]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801489e:	691b      	ldr	r3, [r3, #16]
 80148a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80148a4:	2b18      	cmp	r3, #24
 80148a6:	f000 80bd 	beq.w	8014a24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148ae:	2b02      	cmp	r3, #2
 80148b0:	f040 809e 	bne.w	80149f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80148b4:	4b42      	ldr	r3, [pc, #264]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	4a41      	ldr	r2, [pc, #260]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80148ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80148be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80148c0:	f7fc fafe 	bl	8010ec0 <HAL_GetTick>
 80148c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80148c6:	e008      	b.n	80148da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80148c8:	f7fc fafa 	bl	8010ec0 <HAL_GetTick>
 80148cc:	4602      	mov	r2, r0
 80148ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	2b02      	cmp	r3, #2
 80148d4:	d901      	bls.n	80148da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80148d6:	2303      	movs	r3, #3
 80148d8:	e10e      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80148da:	4b39      	ldr	r3, [pc, #228]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d1f0      	bne.n	80148c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80148e6:	4b36      	ldr	r3, [pc, #216]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80148e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80148ea:	4b37      	ldr	r3, [pc, #220]	@ (80149c8 <HAL_RCC_OscConfig+0x774>)
 80148ec:	4013      	ands	r3, r2
 80148ee:	687a      	ldr	r2, [r7, #4]
 80148f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80148f6:	0112      	lsls	r2, r2, #4
 80148f8:	430a      	orrs	r2, r1
 80148fa:	4931      	ldr	r1, [pc, #196]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80148fc:	4313      	orrs	r3, r2
 80148fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014904:	3b01      	subs	r3, #1
 8014906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801490e:	3b01      	subs	r3, #1
 8014910:	025b      	lsls	r3, r3, #9
 8014912:	b29b      	uxth	r3, r3
 8014914:	431a      	orrs	r2, r3
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801491a:	3b01      	subs	r3, #1
 801491c:	041b      	lsls	r3, r3, #16
 801491e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014922:	431a      	orrs	r2, r3
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014928:	3b01      	subs	r3, #1
 801492a:	061b      	lsls	r3, r3, #24
 801492c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014930:	4923      	ldr	r1, [pc, #140]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014932:	4313      	orrs	r3, r2
 8014934:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8014936:	4b22      	ldr	r3, [pc, #136]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801493a:	4a21      	ldr	r2, [pc, #132]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801493c:	f023 0301 	bic.w	r3, r3, #1
 8014940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014942:	4b1f      	ldr	r3, [pc, #124]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014946:	4b21      	ldr	r3, [pc, #132]	@ (80149cc <HAL_RCC_OscConfig+0x778>)
 8014948:	4013      	ands	r3, r2
 801494a:	687a      	ldr	r2, [r7, #4]
 801494c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801494e:	00d2      	lsls	r2, r2, #3
 8014950:	491b      	ldr	r1, [pc, #108]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014952:	4313      	orrs	r3, r2
 8014954:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014956:	4b1a      	ldr	r3, [pc, #104]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801495a:	f023 020c 	bic.w	r2, r3, #12
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014962:	4917      	ldr	r1, [pc, #92]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014964:	4313      	orrs	r3, r2
 8014966:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014968:	4b15      	ldr	r3, [pc, #84]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801496c:	f023 0202 	bic.w	r2, r3, #2
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014974:	4912      	ldr	r1, [pc, #72]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014976:	4313      	orrs	r3, r2
 8014978:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801497a:	4b11      	ldr	r3, [pc, #68]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801497e:	4a10      	ldr	r2, [pc, #64]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014984:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014986:	4b0e      	ldr	r3, [pc, #56]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801498a:	4a0d      	ldr	r2, [pc, #52]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 801498c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014992:	4b0b      	ldr	r3, [pc, #44]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014996:	4a0a      	ldr	r2, [pc, #40]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 8014998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801499c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801499e:	4b08      	ldr	r3, [pc, #32]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80149a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a2:	4a07      	ldr	r2, [pc, #28]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80149a4:	f043 0301 	orr.w	r3, r3, #1
 80149a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80149aa:	4b05      	ldr	r3, [pc, #20]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	4a04      	ldr	r2, [pc, #16]	@ (80149c0 <HAL_RCC_OscConfig+0x76c>)
 80149b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80149b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80149b6:	f7fc fa83 	bl	8010ec0 <HAL_GetTick>
 80149ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80149bc:	e011      	b.n	80149e2 <HAL_RCC_OscConfig+0x78e>
 80149be:	bf00      	nop
 80149c0:	58024400 	.word	0x58024400
 80149c4:	58024800 	.word	0x58024800
 80149c8:	fffffc0c 	.word	0xfffffc0c
 80149cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80149d0:	f7fc fa76 	bl	8010ec0 <HAL_GetTick>
 80149d4:	4602      	mov	r2, r0
 80149d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	2b02      	cmp	r3, #2
 80149dc:	d901      	bls.n	80149e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80149de:	2303      	movs	r3, #3
 80149e0:	e08a      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80149e2:	4b47      	ldr	r3, [pc, #284]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d0f0      	beq.n	80149d0 <HAL_RCC_OscConfig+0x77c>
 80149ee:	e082      	b.n	8014af6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80149f0:	4b43      	ldr	r3, [pc, #268]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	4a42      	ldr	r2, [pc, #264]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 80149f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80149fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80149fc:	f7fc fa60 	bl	8010ec0 <HAL_GetTick>
 8014a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014a02:	e008      	b.n	8014a16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014a04:	f7fc fa5c 	bl	8010ec0 <HAL_GetTick>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a0c:	1ad3      	subs	r3, r2, r3
 8014a0e:	2b02      	cmp	r3, #2
 8014a10:	d901      	bls.n	8014a16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8014a12:	2303      	movs	r3, #3
 8014a14:	e070      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014a16:	4b3a      	ldr	r3, [pc, #232]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d1f0      	bne.n	8014a04 <HAL_RCC_OscConfig+0x7b0>
 8014a22:	e068      	b.n	8014af6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014a24:	4b36      	ldr	r3, [pc, #216]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014a2a:	4b35      	ldr	r3, [pc, #212]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014a34:	2b01      	cmp	r3, #1
 8014a36:	d031      	beq.n	8014a9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	f003 0203 	and.w	r2, r3, #3
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014a42:	429a      	cmp	r2, r3
 8014a44:	d12a      	bne.n	8014a9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	091b      	lsrs	r3, r3, #4
 8014a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d122      	bne.n	8014a9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014a62:	429a      	cmp	r2, r3
 8014a64:	d11a      	bne.n	8014a9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	0a5b      	lsrs	r3, r3, #9
 8014a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014a74:	429a      	cmp	r2, r3
 8014a76:	d111      	bne.n	8014a9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	0c1b      	lsrs	r3, r3, #16
 8014a7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d108      	bne.n	8014a9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	0e1b      	lsrs	r3, r3, #24
 8014a8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d001      	beq.n	8014aa0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	e02b      	b.n	8014af8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8014aa0:	4b17      	ldr	r3, [pc, #92]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014aa4:	08db      	lsrs	r3, r3, #3
 8014aa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014aaa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014ab0:	693a      	ldr	r2, [r7, #16]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d01f      	beq.n	8014af6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8014ab6:	4b12      	ldr	r3, [pc, #72]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aba:	4a11      	ldr	r2, [pc, #68]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014abc:	f023 0301 	bic.w	r3, r3, #1
 8014ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8014ac2:	f7fc f9fd 	bl	8010ec0 <HAL_GetTick>
 8014ac6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8014ac8:	bf00      	nop
 8014aca:	f7fc f9f9 	bl	8010ec0 <HAL_GetTick>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ad2:	4293      	cmp	r3, r2
 8014ad4:	d0f9      	beq.n	8014aca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ada:	4b0a      	ldr	r3, [pc, #40]	@ (8014b04 <HAL_RCC_OscConfig+0x8b0>)
 8014adc:	4013      	ands	r3, r2
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8014ae2:	00d2      	lsls	r2, r2, #3
 8014ae4:	4906      	ldr	r1, [pc, #24]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8014aea:	4b05      	ldr	r3, [pc, #20]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014aee:	4a04      	ldr	r2, [pc, #16]	@ (8014b00 <HAL_RCC_OscConfig+0x8ac>)
 8014af0:	f043 0301 	orr.w	r3, r3, #1
 8014af4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8014af6:	2300      	movs	r3, #0
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3730      	adds	r7, #48	@ 0x30
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	58024400 	.word	0x58024400
 8014b04:	ffff0007 	.word	0xffff0007

08014b08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d101      	bne.n	8014b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014b18:	2301      	movs	r3, #1
 8014b1a:	e19c      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8014b1c:	4b8a      	ldr	r3, [pc, #552]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	f003 030f 	and.w	r3, r3, #15
 8014b24:	683a      	ldr	r2, [r7, #0]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d910      	bls.n	8014b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014b2a:	4b87      	ldr	r3, [pc, #540]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f023 020f 	bic.w	r2, r3, #15
 8014b32:	4985      	ldr	r1, [pc, #532]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	4313      	orrs	r3, r2
 8014b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014b3a:	4b83      	ldr	r3, [pc, #524]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f003 030f 	and.w	r3, r3, #15
 8014b42:	683a      	ldr	r2, [r7, #0]
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d001      	beq.n	8014b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014b48:	2301      	movs	r3, #1
 8014b4a:	e184      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f003 0304 	and.w	r3, r3, #4
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d010      	beq.n	8014b7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	691a      	ldr	r2, [r3, #16]
 8014b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014b5e:	699b      	ldr	r3, [r3, #24]
 8014b60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d908      	bls.n	8014b7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014b68:	4b78      	ldr	r3, [pc, #480]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014b6a:	699b      	ldr	r3, [r3, #24]
 8014b6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	691b      	ldr	r3, [r3, #16]
 8014b74:	4975      	ldr	r1, [pc, #468]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014b76:	4313      	orrs	r3, r2
 8014b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f003 0308 	and.w	r3, r3, #8
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d010      	beq.n	8014ba8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	695a      	ldr	r2, [r3, #20]
 8014b8a:	4b70      	ldr	r3, [pc, #448]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014b8c:	69db      	ldr	r3, [r3, #28]
 8014b8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d908      	bls.n	8014ba8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014b96:	4b6d      	ldr	r3, [pc, #436]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014b98:	69db      	ldr	r3, [r3, #28]
 8014b9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	695b      	ldr	r3, [r3, #20]
 8014ba2:	496a      	ldr	r1, [pc, #424]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014ba4:	4313      	orrs	r3, r2
 8014ba6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	f003 0310 	and.w	r3, r3, #16
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d010      	beq.n	8014bd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	699a      	ldr	r2, [r3, #24]
 8014bb8:	4b64      	ldr	r3, [pc, #400]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014bba:	69db      	ldr	r3, [r3, #28]
 8014bbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014bc0:	429a      	cmp	r2, r3
 8014bc2:	d908      	bls.n	8014bd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014bc4:	4b61      	ldr	r3, [pc, #388]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014bc6:	69db      	ldr	r3, [r3, #28]
 8014bc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	699b      	ldr	r3, [r3, #24]
 8014bd0:	495e      	ldr	r1, [pc, #376]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014bd2:	4313      	orrs	r3, r2
 8014bd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	f003 0320 	and.w	r3, r3, #32
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d010      	beq.n	8014c04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	69da      	ldr	r2, [r3, #28]
 8014be6:	4b59      	ldr	r3, [pc, #356]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014be8:	6a1b      	ldr	r3, [r3, #32]
 8014bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d908      	bls.n	8014c04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014bf2:	4b56      	ldr	r3, [pc, #344]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014bf4:	6a1b      	ldr	r3, [r3, #32]
 8014bf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	69db      	ldr	r3, [r3, #28]
 8014bfe:	4953      	ldr	r1, [pc, #332]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c00:	4313      	orrs	r3, r2
 8014c02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f003 0302 	and.w	r3, r3, #2
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d010      	beq.n	8014c32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	68da      	ldr	r2, [r3, #12]
 8014c14:	4b4d      	ldr	r3, [pc, #308]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c16:	699b      	ldr	r3, [r3, #24]
 8014c18:	f003 030f 	and.w	r3, r3, #15
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d908      	bls.n	8014c32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014c20:	4b4a      	ldr	r3, [pc, #296]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c22:	699b      	ldr	r3, [r3, #24]
 8014c24:	f023 020f 	bic.w	r2, r3, #15
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	4947      	ldr	r1, [pc, #284]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	f003 0301 	and.w	r3, r3, #1
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d055      	beq.n	8014cea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8014c3e:	4b43      	ldr	r3, [pc, #268]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c40:	699b      	ldr	r3, [r3, #24]
 8014c42:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	689b      	ldr	r3, [r3, #8]
 8014c4a:	4940      	ldr	r1, [pc, #256]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c4c:	4313      	orrs	r3, r2
 8014c4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	2b02      	cmp	r3, #2
 8014c56:	d107      	bne.n	8014c68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014c58:	4b3c      	ldr	r3, [pc, #240]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d121      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c64:	2301      	movs	r3, #1
 8014c66:	e0f6      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	2b03      	cmp	r3, #3
 8014c6e:	d107      	bne.n	8014c80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014c70:	4b36      	ldr	r3, [pc, #216]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d115      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e0ea      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	2b01      	cmp	r3, #1
 8014c86:	d107      	bne.n	8014c98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014c88:	4b30      	ldr	r3, [pc, #192]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d109      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014c94:	2301      	movs	r3, #1
 8014c96:	e0de      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014c98:	4b2c      	ldr	r3, [pc, #176]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	f003 0304 	and.w	r3, r3, #4
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e0d6      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8014ca8:	4b28      	ldr	r3, [pc, #160]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	f023 0207 	bic.w	r2, r3, #7
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	4925      	ldr	r1, [pc, #148]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014cb6:	4313      	orrs	r3, r2
 8014cb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014cba:	f7fc f901 	bl	8010ec0 <HAL_GetTick>
 8014cbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cc0:	e00a      	b.n	8014cd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014cc2:	f7fc f8fd 	bl	8010ec0 <HAL_GetTick>
 8014cc6:	4602      	mov	r2, r0
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	1ad3      	subs	r3, r2, r3
 8014ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d901      	bls.n	8014cd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8014cd4:	2303      	movs	r3, #3
 8014cd6:	e0be      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8014cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014cda:	691b      	ldr	r3, [r3, #16]
 8014cdc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	00db      	lsls	r3, r3, #3
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d1eb      	bne.n	8014cc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	f003 0302 	and.w	r3, r3, #2
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d010      	beq.n	8014d18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	68da      	ldr	r2, [r3, #12]
 8014cfa:	4b14      	ldr	r3, [pc, #80]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014cfc:	699b      	ldr	r3, [r3, #24]
 8014cfe:	f003 030f 	and.w	r3, r3, #15
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d208      	bcs.n	8014d18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014d06:	4b11      	ldr	r3, [pc, #68]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014d08:	699b      	ldr	r3, [r3, #24]
 8014d0a:	f023 020f 	bic.w	r2, r3, #15
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	490e      	ldr	r1, [pc, #56]	@ (8014d4c <HAL_RCC_ClockConfig+0x244>)
 8014d14:	4313      	orrs	r3, r2
 8014d16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8014d18:	4b0b      	ldr	r3, [pc, #44]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	f003 030f 	and.w	r3, r3, #15
 8014d20:	683a      	ldr	r2, [r7, #0]
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d214      	bcs.n	8014d50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014d26:	4b08      	ldr	r3, [pc, #32]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f023 020f 	bic.w	r2, r3, #15
 8014d2e:	4906      	ldr	r1, [pc, #24]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	4313      	orrs	r3, r2
 8014d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014d36:	4b04      	ldr	r3, [pc, #16]	@ (8014d48 <HAL_RCC_ClockConfig+0x240>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f003 030f 	and.w	r3, r3, #15
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d005      	beq.n	8014d50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8014d44:	2301      	movs	r3, #1
 8014d46:	e086      	b.n	8014e56 <HAL_RCC_ClockConfig+0x34e>
 8014d48:	52002000 	.word	0x52002000
 8014d4c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	f003 0304 	and.w	r3, r3, #4
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d010      	beq.n	8014d7e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	691a      	ldr	r2, [r3, #16]
 8014d60:	4b3f      	ldr	r3, [pc, #252]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014d62:	699b      	ldr	r3, [r3, #24]
 8014d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d208      	bcs.n	8014d7e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014d6e:	699b      	ldr	r3, [r3, #24]
 8014d70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	691b      	ldr	r3, [r3, #16]
 8014d78:	4939      	ldr	r1, [pc, #228]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014d7a:	4313      	orrs	r3, r2
 8014d7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f003 0308 	and.w	r3, r3, #8
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d010      	beq.n	8014dac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	695a      	ldr	r2, [r3, #20]
 8014d8e:	4b34      	ldr	r3, [pc, #208]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014d90:	69db      	ldr	r3, [r3, #28]
 8014d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d208      	bcs.n	8014dac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014d9a:	4b31      	ldr	r3, [pc, #196]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014d9c:	69db      	ldr	r3, [r3, #28]
 8014d9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	695b      	ldr	r3, [r3, #20]
 8014da6:	492e      	ldr	r1, [pc, #184]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014da8:	4313      	orrs	r3, r2
 8014daa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	f003 0310 	and.w	r3, r3, #16
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d010      	beq.n	8014dda <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	699a      	ldr	r2, [r3, #24]
 8014dbc:	4b28      	ldr	r3, [pc, #160]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014dbe:	69db      	ldr	r3, [r3, #28]
 8014dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d208      	bcs.n	8014dda <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014dc8:	4b25      	ldr	r3, [pc, #148]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014dca:	69db      	ldr	r3, [r3, #28]
 8014dcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	699b      	ldr	r3, [r3, #24]
 8014dd4:	4922      	ldr	r1, [pc, #136]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014dd6:	4313      	orrs	r3, r2
 8014dd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	f003 0320 	and.w	r3, r3, #32
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d010      	beq.n	8014e08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	69da      	ldr	r2, [r3, #28]
 8014dea:	4b1d      	ldr	r3, [pc, #116]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014dec:	6a1b      	ldr	r3, [r3, #32]
 8014dee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d208      	bcs.n	8014e08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8014df6:	4b1a      	ldr	r3, [pc, #104]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014df8:	6a1b      	ldr	r3, [r3, #32]
 8014dfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	69db      	ldr	r3, [r3, #28]
 8014e02:	4917      	ldr	r1, [pc, #92]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014e04:	4313      	orrs	r3, r2
 8014e06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8014e08:	f000 f89e 	bl	8014f48 <HAL_RCC_GetSysClockFreq>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	4b14      	ldr	r3, [pc, #80]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014e10:	699b      	ldr	r3, [r3, #24]
 8014e12:	0a1b      	lsrs	r3, r3, #8
 8014e14:	f003 030f 	and.w	r3, r3, #15
 8014e18:	4912      	ldr	r1, [pc, #72]	@ (8014e64 <HAL_RCC_ClockConfig+0x35c>)
 8014e1a:	5ccb      	ldrb	r3, [r1, r3]
 8014e1c:	f003 031f 	and.w	r3, r3, #31
 8014e20:	fa22 f303 	lsr.w	r3, r2, r3
 8014e24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8014e26:	4b0e      	ldr	r3, [pc, #56]	@ (8014e60 <HAL_RCC_ClockConfig+0x358>)
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	f003 030f 	and.w	r3, r3, #15
 8014e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8014e64 <HAL_RCC_ClockConfig+0x35c>)
 8014e30:	5cd3      	ldrb	r3, [r2, r3]
 8014e32:	f003 031f 	and.w	r3, r3, #31
 8014e36:	693a      	ldr	r2, [r7, #16]
 8014e38:	fa22 f303 	lsr.w	r3, r2, r3
 8014e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8014e68 <HAL_RCC_ClockConfig+0x360>)
 8014e3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8014e40:	4a0a      	ldr	r2, [pc, #40]	@ (8014e6c <HAL_RCC_ClockConfig+0x364>)
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8014e46:	4b0a      	ldr	r3, [pc, #40]	@ (8014e70 <HAL_RCC_ClockConfig+0x368>)
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7ec fbfe 	bl	800164c <HAL_InitTick>
 8014e50:	4603      	mov	r3, r0
 8014e52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8014e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3718      	adds	r7, #24
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	58024400 	.word	0x58024400
 8014e64:	0802d808 	.word	0x0802d808
 8014e68:	2400001c 	.word	0x2400001c
 8014e6c:	24000018 	.word	0x24000018
 8014e70:	24000050 	.word	0x24000050

08014e74 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b08c      	sub	sp, #48	@ 0x30
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d12a      	bne.n	8014edc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8014e86:	4b2d      	ldr	r3, [pc, #180]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014e8e:	f043 0301 	orr.w	r3, r3, #1
 8014e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014e96:	4b29      	ldr	r3, [pc, #164]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014e9c:	f003 0301 	and.w	r3, r3, #1
 8014ea0:	61bb      	str	r3, [r7, #24]
 8014ea2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8014ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014eaa:	2302      	movs	r3, #2
 8014eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8014eba:	f107 031c 	add.w	r3, r7, #28
 8014ebe:	4619      	mov	r1, r3
 8014ec0:	481f      	ldr	r0, [pc, #124]	@ (8014f40 <HAL_RCC_MCOConfig+0xcc>)
 8014ec2:	f7fc fc09 	bl	80116d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8014ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014ec8:	691b      	ldr	r3, [r3, #16]
 8014eca:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8014ece:	68b9      	ldr	r1, [r7, #8]
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	430b      	orrs	r3, r1
 8014ed4:	4919      	ldr	r1, [pc, #100]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014ed6:	4313      	orrs	r3, r2
 8014ed8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8014eda:	e02a      	b.n	8014f32 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8014edc:	4b17      	ldr	r3, [pc, #92]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014ee2:	4a16      	ldr	r2, [pc, #88]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014ee4:	f043 0304 	orr.w	r3, r3, #4
 8014ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8014eec:	4b13      	ldr	r3, [pc, #76]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8014ef2:	f003 0304 	and.w	r3, r3, #4
 8014ef6:	617b      	str	r3, [r7, #20]
 8014ef8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8014efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f00:	2302      	movs	r3, #2
 8014f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f04:	2303      	movs	r3, #3
 8014f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8014f10:	f107 031c 	add.w	r3, r7, #28
 8014f14:	4619      	mov	r1, r3
 8014f16:	480b      	ldr	r0, [pc, #44]	@ (8014f44 <HAL_RCC_MCOConfig+0xd0>)
 8014f18:	f7fc fbde 	bl	80116d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8014f1c:	4b07      	ldr	r3, [pc, #28]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014f1e:	691b      	ldr	r3, [r3, #16]
 8014f20:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	01d9      	lsls	r1, r3, #7
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	430b      	orrs	r3, r1
 8014f2c:	4903      	ldr	r1, [pc, #12]	@ (8014f3c <HAL_RCC_MCOConfig+0xc8>)
 8014f2e:	4313      	orrs	r3, r2
 8014f30:	610b      	str	r3, [r1, #16]
}
 8014f32:	bf00      	nop
 8014f34:	3730      	adds	r7, #48	@ 0x30
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	58024400 	.word	0x58024400
 8014f40:	58020000 	.word	0x58020000
 8014f44:	58020800 	.word	0x58020800

08014f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b089      	sub	sp, #36	@ 0x24
 8014f4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8014f4e:	4bb3      	ldr	r3, [pc, #716]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014f50:	691b      	ldr	r3, [r3, #16]
 8014f52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014f56:	2b18      	cmp	r3, #24
 8014f58:	f200 8155 	bhi.w	8015206 <HAL_RCC_GetSysClockFreq+0x2be>
 8014f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8014f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f62:	bf00      	nop
 8014f64:	08014fc9 	.word	0x08014fc9
 8014f68:	08015207 	.word	0x08015207
 8014f6c:	08015207 	.word	0x08015207
 8014f70:	08015207 	.word	0x08015207
 8014f74:	08015207 	.word	0x08015207
 8014f78:	08015207 	.word	0x08015207
 8014f7c:	08015207 	.word	0x08015207
 8014f80:	08015207 	.word	0x08015207
 8014f84:	08014fef 	.word	0x08014fef
 8014f88:	08015207 	.word	0x08015207
 8014f8c:	08015207 	.word	0x08015207
 8014f90:	08015207 	.word	0x08015207
 8014f94:	08015207 	.word	0x08015207
 8014f98:	08015207 	.word	0x08015207
 8014f9c:	08015207 	.word	0x08015207
 8014fa0:	08015207 	.word	0x08015207
 8014fa4:	08014ff5 	.word	0x08014ff5
 8014fa8:	08015207 	.word	0x08015207
 8014fac:	08015207 	.word	0x08015207
 8014fb0:	08015207 	.word	0x08015207
 8014fb4:	08015207 	.word	0x08015207
 8014fb8:	08015207 	.word	0x08015207
 8014fbc:	08015207 	.word	0x08015207
 8014fc0:	08015207 	.word	0x08015207
 8014fc4:	08014ffb 	.word	0x08014ffb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014fc8:	4b94      	ldr	r3, [pc, #592]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	f003 0320 	and.w	r3, r3, #32
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d009      	beq.n	8014fe8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014fd4:	4b91      	ldr	r3, [pc, #580]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	08db      	lsrs	r3, r3, #3
 8014fda:	f003 0303 	and.w	r3, r3, #3
 8014fde:	4a90      	ldr	r2, [pc, #576]	@ (8015220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8014fe4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8014fe6:	e111      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8014fe8:	4b8d      	ldr	r3, [pc, #564]	@ (8015220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8014fea:	61bb      	str	r3, [r7, #24]
      break;
 8014fec:	e10e      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8014fee:	4b8d      	ldr	r3, [pc, #564]	@ (8015224 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8014ff0:	61bb      	str	r3, [r7, #24]
      break;
 8014ff2:	e10b      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8014ff4:	4b8c      	ldr	r3, [pc, #560]	@ (8015228 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8014ff6:	61bb      	str	r3, [r7, #24]
      break;
 8014ff8:	e108      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014ffa:	4b88      	ldr	r3, [pc, #544]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8014ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ffe:	f003 0303 	and.w	r3, r3, #3
 8015002:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8015004:	4b85      	ldr	r3, [pc, #532]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015008:	091b      	lsrs	r3, r3, #4
 801500a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801500e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8015010:	4b82      	ldr	r3, [pc, #520]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015014:	f003 0301 	and.w	r3, r3, #1
 8015018:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801501a:	4b80      	ldr	r3, [pc, #512]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801501c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801501e:	08db      	lsrs	r3, r3, #3
 8015020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015024:	68fa      	ldr	r2, [r7, #12]
 8015026:	fb02 f303 	mul.w	r3, r2, r3
 801502a:	ee07 3a90 	vmov	s15, r3
 801502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015032:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	2b00      	cmp	r3, #0
 801503a:	f000 80e1 	beq.w	8015200 <HAL_RCC_GetSysClockFreq+0x2b8>
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	2b02      	cmp	r3, #2
 8015042:	f000 8083 	beq.w	801514c <HAL_RCC_GetSysClockFreq+0x204>
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	2b02      	cmp	r3, #2
 801504a:	f200 80a1 	bhi.w	8015190 <HAL_RCC_GetSysClockFreq+0x248>
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d003      	beq.n	801505c <HAL_RCC_GetSysClockFreq+0x114>
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	2b01      	cmp	r3, #1
 8015058:	d056      	beq.n	8015108 <HAL_RCC_GetSysClockFreq+0x1c0>
 801505a:	e099      	b.n	8015190 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801505c:	4b6f      	ldr	r3, [pc, #444]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	f003 0320 	and.w	r3, r3, #32
 8015064:	2b00      	cmp	r3, #0
 8015066:	d02d      	beq.n	80150c4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8015068:	4b6c      	ldr	r3, [pc, #432]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	08db      	lsrs	r3, r3, #3
 801506e:	f003 0303 	and.w	r3, r3, #3
 8015072:	4a6b      	ldr	r2, [pc, #428]	@ (8015220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8015074:	fa22 f303 	lsr.w	r3, r2, r3
 8015078:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	ee07 3a90 	vmov	s15, r3
 8015080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	ee07 3a90 	vmov	s15, r3
 801508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015092:	4b62      	ldr	r3, [pc, #392]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801509a:	ee07 3a90 	vmov	s15, r3
 801509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80150a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80150a6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801522c <HAL_RCC_GetSysClockFreq+0x2e4>
 80150aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80150ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80150b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80150b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150be:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80150c2:	e087      	b.n	80151d4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	ee07 3a90 	vmov	s15, r3
 80150ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80150ce:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8015230 <HAL_RCC_GetSysClockFreq+0x2e8>
 80150d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80150d6:	4b51      	ldr	r3, [pc, #324]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80150d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80150da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80150de:	ee07 3a90 	vmov	s15, r3
 80150e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80150e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80150ea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801522c <HAL_RCC_GetSysClockFreq+0x2e4>
 80150ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80150f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80150f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80150fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80150fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8015106:	e065      	b.n	80151d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	ee07 3a90 	vmov	s15, r3
 801510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015112:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8015234 <HAL_RCC_GetSysClockFreq+0x2ec>
 8015116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801511a:	4b40      	ldr	r3, [pc, #256]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015122:	ee07 3a90 	vmov	s15, r3
 8015126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801512a:	ed97 6a02 	vldr	s12, [r7, #8]
 801512e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801522c <HAL_RCC_GetSysClockFreq+0x2e4>
 8015132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801513a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801514a:	e043      	b.n	80151d4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	ee07 3a90 	vmov	s15, r3
 8015152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015156:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8015238 <HAL_RCC_GetSysClockFreq+0x2f0>
 801515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801515e:	4b2f      	ldr	r3, [pc, #188]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8015160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015166:	ee07 3a90 	vmov	s15, r3
 801516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801516e:	ed97 6a02 	vldr	s12, [r7, #8]
 8015172:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801522c <HAL_RCC_GetSysClockFreq+0x2e4>
 8015176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801517e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801518a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801518e:	e021      	b.n	80151d4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	ee07 3a90 	vmov	s15, r3
 8015196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801519a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8015234 <HAL_RCC_GetSysClockFreq+0x2ec>
 801519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80151a2:	4b1e      	ldr	r3, [pc, #120]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151aa:	ee07 3a90 	vmov	s15, r3
 80151ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80151b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80151b6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801522c <HAL_RCC_GetSysClockFreq+0x2e4>
 80151ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80151be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80151c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80151c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80151ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80151ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80151d2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80151d4:	4b11      	ldr	r3, [pc, #68]	@ (801521c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80151d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151d8:	0a5b      	lsrs	r3, r3, #9
 80151da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80151de:	3301      	adds	r3, #1
 80151e0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	ee07 3a90 	vmov	s15, r3
 80151e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80151ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80151f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80151f8:	ee17 3a90 	vmov	r3, s15
 80151fc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80151fe:	e005      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8015200:	2300      	movs	r3, #0
 8015202:	61bb      	str	r3, [r7, #24]
      break;
 8015204:	e002      	b.n	801520c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8015206:	4b07      	ldr	r3, [pc, #28]	@ (8015224 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8015208:	61bb      	str	r3, [r7, #24]
      break;
 801520a:	bf00      	nop
  }

  return sysclockfreq;
 801520c:	69bb      	ldr	r3, [r7, #24]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3724      	adds	r7, #36	@ 0x24
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr
 801521a:	bf00      	nop
 801521c:	58024400 	.word	0x58024400
 8015220:	03d09000 	.word	0x03d09000
 8015224:	003d0900 	.word	0x003d0900
 8015228:	017d7840 	.word	0x017d7840
 801522c:	46000000 	.word	0x46000000
 8015230:	4c742400 	.word	0x4c742400
 8015234:	4a742400 	.word	0x4a742400
 8015238:	4bbebc20 	.word	0x4bbebc20

0801523c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b082      	sub	sp, #8
 8015240:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015242:	f7ff fe81 	bl	8014f48 <HAL_RCC_GetSysClockFreq>
 8015246:	4602      	mov	r2, r0
 8015248:	4b10      	ldr	r3, [pc, #64]	@ (801528c <HAL_RCC_GetHCLKFreq+0x50>)
 801524a:	699b      	ldr	r3, [r3, #24]
 801524c:	0a1b      	lsrs	r3, r3, #8
 801524e:	f003 030f 	and.w	r3, r3, #15
 8015252:	490f      	ldr	r1, [pc, #60]	@ (8015290 <HAL_RCC_GetHCLKFreq+0x54>)
 8015254:	5ccb      	ldrb	r3, [r1, r3]
 8015256:	f003 031f 	and.w	r3, r3, #31
 801525a:	fa22 f303 	lsr.w	r3, r2, r3
 801525e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015260:	4b0a      	ldr	r3, [pc, #40]	@ (801528c <HAL_RCC_GetHCLKFreq+0x50>)
 8015262:	699b      	ldr	r3, [r3, #24]
 8015264:	f003 030f 	and.w	r3, r3, #15
 8015268:	4a09      	ldr	r2, [pc, #36]	@ (8015290 <HAL_RCC_GetHCLKFreq+0x54>)
 801526a:	5cd3      	ldrb	r3, [r2, r3]
 801526c:	f003 031f 	and.w	r3, r3, #31
 8015270:	687a      	ldr	r2, [r7, #4]
 8015272:	fa22 f303 	lsr.w	r3, r2, r3
 8015276:	4a07      	ldr	r2, [pc, #28]	@ (8015294 <HAL_RCC_GetHCLKFreq+0x58>)
 8015278:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801527a:	4a07      	ldr	r2, [pc, #28]	@ (8015298 <HAL_RCC_GetHCLKFreq+0x5c>)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015280:	4b04      	ldr	r3, [pc, #16]	@ (8015294 <HAL_RCC_GetHCLKFreq+0x58>)
 8015282:	681b      	ldr	r3, [r3, #0]
}
 8015284:	4618      	mov	r0, r3
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	58024400 	.word	0x58024400
 8015290:	0802d808 	.word	0x0802d808
 8015294:	2400001c 	.word	0x2400001c
 8015298:	24000018 	.word	0x24000018

0801529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80152a0:	f7ff ffcc 	bl	801523c <HAL_RCC_GetHCLKFreq>
 80152a4:	4602      	mov	r2, r0
 80152a6:	4b06      	ldr	r3, [pc, #24]	@ (80152c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80152a8:	69db      	ldr	r3, [r3, #28]
 80152aa:	091b      	lsrs	r3, r3, #4
 80152ac:	f003 0307 	and.w	r3, r3, #7
 80152b0:	4904      	ldr	r1, [pc, #16]	@ (80152c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80152b2:	5ccb      	ldrb	r3, [r1, r3]
 80152b4:	f003 031f 	and.w	r3, r3, #31
 80152b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80152bc:	4618      	mov	r0, r3
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	58024400 	.word	0x58024400
 80152c4:	0802d808 	.word	0x0802d808

080152c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80152cc:	f7ff ffb6 	bl	801523c <HAL_RCC_GetHCLKFreq>
 80152d0:	4602      	mov	r2, r0
 80152d2:	4b06      	ldr	r3, [pc, #24]	@ (80152ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80152d4:	69db      	ldr	r3, [r3, #28]
 80152d6:	0a1b      	lsrs	r3, r3, #8
 80152d8:	f003 0307 	and.w	r3, r3, #7
 80152dc:	4904      	ldr	r1, [pc, #16]	@ (80152f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80152de:	5ccb      	ldrb	r3, [r1, r3]
 80152e0:	f003 031f 	and.w	r3, r3, #31
 80152e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	bd80      	pop	{r7, pc}
 80152ec:	58024400 	.word	0x58024400
 80152f0:	0802d808 	.word	0x0802d808

080152f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80152f4:	b480      	push	{r7}
 80152f6:	b083      	sub	sp, #12
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	223f      	movs	r2, #63	@ 0x3f
 8015302:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015304:	4b1a      	ldr	r3, [pc, #104]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 8015306:	691b      	ldr	r3, [r3, #16]
 8015308:	f003 0207 	and.w	r2, r3, #7
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8015310:	4b17      	ldr	r3, [pc, #92]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 8015312:	699b      	ldr	r3, [r3, #24]
 8015314:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 801531c:	4b14      	ldr	r3, [pc, #80]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 801531e:	699b      	ldr	r3, [r3, #24]
 8015320:	f003 020f 	and.w	r2, r3, #15
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8015328:	4b11      	ldr	r3, [pc, #68]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 801532a:	699b      	ldr	r3, [r3, #24]
 801532c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8015334:	4b0e      	ldr	r3, [pc, #56]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 8015336:	69db      	ldr	r3, [r3, #28]
 8015338:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8015340:	4b0b      	ldr	r3, [pc, #44]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 8015342:	69db      	ldr	r3, [r3, #28]
 8015344:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 801534c:	4b08      	ldr	r3, [pc, #32]	@ (8015370 <HAL_RCC_GetClockConfig+0x7c>)
 801534e:	6a1b      	ldr	r3, [r3, #32]
 8015350:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015358:	4b06      	ldr	r3, [pc, #24]	@ (8015374 <HAL_RCC_GetClockConfig+0x80>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	f003 020f 	and.w	r2, r3, #15
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	601a      	str	r2, [r3, #0]
}
 8015364:	bf00      	nop
 8015366:	370c      	adds	r7, #12
 8015368:	46bd      	mov	sp, r7
 801536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536e:	4770      	bx	lr
 8015370:	58024400 	.word	0x58024400
 8015374:	52002000 	.word	0x52002000

08015378 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801537c:	b0ca      	sub	sp, #296	@ 0x128
 801537e:	af00      	add	r7, sp, #0
 8015380:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015384:	2300      	movs	r3, #0
 8015386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801538a:	2300      	movs	r3, #0
 801538c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015398:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801539c:	2500      	movs	r5, #0
 801539e:	ea54 0305 	orrs.w	r3, r4, r5
 80153a2:	d049      	beq.n	8015438 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80153a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80153aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80153ae:	d02f      	beq.n	8015410 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80153b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80153b4:	d828      	bhi.n	8015408 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80153b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80153ba:	d01a      	beq.n	80153f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80153bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80153c0:	d822      	bhi.n	8015408 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d003      	beq.n	80153ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80153c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80153ca:	d007      	beq.n	80153dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80153cc:	e01c      	b.n	8015408 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80153ce:	4bb8      	ldr	r3, [pc, #736]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153d2:	4ab7      	ldr	r2, [pc, #732]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80153d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80153d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80153da:	e01a      	b.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80153dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153e0:	3308      	adds	r3, #8
 80153e2:	2102      	movs	r1, #2
 80153e4:	4618      	mov	r0, r3
 80153e6:	f001 f9d1 	bl	801678c <RCCEx_PLL2_Config>
 80153ea:	4603      	mov	r3, r0
 80153ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80153f0:	e00f      	b.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80153f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80153f6:	3328      	adds	r3, #40	@ 0x28
 80153f8:	2102      	movs	r1, #2
 80153fa:	4618      	mov	r0, r3
 80153fc:	f001 fa78 	bl	80168f0 <RCCEx_PLL3_Config>
 8015400:	4603      	mov	r3, r0
 8015402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8015406:	e004      	b.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015408:	2301      	movs	r3, #1
 801540a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801540e:	e000      	b.n	8015412 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8015410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015416:	2b00      	cmp	r3, #0
 8015418:	d10a      	bne.n	8015430 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801541a:	4ba5      	ldr	r3, [pc, #660]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801541c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801541e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8015422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015428:	4aa1      	ldr	r2, [pc, #644]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801542a:	430b      	orrs	r3, r1
 801542c:	6513      	str	r3, [r2, #80]	@ 0x50
 801542e:	e003      	b.n	8015438 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015440:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8015444:	f04f 0900 	mov.w	r9, #0
 8015448:	ea58 0309 	orrs.w	r3, r8, r9
 801544c:	d047      	beq.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801544e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015454:	2b04      	cmp	r3, #4
 8015456:	d82a      	bhi.n	80154ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8015458:	a201      	add	r2, pc, #4	@ (adr r2, 8015460 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545e:	bf00      	nop
 8015460:	08015475 	.word	0x08015475
 8015464:	08015483 	.word	0x08015483
 8015468:	08015499 	.word	0x08015499
 801546c:	080154b7 	.word	0x080154b7
 8015470:	080154b7 	.word	0x080154b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015474:	4b8e      	ldr	r3, [pc, #568]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015478:	4a8d      	ldr	r2, [pc, #564]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801547a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801547e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015480:	e01a      	b.n	80154b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015486:	3308      	adds	r3, #8
 8015488:	2100      	movs	r1, #0
 801548a:	4618      	mov	r0, r3
 801548c:	f001 f97e 	bl	801678c <RCCEx_PLL2_Config>
 8015490:	4603      	mov	r3, r0
 8015492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8015496:	e00f      	b.n	80154b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801549c:	3328      	adds	r3, #40	@ 0x28
 801549e:	2100      	movs	r1, #0
 80154a0:	4618      	mov	r0, r3
 80154a2:	f001 fa25 	bl	80168f0 <RCCEx_PLL3_Config>
 80154a6:	4603      	mov	r3, r0
 80154a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80154ac:	e004      	b.n	80154b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80154ae:	2301      	movs	r3, #1
 80154b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80154b4:	e000      	b.n	80154b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80154b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80154b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d10a      	bne.n	80154d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80154c0:	4b7b      	ldr	r3, [pc, #492]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80154c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80154c4:	f023 0107 	bic.w	r1, r3, #7
 80154c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80154ce:	4a78      	ldr	r2, [pc, #480]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80154d0:	430b      	orrs	r3, r1
 80154d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80154d4:	e003      	b.n	80154de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80154d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80154da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80154de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80154ea:	f04f 0b00 	mov.w	fp, #0
 80154ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80154f2:	d04c      	beq.n	801558e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80154f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80154f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80154fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80154fe:	d030      	beq.n	8015562 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8015500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015504:	d829      	bhi.n	801555a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015506:	2bc0      	cmp	r3, #192	@ 0xc0
 8015508:	d02d      	beq.n	8015566 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801550a:	2bc0      	cmp	r3, #192	@ 0xc0
 801550c:	d825      	bhi.n	801555a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801550e:	2b80      	cmp	r3, #128	@ 0x80
 8015510:	d018      	beq.n	8015544 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8015512:	2b80      	cmp	r3, #128	@ 0x80
 8015514:	d821      	bhi.n	801555a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015516:	2b00      	cmp	r3, #0
 8015518:	d002      	beq.n	8015520 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801551a:	2b40      	cmp	r3, #64	@ 0x40
 801551c:	d007      	beq.n	801552e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801551e:	e01c      	b.n	801555a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015520:	4b63      	ldr	r3, [pc, #396]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015524:	4a62      	ldr	r2, [pc, #392]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801552a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801552c:	e01c      	b.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015532:	3308      	adds	r3, #8
 8015534:	2100      	movs	r1, #0
 8015536:	4618      	mov	r0, r3
 8015538:	f001 f928 	bl	801678c <RCCEx_PLL2_Config>
 801553c:	4603      	mov	r3, r0
 801553e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015542:	e011      	b.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015548:	3328      	adds	r3, #40	@ 0x28
 801554a:	2100      	movs	r1, #0
 801554c:	4618      	mov	r0, r3
 801554e:	f001 f9cf 	bl	80168f0 <RCCEx_PLL3_Config>
 8015552:	4603      	mov	r3, r0
 8015554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8015558:	e006      	b.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801555a:	2301      	movs	r3, #1
 801555c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015560:	e002      	b.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8015562:	bf00      	nop
 8015564:	e000      	b.n	8015568 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8015566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801556c:	2b00      	cmp	r3, #0
 801556e:	d10a      	bne.n	8015586 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015570:	4b4f      	ldr	r3, [pc, #316]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015574:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8015578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801557e:	4a4c      	ldr	r2, [pc, #304]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015580:	430b      	orrs	r3, r1
 8015582:	6513      	str	r3, [r2, #80]	@ 0x50
 8015584:	e003      	b.n	801558e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801558a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801558e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015596:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801559a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801559e:	2300      	movs	r3, #0
 80155a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80155a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80155a8:	460b      	mov	r3, r1
 80155aa:	4313      	orrs	r3, r2
 80155ac:	d053      	beq.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80155ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80155b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80155ba:	d035      	beq.n	8015628 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80155bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80155c0:	d82e      	bhi.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80155c2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80155c6:	d031      	beq.n	801562c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80155c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80155cc:	d828      	bhi.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80155ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80155d2:	d01a      	beq.n	801560a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80155d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80155d8:	d822      	bhi.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d003      	beq.n	80155e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80155de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80155e2:	d007      	beq.n	80155f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80155e4:	e01c      	b.n	8015620 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80155e6:	4b32      	ldr	r3, [pc, #200]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ea:	4a31      	ldr	r2, [pc, #196]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80155ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80155f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80155f2:	e01c      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80155f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80155f8:	3308      	adds	r3, #8
 80155fa:	2100      	movs	r1, #0
 80155fc:	4618      	mov	r0, r3
 80155fe:	f001 f8c5 	bl	801678c <RCCEx_PLL2_Config>
 8015602:	4603      	mov	r3, r0
 8015604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8015608:	e011      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801560e:	3328      	adds	r3, #40	@ 0x28
 8015610:	2100      	movs	r1, #0
 8015612:	4618      	mov	r0, r3
 8015614:	f001 f96c 	bl	80168f0 <RCCEx_PLL3_Config>
 8015618:	4603      	mov	r3, r0
 801561a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801561e:	e006      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8015620:	2301      	movs	r3, #1
 8015622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015626:	e002      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8015628:	bf00      	nop
 801562a:	e000      	b.n	801562e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801562c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801562e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015632:	2b00      	cmp	r3, #0
 8015634:	d10b      	bne.n	801564e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015636:	4b1e      	ldr	r3, [pc, #120]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801563a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801563e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015642:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015646:	4a1a      	ldr	r2, [pc, #104]	@ (80156b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8015648:	430b      	orrs	r3, r1
 801564a:	6593      	str	r3, [r2, #88]	@ 0x58
 801564c:	e003      	b.n	8015656 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801564e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801565e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8015662:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8015666:	2300      	movs	r3, #0
 8015668:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801566c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8015670:	460b      	mov	r3, r1
 8015672:	4313      	orrs	r3, r2
 8015674:	d056      	beq.n	8015724 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8015676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801567a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801567e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015682:	d038      	beq.n	80156f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8015684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8015688:	d831      	bhi.n	80156ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 801568a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801568e:	d034      	beq.n	80156fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8015690:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8015694:	d82b      	bhi.n	80156ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015696:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801569a:	d01d      	beq.n	80156d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801569c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80156a0:	d825      	bhi.n	80156ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d006      	beq.n	80156b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80156a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80156aa:	d00a      	beq.n	80156c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80156ac:	e01f      	b.n	80156ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80156ae:	bf00      	nop
 80156b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80156b4:	4ba2      	ldr	r3, [pc, #648]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80156b8:	4aa1      	ldr	r2, [pc, #644]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80156ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80156be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80156c0:	e01c      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80156c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156c6:	3308      	adds	r3, #8
 80156c8:	2100      	movs	r1, #0
 80156ca:	4618      	mov	r0, r3
 80156cc:	f001 f85e 	bl	801678c <RCCEx_PLL2_Config>
 80156d0:	4603      	mov	r3, r0
 80156d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80156d6:	e011      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80156d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80156dc:	3328      	adds	r3, #40	@ 0x28
 80156de:	2100      	movs	r1, #0
 80156e0:	4618      	mov	r0, r3
 80156e2:	f001 f905 	bl	80168f0 <RCCEx_PLL3_Config>
 80156e6:	4603      	mov	r3, r0
 80156e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80156ec:	e006      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80156ee:	2301      	movs	r3, #1
 80156f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80156f4:	e002      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80156f6:	bf00      	nop
 80156f8:	e000      	b.n	80156fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80156fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80156fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015700:	2b00      	cmp	r3, #0
 8015702:	d10b      	bne.n	801571c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015704:	4b8e      	ldr	r3, [pc, #568]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015708:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015710:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8015714:	4a8a      	ldr	r2, [pc, #552]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015716:	430b      	orrs	r3, r1
 8015718:	6593      	str	r3, [r2, #88]	@ 0x58
 801571a:	e003      	b.n	8015724 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801571c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015720:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8015730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8015734:	2300      	movs	r3, #0
 8015736:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801573a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801573e:	460b      	mov	r3, r1
 8015740:	4313      	orrs	r3, r2
 8015742:	d03a      	beq.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8015744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801574a:	2b30      	cmp	r3, #48	@ 0x30
 801574c:	d01f      	beq.n	801578e <HAL_RCCEx_PeriphCLKConfig+0x416>
 801574e:	2b30      	cmp	r3, #48	@ 0x30
 8015750:	d819      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8015752:	2b20      	cmp	r3, #32
 8015754:	d00c      	beq.n	8015770 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8015756:	2b20      	cmp	r3, #32
 8015758:	d815      	bhi.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801575a:	2b00      	cmp	r3, #0
 801575c:	d019      	beq.n	8015792 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801575e:	2b10      	cmp	r3, #16
 8015760:	d111      	bne.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015762:	4b77      	ldr	r3, [pc, #476]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015766:	4a76      	ldr	r2, [pc, #472]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801576c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801576e:	e011      	b.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015774:	3308      	adds	r3, #8
 8015776:	2102      	movs	r1, #2
 8015778:	4618      	mov	r0, r3
 801577a:	f001 f807 	bl	801678c <RCCEx_PLL2_Config>
 801577e:	4603      	mov	r3, r0
 8015780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8015784:	e006      	b.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015786:	2301      	movs	r3, #1
 8015788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801578c:	e002      	b.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801578e:	bf00      	nop
 8015790:	e000      	b.n	8015794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8015792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015798:	2b00      	cmp	r3, #0
 801579a:	d10a      	bne.n	80157b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801579c:	4b68      	ldr	r3, [pc, #416]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801579e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157a0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80157a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80157aa:	4a65      	ldr	r2, [pc, #404]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80157ac:	430b      	orrs	r3, r1
 80157ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80157b0:	e003      	b.n	80157ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80157b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80157ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80157c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80157ca:	2300      	movs	r3, #0
 80157cc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80157d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80157d4:	460b      	mov	r3, r1
 80157d6:	4313      	orrs	r3, r2
 80157d8:	d051      	beq.n	801587e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80157da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80157de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80157e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157e4:	d035      	beq.n	8015852 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80157e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80157ea:	d82e      	bhi.n	801584a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80157ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80157f0:	d031      	beq.n	8015856 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80157f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80157f6:	d828      	bhi.n	801584a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80157f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80157fc:	d01a      	beq.n	8015834 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80157fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015802:	d822      	bhi.n	801584a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8015804:	2b00      	cmp	r3, #0
 8015806:	d003      	beq.n	8015810 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8015808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801580c:	d007      	beq.n	801581e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801580e:	e01c      	b.n	801584a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015810:	4b4b      	ldr	r3, [pc, #300]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015814:	4a4a      	ldr	r2, [pc, #296]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801581a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801581c:	e01c      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015822:	3308      	adds	r3, #8
 8015824:	2100      	movs	r1, #0
 8015826:	4618      	mov	r0, r3
 8015828:	f000 ffb0 	bl	801678c <RCCEx_PLL2_Config>
 801582c:	4603      	mov	r3, r0
 801582e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015832:	e011      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015838:	3328      	adds	r3, #40	@ 0x28
 801583a:	2100      	movs	r1, #0
 801583c:	4618      	mov	r0, r3
 801583e:	f001 f857 	bl	80168f0 <RCCEx_PLL3_Config>
 8015842:	4603      	mov	r3, r0
 8015844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8015848:	e006      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801584a:	2301      	movs	r3, #1
 801584c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015850:	e002      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015852:	bf00      	nop
 8015854:	e000      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8015856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801585c:	2b00      	cmp	r3, #0
 801585e:	d10a      	bne.n	8015876 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015860:	4b37      	ldr	r3, [pc, #220]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015864:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8015868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801586c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801586e:	4a34      	ldr	r2, [pc, #208]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015870:	430b      	orrs	r3, r1
 8015872:	6513      	str	r3, [r2, #80]	@ 0x50
 8015874:	e003      	b.n	801587e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801587a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801587e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015886:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801588a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801588e:	2300      	movs	r3, #0
 8015890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8015894:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8015898:	460b      	mov	r3, r1
 801589a:	4313      	orrs	r3, r2
 801589c:	d056      	beq.n	801594c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801589e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80158a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80158a8:	d033      	beq.n	8015912 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80158aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80158ae:	d82c      	bhi.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80158b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80158b4:	d02f      	beq.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80158b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80158ba:	d826      	bhi.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80158bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80158c0:	d02b      	beq.n	801591a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80158c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80158c6:	d820      	bhi.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80158c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80158cc:	d012      	beq.n	80158f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80158ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80158d2:	d81a      	bhi.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d022      	beq.n	801591e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80158d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80158dc:	d115      	bne.n	801590a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80158de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158e2:	3308      	adds	r3, #8
 80158e4:	2101      	movs	r1, #1
 80158e6:	4618      	mov	r0, r3
 80158e8:	f000 ff50 	bl	801678c <RCCEx_PLL2_Config>
 80158ec:	4603      	mov	r3, r0
 80158ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80158f2:	e015      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80158f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158f8:	3328      	adds	r3, #40	@ 0x28
 80158fa:	2101      	movs	r1, #1
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 fff7 	bl	80168f0 <RCCEx_PLL3_Config>
 8015902:	4603      	mov	r3, r0
 8015904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8015908:	e00a      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801590a:	2301      	movs	r3, #1
 801590c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015910:	e006      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015912:	bf00      	nop
 8015914:	e004      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8015916:	bf00      	nop
 8015918:	e002      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801591a:	bf00      	nop
 801591c:	e000      	b.n	8015920 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801591e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10d      	bne.n	8015944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015928:	4b05      	ldr	r3, [pc, #20]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801592a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801592c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8015930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015934:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015936:	4a02      	ldr	r2, [pc, #8]	@ (8015940 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8015938:	430b      	orrs	r3, r1
 801593a:	6513      	str	r3, [r2, #80]	@ 0x50
 801593c:	e006      	b.n	801594c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801593e:	bf00      	nop
 8015940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015954:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8015958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801595c:	2300      	movs	r3, #0
 801595e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8015962:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8015966:	460b      	mov	r3, r1
 8015968:	4313      	orrs	r3, r2
 801596a:	d055      	beq.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015978:	d033      	beq.n	80159e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801597a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801597e:	d82c      	bhi.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015984:	d02f      	beq.n	80159e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8015986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801598a:	d826      	bhi.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x662>
 801598c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015990:	d02b      	beq.n	80159ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8015992:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015996:	d820      	bhi.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8015998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801599c:	d012      	beq.n	80159c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801599e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80159a2:	d81a      	bhi.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d022      	beq.n	80159ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80159a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80159ac:	d115      	bne.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80159ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159b2:	3308      	adds	r3, #8
 80159b4:	2101      	movs	r1, #1
 80159b6:	4618      	mov	r0, r3
 80159b8:	f000 fee8 	bl	801678c <RCCEx_PLL2_Config>
 80159bc:	4603      	mov	r3, r0
 80159be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80159c2:	e015      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80159c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159c8:	3328      	adds	r3, #40	@ 0x28
 80159ca:	2101      	movs	r1, #1
 80159cc:	4618      	mov	r0, r3
 80159ce:	f000 ff8f 	bl	80168f0 <RCCEx_PLL3_Config>
 80159d2:	4603      	mov	r3, r0
 80159d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80159d8:	e00a      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80159da:	2301      	movs	r3, #1
 80159dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80159e0:	e006      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80159e2:	bf00      	nop
 80159e4:	e004      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80159e6:	bf00      	nop
 80159e8:	e002      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80159ea:	bf00      	nop
 80159ec:	e000      	b.n	80159f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80159ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80159f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d10b      	bne.n	8015a10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80159f8:	4ba3      	ldr	r3, [pc, #652]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80159fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80159fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8015a08:	4a9f      	ldr	r2, [pc, #636]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a0a:	430b      	orrs	r3, r1
 8015a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8015a0e:	e003      	b.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a20:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8015a24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8015a28:	2300      	movs	r3, #0
 8015a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8015a2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8015a32:	460b      	mov	r3, r1
 8015a34:	4313      	orrs	r3, r2
 8015a36:	d037      	beq.n	8015aa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8015a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a42:	d00e      	beq.n	8015a62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8015a44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015a48:	d816      	bhi.n	8015a78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d018      	beq.n	8015a80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8015a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015a52:	d111      	bne.n	8015a78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a54:	4b8c      	ldr	r3, [pc, #560]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a58:	4a8b      	ldr	r2, [pc, #556]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015a60:	e00f      	b.n	8015a82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a66:	3308      	adds	r3, #8
 8015a68:	2101      	movs	r1, #1
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f000 fe8e 	bl	801678c <RCCEx_PLL2_Config>
 8015a70:	4603      	mov	r3, r0
 8015a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8015a76:	e004      	b.n	8015a82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015a78:	2301      	movs	r3, #1
 8015a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015a7e:	e000      	b.n	8015a82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8015a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d10a      	bne.n	8015aa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015a8a:	4b7f      	ldr	r3, [pc, #508]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8015a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015a98:	4a7b      	ldr	r2, [pc, #492]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015a9a:	430b      	orrs	r3, r1
 8015a9c:	6513      	str	r3, [r2, #80]	@ 0x50
 8015a9e:	e003      	b.n	8015aa8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8015ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8015ab8:	2300      	movs	r3, #0
 8015aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015abe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8015ac2:	460b      	mov	r3, r1
 8015ac4:	4313      	orrs	r3, r2
 8015ac6:	d039      	beq.n	8015b3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8015ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015ace:	2b03      	cmp	r3, #3
 8015ad0:	d81c      	bhi.n	8015b0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8015ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8015ad8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8015ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ad8:	08015b15 	.word	0x08015b15
 8015adc:	08015ae9 	.word	0x08015ae9
 8015ae0:	08015af7 	.word	0x08015af7
 8015ae4:	08015b15 	.word	0x08015b15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ae8:	4b67      	ldr	r3, [pc, #412]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aec:	4a66      	ldr	r2, [pc, #408]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8015af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015af4:	e00f      	b.n	8015b16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8015af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015afa:	3308      	adds	r3, #8
 8015afc:	2102      	movs	r1, #2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f000 fe44 	bl	801678c <RCCEx_PLL2_Config>
 8015b04:	4603      	mov	r3, r0
 8015b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8015b0a:	e004      	b.n	8015b16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015b12:	e000      	b.n	8015b16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8015b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d10a      	bne.n	8015b34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015b22:	f023 0103 	bic.w	r1, r3, #3
 8015b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015b2c:	4a56      	ldr	r2, [pc, #344]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015b2e:	430b      	orrs	r3, r1
 8015b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8015b32:	e003      	b.n	8015b3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b44:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8015b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015b52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8015b56:	460b      	mov	r3, r1
 8015b58:	4313      	orrs	r3, r2
 8015b5a:	f000 809f 	beq.w	8015c9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8015c8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	4a4a      	ldr	r2, [pc, #296]	@ (8015c8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8015b68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015b6a:	f7fb f9a9 	bl	8010ec0 <HAL_GetTick>
 8015b6e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015b72:	e00b      	b.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b74:	f7fb f9a4 	bl	8010ec0 <HAL_GetTick>
 8015b78:	4602      	mov	r2, r0
 8015b7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015b7e:	1ad3      	subs	r3, r2, r3
 8015b80:	2b64      	cmp	r3, #100	@ 0x64
 8015b82:	d903      	bls.n	8015b8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8015b84:	2303      	movs	r3, #3
 8015b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015b8a:	e005      	b.n	8015b98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8015c8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d0ed      	beq.n	8015b74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8015b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d179      	bne.n	8015c94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015ba0:	4b39      	ldr	r3, [pc, #228]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015ba2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ba8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015bac:	4053      	eors	r3, r2
 8015bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d015      	beq.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015bb6:	4b34      	ldr	r3, [pc, #208]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015bbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015bc2:	4b31      	ldr	r3, [pc, #196]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015bc6:	4a30      	ldr	r2, [pc, #192]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015bcc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015bce:	4b2e      	ldr	r3, [pc, #184]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8015bd8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015bda:	4a2b      	ldr	r2, [pc, #172]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015be0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015be6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015bee:	d118      	bne.n	8015c22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015bf0:	f7fb f966 	bl	8010ec0 <HAL_GetTick>
 8015bf4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015bf8:	e00d      	b.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015bfa:	f7fb f961 	bl	8010ec0 <HAL_GetTick>
 8015bfe:	4602      	mov	r2, r0
 8015c00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8015c04:	1ad2      	subs	r2, r2, r3
 8015c06:	f241 3388 	movw	r3, #5000	@ 0x1388
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d903      	bls.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8015c0e:	2303      	movs	r3, #3
 8015c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8015c14:	e005      	b.n	8015c22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c16:	4b1c      	ldr	r3, [pc, #112]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015c1a:	f003 0302 	and.w	r3, r3, #2
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d0eb      	beq.n	8015bfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8015c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d129      	bne.n	8015c7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015c36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015c3a:	d10e      	bne.n	8015c5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8015c3c:	4b12      	ldr	r3, [pc, #72]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c3e:	691b      	ldr	r3, [r3, #16]
 8015c40:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8015c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015c4c:	091a      	lsrs	r2, r3, #4
 8015c4e:	4b10      	ldr	r3, [pc, #64]	@ (8015c90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8015c50:	4013      	ands	r3, r2
 8015c52:	4a0d      	ldr	r2, [pc, #52]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c54:	430b      	orrs	r3, r1
 8015c56:	6113      	str	r3, [r2, #16]
 8015c58:	e005      	b.n	8015c66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8015c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c5c:	691b      	ldr	r3, [r3, #16]
 8015c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015c64:	6113      	str	r3, [r2, #16]
 8015c66:	4b08      	ldr	r3, [pc, #32]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c68:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015c6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015c76:	4a04      	ldr	r2, [pc, #16]	@ (8015c88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8015c78:	430b      	orrs	r3, r1
 8015c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8015c7c:	e00e      	b.n	8015c9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8015c86:	e009      	b.n	8015c9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8015c88:	58024400 	.word	0x58024400
 8015c8c:	58024800 	.word	0x58024800
 8015c90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015c98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca4:	f002 0301 	and.w	r3, r2, #1
 8015ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8015cac:	2300      	movs	r3, #0
 8015cae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015cb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8015cb6:	460b      	mov	r3, r1
 8015cb8:	4313      	orrs	r3, r2
 8015cba:	f000 8089 	beq.w	8015dd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8015cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015cc4:	2b28      	cmp	r3, #40	@ 0x28
 8015cc6:	d86b      	bhi.n	8015da0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8015cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8015cd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8015cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cce:	bf00      	nop
 8015cd0:	08015da9 	.word	0x08015da9
 8015cd4:	08015da1 	.word	0x08015da1
 8015cd8:	08015da1 	.word	0x08015da1
 8015cdc:	08015da1 	.word	0x08015da1
 8015ce0:	08015da1 	.word	0x08015da1
 8015ce4:	08015da1 	.word	0x08015da1
 8015ce8:	08015da1 	.word	0x08015da1
 8015cec:	08015da1 	.word	0x08015da1
 8015cf0:	08015d75 	.word	0x08015d75
 8015cf4:	08015da1 	.word	0x08015da1
 8015cf8:	08015da1 	.word	0x08015da1
 8015cfc:	08015da1 	.word	0x08015da1
 8015d00:	08015da1 	.word	0x08015da1
 8015d04:	08015da1 	.word	0x08015da1
 8015d08:	08015da1 	.word	0x08015da1
 8015d0c:	08015da1 	.word	0x08015da1
 8015d10:	08015d8b 	.word	0x08015d8b
 8015d14:	08015da1 	.word	0x08015da1
 8015d18:	08015da1 	.word	0x08015da1
 8015d1c:	08015da1 	.word	0x08015da1
 8015d20:	08015da1 	.word	0x08015da1
 8015d24:	08015da1 	.word	0x08015da1
 8015d28:	08015da1 	.word	0x08015da1
 8015d2c:	08015da1 	.word	0x08015da1
 8015d30:	08015da9 	.word	0x08015da9
 8015d34:	08015da1 	.word	0x08015da1
 8015d38:	08015da1 	.word	0x08015da1
 8015d3c:	08015da1 	.word	0x08015da1
 8015d40:	08015da1 	.word	0x08015da1
 8015d44:	08015da1 	.word	0x08015da1
 8015d48:	08015da1 	.word	0x08015da1
 8015d4c:	08015da1 	.word	0x08015da1
 8015d50:	08015da9 	.word	0x08015da9
 8015d54:	08015da1 	.word	0x08015da1
 8015d58:	08015da1 	.word	0x08015da1
 8015d5c:	08015da1 	.word	0x08015da1
 8015d60:	08015da1 	.word	0x08015da1
 8015d64:	08015da1 	.word	0x08015da1
 8015d68:	08015da1 	.word	0x08015da1
 8015d6c:	08015da1 	.word	0x08015da1
 8015d70:	08015da9 	.word	0x08015da9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d78:	3308      	adds	r3, #8
 8015d7a:	2101      	movs	r1, #1
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f000 fd05 	bl	801678c <RCCEx_PLL2_Config>
 8015d82:	4603      	mov	r3, r0
 8015d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015d88:	e00f      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015d8e:	3328      	adds	r3, #40	@ 0x28
 8015d90:	2101      	movs	r1, #1
 8015d92:	4618      	mov	r0, r3
 8015d94:	f000 fdac 	bl	80168f0 <RCCEx_PLL3_Config>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8015d9e:	e004      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015da0:	2301      	movs	r3, #1
 8015da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015da6:	e000      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8015da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d10a      	bne.n	8015dc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015db2:	4bbf      	ldr	r3, [pc, #764]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015db6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8015dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015dc0:	4abb      	ldr	r2, [pc, #748]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015dc2:	430b      	orrs	r3, r1
 8015dc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8015dc6:	e003      	b.n	8015dd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dd8:	f002 0302 	and.w	r3, r2, #2
 8015ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015de0:	2300      	movs	r3, #0
 8015de2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015de6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8015dea:	460b      	mov	r3, r1
 8015dec:	4313      	orrs	r3, r2
 8015dee:	d041      	beq.n	8015e74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8015df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015df4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015df6:	2b05      	cmp	r3, #5
 8015df8:	d824      	bhi.n	8015e44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8015dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8015e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8015dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e00:	08015e4d 	.word	0x08015e4d
 8015e04:	08015e19 	.word	0x08015e19
 8015e08:	08015e2f 	.word	0x08015e2f
 8015e0c:	08015e4d 	.word	0x08015e4d
 8015e10:	08015e4d 	.word	0x08015e4d
 8015e14:	08015e4d 	.word	0x08015e4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e1c:	3308      	adds	r3, #8
 8015e1e:	2101      	movs	r1, #1
 8015e20:	4618      	mov	r0, r3
 8015e22:	f000 fcb3 	bl	801678c <RCCEx_PLL2_Config>
 8015e26:	4603      	mov	r3, r0
 8015e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015e2c:	e00f      	b.n	8015e4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e32:	3328      	adds	r3, #40	@ 0x28
 8015e34:	2101      	movs	r1, #1
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 fd5a 	bl	80168f0 <RCCEx_PLL3_Config>
 8015e3c:	4603      	mov	r3, r0
 8015e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8015e42:	e004      	b.n	8015e4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015e44:	2301      	movs	r3, #1
 8015e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015e4a:	e000      	b.n	8015e4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8015e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d10a      	bne.n	8015e6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015e56:	4b96      	ldr	r3, [pc, #600]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e5a:	f023 0107 	bic.w	r1, r3, #7
 8015e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e64:	4a92      	ldr	r2, [pc, #584]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015e66:	430b      	orrs	r3, r1
 8015e68:	6553      	str	r3, [r2, #84]	@ 0x54
 8015e6a:	e003      	b.n	8015e74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7c:	f002 0304 	and.w	r3, r2, #4
 8015e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015e84:	2300      	movs	r3, #0
 8015e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8015e8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8015e8e:	460b      	mov	r3, r1
 8015e90:	4313      	orrs	r3, r2
 8015e92:	d044      	beq.n	8015f1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8015e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015e9c:	2b05      	cmp	r3, #5
 8015e9e:	d825      	bhi.n	8015eec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8015ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8015ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8015ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ea6:	bf00      	nop
 8015ea8:	08015ef5 	.word	0x08015ef5
 8015eac:	08015ec1 	.word	0x08015ec1
 8015eb0:	08015ed7 	.word	0x08015ed7
 8015eb4:	08015ef5 	.word	0x08015ef5
 8015eb8:	08015ef5 	.word	0x08015ef5
 8015ebc:	08015ef5 	.word	0x08015ef5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8015ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015ec4:	3308      	adds	r3, #8
 8015ec6:	2101      	movs	r1, #1
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f000 fc5f 	bl	801678c <RCCEx_PLL2_Config>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015ed4:	e00f      	b.n	8015ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8015ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015eda:	3328      	adds	r3, #40	@ 0x28
 8015edc:	2101      	movs	r1, #1
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f000 fd06 	bl	80168f0 <RCCEx_PLL3_Config>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8015eea:	e004      	b.n	8015ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015eec:	2301      	movs	r3, #1
 8015eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015ef2:	e000      	b.n	8015ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8015ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d10b      	bne.n	8015f16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015efe:	4b6c      	ldr	r3, [pc, #432]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015f02:	f023 0107 	bic.w	r1, r3, #7
 8015f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8015f0e:	4a68      	ldr	r2, [pc, #416]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015f10:	430b      	orrs	r3, r1
 8015f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8015f14:	e003      	b.n	8015f1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f26:	f002 0320 	and.w	r3, r2, #32
 8015f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8015f2e:	2300      	movs	r3, #0
 8015f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8015f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8015f38:	460b      	mov	r3, r1
 8015f3a:	4313      	orrs	r3, r2
 8015f3c:	d055      	beq.n	8015fea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8015f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015f4a:	d033      	beq.n	8015fb4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8015f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8015f50:	d82c      	bhi.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f56:	d02f      	beq.n	8015fb8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8015f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015f5c:	d826      	bhi.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015f62:	d02b      	beq.n	8015fbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8015f64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8015f68:	d820      	bhi.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015f6e:	d012      	beq.n	8015f96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8015f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015f74:	d81a      	bhi.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d022      	beq.n	8015fc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8015f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015f7e:	d115      	bne.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8015f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f84:	3308      	adds	r3, #8
 8015f86:	2100      	movs	r1, #0
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f000 fbff 	bl	801678c <RCCEx_PLL2_Config>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015f94:	e015      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8015f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015f9a:	3328      	adds	r3, #40	@ 0x28
 8015f9c:	2102      	movs	r1, #2
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	f000 fca6 	bl	80168f0 <RCCEx_PLL3_Config>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8015faa:	e00a      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8015fac:	2301      	movs	r3, #1
 8015fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8015fb2:	e006      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015fb4:	bf00      	nop
 8015fb6:	e004      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015fb8:	bf00      	nop
 8015fba:	e002      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015fbc:	bf00      	nop
 8015fbe:	e000      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8015fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8015fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d10b      	bne.n	8015fe2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015fca:	4b39      	ldr	r3, [pc, #228]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015fce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8015fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015fda:	4a35      	ldr	r2, [pc, #212]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8015fdc:	430b      	orrs	r3, r1
 8015fde:	6553      	str	r3, [r2, #84]	@ 0x54
 8015fe0:	e003      	b.n	8015fea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8015fe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ff2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8015ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8016000:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8016004:	460b      	mov	r3, r1
 8016006:	4313      	orrs	r3, r2
 8016008:	d058      	beq.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801600a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801600e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8016012:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8016016:	d033      	beq.n	8016080 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8016018:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801601c:	d82c      	bhi.n	8016078 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801601e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016022:	d02f      	beq.n	8016084 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8016024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016028:	d826      	bhi.n	8016078 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801602a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801602e:	d02b      	beq.n	8016088 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8016030:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016034:	d820      	bhi.n	8016078 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016036:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801603a:	d012      	beq.n	8016062 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801603c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016040:	d81a      	bhi.n	8016078 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8016042:	2b00      	cmp	r3, #0
 8016044:	d022      	beq.n	801608c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8016046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801604a:	d115      	bne.n	8016078 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016050:	3308      	adds	r3, #8
 8016052:	2100      	movs	r1, #0
 8016054:	4618      	mov	r0, r3
 8016056:	f000 fb99 	bl	801678c <RCCEx_PLL2_Config>
 801605a:	4603      	mov	r3, r0
 801605c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016060:	e015      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016066:	3328      	adds	r3, #40	@ 0x28
 8016068:	2102      	movs	r1, #2
 801606a:	4618      	mov	r0, r3
 801606c:	f000 fc40 	bl	80168f0 <RCCEx_PLL3_Config>
 8016070:	4603      	mov	r3, r0
 8016072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8016076:	e00a      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016078:	2301      	movs	r3, #1
 801607a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801607e:	e006      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016080:	bf00      	nop
 8016082:	e004      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016084:	bf00      	nop
 8016086:	e002      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8016088:	bf00      	nop
 801608a:	e000      	b.n	801608e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801608c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801608e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016092:	2b00      	cmp	r3, #0
 8016094:	d10e      	bne.n	80160b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8016096:	4b06      	ldr	r3, [pc, #24]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8016098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801609a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80160a6:	4a02      	ldr	r2, [pc, #8]	@ (80160b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80160a8:	430b      	orrs	r3, r1
 80160aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80160ac:	e006      	b.n	80160bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80160ae:	bf00      	nop
 80160b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80160b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80160bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80160c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80160cc:	2300      	movs	r3, #0
 80160ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80160d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80160d6:	460b      	mov	r3, r1
 80160d8:	4313      	orrs	r3, r2
 80160da:	d055      	beq.n	8016188 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80160dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80160e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80160e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80160e8:	d033      	beq.n	8016152 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80160ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80160ee:	d82c      	bhi.n	801614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80160f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80160f4:	d02f      	beq.n	8016156 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80160f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80160fa:	d826      	bhi.n	801614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80160fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8016100:	d02b      	beq.n	801615a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8016102:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8016106:	d820      	bhi.n	801614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016108:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801610c:	d012      	beq.n	8016134 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801610e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016112:	d81a      	bhi.n	801614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8016114:	2b00      	cmp	r3, #0
 8016116:	d022      	beq.n	801615e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8016118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801611c:	d115      	bne.n	801614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801611e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016122:	3308      	adds	r3, #8
 8016124:	2100      	movs	r1, #0
 8016126:	4618      	mov	r0, r3
 8016128:	f000 fb30 	bl	801678c <RCCEx_PLL2_Config>
 801612c:	4603      	mov	r3, r0
 801612e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8016132:	e015      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8016134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016138:	3328      	adds	r3, #40	@ 0x28
 801613a:	2102      	movs	r1, #2
 801613c:	4618      	mov	r0, r3
 801613e:	f000 fbd7 	bl	80168f0 <RCCEx_PLL3_Config>
 8016142:	4603      	mov	r3, r0
 8016144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8016148:	e00a      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801614a:	2301      	movs	r3, #1
 801614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8016150:	e006      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8016152:	bf00      	nop
 8016154:	e004      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8016156:	bf00      	nop
 8016158:	e002      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801615a:	bf00      	nop
 801615c:	e000      	b.n	8016160 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801615e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016164:	2b00      	cmp	r3, #0
 8016166:	d10b      	bne.n	8016180 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016168:	4ba1      	ldr	r3, [pc, #644]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801616a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801616c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8016170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016178:	4a9d      	ldr	r2, [pc, #628]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801617a:	430b      	orrs	r3, r1
 801617c:	6593      	str	r3, [r2, #88]	@ 0x58
 801617e:	e003      	b.n	8016188 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016184:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8016188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016190:	f002 0308 	and.w	r3, r2, #8
 8016194:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8016198:	2300      	movs	r3, #0
 801619a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801619e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80161a2:	460b      	mov	r3, r1
 80161a4:	4313      	orrs	r3, r2
 80161a6:	d01e      	beq.n	80161e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80161a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80161b4:	d10c      	bne.n	80161d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80161b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161ba:	3328      	adds	r3, #40	@ 0x28
 80161bc:	2102      	movs	r1, #2
 80161be:	4618      	mov	r0, r3
 80161c0:	f000 fb96 	bl	80168f0 <RCCEx_PLL3_Config>
 80161c4:	4603      	mov	r3, r0
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d002      	beq.n	80161d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80161ca:	2301      	movs	r3, #1
 80161cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80161d0:	4b87      	ldr	r3, [pc, #540]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80161d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80161d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80161e0:	4a83      	ldr	r2, [pc, #524]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80161e2:	430b      	orrs	r3, r1
 80161e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80161e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	f002 0310 	and.w	r3, r2, #16
 80161f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80161f6:	2300      	movs	r3, #0
 80161f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80161fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8016200:	460b      	mov	r3, r1
 8016202:	4313      	orrs	r3, r2
 8016204:	d01e      	beq.n	8016244 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8016206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801620a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801620e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016212:	d10c      	bne.n	801622e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016218:	3328      	adds	r3, #40	@ 0x28
 801621a:	2102      	movs	r1, #2
 801621c:	4618      	mov	r0, r3
 801621e:	f000 fb67 	bl	80168f0 <RCCEx_PLL3_Config>
 8016222:	4603      	mov	r3, r0
 8016224:	2b00      	cmp	r3, #0
 8016226:	d002      	beq.n	801622e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8016228:	2301      	movs	r3, #1
 801622a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801622e:	4b70      	ldr	r3, [pc, #448]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016232:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8016236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801623a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801623e:	4a6c      	ldr	r2, [pc, #432]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016240:	430b      	orrs	r3, r1
 8016242:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8016250:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8016254:	2300      	movs	r3, #0
 8016256:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801625a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801625e:	460b      	mov	r3, r1
 8016260:	4313      	orrs	r3, r2
 8016262:	d03e      	beq.n	80162e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8016264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016268:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801626c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016270:	d022      	beq.n	80162b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8016272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016276:	d81b      	bhi.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8016278:	2b00      	cmp	r3, #0
 801627a:	d003      	beq.n	8016284 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801627c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016280:	d00b      	beq.n	801629a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8016282:	e015      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8016284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016288:	3308      	adds	r3, #8
 801628a:	2100      	movs	r1, #0
 801628c:	4618      	mov	r0, r3
 801628e:	f000 fa7d 	bl	801678c <RCCEx_PLL2_Config>
 8016292:	4603      	mov	r3, r0
 8016294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8016298:	e00f      	b.n	80162ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801629a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801629e:	3328      	adds	r3, #40	@ 0x28
 80162a0:	2102      	movs	r1, #2
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 fb24 	bl	80168f0 <RCCEx_PLL3_Config>
 80162a8:	4603      	mov	r3, r0
 80162aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80162ae:	e004      	b.n	80162ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80162b0:	2301      	movs	r3, #1
 80162b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80162b6:	e000      	b.n	80162ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80162b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80162ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d10b      	bne.n	80162da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80162c2:	4b4b      	ldr	r3, [pc, #300]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80162c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80162ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80162d2:	4a47      	ldr	r2, [pc, #284]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80162d4:	430b      	orrs	r3, r1
 80162d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80162d8:	e003      	b.n	80162e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80162de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80162e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80162e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80162ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80162f0:	2300      	movs	r3, #0
 80162f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80162f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80162f8:	460b      	mov	r3, r1
 80162fa:	4313      	orrs	r3, r2
 80162fc:	d03b      	beq.n	8016376 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80162fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801630a:	d01f      	beq.n	801634c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801630c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8016310:	d818      	bhi.n	8016344 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8016312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016316:	d003      	beq.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8016318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801631c:	d007      	beq.n	801632e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801631e:	e011      	b.n	8016344 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016320:	4b33      	ldr	r3, [pc, #204]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016324:	4a32      	ldr	r2, [pc, #200]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801632a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801632c:	e00f      	b.n	801634e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016332:	3328      	adds	r3, #40	@ 0x28
 8016334:	2101      	movs	r1, #1
 8016336:	4618      	mov	r0, r3
 8016338:	f000 fada 	bl	80168f0 <RCCEx_PLL3_Config>
 801633c:	4603      	mov	r3, r0
 801633e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8016342:	e004      	b.n	801634e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016344:	2301      	movs	r3, #1
 8016346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801634a:	e000      	b.n	801634e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801634c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801634e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016352:	2b00      	cmp	r3, #0
 8016354:	d10b      	bne.n	801636e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016356:	4b26      	ldr	r3, [pc, #152]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801635a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016366:	4a22      	ldr	r2, [pc, #136]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8016368:	430b      	orrs	r3, r1
 801636a:	6553      	str	r3, [r2, #84]	@ 0x54
 801636c:	e003      	b.n	8016376 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801636e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8016382:	673b      	str	r3, [r7, #112]	@ 0x70
 8016384:	2300      	movs	r3, #0
 8016386:	677b      	str	r3, [r7, #116]	@ 0x74
 8016388:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801638c:	460b      	mov	r3, r1
 801638e:	4313      	orrs	r3, r2
 8016390:	d034      	beq.n	80163fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8016392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016398:	2b00      	cmp	r3, #0
 801639a:	d003      	beq.n	80163a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801639c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80163a0:	d007      	beq.n	80163b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80163a2:	e011      	b.n	80163c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80163a4:	4b12      	ldr	r3, [pc, #72]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163a8:	4a11      	ldr	r2, [pc, #68]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80163ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80163b0:	e00e      	b.n	80163d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80163b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163b6:	3308      	adds	r3, #8
 80163b8:	2102      	movs	r1, #2
 80163ba:	4618      	mov	r0, r3
 80163bc:	f000 f9e6 	bl	801678c <RCCEx_PLL2_Config>
 80163c0:	4603      	mov	r3, r0
 80163c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80163c6:	e003      	b.n	80163d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80163c8:	2301      	movs	r3, #1
 80163ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80163ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80163d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d10d      	bne.n	80163f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80163d8:	4b05      	ldr	r3, [pc, #20]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163dc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80163e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80163e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80163e6:	4a02      	ldr	r2, [pc, #8]	@ (80163f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80163e8:	430b      	orrs	r3, r1
 80163ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80163ec:	e006      	b.n	80163fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80163ee:	bf00      	nop
 80163f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80163f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80163f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80163fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016404:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8016408:	66bb      	str	r3, [r7, #104]	@ 0x68
 801640a:	2300      	movs	r3, #0
 801640c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801640e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8016412:	460b      	mov	r3, r1
 8016414:	4313      	orrs	r3, r2
 8016416:	d00c      	beq.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8016418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801641c:	3328      	adds	r3, #40	@ 0x28
 801641e:	2102      	movs	r1, #2
 8016420:	4618      	mov	r0, r3
 8016422:	f000 fa65 	bl	80168f0 <RCCEx_PLL3_Config>
 8016426:	4603      	mov	r3, r0
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801642c:	2301      	movs	r3, #1
 801642e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801643a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801643e:	663b      	str	r3, [r7, #96]	@ 0x60
 8016440:	2300      	movs	r3, #0
 8016442:	667b      	str	r3, [r7, #100]	@ 0x64
 8016444:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8016448:	460b      	mov	r3, r1
 801644a:	4313      	orrs	r3, r2
 801644c:	d038      	beq.n	80164c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801645a:	d018      	beq.n	801648e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801645c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016460:	d811      	bhi.n	8016486 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8016462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016466:	d014      	beq.n	8016492 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8016468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801646c:	d80b      	bhi.n	8016486 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801646e:	2b00      	cmp	r3, #0
 8016470:	d011      	beq.n	8016496 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8016472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016476:	d106      	bne.n	8016486 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016478:	4bc3      	ldr	r3, [pc, #780]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801647a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801647c:	4ac2      	ldr	r2, [pc, #776]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801647e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8016482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8016484:	e008      	b.n	8016498 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8016486:	2301      	movs	r3, #1
 8016488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801648c:	e004      	b.n	8016498 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801648e:	bf00      	nop
 8016490:	e002      	b.n	8016498 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8016492:	bf00      	nop
 8016494:	e000      	b.n	8016498 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8016496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8016498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801649c:	2b00      	cmp	r3, #0
 801649e:	d10b      	bne.n	80164b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80164a0:	4bb9      	ldr	r3, [pc, #740]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80164a4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80164a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80164b0:	4ab5      	ldr	r2, [pc, #724]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164b2:	430b      	orrs	r3, r1
 80164b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80164b6:	e003      	b.n	80164c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80164bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80164c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80164cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80164ce:	2300      	movs	r3, #0
 80164d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80164d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80164d6:	460b      	mov	r3, r1
 80164d8:	4313      	orrs	r3, r2
 80164da:	d009      	beq.n	80164f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80164dc:	4baa      	ldr	r3, [pc, #680]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80164e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80164e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164ea:	4aa7      	ldr	r2, [pc, #668]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80164ec:	430b      	orrs	r3, r1
 80164ee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80164f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80164f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80164fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80164fe:	2300      	movs	r3, #0
 8016500:	657b      	str	r3, [r7, #84]	@ 0x54
 8016502:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8016506:	460b      	mov	r3, r1
 8016508:	4313      	orrs	r3, r2
 801650a:	d00a      	beq.n	8016522 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801650c:	4b9e      	ldr	r3, [pc, #632]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801650e:	691b      	ldr	r3, [r3, #16]
 8016510:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8016514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016518:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801651c:	4a9a      	ldr	r2, [pc, #616]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801651e:	430b      	orrs	r3, r1
 8016520:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8016522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801652e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016530:	2300      	movs	r3, #0
 8016532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016534:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8016538:	460b      	mov	r3, r1
 801653a:	4313      	orrs	r3, r2
 801653c:	d009      	beq.n	8016552 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801653e:	4b92      	ldr	r3, [pc, #584]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016542:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8016546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801654a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801654c:	4a8e      	ldr	r2, [pc, #568]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801654e:	430b      	orrs	r3, r1
 8016550:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8016552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801655a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801655e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016560:	2300      	movs	r3, #0
 8016562:	647b      	str	r3, [r7, #68]	@ 0x44
 8016564:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8016568:	460b      	mov	r3, r1
 801656a:	4313      	orrs	r3, r2
 801656c:	d00e      	beq.n	801658c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801656e:	4b86      	ldr	r3, [pc, #536]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016570:	691b      	ldr	r3, [r3, #16]
 8016572:	4a85      	ldr	r2, [pc, #532]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016574:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8016578:	6113      	str	r3, [r2, #16]
 801657a:	4b83      	ldr	r3, [pc, #524]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801657c:	6919      	ldr	r1, [r3, #16]
 801657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016582:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016586:	4a80      	ldr	r2, [pc, #512]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8016588:	430b      	orrs	r3, r1
 801658a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801658c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016594:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8016598:	63bb      	str	r3, [r7, #56]	@ 0x38
 801659a:	2300      	movs	r3, #0
 801659c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801659e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80165a2:	460b      	mov	r3, r1
 80165a4:	4313      	orrs	r3, r2
 80165a6:	d009      	beq.n	80165bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80165a8:	4b77      	ldr	r3, [pc, #476]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80165ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80165b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80165b6:	4a74      	ldr	r2, [pc, #464]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165b8:	430b      	orrs	r3, r1
 80165ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80165bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165c4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80165c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80165ca:	2300      	movs	r3, #0
 80165cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80165ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80165d2:	460b      	mov	r3, r1
 80165d4:	4313      	orrs	r3, r2
 80165d6:	d00a      	beq.n	80165ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80165d8:	4b6b      	ldr	r3, [pc, #428]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80165dc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80165e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80165e8:	4a67      	ldr	r2, [pc, #412]	@ (8016788 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80165ea:	430b      	orrs	r3, r1
 80165ec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80165ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f6:	2100      	movs	r1, #0
 80165f8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80165fa:	f003 0301 	and.w	r3, r3, #1
 80165fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016600:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8016604:	460b      	mov	r3, r1
 8016606:	4313      	orrs	r3, r2
 8016608:	d011      	beq.n	801662e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801660a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801660e:	3308      	adds	r3, #8
 8016610:	2100      	movs	r1, #0
 8016612:	4618      	mov	r0, r3
 8016614:	f000 f8ba 	bl	801678c <RCCEx_PLL2_Config>
 8016618:	4603      	mov	r3, r0
 801661a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801661e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016622:	2b00      	cmp	r3, #0
 8016624:	d003      	beq.n	801662e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801662a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016636:	2100      	movs	r1, #0
 8016638:	6239      	str	r1, [r7, #32]
 801663a:	f003 0302 	and.w	r3, r3, #2
 801663e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016640:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8016644:	460b      	mov	r3, r1
 8016646:	4313      	orrs	r3, r2
 8016648:	d011      	beq.n	801666e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801664e:	3308      	adds	r3, #8
 8016650:	2101      	movs	r1, #1
 8016652:	4618      	mov	r0, r3
 8016654:	f000 f89a 	bl	801678c <RCCEx_PLL2_Config>
 8016658:	4603      	mov	r3, r0
 801665a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801665e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016662:	2b00      	cmp	r3, #0
 8016664:	d003      	beq.n	801666e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801666a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016676:	2100      	movs	r1, #0
 8016678:	61b9      	str	r1, [r7, #24]
 801667a:	f003 0304 	and.w	r3, r3, #4
 801667e:	61fb      	str	r3, [r7, #28]
 8016680:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8016684:	460b      	mov	r3, r1
 8016686:	4313      	orrs	r3, r2
 8016688:	d011      	beq.n	80166ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801668a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801668e:	3308      	adds	r3, #8
 8016690:	2102      	movs	r1, #2
 8016692:	4618      	mov	r0, r3
 8016694:	f000 f87a 	bl	801678c <RCCEx_PLL2_Config>
 8016698:	4603      	mov	r3, r0
 801669a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801669e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d003      	beq.n	80166ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80166ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b6:	2100      	movs	r1, #0
 80166b8:	6139      	str	r1, [r7, #16]
 80166ba:	f003 0308 	and.w	r3, r3, #8
 80166be:	617b      	str	r3, [r7, #20]
 80166c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80166c4:	460b      	mov	r3, r1
 80166c6:	4313      	orrs	r3, r2
 80166c8:	d011      	beq.n	80166ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80166ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166ce:	3328      	adds	r3, #40	@ 0x28
 80166d0:	2100      	movs	r1, #0
 80166d2:	4618      	mov	r0, r3
 80166d4:	f000 f90c 	bl	80168f0 <RCCEx_PLL3_Config>
 80166d8:	4603      	mov	r3, r0
 80166da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80166de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d003      	beq.n	80166ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80166ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80166ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f6:	2100      	movs	r1, #0
 80166f8:	60b9      	str	r1, [r7, #8]
 80166fa:	f003 0310 	and.w	r3, r3, #16
 80166fe:	60fb      	str	r3, [r7, #12]
 8016700:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8016704:	460b      	mov	r3, r1
 8016706:	4313      	orrs	r3, r2
 8016708:	d011      	beq.n	801672e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801670e:	3328      	adds	r3, #40	@ 0x28
 8016710:	2101      	movs	r1, #1
 8016712:	4618      	mov	r0, r3
 8016714:	f000 f8ec 	bl	80168f0 <RCCEx_PLL3_Config>
 8016718:	4603      	mov	r3, r0
 801671a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801671e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016722:	2b00      	cmp	r3, #0
 8016724:	d003      	beq.n	801672e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801672a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016736:	2100      	movs	r1, #0
 8016738:	6039      	str	r1, [r7, #0]
 801673a:	f003 0320 	and.w	r3, r3, #32
 801673e:	607b      	str	r3, [r7, #4]
 8016740:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016744:	460b      	mov	r3, r1
 8016746:	4313      	orrs	r3, r2
 8016748:	d011      	beq.n	801676e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801674e:	3328      	adds	r3, #40	@ 0x28
 8016750:	2102      	movs	r1, #2
 8016752:	4618      	mov	r0, r3
 8016754:	f000 f8cc 	bl	80168f0 <RCCEx_PLL3_Config>
 8016758:	4603      	mov	r3, r0
 801675a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801675e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8016762:	2b00      	cmp	r3, #0
 8016764:	d003      	beq.n	801676e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801676a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801676e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8016772:	2b00      	cmp	r3, #0
 8016774:	d101      	bne.n	801677a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8016776:	2300      	movs	r3, #0
 8016778:	e000      	b.n	801677c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801677a:	2301      	movs	r3, #1
}
 801677c:	4618      	mov	r0, r3
 801677e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8016782:	46bd      	mov	sp, r7
 8016784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016788:	58024400 	.word	0x58024400

0801678c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b084      	sub	sp, #16
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016796:	2300      	movs	r3, #0
 8016798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801679a:	4b53      	ldr	r3, [pc, #332]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 801679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801679e:	f003 0303 	and.w	r3, r3, #3
 80167a2:	2b03      	cmp	r3, #3
 80167a4:	d101      	bne.n	80167aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80167a6:	2301      	movs	r3, #1
 80167a8:	e099      	b.n	80168de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80167aa:	4b4f      	ldr	r3, [pc, #316]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	4a4e      	ldr	r2, [pc, #312]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80167b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80167b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80167b6:	f7fa fb83 	bl	8010ec0 <HAL_GetTick>
 80167ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80167bc:	e008      	b.n	80167d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80167be:	f7fa fb7f 	bl	8010ec0 <HAL_GetTick>
 80167c2:	4602      	mov	r2, r0
 80167c4:	68bb      	ldr	r3, [r7, #8]
 80167c6:	1ad3      	subs	r3, r2, r3
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d901      	bls.n	80167d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80167cc:	2303      	movs	r3, #3
 80167ce:	e086      	b.n	80168de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80167d0:	4b45      	ldr	r3, [pc, #276]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d1f0      	bne.n	80167be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80167dc:	4b42      	ldr	r3, [pc, #264]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80167de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	031b      	lsls	r3, r3, #12
 80167ea:	493f      	ldr	r1, [pc, #252]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80167ec:	4313      	orrs	r3, r2
 80167ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	3b01      	subs	r3, #1
 80167f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	689b      	ldr	r3, [r3, #8]
 80167fe:	3b01      	subs	r3, #1
 8016800:	025b      	lsls	r3, r3, #9
 8016802:	b29b      	uxth	r3, r3
 8016804:	431a      	orrs	r2, r3
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	68db      	ldr	r3, [r3, #12]
 801680a:	3b01      	subs	r3, #1
 801680c:	041b      	lsls	r3, r3, #16
 801680e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016812:	431a      	orrs	r2, r3
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	691b      	ldr	r3, [r3, #16]
 8016818:	3b01      	subs	r3, #1
 801681a:	061b      	lsls	r3, r3, #24
 801681c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016820:	4931      	ldr	r1, [pc, #196]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016822:	4313      	orrs	r3, r2
 8016824:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016826:	4b30      	ldr	r3, [pc, #192]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801682a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	695b      	ldr	r3, [r3, #20]
 8016832:	492d      	ldr	r1, [pc, #180]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016834:	4313      	orrs	r3, r2
 8016836:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016838:	4b2b      	ldr	r3, [pc, #172]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 801683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801683c:	f023 0220 	bic.w	r2, r3, #32
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	699b      	ldr	r3, [r3, #24]
 8016844:	4928      	ldr	r1, [pc, #160]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016846:	4313      	orrs	r3, r2
 8016848:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801684a:	4b27      	ldr	r3, [pc, #156]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 801684c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801684e:	4a26      	ldr	r2, [pc, #152]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016850:	f023 0310 	bic.w	r3, r3, #16
 8016854:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016856:	4b24      	ldr	r3, [pc, #144]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016858:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801685a:	4b24      	ldr	r3, [pc, #144]	@ (80168ec <RCCEx_PLL2_Config+0x160>)
 801685c:	4013      	ands	r3, r2
 801685e:	687a      	ldr	r2, [r7, #4]
 8016860:	69d2      	ldr	r2, [r2, #28]
 8016862:	00d2      	lsls	r2, r2, #3
 8016864:	4920      	ldr	r1, [pc, #128]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016866:	4313      	orrs	r3, r2
 8016868:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801686a:	4b1f      	ldr	r3, [pc, #124]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 801686c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801686e:	4a1e      	ldr	r2, [pc, #120]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016870:	f043 0310 	orr.w	r3, r3, #16
 8016874:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d106      	bne.n	801688a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801687c:	4b1a      	ldr	r3, [pc, #104]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 801687e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016880:	4a19      	ldr	r2, [pc, #100]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016882:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016886:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016888:	e00f      	b.n	80168aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d106      	bne.n	801689e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016890:	4b15      	ldr	r3, [pc, #84]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016894:	4a14      	ldr	r2, [pc, #80]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 8016896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801689a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801689c:	e005      	b.n	80168aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801689e:	4b12      	ldr	r3, [pc, #72]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80168a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168a2:	4a11      	ldr	r2, [pc, #68]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80168a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80168a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80168aa:	4b0f      	ldr	r3, [pc, #60]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	4a0e      	ldr	r2, [pc, #56]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80168b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80168b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80168b6:	f7fa fb03 	bl	8010ec0 <HAL_GetTick>
 80168ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80168bc:	e008      	b.n	80168d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80168be:	f7fa faff 	bl	8010ec0 <HAL_GetTick>
 80168c2:	4602      	mov	r2, r0
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	1ad3      	subs	r3, r2, r3
 80168c8:	2b02      	cmp	r3, #2
 80168ca:	d901      	bls.n	80168d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80168cc:	2303      	movs	r3, #3
 80168ce:	e006      	b.n	80168de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80168d0:	4b05      	ldr	r3, [pc, #20]	@ (80168e8 <RCCEx_PLL2_Config+0x15c>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d0f0      	beq.n	80168be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80168dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3710      	adds	r7, #16
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	58024400 	.word	0x58024400
 80168ec:	ffff0007 	.word	0xffff0007

080168f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b084      	sub	sp, #16
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
 80168f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80168fa:	2300      	movs	r3, #0
 80168fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80168fe:	4b53      	ldr	r3, [pc, #332]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016902:	f003 0303 	and.w	r3, r3, #3
 8016906:	2b03      	cmp	r3, #3
 8016908:	d101      	bne.n	801690e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801690a:	2301      	movs	r3, #1
 801690c:	e099      	b.n	8016a42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801690e:	4b4f      	ldr	r3, [pc, #316]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	4a4e      	ldr	r2, [pc, #312]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801691a:	f7fa fad1 	bl	8010ec0 <HAL_GetTick>
 801691e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016920:	e008      	b.n	8016934 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016922:	f7fa facd 	bl	8010ec0 <HAL_GetTick>
 8016926:	4602      	mov	r2, r0
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	1ad3      	subs	r3, r2, r3
 801692c:	2b02      	cmp	r3, #2
 801692e:	d901      	bls.n	8016934 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016930:	2303      	movs	r3, #3
 8016932:	e086      	b.n	8016a42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016934:	4b45      	ldr	r3, [pc, #276]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801693c:	2b00      	cmp	r3, #0
 801693e:	d1f0      	bne.n	8016922 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016940:	4b42      	ldr	r3, [pc, #264]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016944:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	051b      	lsls	r3, r3, #20
 801694e:	493f      	ldr	r1, [pc, #252]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016950:	4313      	orrs	r3, r2
 8016952:	628b      	str	r3, [r1, #40]	@ 0x28
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	3b01      	subs	r3, #1
 801695a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	689b      	ldr	r3, [r3, #8]
 8016962:	3b01      	subs	r3, #1
 8016964:	025b      	lsls	r3, r3, #9
 8016966:	b29b      	uxth	r3, r3
 8016968:	431a      	orrs	r2, r3
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	68db      	ldr	r3, [r3, #12]
 801696e:	3b01      	subs	r3, #1
 8016970:	041b      	lsls	r3, r3, #16
 8016972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8016976:	431a      	orrs	r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	691b      	ldr	r3, [r3, #16]
 801697c:	3b01      	subs	r3, #1
 801697e:	061b      	lsls	r3, r3, #24
 8016980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8016984:	4931      	ldr	r1, [pc, #196]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016986:	4313      	orrs	r3, r2
 8016988:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801698a:	4b30      	ldr	r3, [pc, #192]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 801698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801698e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	695b      	ldr	r3, [r3, #20]
 8016996:	492d      	ldr	r1, [pc, #180]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016998:	4313      	orrs	r3, r2
 801699a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801699c:	4b2b      	ldr	r3, [pc, #172]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 801699e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	699b      	ldr	r3, [r3, #24]
 80169a8:	4928      	ldr	r1, [pc, #160]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169aa:	4313      	orrs	r3, r2
 80169ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80169ae:	4b27      	ldr	r3, [pc, #156]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169b2:	4a26      	ldr	r2, [pc, #152]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80169b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80169ba:	4b24      	ldr	r3, [pc, #144]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80169be:	4b24      	ldr	r3, [pc, #144]	@ (8016a50 <RCCEx_PLL3_Config+0x160>)
 80169c0:	4013      	ands	r3, r2
 80169c2:	687a      	ldr	r2, [r7, #4]
 80169c4:	69d2      	ldr	r2, [r2, #28]
 80169c6:	00d2      	lsls	r2, r2, #3
 80169c8:	4920      	ldr	r1, [pc, #128]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169ca:	4313      	orrs	r3, r2
 80169cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80169ce:	4b1f      	ldr	r3, [pc, #124]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169d2:	4a1e      	ldr	r2, [pc, #120]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80169d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d106      	bne.n	80169ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80169e0:	4b1a      	ldr	r3, [pc, #104]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169e4:	4a19      	ldr	r2, [pc, #100]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80169ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80169ec:	e00f      	b.n	8016a0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	2b01      	cmp	r3, #1
 80169f2:	d106      	bne.n	8016a02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80169f4:	4b15      	ldr	r3, [pc, #84]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169f8:	4a14      	ldr	r2, [pc, #80]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 80169fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80169fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8016a00:	e005      	b.n	8016a0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016a02:	4b12      	ldr	r3, [pc, #72]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016a06:	4a11      	ldr	r2, [pc, #68]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016a08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4a0e      	ldr	r2, [pc, #56]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016a1a:	f7fa fa51 	bl	8010ec0 <HAL_GetTick>
 8016a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016a20:	e008      	b.n	8016a34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8016a22:	f7fa fa4d 	bl	8010ec0 <HAL_GetTick>
 8016a26:	4602      	mov	r2, r0
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	1ad3      	subs	r3, r2, r3
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d901      	bls.n	8016a34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016a30:	2303      	movs	r3, #3
 8016a32:	e006      	b.n	8016a42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016a34:	4b05      	ldr	r3, [pc, #20]	@ (8016a4c <RCCEx_PLL3_Config+0x15c>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d0f0      	beq.n	8016a22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3710      	adds	r7, #16
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}
 8016a4a:	bf00      	nop
 8016a4c:	58024400 	.word	0x58024400
 8016a50:	ffff0007 	.word	0xffff0007

08016a54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
 8016a5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d101      	bne.n	8016a68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8016a64:	2301      	movs	r3, #1
 8016a66:	e02b      	b.n	8016ac0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016a6e:	b2db      	uxtb	r3, r3
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d106      	bne.n	8016a82 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	2200      	movs	r2, #0
 8016a78:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8016a7c:	6878      	ldr	r0, [r7, #4]
 8016a7e:	f7ea fd97 	bl	80015b0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2202      	movs	r2, #2
 8016a86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681a      	ldr	r2, [r3, #0]
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	3304      	adds	r3, #4
 8016a92:	4619      	mov	r1, r3
 8016a94:	4610      	mov	r0, r2
 8016a96:	f000 fd9b 	bl	80175d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	6818      	ldr	r0, [r3, #0]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	6839      	ldr	r1, [r7, #0]
 8016aa6:	f000 fdef 	bl	8017688 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8016aaa:	4b07      	ldr	r3, [pc, #28]	@ (8016ac8 <HAL_SDRAM_Init+0x74>)
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	4a06      	ldr	r2, [pc, #24]	@ (8016ac8 <HAL_SDRAM_Init+0x74>)
 8016ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8016ab4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2201      	movs	r2, #1
 8016aba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8016abe:	2300      	movs	r3, #0
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3708      	adds	r7, #8
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	52004000 	.word	0x52004000

08016acc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f7ea fdaf 	bl	8001638 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	681a      	ldr	r2, [r3, #0]
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	4619      	mov	r1, r3
 8016ae4:	4610      	mov	r0, r2
 8016ae6:	f000 fe39 	bl	801775c <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2200      	movs	r2, #0
 8016aee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	2200      	movs	r2, #0
 8016af6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  return HAL_OK;
 8016afa:	2300      	movs	r3, #0
}
 8016afc:	4618      	mov	r0, r3
 8016afe:	3708      	adds	r7, #8
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bd80      	pop	{r7, pc}

08016b04 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b086      	sub	sp, #24
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016b16:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8016b18:	7dfb      	ldrb	r3, [r7, #23]
 8016b1a:	2b02      	cmp	r3, #2
 8016b1c:	d101      	bne.n	8016b22 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8016b1e:	2302      	movs	r3, #2
 8016b20:	e021      	b.n	8016b66 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8016b22:	7dfb      	ldrb	r3, [r7, #23]
 8016b24:	2b01      	cmp	r3, #1
 8016b26:	d002      	beq.n	8016b2e <HAL_SDRAM_SendCommand+0x2a>
 8016b28:	7dfb      	ldrb	r3, [r7, #23]
 8016b2a:	2b05      	cmp	r3, #5
 8016b2c:	d118      	bne.n	8016b60 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2202      	movs	r2, #2
 8016b32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	68b9      	ldr	r1, [r7, #8]
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f000 fe2e 	bl	80177a0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	2b02      	cmp	r3, #2
 8016b4a:	d104      	bne.n	8016b56 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	2205      	movs	r2, #5
 8016b50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016b54:	e006      	b.n	8016b64 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	2201      	movs	r2, #1
 8016b5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016b5e:	e001      	b.n	8016b64 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8016b60:	2301      	movs	r3, #1
 8016b62:	e000      	b.n	8016b66 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8016b64:	2300      	movs	r3, #0
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	3718      	adds	r7, #24
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bd80      	pop	{r7, pc}

08016b6e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8016b6e:	b580      	push	{r7, lr}
 8016b70:	b082      	sub	sp, #8
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	6078      	str	r0, [r7, #4]
 8016b76:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016b7e:	b2db      	uxtb	r3, r3
 8016b80:	2b02      	cmp	r3, #2
 8016b82:	d101      	bne.n	8016b88 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8016b84:	2302      	movs	r3, #2
 8016b86:	e016      	b.n	8016bb6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016b8e:	b2db      	uxtb	r3, r3
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d10f      	bne.n	8016bb4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2202      	movs	r2, #2
 8016b98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f000 fe20 	bl	80177e8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2201      	movs	r2, #1
 8016bac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	e000      	b.n	8016bb6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8016bb4:	2301      	movs	r3, #1
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3708      	adds	r7, #8
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}

08016bbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016bbe:	b580      	push	{r7, lr}
 8016bc0:	b082      	sub	sp, #8
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d101      	bne.n	8016bd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016bcc:	2301      	movs	r3, #1
 8016bce:	e049      	b.n	8016c64 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d106      	bne.n	8016bea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	2200      	movs	r2, #0
 8016be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f7ea fbdd 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2202      	movs	r2, #2
 8016bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681a      	ldr	r2, [r3, #0]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	3304      	adds	r3, #4
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	4610      	mov	r0, r2
 8016bfe:	f000 fa37 	bl	8017070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2201      	movs	r2, #1
 8016c06:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	2201      	movs	r2, #1
 8016c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2201      	movs	r2, #1
 8016c16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2201      	movs	r2, #1
 8016c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2201      	movs	r2, #1
 8016c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2201      	movs	r2, #1
 8016c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2201      	movs	r2, #1
 8016c36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	2201      	movs	r2, #1
 8016c3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	2201      	movs	r2, #1
 8016c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	2201      	movs	r2, #1
 8016c56:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2201      	movs	r2, #1
 8016c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8016c62:	2300      	movs	r3, #0
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b085      	sub	sp, #20
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b01      	cmp	r3, #1
 8016c7e:	d001      	beq.n	8016c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8016c80:	2301      	movs	r3, #1
 8016c82:	e054      	b.n	8016d2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2202      	movs	r2, #2
 8016c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	68da      	ldr	r2, [r3, #12]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	f042 0201 	orr.w	r2, r2, #1
 8016c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4a26      	ldr	r2, [pc, #152]	@ (8016d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8016ca2:	4293      	cmp	r3, r2
 8016ca4:	d022      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016cae:	d01d      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	4a22      	ldr	r2, [pc, #136]	@ (8016d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d018      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	4a21      	ldr	r2, [pc, #132]	@ (8016d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8016cc0:	4293      	cmp	r3, r2
 8016cc2:	d013      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8016d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	d00e      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8016d4c <HAL_TIM_Base_Start_IT+0xe0>)
 8016cd4:	4293      	cmp	r3, r2
 8016cd6:	d009      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8016d50 <HAL_TIM_Base_Start_IT+0xe4>)
 8016cde:	4293      	cmp	r3, r2
 8016ce0:	d004      	beq.n	8016cec <HAL_TIM_Base_Start_IT+0x80>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8016d54 <HAL_TIM_Base_Start_IT+0xe8>)
 8016ce8:	4293      	cmp	r3, r2
 8016cea:	d115      	bne.n	8016d18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	689a      	ldr	r2, [r3, #8]
 8016cf2:	4b19      	ldr	r3, [pc, #100]	@ (8016d58 <HAL_TIM_Base_Start_IT+0xec>)
 8016cf4:	4013      	ands	r3, r2
 8016cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	2b06      	cmp	r3, #6
 8016cfc:	d015      	beq.n	8016d2a <HAL_TIM_Base_Start_IT+0xbe>
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016d04:	d011      	beq.n	8016d2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	681a      	ldr	r2, [r3, #0]
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	f042 0201 	orr.w	r2, r2, #1
 8016d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d16:	e008      	b.n	8016d2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	f042 0201 	orr.w	r2, r2, #1
 8016d26:	601a      	str	r2, [r3, #0]
 8016d28:	e000      	b.n	8016d2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3714      	adds	r7, #20
 8016d32:	46bd      	mov	sp, r7
 8016d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d38:	4770      	bx	lr
 8016d3a:	bf00      	nop
 8016d3c:	40010000 	.word	0x40010000
 8016d40:	40000400 	.word	0x40000400
 8016d44:	40000800 	.word	0x40000800
 8016d48:	40000c00 	.word	0x40000c00
 8016d4c:	40010400 	.word	0x40010400
 8016d50:	40001800 	.word	0x40001800
 8016d54:	40014000 	.word	0x40014000
 8016d58:	00010007 	.word	0x00010007

08016d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	691b      	ldr	r3, [r3, #16]
 8016d6a:	f003 0302 	and.w	r3, r3, #2
 8016d6e:	2b02      	cmp	r3, #2
 8016d70:	d122      	bne.n	8016db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	68db      	ldr	r3, [r3, #12]
 8016d78:	f003 0302 	and.w	r3, r3, #2
 8016d7c:	2b02      	cmp	r3, #2
 8016d7e:	d11b      	bne.n	8016db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f06f 0202 	mvn.w	r2, #2
 8016d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2201      	movs	r2, #1
 8016d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	699b      	ldr	r3, [r3, #24]
 8016d96:	f003 0303 	and.w	r3, r3, #3
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d003      	beq.n	8016da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016d9e:	6878      	ldr	r0, [r7, #4]
 8016da0:	f000 f947 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016da4:	e005      	b.n	8016db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016da6:	6878      	ldr	r0, [r7, #4]
 8016da8:	f000 f939 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016dac:	6878      	ldr	r0, [r7, #4]
 8016dae:	f000 f94a 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	2200      	movs	r2, #0
 8016db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	691b      	ldr	r3, [r3, #16]
 8016dbe:	f003 0304 	and.w	r3, r3, #4
 8016dc2:	2b04      	cmp	r3, #4
 8016dc4:	d122      	bne.n	8016e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	68db      	ldr	r3, [r3, #12]
 8016dcc:	f003 0304 	and.w	r3, r3, #4
 8016dd0:	2b04      	cmp	r3, #4
 8016dd2:	d11b      	bne.n	8016e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	f06f 0204 	mvn.w	r2, #4
 8016ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2202      	movs	r2, #2
 8016de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	699b      	ldr	r3, [r3, #24]
 8016dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d003      	beq.n	8016dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f000 f91d 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016df8:	e005      	b.n	8016e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016dfa:	6878      	ldr	r0, [r7, #4]
 8016dfc:	f000 f90f 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f000 f920 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2200      	movs	r2, #0
 8016e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	691b      	ldr	r3, [r3, #16]
 8016e12:	f003 0308 	and.w	r3, r3, #8
 8016e16:	2b08      	cmp	r3, #8
 8016e18:	d122      	bne.n	8016e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	68db      	ldr	r3, [r3, #12]
 8016e20:	f003 0308 	and.w	r3, r3, #8
 8016e24:	2b08      	cmp	r3, #8
 8016e26:	d11b      	bne.n	8016e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	f06f 0208 	mvn.w	r2, #8
 8016e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	2204      	movs	r2, #4
 8016e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	69db      	ldr	r3, [r3, #28]
 8016e3e:	f003 0303 	and.w	r3, r3, #3
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d003      	beq.n	8016e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f000 f8f3 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016e4c:	e005      	b.n	8016e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e4e:	6878      	ldr	r0, [r7, #4]
 8016e50:	f000 f8e5 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e54:	6878      	ldr	r0, [r7, #4]
 8016e56:	f000 f8f6 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2200      	movs	r2, #0
 8016e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	691b      	ldr	r3, [r3, #16]
 8016e66:	f003 0310 	and.w	r3, r3, #16
 8016e6a:	2b10      	cmp	r3, #16
 8016e6c:	d122      	bne.n	8016eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	f003 0310 	and.w	r3, r3, #16
 8016e78:	2b10      	cmp	r3, #16
 8016e7a:	d11b      	bne.n	8016eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f06f 0210 	mvn.w	r2, #16
 8016e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	2208      	movs	r2, #8
 8016e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	69db      	ldr	r3, [r3, #28]
 8016e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d003      	beq.n	8016ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f000 f8c9 	bl	8017032 <HAL_TIM_IC_CaptureCallback>
 8016ea0:	e005      	b.n	8016eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f000 f8bb 	bl	801701e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f000 f8cc 	bl	8017046 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	691b      	ldr	r3, [r3, #16]
 8016eba:	f003 0301 	and.w	r3, r3, #1
 8016ebe:	2b01      	cmp	r3, #1
 8016ec0:	d10e      	bne.n	8016ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	f003 0301 	and.w	r3, r3, #1
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d107      	bne.n	8016ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	f06f 0201 	mvn.w	r2, #1
 8016ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016eda:	6878      	ldr	r0, [r7, #4]
 8016edc:	f7e9 ff36 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	691b      	ldr	r3, [r3, #16]
 8016ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016eea:	2b80      	cmp	r3, #128	@ 0x80
 8016eec:	d10e      	bne.n	8016f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ef8:	2b80      	cmp	r3, #128	@ 0x80
 8016efa:	d107      	bne.n	8016f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8016f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f000 fb4e 	bl	80175a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	691b      	ldr	r3, [r3, #16]
 8016f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016f1a:	d10e      	bne.n	8016f3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	68db      	ldr	r3, [r3, #12]
 8016f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016f26:	2b80      	cmp	r3, #128	@ 0x80
 8016f28:	d107      	bne.n	8016f3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8016f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016f34:	6878      	ldr	r0, [r7, #4]
 8016f36:	f000 fb41 	bl	80175bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	691b      	ldr	r3, [r3, #16]
 8016f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016f44:	2b40      	cmp	r3, #64	@ 0x40
 8016f46:	d10e      	bne.n	8016f66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	68db      	ldr	r3, [r3, #12]
 8016f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016f52:	2b40      	cmp	r3, #64	@ 0x40
 8016f54:	d107      	bne.n	8016f66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8016f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 f87a 	bl	801705a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	691b      	ldr	r3, [r3, #16]
 8016f6c:	f003 0320 	and.w	r3, r3, #32
 8016f70:	2b20      	cmp	r3, #32
 8016f72:	d10e      	bne.n	8016f92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	68db      	ldr	r3, [r3, #12]
 8016f7a:	f003 0320 	and.w	r3, r3, #32
 8016f7e:	2b20      	cmp	r3, #32
 8016f80:	d107      	bne.n	8016f92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	f06f 0220 	mvn.w	r2, #32
 8016f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f000 fb01 	bl	8017594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016f92:	bf00      	nop
 8016f94:	3708      	adds	r7, #8
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}

08016f9a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8016f9a:	b580      	push	{r7, lr}
 8016f9c:	b082      	sub	sp, #8
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
 8016fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016faa:	2b01      	cmp	r3, #1
 8016fac:	d101      	bne.n	8016fb2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8016fae:	2302      	movs	r3, #2
 8016fb0:	e031      	b.n	8017016 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2201      	movs	r2, #1
 8016fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	2202      	movs	r2, #2
 8016fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8016fc2:	6839      	ldr	r1, [r7, #0]
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f000 f8ed 	bl	80171a4 <TIM_SlaveTimer_SetConfig>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d009      	beq.n	8016fe4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2201      	movs	r2, #1
 8016fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	e018      	b.n	8017016 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	68da      	ldr	r2, [r3, #12]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8016ff2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	68da      	ldr	r2, [r3, #12]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8017002:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2201      	movs	r2, #1
 8017008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2200      	movs	r2, #0
 8017010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8017014:	2300      	movs	r3, #0
}
 8017016:	4618      	mov	r0, r3
 8017018:	3708      	adds	r7, #8
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}

0801701e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801701e:	b480      	push	{r7}
 8017020:	b083      	sub	sp, #12
 8017022:	af00      	add	r7, sp, #0
 8017024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017026:	bf00      	nop
 8017028:	370c      	adds	r7, #12
 801702a:	46bd      	mov	sp, r7
 801702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017030:	4770      	bx	lr

08017032 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017032:	b480      	push	{r7}
 8017034:	b083      	sub	sp, #12
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801703a:	bf00      	nop
 801703c:	370c      	adds	r7, #12
 801703e:	46bd      	mov	sp, r7
 8017040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017044:	4770      	bx	lr

08017046 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017046:	b480      	push	{r7}
 8017048:	b083      	sub	sp, #12
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801704e:	bf00      	nop
 8017050:	370c      	adds	r7, #12
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr

0801705a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801705a:	b480      	push	{r7}
 801705c:	b083      	sub	sp, #12
 801705e:	af00      	add	r7, sp, #0
 8017060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017062:	bf00      	nop
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr
	...

08017070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8017070:	b480      	push	{r7}
 8017072:	b085      	sub	sp, #20
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	4a40      	ldr	r2, [pc, #256]	@ (8017184 <TIM_Base_SetConfig+0x114>)
 8017084:	4293      	cmp	r3, r2
 8017086:	d013      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801708e:	d00f      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	4a3d      	ldr	r2, [pc, #244]	@ (8017188 <TIM_Base_SetConfig+0x118>)
 8017094:	4293      	cmp	r3, r2
 8017096:	d00b      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	4a3c      	ldr	r2, [pc, #240]	@ (801718c <TIM_Base_SetConfig+0x11c>)
 801709c:	4293      	cmp	r3, r2
 801709e:	d007      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	4a3b      	ldr	r2, [pc, #236]	@ (8017190 <TIM_Base_SetConfig+0x120>)
 80170a4:	4293      	cmp	r3, r2
 80170a6:	d003      	beq.n	80170b0 <TIM_Base_SetConfig+0x40>
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	4a3a      	ldr	r2, [pc, #232]	@ (8017194 <TIM_Base_SetConfig+0x124>)
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d108      	bne.n	80170c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80170b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80170b8:	683b      	ldr	r3, [r7, #0]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	68fa      	ldr	r2, [r7, #12]
 80170be:	4313      	orrs	r3, r2
 80170c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	4a2f      	ldr	r2, [pc, #188]	@ (8017184 <TIM_Base_SetConfig+0x114>)
 80170c6:	4293      	cmp	r3, r2
 80170c8:	d01f      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80170d0:	d01b      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	4a2c      	ldr	r2, [pc, #176]	@ (8017188 <TIM_Base_SetConfig+0x118>)
 80170d6:	4293      	cmp	r3, r2
 80170d8:	d017      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	4a2b      	ldr	r2, [pc, #172]	@ (801718c <TIM_Base_SetConfig+0x11c>)
 80170de:	4293      	cmp	r3, r2
 80170e0:	d013      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	4a2a      	ldr	r2, [pc, #168]	@ (8017190 <TIM_Base_SetConfig+0x120>)
 80170e6:	4293      	cmp	r3, r2
 80170e8:	d00f      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	4a29      	ldr	r2, [pc, #164]	@ (8017194 <TIM_Base_SetConfig+0x124>)
 80170ee:	4293      	cmp	r3, r2
 80170f0:	d00b      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	4a28      	ldr	r2, [pc, #160]	@ (8017198 <TIM_Base_SetConfig+0x128>)
 80170f6:	4293      	cmp	r3, r2
 80170f8:	d007      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	4a27      	ldr	r2, [pc, #156]	@ (801719c <TIM_Base_SetConfig+0x12c>)
 80170fe:	4293      	cmp	r3, r2
 8017100:	d003      	beq.n	801710a <TIM_Base_SetConfig+0x9a>
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	4a26      	ldr	r2, [pc, #152]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 8017106:	4293      	cmp	r3, r2
 8017108:	d108      	bne.n	801711c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8017110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017112:	683b      	ldr	r3, [r7, #0]
 8017114:	68db      	ldr	r3, [r3, #12]
 8017116:	68fa      	ldr	r2, [r7, #12]
 8017118:	4313      	orrs	r3, r2
 801711a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	695b      	ldr	r3, [r3, #20]
 8017126:	4313      	orrs	r3, r2
 8017128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	68fa      	ldr	r2, [r7, #12]
 801712e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	689a      	ldr	r2, [r3, #8]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	681a      	ldr	r2, [r3, #0]
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	4a10      	ldr	r2, [pc, #64]	@ (8017184 <TIM_Base_SetConfig+0x114>)
 8017144:	4293      	cmp	r3, r2
 8017146:	d00f      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4a12      	ldr	r2, [pc, #72]	@ (8017194 <TIM_Base_SetConfig+0x124>)
 801714c:	4293      	cmp	r3, r2
 801714e:	d00b      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	4a11      	ldr	r2, [pc, #68]	@ (8017198 <TIM_Base_SetConfig+0x128>)
 8017154:	4293      	cmp	r3, r2
 8017156:	d007      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4a10      	ldr	r2, [pc, #64]	@ (801719c <TIM_Base_SetConfig+0x12c>)
 801715c:	4293      	cmp	r3, r2
 801715e:	d003      	beq.n	8017168 <TIM_Base_SetConfig+0xf8>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	4a0f      	ldr	r2, [pc, #60]	@ (80171a0 <TIM_Base_SetConfig+0x130>)
 8017164:	4293      	cmp	r3, r2
 8017166:	d103      	bne.n	8017170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	691a      	ldr	r2, [r3, #16]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2201      	movs	r2, #1
 8017174:	615a      	str	r2, [r3, #20]
}
 8017176:	bf00      	nop
 8017178:	3714      	adds	r7, #20
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr
 8017182:	bf00      	nop
 8017184:	40010000 	.word	0x40010000
 8017188:	40000400 	.word	0x40000400
 801718c:	40000800 	.word	0x40000800
 8017190:	40000c00 	.word	0x40000c00
 8017194:	40010400 	.word	0x40010400
 8017198:	40014000 	.word	0x40014000
 801719c:	40014400 	.word	0x40014400
 80171a0:	40014800 	.word	0x40014800

080171a4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80171a4:	b580      	push	{r7, lr}
 80171a6:	b086      	sub	sp, #24
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
 80171ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80171ae:	2300      	movs	r3, #0
 80171b0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	689b      	ldr	r3, [r3, #8]
 80171b8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80171ba:	693a      	ldr	r2, [r7, #16]
 80171bc:	4b65      	ldr	r3, [pc, #404]	@ (8017354 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80171be:	4013      	ands	r3, r2
 80171c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80171c2:	683b      	ldr	r3, [r7, #0]
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	693a      	ldr	r2, [r7, #16]
 80171c8:	4313      	orrs	r3, r2
 80171ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80171cc:	693a      	ldr	r2, [r7, #16]
 80171ce:	4b62      	ldr	r3, [pc, #392]	@ (8017358 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80171d0:	4013      	ands	r3, r2
 80171d2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	693a      	ldr	r2, [r7, #16]
 80171da:	4313      	orrs	r3, r2
 80171dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	693a      	ldr	r2, [r7, #16]
 80171e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	685b      	ldr	r3, [r3, #4]
 80171ea:	4a5c      	ldr	r2, [pc, #368]	@ (801735c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80171ec:	4293      	cmp	r3, r2
 80171ee:	f000 80ab 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 80171f2:	4a5a      	ldr	r2, [pc, #360]	@ (801735c <TIM_SlaveTimer_SetConfig+0x1b8>)
 80171f4:	4293      	cmp	r3, r2
 80171f6:	f200 80a4 	bhi.w	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 80171fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80171fe:	f000 80a3 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017202:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017206:	f200 809c 	bhi.w	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 801720a:	4a55      	ldr	r2, [pc, #340]	@ (8017360 <TIM_SlaveTimer_SetConfig+0x1bc>)
 801720c:	4293      	cmp	r3, r2
 801720e:	f000 809b 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017212:	4a53      	ldr	r2, [pc, #332]	@ (8017360 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8017214:	4293      	cmp	r3, r2
 8017216:	f200 8094 	bhi.w	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 801721a:	4a52      	ldr	r2, [pc, #328]	@ (8017364 <TIM_SlaveTimer_SetConfig+0x1c0>)
 801721c:	4293      	cmp	r3, r2
 801721e:	f000 8093 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017222:	4a50      	ldr	r2, [pc, #320]	@ (8017364 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8017224:	4293      	cmp	r3, r2
 8017226:	f200 808c 	bhi.w	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 801722a:	4a4f      	ldr	r2, [pc, #316]	@ (8017368 <TIM_SlaveTimer_SetConfig+0x1c4>)
 801722c:	4293      	cmp	r3, r2
 801722e:	f000 808b 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017232:	4a4d      	ldr	r2, [pc, #308]	@ (8017368 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8017234:	4293      	cmp	r3, r2
 8017236:	f200 8084 	bhi.w	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 801723a:	4a4c      	ldr	r2, [pc, #304]	@ (801736c <TIM_SlaveTimer_SetConfig+0x1c8>)
 801723c:	4293      	cmp	r3, r2
 801723e:	f000 8083 	beq.w	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017242:	4a4a      	ldr	r2, [pc, #296]	@ (801736c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8017244:	4293      	cmp	r3, r2
 8017246:	d87c      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017248:	4a49      	ldr	r2, [pc, #292]	@ (8017370 <TIM_SlaveTimer_SetConfig+0x1cc>)
 801724a:	4293      	cmp	r3, r2
 801724c:	d07c      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 801724e:	4a48      	ldr	r2, [pc, #288]	@ (8017370 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8017250:	4293      	cmp	r3, r2
 8017252:	d876      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017254:	4a47      	ldr	r2, [pc, #284]	@ (8017374 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8017256:	4293      	cmp	r3, r2
 8017258:	d076      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 801725a:	4a46      	ldr	r2, [pc, #280]	@ (8017374 <TIM_SlaveTimer_SetConfig+0x1d0>)
 801725c:	4293      	cmp	r3, r2
 801725e:	d870      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017260:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8017264:	d070      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017266:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801726a:	d86a      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 801726c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017270:	d06a      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 8017272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017276:	d864      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017278:	2b70      	cmp	r3, #112	@ 0x70
 801727a:	d01a      	beq.n	80172b2 <TIM_SlaveTimer_SetConfig+0x10e>
 801727c:	2b70      	cmp	r3, #112	@ 0x70
 801727e:	d860      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017280:	2b60      	cmp	r3, #96	@ 0x60
 8017282:	d054      	beq.n	801732e <TIM_SlaveTimer_SetConfig+0x18a>
 8017284:	2b60      	cmp	r3, #96	@ 0x60
 8017286:	d85c      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017288:	2b50      	cmp	r3, #80	@ 0x50
 801728a:	d046      	beq.n	801731a <TIM_SlaveTimer_SetConfig+0x176>
 801728c:	2b50      	cmp	r3, #80	@ 0x50
 801728e:	d858      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017290:	2b40      	cmp	r3, #64	@ 0x40
 8017292:	d019      	beq.n	80172c8 <TIM_SlaveTimer_SetConfig+0x124>
 8017294:	2b40      	cmp	r3, #64	@ 0x40
 8017296:	d854      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 8017298:	2b30      	cmp	r3, #48	@ 0x30
 801729a:	d055      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 801729c:	2b30      	cmp	r3, #48	@ 0x30
 801729e:	d850      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 80172a0:	2b20      	cmp	r3, #32
 80172a2:	d051      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 80172a4:	2b20      	cmp	r3, #32
 80172a6:	d84c      	bhi.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d04d      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 80172ac:	2b10      	cmp	r3, #16
 80172ae:	d04b      	beq.n	8017348 <TIM_SlaveTimer_SetConfig+0x1a4>
 80172b0:	e047      	b.n	8017342 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80172b6:	683b      	ldr	r3, [r7, #0]
 80172b8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80172c2:	f000 f8b8 	bl	8017436 <TIM_ETR_SetConfig>
      break;
 80172c6:	e040      	b.n	801734a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2b05      	cmp	r3, #5
 80172ce:	d101      	bne.n	80172d4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80172d0:	2301      	movs	r3, #1
 80172d2:	e03b      	b.n	801734c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	6a1b      	ldr	r3, [r3, #32]
 80172da:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	6a1a      	ldr	r2, [r3, #32]
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	f022 0201 	bic.w	r2, r2, #1
 80172ea:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	699b      	ldr	r3, [r3, #24]
 80172f2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80172fa:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	691b      	ldr	r3, [r3, #16]
 8017300:	011b      	lsls	r3, r3, #4
 8017302:	68ba      	ldr	r2, [r7, #8]
 8017304:	4313      	orrs	r3, r2
 8017306:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	68fa      	ldr	r2, [r7, #12]
 8017316:	621a      	str	r2, [r3, #32]
      break;
 8017318:	e017      	b.n	801734a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8017326:	461a      	mov	r2, r3
 8017328:	f000 f826 	bl	8017378 <TIM_TI1_ConfigInputStage>
      break;
 801732c:	e00d      	b.n	801734a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801733a:	461a      	mov	r2, r3
 801733c:	f000 f84b 	bl	80173d6 <TIM_TI2_ConfigInputStage>
      break;
 8017340:	e003      	b.n	801734a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8017342:	2301      	movs	r3, #1
 8017344:	75fb      	strb	r3, [r7, #23]
      break;
 8017346:	e000      	b.n	801734a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8017348:	bf00      	nop
  }

  return status;
 801734a:	7dfb      	ldrb	r3, [r7, #23]
}
 801734c:	4618      	mov	r0, r3
 801734e:	3718      	adds	r7, #24
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	ffcfff8f 	.word	0xffcfff8f
 8017358:	fffefff8 	.word	0xfffefff8
 801735c:	00200010 	.word	0x00200010
 8017360:	00100070 	.word	0x00100070
 8017364:	00100060 	.word	0x00100060
 8017368:	00100050 	.word	0x00100050
 801736c:	00100040 	.word	0x00100040
 8017370:	00100030 	.word	0x00100030
 8017374:	00100020 	.word	0x00100020

08017378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8017378:	b480      	push	{r7}
 801737a:	b087      	sub	sp, #28
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	6a1b      	ldr	r3, [r3, #32]
 8017388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	6a1b      	ldr	r3, [r3, #32]
 801738e:	f023 0201 	bic.w	r2, r3, #1
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	699b      	ldr	r3, [r3, #24]
 801739a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801739c:	693b      	ldr	r3, [r7, #16]
 801739e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80173a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	011b      	lsls	r3, r3, #4
 80173a8:	693a      	ldr	r2, [r7, #16]
 80173aa:	4313      	orrs	r3, r2
 80173ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	f023 030a 	bic.w	r3, r3, #10
 80173b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80173b6:	697a      	ldr	r2, [r7, #20]
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	4313      	orrs	r3, r2
 80173bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	693a      	ldr	r2, [r7, #16]
 80173c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	697a      	ldr	r2, [r7, #20]
 80173c8:	621a      	str	r2, [r3, #32]
}
 80173ca:	bf00      	nop
 80173cc:	371c      	adds	r7, #28
 80173ce:	46bd      	mov	sp, r7
 80173d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d4:	4770      	bx	lr

080173d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80173d6:	b480      	push	{r7}
 80173d8:	b087      	sub	sp, #28
 80173da:	af00      	add	r7, sp, #0
 80173dc:	60f8      	str	r0, [r7, #12]
 80173de:	60b9      	str	r1, [r7, #8]
 80173e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	6a1b      	ldr	r3, [r3, #32]
 80173e6:	f023 0210 	bic.w	r2, r3, #16
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	699b      	ldr	r3, [r3, #24]
 80173f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	6a1b      	ldr	r3, [r3, #32]
 80173f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80173fa:	697b      	ldr	r3, [r7, #20]
 80173fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8017400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	031b      	lsls	r3, r3, #12
 8017406:	697a      	ldr	r2, [r7, #20]
 8017408:	4313      	orrs	r3, r2
 801740a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801740c:	693b      	ldr	r3, [r7, #16]
 801740e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8017412:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	011b      	lsls	r3, r3, #4
 8017418:	693a      	ldr	r2, [r7, #16]
 801741a:	4313      	orrs	r3, r2
 801741c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	697a      	ldr	r2, [r7, #20]
 8017422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	693a      	ldr	r2, [r7, #16]
 8017428:	621a      	str	r2, [r3, #32]
}
 801742a:	bf00      	nop
 801742c:	371c      	adds	r7, #28
 801742e:	46bd      	mov	sp, r7
 8017430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017434:	4770      	bx	lr

08017436 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017436:	b480      	push	{r7}
 8017438:	b087      	sub	sp, #28
 801743a:	af00      	add	r7, sp, #0
 801743c:	60f8      	str	r0, [r7, #12]
 801743e:	60b9      	str	r1, [r7, #8]
 8017440:	607a      	str	r2, [r7, #4]
 8017442:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	689b      	ldr	r3, [r3, #8]
 8017448:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8017450:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	021a      	lsls	r2, r3, #8
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	431a      	orrs	r2, r3
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	4313      	orrs	r3, r2
 801745e:	697a      	ldr	r2, [r7, #20]
 8017460:	4313      	orrs	r3, r2
 8017462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	697a      	ldr	r2, [r7, #20]
 8017468:	609a      	str	r2, [r3, #8]
}
 801746a:	bf00      	nop
 801746c:	371c      	adds	r7, #28
 801746e:	46bd      	mov	sp, r7
 8017470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017474:	4770      	bx	lr
	...

08017478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017478:	b480      	push	{r7}
 801747a:	b085      	sub	sp, #20
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8017488:	2b01      	cmp	r3, #1
 801748a:	d101      	bne.n	8017490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801748c:	2302      	movs	r3, #2
 801748e:	e06d      	b.n	801756c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2201      	movs	r2, #1
 8017494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2202      	movs	r2, #2
 801749c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	685b      	ldr	r3, [r3, #4]
 80174a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	689b      	ldr	r3, [r3, #8]
 80174ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	4a30      	ldr	r2, [pc, #192]	@ (8017578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80174b6:	4293      	cmp	r3, r2
 80174b8:	d004      	beq.n	80174c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	4a2f      	ldr	r2, [pc, #188]	@ (801757c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80174c0:	4293      	cmp	r3, r2
 80174c2:	d108      	bne.n	80174d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80174ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80174cc:	683b      	ldr	r3, [r7, #0]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	68fa      	ldr	r2, [r7, #12]
 80174d2:	4313      	orrs	r3, r2
 80174d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80174dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	68fa      	ldr	r2, [r7, #12]
 80174e4:	4313      	orrs	r3, r2
 80174e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	68fa      	ldr	r2, [r7, #12]
 80174ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	4a20      	ldr	r2, [pc, #128]	@ (8017578 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80174f6:	4293      	cmp	r3, r2
 80174f8:	d022      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017502:	d01d      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	4a1d      	ldr	r2, [pc, #116]	@ (8017580 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801750a:	4293      	cmp	r3, r2
 801750c:	d018      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	4a1c      	ldr	r2, [pc, #112]	@ (8017584 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017514:	4293      	cmp	r3, r2
 8017516:	d013      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	4a1a      	ldr	r2, [pc, #104]	@ (8017588 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801751e:	4293      	cmp	r3, r2
 8017520:	d00e      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	4a15      	ldr	r2, [pc, #84]	@ (801757c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017528:	4293      	cmp	r3, r2
 801752a:	d009      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	4a16      	ldr	r2, [pc, #88]	@ (801758c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d004      	beq.n	8017540 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	4a15      	ldr	r2, [pc, #84]	@ (8017590 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801753c:	4293      	cmp	r3, r2
 801753e:	d10c      	bne.n	801755a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017540:	68bb      	ldr	r3, [r7, #8]
 8017542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017546:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	689b      	ldr	r3, [r3, #8]
 801754c:	68ba      	ldr	r2, [r7, #8]
 801754e:	4313      	orrs	r3, r2
 8017550:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	2201      	movs	r2, #1
 801755e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2200      	movs	r2, #0
 8017566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801756a:	2300      	movs	r3, #0
}
 801756c:	4618      	mov	r0, r3
 801756e:	3714      	adds	r7, #20
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr
 8017578:	40010000 	.word	0x40010000
 801757c:	40010400 	.word	0x40010400
 8017580:	40000400 	.word	0x40000400
 8017584:	40000800 	.word	0x40000800
 8017588:	40000c00 	.word	0x40000c00
 801758c:	40001800 	.word	0x40001800
 8017590:	40014000 	.word	0x40014000

08017594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017594:	b480      	push	{r7}
 8017596:	b083      	sub	sp, #12
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801759c:	bf00      	nop
 801759e:	370c      	adds	r7, #12
 80175a0:	46bd      	mov	sp, r7
 80175a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a6:	4770      	bx	lr

080175a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80175a8:	b480      	push	{r7}
 80175aa:	b083      	sub	sp, #12
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80175b0:	bf00      	nop
 80175b2:	370c      	adds	r7, #12
 80175b4:	46bd      	mov	sp, r7
 80175b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ba:	4770      	bx	lr

080175bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80175bc:	b480      	push	{r7}
 80175be:	b083      	sub	sp, #12
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80175c4:	bf00      	nop
 80175c6:	370c      	adds	r7, #12
 80175c8:	46bd      	mov	sp, r7
 80175ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ce:	4770      	bx	lr

080175d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80175d0:	b480      	push	{r7}
 80175d2:	b083      	sub	sp, #12
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d121      	bne.n	8017626 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681a      	ldr	r2, [r3, #0]
 80175e6:	4b27      	ldr	r3, [pc, #156]	@ (8017684 <FMC_SDRAM_Init+0xb4>)
 80175e8:	4013      	ands	r3, r2
 80175ea:	683a      	ldr	r2, [r7, #0]
 80175ec:	6851      	ldr	r1, [r2, #4]
 80175ee:	683a      	ldr	r2, [r7, #0]
 80175f0:	6892      	ldr	r2, [r2, #8]
 80175f2:	4311      	orrs	r1, r2
 80175f4:	683a      	ldr	r2, [r7, #0]
 80175f6:	68d2      	ldr	r2, [r2, #12]
 80175f8:	4311      	orrs	r1, r2
 80175fa:	683a      	ldr	r2, [r7, #0]
 80175fc:	6912      	ldr	r2, [r2, #16]
 80175fe:	4311      	orrs	r1, r2
 8017600:	683a      	ldr	r2, [r7, #0]
 8017602:	6952      	ldr	r2, [r2, #20]
 8017604:	4311      	orrs	r1, r2
 8017606:	683a      	ldr	r2, [r7, #0]
 8017608:	6992      	ldr	r2, [r2, #24]
 801760a:	4311      	orrs	r1, r2
 801760c:	683a      	ldr	r2, [r7, #0]
 801760e:	69d2      	ldr	r2, [r2, #28]
 8017610:	4311      	orrs	r1, r2
 8017612:	683a      	ldr	r2, [r7, #0]
 8017614:	6a12      	ldr	r2, [r2, #32]
 8017616:	4311      	orrs	r1, r2
 8017618:	683a      	ldr	r2, [r7, #0]
 801761a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801761c:	430a      	orrs	r2, r1
 801761e:	431a      	orrs	r2, r3
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	601a      	str	r2, [r3, #0]
 8017624:	e026      	b.n	8017674 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	69d9      	ldr	r1, [r3, #28]
 8017632:	683b      	ldr	r3, [r7, #0]
 8017634:	6a1b      	ldr	r3, [r3, #32]
 8017636:	4319      	orrs	r1, r3
 8017638:	683b      	ldr	r3, [r7, #0]
 801763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801763c:	430b      	orrs	r3, r1
 801763e:	431a      	orrs	r2, r3
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	685a      	ldr	r2, [r3, #4]
 8017648:	4b0e      	ldr	r3, [pc, #56]	@ (8017684 <FMC_SDRAM_Init+0xb4>)
 801764a:	4013      	ands	r3, r2
 801764c:	683a      	ldr	r2, [r7, #0]
 801764e:	6851      	ldr	r1, [r2, #4]
 8017650:	683a      	ldr	r2, [r7, #0]
 8017652:	6892      	ldr	r2, [r2, #8]
 8017654:	4311      	orrs	r1, r2
 8017656:	683a      	ldr	r2, [r7, #0]
 8017658:	68d2      	ldr	r2, [r2, #12]
 801765a:	4311      	orrs	r1, r2
 801765c:	683a      	ldr	r2, [r7, #0]
 801765e:	6912      	ldr	r2, [r2, #16]
 8017660:	4311      	orrs	r1, r2
 8017662:	683a      	ldr	r2, [r7, #0]
 8017664:	6952      	ldr	r2, [r2, #20]
 8017666:	4311      	orrs	r1, r2
 8017668:	683a      	ldr	r2, [r7, #0]
 801766a:	6992      	ldr	r2, [r2, #24]
 801766c:	430a      	orrs	r2, r1
 801766e:	431a      	orrs	r2, r3
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8017674:	2300      	movs	r3, #0
}
 8017676:	4618      	mov	r0, r3
 8017678:	370c      	adds	r7, #12
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr
 8017682:	bf00      	nop
 8017684:	ffff8000 	.word	0xffff8000

08017688 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017688:	b480      	push	{r7}
 801768a:	b085      	sub	sp, #20
 801768c:	af00      	add	r7, sp, #0
 801768e:	60f8      	str	r0, [r7, #12]
 8017690:	60b9      	str	r1, [r7, #8]
 8017692:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2b00      	cmp	r3, #0
 8017698:	d128      	bne.n	80176ec <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80176a2:	68bb      	ldr	r3, [r7, #8]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	1e59      	subs	r1, r3, #1
 80176a8:	68bb      	ldr	r3, [r7, #8]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	3b01      	subs	r3, #1
 80176ae:	011b      	lsls	r3, r3, #4
 80176b0:	4319      	orrs	r1, r3
 80176b2:	68bb      	ldr	r3, [r7, #8]
 80176b4:	689b      	ldr	r3, [r3, #8]
 80176b6:	3b01      	subs	r3, #1
 80176b8:	021b      	lsls	r3, r3, #8
 80176ba:	4319      	orrs	r1, r3
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	68db      	ldr	r3, [r3, #12]
 80176c0:	3b01      	subs	r3, #1
 80176c2:	031b      	lsls	r3, r3, #12
 80176c4:	4319      	orrs	r1, r3
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	691b      	ldr	r3, [r3, #16]
 80176ca:	3b01      	subs	r3, #1
 80176cc:	041b      	lsls	r3, r3, #16
 80176ce:	4319      	orrs	r1, r3
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	695b      	ldr	r3, [r3, #20]
 80176d4:	3b01      	subs	r3, #1
 80176d6:	051b      	lsls	r3, r3, #20
 80176d8:	4319      	orrs	r1, r3
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	699b      	ldr	r3, [r3, #24]
 80176de:	3b01      	subs	r3, #1
 80176e0:	061b      	lsls	r3, r3, #24
 80176e2:	430b      	orrs	r3, r1
 80176e4:	431a      	orrs	r2, r3
 80176e6:	68fb      	ldr	r3, [r7, #12]
 80176e8:	609a      	str	r2, [r3, #8]
 80176ea:	e02d      	b.n	8017748 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	689a      	ldr	r2, [r3, #8]
 80176f0:	4b19      	ldr	r3, [pc, #100]	@ (8017758 <FMC_SDRAM_Timing_Init+0xd0>)
 80176f2:	4013      	ands	r3, r2
 80176f4:	68ba      	ldr	r2, [r7, #8]
 80176f6:	68d2      	ldr	r2, [r2, #12]
 80176f8:	3a01      	subs	r2, #1
 80176fa:	0311      	lsls	r1, r2, #12
 80176fc:	68ba      	ldr	r2, [r7, #8]
 80176fe:	6952      	ldr	r2, [r2, #20]
 8017700:	3a01      	subs	r2, #1
 8017702:	0512      	lsls	r2, r2, #20
 8017704:	430a      	orrs	r2, r1
 8017706:	431a      	orrs	r2, r3
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	68db      	ldr	r3, [r3, #12]
 8017710:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	1e59      	subs	r1, r3, #1
 801771a:	68bb      	ldr	r3, [r7, #8]
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	3b01      	subs	r3, #1
 8017720:	011b      	lsls	r3, r3, #4
 8017722:	4319      	orrs	r1, r3
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	689b      	ldr	r3, [r3, #8]
 8017728:	3b01      	subs	r3, #1
 801772a:	021b      	lsls	r3, r3, #8
 801772c:	4319      	orrs	r1, r3
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	691b      	ldr	r3, [r3, #16]
 8017732:	3b01      	subs	r3, #1
 8017734:	041b      	lsls	r3, r3, #16
 8017736:	4319      	orrs	r1, r3
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	699b      	ldr	r3, [r3, #24]
 801773c:	3b01      	subs	r3, #1
 801773e:	061b      	lsls	r3, r3, #24
 8017740:	430b      	orrs	r3, r1
 8017742:	431a      	orrs	r2, r3
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8017748:	2300      	movs	r3, #0
}
 801774a:	4618      	mov	r0, r3
 801774c:	3714      	adds	r7, #20
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	ff0f0fff 	.word	0xff0f0fff

0801775c <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 801775c:	b480      	push	{r7}
 801775e:	b083      	sub	sp, #12
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
 8017764:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	683a      	ldr	r2, [r7, #0]
 801776a:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 801776e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	683a      	ldr	r2, [r7, #0]
 8017776:	3202      	adds	r2, #2
 8017778:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 801777c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2200      	movs	r2, #0
 8017784:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2200      	movs	r2, #0
 801778a:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	2200      	movs	r2, #0
 8017790:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8017792:	2300      	movs	r3, #0
}
 8017794:	4618      	mov	r0, r3
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr

080177a0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80177a0:	b480      	push	{r7}
 80177a2:	b085      	sub	sp, #20
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	691a      	ldr	r2, [r3, #16]
 80177b0:	4b0c      	ldr	r3, [pc, #48]	@ (80177e4 <FMC_SDRAM_SendCommand+0x44>)
 80177b2:	4013      	ands	r3, r2
 80177b4:	68ba      	ldr	r2, [r7, #8]
 80177b6:	6811      	ldr	r1, [r2, #0]
 80177b8:	68ba      	ldr	r2, [r7, #8]
 80177ba:	6852      	ldr	r2, [r2, #4]
 80177bc:	4311      	orrs	r1, r2
 80177be:	68ba      	ldr	r2, [r7, #8]
 80177c0:	6892      	ldr	r2, [r2, #8]
 80177c2:	3a01      	subs	r2, #1
 80177c4:	0152      	lsls	r2, r2, #5
 80177c6:	4311      	orrs	r1, r2
 80177c8:	68ba      	ldr	r2, [r7, #8]
 80177ca:	68d2      	ldr	r2, [r2, #12]
 80177cc:	0252      	lsls	r2, r2, #9
 80177ce:	430a      	orrs	r2, r1
 80177d0:	431a      	orrs	r2, r3
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80177d6:	2300      	movs	r3, #0
}
 80177d8:	4618      	mov	r0, r3
 80177da:	3714      	adds	r7, #20
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr
 80177e4:	ffc00000 	.word	0xffc00000

080177e8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80177e8:	b480      	push	{r7}
 80177ea:	b083      	sub	sp, #12
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
 80177f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	695a      	ldr	r2, [r3, #20]
 80177f6:	4b07      	ldr	r3, [pc, #28]	@ (8017814 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80177f8:	4013      	ands	r3, r2
 80177fa:	683a      	ldr	r2, [r7, #0]
 80177fc:	0052      	lsls	r2, r2, #1
 80177fe:	431a      	orrs	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8017804:	2300      	movs	r3, #0
}
 8017806:	4618      	mov	r0, r3
 8017808:	370c      	adds	r7, #12
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr
 8017812:	bf00      	nop
 8017814:	ffffc001 	.word	0xffffc001

08017818 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8017818:	8880      	ldrh	r0, [r0, #4]
 801781a:	4770      	bx	lr

0801781c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801781c:	2300      	movs	r3, #0
 801781e:	8083      	strh	r3, [r0, #4]
 8017820:	4770      	bx	lr
	...

08017824 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8017824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017826:	6803      	ldr	r3, [r0, #0]
 8017828:	460e      	mov	r6, r1
 801782a:	2100      	movs	r1, #0
 801782c:	4605      	mov	r5, r0
 801782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017830:	4798      	blx	r3
 8017832:	4604      	mov	r4, r0
 8017834:	682b      	ldr	r3, [r5, #0]
 8017836:	4628      	mov	r0, r5
 8017838:	1b34      	subs	r4, r6, r4
 801783a:	6a1b      	ldr	r3, [r3, #32]
 801783c:	b2a4      	uxth	r4, r4
 801783e:	4798      	blx	r3
 8017840:	88ab      	ldrh	r3, [r5, #4]
 8017842:	fbb4 f4f0 	udiv	r4, r4, r0
 8017846:	42a3      	cmp	r3, r4
 8017848:	d805      	bhi.n	8017856 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 801784a:	4b0e      	ldr	r3, [pc, #56]	@ (8017884 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 801784c:	211e      	movs	r1, #30
 801784e:	4a0e      	ldr	r2, [pc, #56]	@ (8017888 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8017850:	480e      	ldr	r0, [pc, #56]	@ (801788c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8017852:	f013 fb89 	bl	802af68 <__assert_func>
 8017856:	682b      	ldr	r3, [r5, #0]
 8017858:	2100      	movs	r1, #0
 801785a:	4628      	mov	r0, r5
 801785c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801785e:	4798      	blx	r3
 8017860:	682b      	ldr	r3, [r5, #0]
 8017862:	4607      	mov	r7, r0
 8017864:	4628      	mov	r0, r5
 8017866:	6a1b      	ldr	r3, [r3, #32]
 8017868:	4798      	blx	r3
 801786a:	1bf3      	subs	r3, r6, r7
 801786c:	b29b      	uxth	r3, r3
 801786e:	fbb3 f2f0 	udiv	r2, r3, r0
 8017872:	fb02 3010 	mls	r0, r2, r0, r3
 8017876:	b118      	cbz	r0, 8017880 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8017878:	4b05      	ldr	r3, [pc, #20]	@ (8017890 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801787a:	211f      	movs	r1, #31
 801787c:	4a02      	ldr	r2, [pc, #8]	@ (8017888 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801787e:	e7e7      	b.n	8017850 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8017880:	4620      	mov	r0, r4
 8017882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017884:	0802d8a4 	.word	0x0802d8a4
 8017888:	0802da12 	.word	0x0802da12
 801788c:	0802d8b9 	.word	0x0802d8b9
 8017890:	0802d8e7 	.word	0x0802d8e7

08017894 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8017894:	b538      	push	{r3, r4, r5, lr}
 8017896:	6803      	ldr	r3, [r0, #0]
 8017898:	460d      	mov	r5, r1
 801789a:	4604      	mov	r4, r0
 801789c:	6a1b      	ldr	r3, [r3, #32]
 801789e:	4798      	blx	r3
 80178a0:	4285      	cmp	r5, r0
 80178a2:	d905      	bls.n	80178b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 80178a4:	4b0c      	ldr	r3, [pc, #48]	@ (80178d8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 80178a6:	2130      	movs	r1, #48	@ 0x30
 80178a8:	4a0c      	ldr	r2, [pc, #48]	@ (80178dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80178aa:	480d      	ldr	r0, [pc, #52]	@ (80178e0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 80178ac:	f013 fb5c 	bl	802af68 <__assert_func>
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	4620      	mov	r0, r4
 80178b4:	88a5      	ldrh	r5, [r4, #4]
 80178b6:	69db      	ldr	r3, [r3, #28]
 80178b8:	4798      	blx	r3
 80178ba:	4285      	cmp	r5, r0
 80178bc:	d303      	bcc.n	80178c6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 80178be:	4b09      	ldr	r3, [pc, #36]	@ (80178e4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 80178c0:	2131      	movs	r1, #49	@ 0x31
 80178c2:	4a06      	ldr	r2, [pc, #24]	@ (80178dc <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 80178c4:	e7f1      	b.n	80178aa <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 80178c6:	6823      	ldr	r3, [r4, #0]
 80178c8:	4620      	mov	r0, r4
 80178ca:	88a1      	ldrh	r1, [r4, #4]
 80178cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80178ce:	4798      	blx	r3
 80178d0:	88a3      	ldrh	r3, [r4, #4]
 80178d2:	3301      	adds	r3, #1
 80178d4:	80a3      	strh	r3, [r4, #4]
 80178d6:	bd38      	pop	{r3, r4, r5, pc}
 80178d8:	0802d961 	.word	0x0802d961
 80178dc:	0802da55 	.word	0x0802da55
 80178e0:	0802d8b9 	.word	0x0802d8b9
 80178e4:	0802d978 	.word	0x0802d978

080178e8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80178e8:	b570      	push	{r4, r5, r6, lr}
 80178ea:	6803      	ldr	r3, [r0, #0]
 80178ec:	4616      	mov	r6, r2
 80178ee:	4604      	mov	r4, r0
 80178f0:	460d      	mov	r5, r1
 80178f2:	6a1b      	ldr	r3, [r3, #32]
 80178f4:	4798      	blx	r3
 80178f6:	4286      	cmp	r6, r0
 80178f8:	d905      	bls.n	8017906 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 80178fa:	4b06      	ldr	r3, [pc, #24]	@ (8017914 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 80178fc:	213a      	movs	r1, #58	@ 0x3a
 80178fe:	4a06      	ldr	r2, [pc, #24]	@ (8017918 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8017900:	4806      	ldr	r0, [pc, #24]	@ (801791c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8017902:	f013 fb31 	bl	802af68 <__assert_func>
 8017906:	6823      	ldr	r3, [r4, #0]
 8017908:	4629      	mov	r1, r5
 801790a:	4620      	mov	r0, r4
 801790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801790e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017912:	4718      	bx	r3
 8017914:	0802d961 	.word	0x0802d961
 8017918:	0802d9c8 	.word	0x0802d9c8
 801791c:	0802d8b9 	.word	0x0802d8b9

08017920 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8017920:	4770      	bx	lr
	...

08017924 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8017924:	4a02      	ldr	r2, [pc, #8]	@ (8017930 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8017926:	6002      	str	r2, [r0, #0]
 8017928:	2200      	movs	r2, #0
 801792a:	8082      	strh	r2, [r0, #4]
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop
 8017930:	0802d99c 	.word	0x0802d99c

08017934 <_ZN8touchgfx9Container13getFirstChildEv>:
 8017934:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8017936:	4770      	bx	lr

08017938 <_ZNK8touchgfx12TextProgress12getTypedTextEv>:
 8017938:	4a02      	ldr	r2, [pc, #8]	@ (8017944 <_ZNK8touchgfx12TextProgress12getTypedTextEv+0xc>)
 801793a:	6002      	str	r2, [r0, #0]
 801793c:	f8b1 20e0 	ldrh.w	r2, [r1, #224]	@ 0xe0
 8017940:	8082      	strh	r2, [r0, #4]
 8017942:	4770      	bx	lr
 8017944:	0802d340 	.word	0x0802d340

08017948 <_ZN8touchgfx12TextProgress8setColorENS_9colortypeE>:
 8017948:	f8c0 10e4 	str.w	r1, [r0, #228]	@ 0xe4
 801794c:	4770      	bx	lr

0801794e <_ZNK8touchgfx12TextProgress8getColorEv>:
 801794e:	f8d0 00e4 	ldr.w	r0, [r0, #228]	@ 0xe4
 8017952:	4770      	bx	lr

08017954 <_ZN8touchgfx12TextProgress19setNumberOfDecimalsEt>:
 8017954:	2902      	cmp	r1, #2
 8017956:	b570      	push	{r4, r5, r6, lr}
 8017958:	bf28      	it	cs
 801795a:	2102      	movcs	r1, #2
 801795c:	6803      	ldr	r3, [r0, #0]
 801795e:	4604      	mov	r4, r0
 8017960:	f8a0 1106 	strh.w	r1, [r0, #262]	@ 0x106
 8017964:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8017968:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801796c:	4798      	blx	r3
 801796e:	462b      	mov	r3, r5
 8017970:	4601      	mov	r1, r0
 8017972:	4620      	mov	r0, r4
 8017974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017978:	4718      	bx	r3

0801797a <_ZNK8touchgfx12TextProgress19getNumberOfDecimalsEv>:
 801797a:	f8b0 0106 	ldrh.w	r0, [r0, #262]	@ 0x106
 801797e:	4770      	bx	lr

08017980 <_ZN8touchgfx12TextProgress12setTypedTextERKNS_9TypedTextE>:
 8017980:	30b4      	adds	r0, #180	@ 0xb4
 8017982:	f002 b9fa 	b.w	8019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>

08017986 <_ZN8touchgfx12TextProgress8setAlphaEh>:
 8017986:	b538      	push	{r3, r4, r5, lr}
 8017988:	4604      	mov	r4, r0
 801798a:	460d      	mov	r5, r1
 801798c:	f000 f8e7 	bl	8017b5e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 8017990:	f884 50ea 	strb.w	r5, [r4, #234]	@ 0xea
 8017994:	bd38      	pop	{r3, r4, r5, pc}
	...

08017998 <_ZN8touchgfx12TextProgress8setValueEi>:
 8017998:	b530      	push	{r4, r5, lr}
 801799a:	b087      	sub	sp, #28
 801799c:	4604      	mov	r4, r0
 801799e:	f000 f927 	bl	8017bf0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 80179a2:	4b1d      	ldr	r3, [pc, #116]	@ (8017a18 <_ZN8touchgfx12TextProgress8setValueEi+0x80>)
 80179a4:	f104 05f4 	add.w	r5, r4, #244	@ 0xf4
 80179a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80179ac:	ab06      	add	r3, sp, #24
 80179ae:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80179b2:	f8b4 3106 	ldrh.w	r3, [r4, #262]	@ 0x106
 80179b6:	aa06      	add	r2, sp, #24
 80179b8:	4620      	mov	r0, r4
 80179ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80179be:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 80179c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80179c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80179ca:	0089      	lsls	r1, r1, #2
 80179cc:	b289      	uxth	r1, r1
 80179ce:	f000 f9a2 	bl	8017d16 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 80179d2:	f8b4 1106 	ldrh.w	r1, [r4, #262]	@ 0x106
 80179d6:	b1c1      	cbz	r1, 8017a0a <_ZN8touchgfx12TextProgress8setValueEi+0x72>
 80179d8:	ab06      	add	r3, sp, #24
 80179da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80179de:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80179e2:	fb90 f3f2 	sdiv	r3, r0, r2
 80179e6:	fb02 0213 	mls	r2, r2, r3, r0
 80179ea:	4628      	mov	r0, r5
 80179ec:	e9cd 1200 	strd	r1, r2, [sp]
 80179f0:	4a0a      	ldr	r2, [pc, #40]	@ (8017a1c <_ZN8touchgfx12TextProgress8setValueEi+0x84>)
 80179f2:	2108      	movs	r1, #8
 80179f4:	f007 f966 	bl	801ecc4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80179f8:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 80179fc:	f8c4 50f0 	str.w	r5, [r4, #240]	@ 0xf0
 8017a00:	b007      	add	sp, #28
 8017a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a06:	f005 b90b 	b.w	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	4a04      	ldr	r2, [pc, #16]	@ (8017a20 <_ZN8touchgfx12TextProgress8setValueEi+0x88>)
 8017a0e:	2108      	movs	r1, #8
 8017a10:	4628      	mov	r0, r5
 8017a12:	f007 f957 	bl	801ecc4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8017a16:	e7ef      	b.n	80179f8 <_ZN8touchgfx12TextProgress8setValueEi+0x60>
 8017a18:	0802cd28 	.word	0x0802cd28
 8017a1c:	0802da93 	.word	0x0802da93
 8017a20:	0802da9b 	.word	0x0802da9b

08017a24 <_ZN8touchgfx12TextProgress28setProgressIndicatorPositionEssss>:
 8017a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a28:	461d      	mov	r5, r3
 8017a2a:	f100 07b4 	add.w	r7, r0, #180	@ 0xb4
 8017a2e:	2300      	movs	r3, #0
 8017a30:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8017a34:	4691      	mov	r9, r2
 8017a36:	4604      	mov	r4, r0
 8017a38:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8017a3c:	4688      	mov	r8, r1
 8017a3e:	4638      	mov	r0, r7
 8017a40:	4629      	mov	r1, r5
 8017a42:	f7ec fb59 	bl	80040f8 <_ZN8touchgfx8Drawable8setWidthEs>
 8017a46:	4631      	mov	r1, r6
 8017a48:	4638      	mov	r0, r7
 8017a4a:	f7ec fb64 	bl	8004116 <_ZN8touchgfx8Drawable9setHeightEs>
 8017a4e:	9608      	str	r6, [sp, #32]
 8017a50:	462b      	mov	r3, r5
 8017a52:	464a      	mov	r2, r9
 8017a54:	4641      	mov	r1, r8
 8017a56:	4620      	mov	r0, r4
 8017a58:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a5c:	f000 b978 	b.w	8017d50 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>

08017a60 <_ZN8touchgfx12TextProgressC1Ev>:
 8017a60:	b510      	push	{r4, lr}
 8017a62:	4604      	mov	r4, r0
 8017a64:	f000 f9a0 	bl	8017da8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 8017a68:	2201      	movs	r2, #1
 8017a6a:	4b20      	ldr	r3, [pc, #128]	@ (8017aec <_ZN8touchgfx12TextProgressC1Ev+0x8c>)
 8017a6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017a70:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8017a74:	f884 20d9 	strb.w	r2, [r4, #217]	@ 0xd9
 8017a78:	4a1d      	ldr	r2, [pc, #116]	@ (8017af0 <_ZN8touchgfx12TextProgressC1Ev+0x90>)
 8017a7a:	6023      	str	r3, [r4, #0]
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	f8c4 20dc 	str.w	r2, [r4, #220]	@ 0xdc
 8017a82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a86:	f8a4 30b8 	strh.w	r3, [r4, #184]	@ 0xb8
 8017a8a:	f8a4 20e0 	strh.w	r2, [r4, #224]	@ 0xe0
 8017a8e:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8017a92:	f8a4 30ba 	strh.w	r3, [r4, #186]	@ 0xba
 8017a96:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
 8017a9a:	4a16      	ldr	r2, [pc, #88]	@ (8017af4 <_ZN8touchgfx12TextProgressC1Ev+0x94>)
 8017a9c:	f8a4 30bc 	strh.w	r3, [r4, #188]	@ 0xbc
 8017aa0:	f8a4 30be 	strh.w	r3, [r4, #190]	@ 0xbe
 8017aa4:	f8a4 30c0 	strh.w	r3, [r4, #192]	@ 0xc0
 8017aa8:	f8a4 30c2 	strh.w	r3, [r4, #194]	@ 0xc2
 8017aac:	f8a4 30c4 	strh.w	r3, [r4, #196]	@ 0xc4
 8017ab0:	f8a4 30c6 	strh.w	r3, [r4, #198]	@ 0xc6
 8017ab4:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8017ab8:	f8a4 30d4 	strh.w	r3, [r4, #212]	@ 0xd4
 8017abc:	f8a4 30d6 	strh.w	r3, [r4, #214]	@ 0xd6
 8017ac0:	f884 30d8 	strb.w	r3, [r4, #216]	@ 0xd8
 8017ac4:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 8017ac8:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8017acc:	f884 30ed 	strb.w	r3, [r4, #237]	@ 0xed
 8017ad0:	f8c4 20b4 	str.w	r2, [r4, #180]	@ 0xb4
 8017ad4:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8017ad8:	f8a4 3106 	strh.w	r3, [r4, #262]	@ 0x106
 8017adc:	f8a4 30f4 	strh.w	r3, [r4, #244]	@ 0xf4
 8017ae0:	e9c4 3332 	strd	r3, r3, [r4, #200]	@ 0xc8
 8017ae4:	f000 fa1e 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017ae8:	4620      	mov	r0, r4
 8017aea:	bd10      	pop	{r4, pc}
 8017aec:	0802daa8 	.word	0x0802daa8
 8017af0:	0802d340 	.word	0x0802d340
 8017af4:	0802efe0 	.word	0x0802efe0

08017af8 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 8017af8:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 8017afc:	4770      	bx	lr

08017afe <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 8017afe:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 8017b02:	4770      	bx	lr

08017b04 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 8017b04:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 8017b08:	4770      	bx	lr

08017b0a <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 8017b0a:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 8017b0e:	4770      	bx	lr

08017b10 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 8017b10:	b510      	push	{r4, lr}
 8017b12:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8017b16:	600c      	str	r4, [r1, #0]
 8017b18:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8017b1c:	6011      	str	r1, [r2, #0]
 8017b1e:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8017b22:	801a      	strh	r2, [r3, #0]
 8017b24:	9b02      	ldr	r3, [sp, #8]
 8017b26:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 8017b2a:	801a      	strh	r2, [r3, #0]
 8017b2c:	bd10      	pop	{r4, pc}

08017b2e <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 8017b2e:	b510      	push	{r4, lr}
 8017b30:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 8017b34:	600c      	str	r4, [r1, #0]
 8017b36:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8017b3a:	6011      	str	r1, [r2, #0]
 8017b3c:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 8017b40:	801a      	strh	r2, [r3, #0]
 8017b42:	bd10      	pop	{r4, pc}

08017b44 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 8017b44:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8017b48:	600b      	str	r3, [r1, #0]
 8017b4a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8017b4e:	6013      	str	r3, [r2, #0]
 8017b50:	4770      	bx	lr

08017b52 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 8017b52:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 8017b56:	4770      	bx	lr

08017b58 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 8017b58:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8017b5c:	4770      	bx	lr

08017b5e <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 8017b5e:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 8017b62:	4770      	bx	lr

08017b64 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 8017b64:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 8017b68:	4770      	bx	lr

08017b6a <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 8017b6a:	b570      	push	{r4, r5, r6, lr}
 8017b6c:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 8017b70:	4604      	mov	r4, r0
 8017b72:	4616      	mov	r6, r2
 8017b74:	428d      	cmp	r5, r1
 8017b76:	bfb8      	it	lt
 8017b78:	460d      	movlt	r5, r1
 8017b7a:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 8017b7e:	428d      	cmp	r5, r1
 8017b80:	bfa8      	it	ge
 8017b82:	460d      	movge	r5, r1
 8017b84:	b99a      	cbnz	r2, 8017bae <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 8017b86:	6803      	ldr	r3, [r0, #0]
 8017b88:	4629      	mov	r1, r5
 8017b8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017b8e:	4798      	blx	r3
 8017b90:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017b94:	b358      	cbz	r0, 8017bee <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017b96:	6803      	ldr	r3, [r0, #0]
 8017b98:	68db      	ldr	r3, [r3, #12]
 8017b9a:	4798      	blx	r3
 8017b9c:	b338      	cbz	r0, 8017bee <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x84>
 8017b9e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017ba2:	4621      	mov	r1, r4
 8017ba4:	6803      	ldr	r3, [r0, #0]
 8017ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017baa:	689b      	ldr	r3, [r3, #8]
 8017bac:	4718      	bx	r3
 8017bae:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	dd07      	ble.n	8017bc6 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5c>
 8017bb6:	f004 f869 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8017bba:	4621      	mov	r1, r4
 8017bbc:	f004 f89e 	bl	801bcfc <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8017bc6:	6823      	ldr	r3, [r4, #0]
 8017bc8:	4620      	mov	r0, r4
 8017bca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017bce:	4798      	blx	r3
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 8017bd6:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8017bda:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 8017bde:	f004 f855 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8017be2:	4621      	mov	r1, r4
 8017be4:	f004 f858 	bl	801bc98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
 8017be8:	2301      	movs	r3, #1
 8017bea:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 8017bee:	bd70      	pop	{r4, r5, r6, pc}

08017bf0 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 8017bf0:	b510      	push	{r4, lr}
 8017bf2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	4299      	cmp	r1, r3
 8017bfa:	bfb8      	it	lt
 8017bfc:	4619      	movlt	r1, r3
 8017bfe:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8017c02:	4299      	cmp	r1, r3
 8017c04:	bfa8      	it	ge
 8017c06:	4619      	movge	r1, r3
 8017c08:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8017c0c:	428b      	cmp	r3, r1
 8017c0e:	d010      	beq.n	8017c32 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017c10:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 8017c14:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 8017c18:	b158      	cbz	r0, 8017c32 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017c1a:	6803      	ldr	r3, [r0, #0]
 8017c1c:	68db      	ldr	r3, [r3, #12]
 8017c1e:	4798      	blx	r3
 8017c20:	b138      	cbz	r0, 8017c32 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 8017c22:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8017c26:	4621      	mov	r1, r4
 8017c28:	6803      	ldr	r3, [r0, #0]
 8017c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c2e:	689b      	ldr	r3, [r3, #8]
 8017c30:	4718      	bx	r3
 8017c32:	bd10      	pop	{r4, pc}

08017c34 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 8017c34:	4291      	cmp	r1, r2
 8017c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	460e      	mov	r6, r1
 8017c3e:	4615      	mov	r5, r2
 8017c40:	4698      	mov	r8, r3
 8017c42:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8017c46:	db05      	blt.n	8017c54 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x20>
 8017c48:	4b11      	ldr	r3, [pc, #68]	@ (8017c90 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x5c>)
 8017c4a:	214b      	movs	r1, #75	@ 0x4b
 8017c4c:	4a11      	ldr	r2, [pc, #68]	@ (8017c94 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017c4e:	4812      	ldr	r0, [pc, #72]	@ (8017c98 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x64>)
 8017c50:	f013 f98a 	bl	802af68 <__assert_func>
 8017c54:	6803      	ldr	r3, [r0, #0]
 8017c56:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 8017c5a:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 8017c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017c62:	4798      	blx	r3
 8017c64:	f1b8 0f00 	cmp.w	r8, #0
 8017c68:	d10c      	bne.n	8017c84 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x50>
 8017c6a:	1bad      	subs	r5, r5, r6
 8017c6c:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 8017c70:	f8b4 3090 	ldrh.w	r3, [r4, #144]	@ 0x90
 8017c74:	f8a4 7092 	strh.w	r7, [r4, #146]	@ 0x92
 8017c78:	42bb      	cmp	r3, r7
 8017c7a:	d806      	bhi.n	8017c8a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x56>
 8017c7c:	4b07      	ldr	r3, [pc, #28]	@ (8017c9c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x68>)
 8017c7e:	2158      	movs	r1, #88	@ 0x58
 8017c80:	4a04      	ldr	r2, [pc, #16]	@ (8017c94 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x60>)
 8017c82:	e7e4      	b.n	8017c4e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x1a>
 8017c84:	f8a4 8090 	strh.w	r8, [r4, #144]	@ 0x90
 8017c88:	e7f2      	b.n	8017c70 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x3c>
 8017c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c8e:	bf00      	nop
 8017c90:	0802db88 	.word	0x0802db88
 8017c94:	0802dcd4 	.word	0x0802dcd4
 8017c98:	0802db92 	.word	0x0802db92
 8017c9c:	0802dbe9 	.word	0x0802dbe9

08017ca0 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 8017ca0:	b570      	push	{r4, r5, r6, lr}
 8017ca2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8017ca6:	4604      	mov	r4, r0
 8017ca8:	b3a3      	cbz	r3, 8017d14 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017caa:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 8017cae:	2100      	movs	r1, #0
 8017cb0:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 8017cb4:	3001      	adds	r0, #1
 8017cb6:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 8017cba:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 8017cbe:	b280      	uxth	r0, r0
 8017cc0:	1ad2      	subs	r2, r2, r3
 8017cc2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8017cc6:	b212      	sxth	r2, r2
 8017cc8:	47a8      	blx	r5
 8017cca:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8017cce:	6823      	ldr	r3, [r4, #0]
 8017cd0:	4401      	add	r1, r0
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017cd8:	4798      	blx	r3
 8017cda:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	db18      	blt.n	8017d14 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017ce2:	2500      	movs	r5, #0
 8017ce4:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8017ce8:	f003 ffd0 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8017cec:	4621      	mov	r1, r4
 8017cee:	f004 f805 	bl	801bcfc <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
 8017cf2:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017cf6:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8017cfa:	b158      	cbz	r0, 8017d14 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017cfc:	6803      	ldr	r3, [r0, #0]
 8017cfe:	68db      	ldr	r3, [r3, #12]
 8017d00:	4798      	blx	r3
 8017d02:	b138      	cbz	r0, 8017d14 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x74>
 8017d04:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8017d08:	4621      	mov	r1, r4
 8017d0a:	6803      	ldr	r3, [r0, #0]
 8017d0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d10:	689b      	ldr	r3, [r3, #8]
 8017d12:	4718      	bx	r3
 8017d14:	bd70      	pop	{r4, r5, r6, pc}

08017d16 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 8017d16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d18:	4604      	mov	r4, r0
 8017d1a:	460d      	mov	r5, r1
 8017d1c:	b1a9      	cbz	r1, 8017d4a <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 8017d1e:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 8017d22:	ab01      	add	r3, sp, #4
 8017d24:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 8017d28:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8017d2c:	1b89      	subs	r1, r1, r6
 8017d2e:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 8017d32:	1a12      	subs	r2, r2, r0
 8017d34:	1a38      	subs	r0, r7, r0
 8017d36:	f005 f912 	bl	801cf5e <_ZN8touchgfx6muldivElllRl>
 8017d3a:	4629      	mov	r1, r5
 8017d3c:	ab01      	add	r3, sp, #4
 8017d3e:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 8017d42:	4430      	add	r0, r6
 8017d44:	f005 f90b 	bl	801cf5e <_ZN8touchgfx6muldivElllRl>
 8017d48:	b285      	uxth	r5, r0
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	b003      	add	sp, #12
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d50 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 8017d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d54:	4604      	mov	r4, r0
 8017d56:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 8017d5a:	4698      	mov	r8, r3
 8017d5c:	460e      	mov	r6, r1
 8017d5e:	4615      	mov	r5, r2
 8017d60:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 8017d64:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 8017d68:	4619      	mov	r1, r3
 8017d6a:	463a      	mov	r2, r7
 8017d6c:	3058      	adds	r0, #88	@ 0x58
 8017d6e:	f7ec fa01 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017d72:	4446      	add	r6, r8
 8017d74:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8017d78:	443d      	add	r5, r7
 8017d7a:	42b3      	cmp	r3, r6
 8017d7c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017d80:	bfb8      	it	lt
 8017d82:	8126      	strhlt	r6, [r4, #8]
 8017d84:	42ab      	cmp	r3, r5
 8017d86:	bfb8      	it	lt
 8017d88:	8165      	strhlt	r5, [r4, #10]
 8017d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d8e <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 8017d8e:	b510      	push	{r4, lr}
 8017d90:	4604      	mov	r4, r0
 8017d92:	302c      	adds	r0, #44	@ 0x2c
 8017d94:	f002 fa6b 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017d98:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 8017da2:	f7ec f9e7 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017da6:	bd10      	pop	{r4, pc}

08017da8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 8017da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017daa:	4604      	mov	r4, r0
 8017dac:	2500      	movs	r5, #0
 8017dae:	f7ec f8c5 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8017db2:	4b24      	ldr	r3, [pc, #144]	@ (8017e44 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 8017db4:	4626      	mov	r6, r4
 8017db6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8017dba:	2226      	movs	r2, #38	@ 0x26
 8017dbc:	4629      	mov	r1, r5
 8017dbe:	62a5      	str	r5, [r4, #40]	@ 0x28
 8017dc0:	f846 3b2c 	str.w	r3, [r6], #44
 8017dc4:	4630      	mov	r0, r6
 8017dc6:	f8ad 7004 	strh.w	r7, [sp, #4]
 8017dca:	f013 fad4 	bl	802b376 <memset>
 8017dce:	4630      	mov	r0, r6
 8017dd0:	f7ec f8b4 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8017dd4:	a902      	add	r1, sp, #8
 8017dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8017e48 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 8017dd8:	4630      	mov	r0, r6
 8017dda:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 8017dde:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 8017de2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017de4:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 8017de8:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 8017dec:	f002 fa3f 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8017df0:	4638      	mov	r0, r7
 8017df2:	f7ec f8a3 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8017df6:	4b15      	ldr	r3, [pc, #84]	@ (8017e4c <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 8017df8:	4629      	mov	r1, r5
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8017dfe:	2364      	movs	r3, #100	@ 0x64
 8017e00:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8017e04:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8017e08:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 8017e0c:	4b10      	ldr	r3, [pc, #64]	@ (8017e50 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 8017e0e:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 8017e12:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8017e16:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 8017e1a:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 8017e1e:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8017e22:	f7ec f92d 	bl	8004080 <_ZN8touchgfx8Drawable4setXEs>
 8017e26:	4629      	mov	r1, r5
 8017e28:	4630      	mov	r0, r6
 8017e2a:	f7ec f938 	bl	800409e <_ZN8touchgfx8Drawable4setYEs>
 8017e2e:	4631      	mov	r1, r6
 8017e30:	4620      	mov	r0, r4
 8017e32:	f000 f877 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017e36:	4620      	mov	r0, r4
 8017e38:	4639      	mov	r1, r7
 8017e3a:	f000 f873 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8017e3e:	4620      	mov	r0, r4
 8017e40:	b003      	add	sp, #12
 8017e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e44:	0802dc0c 	.word	0x0802dc0c
 8017e48:	0802f0ec 	.word	0x0802f0ec
 8017e4c:	0802de00 	.word	0x0802de00
 8017e50:	0801d627 	.word	0x0801d627

08017e54 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017e54:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017e56:	2000      	movs	r0, #0
 8017e58:	b12b      	cbz	r3, 8017e66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017e5a:	b920      	cbnz	r0, 8017e66 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8017e5c:	1a5a      	subs	r2, r3, r1
 8017e5e:	699b      	ldr	r3, [r3, #24]
 8017e60:	4250      	negs	r0, r2
 8017e62:	4150      	adcs	r0, r2
 8017e64:	e7f8      	b.n	8017e58 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017e66:	4770      	bx	lr

08017e68 <_ZN8touchgfx9Container9removeAllEv>:
 8017e68:	2200      	movs	r2, #0
 8017e6a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017e6c:	b123      	cbz	r3, 8017e78 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8017e6e:	6999      	ldr	r1, [r3, #24]
 8017e70:	6281      	str	r1, [r0, #40]	@ 0x28
 8017e72:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8017e76:	e7f8      	b.n	8017e6a <_ZN8touchgfx9Container9removeAllEv+0x2>
 8017e78:	4770      	bx	lr

08017e7a <_ZN8touchgfx9Container6unlinkEv>:
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	6283      	str	r3, [r0, #40]	@ 0x28
 8017e7e:	4770      	bx	lr

08017e80 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8017e80:	2200      	movs	r2, #0
 8017e82:	8002      	strh	r2, [r0, #0]
 8017e84:	8042      	strh	r2, [r0, #2]
 8017e86:	8082      	strh	r2, [r0, #4]
 8017e88:	80c2      	strh	r2, [r0, #6]
 8017e8a:	4770      	bx	lr

08017e8c <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8017e8c:	b570      	push	{r4, r5, r6, lr}
 8017e8e:	460d      	mov	r5, r1
 8017e90:	4616      	mov	r6, r2
 8017e92:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017e94:	b13c      	cbz	r4, 8017ea6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8017e96:	6823      	ldr	r3, [r4, #0]
 8017e98:	4620      	mov	r0, r4
 8017e9a:	4632      	mov	r2, r6
 8017e9c:	4629      	mov	r1, r5
 8017e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ea0:	4798      	blx	r3
 8017ea2:	69a4      	ldr	r4, [r4, #24]
 8017ea4:	e7f6      	b.n	8017e94 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8017ea6:	bd70      	pop	{r4, r5, r6, pc}

08017ea8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	460d      	mov	r5, r1
 8017eac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017eae:	b134      	cbz	r4, 8017ebe <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8017eb0:	682b      	ldr	r3, [r5, #0]
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	4628      	mov	r0, r5
 8017eb6:	689b      	ldr	r3, [r3, #8]
 8017eb8:	4798      	blx	r3
 8017eba:	69a4      	ldr	r4, [r4, #24]
 8017ebc:	e7f7      	b.n	8017eae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8017ebe:	bd38      	pop	{r3, r4, r5, pc}

08017ec0 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017ec0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017ec2:	b19b      	cbz	r3, 8017eec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017ec4:	428b      	cmp	r3, r1
 8017ec6:	d109      	bne.n	8017edc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017ec8:	699a      	ldr	r2, [r3, #24]
 8017eca:	2100      	movs	r1, #0
 8017ecc:	6159      	str	r1, [r3, #20]
 8017ece:	6282      	str	r2, [r0, #40]	@ 0x28
 8017ed0:	b902      	cbnz	r2, 8017ed4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017ed2:	4770      	bx	lr
 8017ed4:	6199      	str	r1, [r3, #24]
 8017ed6:	4770      	bx	lr
 8017ed8:	4613      	mov	r3, r2
 8017eda:	b13a      	cbz	r2, 8017eec <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017edc:	699a      	ldr	r2, [r3, #24]
 8017ede:	428a      	cmp	r2, r1
 8017ee0:	d1fa      	bne.n	8017ed8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017ee2:	698a      	ldr	r2, [r1, #24]
 8017ee4:	619a      	str	r2, [r3, #24]
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8017eec:	4770      	bx	lr

08017eee <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8017eee:	b410      	push	{r4}
 8017ef0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	b92b      	cbnz	r3, 8017f02 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017ef6:	6803      	ldr	r3, [r0, #0]
 8017ef8:	4611      	mov	r1, r2
 8017efa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8017f00:	4718      	bx	r3
 8017f02:	b941      	cbnz	r1, 8017f16 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017f04:	6193      	str	r3, [r2, #24]
 8017f06:	6282      	str	r2, [r0, #40]	@ 0x28
 8017f08:	6154      	str	r4, [r2, #20]
 8017f0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f0e:	4770      	bx	lr
 8017f10:	4603      	mov	r3, r0
 8017f12:	2800      	cmp	r0, #0
 8017f14:	d0f9      	beq.n	8017f0a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017f16:	4299      	cmp	r1, r3
 8017f18:	6998      	ldr	r0, [r3, #24]
 8017f1a:	d1f9      	bne.n	8017f10 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8017f1c:	6190      	str	r0, [r2, #24]
 8017f1e:	618a      	str	r2, [r1, #24]
 8017f20:	e7f2      	b.n	8017f08 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017f24:	4288      	cmp	r0, r1
 8017f26:	b508      	push	{r3, lr}
 8017f28:	d105      	bne.n	8017f36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 8017f2a:	4b11      	ldr	r3, [pc, #68]	@ (8017f70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 8017f2c:	2123      	movs	r1, #35	@ 0x23
 8017f2e:	4a11      	ldr	r2, [pc, #68]	@ (8017f74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017f30:	4811      	ldr	r0, [pc, #68]	@ (8017f78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017f32:	f013 f819 	bl	802af68 <__assert_func>
 8017f36:	694b      	ldr	r3, [r1, #20]
 8017f38:	b11b      	cbz	r3, 8017f42 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8017f3a:	4b10      	ldr	r3, [pc, #64]	@ (8017f7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 8017f3c:	2124      	movs	r1, #36	@ 0x24
 8017f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8017f74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017f40:	e7f6      	b.n	8017f30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017f42:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017f46:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8017f48:	b913      	cbnz	r3, 8017f50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8017f4a:	6281      	str	r1, [r0, #40]	@ 0x28
 8017f4c:	bd08      	pop	{r3, pc}
 8017f4e:	4613      	mov	r3, r2
 8017f50:	699a      	ldr	r2, [r3, #24]
 8017f52:	b12a      	cbz	r2, 8017f60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017f54:	428b      	cmp	r3, r1
 8017f56:	d1fa      	bne.n	8017f4e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017f58:	4b09      	ldr	r3, [pc, #36]	@ (8017f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017f5a:	2135      	movs	r1, #53	@ 0x35
 8017f5c:	4a05      	ldr	r2, [pc, #20]	@ (8017f74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017f5e:	e7e7      	b.n	8017f30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017f60:	428b      	cmp	r3, r1
 8017f62:	d103      	bne.n	8017f6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 8017f64:	4b06      	ldr	r3, [pc, #24]	@ (8017f80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8017f66:	2138      	movs	r1, #56	@ 0x38
 8017f68:	4a02      	ldr	r2, [pc, #8]	@ (8017f74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017f6a:	e7e1      	b.n	8017f30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017f6c:	6199      	str	r1, [r3, #24]
 8017f6e:	e7ed      	b.n	8017f4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8017f70:	0802dd2d 	.word	0x0802dd2d
 8017f74:	0802de84 	.word	0x0802de84
 8017f78:	0802dd59 	.word	0x0802dd59
 8017f7c:	0802dd8c 	.word	0x0802dd8c
 8017f80:	0802ddc2 	.word	0x0802ddc2

08017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8017f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f88:	461f      	mov	r7, r3
 8017f8a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8017f8e:	460d      	mov	r5, r1
 8017f90:	4616      	mov	r6, r2
 8017f92:	b103      	cbz	r3, 8017f96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8017f94:	6038      	str	r0, [r7, #0]
 8017f96:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8017f98:	b314      	cbz	r4, 8017fe0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8017f9a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8017f9e:	b1eb      	cbz	r3, 8017fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017fa0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8017fa4:	428d      	cmp	r5, r1
 8017fa6:	db19      	blt.n	8017fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017fa8:	b289      	uxth	r1, r1
 8017faa:	8923      	ldrh	r3, [r4, #8]
 8017fac:	440b      	add	r3, r1
 8017fae:	b21b      	sxth	r3, r3
 8017fb0:	429d      	cmp	r5, r3
 8017fb2:	da13      	bge.n	8017fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017fb4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8017fb8:	4296      	cmp	r6, r2
 8017fba:	db0f      	blt.n	8017fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017fbc:	b292      	uxth	r2, r2
 8017fbe:	8963      	ldrh	r3, [r4, #10]
 8017fc0:	4413      	add	r3, r2
 8017fc2:	b21b      	sxth	r3, r3
 8017fc4:	429e      	cmp	r6, r3
 8017fc6:	da09      	bge.n	8017fdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017fc8:	6823      	ldr	r3, [r4, #0]
 8017fca:	1ab2      	subs	r2, r6, r2
 8017fcc:	1a69      	subs	r1, r5, r1
 8017fce:	4620      	mov	r0, r4
 8017fd0:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017fd4:	b212      	sxth	r2, r2
 8017fd6:	463b      	mov	r3, r7
 8017fd8:	b209      	sxth	r1, r1
 8017fda:	47c0      	blx	r8
 8017fdc:	69a4      	ldr	r4, [r4, #24]
 8017fde:	e7db      	b.n	8017f98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017fe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe8:	4c6d      	ldr	r4, [pc, #436]	@ (80181a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8017fea:	b0a1      	sub	sp, #132	@ 0x84
 8017fec:	4606      	mov	r6, r0
 8017fee:	6824      	ldr	r4, [r4, #0]
 8017ff0:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8017ff2:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8017ff6:	2400      	movs	r4, #0
 8017ff8:	9303      	str	r3, [sp, #12]
 8017ffa:	802c      	strh	r4, [r5, #0]
 8017ffc:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8017ffe:	802c      	strh	r4, [r5, #0]
 8018000:	601c      	str	r4, [r3, #0]
 8018002:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8018006:	f7ff ffbd 	bl	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801800a:	f1b9 0f03 	cmp.w	r9, #3
 801800e:	f340 80c1 	ble.w	8018194 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8018012:	4631      	mov	r1, r6
 8018014:	a80c      	add	r0, sp, #48	@ 0x30
 8018016:	f004 fe9b 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801801a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801801e:	9306      	str	r3, [sp, #24]
 8018020:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018024:	9307      	str	r3, [sp, #28]
 8018026:	9b03      	ldr	r3, [sp, #12]
 8018028:	f8d3 a000 	ldr.w	sl, [r3]
 801802c:	f1ba 0f00 	cmp.w	sl, #0
 8018030:	f000 80b3 	beq.w	801819a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8018034:	4651      	mov	r1, sl
 8018036:	a810      	add	r0, sp, #64	@ 0x40
 8018038:	f004 fe8a 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801803c:	2002      	movs	r0, #2
 801803e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8018042:	9b01      	ldr	r3, [sp, #4]
 8018044:	9a06      	ldr	r2, [sp, #24]
 8018046:	fb91 f1f0 	sdiv	r1, r1, r0
 801804a:	189d      	adds	r5, r3, r2
 801804c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8018050:	9a07      	ldr	r2, [sp, #28]
 8018052:	4419      	add	r1, r3
 8018054:	9b02      	ldr	r3, [sp, #8]
 8018056:	4413      	add	r3, r2
 8018058:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801805c:	1a6d      	subs	r5, r5, r1
 801805e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8018062:	fb92 f2f0 	sdiv	r2, r2, r0
 8018066:	440a      	add	r2, r1
 8018068:	1a9b      	subs	r3, r3, r2
 801806a:	435b      	muls	r3, r3
 801806c:	fb05 3505 	mla	r5, r5, r5, r3
 8018070:	4f4c      	ldr	r7, [pc, #304]	@ (80181a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8018072:	ac10      	add	r4, sp, #64	@ 0x40
 8018074:	f1b9 0f0c 	cmp.w	r9, #12
 8018078:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801807a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801807c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801807e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018080:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8018082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018084:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8018088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801808c:	f04f 0303 	mov.w	r3, #3
 8018090:	bfd8      	it	le
 8018092:	f109 32ff 	addle.w	r2, r9, #4294967295
 8018096:	f04f 0400 	mov.w	r4, #0
 801809a:	f8cd 9000 	str.w	r9, [sp]
 801809e:	bfcc      	ite	gt
 80180a0:	4698      	movgt	r8, r3
 80180a2:	fb92 f8f3 	sdivle	r8, r2, r3
 80180a6:	1c63      	adds	r3, r4, #1
 80180a8:	aa10      	add	r2, sp, #64	@ 0x40
 80180aa:	f004 0401 	and.w	r4, r4, #1
 80180ae:	f04f 0b00 	mov.w	fp, #0
 80180b2:	9308      	str	r3, [sp, #32]
 80180b4:	9b00      	ldr	r3, [sp, #0]
 80180b6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80180ba:	fb93 f3f8 	sdiv	r3, r3, r8
 80180be:	3404      	adds	r4, #4
 80180c0:	b29b      	uxth	r3, r3
 80180c2:	9304      	str	r3, [sp, #16]
 80180c4:	9a04      	ldr	r2, [sp, #16]
 80180c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80180ca:	fb13 f302 	smulbb	r3, r3, r2
 80180ce:	9a01      	ldr	r2, [sp, #4]
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	1899      	adds	r1, r3, r2
 80180d4:	9305      	str	r3, [sp, #20]
 80180d6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80180da:	b209      	sxth	r1, r1
 80180dc:	4299      	cmp	r1, r3
 80180de:	db4d      	blt.n	801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180e0:	8932      	ldrh	r2, [r6, #8]
 80180e2:	4413      	add	r3, r2
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	4299      	cmp	r1, r3
 80180e8:	da48      	bge.n	801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80180ea:	9b04      	ldr	r3, [sp, #16]
 80180ec:	6827      	ldr	r7, [r4, #0]
 80180ee:	fb17 f703 	smulbb	r7, r7, r3
 80180f2:	9b02      	ldr	r3, [sp, #8]
 80180f4:	b2bf      	uxth	r7, r7
 80180f6:	18fa      	adds	r2, r7, r3
 80180f8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80180fc:	b212      	sxth	r2, r2
 80180fe:	429a      	cmp	r2, r3
 8018100:	db3c      	blt.n	801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018102:	8970      	ldrh	r0, [r6, #10]
 8018104:	4403      	add	r3, r0
 8018106:	b21b      	sxth	r3, r3
 8018108:	429a      	cmp	r2, r3
 801810a:	da37      	bge.n	801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801810c:	2300      	movs	r3, #0
 801810e:	4630      	mov	r0, r6
 8018110:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018112:	ab0b      	add	r3, sp, #44	@ 0x2c
 8018114:	f7ff ff36 	bl	8017f84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8018118:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801811a:	b37a      	cbz	r2, 801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801811c:	4552      	cmp	r2, sl
 801811e:	d02d      	beq.n	801817c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018120:	4611      	mov	r1, r2
 8018122:	a80e      	add	r0, sp, #56	@ 0x38
 8018124:	9209      	str	r2, [sp, #36]	@ 0x24
 8018126:	f004 fe13 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801812a:	f04f 0e02 	mov.w	lr, #2
 801812e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8018132:	9a06      	ldr	r2, [sp, #24]
 8018134:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8018138:	9b01      	ldr	r3, [sp, #4]
 801813a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801813e:	4413      	add	r3, r2
 8018140:	9a07      	ldr	r2, [sp, #28]
 8018142:	fb91 f1fe 	sdiv	r1, r1, lr
 8018146:	fb9c fcfe 	sdiv	ip, ip, lr
 801814a:	4401      	add	r1, r0
 801814c:	1a58      	subs	r0, r3, r1
 801814e:	9b02      	ldr	r3, [sp, #8]
 8018150:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8018154:	4413      	add	r3, r2
 8018156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018158:	448c      	add	ip, r1
 801815a:	eba3 030c 	sub.w	r3, r3, ip
 801815e:	435b      	muls	r3, r3
 8018160:	fb00 3300 	mla	r3, r0, r0, r3
 8018164:	42ab      	cmp	r3, r5
 8018166:	d208      	bcs.n	801817a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8018168:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801816a:	461d      	mov	r5, r3
 801816c:	9803      	ldr	r0, [sp, #12]
 801816e:	6001      	str	r1, [r0, #0]
 8018170:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8018172:	9805      	ldr	r0, [sp, #20]
 8018174:	8008      	strh	r0, [r1, #0]
 8018176:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8018178:	800f      	strh	r7, [r1, #0]
 801817a:	4692      	mov	sl, r2
 801817c:	f10b 0b01 	add.w	fp, fp, #1
 8018180:	3408      	adds	r4, #8
 8018182:	f1bb 0f04 	cmp.w	fp, #4
 8018186:	d19d      	bne.n	80180c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8018188:	9b00      	ldr	r3, [sp, #0]
 801818a:	9c08      	ldr	r4, [sp, #32]
 801818c:	444b      	add	r3, r9
 801818e:	4544      	cmp	r4, r8
 8018190:	9300      	str	r3, [sp, #0]
 8018192:	d188      	bne.n	80180a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8018194:	b021      	add	sp, #132	@ 0x84
 8018196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801819a:	f04f 35ff 	mov.w	r5, #4294967295
 801819e:	e767      	b.n	8018070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80181a0:	2400b8cc 	.word	0x2400b8cc
 80181a4:	0802cd34 	.word	0x0802cd34

080181a8 <_ZN8touchgfx4RectaNERKS0_>:
 80181a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 80181b0:	888c      	ldrh	r4, [r1, #4]
 80181b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80181b6:	443c      	add	r4, r7
 80181b8:	b2a4      	uxth	r4, r4
 80181ba:	fa0f f884 	sxth.w	r8, r4
 80181be:	45c1      	cmp	r9, r8
 80181c0:	da2f      	bge.n	8018222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80181c2:	8882      	ldrh	r2, [r0, #4]
 80181c4:	444a      	add	r2, r9
 80181c6:	b292      	uxth	r2, r2
 80181c8:	fa0f fe82 	sxth.w	lr, r2
 80181cc:	4577      	cmp	r7, lr
 80181ce:	da28      	bge.n	8018222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80181d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80181d4:	88cb      	ldrh	r3, [r1, #6]
 80181d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80181da:	442b      	add	r3, r5
 80181dc:	b21b      	sxth	r3, r3
 80181de:	429e      	cmp	r6, r3
 80181e0:	da1f      	bge.n	8018222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80181e2:	88c3      	ldrh	r3, [r0, #6]
 80181e4:	4433      	add	r3, r6
 80181e6:	b29b      	uxth	r3, r3
 80181e8:	fa0f fc83 	sxth.w	ip, r3
 80181ec:	4565      	cmp	r5, ip
 80181ee:	da18      	bge.n	8018222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80181f0:	454f      	cmp	r7, r9
 80181f2:	bfb8      	it	lt
 80181f4:	464f      	movlt	r7, r9
 80181f6:	42b5      	cmp	r5, r6
 80181f8:	bfb8      	it	lt
 80181fa:	4635      	movlt	r5, r6
 80181fc:	45f0      	cmp	r8, lr
 80181fe:	bfd8      	it	le
 8018200:	4622      	movle	r2, r4
 8018202:	1bd2      	subs	r2, r2, r7
 8018204:	8082      	strh	r2, [r0, #4]
 8018206:	884a      	ldrh	r2, [r1, #2]
 8018208:	88c9      	ldrh	r1, [r1, #6]
 801820a:	8007      	strh	r7, [r0, #0]
 801820c:	440a      	add	r2, r1
 801820e:	8045      	strh	r5, [r0, #2]
 8018210:	b292      	uxth	r2, r2
 8018212:	b211      	sxth	r1, r2
 8018214:	458c      	cmp	ip, r1
 8018216:	bfa8      	it	ge
 8018218:	4613      	movge	r3, r2
 801821a:	1b5b      	subs	r3, r3, r5
 801821c:	80c3      	strh	r3, [r0, #6]
 801821e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018222:	2300      	movs	r3, #0
 8018224:	8003      	strh	r3, [r0, #0]
 8018226:	8043      	strh	r3, [r0, #2]
 8018228:	8083      	strh	r3, [r0, #4]
 801822a:	80c3      	strh	r3, [r0, #6]
 801822c:	e7f7      	b.n	801821e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801822e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801822e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018232:	2b00      	cmp	r3, #0
 8018234:	dd06      	ble.n	8018244 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8018236:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801823a:	2800      	cmp	r0, #0
 801823c:	bfcc      	ite	gt
 801823e:	2000      	movgt	r0, #0
 8018240:	2001      	movle	r0, #1
 8018242:	4770      	bx	lr
 8018244:	2001      	movs	r0, #1
 8018246:	4770      	bx	lr

08018248 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801824c:	2300      	movs	r3, #0
 801824e:	4604      	mov	r4, r0
 8018250:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8018252:	8003      	strh	r3, [r0, #0]
 8018254:	8043      	strh	r3, [r0, #2]
 8018256:	8083      	strh	r3, [r0, #4]
 8018258:	80c3      	strh	r3, [r0, #6]
 801825a:	2d00      	cmp	r5, #0
 801825c:	d040      	beq.n	80182e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801825e:	1d28      	adds	r0, r5, #4
 8018260:	f7ff ffe5 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018264:	b988      	cbnz	r0, 801828a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018266:	4620      	mov	r0, r4
 8018268:	f7ff ffe1 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801826c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018270:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8018274:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8018278:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801827c:	b138      	cbz	r0, 801828e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801827e:	8022      	strh	r2, [r4, #0]
 8018280:	8063      	strh	r3, [r4, #2]
 8018282:	f8a4 e004 	strh.w	lr, [r4, #4]
 8018286:	f8a4 c006 	strh.w	ip, [r4, #6]
 801828a:	69ad      	ldr	r5, [r5, #24]
 801828c:	e7e5      	b.n	801825a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801828e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018292:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018296:	4290      	cmp	r0, r2
 8018298:	4607      	mov	r7, r0
 801829a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801829e:	460e      	mov	r6, r1
 80182a0:	bfa8      	it	ge
 80182a2:	4617      	movge	r7, r2
 80182a4:	4299      	cmp	r1, r3
 80182a6:	4472      	add	r2, lr
 80182a8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80182ac:	bfa8      	it	ge
 80182ae:	461e      	movge	r6, r3
 80182b0:	4440      	add	r0, r8
 80182b2:	4471      	add	r1, lr
 80182b4:	4463      	add	r3, ip
 80182b6:	b200      	sxth	r0, r0
 80182b8:	8027      	strh	r7, [r4, #0]
 80182ba:	b212      	sxth	r2, r2
 80182bc:	8066      	strh	r6, [r4, #2]
 80182be:	b209      	sxth	r1, r1
 80182c0:	b21b      	sxth	r3, r3
 80182c2:	4290      	cmp	r0, r2
 80182c4:	bfac      	ite	ge
 80182c6:	ebc7 0200 	rsbge	r2, r7, r0
 80182ca:	ebc7 0202 	rsblt	r2, r7, r2
 80182ce:	4299      	cmp	r1, r3
 80182d0:	bfac      	ite	ge
 80182d2:	ebc6 0301 	rsbge	r3, r6, r1
 80182d6:	ebc6 0303 	rsblt	r3, r6, r3
 80182da:	80a2      	strh	r2, [r4, #4]
 80182dc:	80e3      	strh	r3, [r4, #6]
 80182de:	e7d4      	b.n	801828a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80182e0:	4620      	mov	r0, r4
 80182e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80182e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80182ea:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80182ee:	b383      	cbz	r3, 8018352 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80182f0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80182f2:	b374      	cbz	r4, 8018352 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80182f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 80182f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80182fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018300:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8018304:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8018308:	b303      	cbz	r3, 801834c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801830a:	4668      	mov	r0, sp
 801830c:	1d21      	adds	r1, r4, #4
 801830e:	f8ad 5000 	strh.w	r5, [sp]
 8018312:	f8ad 6002 	strh.w	r6, [sp, #2]
 8018316:	f8ad 7004 	strh.w	r7, [sp, #4]
 801831a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801831e:	f7ff ff43 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8018322:	4668      	mov	r0, sp
 8018324:	f7ff ff83 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018328:	b980      	cbnz	r0, 801834c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801832a:	f8bd 3000 	ldrh.w	r3, [sp]
 801832e:	4669      	mov	r1, sp
 8018330:	88a2      	ldrh	r2, [r4, #4]
 8018332:	4620      	mov	r0, r4
 8018334:	1a9b      	subs	r3, r3, r2
 8018336:	88e2      	ldrh	r2, [r4, #6]
 8018338:	f8ad 3000 	strh.w	r3, [sp]
 801833c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018340:	1a9b      	subs	r3, r3, r2
 8018342:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018346:	6823      	ldr	r3, [r4, #0]
 8018348:	689b      	ldr	r3, [r3, #8]
 801834a:	4798      	blx	r3
 801834c:	69a4      	ldr	r4, [r4, #24]
 801834e:	2c00      	cmp	r4, #0
 8018350:	d1d8      	bne.n	8018304 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8018352:	b002      	add	sp, #8
 8018354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018358 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8018358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801835a:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801835e:	460d      	mov	r5, r1
 8018360:	4616      	mov	r6, r2
 8018362:	b323      	cbz	r3, 80183ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018364:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8018366:	b314      	cbz	r4, 80183ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8018368:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 801836c:	b1eb      	cbz	r3, 80183aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801836e:	6828      	ldr	r0, [r5, #0]
 8018370:	466b      	mov	r3, sp
 8018372:	6869      	ldr	r1, [r5, #4]
 8018374:	c303      	stmia	r3!, {r0, r1}
 8018376:	4668      	mov	r0, sp
 8018378:	1d21      	adds	r1, r4, #4
 801837a:	f7ff ff15 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801837e:	4668      	mov	r0, sp
 8018380:	f7ff ff55 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8018384:	b988      	cbnz	r0, 80183aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8018386:	f8bd 3000 	ldrh.w	r3, [sp]
 801838a:	4669      	mov	r1, sp
 801838c:	88a2      	ldrh	r2, [r4, #4]
 801838e:	4620      	mov	r0, r4
 8018390:	1a9b      	subs	r3, r3, r2
 8018392:	88e2      	ldrh	r2, [r4, #6]
 8018394:	f8ad 3000 	strh.w	r3, [sp]
 8018398:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801839c:	1a9b      	subs	r3, r3, r2
 801839e:	4632      	mov	r2, r6
 80183a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80183a4:	6823      	ldr	r3, [r4, #0]
 80183a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183a8:	4798      	blx	r3
 80183aa:	69a4      	ldr	r4, [r4, #24]
 80183ac:	e7db      	b.n	8018366 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80183ae:	b002      	add	sp, #8
 80183b0:	bd70      	pop	{r4, r5, r6, pc}

080183b2 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
 80183b2:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	@ 0xec
 80183b6:	4770      	bx	lr

080183b8 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
 80183b8:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	@ 0xee
 80183bc:	4770      	bx	lr

080183be <_ZNK8touchgfx6Slider11getMinValueEv>:
 80183be:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80183c0:	4770      	bx	lr

080183c2 <_ZNK8touchgfx6Slider11getMaxValueEv>:
 80183c2:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 80183c4:	4770      	bx	lr

080183c6 <_ZN8touchgfx6Slider8setValueEi>:
 80183c6:	b570      	push	{r4, r5, r6, lr}
 80183c8:	6803      	ldr	r3, [r0, #0]
 80183ca:	4604      	mov	r4, r0
 80183cc:	e9d3 532a 	ldrd	r5, r3, [r3, #168]	@ 0xa8
 80183d0:	4798      	blx	r3
 80183d2:	4601      	mov	r1, r0
 80183d4:	462b      	mov	r3, r5
 80183d6:	4620      	mov	r0, r4
 80183d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183dc:	4718      	bx	r3

080183de <_ZNK8touchgfx6Slider15valueToPositionEi>:
 80183de:	b538      	push	{r3, r4, r5, lr}
 80183e0:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	@ 0x34
 80183e4:	4605      	mov	r5, r0
 80183e6:	428c      	cmp	r4, r1
 80183e8:	bfa8      	it	ge
 80183ea:	460c      	movge	r4, r1
 80183ec:	429c      	cmp	r4, r3
 80183ee:	bfac      	ite	ge
 80183f0:	ebc3 0404 	rsbge	r4, r3, r4
 80183f4:	ebc3 0403 	rsblt	r4, r3, r3
 80183f8:	6803      	ldr	r3, [r0, #0]
 80183fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80183fe:	4798      	blx	r3
 8018400:	682b      	ldr	r3, [r5, #0]
 8018402:	fb00 4404 	mla	r4, r0, r4, r4
 8018406:	4628      	mov	r0, r5
 8018408:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801840c:	4798      	blx	r3
 801840e:	f895 202c 	ldrb.w	r2, [r5, #44]	@ 0x2c
 8018412:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	@ 0xec
 8018416:	2a01      	cmp	r2, #1
 8018418:	fb94 f0f0 	sdiv	r0, r4, r0
 801841c:	bf08      	it	eq
 801841e:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	@ 0xee
 8018422:	4418      	add	r0, r3
 8018424:	bf04      	itt	eq
 8018426:	1a10      	subeq	r0, r2, r0
 8018428:	18c0      	addeq	r0, r0, r3
 801842a:	b200      	sxth	r0, r0
 801842c:	bd38      	pop	{r3, r4, r5, pc}

0801842e <_ZNK8touchgfx6Slider15positionToValueEs>:
 801842e:	b570      	push	{r4, r5, r6, lr}
 8018430:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	@ 0xec
 8018434:	4605      	mov	r5, r0
 8018436:	460c      	mov	r4, r1
 8018438:	428b      	cmp	r3, r1
 801843a:	d109      	bne.n	8018450 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
 801843c:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801843e:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8018442:	2b01      	cmp	r3, #1
 8018444:	bf01      	itttt	eq
 8018446:	6bab      	ldreq	r3, [r5, #56]	@ 0x38
 8018448:	1a18      	subeq	r0, r3, r0
 801844a:	6b6b      	ldreq	r3, [r5, #52]	@ 0x34
 801844c:	18c0      	addeq	r0, r0, r3
 801844e:	bd70      	pop	{r4, r5, r6, pc}
 8018450:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	@ 0xee
 8018454:	428b      	cmp	r3, r1
 8018456:	d101      	bne.n	801845c <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
 8018458:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801845a:	e7f0      	b.n	801843e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
 801845c:	6803      	ldr	r3, [r0, #0]
 801845e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018462:	4798      	blx	r3
 8018464:	682b      	ldr	r3, [r5, #0]
 8018466:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	@ 0xec
 801846a:	4606      	mov	r6, r0
 801846c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018470:	4628      	mov	r0, r5
 8018472:	1a64      	subs	r4, r4, r1
 8018474:	4798      	blx	r3
 8018476:	2102      	movs	r1, #2
 8018478:	682b      	ldr	r3, [r5, #0]
 801847a:	fb96 f6f1 	sdiv	r6, r6, r1
 801847e:	fb00 6404 	mla	r4, r0, r4, r6
 8018482:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018486:	4628      	mov	r0, r5
 8018488:	4798      	blx	r3
 801848a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801848c:	fb94 f0f0 	sdiv	r0, r4, r0
 8018490:	4418      	add	r0, r3
 8018492:	e7d4      	b.n	801843e <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

08018494 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
 8018494:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8018498:	2302      	movs	r3, #2
 801849a:	b92a      	cbnz	r2, 80184a8 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
 801849c:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	@ 0x9c
 80184a0:	fb90 f0f3 	sdiv	r0, r0, r3
 80184a4:	b280      	uxth	r0, r0
 80184a6:	4770      	bx	lr
 80184a8:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	@ 0x9e
 80184ac:	e7f8      	b.n	80184a0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

080184ae <_ZN8touchgfx6Slider13setValueRangeEii>:
 80184ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80184b0:	428b      	cmp	r3, r1
 80184b2:	b410      	push	{r4}
 80184b4:	db09      	blt.n	80184ca <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
 80184b6:	4293      	cmp	r3, r2
 80184b8:	bfa8      	it	ge
 80184ba:	4613      	movge	r3, r2
 80184bc:	6804      	ldr	r4, [r0, #0]
 80184be:	f8d4 4094 	ldr.w	r4, [r4, #148]	@ 0x94
 80184c2:	46a4      	mov	ip, r4
 80184c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184c8:	4760      	bx	ip
 80184ca:	460b      	mov	r3, r1
 80184cc:	e7f6      	b.n	80184bc <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

080184ce <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
 80184ce:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	@ 0xee
 80184d2:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	@ 0xec
 80184d6:	1a10      	subs	r0, r2, r0
 80184d8:	4770      	bx	lr

080184da <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
 80184da:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	@ 0x34
 80184de:	1a10      	subs	r0, r2, r0
 80184e0:	4770      	bx	lr
	...

080184e4 <_ZN8touchgfx6Slider13setValueRangeEiii>:
 80184e4:	4291      	cmp	r1, r2
 80184e6:	b510      	push	{r4, lr}
 80184e8:	db06      	blt.n	80184f8 <_ZN8touchgfx6Slider13setValueRangeEiii+0x14>
 80184ea:	4b08      	ldr	r3, [pc, #32]	@ (801850c <_ZN8touchgfx6Slider13setValueRangeEiii+0x28>)
 80184ec:	f240 110d 	movw	r1, #269	@ 0x10d
 80184f0:	4a07      	ldr	r2, [pc, #28]	@ (8018510 <_ZN8touchgfx6Slider13setValueRangeEiii+0x2c>)
 80184f2:	4808      	ldr	r0, [pc, #32]	@ (8018514 <_ZN8touchgfx6Slider13setValueRangeEiii+0x30>)
 80184f4:	f012 fd38 	bl	802af68 <__assert_func>
 80184f8:	e9c0 120d 	strd	r1, r2, [r0, #52]	@ 0x34
 80184fc:	6802      	ldr	r2, [r0, #0]
 80184fe:	4619      	mov	r1, r3
 8018500:	f8d2 20a4 	ldr.w	r2, [r2, #164]	@ 0xa4
 8018504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018508:	4710      	bx	r2
 801850a:	bf00      	nop
 801850c:	0802df9e 	.word	0x0802df9e
 8018510:	0802e241 	.word	0x0802e241
 8018514:	0802dff6 	.word	0x0802dff6

08018518 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
 8018518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801851c:	790b      	ldrb	r3, [r1, #4]
 801851e:	4604      	mov	r4, r0
 8018520:	460d      	mov	r5, r1
 8018522:	b323      	cbz	r3, 801856e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
 8018524:	2b01      	cmp	r3, #1
 8018526:	d135      	bne.n	8018594 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8018528:	6823      	ldr	r3, [r4, #0]
 801852a:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 801852e:	f8d3 70a8 	ldr.w	r7, [r3, #168]	@ 0xa8
 8018532:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018536:	2a00      	cmp	r2, #0
 8018538:	d12a      	bne.n	8018590 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
 801853a:	88ee      	ldrh	r6, [r5, #6]
 801853c:	4620      	mov	r0, r4
 801853e:	4798      	blx	r3
 8018540:	1a31      	subs	r1, r6, r0
 8018542:	4620      	mov	r0, r4
 8018544:	b209      	sxth	r1, r1
 8018546:	47b8      	blx	r7
 8018548:	792b      	ldrb	r3, [r5, #4]
 801854a:	2b01      	cmp	r3, #1
 801854c:	d122      	bne.n	8018594 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801854e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8018552:	b1f8      	cbz	r0, 8018594 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 8018554:	6803      	ldr	r3, [r0, #0]
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	4798      	blx	r3
 801855a:	b1d8      	cbz	r0, 8018594 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
 801855c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
 8018560:	4621      	mov	r1, r4
 8018562:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018564:	6803      	ldr	r3, [r0, #0]
 8018566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801856a:	689b      	ldr	r3, [r3, #8]
 801856c:	4718      	bx	r3
 801856e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	@ 0xf0
 8018572:	2800      	cmp	r0, #0
 8018574:	d0d8      	beq.n	8018528 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018576:	6803      	ldr	r3, [r0, #0]
 8018578:	68db      	ldr	r3, [r3, #12]
 801857a:	4798      	blx	r3
 801857c:	2800      	cmp	r0, #0
 801857e:	d0d3      	beq.n	8018528 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018580:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
 8018584:	4621      	mov	r1, r4
 8018586:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018588:	6803      	ldr	r3, [r0, #0]
 801858a:	689b      	ldr	r3, [r3, #8]
 801858c:	4798      	blx	r3
 801858e:	e7cb      	b.n	8018528 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
 8018590:	892e      	ldrh	r6, [r5, #8]
 8018592:	e7d3      	b.n	801853c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
 8018594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018598 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
 8018598:	b570      	push	{r4, r5, r6, lr}
 801859a:	6803      	ldr	r3, [r0, #0]
 801859c:	4604      	mov	r4, r0
 801859e:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 80185a2:	f8d3 60a8 	ldr.w	r6, [r3, #168]	@ 0xa8
 80185a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80185aa:	b942      	cbnz	r2, 80185be <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
 80185ac:	894d      	ldrh	r5, [r1, #10]
 80185ae:	4798      	blx	r3
 80185b0:	1a29      	subs	r1, r5, r0
 80185b2:	4633      	mov	r3, r6
 80185b4:	4620      	mov	r0, r4
 80185b6:	b209      	sxth	r1, r1
 80185b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185bc:	4718      	bx	r3
 80185be:	898d      	ldrh	r5, [r1, #12]
 80185c0:	e7f5      	b.n	80185ae <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>
	...

080185c4 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
 80185c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185c8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 80185cc:	4604      	mov	r4, r0
 80185ce:	f8bd 6034 	ldrh.w	r6, [sp, #52]	@ 0x34
 80185d2:	4689      	mov	r9, r1
 80185d4:	4690      	mov	r8, r2
 80185d6:	461d      	mov	r5, r3
 80185d8:	42b7      	cmp	r7, r6
 80185da:	d305      	bcc.n	80185e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x24>
 80185dc:	4b26      	ldr	r3, [pc, #152]	@ (8018678 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb4>)
 80185de:	2149      	movs	r1, #73	@ 0x49
 80185e0:	4a26      	ldr	r2, [pc, #152]	@ (801867c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb8>)
 80185e2:	4827      	ldr	r0, [pc, #156]	@ (8018680 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xbc>)
 80185e4:	f012 fcc0 	bl	802af68 <__assert_func>
 80185e8:	f04f 0a00 	mov.w	sl, #0
 80185ec:	b213      	sxth	r3, r2
 80185ee:	fa0f fb81 	sxth.w	fp, r1
 80185f2:	303c      	adds	r0, #60	@ 0x3c
 80185f4:	f800 ac10 	strb.w	sl, [r0, #-16]
 80185f8:	461a      	mov	r2, r3
 80185fa:	4659      	mov	r1, fp
 80185fc:	9301      	str	r3, [sp, #4]
 80185fe:	f7eb fd5d 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 8018602:	9b01      	ldr	r3, [sp, #4]
 8018604:	4659      	mov	r1, fp
 8018606:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 801860a:	461a      	mov	r2, r3
 801860c:	f7eb fd56 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 8018610:	4652      	mov	r2, sl
 8018612:	4651      	mov	r1, sl
 8018614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018618:	f7eb fd50 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 801861c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 8018620:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8018624:	4620      	mov	r0, r4
 8018626:	4489      	add	r9, r1
 8018628:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 801862c:	4490      	add	r8, r2
 801862e:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 8018632:	4431      	add	r1, r6
 8018634:	fa1f f989 	uxth.w	r9, r9
 8018638:	442a      	add	r2, r5
 801863a:	fa1f f888 	uxth.w	r8, r8
 801863e:	b289      	uxth	r1, r1
 8018640:	f8a4 509a 	strh.w	r5, [r4, #154]	@ 0x9a
 8018644:	b292      	uxth	r2, r2
 8018646:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 801864a:	4589      	cmp	r9, r1
 801864c:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 8018650:	bf8c      	ite	hi
 8018652:	fa0f f189 	sxthhi.w	r1, r9
 8018656:	b209      	sxthls	r1, r1
 8018658:	4590      	cmp	r8, r2
 801865a:	bf8c      	ite	hi
 801865c:	fa0f f288 	sxthhi.w	r2, r8
 8018660:	b212      	sxthls	r2, r2
 8018662:	f7eb fd87 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018666:	6823      	ldr	r3, [r4, #0]
 8018668:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801866a:	4620      	mov	r0, r4
 801866c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018670:	b003      	add	sp, #12
 8018672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018676:	4718      	bx	r3
 8018678:	0802e098 	.word	0x0802e098
 801867c:	0802e2e2 	.word	0x0802e2e2
 8018680:	0802dff6 	.word	0x0802dff6

08018684 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
 8018684:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018688:	f8bd 7028 	ldrh.w	r7, [sp, #40]	@ 0x28
 801868c:	4604      	mov	r4, r0
 801868e:	f8bd 602c 	ldrh.w	r6, [sp, #44]	@ 0x2c
 8018692:	4689      	mov	r9, r1
 8018694:	4690      	mov	r8, r2
 8018696:	461d      	mov	r5, r3
 8018698:	42b7      	cmp	r7, r6
 801869a:	d305      	bcc.n	80186a8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x24>
 801869c:	4b22      	ldr	r3, [pc, #136]	@ (8018728 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>)
 801869e:	2164      	movs	r1, #100	@ 0x64
 80186a0:	4a22      	ldr	r2, [pc, #136]	@ (801872c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>)
 80186a2:	4823      	ldr	r0, [pc, #140]	@ (8018730 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xac>)
 80186a4:	f012 fc60 	bl	802af68 <__assert_func>
 80186a8:	2301      	movs	r3, #1
 80186aa:	fa0f fa81 	sxth.w	sl, r1
 80186ae:	fa0f fb82 	sxth.w	fp, r2
 80186b2:	303c      	adds	r0, #60	@ 0x3c
 80186b4:	f800 3c10 	strb.w	r3, [r0, #-16]
 80186b8:	4651      	mov	r1, sl
 80186ba:	465a      	mov	r2, fp
 80186bc:	f7eb fcfe 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 80186c0:	465a      	mov	r2, fp
 80186c2:	4651      	mov	r1, sl
 80186c4:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80186c8:	f7eb fcf8 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 80186cc:	f8b4 1044 	ldrh.w	r1, [r4, #68]	@ 0x44
 80186d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80186d4:	4620      	mov	r0, r4
 80186d6:	4489      	add	r9, r1
 80186d8:	f8b4 109c 	ldrh.w	r1, [r4, #156]	@ 0x9c
 80186dc:	4490      	add	r8, r2
 80186de:	f8b4 209e 	ldrh.w	r2, [r4, #158]	@ 0x9e
 80186e2:	4429      	add	r1, r5
 80186e4:	fa1f f989 	uxth.w	r9, r9
 80186e8:	4432      	add	r2, r6
 80186ea:	fa1f f888 	uxth.w	r8, r8
 80186ee:	b289      	uxth	r1, r1
 80186f0:	f8a4 5098 	strh.w	r5, [r4, #152]	@ 0x98
 80186f4:	b292      	uxth	r2, r2
 80186f6:	f8a4 70ec 	strh.w	r7, [r4, #236]	@ 0xec
 80186fa:	4589      	cmp	r9, r1
 80186fc:	f8a4 60ee 	strh.w	r6, [r4, #238]	@ 0xee
 8018700:	bf8c      	ite	hi
 8018702:	fa0f f189 	sxthhi.w	r1, r9
 8018706:	b209      	sxthls	r1, r1
 8018708:	4590      	cmp	r8, r2
 801870a:	bf8c      	ite	hi
 801870c:	fa0f f288 	sxthhi.w	r2, r8
 8018710:	b212      	sxthls	r2, r2
 8018712:	f7eb fd2f 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018716:	6823      	ldr	r3, [r4, #0]
 8018718:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801871a:	4620      	mov	r0, r4
 801871c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8018720:	b001      	add	sp, #4
 8018722:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018726:	4718      	bx	r3
 8018728:	0802e026 	.word	0x0802e026
 801872c:	0802e27d 	.word	0x0802e27d
 8018730:	0802dff6 	.word	0x0802dff6

08018734 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
 8018734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018738:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	@ 0xec
 801873c:	4604      	mov	r4, r0
 801873e:	3094      	adds	r0, #148	@ 0x94
 8018740:	4588      	cmp	r8, r1
 8018742:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018746:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 801874a:	bfb8      	it	lt
 801874c:	4688      	movlt	r8, r1
 801874e:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	@ 0x5a
 8018752:	4588      	cmp	r8, r1
 8018754:	bfa8      	it	ge
 8018756:	4688      	movge	r8, r1
 8018758:	fa1f f788 	uxth.w	r7, r8
 801875c:	2b00      	cmp	r3, #0
 801875e:	d12f      	bne.n	80187c0 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
 8018760:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8018764:	4641      	mov	r1, r8
 8018766:	f7eb fd52 	bl	800420e <_ZN8touchgfx8Drawable6moveToEss>
 801876a:	4630      	mov	r0, r6
 801876c:	f004 fa58 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
 8018770:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	@ 0xc4
 8018774:	6823      	ldr	r3, [r4, #0]
 8018776:	4620      	mov	r0, r4
 8018778:	1abf      	subs	r7, r7, r2
 801877a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801877e:	b2bf      	uxth	r7, r7
 8018780:	4798      	blx	r3
 8018782:	4407      	add	r7, r0
 8018784:	f8a4 70c8 	strh.w	r7, [r4, #200]	@ 0xc8
 8018788:	4630      	mov	r0, r6
 801878a:	f004 fa49 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
 801878e:	6823      	ldr	r3, [r4, #0]
 8018790:	4641      	mov	r1, r8
 8018792:	4620      	mov	r0, r4
 8018794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018798:	4798      	blx	r3
 801879a:	6320      	str	r0, [r4, #48]	@ 0x30
 801879c:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 80187a0:	2800      	cmp	r0, #0
 80187a2:	d03d      	beq.n	8018820 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 80187a4:	6803      	ldr	r3, [r0, #0]
 80187a6:	68db      	ldr	r3, [r3, #12]
 80187a8:	4798      	blx	r3
 80187aa:	2800      	cmp	r0, #0
 80187ac:	d038      	beq.n	8018820 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
 80187ae:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
 80187b2:	4621      	mov	r1, r4
 80187b4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80187b6:	6803      	ldr	r3, [r0, #0]
 80187b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187bc:	689b      	ldr	r3, [r3, #8]
 80187be:	4718      	bx	r3
 80187c0:	4642      	mov	r2, r8
 80187c2:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	@ 0x98
 80187c6:	f7eb fd22 	bl	800420e <_ZN8touchgfx8Drawable6moveToEss>
 80187ca:	4630      	mov	r0, r6
 80187cc:	f004 fa28 	bl	801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>
 80187d0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	@ 0x42
 80187d4:	f8b4 5046 	ldrh.w	r5, [r4, #70]	@ 0x46
 80187d8:	6823      	ldr	r3, [r4, #0]
 80187da:	4405      	add	r5, r0
 80187dc:	4620      	mov	r0, r4
 80187de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187e2:	b2ad      	uxth	r5, r5
 80187e4:	4798      	blx	r3
 80187e6:	6823      	ldr	r3, [r4, #0]
 80187e8:	1bed      	subs	r5, r5, r7
 80187ea:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	@ 0xc4
 80187ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80187f2:	1a2d      	subs	r5, r5, r0
 80187f4:	4620      	mov	r0, r4
 80187f6:	4798      	blx	r3
 80187f8:	4438      	add	r0, r7
 80187fa:	b2ad      	uxth	r5, r5
 80187fc:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	@ 0xc8
 8018800:	b202      	sxth	r2, r0
 8018802:	4651      	mov	r1, sl
 8018804:	4630      	mov	r0, r6
 8018806:	f7eb fc59 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 801880a:	4630      	mov	r0, r6
 801880c:	b22a      	sxth	r2, r5
 801880e:	4649      	mov	r1, r9
 8018810:	f7eb fcb0 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018814:	f8b4 0072 	ldrh.w	r0, [r4, #114]	@ 0x72
 8018818:	1a2d      	subs	r5, r5, r0
 801881a:	f8a4 506e 	strh.w	r5, [r4, #110]	@ 0x6e
 801881e:	e7b3      	b.n	8018788 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
 8018820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018824 <_ZN8touchgfx6SliderC1Ev>:
 8018824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018828:	4604      	mov	r4, r0
 801882a:	2500      	movs	r5, #0
 801882c:	f7eb fb86 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8018830:	ae02      	add	r6, sp, #8
 8018832:	4b28      	ldr	r3, [pc, #160]	@ (80188d4 <_ZN8touchgfx6SliderC1Ev+0xb0>)
 8018834:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8018838:	f04f 0b01 	mov.w	fp, #1
 801883c:	f104 093c 	add.w	r9, r4, #60	@ 0x3c
 8018840:	f104 0a68 	add.w	sl, r4, #104	@ 0x68
 8018844:	6023      	str	r3, [r4, #0]
 8018846:	f826 7d04 	strh.w	r7, [r6, #-4]!
 801884a:	4648      	mov	r0, r9
 801884c:	4631      	mov	r1, r6
 801884e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8018850:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
 8018854:	f104 0894 	add.w	r8, r4, #148	@ 0x94
 8018858:	f8c4 b038 	str.w	fp, [r4, #56]	@ 0x38
 801885c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
 8018860:	f7ed f908 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018864:	4631      	mov	r1, r6
 8018866:	4650      	mov	r0, sl
 8018868:	f8ad 7004 	strh.w	r7, [sp, #4]
 801886c:	f7ed f902 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018870:	4631      	mov	r1, r6
 8018872:	f104 06c0 	add.w	r6, r4, #192	@ 0xc0
 8018876:	4640      	mov	r0, r8
 8018878:	f8ad 7004 	strh.w	r7, [sp, #4]
 801887c:	f7ed f8fa 	bl	8005a74 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8018880:	4630      	mov	r0, r6
 8018882:	f7eb fb5b 	bl	8003f3c <_ZN8touchgfx8DrawableC1Ev>
 8018886:	4b14      	ldr	r3, [pc, #80]	@ (80188d8 <_ZN8touchgfx6SliderC1Ev+0xb4>)
 8018888:	4651      	mov	r1, sl
 801888a:	4630      	mov	r0, r6
 801888c:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 8018890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8018894:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8018898:	f884 b024 	strb.w	fp, [r4, #36]	@ 0x24
 801889c:	e9c4 353b 	strd	r3, r5, [r4, #236]	@ 0xec
 80188a0:	e9c4 553d 	strd	r5, r5, [r4, #244]	@ 0xf4
 80188a4:	f7ff fb3e 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188a8:	4649      	mov	r1, r9
 80188aa:	4620      	mov	r0, r4
 80188ac:	f7ff fb3a 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188b0:	4631      	mov	r1, r6
 80188b2:	4620      	mov	r0, r4
 80188b4:	f7ff fb36 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188b8:	4641      	mov	r1, r8
 80188ba:	4620      	mov	r0, r4
 80188bc:	f7ff fb32 	bl	8017f24 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80188c0:	4620      	mov	r0, r4
 80188c2:	2264      	movs	r2, #100	@ 0x64
 80188c4:	4629      	mov	r1, r5
 80188c6:	f7ff fdf2 	bl	80184ae <_ZN8touchgfx6Slider13setValueRangeEii>
 80188ca:	4620      	mov	r0, r4
 80188cc:	b003      	add	sp, #12
 80188ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188d2:	bf00      	nop
 80188d4:	0802e114 	.word	0x0802e114
 80188d8:	0802de00 	.word	0x0802de00

080188dc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
 80188dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188e0:	4615      	mov	r5, r2
 80188e2:	4604      	mov	r4, r0
 80188e4:	4608      	mov	r0, r1
 80188e6:	460e      	mov	r6, r1
 80188e8:	461f      	mov	r7, r3
 80188ea:	f006 facb 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188ee:	4680      	mov	r8, r0
 80188f0:	4628      	mov	r0, r5
 80188f2:	f006 fac7 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80188f6:	4580      	cmp	r8, r0
 80188f8:	d005      	beq.n	8018906 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x2a>
 80188fa:	4b14      	ldr	r3, [pc, #80]	@ (801894c <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x70>)
 80188fc:	213a      	movs	r1, #58	@ 0x3a
 80188fe:	4a14      	ldr	r2, [pc, #80]	@ (8018950 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x74>)
 8018900:	4814      	ldr	r0, [pc, #80]	@ (8018954 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x78>)
 8018902:	f012 fb31 	bl	802af68 <__assert_func>
 8018906:	4630      	mov	r0, r6
 8018908:	f006 faf6 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801890c:	4680      	mov	r8, r0
 801890e:	4628      	mov	r0, r5
 8018910:	f006 faf2 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018914:	4580      	cmp	r8, r0
 8018916:	d1f0      	bne.n	80188fa <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x1e>
 8018918:	4631      	mov	r1, r6
 801891a:	f104 003c 	add.w	r0, r4, #60	@ 0x3c
 801891e:	f001 fca6 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018922:	4629      	mov	r1, r5
 8018924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018928:	f001 fca1 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801892c:	4639      	mov	r1, r7
 801892e:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 8018932:	f001 fc9c 	bl	801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8018936:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	@ 0x72
 801893a:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	@ 0x70
 801893e:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8018942:	f7eb fc17 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801894a:	bf00      	nop
 801894c:	0802debf 	.word	0x0802debf
 8018950:	0802e1d4 	.word	0x0802e1d4
 8018954:	0802dff6 	.word	0x0802dff6

08018958 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8018958:	4770      	bx	lr

0801895a <_ZN8touchgfx3HAL10FlushCacheEv>:
 801895a:	4770      	bx	lr

0801895c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801895c:	6803      	ldr	r3, [r0, #0]
 801895e:	b513      	push	{r0, r1, r4, lr}
 8018960:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8018964:	2300      	movs	r3, #0
 8018966:	e9cd 3300 	strd	r3, r3, [sp]
 801896a:	466b      	mov	r3, sp
 801896c:	47a0      	blx	r4
 801896e:	b002      	add	sp, #8
 8018970:	bd10      	pop	{r4, pc}

08018972 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018972:	2301      	movs	r3, #1
 8018974:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018978:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 801897c:	4770      	bx	lr

0801897e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801897e:	2301      	movs	r3, #1
 8018980:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8018984:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
 8018988:	4770      	bx	lr

0801898a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801898a:	6843      	ldr	r3, [r0, #4]
 801898c:	2201      	movs	r2, #1
 801898e:	725a      	strb	r2, [r3, #9]
 8018990:	6840      	ldr	r0, [r0, #4]
 8018992:	6803      	ldr	r3, [r0, #0]
 8018994:	691b      	ldr	r3, [r3, #16]
 8018996:	4718      	bx	r3

08018998 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018998:	6840      	ldr	r0, [r0, #4]
 801899a:	6803      	ldr	r3, [r0, #0]
 801899c:	689b      	ldr	r3, [r3, #8]
 801899e:	4718      	bx	r3

080189a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80189a0:	b530      	push	{r4, r5, lr}
 80189a2:	b08b      	sub	sp, #44	@ 0x2c
 80189a4:	6804      	ldr	r4, [r0, #0]
 80189a6:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80189aa:	9509      	str	r5, [sp, #36]	@ 0x24
 80189ac:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80189b0:	9508      	str	r5, [sp, #32]
 80189b2:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80189b6:	9507      	str	r5, [sp, #28]
 80189b8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80189bc:	9506      	str	r5, [sp, #24]
 80189be:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80189c2:	9505      	str	r5, [sp, #20]
 80189c4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80189c8:	9504      	str	r5, [sp, #16]
 80189ca:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80189ce:	9503      	str	r5, [sp, #12]
 80189d0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80189d4:	9502      	str	r5, [sp, #8]
 80189d6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80189da:	e9cd 3500 	strd	r3, r5, [sp]
 80189de:	4613      	mov	r3, r2
 80189e0:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80189e2:	2200      	movs	r2, #0
 80189e4:	47a0      	blx	r4
 80189e6:	b00b      	add	sp, #44	@ 0x2c
 80189e8:	bd30      	pop	{r4, r5, pc}
	...

080189ec <_ZN8touchgfx3HAL10beginFrameEv>:
 80189ec:	4b04      	ldr	r3, [pc, #16]	@ (8018a00 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	b123      	cbz	r3, 80189fc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80189f2:	f890 006a 	ldrb.w	r0, [r0, #106]	@ 0x6a
 80189f6:	f080 0001 	eor.w	r0, r0, #1
 80189fa:	4770      	bx	lr
 80189fc:	2001      	movs	r0, #1
 80189fe:	4770      	bx	lr
 8018a00:	2400b8ca 	.word	0x2400b8ca

08018a04 <_ZN8touchgfx3HAL8endFrameEv>:
 8018a04:	b510      	push	{r4, lr}
 8018a06:	4604      	mov	r4, r0
 8018a08:	6840      	ldr	r0, [r0, #4]
 8018a0a:	6803      	ldr	r3, [r0, #0]
 8018a0c:	689b      	ldr	r3, [r3, #8]
 8018a0e:	4798      	blx	r3
 8018a10:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 8018a14:	b113      	cbz	r3, 8018a1c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8018a16:	2301      	movs	r3, #1
 8018a18:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8018a1c:	bd10      	pop	{r4, pc}

08018a1e <_ZN8touchgfx3HAL10initializeEv>:
 8018a1e:	b510      	push	{r4, lr}
 8018a20:	4604      	mov	r4, r0
 8018a22:	f7e9 fac5 	bl	8001fb0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8018a26:	6860      	ldr	r0, [r4, #4]
 8018a28:	6803      	ldr	r3, [r0, #0]
 8018a2a:	68db      	ldr	r3, [r3, #12]
 8018a2c:	4798      	blx	r3
 8018a2e:	68e0      	ldr	r0, [r4, #12]
 8018a30:	6803      	ldr	r3, [r0, #0]
 8018a32:	689b      	ldr	r3, [r3, #8]
 8018a34:	4798      	blx	r3
 8018a36:	6823      	ldr	r3, [r4, #0]
 8018a38:	4620      	mov	r0, r4
 8018a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a40:	4718      	bx	r3

08018a42 <_ZN8touchgfx3HAL9taskEntryEv>:
 8018a42:	b508      	push	{r3, lr}
 8018a44:	6803      	ldr	r3, [r0, #0]
 8018a46:	4604      	mov	r4, r0
 8018a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018a4a:	4798      	blx	r3
 8018a4c:	6823      	ldr	r3, [r4, #0]
 8018a4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018a50:	4620      	mov	r0, r4
 8018a52:	4798      	blx	r3
 8018a54:	f7e9 fb22 	bl	800209c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8018a58:	6823      	ldr	r3, [r4, #0]
 8018a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018a5c:	e7f8      	b.n	8018a50 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

08018a60 <_ZN8touchgfx3HAL4tickEv>:
 8018a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018a62:	6803      	ldr	r3, [r0, #0]
 8018a64:	4604      	mov	r4, r0
 8018a66:	4d5c      	ldr	r5, [pc, #368]	@ (8018bd8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8018a68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018a6c:	4798      	blx	r3
 8018a6e:	2800      	cmp	r0, #0
 8018a70:	f000 8097 	beq.w	8018ba2 <_ZN8touchgfx3HAL4tickEv+0x142>
 8018a74:	2001      	movs	r0, #1
 8018a76:	2600      	movs	r6, #0
 8018a78:	f7e8 ffd8 	bl	8001a2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018a7c:	f894 3066 	ldrb.w	r3, [r4, #102]	@ 0x66
 8018a80:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8018a84:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 8018a88:	f894 3075 	ldrb.w	r3, [r4, #117]	@ 0x75
 8018a8c:	f884 6066 	strb.w	r6, [r4, #102]	@ 0x66
 8018a90:	b133      	cbz	r3, 8018aa0 <_ZN8touchgfx3HAL4tickEv+0x40>
 8018a92:	6823      	ldr	r3, [r4, #0]
 8018a94:	4620      	mov	r0, r4
 8018a96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8018a9a:	4798      	blx	r3
 8018a9c:	f884 6075 	strb.w	r6, [r4, #117]	@ 0x75
 8018aa0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8018aa4:	2601      	movs	r6, #1
 8018aa6:	6862      	ldr	r2, [r4, #4]
 8018aa8:	f083 0301 	eor.w	r3, r3, #1
 8018aac:	702e      	strb	r6, [r5, #0]
 8018aae:	7253      	strb	r3, [r2, #9]
 8018ab0:	f003 f8ec 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8018ab4:	6803      	ldr	r3, [r0, #0]
 8018ab6:	4631      	mov	r1, r6
 8018ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018aba:	4798      	blx	r3
 8018abc:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 8018ac0:	b90b      	cbnz	r3, 8018ac6 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018ac2:	f884 6067 	strb.w	r6, [r4, #103]	@ 0x67
 8018ac6:	f003 f8e1 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8018aca:	6803      	ldr	r3, [r0, #0]
 8018acc:	695b      	ldr	r3, [r3, #20]
 8018ace:	4798      	blx	r3
 8018ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ad2:	6803      	ldr	r3, [r0, #0]
 8018ad4:	691b      	ldr	r3, [r3, #16]
 8018ad6:	4798      	blx	r3
 8018ad8:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 8018adc:	f894 2068 	ldrb.w	r2, [r4, #104]	@ 0x68
 8018ae0:	3b01      	subs	r3, #1
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	f884 3067 	strb.w	r3, [r4, #103]	@ 0x67
 8018ae8:	b10a      	cbz	r2, 8018aee <_ZN8touchgfx3HAL4tickEv+0x8e>
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d1eb      	bne.n	8018ac6 <_ZN8touchgfx3HAL4tickEv+0x66>
 8018aee:	4a3b      	ldr	r2, [pc, #236]	@ (8018bdc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018af0:	f994 1064 	ldrsb.w	r1, [r4, #100]	@ 0x64
 8018af4:	7813      	ldrb	r3, [r2, #0]
 8018af6:	3301      	adds	r3, #1
 8018af8:	b25b      	sxtb	r3, r3
 8018afa:	4299      	cmp	r1, r3
 8018afc:	7013      	strb	r3, [r2, #0]
 8018afe:	dc10      	bgt.n	8018b22 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018b00:	2300      	movs	r3, #0
 8018b02:	68e0      	ldr	r0, [r4, #12]
 8018b04:	a902      	add	r1, sp, #8
 8018b06:	7013      	strb	r3, [r2, #0]
 8018b08:	aa03      	add	r2, sp, #12
 8018b0a:	6803      	ldr	r3, [r0, #0]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	4798      	blx	r3
 8018b10:	6823      	ldr	r3, [r4, #0]
 8018b12:	2800      	cmp	r0, #0
 8018b14:	d051      	beq.n	8018bba <_ZN8touchgfx3HAL4tickEv+0x15a>
 8018b16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8018b20:	4798      	blx	r3
 8018b22:	2300      	movs	r3, #0
 8018b24:	6960      	ldr	r0, [r4, #20]
 8018b26:	f88d 3007 	strb.w	r3, [sp, #7]
 8018b2a:	b158      	cbz	r0, 8018b44 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018b2c:	6803      	ldr	r3, [r0, #0]
 8018b2e:	f10d 0107 	add.w	r1, sp, #7
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	4798      	blx	r3
 8018b36:	b128      	cbz	r0, 8018b44 <_ZN8touchgfx3HAL4tickEv+0xe4>
 8018b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018b3a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8018b3e:	6803      	ldr	r3, [r0, #0]
 8018b40:	68db      	ldr	r3, [r3, #12]
 8018b42:	4798      	blx	r3
 8018b44:	f104 001c 	add.w	r0, r4, #28
 8018b48:	f012 f926 	bl	802ad98 <_ZN8touchgfx8Gestures4tickEv>
 8018b4c:	f894 306c 	ldrb.w	r3, [r4, #108]	@ 0x6c
 8018b50:	b30b      	cbz	r3, 8018b96 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018b52:	6920      	ldr	r0, [r4, #16]
 8018b54:	6803      	ldr	r3, [r0, #0]
 8018b56:	691b      	ldr	r3, [r3, #16]
 8018b58:	4798      	blx	r3
 8018b5a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018b5c:	4606      	mov	r6, r0
 8018b5e:	b903      	cbnz	r3, 8018b62 <_ZN8touchgfx3HAL4tickEv+0x102>
 8018b60:	6720      	str	r0, [r4, #112]	@ 0x70
 8018b62:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018b64:	4a1e      	ldr	r2, [pc, #120]	@ (8018be0 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8018b66:	1af3      	subs	r3, r6, r3
 8018b68:	4293      	cmp	r3, r2
 8018b6a:	d914      	bls.n	8018b96 <_ZN8touchgfx3HAL4tickEv+0x136>
 8018b6c:	6920      	ldr	r0, [r4, #16]
 8018b6e:	6803      	ldr	r3, [r0, #0]
 8018b70:	699b      	ldr	r3, [r3, #24]
 8018b72:	4798      	blx	r3
 8018b74:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8018b76:	2264      	movs	r2, #100	@ 0x64
 8018b78:	1af3      	subs	r3, r6, r3
 8018b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8018b82:	2800      	cmp	r0, #0
 8018b84:	dc1e      	bgt.n	8018bc4 <_ZN8touchgfx3HAL4tickEv+0x164>
 8018b86:	f884 2065 	strb.w	r2, [r4, #101]	@ 0x65
 8018b8a:	6920      	ldr	r0, [r4, #16]
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	6803      	ldr	r3, [r0, #0]
 8018b90:	69db      	ldr	r3, [r3, #28]
 8018b92:	4798      	blx	r3
 8018b94:	6726      	str	r6, [r4, #112]	@ 0x70
 8018b96:	f003 f879 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 8018b9a:	6803      	ldr	r3, [r0, #0]
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ba0:	4798      	blx	r3
 8018ba2:	6823      	ldr	r3, [r4, #0]
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8018baa:	4798      	blx	r3
 8018bac:	2001      	movs	r0, #1
 8018bae:	f7e8 ff59 	bl	8001a64 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	702b      	strb	r3, [r5, #0]
 8018bb6:	b004      	add	sp, #16
 8018bb8:	bd70      	pop	{r4, r5, r6, pc}
 8018bba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8018bbe:	4620      	mov	r0, r4
 8018bc0:	4798      	blx	r3
 8018bc2:	e7ae      	b.n	8018b22 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8018bc4:	2863      	cmp	r0, #99	@ 0x63
 8018bc6:	bfcb      	itete	gt
 8018bc8:	2300      	movgt	r3, #0
 8018bca:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8018bce:	f884 3065 	strbgt.w	r3, [r4, #101]	@ 0x65
 8018bd2:	f884 0065 	strble.w	r0, [r4, #101]	@ 0x65
 8018bd6:	e7d8      	b.n	8018b8a <_ZN8touchgfx3HAL4tickEv+0x12a>
 8018bd8:	2400b8d0 	.word	0x2400b8d0
 8018bdc:	2400b8d1 	.word	0x2400b8d1
 8018be0:	05f5e100 	.word	0x05f5e100

08018be4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8018be4:	f7e9 ba26 	b.w	8002034 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018be8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018be8:	6581      	str	r1, [r0, #88]	@ 0x58
 8018bea:	301c      	adds	r0, #28
 8018bec:	f012 b8d2 	b.w	802ad94 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018bf0 <_ZN8touchgfx3HAL5touchEll>:
 8018bf0:	b530      	push	{r4, r5, lr}
 8018bf2:	b087      	sub	sp, #28
 8018bf4:	4604      	mov	r4, r0
 8018bf6:	a804      	add	r0, sp, #16
 8018bf8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018bfc:	f002 fe06 	bl	801b80c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018c00:	9b04      	ldr	r3, [sp, #16]
 8018c02:	a906      	add	r1, sp, #24
 8018c04:	a803      	add	r0, sp, #12
 8018c06:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018c0a:	9b05      	ldr	r3, [sp, #20]
 8018c0c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8018c10:	f002 fe4e 	bl	801b8b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8018c14:	f894 106b 	ldrb.w	r1, [r4, #107]	@ 0x6b
 8018c18:	f104 001c 	add.w	r0, r4, #28
 8018c1c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8018c20:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018c24:	b189      	cbz	r1, 8018c4a <_ZN8touchgfx3HAL5touchEll+0x5a>
 8018c26:	f8b4 5060 	ldrh.w	r5, [r4, #96]	@ 0x60
 8018c2a:	9300      	str	r3, [sp, #0]
 8018c2c:	4613      	mov	r3, r2
 8018c2e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8018c32:	462a      	mov	r2, r5
 8018c34:	f012 f8be 	bl	802adb4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8018c38:	b128      	cbz	r0, 8018c46 <_ZN8touchgfx3HAL5touchEll+0x56>
 8018c3a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8018c3e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8018c40:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8018c44:	6623      	str	r3, [r4, #96]	@ 0x60
 8018c46:	b007      	add	sp, #28
 8018c48:	bd30      	pop	{r4, r5, pc}
 8018c4a:	f012 f8f7 	bl	802ae3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018c54:	e7f1      	b.n	8018c3a <_ZN8touchgfx3HAL5touchEll+0x4a>

08018c56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8018c56:	b510      	push	{r4, lr}
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d046      	beq.n	8018cea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c5c:	ea81 0002 	eor.w	r0, r1, r2
 8018c60:	07c4      	lsls	r4, r0, #31
 8018c62:	d508      	bpl.n	8018c76 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8018c64:	440b      	add	r3, r1
 8018c66:	3a01      	subs	r2, #1
 8018c68:	428b      	cmp	r3, r1
 8018c6a:	d93e      	bls.n	8018cea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018c6c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018c70:	f801 0b01 	strb.w	r0, [r1], #1
 8018c74:	e7f8      	b.n	8018c68 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8018c76:	07d0      	lsls	r0, r2, #31
 8018c78:	bf42      	ittt	mi
 8018c7a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018c7e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8018c82:	f801 0b01 	strbmi.w	r0, [r1], #1
 8018c86:	2b01      	cmp	r3, #1
 8018c88:	d911      	bls.n	8018cae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018c8a:	ea81 0402 	eor.w	r4, r1, r2
 8018c8e:	4610      	mov	r0, r2
 8018c90:	07a4      	lsls	r4, r4, #30
 8018c92:	d022      	beq.n	8018cda <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8018c94:	f023 0401 	bic.w	r4, r3, #1
 8018c98:	440c      	add	r4, r1
 8018c9a:	428c      	cmp	r4, r1
 8018c9c:	4602      	mov	r2, r0
 8018c9e:	d904      	bls.n	8018caa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018ca0:	8812      	ldrh	r2, [r2, #0]
 8018ca2:	3002      	adds	r0, #2
 8018ca4:	f821 2b02 	strh.w	r2, [r1], #2
 8018ca8:	e7f7      	b.n	8018c9a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018caa:	f003 0301 	and.w	r3, r3, #1
 8018cae:	f023 0003 	bic.w	r0, r3, #3
 8018cb2:	4408      	add	r0, r1
 8018cb4:	4288      	cmp	r0, r1
 8018cb6:	4614      	mov	r4, r2
 8018cb8:	d904      	bls.n	8018cc4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018cba:	6824      	ldr	r4, [r4, #0]
 8018cbc:	3204      	adds	r2, #4
 8018cbe:	f841 4b04 	str.w	r4, [r1], #4
 8018cc2:	e7f7      	b.n	8018cb4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8018cc4:	f003 0303 	and.w	r3, r3, #3
 8018cc8:	3a01      	subs	r2, #1
 8018cca:	440b      	add	r3, r1
 8018ccc:	428b      	cmp	r3, r1
 8018cce:	d90c      	bls.n	8018cea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018cd0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018cd4:	f801 0b01 	strb.w	r0, [r1], #1
 8018cd8:	e7f8      	b.n	8018ccc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018cda:	0790      	lsls	r0, r2, #30
 8018cdc:	d0e7      	beq.n	8018cae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018cde:	f832 0b02 	ldrh.w	r0, [r2], #2
 8018ce2:	3b02      	subs	r3, #2
 8018ce4:	f821 0b02 	strh.w	r0, [r1], #2
 8018ce8:	e7e1      	b.n	8018cae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018cea:	2001      	movs	r0, #1
 8018cec:	bd10      	pop	{r4, pc}

08018cee <_ZN8touchgfx3HAL7noTouchEv>:
 8018cee:	b510      	push	{r4, lr}
 8018cf0:	f890 306b 	ldrb.w	r3, [r0, #107]	@ 0x6b
 8018cf4:	4604      	mov	r4, r0
 8018cf6:	b153      	cbz	r3, 8018d0e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018cf8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8018cfc:	2101      	movs	r1, #1
 8018cfe:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
 8018d02:	301c      	adds	r0, #28
 8018d04:	f012 f89a 	bl	802ae3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8018d08:	2300      	movs	r3, #0
 8018d0a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8018d0e:	bd10      	pop	{r4, pc}

08018d10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8018d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d14:	4604      	mov	r4, r0
 8018d16:	6980      	ldr	r0, [r0, #24]
 8018d18:	b085      	sub	sp, #20
 8018d1a:	460f      	mov	r7, r1
 8018d1c:	4690      	mov	r8, r2
 8018d1e:	4699      	mov	r9, r3
 8018d20:	b930      	cbnz	r0, 8018d30 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8018d22:	4b1c      	ldr	r3, [pc, #112]	@ (8018d94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8018d24:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8018d28:	4a1b      	ldr	r2, [pc, #108]	@ (8018d98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018d2a:	481c      	ldr	r0, [pc, #112]	@ (8018d9c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8018d2c:	f012 f91c 	bl	802af68 <__assert_func>
 8018d30:	ad04      	add	r5, sp, #16
 8018d32:	2600      	movs	r6, #0
 8018d34:	f845 6d04 	str.w	r6, [r5, #-4]!
 8018d38:	6806      	ldr	r6, [r0, #0]
 8018d3a:	9501      	str	r5, [sp, #4]
 8018d3c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8018d40:	9500      	str	r5, [sp, #0]
 8018d42:	6835      	ldr	r5, [r6, #0]
 8018d44:	47a8      	blx	r5
 8018d46:	4d16      	ldr	r5, [pc, #88]	@ (8018da0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8018d48:	4606      	mov	r6, r0
 8018d4a:	f8a5 9000 	strh.w	r9, [r5]
 8018d4e:	f7eb faab 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8018d52:	6803      	ldr	r3, [r0, #0]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d56:	4798      	blx	r3
 8018d58:	2801      	cmp	r0, #1
 8018d5a:	d012      	beq.n	8018d82 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8018d5c:	d306      	bcc.n	8018d6c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8018d5e:	280d      	cmp	r0, #13
 8018d60:	d80b      	bhi.n	8018d7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018d62:	4b10      	ldr	r3, [pc, #64]	@ (8018da4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8018d64:	f240 1167 	movw	r1, #359	@ 0x167
 8018d68:	4a0b      	ldr	r2, [pc, #44]	@ (8018d98 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8018d6a:	e7de      	b.n	8018d2a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8018d6c:	882b      	ldrh	r3, [r5, #0]
 8018d6e:	fb08 7203 	mla	r2, r8, r3, r7
 8018d72:	9b03      	ldr	r3, [sp, #12]
 8018d74:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8018d78:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018d7a:	4630      	mov	r0, r6
 8018d7c:	b005      	add	sp, #20
 8018d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d82:	882a      	ldrh	r2, [r5, #0]
 8018d84:	9b03      	ldr	r3, [sp, #12]
 8018d86:	fb08 7202 	mla	r2, r8, r2, r7
 8018d8a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d8e:	1a9a      	subs	r2, r3, r2
 8018d90:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8018d92:	e7f2      	b.n	8018d7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8018d94:	0802e4b6 	.word	0x0802e4b6
 8018d98:	0802e847 	.word	0x0802e847
 8018d9c:	0802e4fb 	.word	0x0802e4fb
 8018da0:	2400b8c6 	.word	0x2400b8c6
 8018da4:	0802e521 	.word	0x0802e521

08018da8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018daa:	b08b      	sub	sp, #44	@ 0x2c
 8018dac:	4617      	mov	r7, r2
 8018dae:	4604      	mov	r4, r0
 8018db0:	460e      	mov	r6, r1
 8018db2:	461d      	mov	r5, r3
 8018db4:	f7eb fa78 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8018db8:	6803      	ldr	r3, [r0, #0]
 8018dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dbc:	4798      	blx	r3
 8018dbe:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018dc2:	9007      	str	r0, [sp, #28]
 8018dc4:	4631      	mov	r1, r6
 8018dc6:	6822      	ldr	r2, [r4, #0]
 8018dc8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8018e00 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018dce:	4620      	mov	r0, r4
 8018dd0:	881b      	ldrh	r3, [r3, #0]
 8018dd2:	9306      	str	r3, [sp, #24]
 8018dd4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8018dd8:	9305      	str	r3, [sp, #20]
 8018dda:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8018dde:	9304      	str	r3, [sp, #16]
 8018de0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018de4:	9303      	str	r3, [sp, #12]
 8018de6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8018dea:	9302      	str	r3, [sp, #8]
 8018dec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8018df0:	e9cd 5300 	strd	r5, r3, [sp]
 8018df4:	463b      	mov	r3, r7
 8018df6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8018df8:	2200      	movs	r2, #0
 8018dfa:	47a8      	blx	r5
 8018dfc:	b00b      	add	sp, #44	@ 0x2c
 8018dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e00:	2400b8c6 	.word	0x2400b8c6

08018e04 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e08:	4698      	mov	r8, r3
 8018e0a:	6803      	ldr	r3, [r0, #0]
 8018e0c:	b08b      	sub	sp, #44	@ 0x2c
 8018e0e:	4617      	mov	r7, r2
 8018e10:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8018e12:	460e      	mov	r6, r1
 8018e14:	4b13      	ldr	r3, [pc, #76]	@ (8018e64 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018e16:	4604      	mov	r4, r0
 8018e18:	f8b3 9000 	ldrh.w	r9, [r3]
 8018e1c:	f7eb fa44 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8018e20:	6803      	ldr	r3, [r0, #0]
 8018e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e24:	4798      	blx	r3
 8018e26:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	4631      	mov	r1, r6
 8018e2e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018e32:	2302      	movs	r3, #2
 8018e34:	4620      	mov	r0, r4
 8018e36:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	9305      	str	r3, [sp, #20]
 8018e3e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8018e42:	9304      	str	r3, [sp, #16]
 8018e44:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8018e48:	9303      	str	r3, [sp, #12]
 8018e4a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8018e4e:	9302      	str	r3, [sp, #8]
 8018e50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8018e54:	e9cd 8300 	strd	r8, r3, [sp]
 8018e58:	463b      	mov	r3, r7
 8018e5a:	47a8      	blx	r5
 8018e5c:	b00b      	add	sp, #44	@ 0x2c
 8018e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e62:	bf00      	nop
 8018e64:	2400b8c6 	.word	0x2400b8c6

08018e68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e6c:	4698      	mov	r8, r3
 8018e6e:	6803      	ldr	r3, [r0, #0]
 8018e70:	b087      	sub	sp, #28
 8018e72:	460e      	mov	r6, r1
 8018e74:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8018e76:	4617      	mov	r7, r2
 8018e78:	4b0f      	ldr	r3, [pc, #60]	@ (8018eb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018e7a:	4604      	mov	r4, r0
 8018e7c:	f8b3 9000 	ldrh.w	r9, [r3]
 8018e80:	f7eb fa12 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8018e84:	6803      	ldr	r3, [r0, #0]
 8018e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e88:	4798      	blx	r3
 8018e8a:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8018e8e:	463a      	mov	r2, r7
 8018e90:	4631      	mov	r1, r6
 8018e92:	f8cd 900c 	str.w	r9, [sp, #12]
 8018e96:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018e9a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	9302      	str	r3, [sp, #8]
 8018ea2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8018ea6:	9301      	str	r3, [sp, #4]
 8018ea8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018eac:	9300      	str	r3, [sp, #0]
 8018eae:	4643      	mov	r3, r8
 8018eb0:	47a8      	blx	r5
 8018eb2:	b007      	add	sp, #28
 8018eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eb8:	2400b8c6 	.word	0x2400b8c6

08018ebc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec0:	4604      	mov	r4, r0
 8018ec2:	b08f      	sub	sp, #60	@ 0x3c
 8018ec4:	4610      	mov	r0, r2
 8018ec6:	460d      	mov	r5, r1
 8018ec8:	4691      	mov	r9, r2
 8018eca:	461e      	mov	r6, r3
 8018ecc:	f005 ff20 	bl	801ed10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	f000 809c 	beq.w	801900e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8018ed6:	6823      	ldr	r3, [r4, #0]
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f8df b194 	ldr.w	fp, [pc, #404]	@ 8019070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8018ede:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8018ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ee4:	4798      	blx	r3
 8018ee6:	6823      	ldr	r3, [r4, #0]
 8018ee8:	4620      	mov	r0, r4
 8018eea:	f8df a188 	ldr.w	sl, [pc, #392]	@ 8019074 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ef0:	4798      	blx	r3
 8018ef2:	f8bb 3000 	ldrh.w	r3, [fp]
 8018ef6:	4f5b      	ldr	r7, [pc, #364]	@ (8019064 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018ef8:	9301      	str	r3, [sp, #4]
 8018efa:	f8ba 3000 	ldrh.w	r3, [sl]
 8018efe:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018f02:	4640      	mov	r0, r8
 8018f04:	9302      	str	r3, [sp, #8]
 8018f06:	883b      	ldrh	r3, [r7, #0]
 8018f08:	9303      	str	r3, [sp, #12]
 8018f0a:	4b57      	ldr	r3, [pc, #348]	@ (8019068 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018f0c:	881a      	ldrh	r2, [r3, #0]
 8018f0e:	9305      	str	r3, [sp, #20]
 8018f10:	9204      	str	r2, [sp, #16]
 8018f12:	f005 ffb7 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018f16:	8038      	strh	r0, [r7, #0]
 8018f18:	4640      	mov	r0, r8
 8018f1a:	f005 ffed 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018f1e:	9b05      	ldr	r3, [sp, #20]
 8018f20:	8018      	strh	r0, [r3, #0]
 8018f22:	4b52      	ldr	r3, [pc, #328]	@ (801906c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018f24:	781b      	ldrb	r3, [r3, #0]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d174      	bne.n	8019014 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8018f2a:	883b      	ldrh	r3, [r7, #0]
 8018f2c:	f8aa 0000 	strh.w	r0, [sl]
 8018f30:	f8ab 3000 	strh.w	r3, [fp]
 8018f34:	4648      	mov	r0, r9
 8018f36:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8018f3a:	f005 fee9 	bl	801ed10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018f3e:	2200      	movs	r2, #0
 8018f40:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8018f44:	4611      	mov	r1, r2
 8018f46:	4628      	mov	r0, r5
 8018f48:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018f4c:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018f50:	f7eb f8b4 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 8018f54:	2301      	movs	r3, #1
 8018f56:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8018f5a:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8018f5e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	dd5c      	ble.n	8019020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018f66:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	dd58      	ble.n	8019020 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8018f6e:	462a      	mov	r2, r5
 8018f70:	ab0a      	add	r3, sp, #40	@ 0x28
 8018f72:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018f76:	6851      	ldr	r1, [r2, #4]
 8018f78:	c303      	stmia	r3!, {r0, r1}
 8018f7a:	4631      	mov	r1, r6
 8018f7c:	a80a      	add	r0, sp, #40	@ 0x28
 8018f7e:	f7ff f913 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8018f82:	4b38      	ldr	r3, [pc, #224]	@ (8019064 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018f84:	2100      	movs	r1, #0
 8018f86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018f8a:	4b37      	ldr	r3, [pc, #220]	@ (8019068 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018f8c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8018f90:	aa0a      	add	r2, sp, #40	@ 0x28
 8018f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f96:	910c      	str	r1, [sp, #48]	@ 0x30
 8018f98:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8018f9c:	ab08      	add	r3, sp, #32
 8018f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018fa2:	e883 0003 	stmia.w	r3, {r0, r1}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	a90c      	add	r1, sp, #48	@ 0x30
 8018faa:	f7ff f8fd 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8018fae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d13c      	bne.n	801902e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	f884 0076 	strb.w	r0, [r4, #118]	@ 0x76
 8018fba:	2600      	movs	r6, #0
 8018fbc:	696b      	ldr	r3, [r5, #20]
 8018fbe:	a908      	add	r1, sp, #32
 8018fc0:	682a      	ldr	r2, [r5, #0]
 8018fc2:	4628      	mov	r0, r5
 8018fc4:	9305      	str	r3, [sp, #20]
 8018fc6:	616e      	str	r6, [r5, #20]
 8018fc8:	6892      	ldr	r2, [r2, #8]
 8018fca:	4790      	blx	r2
 8018fcc:	9b05      	ldr	r3, [sp, #20]
 8018fce:	4652      	mov	r2, sl
 8018fd0:	4649      	mov	r1, r9
 8018fd2:	616b      	str	r3, [r5, #20]
 8018fd4:	4628      	mov	r0, r5
 8018fd6:	f884 6076 	strb.w	r6, [r4, #118]	@ 0x76
 8018fda:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8018fde:	f7eb f86d 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 8018fe2:	9a01      	ldr	r2, [sp, #4]
 8018fe4:	4b22      	ldr	r3, [pc, #136]	@ (8019070 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	801a      	strh	r2, [r3, #0]
 8018fea:	9a02      	ldr	r2, [sp, #8]
 8018fec:	4b21      	ldr	r3, [pc, #132]	@ (8019074 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018fee:	801a      	strh	r2, [r3, #0]
 8018ff0:	9a03      	ldr	r2, [sp, #12]
 8018ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8019064 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8018ff4:	801a      	strh	r2, [r3, #0]
 8018ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8019068 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018ff8:	9a04      	ldr	r2, [sp, #16]
 8018ffa:	801a      	strh	r2, [r3, #0]
 8018ffc:	6823      	ldr	r3, [r4, #0]
 8018ffe:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8019002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019004:	4798      	blx	r3
 8019006:	6823      	ldr	r3, [r4, #0]
 8019008:	4620      	mov	r0, r4
 801900a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801900c:	4798      	blx	r3
 801900e:	b00f      	add	sp, #60	@ 0x3c
 8019010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019014:	883b      	ldrh	r3, [r7, #0]
 8019016:	f8ab 0000 	strh.w	r0, [fp]
 801901a:	f8aa 3000 	strh.w	r3, [sl]
 801901e:	e789      	b.n	8018f34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8019020:	462a      	mov	r2, r5
 8019022:	ab0a      	add	r3, sp, #40	@ 0x28
 8019024:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8019028:	6851      	ldr	r1, [r2, #4]
 801902a:	c303      	stmia	r3!, {r0, r1}
 801902c:	e7a9      	b.n	8018f82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 801902e:	a807      	add	r0, sp, #28
 8019030:	f006 f8ba 	bl	801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019034:	4606      	mov	r6, r0
 8019036:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8019038:	6803      	ldr	r3, [r0, #0]
 801903a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801903c:	4798      	blx	r3
 801903e:	4286      	cmp	r6, r0
 8019040:	d1b8      	bne.n	8018fb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8019042:	f7eb f931 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8019046:	6803      	ldr	r3, [r0, #0]
 8019048:	4606      	mov	r6, r0
 801904a:	a807      	add	r0, sp, #28
 801904c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801904e:	9305      	str	r3, [sp, #20]
 8019050:	f006 f8aa 	bl	801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019054:	9b05      	ldr	r3, [sp, #20]
 8019056:	4601      	mov	r1, r0
 8019058:	4630      	mov	r0, r6
 801905a:	4798      	blx	r3
 801905c:	f080 0001 	eor.w	r0, r0, #1
 8019060:	b2c0      	uxtb	r0, r0
 8019062:	e7a8      	b.n	8018fb6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8019064:	2400b8c0 	.word	0x2400b8c0
 8019068:	2400b8c2 	.word	0x2400b8c2
 801906c:	2400b8c4 	.word	0x2400b8c4
 8019070:	2400b8c6 	.word	0x2400b8c6
 8019074:	2400b8c8 	.word	0x2400b8c8

08019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8019078:	4b07      	ldr	r3, [pc, #28]	@ (8019098 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801907a:	b510      	push	{r4, lr}
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	4604      	mov	r4, r0
 8019080:	b13b      	cbz	r3, 8019092 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8019082:	6803      	ldr	r3, [r0, #0]
 8019084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019086:	4798      	blx	r3
 8019088:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801908a:	4283      	cmp	r3, r0
 801908c:	d101      	bne.n	8019092 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801908e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8019090:	bd10      	pop	{r4, pc}
 8019092:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8019094:	e7fc      	b.n	8019090 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8019096:	bf00      	nop
 8019098:	2400b8ca 	.word	0x2400b8ca

0801909c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801909c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190a0:	b088      	sub	sp, #32
 80190a2:	4692      	mov	sl, r2
 80190a4:	461d      	mov	r5, r3
 80190a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80190aa:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 80190ae:	2400      	movs	r4, #0
 80190b0:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 80190b4:	4606      	mov	r6, r0
 80190b6:	f8bd 7044 	ldrh.w	r7, [sp, #68]	@ 0x44
 80190ba:	fb09 a505 	mla	r5, r9, r5, sl
 80190be:	9403      	str	r4, [sp, #12]
 80190c0:	f8ad 8014 	strh.w	r8, [sp, #20]
 80190c4:	f8ad 7016 	strh.w	r7, [sp, #22]
 80190c8:	f88d 401c 	strb.w	r4, [sp, #28]
 80190cc:	e9cd 3100 	strd	r3, r1, [sp]
 80190d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80190d4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80190d8:	f7ff ffce 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80190dc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80190e0:	f8ad 901a 	strh.w	r9, [sp, #26]
 80190e4:	f88d 401e 	strb.w	r4, [sp, #30]
 80190e8:	9504      	str	r5, [sp, #16]
 80190ea:	f88d 401d 	strb.w	r4, [sp, #29]
 80190ee:	f88d 401f 	strb.w	r4, [sp, #31]
 80190f2:	f1b8 0f00 	cmp.w	r8, #0
 80190f6:	d000      	beq.n	80190fa <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 80190f8:	b937      	cbnz	r7, 8019108 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 80190fa:	4b0d      	ldr	r3, [pc, #52]	@ (8019130 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 80190fc:	f240 210b 	movw	r1, #523	@ 0x20b
 8019100:	4a0c      	ldr	r2, [pc, #48]	@ (8019134 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8019102:	480d      	ldr	r0, [pc, #52]	@ (8019138 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8019104:	f011 ff30 	bl	802af68 <__assert_func>
 8019108:	6833      	ldr	r3, [r6, #0]
 801910a:	4630      	mov	r0, r6
 801910c:	9c00      	ldr	r4, [sp, #0]
 801910e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019110:	4798      	blx	r3
 8019112:	4220      	tst	r0, r4
 8019114:	d104      	bne.n	8019120 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8019116:	4b09      	ldr	r3, [pc, #36]	@ (801913c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8019118:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 801911c:	4a05      	ldr	r2, [pc, #20]	@ (8019134 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 801911e:	e7f0      	b.n	8019102 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8019120:	6870      	ldr	r0, [r6, #4]
 8019122:	4669      	mov	r1, sp
 8019124:	6803      	ldr	r3, [r0, #0]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	4798      	blx	r3
 801912a:	b008      	add	sp, #32
 801912c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019130:	0802e349 	.word	0x0802e349
 8019134:	0802e67c 	.word	0x0802e67c
 8019138:	0802e4fb 	.word	0x0802e4fb
 801913c:	0802e381 	.word	0x0802e381

08019140 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8019140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019144:	b089      	sub	sp, #36	@ 0x24
 8019146:	4693      	mov	fp, r2
 8019148:	461d      	mov	r5, r3
 801914a:	2400      	movs	r4, #0
 801914c:	f8bd 9050 	ldrh.w	r9, [sp, #80]	@ 0x50
 8019150:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019154:	468a      	mov	sl, r1
 8019156:	f8bd 8048 	ldrh.w	r8, [sp, #72]	@ 0x48
 801915a:	fb09 b505 	mla	r5, r9, r5, fp
 801915e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8019162:	4606      	mov	r6, r0
 8019164:	9403      	str	r4, [sp, #12]
 8019166:	e9cd 3400 	strd	r3, r4, [sp]
 801916a:	f7ff ff85 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801916e:	f8ad 8014 	strh.w	r8, [sp, #20]
 8019172:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019176:	f8ad 7016 	strh.w	r7, [sp, #22]
 801917a:	f8ad 4018 	strh.w	r4, [sp, #24]
 801917e:	9504      	str	r5, [sp, #16]
 8019180:	f8ad 901a 	strh.w	r9, [sp, #26]
 8019184:	f8cd a00c 	str.w	sl, [sp, #12]
 8019188:	f8ad 401c 	strh.w	r4, [sp, #28]
 801918c:	f88d 401e 	strb.w	r4, [sp, #30]
 8019190:	f88d 401f 	strb.w	r4, [sp, #31]
 8019194:	f1b8 0f00 	cmp.w	r8, #0
 8019198:	d000      	beq.n	801919c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 801919a:	b937      	cbnz	r7, 80191aa <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 801919c:	4b0d      	ldr	r3, [pc, #52]	@ (80191d4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 801919e:	f240 2121 	movw	r1, #545	@ 0x221
 80191a2:	4a0d      	ldr	r2, [pc, #52]	@ (80191d8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80191a4:	480d      	ldr	r0, [pc, #52]	@ (80191dc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 80191a6:	f011 fedf 	bl	802af68 <__assert_func>
 80191aa:	6833      	ldr	r3, [r6, #0]
 80191ac:	4630      	mov	r0, r6
 80191ae:	9c00      	ldr	r4, [sp, #0]
 80191b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80191b2:	4798      	blx	r3
 80191b4:	4220      	tst	r0, r4
 80191b6:	d104      	bne.n	80191c2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 80191b8:	4b09      	ldr	r3, [pc, #36]	@ (80191e0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 80191ba:	f240 2122 	movw	r1, #546	@ 0x222
 80191be:	4a06      	ldr	r2, [pc, #24]	@ (80191d8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 80191c0:	e7f0      	b.n	80191a4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 80191c2:	6870      	ldr	r0, [r6, #4]
 80191c4:	4669      	mov	r1, sp
 80191c6:	6803      	ldr	r3, [r0, #0]
 80191c8:	685b      	ldr	r3, [r3, #4]
 80191ca:	4798      	blx	r3
 80191cc:	b009      	add	sp, #36	@ 0x24
 80191ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d2:	bf00      	nop
 80191d4:	0802e3c6 	.word	0x0802e3c6
 80191d8:	0802e6f2 	.word	0x0802e6f2
 80191dc:	0802e4fb 	.word	0x0802e4fb
 80191e0:	0802e3fe 	.word	0x0802e3fe

080191e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 80191e4:	b508      	push	{r3, lr}
 80191e6:	290d      	cmp	r1, #13
 80191e8:	d817      	bhi.n	801921a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 80191ea:	e8df f001 	tbb	[pc, r1]
 80191ee:	090b      	.short	0x090b
 80191f0:	0d0d0d07 	.word	0x0d0d0d07
 80191f4:	1414140d 	.word	0x1414140d
 80191f8:	0d0d1414 	.word	0x0d0d1414
 80191fc:	2020      	movs	r0, #32
 80191fe:	bd08      	pop	{r3, pc}
 8019200:	2018      	movs	r0, #24
 8019202:	e7fc      	b.n	80191fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019204:	2010      	movs	r0, #16
 8019206:	e7fa      	b.n	80191fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8019208:	4b05      	ldr	r3, [pc, #20]	@ (8019220 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801920a:	f240 2182 	movw	r1, #642	@ 0x282
 801920e:	4a05      	ldr	r2, [pc, #20]	@ (8019224 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019210:	4805      	ldr	r0, [pc, #20]	@ (8019228 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8019212:	f011 fea9 	bl	802af68 <__assert_func>
 8019216:	2008      	movs	r0, #8
 8019218:	e7f1      	b.n	80191fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801921a:	2000      	movs	r0, #0
 801921c:	e7ef      	b.n	80191fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801921e:	bf00      	nop
 8019220:	0802e577 	.word	0x0802e577
 8019224:	0802ea1d 	.word	0x0802ea1d
 8019228:	0802e4fb 	.word	0x0802e4fb

0801922c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801922c:	b570      	push	{r4, r5, r6, lr}
 801922e:	460d      	mov	r5, r1
 8019230:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8019234:	4616      	mov	r6, r2
 8019236:	461c      	mov	r4, r3
 8019238:	f7ff ffd4 	bl	80191e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801923c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019240:	10c0      	asrs	r0, r0, #3
 8019242:	fb06 5101 	mla	r1, r6, r1, r5
 8019246:	fb00 4001 	mla	r0, r0, r1, r4
 801924a:	bd70      	pop	{r4, r5, r6, pc}

0801924c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801924c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019250:	b08a      	sub	sp, #40	@ 0x28
 8019252:	f04f 0c00 	mov.w	ip, #0
 8019256:	4604      	mov	r4, r0
 8019258:	469a      	mov	sl, r3
 801925a:	f89d 5064 	ldrb.w	r5, [sp, #100]	@ 0x64
 801925e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	@ 0x4c
 8019262:	2d0b      	cmp	r5, #11
 8019264:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8019268:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 801926c:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 8019270:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 8019274:	f89d 8068 	ldrb.w	r8, [sp, #104]	@ 0x68
 8019278:	f8cd c014 	str.w	ip, [sp, #20]
 801927c:	d12d      	bne.n	80192da <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801927e:	2080      	movs	r0, #128	@ 0x80
 8019280:	9204      	str	r2, [sp, #16]
 8019282:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8019286:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801928a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801928e:	f8ad 701c 	strh.w	r7, [sp, #28]
 8019292:	f8ad 601e 	strh.w	r6, [sp, #30]
 8019296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801929a:	4620      	mov	r0, r4
 801929c:	f7ff feec 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80192a0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 80192a4:	4603      	mov	r3, r0
 80192a6:	4651      	mov	r1, sl
 80192a8:	4620      	mov	r0, r4
 80192aa:	e9cd 9800 	strd	r9, r8, [sp]
 80192ae:	f7ff ffbd 	bl	801922c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80192b2:	f89d 306c 	ldrb.w	r3, [sp, #108]	@ 0x6c
 80192b6:	9006      	str	r0, [sp, #24]
 80192b8:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 80192bc:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 80192c0:	f88d 8026 	strb.w	r8, [sp, #38]	@ 0x26
 80192c4:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 80192c8:	b107      	cbz	r7, 80192cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 80192ca:	b9d6      	cbnz	r6, 8019302 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 80192cc:	4b17      	ldr	r3, [pc, #92]	@ (801932c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 80192ce:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80192d2:	4a17      	ldr	r2, [pc, #92]	@ (8019330 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80192d4:	4817      	ldr	r0, [pc, #92]	@ (8019334 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 80192d6:	f011 fe47 	bl	802af68 <__assert_func>
 80192da:	2d02      	cmp	r5, #2
 80192dc:	d108      	bne.n	80192f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 80192de:	2bff      	cmp	r3, #255	@ 0xff
 80192e0:	d104      	bne.n	80192ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 80192e2:	2800      	cmp	r0, #0
 80192e4:	bf14      	ite	ne
 80192e6:	2040      	movne	r0, #64	@ 0x40
 80192e8:	2020      	moveq	r0, #32
 80192ea:	e7c9      	b.n	8019280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80192ec:	2040      	movs	r0, #64	@ 0x40
 80192ee:	e7c7      	b.n	8019280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80192f0:	2bff      	cmp	r3, #255	@ 0xff
 80192f2:	d104      	bne.n	80192fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 80192f4:	2800      	cmp	r0, #0
 80192f6:	bf14      	ite	ne
 80192f8:	2004      	movne	r0, #4
 80192fa:	2001      	moveq	r0, #1
 80192fc:	e7c0      	b.n	8019280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80192fe:	2004      	movs	r0, #4
 8019300:	e7be      	b.n	8019280 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8019302:	6823      	ldr	r3, [r4, #0]
 8019304:	4620      	mov	r0, r4
 8019306:	9d02      	ldr	r5, [sp, #8]
 8019308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801930a:	4798      	blx	r3
 801930c:	4228      	tst	r0, r5
 801930e:	d104      	bne.n	801931a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 8019310:	4b09      	ldr	r3, [pc, #36]	@ (8019338 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 8019312:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8019316:	4a06      	ldr	r2, [pc, #24]	@ (8019330 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8019318:	e7dc      	b.n	80192d4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 801931a:	6860      	ldr	r0, [r4, #4]
 801931c:	a902      	add	r1, sp, #8
 801931e:	6803      	ldr	r3, [r0, #0]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	4798      	blx	r3
 8019324:	b00a      	add	sp, #40	@ 0x28
 8019326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801932a:	bf00      	nop
 801932c:	0802e349 	.word	0x0802e349
 8019330:	0802e8ab 	.word	0x0802e8ab
 8019334:	0802e4fb 	.word	0x0802e4fb
 8019338:	0802e381 	.word	0x0802e381

0801933c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801933c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019340:	b08b      	sub	sp, #44	@ 0x2c
 8019342:	469b      	mov	fp, r3
 8019344:	4604      	mov	r4, r0
 8019346:	4692      	mov	sl, r2
 8019348:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 801934c:	2600      	movs	r6, #0
 801934e:	f89d 5060 	ldrb.w	r5, [sp, #96]	@ 0x60
 8019352:	4689      	mov	r9, r1
 8019354:	2fff      	cmp	r7, #255	@ 0xff
 8019356:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801935a:	9605      	str	r6, [sp, #20]
 801935c:	bf14      	ite	ne
 801935e:	2308      	movne	r3, #8
 8019360:	2302      	moveq	r3, #2
 8019362:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8019366:	f7ff fe87 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801936a:	465a      	mov	r2, fp
 801936c:	4603      	mov	r3, r0
 801936e:	4651      	mov	r1, sl
 8019370:	4620      	mov	r0, r4
 8019372:	e9cd 8500 	strd	r8, r5, [sp]
 8019376:	f7ff ff59 	bl	801922c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801937a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 801937e:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
 8019382:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019386:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801938a:	f88d 5026 	strb.w	r5, [sp, #38]	@ 0x26
 801938e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019392:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8019396:	9d02      	ldr	r5, [sp, #8]
 8019398:	f88d 3027 	strb.w	r3, [sp, #39]	@ 0x27
 801939c:	6823      	ldr	r3, [r4, #0]
 801939e:	9006      	str	r0, [sp, #24]
 80193a0:	4620      	mov	r0, r4
 80193a2:	f8ad 6020 	strh.w	r6, [sp, #32]
 80193a6:	f8ad 8022 	strh.w	r8, [sp, #34]	@ 0x22
 80193aa:	f8cd 9014 	str.w	r9, [sp, #20]
 80193ae:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 80193b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193b4:	4798      	blx	r3
 80193b6:	4228      	tst	r0, r5
 80193b8:	d106      	bne.n	80193c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 80193ba:	4b07      	ldr	r3, [pc, #28]	@ (80193d8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 80193bc:	f240 2137 	movw	r1, #567	@ 0x237
 80193c0:	4a06      	ldr	r2, [pc, #24]	@ (80193dc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 80193c2:	4807      	ldr	r0, [pc, #28]	@ (80193e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 80193c4:	f011 fdd0 	bl	802af68 <__assert_func>
 80193c8:	6860      	ldr	r0, [r4, #4]
 80193ca:	a902      	add	r1, sp, #8
 80193cc:	6803      	ldr	r3, [r0, #0]
 80193ce:	685b      	ldr	r3, [r3, #4]
 80193d0:	4798      	blx	r3
 80193d2:	b00b      	add	sp, #44	@ 0x2c
 80193d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193d8:	0802e381 	.word	0x0802e381
 80193dc:	0802e982 	.word	0x0802e982
 80193e0:	0802e4fb 	.word	0x0802e4fb

080193e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80193e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80193e8:	461f      	mov	r7, r3
 80193ea:	4b0b      	ldr	r3, [pc, #44]	@ (8019418 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80193ec:	460d      	mov	r5, r1
 80193ee:	4616      	mov	r6, r2
 80193f0:	f8b3 8000 	ldrh.w	r8, [r3]
 80193f4:	4604      	mov	r4, r0
 80193f6:	f7ea ff57 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 80193fa:	6803      	ldr	r3, [r0, #0]
 80193fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193fe:	4798      	blx	r3
 8019400:	463b      	mov	r3, r7
 8019402:	4632      	mov	r2, r6
 8019404:	4629      	mov	r1, r5
 8019406:	e9cd 8000 	strd	r8, r0, [sp]
 801940a:	4620      	mov	r0, r4
 801940c:	f7ff ff0e 	bl	801922c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019410:	b002      	add	sp, #8
 8019412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019416:	bf00      	nop
 8019418:	2400b8c6 	.word	0x2400b8c6

0801941c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801941c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019420:	4698      	mov	r8, r3
 8019422:	b088      	sub	sp, #32
 8019424:	2300      	movs	r3, #0
 8019426:	4617      	mov	r7, r2
 8019428:	4604      	mov	r4, r0
 801942a:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 801942e:	9303      	str	r3, [sp, #12]
 8019430:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8019434:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8019438:	f8ad 6014 	strh.w	r6, [sp, #20]
 801943c:	f8ad 5016 	strh.w	r5, [sp, #22]
 8019440:	e9cd 3100 	strd	r3, r1, [sp]
 8019444:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8019448:	f8ad 3018 	strh.w	r3, [sp, #24]
 801944c:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8019450:	f88d 301c 	strb.w	r3, [sp, #28]
 8019454:	f7ff fe10 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019458:	4642      	mov	r2, r8
 801945a:	4603      	mov	r3, r0
 801945c:	4639      	mov	r1, r7
 801945e:	4620      	mov	r0, r4
 8019460:	f7ff ffc0 	bl	80193e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019464:	4b18      	ldr	r3, [pc, #96]	@ (80194c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8019466:	9004      	str	r0, [sp, #16]
 8019468:	881b      	ldrh	r3, [r3, #0]
 801946a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801946e:	f7ea ff1b 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8019472:	6803      	ldr	r3, [r0, #0]
 8019474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019476:	4798      	blx	r3
 8019478:	f88d 001e 	strb.w	r0, [sp, #30]
 801947c:	f88d 001d 	strb.w	r0, [sp, #29]
 8019480:	b106      	cbz	r6, 8019484 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 8019482:	b935      	cbnz	r5, 8019492 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8019484:	4b11      	ldr	r3, [pc, #68]	@ (80194cc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8019486:	f240 11f1 	movw	r1, #497	@ 0x1f1
 801948a:	4a11      	ldr	r2, [pc, #68]	@ (80194d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 801948c:	4811      	ldr	r0, [pc, #68]	@ (80194d4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801948e:	f011 fd6b 	bl	802af68 <__assert_func>
 8019492:	6823      	ldr	r3, [r4, #0]
 8019494:	4620      	mov	r0, r4
 8019496:	9d00      	ldr	r5, [sp, #0]
 8019498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801949a:	4798      	blx	r3
 801949c:	4228      	tst	r0, r5
 801949e:	d104      	bne.n	80194aa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 80194a0:	4b0d      	ldr	r3, [pc, #52]	@ (80194d8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 80194a2:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 80194a6:	4a0a      	ldr	r2, [pc, #40]	@ (80194d0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 80194a8:	e7f0      	b.n	801948c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 80194aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80194ac:	4669      	mov	r1, sp
 80194ae:	6860      	ldr	r0, [r4, #4]
 80194b0:	9303      	str	r3, [sp, #12]
 80194b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80194b6:	f88d 301f 	strb.w	r3, [sp, #31]
 80194ba:	6803      	ldr	r3, [r0, #0]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	4798      	blx	r3
 80194c0:	b008      	add	sp, #32
 80194c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194c6:	bf00      	nop
 80194c8:	2400b8c6 	.word	0x2400b8c6
 80194cc:	0802e349 	.word	0x0802e349
 80194d0:	0802e757 	.word	0x0802e757
 80194d4:	0802e4fb 	.word	0x0802e4fb
 80194d8:	0802e381 	.word	0x0802e381

080194dc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80194dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194de:	b08b      	sub	sp, #44	@ 0x2c
 80194e0:	4604      	mov	r4, r0
 80194e2:	466b      	mov	r3, sp
 80194e4:	e883 0006 	stmia.w	r3, {r1, r2}
 80194e8:	4b20      	ldr	r3, [pc, #128]	@ (801956c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 80194ea:	781b      	ldrb	r3, [r3, #0]
 80194ec:	b933      	cbnz	r3, 80194fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 80194ee:	4b20      	ldr	r3, [pc, #128]	@ (8019570 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 80194f0:	f44f 7112 	mov.w	r1, #584	@ 0x248
 80194f4:	4a1f      	ldr	r2, [pc, #124]	@ (8019574 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80194f6:	4820      	ldr	r0, [pc, #128]	@ (8019578 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80194f8:	f011 fd36 	bl	802af68 <__assert_func>
 80194fc:	2301      	movs	r3, #1
 80194fe:	2500      	movs	r5, #0
 8019500:	f8bd 6000 	ldrh.w	r6, [sp]
 8019504:	9302      	str	r3, [sp, #8]
 8019506:	6803      	ldr	r3, [r0, #0]
 8019508:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801950c:	9505      	str	r5, [sp, #20]
 801950e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019510:	4798      	blx	r3
 8019512:	463a      	mov	r2, r7
 8019514:	4631      	mov	r1, r6
 8019516:	4603      	mov	r3, r0
 8019518:	4620      	mov	r0, r4
 801951a:	f7ff ff63 	bl	80193e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801951e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8019520:	9003      	str	r0, [sp, #12]
 8019522:	9306      	str	r3, [sp, #24]
 8019524:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019528:	f8ad 301c 	strh.w	r3, [sp, #28]
 801952c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019530:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019534:	4b11      	ldr	r3, [pc, #68]	@ (801957c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 8019536:	881b      	ldrh	r3, [r3, #0]
 8019538:	f8ad 3020 	strh.w	r3, [sp, #32]
 801953c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019540:	f7ea feb2 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 8019544:	6803      	ldr	r3, [r0, #0]
 8019546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019548:	4798      	blx	r3
 801954a:	23ff      	movs	r3, #255	@ 0xff
 801954c:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 8019550:	a902      	add	r1, sp, #8
 8019552:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8019556:	6860      	ldr	r0, [r4, #4]
 8019558:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801955c:	f88d 5027 	strb.w	r5, [sp, #39]	@ 0x27
 8019560:	6803      	ldr	r3, [r0, #0]
 8019562:	685b      	ldr	r3, [r3, #4]
 8019564:	4798      	blx	r3
 8019566:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8019568:	b00b      	add	sp, #44	@ 0x2c
 801956a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801956c:	2400b8cb 	.word	0x2400b8cb
 8019570:	0802e448 	.word	0x0802e448
 8019574:	0802e801 	.word	0x0802e801
 8019578:	0802e4fb 	.word	0x0802e4fb
 801957c:	2400b8c6 	.word	0x2400b8c6

08019580 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019584:	b08a      	sub	sp, #40	@ 0x28
 8019586:	2600      	movs	r6, #0
 8019588:	4604      	mov	r4, r0
 801958a:	466d      	mov	r5, sp
 801958c:	9605      	str	r6, [sp, #20]
 801958e:	e885 0006 	stmia.w	r5, {r1, r2}
 8019592:	461d      	mov	r5, r3
 8019594:	2301      	movs	r3, #1
 8019596:	f8bd 7000 	ldrh.w	r7, [sp]
 801959a:	9302      	str	r3, [sp, #8]
 801959c:	6803      	ldr	r3, [r0, #0]
 801959e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80195a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195a4:	4798      	blx	r3
 80195a6:	4642      	mov	r2, r8
 80195a8:	4639      	mov	r1, r7
 80195aa:	4603      	mov	r3, r0
 80195ac:	4620      	mov	r0, r4
 80195ae:	f7ff ff19 	bl	80193e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80195b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80195b6:	9003      	str	r0, [sp, #12]
 80195b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80195bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80195c0:	9506      	str	r5, [sp, #24]
 80195c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80195c6:	4b0f      	ldr	r3, [pc, #60]	@ (8019604 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 80195c8:	881b      	ldrh	r3, [r3, #0]
 80195ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 80195ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80195d0:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 80195d4:	f7ea fe68 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 80195d8:	6803      	ldr	r3, [r0, #0]
 80195da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195dc:	4798      	blx	r3
 80195de:	23ff      	movs	r3, #255	@ 0xff
 80195e0:	f88d 0025 	strb.w	r0, [sp, #37]	@ 0x25
 80195e4:	a902      	add	r1, sp, #8
 80195e6:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 80195ea:	6860      	ldr	r0, [r4, #4]
 80195ec:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80195f0:	f88d 6027 	strb.w	r6, [sp, #39]	@ 0x27
 80195f4:	6803      	ldr	r3, [r0, #0]
 80195f6:	685b      	ldr	r3, [r3, #4]
 80195f8:	4798      	blx	r3
 80195fa:	4628      	mov	r0, r5
 80195fc:	b00a      	add	sp, #40	@ 0x28
 80195fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019602:	bf00      	nop
 8019604:	2400b8c6 	.word	0x2400b8c6

08019608 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019608:	b570      	push	{r4, r5, r6, lr}
 801960a:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 801960e:	4604      	mov	r4, r0
 8019610:	b19b      	cbz	r3, 801963a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019612:	2002      	movs	r0, #2
 8019614:	f7e8 fa42 	bl	8001a9c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019618:	2300      	movs	r3, #0
 801961a:	4620      	mov	r0, r4
 801961c:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
 8019620:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 8019624:	6823      	ldr	r3, [r4, #0]
 8019626:	f8d3 50b0 	ldr.w	r5, [r3, #176]	@ 0xb0
 801962a:	f7ff fd25 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801962e:	4601      	mov	r1, r0
 8019630:	4620      	mov	r0, r4
 8019632:	462b      	mov	r3, r5
 8019634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019638:	4718      	bx	r3
 801963a:	bd70      	pop	{r4, r5, r6, pc}

0801963c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801963c:	b538      	push	{r3, r4, r5, lr}
 801963e:	f890 2078 	ldrb.w	r2, [r0, #120]	@ 0x78
 8019642:	4604      	mov	r4, r0
 8019644:	460d      	mov	r5, r1
 8019646:	428a      	cmp	r2, r1
 8019648:	d008      	beq.n	801965c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 801964a:	2a01      	cmp	r2, #1
 801964c:	6803      	ldr	r3, [r0, #0]
 801964e:	d106      	bne.n	801965e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019650:	b929      	cbnz	r1, 801965e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 8019652:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019656:	4798      	blx	r3
 8019658:	f884 5078 	strb.w	r5, [r4, #120]	@ 0x78
 801965c:	bd38      	pop	{r3, r4, r5, pc}
 801965e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8019662:	4620      	mov	r0, r4
 8019664:	e7f7      	b.n	8019656 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08019668 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8019668:	4b0d      	ldr	r3, [pc, #52]	@ (80196a0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801966a:	b510      	push	{r4, lr}
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	4604      	mov	r4, r0
 8019670:	b95b      	cbnz	r3, 801968a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019672:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8019676:	2b02      	cmp	r3, #2
 8019678:	d007      	beq.n	801968a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801967a:	6840      	ldr	r0, [r0, #4]
 801967c:	f000 f936 	bl	80198ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8019680:	b118      	cbz	r0, 801968a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8019682:	6862      	ldr	r2, [r4, #4]
 8019684:	7a53      	ldrb	r3, [r2, #9]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d0fc      	beq.n	8019684 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801968a:	f7e8 fcc5 	bl	8002018 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801968e:	4620      	mov	r0, r4
 8019690:	2100      	movs	r1, #0
 8019692:	f7ff ffd3 	bl	801963c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019696:	4620      	mov	r0, r4
 8019698:	f7ff fcee 	bl	8019078 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801969c:	bd10      	pop	{r4, pc}
 801969e:	bf00      	nop
 80196a0:	2400b8ca 	.word	0x2400b8ca

080196a4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80196a4:	4770      	bx	lr

080196a6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80196a6:	2000      	movs	r0, #0
 80196a8:	4770      	bx	lr

080196aa <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80196aa:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80196ae:	1a13      	subs	r3, r2, r0
 80196b0:	4258      	negs	r0, r3
 80196b2:	4158      	adcs	r0, r3
 80196b4:	4770      	bx	lr

080196b6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80196b6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80196ba:	1a9b      	subs	r3, r3, r2
 80196bc:	2b00      	cmp	r3, #0
 80196be:	bfdc      	itt	le
 80196c0:	6882      	ldrle	r2, [r0, #8]
 80196c2:	189b      	addle	r3, r3, r2
 80196c4:	2b01      	cmp	r3, #1
 80196c6:	bfcc      	ite	gt
 80196c8:	2000      	movgt	r0, #0
 80196ca:	2001      	movle	r0, #1
 80196cc:	4770      	bx	lr

080196ce <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80196ce:	6902      	ldr	r2, [r0, #16]
 80196d0:	6840      	ldr	r0, [r0, #4]
 80196d2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80196d6:	4770      	bx	lr

080196d8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80196d8:	6803      	ldr	r3, [r0, #0]
 80196da:	691b      	ldr	r3, [r3, #16]
 80196dc:	4718      	bx	r3

080196de <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80196de:	4770      	bx	lr

080196e0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80196e0:	4770      	bx	lr
	...

080196e4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80196e4:	2301      	movs	r3, #1
 80196e6:	b570      	push	{r4, r5, r6, lr}
 80196e8:	7203      	strb	r3, [r0, #8]
 80196ea:	4604      	mov	r4, r0
 80196ec:	6840      	ldr	r0, [r0, #4]
 80196ee:	6803      	ldr	r3, [r0, #0]
 80196f0:	699b      	ldr	r3, [r3, #24]
 80196f2:	4798      	blx	r3
 80196f4:	6803      	ldr	r3, [r0, #0]
 80196f6:	4605      	mov	r5, r0
 80196f8:	2b40      	cmp	r3, #64	@ 0x40
 80196fa:	d039      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80196fc:	d815      	bhi.n	801972a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80196fe:	2b04      	cmp	r3, #4
 8019700:	d022      	beq.n	8019748 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019702:	d808      	bhi.n	8019716 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019704:	2b01      	cmp	r3, #1
 8019706:	d033      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019708:	2b02      	cmp	r3, #2
 801970a:	d108      	bne.n	801971e <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 801970c:	6823      	ldr	r3, [r4, #0]
 801970e:	4620      	mov	r0, r4
 8019710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019712:	4798      	blx	r3
 8019714:	e025      	b.n	8019762 <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 8019716:	2b08      	cmp	r3, #8
 8019718:	d01e      	beq.n	8019758 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 801971a:	2b20      	cmp	r3, #32
 801971c:	d028      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801971e:	4b17      	ldr	r3, [pc, #92]	@ (801977c <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 8019720:	218b      	movs	r1, #139	@ 0x8b
 8019722:	4a17      	ldr	r2, [pc, #92]	@ (8019780 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 8019724:	4817      	ldr	r0, [pc, #92]	@ (8019784 <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 8019726:	f011 fc1f 	bl	802af68 <__assert_func>
 801972a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801972e:	d01f      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019730:	d804      	bhi.n	801973c <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 8019732:	2b80      	cmp	r3, #128	@ 0x80
 8019734:	d01c      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801973a:	e7ef      	b.n	801971c <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 801973c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019740:	d016      	beq.n	8019770 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8019742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019746:	e7e0      	b.n	801970a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8019748:	6823      	ldr	r3, [r4, #0]
 801974a:	7f01      	ldrb	r1, [r0, #28]
 801974c:	4620      	mov	r0, r4
 801974e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019750:	4798      	blx	r3
 8019752:	6823      	ldr	r3, [r4, #0]
 8019754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019756:	e006      	b.n	8019766 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8019758:	6823      	ldr	r3, [r4, #0]
 801975a:	7f01      	ldrb	r1, [r0, #28]
 801975c:	4620      	mov	r0, r4
 801975e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019760:	4798      	blx	r3
 8019762:	6823      	ldr	r3, [r4, #0]
 8019764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019766:	4629      	mov	r1, r5
 8019768:	4620      	mov	r0, r4
 801976a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801976e:	4718      	bx	r3
 8019770:	6823      	ldr	r3, [r4, #0]
 8019772:	4620      	mov	r0, r4
 8019774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019776:	4798      	blx	r3
 8019778:	e7eb      	b.n	8019752 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801977a:	bf00      	nop
 801977c:	0802ea66 	.word	0x0802ea66
 8019780:	0802eb78 	.word	0x0802eb78
 8019784:	0802ea8b 	.word	0x0802ea8b

08019788 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019788:	b570      	push	{r4, r5, r6, lr}
 801978a:	4604      	mov	r4, r0
 801978c:	460e      	mov	r6, r1
 801978e:	6860      	ldr	r0, [r4, #4]
 8019790:	6803      	ldr	r3, [r0, #0]
 8019792:	685b      	ldr	r3, [r3, #4]
 8019794:	4798      	blx	r3
 8019796:	2800      	cmp	r0, #0
 8019798:	d1f9      	bne.n	801978e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801979a:	4d0d      	ldr	r5, [pc, #52]	@ (80197d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801979c:	6828      	ldr	r0, [r5, #0]
 801979e:	6803      	ldr	r3, [r0, #0]
 80197a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80197a2:	4798      	blx	r3
 80197a4:	f7e8 fc52 	bl	800204c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80197a8:	6828      	ldr	r0, [r5, #0]
 80197aa:	2101      	movs	r1, #1
 80197ac:	f7ff ff46 	bl	801963c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80197b0:	6860      	ldr	r0, [r4, #4]
 80197b2:	4631      	mov	r1, r6
 80197b4:	6803      	ldr	r3, [r0, #0]
 80197b6:	689b      	ldr	r3, [r3, #8]
 80197b8:	4798      	blx	r3
 80197ba:	6823      	ldr	r3, [r4, #0]
 80197bc:	4620      	mov	r0, r4
 80197be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80197c0:	4798      	blx	r3
 80197c2:	6828      	ldr	r0, [r5, #0]
 80197c4:	6803      	ldr	r3, [r0, #0]
 80197c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80197ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80197cc:	4718      	bx	r3
 80197ce:	bf00      	nop
 80197d0:	2400b8cc 	.word	0x2400b8cc

080197d4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80197d4:	b508      	push	{r3, lr}
 80197d6:	f7e8 fc1f 	bl	8002018 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80197da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80197de:	f7e8 bc29 	b.w	8002034 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080197e2 <_ZN8touchgfx13DMA_Interface5startEv>:
 80197e2:	b510      	push	{r4, lr}
 80197e4:	4604      	mov	r4, r0
 80197e6:	6840      	ldr	r0, [r0, #4]
 80197e8:	6803      	ldr	r3, [r0, #0]
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	4798      	blx	r3
 80197ee:	b948      	cbnz	r0, 8019804 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80197f0:	7a63      	ldrb	r3, [r4, #9]
 80197f2:	b13b      	cbz	r3, 8019804 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80197f4:	7a23      	ldrb	r3, [r4, #8]
 80197f6:	b92b      	cbnz	r3, 8019804 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80197f8:	6823      	ldr	r3, [r4, #0]
 80197fa:	4620      	mov	r0, r4
 80197fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019802:	4718      	bx	r3
 8019804:	bd10      	pop	{r4, pc}
	...

08019808 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019808:	b570      	push	{r4, r5, r6, lr}
 801980a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801980e:	4606      	mov	r6, r0
 8019810:	1a9b      	subs	r3, r3, r2
 8019812:	2b00      	cmp	r3, #0
 8019814:	bfdc      	itt	le
 8019816:	6880      	ldrle	r0, [r0, #8]
 8019818:	181b      	addle	r3, r3, r0
 801981a:	2b01      	cmp	r3, #1
 801981c:	dd13      	ble.n	8019846 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 801981e:	6874      	ldr	r4, [r6, #4]
 8019820:	460d      	mov	r5, r1
 8019822:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 8019826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019828:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801982a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801982e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8019832:	68f3      	ldr	r3, [r6, #12]
 8019834:	68b2      	ldr	r2, [r6, #8]
 8019836:	f3bf 8f5b 	dmb	ish
 801983a:	3301      	adds	r3, #1
 801983c:	429a      	cmp	r2, r3
 801983e:	bfd8      	it	le
 8019840:	1a9b      	suble	r3, r3, r2
 8019842:	60f3      	str	r3, [r6, #12]
 8019844:	bd70      	pop	{r4, r5, r6, pc}
 8019846:	4b03      	ldr	r3, [pc, #12]	@ (8019854 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 8019848:	2139      	movs	r1, #57	@ 0x39
 801984a:	4a03      	ldr	r2, [pc, #12]	@ (8019858 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801984c:	4803      	ldr	r0, [pc, #12]	@ (801985c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801984e:	f011 fb8b 	bl	802af68 <__assert_func>
 8019852:	bf00      	nop
 8019854:	0802eab1 	.word	0x0802eab1
 8019858:	0802eba8 	.word	0x0802eba8
 801985c:	0802ea8b 	.word	0x0802ea8b

08019860 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019860:	b510      	push	{r4, lr}
 8019862:	6803      	ldr	r3, [r0, #0]
 8019864:	4604      	mov	r4, r0
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	4798      	blx	r3
 801986a:	b128      	cbz	r0, 8019878 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801986c:	4b07      	ldr	r3, [pc, #28]	@ (801988c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801986e:	213f      	movs	r1, #63	@ 0x3f
 8019870:	4a07      	ldr	r2, [pc, #28]	@ (8019890 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019872:	4808      	ldr	r0, [pc, #32]	@ (8019894 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019874:	f011 fb78 	bl	802af68 <__assert_func>
 8019878:	6923      	ldr	r3, [r4, #16]
 801987a:	68a2      	ldr	r2, [r4, #8]
 801987c:	f3bf 8f5b 	dmb	ish
 8019880:	3301      	adds	r3, #1
 8019882:	429a      	cmp	r2, r3
 8019884:	bfd8      	it	le
 8019886:	1a9b      	suble	r3, r3, r2
 8019888:	6123      	str	r3, [r4, #16]
 801988a:	bd10      	pop	{r4, pc}
 801988c:	0802ead4 	.word	0x0802ead4
 8019890:	0802ebf6 	.word	0x0802ebf6
 8019894:	0802ea8b 	.word	0x0802ea8b

08019898 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019898:	b570      	push	{r4, r5, r6, lr}
 801989a:	4604      	mov	r4, r0
 801989c:	6840      	ldr	r0, [r0, #4]
 801989e:	6803      	ldr	r3, [r0, #0]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	4798      	blx	r3
 80198a4:	4605      	mov	r5, r0
 80198a6:	b930      	cbnz	r0, 80198b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80198a8:	7a23      	ldrb	r3, [r4, #8]
 80198aa:	b123      	cbz	r3, 80198b6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80198ac:	6860      	ldr	r0, [r4, #4]
 80198ae:	6803      	ldr	r3, [r0, #0]
 80198b0:	695b      	ldr	r3, [r3, #20]
 80198b2:	4798      	blx	r3
 80198b4:	7225      	strb	r5, [r4, #8]
 80198b6:	6860      	ldr	r0, [r4, #4]
 80198b8:	6803      	ldr	r3, [r0, #0]
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	4798      	blx	r3
 80198be:	b928      	cbnz	r0, 80198cc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	4620      	mov	r0, r4
 80198c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198ca:	4718      	bx	r3
 80198cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198d0:	f7e8 bbc8 	b.w	8002064 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080198d4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80198d4:	b510      	push	{r4, lr}
 80198d6:	6082      	str	r2, [r0, #8]
 80198d8:	2200      	movs	r2, #0
 80198da:	4c03      	ldr	r4, [pc, #12]	@ (80198e8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80198dc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80198e0:	e9c0 4100 	strd	r4, r1, [r0]
 80198e4:	bd10      	pop	{r4, pc}
 80198e6:	bf00      	nop
 80198e8:	0802eb5c 	.word	0x0802eb5c

080198ec <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80198ec:	6840      	ldr	r0, [r0, #4]
 80198ee:	6803      	ldr	r3, [r0, #0]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4718      	bx	r3

080198f4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80198f4:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 80198f8:	4770      	bx	lr

080198fa <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80198fa:	b510      	push	{r4, lr}
 80198fc:	4604      	mov	r4, r0
 80198fe:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8019900:	b150      	cbz	r0, 8019918 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8019902:	6803      	ldr	r3, [r0, #0]
 8019904:	68db      	ldr	r3, [r3, #12]
 8019906:	4798      	blx	r3
 8019908:	b130      	cbz	r0, 8019918 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801990a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801990c:	4621      	mov	r1, r4
 801990e:	6803      	ldr	r3, [r0, #0]
 8019910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019914:	689b      	ldr	r3, [r3, #8]
 8019916:	4718      	bx	r3
 8019918:	bd10      	pop	{r4, pc}

0801991a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 801991a:	790b      	ldrb	r3, [r1, #4]
 801991c:	2b00      	cmp	r3, #0
 801991e:	bf0c      	ite	eq
 8019920:	2301      	moveq	r3, #1
 8019922:	2300      	movne	r3, #0
 8019924:	b570      	push	{r4, r5, r6, lr}
 8019926:	4604      	mov	r4, r0
 8019928:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801992c:	460e      	mov	r6, r1
 801992e:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8019932:	d109      	bne.n	8019948 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019934:	b14d      	cbz	r5, 801994a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8019936:	7933      	ldrb	r3, [r6, #4]
 8019938:	2b01      	cmp	r3, #1
 801993a:	d10c      	bne.n	8019956 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801993c:	6823      	ldr	r3, [r4, #0]
 801993e:	4620      	mov	r0, r4
 8019940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019946:	4718      	bx	r3
 8019948:	b12d      	cbz	r5, 8019956 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801994a:	6823      	ldr	r3, [r4, #0]
 801994c:	4620      	mov	r0, r4
 801994e:	695b      	ldr	r3, [r3, #20]
 8019950:	4798      	blx	r3
 8019952:	2d00      	cmp	r5, #0
 8019954:	d1ef      	bne.n	8019936 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019956:	bd70      	pop	{r4, r5, r6, pc}

08019958 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 8019958:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801995c:	b133      	cbz	r3, 801996c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 801995e:	790b      	ldrb	r3, [r1, #4]
 8019960:	2b01      	cmp	r3, #1
 8019962:	bf01      	itttt	eq
 8019964:	8dc3      	ldrheq	r3, [r0, #46]	@ 0x2e
 8019966:	8e02      	ldrheq	r2, [r0, #48]	@ 0x30
 8019968:	8603      	strheq	r3, [r0, #48]	@ 0x30
 801996a:	85c2      	strheq	r2, [r0, #46]	@ 0x2e
 801996c:	f7ff bfd5 	b.w	801991a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08019970 <_ZN8touchgfx12ToggleButton10forceStateEb>:
 8019970:	b570      	push	{r4, r5, r6, lr}
 8019972:	4604      	mov	r4, r0
 8019974:	f100 0534 	add.w	r5, r0, #52	@ 0x34
 8019978:	b169      	cbz	r1, 8019996 <_ZN8touchgfx12ToggleButton10forceStateEb+0x26>
 801997a:	302e      	adds	r0, #46	@ 0x2e
 801997c:	f7f0 fdb8 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019980:	4606      	mov	r6, r0
 8019982:	4628      	mov	r0, r5
 8019984:	f7f0 fdb4 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 8019988:	4286      	cmp	r6, r0
 801998a:	d003      	beq.n	8019994 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>
 801998c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 801998e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8019990:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8019992:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 8019994:	bd70      	pop	{r4, r5, r6, pc}
 8019996:	3030      	adds	r0, #48	@ 0x30
 8019998:	f7f0 fdaa 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 801999c:	4606      	mov	r6, r0
 801999e:	4628      	mov	r0, r5
 80199a0:	f7f0 fda6 	bl	800a4f0 <_ZNK8touchgfx6Bitmap5getIdEv>
 80199a4:	4286      	cmp	r6, r0
 80199a6:	bf1f      	itttt	ne
 80199a8:	8e23      	ldrhne	r3, [r4, #48]	@ 0x30
 80199aa:	85e3      	strhne	r3, [r4, #46]	@ 0x2e
 80199ac:	8ea3      	ldrhne	r3, [r4, #52]	@ 0x34
 80199ae:	8623      	strhne	r3, [r4, #48]	@ 0x30
 80199b0:	e7f0      	b.n	8019994 <_ZN8touchgfx12ToggleButton10forceStateEb+0x24>

080199b2 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80199b2:	2200      	movs	r2, #0
 80199b4:	8002      	strh	r2, [r0, #0]
 80199b6:	8042      	strh	r2, [r0, #2]
 80199b8:	8082      	strh	r2, [r0, #4]
 80199ba:	80c2      	strh	r2, [r0, #6]
 80199bc:	4770      	bx	lr

080199be <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80199be:	b570      	push	{r4, r5, r6, lr}
 80199c0:	6803      	ldr	r3, [r0, #0]
 80199c2:	4604      	mov	r4, r0
 80199c4:	4615      	mov	r5, r2
 80199c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199c8:	4798      	blx	r3
 80199ca:	6823      	ldr	r3, [r4, #0]
 80199cc:	4629      	mov	r1, r5
 80199ce:	4620      	mov	r0, r4
 80199d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80199d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199d6:	4718      	bx	r3

080199d8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 80199d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199de:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80199e0:	4299      	cmp	r1, r3
 80199e2:	d029      	beq.n	8019a38 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 80199e4:	4b15      	ldr	r3, [pc, #84]	@ (8019a3c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	b92b      	cbnz	r3, 80199f6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 80199ea:	4b15      	ldr	r3, [pc, #84]	@ (8019a40 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 80199ec:	21ae      	movs	r1, #174	@ 0xae
 80199ee:	4a15      	ldr	r2, [pc, #84]	@ (8019a44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 80199f0:	4815      	ldr	r0, [pc, #84]	@ (8019a48 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 80199f2:	f011 fab9 	bl	802af68 <__assert_func>
 80199f6:	4a15      	ldr	r2, [pc, #84]	@ (8019a4c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 80199f8:	8812      	ldrh	r2, [r2, #0]
 80199fa:	428a      	cmp	r2, r1
 80199fc:	d803      	bhi.n	8019a06 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 80199fe:	4b14      	ldr	r3, [pc, #80]	@ (8019a50 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8019a00:	21af      	movs	r1, #175	@ 0xaf
 8019a02:	4a10      	ldr	r2, [pc, #64]	@ (8019a44 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8019a04:	e7f4      	b.n	80199f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 8019a06:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019a0a:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019a0e:	4b11      	ldr	r3, [pc, #68]	@ (8019a54 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8019a10:	7854      	ldrb	r4, [r2, #1]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019a18:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019a1c:	682b      	ldr	r3, [r5, #0]
 8019a1e:	69de      	ldr	r6, [r3, #28]
 8019a20:	4b0d      	ldr	r3, [pc, #52]	@ (8019a58 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 8019a22:	6818      	ldr	r0, [r3, #0]
 8019a24:	f7f0 fb58 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 8019a28:	2300      	movs	r3, #0
 8019a2a:	4602      	mov	r2, r0
 8019a2c:	4621      	mov	r1, r4
 8019a2e:	9300      	str	r3, [sp, #0]
 8019a30:	4628      	mov	r0, r5
 8019a32:	47b0      	blx	r6
 8019a34:	b002      	add	sp, #8
 8019a36:	bd70      	pop	{r4, r5, r6, pc}
 8019a38:	2000      	movs	r0, #0
 8019a3a:	e7fb      	b.n	8019a34 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8019a3c:	2400b91c 	.word	0x2400b91c
 8019a40:	0802ed04 	.word	0x0802ed04
 8019a44:	0802ee3c 	.word	0x0802ee3c
 8019a48:	0802ed46 	.word	0x0802ed46
 8019a4c:	2400b920 	.word	0x2400b920
 8019a50:	0802ed6f 	.word	0x0802ed6f
 8019a54:	2400b924 	.word	0x2400b924
 8019a58:	2400b928 	.word	0x2400b928

08019a5c <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8019a5c:	b570      	push	{r4, r5, r6, lr}
 8019a5e:	6803      	ldr	r3, [r0, #0]
 8019a60:	4604      	mov	r4, r0
 8019a62:	b28d      	uxth	r5, r1
 8019a64:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019a66:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 8019a68:	4b10      	ldr	r3, [pc, #64]	@ (8019aac <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	b92b      	cbnz	r3, 8019a7a <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8019a6e:	4b10      	ldr	r3, [pc, #64]	@ (8019ab0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8019a70:	21ae      	movs	r1, #174	@ 0xae
 8019a72:	4a10      	ldr	r2, [pc, #64]	@ (8019ab4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019a74:	4810      	ldr	r0, [pc, #64]	@ (8019ab8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8019a76:	f011 fa77 	bl	802af68 <__assert_func>
 8019a7a:	4910      	ldr	r1, [pc, #64]	@ (8019abc <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8019a7c:	8809      	ldrh	r1, [r1, #0]
 8019a7e:	4291      	cmp	r1, r2
 8019a80:	d803      	bhi.n	8019a8a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8019a82:	4b0f      	ldr	r3, [pc, #60]	@ (8019ac0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8019a84:	21af      	movs	r1, #175	@ 0xaf
 8019a86:	4a0b      	ldr	r2, [pc, #44]	@ (8019ab4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8019a88:	e7f4      	b.n	8019a74 <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 8019a8a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8019a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8019ac4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019a96:	6803      	ldr	r3, [r0, #0]
 8019a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a9a:	4798      	blx	r3
 8019a9c:	1a29      	subs	r1, r5, r0
 8019a9e:	4633      	mov	r3, r6
 8019aa0:	4620      	mov	r0, r4
 8019aa2:	b209      	sxth	r1, r1
 8019aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019aa8:	4718      	bx	r3
 8019aaa:	bf00      	nop
 8019aac:	2400b91c 	.word	0x2400b91c
 8019ab0:	0802ed04 	.word	0x0802ed04
 8019ab4:	0802ee3c 	.word	0x0802ee3c
 8019ab8:	0802ed46 	.word	0x0802ed46
 8019abc:	2400b920 	.word	0x2400b920
 8019ac0:	0802ed6f 	.word	0x0802ed6f
 8019ac4:	2400b924 	.word	0x2400b924

08019ac8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8019ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019ad0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8019ad2:	b08c      	sub	sp, #48	@ 0x30
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	4688      	mov	r8, r1
 8019ada:	d05f      	beq.n	8019b9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019adc:	4e31      	ldr	r6, [pc, #196]	@ (8019ba4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8019ade:	6832      	ldr	r2, [r6, #0]
 8019ae0:	b92a      	cbnz	r2, 8019aee <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 8019ae2:	4b31      	ldr	r3, [pc, #196]	@ (8019ba8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 8019ae4:	21ae      	movs	r1, #174	@ 0xae
 8019ae6:	4a31      	ldr	r2, [pc, #196]	@ (8019bac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019ae8:	4831      	ldr	r0, [pc, #196]	@ (8019bb0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8019aea:	f011 fa3d 	bl	802af68 <__assert_func>
 8019aee:	4d31      	ldr	r5, [pc, #196]	@ (8019bb4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8019af0:	8829      	ldrh	r1, [r5, #0]
 8019af2:	4299      	cmp	r1, r3
 8019af4:	d803      	bhi.n	8019afe <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 8019af6:	4b30      	ldr	r3, [pc, #192]	@ (8019bb8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8019af8:	21af      	movs	r1, #175	@ 0xaf
 8019afa:	4a2c      	ldr	r2, [pc, #176]	@ (8019bac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8019afc:	e7f4      	b.n	8019ae8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8019afe:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019b02:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019b06:	4b2d      	ldr	r3, [pc, #180]	@ (8019bbc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019b0e:	2a00      	cmp	r2, #0
 8019b10:	d044      	beq.n	8019b9c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8019b12:	784b      	ldrb	r3, [r1, #1]
 8019b14:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 8019b18:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8019b1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019b20:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 8019b24:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8019b28:	4b25      	ldr	r3, [pc, #148]	@ (8019bc0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8019b2a:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f890 7037 	ldrb.w	r7, [r0, #55]	@ 0x37
 8019b34:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 8019b38:	9207      	str	r2, [sp, #28]
 8019b3a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8019b3c:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019b40:	f88d a020 	strb.w	sl, [sp, #32]
 8019b44:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 8019b48:	9009      	str	r0, [sp, #36]	@ 0x24
 8019b4a:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 8019b4e:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 8019b52:	f88d 702b 	strb.w	r7, [sp, #43]	@ 0x2b
 8019b56:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 8019b5a:	b10a      	cbz	r2, 8019b60 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8019b5c:	6cdf      	ldr	r7, [r3, #76]	@ 0x4c
 8019b5e:	b907      	cbnz	r7, 8019b62 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8019b60:	689f      	ldr	r7, [r3, #8]
 8019b62:	f10d 0914 	add.w	r9, sp, #20
 8019b66:	4621      	mov	r1, r4
 8019b68:	4648      	mov	r0, r9
 8019b6a:	f003 f8f1 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8019b6e:	6833      	ldr	r3, [r6, #0]
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d0b6      	beq.n	8019ae2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 8019b74:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8019b76:	882b      	ldrh	r3, [r5, #0]
 8019b78:	428b      	cmp	r3, r1
 8019b7a:	d9bc      	bls.n	8019af6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 8019b7c:	4b11      	ldr	r3, [pc, #68]	@ (8019bc4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 8019b7e:	6818      	ldr	r0, [r3, #0]
 8019b80:	f7f0 faaa 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 8019b84:	2300      	movs	r3, #0
 8019b86:	9001      	str	r0, [sp, #4]
 8019b88:	4638      	mov	r0, r7
 8019b8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019b8e:	ab07      	add	r3, sp, #28
 8019b90:	9300      	str	r3, [sp, #0]
 8019b92:	4643      	mov	r3, r8
 8019b94:	e899 0006 	ldmia.w	r9, {r1, r2}
 8019b98:	f7f0 fa2f 	bl	8009ffa <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019b9c:	b00c      	add	sp, #48	@ 0x30
 8019b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ba2:	bf00      	nop
 8019ba4:	2400b91c 	.word	0x2400b91c
 8019ba8:	0802ed04 	.word	0x0802ed04
 8019bac:	0802ee3c 	.word	0x0802ee3c
 8019bb0:	0802ed46 	.word	0x0802ed46
 8019bb4:	2400b920 	.word	0x2400b920
 8019bb8:	0802ed6f 	.word	0x0802ed6f
 8019bbc:	2400b924 	.word	0x2400b924
 8019bc0:	2400b8cc 	.word	0x2400b8cc
 8019bc4:	2400b928 	.word	0x2400b928

08019bc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8019bc8:	b40e      	push	{r1, r2, r3}
 8019bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019bce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bd2:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8019bd4:	b09c      	sub	sp, #112	@ 0x70
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	d06b      	beq.n	8019cb4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8019bdc:	aa26      	add	r2, sp, #152	@ 0x98
 8019bde:	f8df a0e8 	ldr.w	sl, [pc, #232]	@ 8019cc8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 8019be2:	9202      	str	r2, [sp, #8]
 8019be4:	f8da 2000 	ldr.w	r2, [sl]
 8019be8:	b92a      	cbnz	r2, 8019bf6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8019bea:	4b33      	ldr	r3, [pc, #204]	@ (8019cb8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8019bec:	21ae      	movs	r1, #174	@ 0xae
 8019bee:	4a33      	ldr	r2, [pc, #204]	@ (8019cbc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019bf0:	4833      	ldr	r0, [pc, #204]	@ (8019cc0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 8019bf2:	f011 f9b9 	bl	802af68 <__assert_func>
 8019bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019ccc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8019bfa:	f8b8 1000 	ldrh.w	r1, [r8]
 8019bfe:	4299      	cmp	r1, r3
 8019c00:	d803      	bhi.n	8019c0a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 8019c02:	4b30      	ldr	r3, [pc, #192]	@ (8019cc4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 8019c04:	21af      	movs	r1, #175	@ 0xaf
 8019c06:	4a2d      	ldr	r2, [pc, #180]	@ (8019cbc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8019c08:	e7f2      	b.n	8019bf0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8019c0a:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8019cd0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8019c0e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019c12:	f8d9 3000 	ldr.w	r3, [r9]
 8019c16:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019c1a:	682b      	ldr	r3, [r5, #0]
 8019c1c:	4628      	mov	r0, r5
 8019c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c20:	4798      	blx	r3
 8019c22:	4606      	mov	r6, r0
 8019c24:	b207      	sxth	r7, r0
 8019c26:	a803      	add	r0, sp, #12
 8019c28:	f003 fd2a 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 8019c2c:	682b      	ldr	r3, [r5, #0]
 8019c2e:	4628      	mov	r0, r5
 8019c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c32:	4798      	blx	r3
 8019c34:	682b      	ldr	r3, [r5, #0]
 8019c36:	4683      	mov	fp, r0
 8019c38:	4628      	mov	r0, r5
 8019c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019c3c:	4798      	blx	r3
 8019c3e:	465b      	mov	r3, fp
 8019c40:	9000      	str	r0, [sp, #0]
 8019c42:	a803      	add	r0, sp, #12
 8019c44:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8019c46:	9a02      	ldr	r2, [sp, #8]
 8019c48:	f003 fd6d 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019c4c:	f8da 3000 	ldr.w	r3, [sl]
 8019c50:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8019c54:	2b00      	cmp	r3, #0
 8019c56:	d0c8      	beq.n	8019bea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8019c58:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8019c5a:	f8b8 0000 	ldrh.w	r0, [r8]
 8019c5e:	4290      	cmp	r0, r2
 8019c60:	d9cf      	bls.n	8019c02 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 8019c62:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8019c66:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8019c6a:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8019c6e:	786a      	ldrb	r2, [r5, #1]
 8019c70:	8925      	ldrh	r5, [r4, #8]
 8019c72:	f8d9 3000 	ldr.w	r3, [r9]
 8019c76:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8019c7a:	eba5 050c 	sub.w	r5, r5, ip
 8019c7e:	b22d      	sxth	r5, r5
 8019c80:	9500      	str	r5, [sp, #0]
 8019c82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8019c86:	a803      	add	r0, sp, #12
 8019c88:	f001 fb5b 	bl	801b342 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8019c8c:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8019c90:	b203      	sxth	r3, r0
 8019c92:	18b9      	adds	r1, r7, r2
 8019c94:	2900      	cmp	r1, #0
 8019c96:	dd0b      	ble.n	8019cb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 8019c98:	3b01      	subs	r3, #1
 8019c9a:	fb13 f302 	smulbb	r3, r3, r2
 8019c9e:	fb16 3300 	smlabb	r3, r6, r0, r3
 8019ca2:	b21f      	sxth	r7, r3
 8019ca4:	4638      	mov	r0, r7
 8019ca6:	b01c      	add	sp, #112	@ 0x70
 8019ca8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cac:	b003      	add	sp, #12
 8019cae:	4770      	bx	lr
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	dcf7      	bgt.n	8019ca4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019cb4:	2700      	movs	r7, #0
 8019cb6:	e7f5      	b.n	8019ca4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 8019cb8:	0802ed04 	.word	0x0802ed04
 8019cbc:	0802ee3c 	.word	0x0802ee3c
 8019cc0:	0802ed46 	.word	0x0802ed46
 8019cc4:	0802ed6f 	.word	0x0802ed6f
 8019cc8:	2400b91c 	.word	0x2400b91c
 8019ccc:	2400b920 	.word	0x2400b920
 8019cd0:	2400b924 	.word	0x2400b924

08019cd4 <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8019cd4:	b570      	push	{r4, r5, r6, lr}
 8019cd6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019cda:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8019cdc:	4604      	mov	r4, r0
 8019cde:	4299      	cmp	r1, r3
 8019ce0:	d01e      	beq.n	8019d20 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8019ce2:	6803      	ldr	r3, [r0, #0]
 8019ce4:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 8019ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8019d24 <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	b92b      	cbnz	r3, 8019cf8 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8019cec:	4b0e      	ldr	r3, [pc, #56]	@ (8019d28 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8019cee:	21ae      	movs	r1, #174	@ 0xae
 8019cf0:	4a0e      	ldr	r2, [pc, #56]	@ (8019d2c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019cf2:	480f      	ldr	r0, [pc, #60]	@ (8019d30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8019cf4:	f011 f938 	bl	802af68 <__assert_func>
 8019cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8019d34 <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8019cfa:	881b      	ldrh	r3, [r3, #0]
 8019cfc:	428b      	cmp	r3, r1
 8019cfe:	d803      	bhi.n	8019d08 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8019d00:	4b0d      	ldr	r3, [pc, #52]	@ (8019d38 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8019d02:	21af      	movs	r1, #175	@ 0xaf
 8019d04:	4a09      	ldr	r2, [pc, #36]	@ (8019d2c <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8019d06:	e7f4      	b.n	8019cf2 <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8019d08:	4b0c      	ldr	r3, [pc, #48]	@ (8019d3c <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8019d0a:	6818      	ldr	r0, [r3, #0]
 8019d0c:	f7f0 f9e4 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 8019d10:	2300      	movs	r3, #0
 8019d12:	4601      	mov	r1, r0
 8019d14:	46ac      	mov	ip, r5
 8019d16:	4620      	mov	r0, r4
 8019d18:	461a      	mov	r2, r3
 8019d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d1e:	4760      	bx	ip
 8019d20:	2000      	movs	r0, #0
 8019d22:	bd70      	pop	{r4, r5, r6, pc}
 8019d24:	2400b91c 	.word	0x2400b91c
 8019d28:	0802ed04 	.word	0x0802ed04
 8019d2c:	0802ee3c 	.word	0x0802ee3c
 8019d30:	0802ed46 	.word	0x0802ed46
 8019d34:	2400b920 	.word	0x2400b920
 8019d38:	0802ed6f 	.word	0x0802ed6f
 8019d3c:	2400b928 	.word	0x2400b928

08019d40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8019d40:	b538      	push	{r3, r4, r5, lr}
 8019d42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019d46:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8019d48:	4604      	mov	r4, r0
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	d014      	beq.n	8019d78 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8019d4e:	6803      	ldr	r3, [r0, #0]
 8019d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019d52:	4798      	blx	r3
 8019d54:	6823      	ldr	r3, [r4, #0]
 8019d56:	4605      	mov	r5, r0
 8019d58:	4620      	mov	r0, r4
 8019d5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019d5c:	4798      	blx	r3
 8019d5e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8019d62:	b22d      	sxth	r5, r5
 8019d64:	4601      	mov	r1, r0
 8019d66:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8019d6a:	bf06      	itte	eq
 8019d6c:	4602      	moveq	r2, r0
 8019d6e:	4629      	moveq	r1, r5
 8019d70:	462a      	movne	r2, r5
 8019d72:	4620      	mov	r0, r4
 8019d74:	f7ea f9fe 	bl	8004174 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8019d78:	bd38      	pop	{r3, r4, r5, pc}

08019d7a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8019d7a:	888a      	ldrh	r2, [r1, #4]
 8019d7c:	8582      	strh	r2, [r0, #44]	@ 0x2c
 8019d7e:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8019d82:	b922      	cbnz	r2, 8019d8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019d84:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8019d88:	b90b      	cbnz	r3, 8019d8e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8019d8a:	f7ff bfd9 	b.w	8019d40 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8019d8e:	4770      	bx	lr

08019d90 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019d90:	2300      	movs	r3, #0
 8019d92:	8083      	strh	r3, [r0, #4]
 8019d94:	80c3      	strh	r3, [r0, #6]
 8019d96:	8003      	strh	r3, [r0, #0]
 8019d98:	8043      	strh	r3, [r0, #2]
 8019d9a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8019d9e:	2bff      	cmp	r3, #255	@ 0xff
 8019da0:	bf01      	itttt	eq
 8019da2:	890b      	ldrheq	r3, [r1, #8]
 8019da4:	8083      	strheq	r3, [r0, #4]
 8019da6:	894b      	ldrheq	r3, [r1, #10]
 8019da8:	80c3      	strheq	r3, [r0, #6]
 8019daa:	4770      	bx	lr

08019dac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019dae:	4604      	mov	r4, r0
 8019db0:	466b      	mov	r3, sp
 8019db2:	6808      	ldr	r0, [r1, #0]
 8019db4:	6849      	ldr	r1, [r1, #4]
 8019db6:	c303      	stmia	r3!, {r0, r1}
 8019db8:	6823      	ldr	r3, [r4, #0]
 8019dba:	4669      	mov	r1, sp
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dc0:	4798      	blx	r3
 8019dc2:	4b08      	ldr	r3, [pc, #32]	@ (8019de4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019dca:	b10a      	cbz	r2, 8019dd0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8019dcc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019dce:	b900      	cbnz	r0, 8019dd2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8019dd0:	6898      	ldr	r0, [r3, #8]
 8019dd2:	6803      	ldr	r3, [r0, #0]
 8019dd4:	4669      	mov	r1, sp
 8019dd6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8019dd8:	699d      	ldr	r5, [r3, #24]
 8019dda:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8019dde:	47a8      	blx	r5
 8019de0:	b003      	add	sp, #12
 8019de2:	bd30      	pop	{r4, r5, pc}
 8019de4:	2400b8cc 	.word	0x2400b8cc

08019de8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8019de8:	b570      	push	{r4, r5, r6, lr}
 8019dea:	880b      	ldrh	r3, [r1, #0]
 8019dec:	4605      	mov	r5, r0
 8019dee:	4604      	mov	r4, r0
 8019df0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8019df2:	8813      	ldrh	r3, [r2, #0]
 8019df4:	f825 3f30 	strh.w	r3, [r5, #48]!
 8019df8:	4628      	mov	r0, r5
 8019dfa:	f005 f843 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019dfe:	4606      	mov	r6, r0
 8019e00:	4628      	mov	r0, r5
 8019e02:	f005 f879 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e06:	6823      	ldr	r3, [r4, #0]
 8019e08:	4605      	mov	r5, r0
 8019e0a:	b231      	sxth	r1, r6
 8019e0c:	4620      	mov	r0, r4
 8019e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e10:	4798      	blx	r3
 8019e12:	6823      	ldr	r3, [r4, #0]
 8019e14:	b229      	sxth	r1, r5
 8019e16:	4620      	mov	r0, r4
 8019e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e1e:	4718      	bx	r3

08019e20 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8019e20:	b510      	push	{r4, lr}
 8019e22:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8019e26:	4604      	mov	r4, r0
 8019e28:	2bff      	cmp	r3, #255	@ 0xff
 8019e2a:	d006      	beq.n	8019e3a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	8003      	strh	r3, [r0, #0]
 8019e30:	8043      	strh	r3, [r0, #2]
 8019e32:	8083      	strh	r3, [r0, #4]
 8019e34:	80c3      	strh	r3, [r0, #6]
 8019e36:	4620      	mov	r0, r4
 8019e38:	bd10      	pop	{r4, pc}
 8019e3a:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8019e3e:	b11b      	cbz	r3, 8019e48 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8019e40:	3130      	adds	r1, #48	@ 0x30
 8019e42:	f005 f893 	bl	801ef6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019e46:	e7f6      	b.n	8019e36 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019e48:	312e      	adds	r1, #46	@ 0x2e
 8019e4a:	e7fa      	b.n	8019e42 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019e4c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e50:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8019e54:	b08a      	sub	sp, #40	@ 0x28
 8019e56:	4604      	mov	r4, r0
 8019e58:	4688      	mov	r8, r1
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d044      	beq.n	8019ee8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8019e5e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8019e60:	a805      	add	r0, sp, #20
 8019e62:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e66:	f005 f80d 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e6a:	4605      	mov	r5, r0
 8019e6c:	b206      	sxth	r6, r0
 8019e6e:	a805      	add	r0, sp, #20
 8019e70:	f005 f842 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e74:	f9b8 2000 	ldrsh.w	r2, [r8]
 8019e78:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	fa0f fc80 	sxth.w	ip, r0
 8019e82:	4417      	add	r7, r2
 8019e84:	9306      	str	r3, [sp, #24]
 8019e86:	b2bf      	uxth	r7, r7
 8019e88:	fa0f fe87 	sxth.w	lr, r7
 8019e8c:	459e      	cmp	lr, r3
 8019e8e:	dd2d      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e90:	4296      	cmp	r6, r2
 8019e92:	dd2b      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019e94:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8019e98:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8019e9c:	4419      	add	r1, r3
 8019e9e:	b289      	uxth	r1, r1
 8019ea0:	fa0f f881 	sxth.w	r8, r1
 8019ea4:	f1b8 0f00 	cmp.w	r8, #0
 8019ea8:	dd20      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019eaa:	459c      	cmp	ip, r3
 8019eac:	dd1e      	ble.n	8019eec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8019eae:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8019eb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019eb6:	4576      	cmp	r6, lr
 8019eb8:	bfa8      	it	ge
 8019eba:	463d      	movge	r5, r7
 8019ebc:	45c4      	cmp	ip, r8
 8019ebe:	bfa8      	it	ge
 8019ec0:	4608      	movge	r0, r1
 8019ec2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019ec6:	1aad      	subs	r5, r5, r2
 8019ec8:	1ac0      	subs	r0, r0, r3
 8019eca:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ece:	f8ad 501c 	strh.w	r5, [sp, #28]
 8019ed2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8019f54 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	b953      	cbnz	r3, 8019ef2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8019edc:	4b1e      	ldr	r3, [pc, #120]	@ (8019f58 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8019ede:	2187      	movs	r1, #135	@ 0x87
 8019ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8019f5c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8019ee2:	481f      	ldr	r0, [pc, #124]	@ (8019f60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8019ee4:	f011 f840 	bl	802af68 <__assert_func>
 8019ee8:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8019eea:	e7b9      	b.n	8019e60 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8019eec:	2300      	movs	r3, #0
 8019eee:	9307      	str	r3, [sp, #28]
 8019ef0:	e7f1      	b.n	8019ed6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8019ef2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8019ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019efa:	429a      	cmp	r2, r3
 8019efc:	d026      	beq.n	8019f4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019efe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	dd22      	ble.n	8019f4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019f06:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	dd1e      	ble.n	8019f4c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8019f0e:	2300      	movs	r3, #0
 8019f10:	a908      	add	r1, sp, #32
 8019f12:	4620      	mov	r0, r4
 8019f14:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8019f18:	6823      	ldr	r3, [r4, #0]
 8019f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019f1c:	4798      	blx	r3
 8019f1e:	4b11      	ldr	r3, [pc, #68]	@ (8019f64 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 8019f26:	b10a      	cbz	r2, 8019f2c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8019f28:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8019f2a:	b900      	cbnz	r0, 8019f2e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8019f2c:	6898      	ldr	r0, [r3, #8]
 8019f2e:	2501      	movs	r5, #1
 8019f30:	6801      	ldr	r1, [r0, #0]
 8019f32:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8019f36:	9502      	str	r5, [sp, #8]
 8019f38:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8019f3c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019f40:	9401      	str	r4, [sp, #4]
 8019f42:	ac06      	add	r4, sp, #24
 8019f44:	9400      	str	r4, [sp, #0]
 8019f46:	688c      	ldr	r4, [r1, #8]
 8019f48:	a905      	add	r1, sp, #20
 8019f4a:	47a0      	blx	r4
 8019f4c:	b00a      	add	sp, #40	@ 0x28
 8019f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f52:	bf00      	nop
 8019f54:	2400b954 	.word	0x2400b954
 8019f58:	0802eed0 	.word	0x0802eed0
 8019f5c:	0802efa4 	.word	0x0802efa4
 8019f60:	0802ef0c 	.word	0x0802ef0c
 8019f64:	2400b8cc 	.word	0x2400b8cc

08019f68 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8019f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f6e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8019f70:	4606      	mov	r6, r0
 8019f72:	4299      	cmp	r1, r3
 8019f74:	d02a      	beq.n	8019fcc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8019f76:	4b16      	ldr	r3, [pc, #88]	@ (8019fd0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	b92b      	cbnz	r3, 8019f88 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8019f7c:	4b15      	ldr	r3, [pc, #84]	@ (8019fd4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8019f7e:	21ae      	movs	r1, #174	@ 0xae
 8019f80:	4a15      	ldr	r2, [pc, #84]	@ (8019fd8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019f82:	4816      	ldr	r0, [pc, #88]	@ (8019fdc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8019f84:	f010 fff0 	bl	802af68 <__assert_func>
 8019f88:	4a15      	ldr	r2, [pc, #84]	@ (8019fe0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8019f8a:	8812      	ldrh	r2, [r2, #0]
 8019f8c:	428a      	cmp	r2, r1
 8019f8e:	d803      	bhi.n	8019f98 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8019f90:	4b14      	ldr	r3, [pc, #80]	@ (8019fe4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8019f92:	21af      	movs	r1, #175	@ 0xaf
 8019f94:	4a10      	ldr	r2, [pc, #64]	@ (8019fd8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8019f96:	e7f4      	b.n	8019f82 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8019f98:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8019f9c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8019fa0:	4b11      	ldr	r3, [pc, #68]	@ (8019fe8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8019fa2:	7854      	ldrb	r4, [r2, #1]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8019faa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8019fae:	682b      	ldr	r3, [r5, #0]
 8019fb0:	69df      	ldr	r7, [r3, #28]
 8019fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8019fec <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8019fb4:	6818      	ldr	r0, [r3, #0]
 8019fb6:	f7f0 f88f 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 8019fba:	2300      	movs	r3, #0
 8019fbc:	4602      	mov	r2, r0
 8019fbe:	4621      	mov	r1, r4
 8019fc0:	9300      	str	r3, [sp, #0]
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8019fc6:	47b8      	blx	r7
 8019fc8:	b003      	add	sp, #12
 8019fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fcc:	2000      	movs	r0, #0
 8019fce:	e7fb      	b.n	8019fc8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8019fd0:	2400b91c 	.word	0x2400b91c
 8019fd4:	0802ed04 	.word	0x0802ed04
 8019fd8:	0802f050 	.word	0x0802f050
 8019fdc:	0802ed46 	.word	0x0802ed46
 8019fe0:	2400b920 	.word	0x2400b920
 8019fe4:	0802ed6f 	.word	0x0802ed6f
 8019fe8:	2400b924 	.word	0x2400b924
 8019fec:	2400b928 	.word	0x2400b928

08019ff0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8019ff0:	b570      	push	{r4, r5, r6, lr}
 8019ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ff6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8019ff8:	4604      	mov	r4, r0
 8019ffa:	4299      	cmp	r1, r3
 8019ffc:	d01e      	beq.n	801a03c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8019ffe:	6803      	ldr	r3, [r0, #0]
 801a000:	6edd      	ldr	r5, [r3, #108]	@ 0x6c
 801a002:	4b0f      	ldr	r3, [pc, #60]	@ (801a040 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	b92b      	cbnz	r3, 801a014 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 801a008:	4b0e      	ldr	r3, [pc, #56]	@ (801a044 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 801a00a:	21ae      	movs	r1, #174	@ 0xae
 801a00c:	4a0e      	ldr	r2, [pc, #56]	@ (801a048 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a00e:	480f      	ldr	r0, [pc, #60]	@ (801a04c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 801a010:	f010 ffaa 	bl	802af68 <__assert_func>
 801a014:	4b0e      	ldr	r3, [pc, #56]	@ (801a050 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 801a016:	881b      	ldrh	r3, [r3, #0]
 801a018:	428b      	cmp	r3, r1
 801a01a:	d803      	bhi.n	801a024 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 801a01c:	4b0d      	ldr	r3, [pc, #52]	@ (801a054 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 801a01e:	21af      	movs	r1, #175	@ 0xaf
 801a020:	4a09      	ldr	r2, [pc, #36]	@ (801a048 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 801a022:	e7f4      	b.n	801a00e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 801a024:	4b0c      	ldr	r3, [pc, #48]	@ (801a058 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 801a026:	6818      	ldr	r0, [r3, #0]
 801a028:	f7f0 f856 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 801a02c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801a02e:	4601      	mov	r1, r0
 801a030:	46ac      	mov	ip, r5
 801a032:	4620      	mov	r0, r4
 801a034:	2300      	movs	r3, #0
 801a036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a03a:	4760      	bx	ip
 801a03c:	2000      	movs	r0, #0
 801a03e:	bd70      	pop	{r4, r5, r6, pc}
 801a040:	2400b91c 	.word	0x2400b91c
 801a044:	0802ed04 	.word	0x0802ed04
 801a048:	0802f050 	.word	0x0802f050
 801a04c:	0802ed46 	.word	0x0802ed46
 801a050:	2400b920 	.word	0x2400b920
 801a054:	0802ed6f 	.word	0x0802ed6f
 801a058:	2400b928 	.word	0x2400b928

0801a05c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 801a05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a064:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 801a066:	b08c      	sub	sp, #48	@ 0x30
 801a068:	4604      	mov	r4, r0
 801a06a:	4293      	cmp	r3, r2
 801a06c:	460e      	mov	r6, r1
 801a06e:	d05d      	beq.n	801a12c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a070:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 801a150 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 801a074:	f8d8 2000 	ldr.w	r2, [r8]
 801a078:	b92a      	cbnz	r2, 801a086 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 801a07a:	4b2e      	ldr	r3, [pc, #184]	@ (801a134 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 801a07c:	21ae      	movs	r1, #174	@ 0xae
 801a07e:	4a2e      	ldr	r2, [pc, #184]	@ (801a138 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a080:	482e      	ldr	r0, [pc, #184]	@ (801a13c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 801a082:	f010 ff71 	bl	802af68 <__assert_func>
 801a086:	4f2e      	ldr	r7, [pc, #184]	@ (801a140 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 801a088:	8839      	ldrh	r1, [r7, #0]
 801a08a:	4299      	cmp	r1, r3
 801a08c:	d803      	bhi.n	801a096 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 801a08e:	4b2d      	ldr	r3, [pc, #180]	@ (801a144 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 801a090:	21af      	movs	r1, #175	@ 0xaf
 801a092:	4a29      	ldr	r2, [pc, #164]	@ (801a138 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 801a094:	e7f4      	b.n	801a080 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 801a096:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801a09a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801a09e:	4b2a      	ldr	r3, [pc, #168]	@ (801a148 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a0a6:	2a00      	cmp	r2, #0
 801a0a8:	d040      	beq.n	801a12c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 801a0aa:	784b      	ldrb	r3, [r1, #1]
 801a0ac:	f890 5037 	ldrb.w	r5, [r0, #55]	@ 0x37
 801a0b0:	f890 1039 	ldrb.w	r1, [r0, #57]	@ 0x39
 801a0b4:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 801a0b8:	f890 c036 	ldrb.w	ip, [r0, #54]	@ 0x36
 801a0bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801a0c0:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	@ 0x34
 801a0c4:	f890 9038 	ldrb.w	r9, [r0, #56]	@ 0x38
 801a0c8:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 801a0cc:	ad05      	add	r5, sp, #20
 801a0ce:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801a0d0:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 801a0d4:	9207      	str	r2, [sp, #28]
 801a0d6:	f88d 9022 	strb.w	r9, [sp, #34]	@ 0x22
 801a0da:	f8ad e028 	strh.w	lr, [sp, #40]	@ 0x28
 801a0de:	f88d c02a 	strb.w	ip, [sp, #42]	@ 0x2a
 801a0e2:	f88d 102c 	strb.w	r1, [sp, #44]	@ 0x2c
 801a0e6:	f88d a020 	strb.w	sl, [sp, #32]
 801a0ea:	9009      	str	r0, [sp, #36]	@ 0x24
 801a0ec:	f7ea f8dc 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 801a0f0:	4621      	mov	r1, r4
 801a0f2:	4681      	mov	r9, r0
 801a0f4:	4628      	mov	r0, r5
 801a0f6:	f002 fe2b 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0fa:	f8d8 3000 	ldr.w	r3, [r8]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d0bb      	beq.n	801a07a <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 801a102:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801a104:	883b      	ldrh	r3, [r7, #0]
 801a106:	428b      	cmp	r3, r1
 801a108:	d9c1      	bls.n	801a08e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 801a10a:	4b10      	ldr	r3, [pc, #64]	@ (801a14c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 801a10c:	6818      	ldr	r0, [r3, #0]
 801a10e:	f7ef ffe3 	bl	800a0d8 <_ZNK8touchgfx5Texts7getTextEt>
 801a112:	2300      	movs	r3, #0
 801a114:	9303      	str	r3, [sp, #12]
 801a116:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801a118:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801a11c:	ab07      	add	r3, sp, #28
 801a11e:	4648      	mov	r0, r9
 801a120:	9300      	str	r3, [sp, #0]
 801a122:	4633      	mov	r3, r6
 801a124:	e895 0006 	ldmia.w	r5, {r1, r2}
 801a128:	f7ef ff67 	bl	8009ffa <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801a12c:	b00c      	add	sp, #48	@ 0x30
 801a12e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a132:	bf00      	nop
 801a134:	0802ed04 	.word	0x0802ed04
 801a138:	0802f050 	.word	0x0802f050
 801a13c:	0802ed46 	.word	0x0802ed46
 801a140:	2400b920 	.word	0x2400b920
 801a144:	0802ed6f 	.word	0x0802ed6f
 801a148:	2400b924 	.word	0x2400b924
 801a14c:	2400b928 	.word	0x2400b928
 801a150:	2400b91c 	.word	0x2400b91c

0801a154 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 801a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a158:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801a15a:	4604      	mov	r4, r0
 801a15c:	460e      	mov	r6, r1
 801a15e:	b08e      	sub	sp, #56	@ 0x38
 801a160:	b218      	sxth	r0, r3
 801a162:	8921      	ldrh	r1, [r4, #8]
 801a164:	005b      	lsls	r3, r3, #1
 801a166:	8962      	ldrh	r2, [r4, #10]
 801a168:	f8ad 0000 	strh.w	r0, [sp]
 801a16c:	b29b      	uxth	r3, r3
 801a16e:	f8ad 0002 	strh.w	r0, [sp, #2]
 801a172:	1ac9      	subs	r1, r1, r3
 801a174:	1ad3      	subs	r3, r2, r3
 801a176:	b209      	sxth	r1, r1
 801a178:	b21b      	sxth	r3, r3
 801a17a:	2900      	cmp	r1, #0
 801a17c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a180:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a184:	dd5e      	ble.n	801a244 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a186:	2b00      	cmp	r3, #0
 801a188:	dd5c      	ble.n	801a244 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801a18a:	6830      	ldr	r0, [r6, #0]
 801a18c:	ab02      	add	r3, sp, #8
 801a18e:	6871      	ldr	r1, [r6, #4]
 801a190:	c303      	stmia	r3!, {r0, r1}
 801a192:	4669      	mov	r1, sp
 801a194:	a802      	add	r0, sp, #8
 801a196:	f7fe f807 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801a19a:	4620      	mov	r0, r4
 801a19c:	a902      	add	r1, sp, #8
 801a19e:	f7ff fe05 	bl	8019dac <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801a1a2:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801a1a4:	2800      	cmp	r0, #0
 801a1a6:	d05f      	beq.n	801a268 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a1a8:	8963      	ldrh	r3, [r4, #10]
 801a1aa:	b202      	sxth	r2, r0
 801a1ac:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801a1b0:	2500      	movs	r5, #0
 801a1b2:	1a1f      	subs	r7, r3, r0
 801a1b4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 801a1b8:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a1bc:	b21b      	sxth	r3, r3
 801a1be:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801a1c2:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801a1c6:	af04      	add	r7, sp, #16
 801a1c8:	1a09      	subs	r1, r1, r0
 801a1ca:	9506      	str	r5, [sp, #24]
 801a1cc:	f8ad 201e 	strh.w	r2, [sp, #30]
 801a1d0:	f8ad 5020 	strh.w	r5, [sp, #32]
 801a1d4:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801a1d8:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 801a1dc:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801a1e0:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801a1e4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801a1e8:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801a1ec:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a1f0:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a1f4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a1f8:	ab06      	add	r3, sp, #24
 801a1fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a1fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a202:	e887 0003 	stmia.w	r7, {r0, r1}
 801a206:	4631      	mov	r1, r6
 801a208:	4638      	mov	r0, r7
 801a20a:	f7fd ffcd 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801a20e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a212:	2b00      	cmp	r3, #0
 801a214:	dd12      	ble.n	801a23c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a216:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	dd0e      	ble.n	801a23c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801a21e:	6823      	ldr	r3, [r4, #0]
 801a220:	4639      	mov	r1, r7
 801a222:	4620      	mov	r0, r4
 801a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a226:	4798      	blx	r3
 801a228:	f7ea f83e 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 801a22c:	6803      	ldr	r3, [r0, #0]
 801a22e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a230:	4639      	mov	r1, r7
 801a232:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801a236:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801a23a:	47c0      	blx	r8
 801a23c:	3501      	adds	r5, #1
 801a23e:	2d04      	cmp	r5, #4
 801a240:	d1da      	bne.n	801a1f8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 801a242:	e011      	b.n	801a268 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 801a244:	6830      	ldr	r0, [r6, #0]
 801a246:	ab06      	add	r3, sp, #24
 801a248:	6871      	ldr	r1, [r6, #4]
 801a24a:	c303      	stmia	r3!, {r0, r1}
 801a24c:	6823      	ldr	r3, [r4, #0]
 801a24e:	a906      	add	r1, sp, #24
 801a250:	4620      	mov	r0, r4
 801a252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a254:	4798      	blx	r3
 801a256:	f7ea f827 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 801a25a:	6803      	ldr	r3, [r0, #0]
 801a25c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a25e:	a906      	add	r1, sp, #24
 801a260:	699d      	ldr	r5, [r3, #24]
 801a262:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801a266:	47a8      	blx	r5
 801a268:	b00e      	add	sp, #56	@ 0x38
 801a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a26e <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801a26e:	b570      	push	{r4, r5, r6, lr}
 801a270:	880b      	ldrh	r3, [r1, #0]
 801a272:	460d      	mov	r5, r1
 801a274:	4604      	mov	r4, r0
 801a276:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801a278:	4608      	mov	r0, r1
 801a27a:	f004 fe03 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a27e:	4606      	mov	r6, r0
 801a280:	4628      	mov	r0, r5
 801a282:	f004 fe39 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a286:	6823      	ldr	r3, [r4, #0]
 801a288:	4605      	mov	r5, r0
 801a28a:	b231      	sxth	r1, r6
 801a28c:	4620      	mov	r0, r4
 801a28e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a290:	4798      	blx	r3
 801a292:	6823      	ldr	r3, [r4, #0]
 801a294:	b229      	sxth	r1, r5
 801a296:	4620      	mov	r0, r4
 801a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a29a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a29e:	4718      	bx	r3

0801a2a0 <_ZNK8touchgfx5Image12getSolidRectEv>:
 801a2a0:	b510      	push	{r4, lr}
 801a2a2:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801a2a6:	4604      	mov	r4, r0
 801a2a8:	2bff      	cmp	r3, #255	@ 0xff
 801a2aa:	d006      	beq.n	801a2ba <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	8003      	strh	r3, [r0, #0]
 801a2b0:	8043      	strh	r3, [r0, #2]
 801a2b2:	8083      	strh	r3, [r0, #4]
 801a2b4:	80c3      	strh	r3, [r0, #6]
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	bd10      	pop	{r4, pc}
 801a2ba:	3126      	adds	r1, #38	@ 0x26
 801a2bc:	f004 fe56 	bl	801ef6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a2c0:	e7f9      	b.n	801a2b6 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0801a2c4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801a2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c8:	4604      	mov	r4, r0
 801a2ca:	b088      	sub	sp, #32
 801a2cc:	2500      	movs	r5, #0
 801a2ce:	460f      	mov	r7, r1
 801a2d0:	f854 3b26 	ldr.w	r3, [r4], #38
 801a2d4:	a904      	add	r1, sp, #16
 801a2d6:	4606      	mov	r6, r0
 801a2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a2da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a2de:	4798      	blx	r3
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	f004 fdcf 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a2e6:	4680      	mov	r8, r0
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f004 fe05 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a2ee:	9506      	str	r5, [sp, #24]
 801a2f0:	ad06      	add	r5, sp, #24
 801a2f2:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a2f6:	4639      	mov	r1, r7
 801a2f8:	f8ad 801c 	strh.w	r8, [sp, #28]
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	f7fd ff53 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801a302:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a306:	2b00      	cmp	r3, #0
 801a308:	dd19      	ble.n	801a33e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a30a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	dd15      	ble.n	801a33e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801a312:	4b0c      	ldr	r3, [pc, #48]	@ (801a344 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	f893 2076 	ldrb.w	r2, [r3, #118]	@ 0x76
 801a31a:	b10a      	cbz	r2, 801a320 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 801a31c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801a31e:	b900      	cbnz	r0, 801a322 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 801a320:	6898      	ldr	r0, [r3, #8]
 801a322:	2701      	movs	r7, #1
 801a324:	6801      	ldr	r1, [r0, #0]
 801a326:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a32a:	9702      	str	r7, [sp, #8]
 801a32c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 801a330:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801a334:	e9cd 5600 	strd	r5, r6, [sp]
 801a338:	688d      	ldr	r5, [r1, #8]
 801a33a:	4621      	mov	r1, r4
 801a33c:	47a8      	blx	r5
 801a33e:	b008      	add	sp, #32
 801a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a344:	2400b8cc 	.word	0x2400b8cc

0801a348 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801a348:	b510      	push	{r4, lr}
 801a34a:	6803      	ldr	r3, [r0, #0]
 801a34c:	460c      	mov	r4, r1
 801a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a350:	4798      	blx	r3
 801a352:	1b03      	subs	r3, r0, r4
 801a354:	4258      	negs	r0, r3
 801a356:	4158      	adcs	r0, r3
 801a358:	bd10      	pop	{r4, pc}
	...

0801a35c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801a35c:	4b01      	ldr	r3, [pc, #4]	@ (801a364 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801a35e:	6019      	str	r1, [r3, #0]
 801a360:	4770      	bx	lr
 801a362:	bf00      	nop
 801a364:	2400b8d4 	.word	0x2400b8d4

0801a368 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a36c:	4696      	mov	lr, r2
 801a36e:	b097      	sub	sp, #92	@ 0x5c
 801a370:	4605      	mov	r5, r0
 801a372:	4614      	mov	r4, r2
 801a374:	460e      	mov	r6, r1
 801a376:	461f      	mov	r7, r3
 801a378:	f10d 0c1c 	add.w	ip, sp, #28
 801a37c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801a380:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801a384:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801a388:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a38c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a390:	f8de 3000 	ldr.w	r3, [lr]
 801a394:	f104 0e14 	add.w	lr, r4, #20
 801a398:	f8cc 3000 	str.w	r3, [ip]
 801a39c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a3a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3a8:	f8de 3000 	ldr.w	r3, [lr]
 801a3ac:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801a3b0:	f8cc 3000 	str.w	r3, [ip]
 801a3b4:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801a3b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3c0:	f8de 3000 	ldr.w	r3, [lr]
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a3c8:	4628      	mov	r0, r5
 801a3ca:	f8cc 3000 	str.w	r3, [ip]
 801a3ce:	682b      	ldr	r3, [r5, #0]
 801a3d0:	9201      	str	r2, [sp, #4]
 801a3d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a3d4:	f8cd 8008 	str.w	r8, [sp, #8]
 801a3d8:	9200      	str	r2, [sp, #0]
 801a3da:	aa07      	add	r2, sp, #28
 801a3dc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a3e0:	f8d3 b034 	ldr.w	fp, [r3, #52]	@ 0x34
 801a3e4:	463b      	mov	r3, r7
 801a3e6:	47d8      	blx	fp
 801a3e8:	46a6      	mov	lr, r4
 801a3ea:	f10d 0c1c 	add.w	ip, sp, #28
 801a3ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a3f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a3f6:	f8de 3000 	ldr.w	r3, [lr]
 801a3fa:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801a3fe:	343c      	adds	r4, #60	@ 0x3c
 801a400:	f8cc 3000 	str.w	r3, [ip]
 801a404:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801a408:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a40c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a410:	f8de 3000 	ldr.w	r3, [lr]
 801a414:	f8cc 3000 	str.w	r3, [ip]
 801a418:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801a41c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a41e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	4631      	mov	r1, r6
 801a426:	4628      	mov	r0, r5
 801a428:	f8cc 3000 	str.w	r3, [ip]
 801a42c:	682b      	ldr	r3, [r5, #0]
 801a42e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801a432:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a434:	f8cd 8008 	str.w	r8, [sp, #8]
 801a438:	9201      	str	r2, [sp, #4]
 801a43a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a43c:	9200      	str	r2, [sp, #0]
 801a43e:	aa07      	add	r2, sp, #28
 801a440:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801a442:	463b      	mov	r3, r7
 801a444:	47a0      	blx	r4
 801a446:	b017      	add	sp, #92	@ 0x5c
 801a448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a44c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a44c:	2000      	movs	r0, #0
 801a44e:	4770      	bx	lr

0801a450 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a454:	b08d      	sub	sp, #52	@ 0x34
 801a456:	4688      	mov	r8, r1
 801a458:	f8d3 c000 	ldr.w	ip, [r3]
 801a45c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801a45e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801a462:	680f      	ldr	r7, [r1, #0]
 801a464:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801a468:	eba7 070c 	sub.w	r7, r7, ip
 801a46c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 801a470:	edd3 6a07 	vldr	s13, [r3, #28]
 801a474:	42bc      	cmp	r4, r7
 801a476:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801a478:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801a47c:	bfa8      	it	ge
 801a47e:	463c      	movge	r4, r7
 801a480:	f9b1 9000 	ldrsh.w	r9, [r1]
 801a484:	f9ba 1000 	ldrsh.w	r1, [sl]
 801a488:	ee07 4a90 	vmov	s15, r4
 801a48c:	eb09 0e0c 	add.w	lr, r9, ip
 801a490:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801a494:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801a498:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801a49c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 801a4a0:	4571      	cmp	r1, lr
 801a4a2:	ee25 4a04 	vmul.f32	s8, s10, s8
 801a4a6:	ee65 4a24 	vmul.f32	s9, s10, s9
 801a4aa:	ee25 5a27 	vmul.f32	s10, s10, s15
 801a4ae:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a4b2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801a4b6:	ee32 1a05 	vadd.f32	s2, s4, s10
 801a4ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a4be:	ee36 0a84 	vadd.f32	s0, s13, s8
 801a4c2:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a4c6:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a4ca:	f340 808c 	ble.w	801a5e6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801a4ce:	eba1 060e 	sub.w	r6, r1, lr
 801a4d2:	fb96 f5f4 	sdiv	r5, r6, r4
 801a4d6:	ee07 5a10 	vmov	s14, r5
 801a4da:	2d00      	cmp	r5, #0
 801a4dc:	fb04 6615 	mls	r6, r4, r5, r6
 801a4e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a4e4:	eea7 0a04 	vfma.f32	s0, s14, s8
 801a4e8:	eee7 0a24 	vfma.f32	s1, s14, s9
 801a4ec:	eea7 1a05 	vfma.f32	s2, s14, s10
 801a4f0:	dd12      	ble.n	801a518 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801a4f2:	ee70 6a44 	vsub.f32	s13, s0, s8
 801a4f6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801a4fa:	ee31 2a45 	vsub.f32	s4, s2, s10
 801a4fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 801a502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a506:	bf14      	ite	ne
 801a508:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801a50c:	eeb0 7a67 	vmoveq.f32	s14, s15
 801a510:	ee61 1a87 	vmul.f32	s3, s3, s14
 801a514:	ee22 2a07 	vmul.f32	s4, s4, s14
 801a518:	fb05 f204 	mul.w	r2, r5, r4
 801a51c:	1abf      	subs	r7, r7, r2
 801a51e:	4494      	add	ip, r2
 801a520:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801a524:	4411      	add	r1, r2
 801a526:	eb09 020c 	add.w	r2, r9, ip
 801a52a:	b209      	sxth	r1, r1
 801a52c:	443a      	add	r2, r7
 801a52e:	428a      	cmp	r2, r1
 801a530:	bfc4      	itt	gt
 801a532:	eba1 0209 	subgt.w	r2, r1, r9
 801a536:	eba2 070c 	subgt.w	r7, r2, ip
 801a53a:	2f00      	cmp	r7, #0
 801a53c:	dd50      	ble.n	801a5e0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801a53e:	fb97 f1f4 	sdiv	r1, r7, r4
 801a542:	fb04 7211 	mls	r2, r4, r1, r7
 801a546:	b90a      	cbnz	r2, 801a54c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801a548:	3901      	subs	r1, #1
 801a54a:	4622      	mov	r2, r4
 801a54c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801a550:	6840      	ldr	r0, [r0, #4]
 801a552:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801a556:	44b6      	add	lr, r6
 801a558:	f8d0 a000 	ldr.w	sl, [r0]
 801a55c:	2900      	cmp	r1, #0
 801a55e:	bfcc      	ite	gt
 801a560:	46a1      	movgt	r9, r4
 801a562:	4691      	movle	r9, r2
 801a564:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a566:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801a568:	fb04 e505 	mla	r5, r4, r5, lr
 801a56c:	eef0 6a42 	vmov.f32	s13, s4
 801a570:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801a574:	9008      	str	r0, [sp, #32]
 801a576:	eeb0 7a61 	vmov.f32	s14, s3
 801a57a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801a57c:	695b      	ldr	r3, [r3, #20]
 801a57e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a582:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801a586:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801a58a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801a58c:	445b      	add	r3, fp
 801a58e:	9307      	str	r3, [sp, #28]
 801a590:	ee16 3a90 	vmov	r3, s13
 801a594:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801a598:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801a59c:	ee21 3a23 	vmul.f32	s6, s2, s7
 801a5a0:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801a5a4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a5a8:	ee17 7a90 	vmov	r7, s15
 801a5ac:	ee73 7a42 	vsub.f32	s15, s6, s4
 801a5b0:	fb97 f7f4 	sdiv	r7, r7, r4
 801a5b4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801a5b8:	ee17 ca90 	vmov	ip, s15
 801a5bc:	fb9c fcf4 	sdiv	ip, ip, r4
 801a5c0:	fb0c 3306 	mla	r3, ip, r6, r3
 801a5c4:	9302      	str	r3, [sp, #8]
 801a5c6:	ee17 3a10 	vmov	r3, s14
 801a5ca:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801a5ce:	fb07 3706 	mla	r7, r7, r6, r3
 801a5d2:	eba9 0306 	sub.w	r3, r9, r6
 801a5d6:	e9cd 4700 	strd	r4, r7, [sp]
 801a5da:	f8da 4008 	ldr.w	r4, [sl, #8]
 801a5de:	47a0      	blx	r4
 801a5e0:	b00d      	add	sp, #52	@ 0x34
 801a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e6:	2500      	movs	r5, #0
 801a5e8:	462e      	mov	r6, r5
 801a5ea:	e799      	b.n	801a520 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801a5ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5f0:	b0db      	sub	sp, #364	@ 0x16c
 801a5f2:	461d      	mov	r5, r3
 801a5f4:	4614      	mov	r4, r2
 801a5f6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801a5fa:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a5fc:	4629      	mov	r1, r5
 801a5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 801a600:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801a604:	9009      	str	r0, [sp, #36]	@ 0x24
 801a606:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a608:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801a60c:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801a610:	9310      	str	r3, [sp, #64]	@ 0x40
 801a612:	6803      	ldr	r3, [r0, #0]
 801a614:	6bdf      	ldr	r7, [r3, #60]	@ 0x3c
 801a616:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801a61a:	47b8      	blx	r7
 801a61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a61e:	6058      	str	r0, [r3, #4]
 801a620:	2800      	cmp	r0, #0
 801a622:	f000 83a1 	beq.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a626:	682b      	ldr	r3, [r5, #0]
 801a628:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801a62c:	ed94 7a02 	vldr	s14, [r4, #8]
 801a630:	9314      	str	r3, [sp, #80]	@ 0x50
 801a632:	686b      	ldr	r3, [r5, #4]
 801a634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a638:	9315      	str	r3, [sp, #84]	@ 0x54
 801a63a:	4bc1      	ldr	r3, [pc, #772]	@ (801a940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801a63c:	7819      	ldrb	r1, [r3, #0]
 801a63e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801a642:	2900      	cmp	r1, #0
 801a644:	bf16      	itet	ne
 801a646:	4619      	movne	r1, r3
 801a648:	4611      	moveq	r1, r2
 801a64a:	4613      	movne	r3, r2
 801a64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a650:	9116      	str	r1, [sp, #88]	@ 0x58
 801a652:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801a656:	f240 8387 	bls.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a65a:	ed94 7a07 	vldr	s14, [r4, #28]
 801a65e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a666:	f240 837f 	bls.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a66a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801a66e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a676:	f240 8377 	bls.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a67a:	6822      	ldr	r2, [r4, #0]
 801a67c:	4bb1      	ldr	r3, [pc, #708]	@ (801a944 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801a67e:	429a      	cmp	r2, r3
 801a680:	f2c0 8372 	blt.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a684:	49b0      	ldr	r1, [pc, #704]	@ (801a948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801a686:	6963      	ldr	r3, [r4, #20]
 801a688:	428a      	cmp	r2, r1
 801a68a:	f300 836d 	bgt.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a68e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a692:	48ae      	ldr	r0, [pc, #696]	@ (801a94c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801a694:	33ff      	adds	r3, #255	@ 0xff
 801a696:	4283      	cmp	r3, r0
 801a698:	f200 8366 	bhi.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a69c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a69e:	4dac      	ldr	r5, [pc, #688]	@ (801a950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801a6a0:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801a6a4:	33ff      	adds	r3, #255	@ 0xff
 801a6a6:	42ab      	cmp	r3, r5
 801a6a8:	f200 835e 	bhi.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6ac:	6862      	ldr	r2, [r4, #4]
 801a6ae:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 801a6b2:	33ff      	adds	r3, #255	@ 0xff
 801a6b4:	4283      	cmp	r3, r0
 801a6b6:	f200 8357 	bhi.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6ba:	69a1      	ldr	r1, [r4, #24]
 801a6bc:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 801a6c0:	33ff      	adds	r3, #255	@ 0xff
 801a6c2:	4283      	cmp	r3, r0
 801a6c4:	f200 8350 	bhi.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6c8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801a6ca:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801a6ce:	30ff      	adds	r0, #255	@ 0xff
 801a6d0:	42a8      	cmp	r0, r5
 801a6d2:	f200 8349 	bhi.w	801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a6d6:	428a      	cmp	r2, r1
 801a6d8:	f280 8110 	bge.w	801a8fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801a6dc:	429a      	cmp	r2, r3
 801a6de:	f300 8119 	bgt.w	801a914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801a6e2:	4299      	cmp	r1, r3
 801a6e4:	f280 811d 	bge.w	801a922 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801a6e8:	2502      	movs	r5, #2
 801a6ea:	2701      	movs	r7, #1
 801a6ec:	46a9      	mov	r9, r5
 801a6ee:	46b8      	mov	r8, r7
 801a6f0:	f04f 0a00 	mov.w	sl, #0
 801a6f4:	4621      	mov	r1, r4
 801a6f6:	a849      	add	r0, sp, #292	@ 0x124
 801a6f8:	f003 fd92 	bl	801e220 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801a6fc:	4622      	mov	r2, r4
 801a6fe:	4653      	mov	r3, sl
 801a700:	a949      	add	r1, sp, #292	@ 0x124
 801a702:	f8cd 9000 	str.w	r9, [sp]
 801a706:	a819      	add	r0, sp, #100	@ 0x64
 801a708:	f003 feba 	bl	801e480 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a70c:	4622      	mov	r2, r4
 801a70e:	4653      	mov	r3, sl
 801a710:	a949      	add	r1, sp, #292	@ 0x124
 801a712:	f8cd 8000 	str.w	r8, [sp]
 801a716:	a829      	add	r0, sp, #164	@ 0xa4
 801a718:	f003 feb2 	bl	801e480 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a71c:	4643      	mov	r3, r8
 801a71e:	4622      	mov	r2, r4
 801a720:	a949      	add	r1, sp, #292	@ 0x124
 801a722:	f8cd 9000 	str.w	r9, [sp]
 801a726:	a839      	add	r0, sp, #228	@ 0xe4
 801a728:	f003 feaa 	bl	801e480 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801a72c:	42af      	cmp	r7, r5
 801a72e:	af12      	add	r7, sp, #72	@ 0x48
 801a730:	bfb7      	itett	lt
 801a732:	2300      	movlt	r3, #0
 801a734:	2301      	movge	r3, #1
 801a736:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801a738:	ac19      	addlt	r4, sp, #100	@ 0x64
 801a73a:	bfb1      	iteee	lt
 801a73c:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a73e:	ad19      	addge	r5, sp, #100	@ 0x64
 801a740:	930e      	strge	r3, [sp, #56]	@ 0x38
 801a742:	ac29      	addge	r4, sp, #164	@ 0xa4
 801a744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a746:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a74a:	e887 0003 	stmia.w	r7, {r0, r1}
 801a74e:	b928      	cbnz	r0, 801a75c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801a750:	4b80      	ldr	r3, [pc, #512]	@ (801a954 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801a752:	6818      	ldr	r0, [r3, #0]
 801a754:	6803      	ldr	r3, [r0, #0]
 801a756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a758:	4798      	blx	r3
 801a75a:	6038      	str	r0, [r7, #0]
 801a75c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a75e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a766:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801a768:	930c      	str	r3, [sp, #48]	@ 0x30
 801a76a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a76c:	6963      	ldr	r3, [r4, #20]
 801a76e:	440b      	add	r3, r1
 801a770:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a774:	4408      	add	r0, r1
 801a776:	b200      	sxth	r0, r0
 801a778:	4283      	cmp	r3, r0
 801a77a:	900d      	str	r0, [sp, #52]	@ 0x34
 801a77c:	f280 80dd 	bge.w	801a93a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801a780:	428b      	cmp	r3, r1
 801a782:	da08      	bge.n	801a796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a784:	2a00      	cmp	r2, #0
 801a786:	dd06      	ble.n	801a796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a788:	1acb      	subs	r3, r1, r3
 801a78a:	429a      	cmp	r2, r3
 801a78c:	f2c0 80e4 	blt.w	801a958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801a790:	2b00      	cmp	r3, #0
 801a792:	f300 80e2 	bgt.w	801a95a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801a796:	6967      	ldr	r7, [r4, #20]
 801a798:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801a79c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a79e:	443b      	add	r3, r7
 801a7a0:	461f      	mov	r7, r3
 801a7a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a7a4:	1bdf      	subs	r7, r3, r7
 801a7a6:	4297      	cmp	r7, r2
 801a7a8:	bfa8      	it	ge
 801a7aa:	4617      	movge	r7, r2
 801a7ac:	2f00      	cmp	r7, #0
 801a7ae:	f340 8166 	ble.w	801aa7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801a7b2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801a7b4:	6829      	ldr	r1, [r5, #0]
 801a7b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7ba:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a7be:	4411      	add	r1, r2
 801a7c0:	6820      	ldr	r0, [r4, #0]
 801a7c2:	4299      	cmp	r1, r3
 801a7c4:	dd1a      	ble.n	801a7fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a7c6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a7ca:	4402      	add	r2, r0
 801a7cc:	440b      	add	r3, r1
 801a7ce:	b21b      	sxth	r3, r3
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	dc13      	bgt.n	801a7fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801a7d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a7d6:	a912      	add	r1, sp, #72	@ 0x48
 801a7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	9206      	str	r2, [sp, #24]
 801a7e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a7e2:	9500      	str	r5, [sp, #0]
 801a7e4:	9205      	str	r2, [sp, #20]
 801a7e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a7e8:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a7ec:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801a7ee:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a7f2:	aa49      	add	r2, sp, #292	@ 0x124
 801a7f4:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801a7f8:	4623      	mov	r3, r4
 801a7fa:	47c8      	blx	r9
 801a7fc:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801a800:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801a804:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801a808:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a80c:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801a810:	68a1      	ldr	r1, [r4, #8]
 801a812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a816:	ed94 6a08 	vldr	s12, [r4, #32]
 801a81a:	edd4 6a07 	vldr	s13, [r4, #28]
 801a81e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a822:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a826:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a82a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a82e:	edc4 6a07 	vstr	s13, [r4, #28]
 801a832:	441a      	add	r2, r3
 801a834:	6963      	ldr	r3, [r4, #20]
 801a836:	3301      	adds	r3, #1
 801a838:	6022      	str	r2, [r4, #0]
 801a83a:	6163      	str	r3, [r4, #20]
 801a83c:	69a3      	ldr	r3, [r4, #24]
 801a83e:	3b01      	subs	r3, #1
 801a840:	61a3      	str	r3, [r4, #24]
 801a842:	6923      	ldr	r3, [r4, #16]
 801a844:	440b      	add	r3, r1
 801a846:	68e1      	ldr	r1, [r4, #12]
 801a848:	428b      	cmp	r3, r1
 801a84a:	6123      	str	r3, [r4, #16]
 801a84c:	db15      	blt.n	801a87a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801a84e:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801a852:	3201      	adds	r2, #1
 801a854:	1a5b      	subs	r3, r3, r1
 801a856:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a85a:	6022      	str	r2, [r4, #0]
 801a85c:	6123      	str	r3, [r4, #16]
 801a85e:	edc4 6a07 	vstr	s13, [r4, #28]
 801a862:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801a866:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a86a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801a86e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801a872:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a876:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801a87a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801a87e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801a882:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801a886:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a88a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801a88e:	68a9      	ldr	r1, [r5, #8]
 801a890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a894:	ed95 6a08 	vldr	s12, [r5, #32]
 801a898:	edd5 6a07 	vldr	s13, [r5, #28]
 801a89c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a8a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a8a4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a8a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a8ac:	edc5 6a07 	vstr	s13, [r5, #28]
 801a8b0:	441a      	add	r2, r3
 801a8b2:	696b      	ldr	r3, [r5, #20]
 801a8b4:	3301      	adds	r3, #1
 801a8b6:	602a      	str	r2, [r5, #0]
 801a8b8:	616b      	str	r3, [r5, #20]
 801a8ba:	69ab      	ldr	r3, [r5, #24]
 801a8bc:	3b01      	subs	r3, #1
 801a8be:	61ab      	str	r3, [r5, #24]
 801a8c0:	692b      	ldr	r3, [r5, #16]
 801a8c2:	440b      	add	r3, r1
 801a8c4:	68e9      	ldr	r1, [r5, #12]
 801a8c6:	428b      	cmp	r3, r1
 801a8c8:	612b      	str	r3, [r5, #16]
 801a8ca:	db15      	blt.n	801a8f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a8cc:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801a8d0:	3201      	adds	r2, #1
 801a8d2:	1a5b      	subs	r3, r3, r1
 801a8d4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a8d8:	602a      	str	r2, [r5, #0]
 801a8da:	612b      	str	r3, [r5, #16]
 801a8dc:	edc5 6a07 	vstr	s13, [r5, #28]
 801a8e0:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801a8e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a8e8:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801a8ec:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801a8f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a8f4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801a8f8:	3f01      	subs	r7, #1
 801a8fa:	e757      	b.n	801a7ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a8fc:	4299      	cmp	r1, r3
 801a8fe:	dc13      	bgt.n	801a928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a900:	429a      	cmp	r2, r3
 801a902:	da14      	bge.n	801a92e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a904:	2502      	movs	r5, #2
 801a906:	2703      	movs	r7, #3
 801a908:	f04f 0800 	mov.w	r8, #0
 801a90c:	46a9      	mov	r9, r5
 801a90e:	f04f 0a01 	mov.w	sl, #1
 801a912:	e6ef      	b.n	801a6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a914:	2501      	movs	r5, #1
 801a916:	2700      	movs	r7, #0
 801a918:	46a9      	mov	r9, r5
 801a91a:	46b8      	mov	r8, r7
 801a91c:	f04f 0a02 	mov.w	sl, #2
 801a920:	e6e8      	b.n	801a6f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a922:	2501      	movs	r5, #1
 801a924:	2702      	movs	r7, #2
 801a926:	e6e1      	b.n	801a6ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a928:	2500      	movs	r5, #0
 801a92a:	2701      	movs	r7, #1
 801a92c:	e7f4      	b.n	801a918 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a92e:	2702      	movs	r7, #2
 801a930:	2503      	movs	r5, #3
 801a932:	f04f 0900 	mov.w	r9, #0
 801a936:	46b8      	mov	r8, r7
 801a938:	e7e9      	b.n	801a90e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a93a:	4613      	mov	r3, r2
 801a93c:	e728      	b.n	801a790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a93e:	bf00      	nop
 801a940:	2400b8c4 	.word	0x2400b8c4
 801a944:	fffd8f01 	.word	0xfffd8f01
 801a948:	00027100 	.word	0x00027100
 801a94c:	0004e1ff 	.word	0x0004e1ff
 801a950:	0004e1fe 	.word	0x0004e1fe
 801a954:	2400b8cc 	.word	0x2400b8cc
 801a958:	4613      	mov	r3, r2
 801a95a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801a95c:	469e      	mov	lr, r3
 801a95e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 801a960:	469c      	mov	ip, r3
 801a962:	9111      	str	r1, [sp, #68]	@ 0x44
 801a964:	f04f 0900 	mov.w	r9, #0
 801a968:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801a96c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801a970:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801a974:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 801a978:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801a97c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a980:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801a984:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 801a988:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801a98c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 801a990:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801a994:	f1bc 0f00 	cmp.w	ip, #0
 801a998:	d147      	bne.n	801aa2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a99a:	eb03 0c07 	add.w	ip, r3, r7
 801a99e:	1ad7      	subs	r7, r2, r3
 801a9a0:	f1b9 0f00 	cmp.w	r9, #0
 801a9a4:	d009      	beq.n	801a9ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a9a6:	9029      	str	r0, [sp, #164]	@ 0xa4
 801a9a8:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801a9ac:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 801a9b0:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 801a9b4:	912d      	str	r1, [sp, #180]	@ 0xb4
 801a9b6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801a9ba:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801a9bc:	f04f 0800 	mov.w	r8, #0
 801a9c0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801a9c4:	9111      	str	r1, [sp, #68]	@ 0x44
 801a9c6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801a9ca:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801a9ce:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801a9d2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801a9d6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801a9da:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801a9de:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801a9e2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801a9e6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801a9ea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801a9ee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801a9f2:	f1be 0f00 	cmp.w	lr, #0
 801a9f6:	d031      	beq.n	801aa5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a9f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801a9fa:	4450      	add	r0, sl
 801a9fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801aa00:	4431      	add	r1, r6
 801aa02:	ee37 7a04 	vadd.f32	s14, s14, s8
 801aa06:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801aa0a:	4549      	cmp	r1, r9
 801aa0c:	db08      	blt.n	801aa20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801aa0e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801aa12:	3001      	adds	r0, #1
 801aa14:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801aa18:	eba1 0109 	sub.w	r1, r1, r9
 801aa1c:	ee37 7a06 	vadd.f32	s14, s14, s12
 801aa20:	f10e 3eff 	add.w	lr, lr, #4294967295
 801aa24:	f04f 0801 	mov.w	r8, #1
 801aa28:	e7e3      	b.n	801a9f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801aa2a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801aa2c:	4450      	add	r0, sl
 801aa2e:	ee37 7a24 	vadd.f32	s14, s14, s9
 801aa32:	4431      	add	r1, r6
 801aa34:	ee77 7a84 	vadd.f32	s15, s15, s8
 801aa38:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801aa3c:	4541      	cmp	r1, r8
 801aa3e:	db08      	blt.n	801aa52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801aa40:	ee76 6a85 	vadd.f32	s13, s13, s10
 801aa44:	3001      	adds	r0, #1
 801aa46:	ee37 7a25 	vadd.f32	s14, s14, s11
 801aa4a:	eba1 0108 	sub.w	r1, r1, r8
 801aa4e:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aa52:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa56:	f04f 0901 	mov.w	r9, #1
 801aa5a:	e79b      	b.n	801a994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801aa5c:	449c      	add	ip, r3
 801aa5e:	1aff      	subs	r7, r7, r3
 801aa60:	f1b8 0f00 	cmp.w	r8, #0
 801aa64:	d009      	beq.n	801aa7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801aa66:	9019      	str	r0, [sp, #100]	@ 0x64
 801aa68:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801aa6c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801aa70:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801aa74:	911d      	str	r1, [sp, #116]	@ 0x74
 801aa76:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801aa7a:	1ad2      	subs	r2, r2, r3
 801aa7c:	e68b      	b.n	801a796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801aa7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa80:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	f000 80d1 	beq.w	801ac2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801aa88:	ad19      	add	r5, sp, #100	@ 0x64
 801aa8a:	ac39      	add	r4, sp, #228	@ 0xe4
 801aa8c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801aa8e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801aa92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801aa96:	930c      	str	r3, [sp, #48]	@ 0x30
 801aa98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801aa9a:	6963      	ldr	r3, [r4, #20]
 801aa9c:	440b      	add	r3, r1
 801aa9e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801aaa2:	4408      	add	r0, r1
 801aaa4:	b200      	sxth	r0, r0
 801aaa6:	4283      	cmp	r3, r0
 801aaa8:	900d      	str	r0, [sp, #52]	@ 0x34
 801aaaa:	f280 80c1 	bge.w	801ac30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801aaae:	428b      	cmp	r3, r1
 801aab0:	da08      	bge.n	801aac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aab2:	2a00      	cmp	r2, #0
 801aab4:	dd06      	ble.n	801aac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801aab6:	1acb      	subs	r3, r1, r3
 801aab8:	429a      	cmp	r2, r3
 801aaba:	f2c0 80bb 	blt.w	801ac34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f300 80b9 	bgt.w	801ac36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801aac4:	6967      	ldr	r7, [r4, #20]
 801aac6:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801aaca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aacc:	443b      	add	r3, r7
 801aace:	461f      	mov	r7, r3
 801aad0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aad2:	1bdf      	subs	r7, r3, r7
 801aad4:	4297      	cmp	r7, r2
 801aad6:	bfa8      	it	ge
 801aad8:	4617      	movge	r7, r2
 801aada:	2f00      	cmp	r7, #0
 801aadc:	f340 813c 	ble.w	801ad58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801aae0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801aae2:	6829      	ldr	r1, [r5, #0]
 801aae4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aae8:	f9bb 3000 	ldrsh.w	r3, [fp]
 801aaec:	4411      	add	r1, r2
 801aaee:	6820      	ldr	r0, [r4, #0]
 801aaf0:	4299      	cmp	r1, r3
 801aaf2:	dd1a      	ble.n	801ab2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801aaf4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801aaf8:	4402      	add	r2, r0
 801aafa:	440b      	add	r3, r1
 801aafc:	b21b      	sxth	r3, r3
 801aafe:	429a      	cmp	r2, r3
 801ab00:	dc13      	bgt.n	801ab2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801ab02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ab04:	a912      	add	r1, sp, #72	@ 0x48
 801ab06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	9206      	str	r2, [sp, #24]
 801ab0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ab10:	9500      	str	r5, [sp, #0]
 801ab12:	9205      	str	r2, [sp, #20]
 801ab14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab16:	e9cd b203 	strd	fp, r2, [sp, #12]
 801ab1a:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801ab1c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801ab20:	aa49      	add	r2, sp, #292	@ 0x124
 801ab22:	f8d3 9040 	ldr.w	r9, [r3, #64]	@ 0x40
 801ab26:	4623      	mov	r3, r4
 801ab28:	47c8      	blx	r9
 801ab2a:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 801ab2e:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801ab32:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801ab36:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab3a:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 801ab3e:	68a1      	ldr	r1, [r4, #8]
 801ab40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab44:	ed94 6a08 	vldr	s12, [r4, #32]
 801ab48:	edd4 6a07 	vldr	s13, [r4, #28]
 801ab4c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801ab50:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ab54:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801ab58:	e9d4 2300 	ldrd	r2, r3, [r4]
 801ab5c:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab60:	441a      	add	r2, r3
 801ab62:	6963      	ldr	r3, [r4, #20]
 801ab64:	3301      	adds	r3, #1
 801ab66:	6022      	str	r2, [r4, #0]
 801ab68:	6163      	str	r3, [r4, #20]
 801ab6a:	69a3      	ldr	r3, [r4, #24]
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	61a3      	str	r3, [r4, #24]
 801ab70:	6923      	ldr	r3, [r4, #16]
 801ab72:	440b      	add	r3, r1
 801ab74:	68e1      	ldr	r1, [r4, #12]
 801ab76:	428b      	cmp	r3, r1
 801ab78:	6123      	str	r3, [r4, #16]
 801ab7a:	db15      	blt.n	801aba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801ab7c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801ab80:	3201      	adds	r2, #1
 801ab82:	1a5b      	subs	r3, r3, r1
 801ab84:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ab88:	6022      	str	r2, [r4, #0]
 801ab8a:	6123      	str	r3, [r4, #16]
 801ab8c:	edc4 6a07 	vstr	s13, [r4, #28]
 801ab90:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801ab94:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ab98:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801ab9c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801aba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801aba4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801aba8:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801abac:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801abb0:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801abb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801abb8:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801abbc:	68a9      	ldr	r1, [r5, #8]
 801abbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801abc2:	ed95 6a08 	vldr	s12, [r5, #32]
 801abc6:	edd5 6a07 	vldr	s13, [r5, #28]
 801abca:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801abce:	ee76 6a86 	vadd.f32	s13, s13, s12
 801abd2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801abd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801abda:	edc5 6a07 	vstr	s13, [r5, #28]
 801abde:	441a      	add	r2, r3
 801abe0:	696b      	ldr	r3, [r5, #20]
 801abe2:	3301      	adds	r3, #1
 801abe4:	602a      	str	r2, [r5, #0]
 801abe6:	616b      	str	r3, [r5, #20]
 801abe8:	69ab      	ldr	r3, [r5, #24]
 801abea:	3b01      	subs	r3, #1
 801abec:	61ab      	str	r3, [r5, #24]
 801abee:	692b      	ldr	r3, [r5, #16]
 801abf0:	440b      	add	r3, r1
 801abf2:	68e9      	ldr	r1, [r5, #12]
 801abf4:	428b      	cmp	r3, r1
 801abf6:	612b      	str	r3, [r5, #16]
 801abf8:	db15      	blt.n	801ac26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801abfa:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801abfe:	3201      	adds	r2, #1
 801ac00:	1a5b      	subs	r3, r3, r1
 801ac02:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ac06:	602a      	str	r2, [r5, #0]
 801ac08:	612b      	str	r3, [r5, #16]
 801ac0a:	edc5 6a07 	vstr	s13, [r5, #28]
 801ac0e:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801ac12:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ac16:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801ac1a:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801ac1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac22:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801ac26:	3f01      	subs	r7, #1
 801ac28:	e757      	b.n	801aada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801ac2a:	ad39      	add	r5, sp, #228	@ 0xe4
 801ac2c:	ac19      	add	r4, sp, #100	@ 0x64
 801ac2e:	e72d      	b.n	801aa8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801ac30:	4613      	mov	r3, r2
 801ac32:	e744      	b.n	801aabe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801ac34:	4613      	mov	r3, r2
 801ac36:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801ac38:	469e      	mov	lr, r3
 801ac3a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 801ac3e:	461f      	mov	r7, r3
 801ac40:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 801ac44:	f04f 0900 	mov.w	r9, #0
 801ac48:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 801ac4c:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801ac50:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801ac54:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 801ac58:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 801ac5c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 801ac5e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 801ac62:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801ac66:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801ac6a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 801ac6e:	960e      	str	r6, [sp, #56]	@ 0x38
 801ac70:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801ac74:	2f00      	cmp	r7, #0
 801ac76:	d146      	bne.n	801ad06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801ac78:	449c      	add	ip, r3
 801ac7a:	1ad7      	subs	r7, r2, r3
 801ac7c:	f1b9 0f00 	cmp.w	r9, #0
 801ac80:	d009      	beq.n	801ac96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801ac82:	9039      	str	r0, [sp, #228]	@ 0xe4
 801ac84:	913d      	str	r1, [sp, #244]	@ 0xf4
 801ac86:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 801ac8a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 801ac8e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 801ac92:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 801ac96:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801ac98:	f04f 0800 	mov.w	r8, #0
 801ac9c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 801aca0:	910e      	str	r1, [sp, #56]	@ 0x38
 801aca2:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801aca6:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801acaa:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 801acae:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801acb2:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801acb6:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801acba:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 801acbe:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801acc2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801acc6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801acca:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 801acce:	f1be 0f00 	cmp.w	lr, #0
 801acd2:	d030      	beq.n	801ad36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801acd4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801acd6:	4450      	add	r0, sl
 801acd8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801acdc:	4431      	add	r1, r6
 801acde:	ee37 7a04 	vadd.f32	s14, s14, s8
 801ace2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801ace6:	4549      	cmp	r1, r9
 801ace8:	db08      	blt.n	801acfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801acea:	ee77 7a85 	vadd.f32	s15, s15, s10
 801acee:	3001      	adds	r0, #1
 801acf0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801acf4:	eba1 0109 	sub.w	r1, r1, r9
 801acf8:	ee37 7a06 	vadd.f32	s14, s14, s12
 801acfc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ad00:	f04f 0801 	mov.w	r8, #1
 801ad04:	e7e3      	b.n	801acce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801ad06:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801ad08:	4450      	add	r0, sl
 801ad0a:	ee37 7a24 	vadd.f32	s14, s14, s9
 801ad0e:	4431      	add	r1, r6
 801ad10:	ee77 7a84 	vadd.f32	s15, s15, s8
 801ad14:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801ad18:	4541      	cmp	r1, r8
 801ad1a:	db08      	blt.n	801ad2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801ad1c:	ee76 6a85 	vadd.f32	s13, s13, s10
 801ad20:	3001      	adds	r0, #1
 801ad22:	ee37 7a25 	vadd.f32	s14, s14, s11
 801ad26:	eba1 0108 	sub.w	r1, r1, r8
 801ad2a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801ad2e:	3f01      	subs	r7, #1
 801ad30:	f04f 0901 	mov.w	r9, #1
 801ad34:	e79e      	b.n	801ac74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801ad36:	449c      	add	ip, r3
 801ad38:	1aff      	subs	r7, r7, r3
 801ad3a:	f1b8 0f00 	cmp.w	r8, #0
 801ad3e:	d009      	beq.n	801ad54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801ad40:	9019      	str	r0, [sp, #100]	@ 0x64
 801ad42:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801ad46:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801ad4a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801ad4e:	911d      	str	r1, [sp, #116]	@ 0x74
 801ad50:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801ad54:	1ad2      	subs	r2, r2, r3
 801ad56:	e6b5      	b.n	801aac4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801ad58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	b923      	cbnz	r3, 801ad68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801ad5e:	4b04      	ldr	r3, [pc, #16]	@ (801ad70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801ad60:	6818      	ldr	r0, [r3, #0]
 801ad62:	6803      	ldr	r3, [r0, #0]
 801ad64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad66:	4798      	blx	r3
 801ad68:	b05b      	add	sp, #364	@ 0x16c
 801ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad6e:	bf00      	nop
 801ad70:	2400b8cc 	.word	0x2400b8cc

0801ad74 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801ad74:	b570      	push	{r4, r5, r6, lr}
 801ad76:	4604      	mov	r4, r0
 801ad78:	2500      	movs	r5, #0
 801ad7a:	9804      	ldr	r0, [sp, #16]
 801ad7c:	7223      	strb	r3, [r4, #8]
 801ad7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ad82:	8025      	strh	r5, [r4, #0]
 801ad84:	6061      	str	r1, [r4, #4]
 801ad86:	7263      	strb	r3, [r4, #9]
 801ad88:	60e0      	str	r0, [r4, #12]
 801ad8a:	8222      	strh	r2, [r4, #16]
 801ad8c:	8265      	strh	r5, [r4, #18]
 801ad8e:	82a5      	strh	r5, [r4, #20]
 801ad90:	82e5      	strh	r5, [r4, #22]
 801ad92:	8325      	strh	r5, [r4, #24]
 801ad94:	8365      	strh	r5, [r4, #26]
 801ad96:	83a5      	strh	r5, [r4, #28]
 801ad98:	77a5      	strb	r5, [r4, #30]
 801ad9a:	6803      	ldr	r3, [r0, #0]
 801ad9c:	695b      	ldr	r3, [r3, #20]
 801ad9e:	4798      	blx	r3
 801ada0:	4606      	mov	r6, r0
 801ada2:	b1f8      	cbz	r0, 801ade4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801ada4:	68e0      	ldr	r0, [r4, #12]
 801ada6:	4631      	mov	r1, r6
 801ada8:	6803      	ldr	r3, [r0, #0]
 801adaa:	68db      	ldr	r3, [r3, #12]
 801adac:	4798      	blx	r3
 801adae:	7b43      	ldrb	r3, [r0, #13]
 801adb0:	7a82      	ldrb	r2, [r0, #10]
 801adb2:	4605      	mov	r5, r0
 801adb4:	005b      	lsls	r3, r3, #1
 801adb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801adba:	4313      	orrs	r3, r2
 801adbc:	83a3      	strh	r3, [r4, #28]
 801adbe:	7a63      	ldrb	r3, [r4, #9]
 801adc0:	2b04      	cmp	r3, #4
 801adc2:	d10f      	bne.n	801ade4 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801adc4:	68e0      	ldr	r0, [r4, #12]
 801adc6:	462a      	mov	r2, r5
 801adc8:	4631      	mov	r1, r6
 801adca:	6803      	ldr	r3, [r0, #0]
 801adcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801adce:	4798      	blx	r3
 801add0:	7b6b      	ldrb	r3, [r5, #13]
 801add2:	005b      	lsls	r3, r3, #1
 801add4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801add8:	7aab      	ldrb	r3, [r5, #10]
 801adda:	4313      	orrs	r3, r2
 801addc:	4418      	add	r0, r3
 801adde:	8ba3      	ldrh	r3, [r4, #28]
 801ade0:	4418      	add	r0, r3
 801ade2:	83a0      	strh	r0, [r4, #28]
 801ade4:	4620      	mov	r0, r4
 801ade6:	bd70      	pop	{r4, r5, r6, pc}

0801ade8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adec:	2400      	movs	r4, #0
 801adee:	b085      	sub	sp, #20
 801adf0:	4681      	mov	r9, r0
 801adf2:	4688      	mov	r8, r1
 801adf4:	4692      	mov	sl, r2
 801adf6:	469b      	mov	fp, r3
 801adf8:	4627      	mov	r7, r4
 801adfa:	4625      	mov	r5, r4
 801adfc:	4626      	mov	r6, r4
 801adfe:	4554      	cmp	r4, sl
 801ae00:	da2a      	bge.n	801ae58 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae02:	2300      	movs	r3, #0
 801ae04:	9303      	str	r3, [sp, #12]
 801ae06:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ae0a:	429d      	cmp	r5, r3
 801ae0c:	d004      	beq.n	801ae18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801ae0e:	f242 030b 	movw	r3, #8203	@ 0x200b
 801ae12:	429d      	cmp	r5, r3
 801ae14:	bf18      	it	ne
 801ae16:	462f      	movne	r7, r5
 801ae18:	ab03      	add	r3, sp, #12
 801ae1a:	4642      	mov	r2, r8
 801ae1c:	4659      	mov	r1, fp
 801ae1e:	4648      	mov	r0, r9
 801ae20:	f002 ff82 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae24:	4605      	mov	r5, r0
 801ae26:	b1b8      	cbz	r0, 801ae58 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae28:	280a      	cmp	r0, #10
 801ae2a:	d015      	beq.n	801ae58 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801ae2c:	9a03      	ldr	r2, [sp, #12]
 801ae2e:	b18a      	cbz	r2, 801ae54 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801ae30:	7b50      	ldrb	r0, [r2, #13]
 801ae32:	4639      	mov	r1, r7
 801ae34:	7a93      	ldrb	r3, [r2, #10]
 801ae36:	0040      	lsls	r0, r0, #1
 801ae38:	8895      	ldrh	r5, [r2, #4]
 801ae3a:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ae3e:	4303      	orrs	r3, r0
 801ae40:	4640      	mov	r0, r8
 801ae42:	9301      	str	r3, [sp, #4]
 801ae44:	f8d8 3000 	ldr.w	r3, [r8]
 801ae48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ae4a:	4798      	blx	r3
 801ae4c:	9b01      	ldr	r3, [sp, #4]
 801ae4e:	4418      	add	r0, r3
 801ae50:	4406      	add	r6, r0
 801ae52:	b2b6      	uxth	r6, r6
 801ae54:	3401      	adds	r4, #1
 801ae56:	e7d2      	b.n	801adfe <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801ae58:	4630      	mov	r0, r6
 801ae5a:	b005      	add	sp, #20
 801ae5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801ae60:	2a02      	cmp	r2, #2
 801ae62:	b530      	push	{r4, r5, lr}
 801ae64:	d011      	beq.n	801ae8a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801ae66:	2a03      	cmp	r2, #3
 801ae68:	d01c      	beq.n	801aea4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801ae6a:	2a01      	cmp	r2, #1
 801ae6c:	d10c      	bne.n	801ae88 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801ae6e:	888b      	ldrh	r3, [r1, #4]
 801ae70:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801ae74:	8801      	ldrh	r1, [r0, #0]
 801ae76:	1a9b      	subs	r3, r3, r2
 801ae78:	8844      	ldrh	r4, [r0, #2]
 801ae7a:	1a5b      	subs	r3, r3, r1
 801ae7c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801ae80:	8004      	strh	r4, [r0, #0]
 801ae82:	8043      	strh	r3, [r0, #2]
 801ae84:	8081      	strh	r1, [r0, #4]
 801ae86:	80c2      	strh	r2, [r0, #6]
 801ae88:	bd30      	pop	{r4, r5, pc}
 801ae8a:	88cb      	ldrh	r3, [r1, #6]
 801ae8c:	88c2      	ldrh	r2, [r0, #6]
 801ae8e:	1a9b      	subs	r3, r3, r2
 801ae90:	8842      	ldrh	r2, [r0, #2]
 801ae92:	1a9b      	subs	r3, r3, r2
 801ae94:	888a      	ldrh	r2, [r1, #4]
 801ae96:	8881      	ldrh	r1, [r0, #4]
 801ae98:	8043      	strh	r3, [r0, #2]
 801ae9a:	1a52      	subs	r2, r2, r1
 801ae9c:	8801      	ldrh	r1, [r0, #0]
 801ae9e:	1a52      	subs	r2, r2, r1
 801aea0:	8002      	strh	r2, [r0, #0]
 801aea2:	e7f1      	b.n	801ae88 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801aea4:	88cb      	ldrh	r3, [r1, #6]
 801aea6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801aeaa:	8841      	ldrh	r1, [r0, #2]
 801aeac:	1a9b      	subs	r3, r3, r2
 801aeae:	f9b0 5000 	ldrsh.w	r5, [r0]
 801aeb2:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801aeb6:	1a5b      	subs	r3, r3, r1
 801aeb8:	8045      	strh	r5, [r0, #2]
 801aeba:	8082      	strh	r2, [r0, #4]
 801aebc:	8003      	strh	r3, [r0, #0]
 801aebe:	80c4      	strh	r4, [r0, #6]
 801aec0:	e7e2      	b.n	801ae88 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801aec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801aec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aec6:	b09f      	sub	sp, #124	@ 0x7c
 801aec8:	9116      	str	r1, [sp, #88]	@ 0x58
 801aeca:	9317      	str	r3, [sp, #92]	@ 0x5c
 801aecc:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801aece:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801aed0:	8809      	ldrh	r1, [r1, #0]
 801aed2:	889b      	ldrh	r3, [r3, #4]
 801aed4:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 801aed8:	440b      	add	r3, r1
 801aeda:	9212      	str	r2, [sp, #72]	@ 0x48
 801aedc:	f89d 20b8 	ldrb.w	r2, [sp, #184]	@ 0xb8
 801aee0:	b21b      	sxth	r3, r3
 801aee2:	9011      	str	r0, [sp, #68]	@ 0x44
 801aee4:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 801aee8:	9310      	str	r3, [sp, #64]	@ 0x40
 801aeea:	f8d8 3000 	ldr.w	r3, [r8]
 801aeee:	7a59      	ldrb	r1, [r3, #9]
 801aef0:	7a1b      	ldrb	r3, [r3, #8]
 801aef2:	9114      	str	r1, [sp, #80]	@ 0x50
 801aef4:	9315      	str	r3, [sp, #84]	@ 0x54
 801aef6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801aef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aefc:	2a00      	cmp	r2, #0
 801aefe:	d067      	beq.n	801afd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 801af00:	f898 3010 	ldrb.w	r3, [r8, #16]
 801af04:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801af06:	2b04      	cmp	r3, #4
 801af08:	bf14      	ite	ne
 801af0a:	2301      	movne	r3, #1
 801af0c:	2302      	moveq	r3, #2
 801af0e:	4413      	add	r3, r2
 801af10:	f04f 0900 	mov.w	r9, #0
 801af14:	930f      	str	r3, [sp, #60]	@ 0x3c
 801af16:	464c      	mov	r4, r9
 801af18:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 801af1c:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 801af20:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	@ 0x38
 801af24:	4293      	cmp	r3, r2
 801af26:	f280 808c 	bge.w	801b042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801af2a:	2300      	movs	r3, #0
 801af2c:	931c      	str	r3, [sp, #112]	@ 0x70
 801af2e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801af32:	429c      	cmp	r4, r3
 801af34:	d006      	beq.n	801af44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801af36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801af38:	f242 020b 	movw	r2, #8203	@ 0x200b
 801af3c:	4294      	cmp	r4, r2
 801af3e:	bf18      	it	ne
 801af40:	4623      	movne	r3, r4
 801af42:	930d      	str	r3, [sp, #52]	@ 0x34
 801af44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af46:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 801af48:	f8d8 2000 	ldr.w	r2, [r8]
 801af4c:	428b      	cmp	r3, r1
 801af4e:	db41      	blt.n	801afd4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801af50:	6813      	ldr	r3, [r2, #0]
 801af52:	4610      	mov	r0, r2
 801af54:	695b      	ldr	r3, [r3, #20]
 801af56:	4798      	blx	r3
 801af58:	4604      	mov	r4, r0
 801af5a:	f8d8 0000 	ldr.w	r0, [r8]
 801af5e:	aa1d      	add	r2, sp, #116	@ 0x74
 801af60:	4621      	mov	r1, r4
 801af62:	6803      	ldr	r3, [r0, #0]
 801af64:	689e      	ldr	r6, [r3, #8]
 801af66:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801af6a:	47b0      	blx	r6
 801af6c:	901c      	str	r0, [sp, #112]	@ 0x70
 801af6e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801af72:	429c      	cmp	r4, r3
 801af74:	f000 80ea 	beq.w	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801af78:	f242 030b 	movw	r3, #8203	@ 0x200b
 801af7c:	429c      	cmp	r4, r3
 801af7e:	f000 80e5 	beq.w	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801af82:	2c00      	cmp	r4, #0
 801af84:	f000 80f7 	beq.w	801b176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801af88:	2c0a      	cmp	r4, #10
 801af8a:	d060      	beq.n	801b04e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801af8c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801af8e:	b36a      	cbz	r2, 801afec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801af90:	8894      	ldrh	r4, [r2, #4]
 801af92:	f1bb 0f00 	cmp.w	fp, #0
 801af96:	d03b      	beq.n	801b010 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801af98:	f892 900d 	ldrb.w	r9, [r2, #13]
 801af9c:	f1bb 0f01 	cmp.w	fp, #1
 801afa0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801afa4:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 801afa8:	f892 900a 	ldrb.w	r9, [r2, #10]
 801afac:	ea49 0903 	orr.w	r9, r9, r3
 801afb0:	d134      	bne.n	801b01c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801afb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afb4:	eba5 0509 	sub.w	r5, r5, r9
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d14f      	bne.n	801b05c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801afbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801afbe:	eb09 0305 	add.w	r3, r9, r5
 801afc2:	4413      	add	r3, r2
 801afc4:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801afc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801afca:	4293      	cmp	r3, r2
 801afcc:	da51      	bge.n	801b072 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801afce:	e038      	b.n	801b042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801afd0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801afd2:	e79d      	b.n	801af10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801afd4:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 801afd8:	4659      	mov	r1, fp
 801afda:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801afdc:	9301      	str	r3, [sp, #4]
 801afde:	ab1d      	add	r3, sp, #116	@ 0x74
 801afe0:	9300      	str	r3, [sp, #0]
 801afe2:	ab1c      	add	r3, sp, #112	@ 0x70
 801afe4:	f002 fef8 	bl	801ddd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801afe8:	4604      	mov	r4, r0
 801afea:	e7c0      	b.n	801af6e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801afec:	f8d8 0000 	ldr.w	r0, [r8]
 801aff0:	6803      	ldr	r3, [r0, #0]
 801aff2:	691b      	ldr	r3, [r3, #16]
 801aff4:	4798      	blx	r3
 801aff6:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801affa:	4298      	cmp	r0, r3
 801affc:	f000 80a6 	beq.w	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b000:	f242 030b 	movw	r3, #8203	@ 0x200b
 801b004:	4298      	cmp	r0, r3
 801b006:	f000 80a1 	beq.w	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b00a:	f1bb 0f00 	cmp.w	fp, #0
 801b00e:	d100      	bne.n	801b012 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801b010:	444d      	add	r5, r9
 801b012:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801b014:	2a00      	cmp	r2, #0
 801b016:	d1bf      	bne.n	801af98 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801b018:	4691      	mov	r9, r2
 801b01a:	e097      	b.n	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b01c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b01e:	2b00      	cmp	r3, #0
 801b020:	f000 80ab 	beq.w	801b17a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801b024:	f1bb 0f00 	cmp.w	fp, #0
 801b028:	d118      	bne.n	801b05c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801b02a:	f8d8 0000 	ldr.w	r0, [r8]
 801b02e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b030:	6803      	ldr	r3, [r0, #0]
 801b032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b034:	4798      	blx	r3
 801b036:	4405      	add	r5, r0
 801b038:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b03a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b03c:	1aeb      	subs	r3, r5, r3
 801b03e:	4293      	cmp	r3, r2
 801b040:	dd17      	ble.n	801b072 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801b042:	2c00      	cmp	r4, #0
 801b044:	f000 8097 	beq.w	801b176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b048:	2c0a      	cmp	r4, #10
 801b04a:	f040 8085 	bne.w	801b158 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801b04e:	240a      	movs	r4, #10
 801b050:	fab4 f084 	clz	r0, r4
 801b054:	0940      	lsrs	r0, r0, #5
 801b056:	b01f      	add	sp, #124	@ 0x7c
 801b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b05c:	f8d8 0000 	ldr.w	r0, [r8]
 801b060:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b062:	6803      	ldr	r3, [r0, #0]
 801b064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b066:	4798      	blx	r3
 801b068:	f1bb 0f01 	cmp.w	fp, #1
 801b06c:	eba5 0500 	sub.w	r5, r5, r0
 801b070:	d0a4      	beq.n	801afbc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801b072:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801b074:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b076:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801b07a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b07e:	7b43      	ldrb	r3, [r0, #13]
 801b080:	4429      	add	r1, r5
 801b082:	015b      	lsls	r3, r3, #5
 801b084:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801b088:	7983      	ldrb	r3, [r0, #6]
 801b08a:	4313      	orrs	r3, r2
 801b08c:	440b      	add	r3, r1
 801b08e:	42b3      	cmp	r3, r6
 801b090:	db5c      	blt.n	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b092:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b094:	4299      	cmp	r1, r3
 801b096:	da59      	bge.n	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b098:	f8d8 0000 	ldr.w	r0, [r8]
 801b09c:	42ae      	cmp	r6, r5
 801b09e:	6803      	ldr	r3, [r0, #0]
 801b0a0:	bfcc      	ite	gt
 801b0a2:	1b76      	subgt	r6, r6, r5
 801b0a4:	2600      	movle	r6, #0
 801b0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b0a8:	bfc8      	it	gt
 801b0aa:	b2b6      	uxthgt	r6, r6
 801b0ac:	4798      	blx	r3
 801b0ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b0b0:	7b5a      	ldrb	r2, [r3, #13]
 801b0b2:	00d1      	lsls	r1, r2, #3
 801b0b4:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 801b0b8:	7a19      	ldrb	r1, [r3, #8]
 801b0ba:	4339      	orrs	r1, r7
 801b0bc:	0657      	lsls	r7, r2, #25
 801b0be:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801b0c0:	bf48      	it	mi
 801b0c2:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 801b0c6:	4407      	add	r7, r0
 801b0c8:	bf48      	it	mi
 801b0ca:	b209      	sxthmi	r1, r1
 801b0cc:	1a7f      	subs	r7, r7, r1
 801b0ce:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 801b0d0:	b2bf      	uxth	r7, r7
 801b0d2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801b0d6:	fa0f fa87 	sxth.w	sl, r7
 801b0da:	4551      	cmp	r1, sl
 801b0dc:	dd3a      	ble.n	801b154 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801b0de:	0112      	lsls	r2, r2, #4
 801b0e0:	79d8      	ldrb	r0, [r3, #7]
 801b0e2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801b0e6:	4302      	orrs	r2, r0
 801b0e8:	4492      	add	sl, r2
 801b0ea:	4551      	cmp	r1, sl
 801b0ec:	dc2e      	bgt.n	801b14c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801b0ee:	1bcf      	subs	r7, r1, r7
 801b0f0:	468a      	mov	sl, r1
 801b0f2:	b2bf      	uxth	r7, r7
 801b0f4:	9319      	str	r3, [sp, #100]	@ 0x64
 801b0f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b0f8:	f8d8 0000 	ldr.w	r0, [r8]
 801b0fc:	681a      	ldr	r2, [r3, #0]
 801b0fe:	6801      	ldr	r1, [r0, #0]
 801b100:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 801b102:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b104:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b106:	9218      	str	r2, [sp, #96]	@ 0x60
 801b108:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 801b10a:	4788      	blx	r1
 801b10c:	f898 1006 	ldrb.w	r1, [r8, #6]
 801b110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b112:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b114:	f898 100e 	ldrb.w	r1, [r8, #14]
 801b118:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b11a:	910a      	str	r1, [sp, #40]	@ 0x28
 801b11c:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801b120:	9109      	str	r1, [sp, #36]	@ 0x24
 801b122:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801b126:	9305      	str	r3, [sp, #20]
 801b128:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b12a:	9206      	str	r2, [sp, #24]
 801b12c:	e9cd a601 	strd	sl, r6, [sp, #4]
 801b130:	442e      	add	r6, r5
 801b132:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801b136:	b236      	sxth	r6, r6
 801b138:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b13a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801b13e:	9600      	str	r6, [sp, #0]
 801b140:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801b142:	681a      	ldr	r2, [r3, #0]
 801b144:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b14a:	47b0      	blx	r6
 801b14c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b14e:	3301      	adds	r3, #1
 801b150:	930e      	str	r3, [sp, #56]	@ 0x38
 801b152:	e6e5      	b.n	801af20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801b154:	2700      	movs	r7, #0
 801b156:	e7cd      	b.n	801b0f4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801b158:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801b15a:	3501      	adds	r5, #1
 801b15c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801b15e:	429d      	cmp	r5, r3
 801b160:	f6bf af76 	bge.w	801b050 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b164:	4659      	mov	r1, fp
 801b166:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801b168:	f7ee fe96 	bl	8009e98 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b16c:	4604      	mov	r4, r0
 801b16e:	b110      	cbz	r0, 801b176 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801b170:	280a      	cmp	r0, #10
 801b172:	d1f2      	bne.n	801b15a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801b174:	e76b      	b.n	801b04e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801b176:	2400      	movs	r4, #0
 801b178:	e76a      	b.n	801b050 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801b17a:	f1bb 0f00 	cmp.w	fp, #0
 801b17e:	f43f af5b 	beq.w	801b038 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801b182:	e776      	b.n	801b072 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801b184:	b530      	push	{r4, r5, lr}
 801b186:	8a44      	ldrh	r4, [r0, #18]
 801b188:	8ac5      	ldrh	r5, [r0, #22]
 801b18a:	82c3      	strh	r3, [r0, #22]
 801b18c:	442c      	add	r4, r5
 801b18e:	1ae4      	subs	r4, r4, r3
 801b190:	8b03      	ldrh	r3, [r0, #24]
 801b192:	8244      	strh	r4, [r0, #18]
 801b194:	8a84      	ldrh	r4, [r0, #20]
 801b196:	4422      	add	r2, r4
 801b198:	440c      	add	r4, r1
 801b19a:	1a59      	subs	r1, r3, r1
 801b19c:	8342      	strh	r2, [r0, #26]
 801b19e:	8284      	strh	r4, [r0, #20]
 801b1a0:	8301      	strh	r1, [r0, #24]
 801b1a2:	bd30      	pop	{r4, r5, pc}

0801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801b1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1a8:	7a43      	ldrb	r3, [r0, #9]
 801b1aa:	b087      	sub	sp, #28
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	460f      	mov	r7, r1
 801b1b0:	1eda      	subs	r2, r3, #3
 801b1b2:	b2d2      	uxtb	r2, r2
 801b1b4:	2900      	cmp	r1, #0
 801b1b6:	d036      	beq.n	801b226 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801b1b8:	2a01      	cmp	r2, #1
 801b1ba:	d932      	bls.n	801b222 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801b1bc:	1e58      	subs	r0, r3, #1
 801b1be:	f1d0 0b00 	rsbs	fp, r0, #0
 801b1c2:	eb4b 0b00 	adc.w	fp, fp, r0
 801b1c6:	1e99      	subs	r1, r3, #2
 801b1c8:	424b      	negs	r3, r1
 801b1ca:	414b      	adcs	r3, r1
 801b1cc:	9303      	str	r3, [sp, #12]
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801b1d4:	2500      	movs	r5, #0
 801b1d6:	f242 0a0b 	movw	sl, #8203	@ 0x200b
 801b1da:	46a9      	mov	r9, r5
 801b1dc:	8265      	strh	r5, [r4, #18]
 801b1de:	82a5      	strh	r5, [r4, #20]
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	9305      	str	r3, [sp, #20]
 801b1e4:	8823      	ldrh	r3, [r4, #0]
 801b1e6:	2b20      	cmp	r3, #32
 801b1e8:	d02b      	beq.n	801b242 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801b1ea:	eba3 020a 	sub.w	r2, r3, sl
 801b1ee:	4256      	negs	r6, r2
 801b1f0:	4156      	adcs	r6, r2
 801b1f2:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801b1f6:	4293      	cmp	r3, r2
 801b1f8:	d004      	beq.n	801b204 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b1fa:	4553      	cmp	r3, sl
 801b1fc:	bf16      	itet	ne
 801b1fe:	4699      	movne	r9, r3
 801b200:	2601      	moveq	r6, #1
 801b202:	2600      	movne	r6, #0
 801b204:	ab05      	add	r3, sp, #20
 801b206:	68e2      	ldr	r2, [r4, #12]
 801b208:	7a21      	ldrb	r1, [r4, #8]
 801b20a:	6860      	ldr	r0, [r4, #4]
 801b20c:	f002 fd8c 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b210:	8020      	strh	r0, [r4, #0]
 801b212:	b9c8      	cbnz	r0, 801b248 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801b214:	8b22      	ldrh	r2, [r4, #24]
 801b216:	2300      	movs	r3, #0
 801b218:	4611      	mov	r1, r2
 801b21a:	4620      	mov	r0, r4
 801b21c:	f7ff ffb2 	bl	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b220:	e066      	b.n	801b2f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b222:	468b      	mov	fp, r1
 801b224:	e7cf      	b.n	801b1c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801b226:	3b01      	subs	r3, #1
 801b228:	2a01      	cmp	r2, #1
 801b22a:	9103      	str	r1, [sp, #12]
 801b22c:	468b      	mov	fp, r1
 801b22e:	bf8c      	ite	hi
 801b230:	2200      	movhi	r2, #0
 801b232:	2201      	movls	r2, #1
 801b234:	2b01      	cmp	r3, #1
 801b236:	9202      	str	r2, [sp, #8]
 801b238:	bf8c      	ite	hi
 801b23a:	2300      	movhi	r3, #0
 801b23c:	2301      	movls	r3, #1
 801b23e:	9301      	str	r3, [sp, #4]
 801b240:	e7c8      	b.n	801b1d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801b242:	4699      	mov	r9, r3
 801b244:	2601      	movs	r6, #1
 801b246:	e7dd      	b.n	801b204 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801b248:	8ae3      	ldrh	r3, [r4, #22]
 801b24a:	280a      	cmp	r0, #10
 801b24c:	f103 0301 	add.w	r3, r3, #1
 801b250:	82e3      	strh	r3, [r4, #22]
 801b252:	d0df      	beq.n	801b214 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801b254:	9a05      	ldr	r2, [sp, #20]
 801b256:	bb42      	cbnz	r2, 801b2aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801b258:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801b25c:	4298      	cmp	r0, r3
 801b25e:	d001      	beq.n	801b264 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b260:	4550      	cmp	r0, sl
 801b262:	d1bd      	bne.n	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b264:	8823      	ldrh	r3, [r4, #0]
 801b266:	8b21      	ldrh	r1, [r4, #24]
 801b268:	2b20      	cmp	r3, #32
 801b26a:	d001      	beq.n	801b270 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801b26c:	4553      	cmp	r3, sl
 801b26e:	d131      	bne.n	801b2d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801b270:	2e00      	cmp	r6, #0
 801b272:	bf0a      	itet	eq
 801b274:	460d      	moveq	r5, r1
 801b276:	4630      	movne	r0, r6
 801b278:	2001      	moveq	r0, #1
 801b27a:	440a      	add	r2, r1
 801b27c:	8aa3      	ldrh	r3, [r4, #20]
 801b27e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801b282:	b292      	uxth	r2, r2
 801b284:	8322      	strh	r2, [r4, #24]
 801b286:	4413      	add	r3, r2
 801b288:	2f00      	cmp	r7, #0
 801b28a:	d03a      	beq.n	801b302 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801b28c:	f1bb 0f00 	cmp.w	fp, #0
 801b290:	d102      	bne.n	801b298 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801b292:	9903      	ldr	r1, [sp, #12]
 801b294:	b301      	cbz	r1, 801b2d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b296:	b1f8      	cbz	r0, 801b2d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801b298:	8ba1      	ldrh	r1, [r4, #28]
 801b29a:	4419      	add	r1, r3
 801b29c:	458c      	cmp	ip, r1
 801b29e:	da2a      	bge.n	801b2f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b2a0:	8a61      	ldrh	r1, [r4, #18]
 801b2a2:	b341      	cbz	r1, 801b2f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801b2a4:	4563      	cmp	r3, ip
 801b2a6:	dd9b      	ble.n	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2a8:	e01c      	b.n	801b2e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801b2aa:	8893      	ldrh	r3, [r2, #4]
 801b2ac:	4649      	mov	r1, r9
 801b2ae:	8023      	strh	r3, [r4, #0]
 801b2b0:	f892 800d 	ldrb.w	r8, [r2, #13]
 801b2b4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801b2b8:	f408 7080 	and.w	r0, r8, #256	@ 0x100
 801b2bc:	f892 800a 	ldrb.w	r8, [r2, #10]
 801b2c0:	ea48 0800 	orr.w	r8, r8, r0
 801b2c4:	68e0      	ldr	r0, [r4, #12]
 801b2c6:	6803      	ldr	r3, [r0, #0]
 801b2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b2ca:	4798      	blx	r3
 801b2cc:	eb08 0200 	add.w	r2, r8, r0
 801b2d0:	b292      	uxth	r2, r2
 801b2d2:	e7c7      	b.n	801b264 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801b2d4:	2000      	movs	r0, #0
 801b2d6:	e7d0      	b.n	801b27a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801b2d8:	4563      	cmp	r3, ip
 801b2da:	dd81      	ble.n	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2dc:	8a63      	ldrh	r3, [r4, #18]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	f43f af7e 	beq.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b2e4:	2301      	movs	r3, #1
 801b2e6:	8ba2      	ldrh	r2, [r4, #28]
 801b2e8:	77a3      	strb	r3, [r4, #30]
 801b2ea:	8b63      	ldrh	r3, [r4, #26]
 801b2ec:	4413      	add	r3, r2
 801b2ee:	8363      	strh	r3, [r4, #26]
 801b2f0:	b007      	add	sp, #28
 801b2f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	4611      	mov	r1, r2
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	f7ff ff42 	bl	801b184 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801b300:	e76e      	b.n	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b302:	4563      	cmp	r3, ip
 801b304:	dd14      	ble.n	801b330 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801b306:	9b02      	ldr	r3, [sp, #8]
 801b308:	b113      	cbz	r3, 801b310 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801b30a:	2301      	movs	r3, #1
 801b30c:	460a      	mov	r2, r1
 801b30e:	e783      	b.n	801b218 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801b310:	9b01      	ldr	r3, [sp, #4]
 801b312:	2b00      	cmp	r3, #0
 801b314:	f43f af64 	beq.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b318:	2800      	cmp	r0, #0
 801b31a:	f47f af61 	bne.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b31e:	b116      	cbz	r6, 801b326 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801b320:	2301      	movs	r3, #1
 801b322:	462a      	mov	r2, r5
 801b324:	e779      	b.n	801b21a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801b326:	8a63      	ldrh	r3, [r4, #18]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	f43f af59 	beq.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b32e:	e7df      	b.n	801b2f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801b330:	2800      	cmp	r0, #0
 801b332:	f47f af55 	bne.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b336:	2e00      	cmp	r6, #0
 801b338:	f43f af52 	beq.w	801b1e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801b33c:	2301      	movs	r3, #1
 801b33e:	462a      	mov	r2, r5
 801b340:	e7db      	b.n	801b2fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801b342 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801b342:	b530      	push	{r4, r5, lr}
 801b344:	4605      	mov	r5, r0
 801b346:	b08b      	sub	sp, #44	@ 0x2c
 801b348:	b191      	cbz	r1, 801b370 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801b34a:	2401      	movs	r4, #1
 801b34c:	e9cd 3100 	strd	r3, r1, [sp]
 801b350:	4613      	mov	r3, r2
 801b352:	4601      	mov	r1, r0
 801b354:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801b358:	a802      	add	r0, sp, #8
 801b35a:	f7ff fd0b 	bl	801ad74 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b35e:	2100      	movs	r1, #0
 801b360:	a802      	add	r0, sp, #8
 801b362:	f7ff ff1f 	bl	801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b366:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b36a:	b163      	cbz	r3, 801b386 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801b36c:	3401      	adds	r4, #1
 801b36e:	e7f6      	b.n	801b35e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801b370:	2401      	movs	r4, #1
 801b372:	f002 fdd3 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b376:	280a      	cmp	r0, #10
 801b378:	4628      	mov	r0, r5
 801b37a:	bf08      	it	eq
 801b37c:	3401      	addeq	r4, #1
 801b37e:	f002 fdcd 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b382:	2800      	cmp	r0, #0
 801b384:	d1f7      	bne.n	801b376 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801b386:	b2a0      	uxth	r0, r4
 801b388:	b00b      	add	sp, #44	@ 0x2c
 801b38a:	bd30      	pop	{r4, r5, pc}

0801b38c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b390:	b0e5      	sub	sp, #404	@ 0x194
 801b392:	4689      	mov	r9, r1
 801b394:	461c      	mov	r4, r3
 801b396:	f8dd a1b8 	ldr.w	sl, [sp, #440]	@ 0x1b8
 801b39a:	900a      	str	r0, [sp, #40]	@ 0x28
 801b39c:	f1ba 0f00 	cmp.w	sl, #0
 801b3a0:	f000 80b4 	beq.w	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	f000 80b0 	beq.w	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b3ac:	7ba3      	ldrb	r3, [r4, #14]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	f000 80ac 	beq.w	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b3b4:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
 801b3b8:	6810      	ldr	r0, [r2, #0]
 801b3ba:	6851      	ldr	r1, [r2, #4]
 801b3bc:	2500      	movs	r5, #0
 801b3be:	4643      	mov	r3, r8
 801b3c0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801b3c4:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b3c6:	af19      	add	r7, sp, #100	@ 0x64
 801b3c8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801b3cc:	79a2      	ldrb	r2, [r4, #6]
 801b3ce:	c303      	stmia	r3!, {r0, r1}
 801b3d0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801b3d4:	a90f      	add	r1, sp, #60	@ 0x3c
 801b3d6:	4640      	mov	r0, r8
 801b3d8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b3dc:	f7ff fd40 	bl	801ae60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b3e0:	a90f      	add	r1, sp, #60	@ 0x3c
 801b3e2:	79a2      	ldrb	r2, [r4, #6]
 801b3e4:	4608      	mov	r0, r1
 801b3e6:	f7ff fd3b 	bl	801ae60 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801b3ea:	4638      	mov	r0, r7
 801b3ec:	f002 f948 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801b3f0:	6820      	ldr	r0, [r4, #0]
 801b3f2:	6803      	ldr	r3, [r0, #0]
 801b3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b3f6:	4798      	blx	r3
 801b3f8:	4606      	mov	r6, r0
 801b3fa:	6820      	ldr	r0, [r4, #0]
 801b3fc:	6803      	ldr	r3, [r0, #0]
 801b3fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b400:	4798      	blx	r3
 801b402:	4633      	mov	r3, r6
 801b404:	9000      	str	r0, [sp, #0]
 801b406:	4651      	mov	r1, sl
 801b408:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801b40a:	4638      	mov	r0, r7
 801b40c:	f002 f98b 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b410:	7923      	ldrb	r3, [r4, #4]
 801b412:	6820      	ldr	r0, [r4, #0]
 801b414:	9308      	str	r3, [sp, #32]
 801b416:	6803      	ldr	r3, [r0, #0]
 801b418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b41a:	4798      	blx	r3
 801b41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b420:	181e      	adds	r6, r3, r0
 801b422:	42ae      	cmp	r6, r5
 801b424:	dd06      	ble.n	801b434 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801b426:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801b42a:	4282      	cmp	r2, r0
 801b42c:	bfa4      	itt	ge
 801b42e:	189d      	addge	r5, r3, r2
 801b430:	fb95 f5f6 	sdivge	r5, r5, r6
 801b434:	a832      	add	r0, sp, #200	@ 0xc8
 801b436:	f002 f923 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801b43a:	7c23      	ldrb	r3, [r4, #16]
 801b43c:	b17b      	cbz	r3, 801b45e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801b43e:	6820      	ldr	r0, [r4, #0]
 801b440:	6803      	ldr	r3, [r0, #0]
 801b442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b444:	4798      	blx	r3
 801b446:	4683      	mov	fp, r0
 801b448:	6820      	ldr	r0, [r4, #0]
 801b44a:	6803      	ldr	r3, [r0, #0]
 801b44c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b44e:	4798      	blx	r3
 801b450:	465b      	mov	r3, fp
 801b452:	9000      	str	r0, [sp, #0]
 801b454:	4651      	mov	r1, sl
 801b456:	9a6f      	ldr	r2, [sp, #444]	@ 0x1bc
 801b458:	a832      	add	r0, sp, #200	@ 0xc8
 801b45a:	f002 f964 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b45e:	7be1      	ldrb	r1, [r4, #15]
 801b460:	a811      	add	r0, sp, #68	@ 0x44
 801b462:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801b466:	7963      	ldrb	r3, [r4, #5]
 801b468:	1a52      	subs	r2, r2, r1
 801b46a:	7c21      	ldrb	r1, [r4, #16]
 801b46c:	9101      	str	r1, [sp, #4]
 801b46e:	b292      	uxth	r2, r2
 801b470:	6821      	ldr	r1, [r4, #0]
 801b472:	9100      	str	r1, [sp, #0]
 801b474:	a932      	add	r1, sp, #200	@ 0xc8
 801b476:	f7ff fc7d 	bl	801ad74 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801b47a:	7c23      	ldrb	r3, [r4, #16]
 801b47c:	b9bb      	cbnz	r3, 801b4ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801b47e:	fa1f fa86 	uxth.w	sl, r6
 801b482:	2d00      	cmp	r5, #0
 801b484:	dd45      	ble.n	801b512 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b486:	4638      	mov	r0, r7
 801b488:	f002 fd48 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b48c:	2800      	cmp	r0, #0
 801b48e:	d03d      	beq.n	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b490:	280a      	cmp	r0, #10
 801b492:	d1f6      	bne.n	801b482 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b494:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b498:	3d01      	subs	r5, #1
 801b49a:	4453      	add	r3, sl
 801b49c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b4a0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801b4a4:	eba3 030a 	sub.w	r3, r3, sl
 801b4a8:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b4ac:	e7e9      	b.n	801b482 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801b4ae:	0073      	lsls	r3, r6, #1
 801b4b0:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 801b4b4:	fa1f fa86 	uxth.w	sl, r6
 801b4b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b4ba:	2d00      	cmp	r5, #0
 801b4bc:	dd29      	ble.n	801b512 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801b4be:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801b4c2:	a811      	add	r0, sp, #68	@ 0x44
 801b4c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4c6:	428b      	cmp	r3, r1
 801b4c8:	bfd4      	ite	le
 801b4ca:	2100      	movle	r1, #0
 801b4cc:	2101      	movgt	r1, #1
 801b4ce:	f7ff fe69 	bl	801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b4d2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801b4d6:	3b01      	subs	r3, #1
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	455b      	cmp	r3, fp
 801b4dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b4de:	d005      	beq.n	801b4ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801b4e0:	7961      	ldrb	r1, [r4, #5]
 801b4e2:	4638      	mov	r0, r7
 801b4e4:	f7ee fcd8 	bl	8009e98 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801b4e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4ea:	e7f4      	b.n	801b4d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801b4ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b4f0:	3d01      	subs	r5, #1
 801b4f2:	4453      	add	r3, sl
 801b4f4:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b4f8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	@ 0x42
 801b4fc:	eba3 030a 	sub.w	r3, r3, sl
 801b500:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801b504:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d1d6      	bne.n	801b4ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801b50c:	b065      	add	sp, #404	@ 0x194
 801b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b512:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801b516:	ad4b      	add	r5, sp, #300	@ 0x12c
 801b518:	f04f 0b00 	mov.w	fp, #0
 801b51c:	7c23      	ldrb	r3, [r4, #16]
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d067      	beq.n	801b5f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801b522:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801b526:	a811      	add	r0, sp, #68	@ 0x44
 801b528:	458a      	cmp	sl, r1
 801b52a:	bfd4      	ite	le
 801b52c:	2100      	movle	r1, #0
 801b52e:	2101      	movgt	r1, #1
 801b530:	f7ff fe38 	bl	801b1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b534:	9b08      	ldr	r3, [sp, #32]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d056      	beq.n	801b5e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b53a:	7c23      	ldrb	r3, [r4, #16]
 801b53c:	2264      	movs	r2, #100	@ 0x64
 801b53e:	4639      	mov	r1, r7
 801b540:	4628      	mov	r0, r5
 801b542:	9309      	str	r3, [sp, #36]	@ 0x24
 801b544:	f010 f83d 	bl	802b5c2 <memcpy>
 801b548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d059      	beq.n	801b602 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801b54e:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801b552:	7922      	ldrb	r2, [r4, #4]
 801b554:	2a01      	cmp	r2, #1
 801b556:	d13d      	bne.n	801b5d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801b558:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	@ 0x40
 801b55c:	1ac0      	subs	r0, r0, r3
 801b55e:	2302      	movs	r3, #2
 801b560:	fb90 f0f3 	sdiv	r0, r0, r3
 801b564:	b200      	sxth	r0, r0
 801b566:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801b56a:	4418      	add	r0, r3
 801b56c:	7c23      	ldrb	r3, [r4, #16]
 801b56e:	f8ad 012c 	strh.w	r0, [sp, #300]	@ 0x12c
 801b572:	2b00      	cmp	r3, #0
 801b574:	d03a      	beq.n	801b5ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801b576:	f8bd 2056 	ldrh.w	r2, [sp, #86]	@ 0x56
 801b57a:	f89d 1062 	ldrb.w	r1, [sp, #98]	@ 0x62
 801b57e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801b582:	9500      	str	r5, [sp, #0]
 801b584:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801b586:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801b58a:	e9cd b703 	strd	fp, r7, [sp, #12]
 801b58e:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801b592:	464a      	mov	r2, r9
 801b594:	2100      	movs	r1, #0
 801b596:	f7ff fc94 	bl	801aec2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801b59a:	2800      	cmp	r0, #0
 801b59c:	d1b6      	bne.n	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b59e:	b2b2      	uxth	r2, r6
 801b5a0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 801b5a4:	4611      	mov	r1, r2
 801b5a6:	4413      	add	r3, r2
 801b5a8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801b5ac:	b21b      	sxth	r3, r3
 801b5ae:	1a52      	subs	r2, r2, r1
 801b5b0:	7c21      	ldrb	r1, [r4, #16]
 801b5b2:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801b5b6:	b212      	sxth	r2, r2
 801b5b8:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 801b5bc:	b109      	cbz	r1, 801b5c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801b5be:	42b2      	cmp	r2, r6
 801b5c0:	dba4      	blt.n	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b5c2:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801b5c6:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801b5ca:	440a      	add	r2, r1
 801b5cc:	b212      	sxth	r2, r2
 801b5ce:	4293      	cmp	r3, r2
 801b5d0:	dda4      	ble.n	801b51c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801b5d2:	e79b      	b.n	801b50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801b5d4:	2a02      	cmp	r2, #2
 801b5d6:	d105      	bne.n	801b5e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801b5d8:	7be2      	ldrb	r2, [r4, #15]
 801b5da:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 801b5de:	1a80      	subs	r0, r0, r2
 801b5e0:	1ac0      	subs	r0, r0, r3
 801b5e2:	e7bf      	b.n	801b564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	e7be      	b.n	801b566 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b5e8:	7be0      	ldrb	r0, [r4, #15]
 801b5ea:	e7bc      	b.n	801b566 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801b5ec:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b5f0:	e7c3      	b.n	801b57a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801b5f2:	9b08      	ldr	r3, [sp, #32]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d0f7      	beq.n	801b5e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801b5f8:	2264      	movs	r2, #100	@ 0x64
 801b5fa:	4639      	mov	r1, r7
 801b5fc:	4628      	mov	r0, r5
 801b5fe:	f00f ffe0 	bl	802b5c2 <memcpy>
 801b602:	2300      	movs	r3, #0
 801b604:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801b608:	6821      	ldr	r1, [r4, #0]
 801b60a:	4628      	mov	r0, r5
 801b60c:	f7ff fbec 	bl	801ade8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b610:	b203      	sxth	r3, r0
 801b612:	e79e      	b.n	801b552 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801b614 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801b614:	2b02      	cmp	r3, #2
 801b616:	b510      	push	{r4, lr}
 801b618:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b61c:	d00b      	beq.n	801b636 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801b61e:	2b03      	cmp	r3, #3
 801b620:	d00e      	beq.n	801b640 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801b622:	2b01      	cmp	r3, #1
 801b624:	d001      	beq.n	801b62a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801b626:	1860      	adds	r0, r4, r1
 801b628:	bd10      	pop	{r4, pc}
 801b62a:	8880      	ldrh	r0, [r0, #4]
 801b62c:	4420      	add	r0, r4
 801b62e:	b200      	sxth	r0, r0
 801b630:	1a80      	subs	r0, r0, r2
 801b632:	3801      	subs	r0, #1
 801b634:	e7f8      	b.n	801b628 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801b636:	8880      	ldrh	r0, [r0, #4]
 801b638:	4420      	add	r0, r4
 801b63a:	b200      	sxth	r0, r0
 801b63c:	1a40      	subs	r0, r0, r1
 801b63e:	e7f8      	b.n	801b632 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801b640:	18a0      	adds	r0, r4, r2
 801b642:	e7f1      	b.n	801b628 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801b644 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801b644:	2b02      	cmp	r3, #2
 801b646:	b510      	push	{r4, lr}
 801b648:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801b64c:	d006      	beq.n	801b65c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801b64e:	2b03      	cmp	r3, #3
 801b650:	d00a      	beq.n	801b668 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801b652:	2b01      	cmp	r3, #1
 801b654:	bf14      	ite	ne
 801b656:	18a0      	addne	r0, r4, r2
 801b658:	1860      	addeq	r0, r4, r1
 801b65a:	bd10      	pop	{r4, pc}
 801b65c:	88c0      	ldrh	r0, [r0, #6]
 801b65e:	4420      	add	r0, r4
 801b660:	b200      	sxth	r0, r0
 801b662:	1a80      	subs	r0, r0, r2
 801b664:	3801      	subs	r0, #1
 801b666:	e7f8      	b.n	801b65a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801b668:	88c0      	ldrh	r0, [r0, #6]
 801b66a:	4420      	add	r0, r4
 801b66c:	b200      	sxth	r0, r0
 801b66e:	1a40      	subs	r0, r0, r1
 801b670:	e7f8      	b.n	801b664 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801b674 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801b674:	4b01      	ldr	r3, [pc, #4]	@ (801b67c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801b676:	2200      	movs	r2, #0
 801b678:	601a      	str	r2, [r3, #0]
 801b67a:	4770      	bx	lr
 801b67c:	2400b8d4 	.word	0x2400b8d4

0801b680 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801b680:	4603      	mov	r3, r0
 801b682:	b1c8      	cbz	r0, 801b6b8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801b684:	0c02      	lsrs	r2, r0, #16
 801b686:	0412      	lsls	r2, r2, #16
 801b688:	b9a2      	cbnz	r2, 801b6b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801b68a:	0403      	lsls	r3, r0, #16
 801b68c:	2010      	movs	r0, #16
 801b68e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801b692:	bf04      	itt	eq
 801b694:	021b      	lsleq	r3, r3, #8
 801b696:	3008      	addeq	r0, #8
 801b698:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801b69c:	bf04      	itt	eq
 801b69e:	011b      	lsleq	r3, r3, #4
 801b6a0:	3004      	addeq	r0, #4
 801b6a2:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801b6a6:	bf04      	itt	eq
 801b6a8:	009b      	lsleq	r3, r3, #2
 801b6aa:	3002      	addeq	r0, #2
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	db04      	blt.n	801b6ba <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801b6b0:	3001      	adds	r0, #1
 801b6b2:	4770      	bx	lr
 801b6b4:	2000      	movs	r0, #0
 801b6b6:	e7ea      	b.n	801b68e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801b6b8:	2020      	movs	r0, #32
 801b6ba:	4770      	bx	lr

0801b6bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c0:	b087      	sub	sp, #28
 801b6c2:	4681      	mov	r9, r0
 801b6c4:	4698      	mov	r8, r3
 801b6c6:	4610      	mov	r0, r2
 801b6c8:	460d      	mov	r5, r1
 801b6ca:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801b6ce:	b981      	cbnz	r1, 801b6f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801b6d0:	b14b      	cbz	r3, 801b6e6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801b6d2:	460b      	mov	r3, r1
 801b6d4:	464a      	mov	r2, r9
 801b6d6:	4641      	mov	r1, r8
 801b6d8:	e9cd 4700 	strd	r4, r7, [sp]
 801b6dc:	f7ff ffee 	bl	801b6bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b6e0:	b007      	add	sp, #28
 801b6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b6ea:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801b6ee:	603b      	str	r3, [r7, #0]
 801b6f0:	e7f6      	b.n	801b6e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b6f2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801b6f6:	d107      	bne.n	801b708 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801b6f8:	fb09 f602 	mul.w	r6, r9, r2
 801b6fc:	fbb6 f0f4 	udiv	r0, r6, r4
 801b700:	fb04 6610 	mls	r6, r4, r0, r6
 801b704:	603e      	str	r6, [r7, #0]
 801b706:	e7eb      	b.n	801b6e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801b708:	2601      	movs	r6, #1
 801b70a:	fa09 fb01 	lsl.w	fp, r9, r1
 801b70e:	408e      	lsls	r6, r1
 801b710:	fbbb f3f4 	udiv	r3, fp, r4
 801b714:	3e01      	subs	r6, #1
 801b716:	9302      	str	r3, [sp, #8]
 801b718:	fb0a f303 	mul.w	r3, sl, r3
 801b71c:	4016      	ands	r6, r2
 801b71e:	9303      	str	r3, [sp, #12]
 801b720:	4630      	mov	r0, r6
 801b722:	f7ff ffad 	bl	801b680 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b726:	464a      	mov	r2, r9
 801b728:	460b      	mov	r3, r1
 801b72a:	4601      	mov	r1, r0
 801b72c:	4630      	mov	r0, r6
 801b72e:	e9cd 4700 	strd	r4, r7, [sp]
 801b732:	f7ff ffc3 	bl	801b6bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b736:	9b02      	ldr	r3, [sp, #8]
 801b738:	4606      	mov	r6, r0
 801b73a:	eb05 0108 	add.w	r1, r5, r8
 801b73e:	fb04 bb13 	mls	fp, r4, r3, fp
 801b742:	4658      	mov	r0, fp
 801b744:	f7ff ff9c 	bl	801b680 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b748:	ab05      	add	r3, sp, #20
 801b74a:	465a      	mov	r2, fp
 801b74c:	e9cd 4300 	strd	r4, r3, [sp]
 801b750:	4603      	mov	r3, r0
 801b752:	4650      	mov	r0, sl
 801b754:	f7ff ffb2 	bl	801b6bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b758:	6839      	ldr	r1, [r7, #0]
 801b75a:	9a05      	ldr	r2, [sp, #20]
 801b75c:	9b03      	ldr	r3, [sp, #12]
 801b75e:	4411      	add	r1, r2
 801b760:	fbb1 f2f4 	udiv	r2, r1, r4
 801b764:	18d3      	adds	r3, r2, r3
 801b766:	fb04 1412 	mls	r4, r4, r2, r1
 801b76a:	441e      	add	r6, r3
 801b76c:	603c      	str	r4, [r7, #0]
 801b76e:	4430      	add	r0, r6
 801b770:	e7b6      	b.n	801b6e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801b772 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801b772:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b776:	b085      	sub	sp, #20
 801b778:	f1b0 0900 	subs.w	r9, r0, #0
 801b77c:	461d      	mov	r5, r3
 801b77e:	4617      	mov	r7, r2
 801b780:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801b782:	bfbb      	ittet	lt
 801b784:	f1c9 0900 	rsblt	r9, r9, #0
 801b788:	f04f 36ff 	movlt.w	r6, #4294967295
 801b78c:	2601      	movge	r6, #1
 801b78e:	6823      	ldrlt	r3, [r4, #0]
 801b790:	bfbc      	itt	lt
 801b792:	425b      	neglt	r3, r3
 801b794:	6023      	strlt	r3, [r4, #0]
 801b796:	2a00      	cmp	r2, #0
 801b798:	da04      	bge.n	801b7a4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801b79a:	6823      	ldr	r3, [r4, #0]
 801b79c:	4257      	negs	r7, r2
 801b79e:	4276      	negs	r6, r6
 801b7a0:	425b      	negs	r3, r3
 801b7a2:	6023      	str	r3, [r4, #0]
 801b7a4:	2d00      	cmp	r5, #0
 801b7a6:	4638      	mov	r0, r7
 801b7a8:	bfba      	itte	lt
 801b7aa:	426d      	neglt	r5, r5
 801b7ac:	f04f 38ff 	movlt.w	r8, #4294967295
 801b7b0:	f04f 0801 	movge.w	r8, #1
 801b7b4:	f7ff ff64 	bl	801b680 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801b7b8:	ab03      	add	r3, sp, #12
 801b7ba:	463a      	mov	r2, r7
 801b7bc:	e9cd 5300 	strd	r5, r3, [sp]
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	4648      	mov	r0, r9
 801b7c4:	f7ff ff7a 	bl	801b6bc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	9a03      	ldr	r2, [sp, #12]
 801b7cc:	4546      	cmp	r6, r8
 801b7ce:	441a      	add	r2, r3
 801b7d0:	fb92 f3f5 	sdiv	r3, r2, r5
 801b7d4:	4418      	add	r0, r3
 801b7d6:	fb05 2313 	mls	r3, r5, r3, r2
 801b7da:	bf18      	it	ne
 801b7dc:	4240      	negne	r0, r0
 801b7de:	1c72      	adds	r2, r6, #1
 801b7e0:	6023      	str	r3, [r4, #0]
 801b7e2:	d105      	bne.n	801b7f0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801b7e4:	2b00      	cmp	r3, #0
 801b7e6:	f1c3 0200 	rsb	r2, r3, #0
 801b7ea:	db0b      	blt.n	801b804 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801b7ec:	6022      	str	r2, [r4, #0]
 801b7ee:	e006      	b.n	801b7fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7f0:	2e01      	cmp	r6, #1
 801b7f2:	d104      	bne.n	801b7fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7f4:	2b00      	cmp	r3, #0
 801b7f6:	da02      	bge.n	801b7fe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801b7f8:	442b      	add	r3, r5
 801b7fa:	3801      	subs	r0, #1
 801b7fc:	6023      	str	r3, [r4, #0]
 801b7fe:	b005      	add	sp, #20
 801b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b804:	3801      	subs	r0, #1
 801b806:	1b52      	subs	r2, r2, r5
 801b808:	e7f0      	b.n	801b7ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801b80c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801b80c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b810:	4c1c      	ldr	r4, [pc, #112]	@ (801b884 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801b812:	4605      	mov	r5, r0
 801b814:	6807      	ldr	r7, [r0, #0]
 801b816:	69a3      	ldr	r3, [r4, #24]
 801b818:	b92b      	cbnz	r3, 801b826 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801b81a:	6840      	ldr	r0, [r0, #4]
 801b81c:	e9c5 7000 	strd	r7, r0, [r5]
 801b820:	b004      	add	sp, #16
 801b822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b826:	f04f 0802 	mov.w	r8, #2
 801b82a:	68a2      	ldr	r2, [r4, #8]
 801b82c:	ae04      	add	r6, sp, #16
 801b82e:	6820      	ldr	r0, [r4, #0]
 801b830:	fb93 f1f8 	sdiv	r1, r3, r8
 801b834:	440a      	add	r2, r1
 801b836:	69e1      	ldr	r1, [r4, #28]
 801b838:	f846 2d04 	str.w	r2, [r6, #-4]!
 801b83c:	463a      	mov	r2, r7
 801b83e:	9600      	str	r6, [sp, #0]
 801b840:	f7ff ff97 	bl	801b772 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b844:	69a3      	ldr	r3, [r4, #24]
 801b846:	4607      	mov	r7, r0
 801b848:	686a      	ldr	r2, [r5, #4]
 801b84a:	6a21      	ldr	r1, [r4, #32]
 801b84c:	9600      	str	r6, [sp, #0]
 801b84e:	6860      	ldr	r0, [r4, #4]
 801b850:	f7ff ff8f 	bl	801b772 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b854:	69a3      	ldr	r3, [r4, #24]
 801b856:	6962      	ldr	r2, [r4, #20]
 801b858:	4407      	add	r7, r0
 801b85a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801b85c:	9600      	str	r6, [sp, #0]
 801b85e:	68e0      	ldr	r0, [r4, #12]
 801b860:	fb93 f8f8 	sdiv	r8, r3, r8
 801b864:	4442      	add	r2, r8
 801b866:	9203      	str	r2, [sp, #12]
 801b868:	682a      	ldr	r2, [r5, #0]
 801b86a:	f7ff ff82 	bl	801b772 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b86e:	4680      	mov	r8, r0
 801b870:	9600      	str	r6, [sp, #0]
 801b872:	69a3      	ldr	r3, [r4, #24]
 801b874:	686a      	ldr	r2, [r5, #4]
 801b876:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801b878:	6920      	ldr	r0, [r4, #16]
 801b87a:	f7ff ff7a 	bl	801b772 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801b87e:	4440      	add	r0, r8
 801b880:	e7cc      	b.n	801b81c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801b882:	bf00      	nop
 801b884:	2400b8d8 	.word	0x2400b8d8

0801b888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801b888:	4b07      	ldr	r3, [pc, #28]	@ (801b8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801b88a:	781b      	ldrb	r3, [r3, #0]
 801b88c:	2b01      	cmp	r3, #1
 801b88e:	d109      	bne.n	801b8a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801b890:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b894:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b898:	8003      	strh	r3, [r0, #0]
 801b89a:	4b04      	ldr	r3, [pc, #16]	@ (801b8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801b89c:	881b      	ldrh	r3, [r3, #0]
 801b89e:	3b01      	subs	r3, #1
 801b8a0:	1a9b      	subs	r3, r3, r2
 801b8a2:	800b      	strh	r3, [r1, #0]
 801b8a4:	4770      	bx	lr
 801b8a6:	bf00      	nop
 801b8a8:	2400b8c4 	.word	0x2400b8c4
 801b8ac:	2400b8c8 	.word	0x2400b8c8

0801b8b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801b8b0:	4b07      	ldr	r3, [pc, #28]	@ (801b8d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801b8b2:	b510      	push	{r4, lr}
 801b8b4:	781b      	ldrb	r3, [r3, #0]
 801b8b6:	2b01      	cmp	r3, #1
 801b8b8:	d108      	bne.n	801b8cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801b8ba:	4b06      	ldr	r3, [pc, #24]	@ (801b8d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801b8bc:	880c      	ldrh	r4, [r1, #0]
 801b8be:	881b      	ldrh	r3, [r3, #0]
 801b8c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	1b1b      	subs	r3, r3, r4
 801b8c8:	8003      	strh	r3, [r0, #0]
 801b8ca:	800a      	strh	r2, [r1, #0]
 801b8cc:	bd10      	pop	{r4, pc}
 801b8ce:	bf00      	nop
 801b8d0:	2400b8c4 	.word	0x2400b8c4
 801b8d4:	2400b8c8 	.word	0x2400b8c8

0801b8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801b8d8:	4b0a      	ldr	r3, [pc, #40]	@ (801b904 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801b8da:	b510      	push	{r4, lr}
 801b8dc:	781b      	ldrb	r3, [r3, #0]
 801b8de:	2b01      	cmp	r3, #1
 801b8e0:	d10e      	bne.n	801b900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801b8e2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801b8e6:	8843      	ldrh	r3, [r0, #2]
 801b8e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b8ec:	18ca      	adds	r2, r1, r3
 801b8ee:	4b06      	ldr	r3, [pc, #24]	@ (801b908 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801b8f0:	8044      	strh	r4, [r0, #2]
 801b8f2:	881b      	ldrh	r3, [r3, #0]
 801b8f4:	1a9b      	subs	r3, r3, r2
 801b8f6:	8003      	strh	r3, [r0, #0]
 801b8f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b8fc:	8081      	strh	r1, [r0, #4]
 801b8fe:	80c3      	strh	r3, [r0, #6]
 801b900:	bd10      	pop	{r4, pc}
 801b902:	bf00      	nop
 801b904:	2400b8c4 	.word	0x2400b8c4
 801b908:	2400b8c8 	.word	0x2400b8c8

0801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b90c:	4b08      	ldr	r3, [pc, #32]	@ (801b930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b90e:	781b      	ldrb	r3, [r3, #0]
 801b910:	2b01      	cmp	r3, #1
 801b912:	d10c      	bne.n	801b92e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b914:	8803      	ldrh	r3, [r0, #0]
 801b916:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b91a:	8842      	ldrh	r2, [r0, #2]
 801b91c:	8002      	strh	r2, [r0, #0]
 801b91e:	185a      	adds	r2, r3, r1
 801b920:	4b04      	ldr	r3, [pc, #16]	@ (801b934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b922:	881b      	ldrh	r3, [r3, #0]
 801b924:	1a9b      	subs	r3, r3, r2
 801b926:	8043      	strh	r3, [r0, #2]
 801b928:	88c3      	ldrh	r3, [r0, #6]
 801b92a:	80c1      	strh	r1, [r0, #6]
 801b92c:	8083      	strh	r3, [r0, #4]
 801b92e:	4770      	bx	lr
 801b930:	2400b8c4 	.word	0x2400b8c4
 801b934:	2400b8c8 	.word	0x2400b8c8

0801b938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b938:	4b07      	ldr	r3, [pc, #28]	@ (801b958 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b93a:	b510      	push	{r4, lr}
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	2b01      	cmp	r3, #1
 801b940:	d108      	bne.n	801b954 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b942:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b946:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b94a:	8003      	strh	r3, [r0, #0]
 801b94c:	8893      	ldrh	r3, [r2, #4]
 801b94e:	3b01      	subs	r3, #1
 801b950:	1b1b      	subs	r3, r3, r4
 801b952:	800b      	strh	r3, [r1, #0]
 801b954:	bd10      	pop	{r4, pc}
 801b956:	bf00      	nop
 801b958:	2400b8c4 	.word	0x2400b8c4

0801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b95c:	4b0a      	ldr	r3, [pc, #40]	@ (801b988 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b95e:	460a      	mov	r2, r1
 801b960:	b510      	push	{r4, lr}
 801b962:	781b      	ldrb	r3, [r3, #0]
 801b964:	2b01      	cmp	r3, #1
 801b966:	d10d      	bne.n	801b984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b968:	8881      	ldrh	r1, [r0, #4]
 801b96a:	8803      	ldrh	r3, [r0, #0]
 801b96c:	440b      	add	r3, r1
 801b96e:	4601      	mov	r1, r0
 801b970:	3b01      	subs	r3, #1
 801b972:	f821 3b02 	strh.w	r3, [r1], #2
 801b976:	f7ff ffdf 	bl	801b938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b97a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b97e:	88c2      	ldrh	r2, [r0, #6]
 801b980:	80c3      	strh	r3, [r0, #6]
 801b982:	8082      	strh	r2, [r0, #4]
 801b984:	bd10      	pop	{r4, pc}
 801b986:	bf00      	nop
 801b988:	2400b8c4 	.word	0x2400b8c4

0801b98c <_ZN8touchgfx11Application13requestRedrawEv>:
 801b98c:	4b06      	ldr	r3, [pc, #24]	@ (801b9a8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b98e:	2100      	movs	r1, #0
 801b990:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b994:	4b05      	ldr	r3, [pc, #20]	@ (801b9ac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b996:	f8c0 112c 	str.w	r1, [r0, #300]	@ 0x12c
 801b99a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b99e:	f8a0 2130 	strh.w	r2, [r0, #304]	@ 0x130
 801b9a2:	f8a0 3132 	strh.w	r3, [r0, #306]	@ 0x132
 801b9a6:	4770      	bx	lr
 801b9a8:	2400b8c0 	.word	0x2400b8c0
 801b9ac:	2400b8c2 	.word	0x2400b8c2

0801b9b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b9b0:	4b03      	ldr	r3, [pc, #12]	@ (801b9c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b9b2:	6818      	ldr	r0, [r3, #0]
 801b9b4:	b110      	cbz	r0, 801b9bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b9b6:	6803      	ldr	r3, [r0, #0]
 801b9b8:	699b      	ldr	r3, [r3, #24]
 801b9ba:	4718      	bx	r3
 801b9bc:	4770      	bx	lr
 801b9be:	bf00      	nop
 801b9c0:	2400b908 	.word	0x2400b908

0801b9c4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b9c4:	4770      	bx	lr
	...

0801b9c8 <_ZN8touchgfx11Application4drawEv>:
 801b9c8:	4b09      	ldr	r3, [pc, #36]	@ (801b9f0 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b9ca:	b507      	push	{r0, r1, r2, lr}
 801b9cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b9d0:	2100      	movs	r1, #0
 801b9d2:	4b08      	ldr	r3, [pc, #32]	@ (801b9f4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b9d4:	9100      	str	r1, [sp, #0]
 801b9d6:	4669      	mov	r1, sp
 801b9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b9e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b9e4:	6803      	ldr	r3, [r0, #0]
 801b9e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b9e8:	4798      	blx	r3
 801b9ea:	b003      	add	sp, #12
 801b9ec:	f85d fb04 	ldr.w	pc, [sp], #4
 801b9f0:	2400b8c0 	.word	0x2400b8c0
 801b9f4:	2400b8c2 	.word	0x2400b8c2

0801b9f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b9f8:	4b03      	ldr	r3, [pc, #12]	@ (801ba08 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b9fa:	6818      	ldr	r0, [r3, #0]
 801b9fc:	b110      	cbz	r0, 801ba04 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b9fe:	6803      	ldr	r3, [r0, #0]
 801ba00:	69db      	ldr	r3, [r3, #28]
 801ba02:	4718      	bx	r3
 801ba04:	4770      	bx	lr
 801ba06:	bf00      	nop
 801ba08:	2400b908 	.word	0x2400b908

0801ba0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ba0c:	4b03      	ldr	r3, [pc, #12]	@ (801ba1c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ba0e:	6818      	ldr	r0, [r3, #0]
 801ba10:	b110      	cbz	r0, 801ba18 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ba12:	6803      	ldr	r3, [r0, #0]
 801ba14:	6a1b      	ldr	r3, [r3, #32]
 801ba16:	4718      	bx	r3
 801ba18:	4770      	bx	lr
 801ba1a:	bf00      	nop
 801ba1c:	2400b908 	.word	0x2400b908

0801ba20 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ba20:	4b03      	ldr	r3, [pc, #12]	@ (801ba30 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ba22:	6818      	ldr	r0, [r3, #0]
 801ba24:	b110      	cbz	r0, 801ba2c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ba26:	6803      	ldr	r3, [r0, #0]
 801ba28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba2a:	4718      	bx	r3
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop
 801ba30:	2400b908 	.word	0x2400b908

0801ba34 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ba34:	b570      	push	{r4, r5, r6, lr}
 801ba36:	4d38      	ldr	r5, [pc, #224]	@ (801bb18 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801ba38:	4604      	mov	r4, r0
 801ba3a:	6828      	ldr	r0, [r5, #0]
 801ba3c:	b140      	cbz	r0, 801ba50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ba3e:	7a03      	ldrb	r3, [r0, #8]
 801ba40:	b933      	cbnz	r3, 801ba50 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ba42:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801ba46:	6803      	ldr	r3, [r0, #0]
 801ba48:	689b      	ldr	r3, [r3, #8]
 801ba4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba4e:	4718      	bx	r3
 801ba50:	f894 3135 	ldrb.w	r3, [r4, #309]	@ 0x135
 801ba54:	b97b      	cbnz	r3, 801ba76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba56:	b170      	cbz	r0, 801ba76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba58:	7a03      	ldrb	r3, [r0, #8]
 801ba5a:	b163      	cbz	r3, 801ba76 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ba5c:	4b2f      	ldr	r3, [pc, #188]	@ (801bb1c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801ba5e:	6818      	ldr	r0, [r3, #0]
 801ba60:	b110      	cbz	r0, 801ba68 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ba62:	6803      	ldr	r3, [r0, #0]
 801ba64:	691b      	ldr	r3, [r3, #16]
 801ba66:	4798      	blx	r3
 801ba68:	6828      	ldr	r0, [r5, #0]
 801ba6a:	6803      	ldr	r3, [r0, #0]
 801ba6c:	68db      	ldr	r3, [r3, #12]
 801ba6e:	4798      	blx	r3
 801ba70:	2301      	movs	r3, #1
 801ba72:	f884 3135 	strb.w	r3, [r4, #309]	@ 0x135
 801ba76:	2500      	movs	r5, #0
 801ba78:	f8b4 0084 	ldrh.w	r0, [r4, #132]	@ 0x84
 801ba7c:	42a8      	cmp	r0, r5
 801ba7e:	dd0c      	ble.n	801ba9a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ba80:	1963      	adds	r3, r4, r5
 801ba82:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 801ba86:	b132      	cbz	r2, 801ba96 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ba88:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ba8c:	4413      	add	r3, r2
 801ba8e:	6858      	ldr	r0, [r3, #4]
 801ba90:	6803      	ldr	r3, [r0, #0]
 801ba92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ba94:	4798      	blx	r3
 801ba96:	3501      	adds	r5, #1
 801ba98:	e7ee      	b.n	801ba78 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ba9a:	2300      	movs	r3, #0
 801ba9c:	461a      	mov	r2, r3
 801ba9e:	4298      	cmp	r0, r3
 801baa0:	d10f      	bne.n	801bac2 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801baa2:	1d25      	adds	r5, r4, #4
 801baa4:	f8b4 1084 	ldrh.w	r1, [r4, #132]	@ 0x84
 801baa8:	4291      	cmp	r1, r2
 801baaa:	dd2d      	ble.n	801bb08 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801baac:	1e48      	subs	r0, r1, #1
 801baae:	b280      	uxth	r0, r0
 801bab0:	4288      	cmp	r0, r1
 801bab2:	d31a      	bcc.n	801baea <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801bab4:	4b1a      	ldr	r3, [pc, #104]	@ (801bb20 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801bab6:	f240 11a9 	movw	r1, #425	@ 0x1a9
 801baba:	4a1a      	ldr	r2, [pc, #104]	@ (801bb24 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801babc:	481a      	ldr	r0, [pc, #104]	@ (801bb28 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801babe:	f00f fa53 	bl	802af68 <__assert_func>
 801bac2:	18e1      	adds	r1, r4, r3
 801bac4:	f891 5088 	ldrb.w	r5, [r1, #136]	@ 0x88
 801bac8:	b16d      	cbz	r5, 801bae6 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801baca:	429a      	cmp	r2, r3
 801bacc:	d00a      	beq.n	801bae4 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801bace:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801bad2:	4431      	add	r1, r6
 801bad4:	684e      	ldr	r6, [r1, #4]
 801bad6:	b291      	uxth	r1, r2
 801bad8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801badc:	604e      	str	r6, [r1, #4]
 801bade:	18a1      	adds	r1, r4, r2
 801bae0:	f881 5088 	strb.w	r5, [r1, #136]	@ 0x88
 801bae4:	3201      	adds	r2, #1
 801bae6:	3301      	adds	r3, #1
 801bae8:	e7d9      	b.n	801ba9e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801baea:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801baee:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801baf2:	3304      	adds	r3, #4
 801baf4:	428b      	cmp	r3, r1
 801baf6:	d004      	beq.n	801bb02 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801baf8:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801bafc:	f843 6c04 	str.w	r6, [r3, #-4]
 801bb00:	e7f8      	b.n	801baf4 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801bb02:	f8a4 0084 	strh.w	r0, [r4, #132]	@ 0x84
 801bb06:	e7cd      	b.n	801baa4 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801bb08:	4b04      	ldr	r3, [pc, #16]	@ (801bb1c <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801bb0a:	6818      	ldr	r0, [r3, #0]
 801bb0c:	b110      	cbz	r0, 801bb14 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801bb0e:	6803      	ldr	r3, [r0, #0]
 801bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bb12:	e79a      	b.n	801ba4a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801bb14:	bd70      	pop	{r4, r5, r6, pc}
 801bb16:	bf00      	nop
 801bb18:	2400b90c 	.word	0x2400b90c
 801bb1c:	2400b908 	.word	0x2400b908
 801bb20:	0802f1d0 	.word	0x0802f1d0
 801bb24:	0802f429 	.word	0x0802f429
 801bb28:	0802f1de 	.word	0x0802f1de

0801bb2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801bb2c:	b570      	push	{r4, r5, r6, lr}
 801bb2e:	4606      	mov	r6, r0
 801bb30:	460c      	mov	r4, r1
 801bb32:	b929      	cbnz	r1, 801bb40 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801bb34:	4b0c      	ldr	r3, [pc, #48]	@ (801bb68 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801bb36:	2167      	movs	r1, #103	@ 0x67
 801bb38:	4a0c      	ldr	r2, [pc, #48]	@ (801bb6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801bb3a:	480d      	ldr	r0, [pc, #52]	@ (801bb70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801bb3c:	f00f fa14 	bl	802af68 <__assert_func>
 801bb40:	2300      	movs	r3, #0
 801bb42:	4d0c      	ldr	r5, [pc, #48]	@ (801bb74 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801bb44:	f8a0 3084 	strh.w	r3, [r0, #132]	@ 0x84
 801bb48:	6828      	ldr	r0, [r5, #0]
 801bb4a:	b110      	cbz	r0, 801bb52 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801bb4c:	6803      	ldr	r3, [r0, #0]
 801bb4e:	695b      	ldr	r3, [r3, #20]
 801bb50:	4798      	blx	r3
 801bb52:	602c      	str	r4, [r5, #0]
 801bb54:	4620      	mov	r0, r4
 801bb56:	6823      	ldr	r3, [r4, #0]
 801bb58:	68db      	ldr	r3, [r3, #12]
 801bb5a:	4798      	blx	r3
 801bb5c:	6833      	ldr	r3, [r6, #0]
 801bb5e:	4630      	mov	r0, r6
 801bb60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bb66:	4718      	bx	r3
 801bb68:	0802f19c 	.word	0x0802f19c
 801bb6c:	0802f2a4 	.word	0x0802f2a4
 801bb70:	0802f1a6 	.word	0x0802f1a6
 801bb74:	2400b908 	.word	0x2400b908

0801bb78 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801bb78:	b510      	push	{r4, lr}
 801bb7a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bb7e:	888a      	ldrh	r2, [r1, #4]
 801bb80:	f9b0 3000 	ldrsh.w	r3, [r0]
 801bb84:	4422      	add	r2, r4
 801bb86:	b212      	sxth	r2, r2
 801bb88:	4293      	cmp	r3, r2
 801bb8a:	da15      	bge.n	801bbb8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb8c:	8882      	ldrh	r2, [r0, #4]
 801bb8e:	4413      	add	r3, r2
 801bb90:	b21b      	sxth	r3, r3
 801bb92:	429c      	cmp	r4, r3
 801bb94:	da10      	bge.n	801bbb8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bb96:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bb9a:	88c9      	ldrh	r1, [r1, #6]
 801bb9c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801bba0:	4419      	add	r1, r3
 801bba2:	b209      	sxth	r1, r1
 801bba4:	428a      	cmp	r2, r1
 801bba6:	da07      	bge.n	801bbb8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801bba8:	88c0      	ldrh	r0, [r0, #6]
 801bbaa:	4410      	add	r0, r2
 801bbac:	b200      	sxth	r0, r0
 801bbae:	4283      	cmp	r3, r0
 801bbb0:	bfac      	ite	ge
 801bbb2:	2000      	movge	r0, #0
 801bbb4:	2001      	movlt	r0, #1
 801bbb6:	bd10      	pop	{r4, pc}
 801bbb8:	2000      	movs	r0, #0
 801bbba:	e7fc      	b.n	801bbb6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801bbbc <_ZNK8touchgfx4Rect8includesERKS0_>:
 801bbbc:	b570      	push	{r4, r5, r6, lr}
 801bbbe:	f9b1 4000 	ldrsh.w	r4, [r1]
 801bbc2:	f9b0 5000 	ldrsh.w	r5, [r0]
 801bbc6:	42ac      	cmp	r4, r5
 801bbc8:	db18      	blt.n	801bbfc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bbca:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801bbce:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	db12      	blt.n	801bbfc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bbd6:	8886      	ldrh	r6, [r0, #4]
 801bbd8:	4435      	add	r5, r6
 801bbda:	888e      	ldrh	r6, [r1, #4]
 801bbdc:	4434      	add	r4, r6
 801bbde:	b22d      	sxth	r5, r5
 801bbe0:	b224      	sxth	r4, r4
 801bbe2:	42a5      	cmp	r5, r4
 801bbe4:	db0a      	blt.n	801bbfc <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801bbe6:	88c0      	ldrh	r0, [r0, #6]
 801bbe8:	4418      	add	r0, r3
 801bbea:	88cb      	ldrh	r3, [r1, #6]
 801bbec:	441a      	add	r2, r3
 801bbee:	b200      	sxth	r0, r0
 801bbf0:	b212      	sxth	r2, r2
 801bbf2:	4290      	cmp	r0, r2
 801bbf4:	bfb4      	ite	lt
 801bbf6:	2000      	movlt	r0, #0
 801bbf8:	2001      	movge	r0, #1
 801bbfa:	bd70      	pop	{r4, r5, r6, pc}
 801bbfc:	2000      	movs	r0, #0
 801bbfe:	e7fc      	b.n	801bbfa <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801bc00 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801bc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc02:	4604      	mov	r4, r0
 801bc04:	4608      	mov	r0, r1
 801bc06:	460d      	mov	r5, r1
 801bc08:	f7fc fb11 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc0c:	b978      	cbnz	r0, 801bc2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f7fc fb0d 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc14:	f9b5 6000 	ldrsh.w	r6, [r5]
 801bc18:	b150      	cbz	r0, 801bc30 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801bc1a:	8026      	strh	r6, [r4, #0]
 801bc1c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bc20:	8063      	strh	r3, [r4, #2]
 801bc22:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801bc26:	80a3      	strh	r3, [r4, #4]
 801bc28:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bc2c:	80e3      	strh	r3, [r4, #6]
 801bc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc30:	f9b4 1000 	ldrsh.w	r1, [r4]
 801bc34:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801bc38:	42b1      	cmp	r1, r6
 801bc3a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bc3e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801bc42:	460f      	mov	r7, r1
 801bc44:	88ed      	ldrh	r5, [r5, #6]
 801bc46:	bfa8      	it	ge
 801bc48:	4637      	movge	r7, r6
 801bc4a:	4293      	cmp	r3, r2
 801bc4c:	4618      	mov	r0, r3
 801bc4e:	4466      	add	r6, ip
 801bc50:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801bc54:	bfa8      	it	ge
 801bc56:	4610      	movge	r0, r2
 801bc58:	442a      	add	r2, r5
 801bc5a:	88e5      	ldrh	r5, [r4, #6]
 801bc5c:	4461      	add	r1, ip
 801bc5e:	b236      	sxth	r6, r6
 801bc60:	8027      	strh	r7, [r4, #0]
 801bc62:	442b      	add	r3, r5
 801bc64:	b209      	sxth	r1, r1
 801bc66:	b212      	sxth	r2, r2
 801bc68:	8060      	strh	r0, [r4, #2]
 801bc6a:	b21b      	sxth	r3, r3
 801bc6c:	428e      	cmp	r6, r1
 801bc6e:	bfac      	ite	ge
 801bc70:	ebc7 0106 	rsbge	r1, r7, r6
 801bc74:	ebc7 0101 	rsblt	r1, r7, r1
 801bc78:	429a      	cmp	r2, r3
 801bc7a:	bfac      	ite	ge
 801bc7c:	ebc0 0202 	rsbge	r2, r0, r2
 801bc80:	ebc0 0203 	rsblt	r2, r0, r3
 801bc84:	80a1      	strh	r1, [r4, #4]
 801bc86:	80e2      	strh	r2, [r4, #6]
 801bc88:	e7d1      	b.n	801bc2e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801bc8c <_ZN8touchgfx11Application11getInstanceEv>:
 801bc8c:	4b01      	ldr	r3, [pc, #4]	@ (801bc94 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801bc8e:	6818      	ldr	r0, [r3, #0]
 801bc90:	4770      	bx	lr
 801bc92:	bf00      	nop
 801bc94:	2400b918 	.word	0x2400b918

0801bc98 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801bc98:	b570      	push	{r4, r5, r6, lr}
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	@ 0x84
 801bca0:	1d04      	adds	r4, r0, #4
 801bca2:	b295      	uxth	r5, r2
 801bca4:	42ab      	cmp	r3, r5
 801bca6:	d90e      	bls.n	801bcc6 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2e>
 801bca8:	f854 6b04 	ldr.w	r6, [r4], #4
 801bcac:	4615      	mov	r5, r2
 801bcae:	3201      	adds	r2, #1
 801bcb0:	428e      	cmp	r6, r1
 801bcb2:	d1f6      	bne.n	801bca2 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0xa>
 801bcb4:	4428      	add	r0, r5
 801bcb6:	f890 3088 	ldrb.w	r3, [r0, #136]	@ 0x88
 801bcba:	2bff      	cmp	r3, #255	@ 0xff
 801bcbc:	d002      	beq.n	801bcc4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801bcbe:	3301      	adds	r3, #1
 801bcc0:	f880 3088 	strb.w	r3, [r0, #136]	@ 0x88
 801bcc4:	bd70      	pop	{r4, r5, r6, pc}
 801bcc6:	2b20      	cmp	r3, #32
 801bcc8:	d106      	bne.n	801bcd8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x40>
 801bcca:	4b09      	ldr	r3, [pc, #36]	@ (801bcf0 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801bccc:	f240 215f 	movw	r1, #607	@ 0x25f
 801bcd0:	4a08      	ldr	r2, [pc, #32]	@ (801bcf4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801bcd2:	4809      	ldr	r0, [pc, #36]	@ (801bcf8 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x60>)
 801bcd4:	f00f f948 	bl	802af68 <__assert_func>
 801bcd8:	18c2      	adds	r2, r0, r3
 801bcda:	2401      	movs	r4, #1
 801bcdc:	f882 4088 	strb.w	r4, [r2, #136]	@ 0x88
 801bce0:	191a      	adds	r2, r3, r4
 801bce2:	f8a0 2084 	strh.w	r2, [r0, #132]	@ 0x84
 801bce6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801bcea:	6041      	str	r1, [r0, #4]
 801bcec:	e7ea      	b.n	801bcc4 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801bcee:	bf00      	nop
 801bcf0:	0802f207 	.word	0x0802f207
 801bcf4:	0802f2e8 	.word	0x0802f2e8
 801bcf8:	0802f1a6 	.word	0x0802f1a6

0801bcfc <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801bcfc:	b570      	push	{r4, r5, r6, lr}
 801bcfe:	2300      	movs	r3, #0
 801bd00:	f8b0 6084 	ldrh.w	r6, [r0, #132]	@ 0x84
 801bd04:	1d04      	adds	r4, r0, #4
 801bd06:	b29a      	uxth	r2, r3
 801bd08:	4296      	cmp	r6, r2
 801bd0a:	d90a      	bls.n	801bd22 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x26>
 801bd0c:	f854 2b04 	ldr.w	r2, [r4], #4
 801bd10:	428a      	cmp	r2, r1
 801bd12:	d107      	bne.n	801bd24 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bd14:	18c5      	adds	r5, r0, r3
 801bd16:	f895 2088 	ldrb.w	r2, [r5, #136]	@ 0x88
 801bd1a:	b11a      	cbz	r2, 801bd24 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801bd1c:	3a01      	subs	r2, #1
 801bd1e:	f885 2088 	strb.w	r2, [r5, #136]	@ 0x88
 801bd22:	bd70      	pop	{r4, r5, r6, pc}
 801bd24:	3301      	adds	r3, #1
 801bd26:	e7ee      	b.n	801bd06 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0xa>

0801bd28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801bd28:	2300      	movs	r3, #0
 801bd2a:	f100 0288 	add.w	r2, r0, #136	@ 0x88
 801bd2e:	30a8      	adds	r0, #168	@ 0xa8
 801bd30:	f820 3c24 	strh.w	r3, [r0, #-36]
 801bd34:	f802 3b01 	strb.w	r3, [r2], #1
 801bd38:	4282      	cmp	r2, r0
 801bd3a:	d1fb      	bne.n	801bd34 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801bd3c:	4770      	bx	lr

0801bd3e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801bd3e:	4603      	mov	r3, r0
 801bd40:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801bd44:	2200      	movs	r2, #0
 801bd46:	801a      	strh	r2, [r3, #0]
 801bd48:	3308      	adds	r3, #8
 801bd4a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801bd4e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801bd52:	f823 2c02 	strh.w	r2, [r3, #-2]
 801bd56:	428b      	cmp	r3, r1
 801bd58:	d1f5      	bne.n	801bd46 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801bd5a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801bd5e:	4770      	bx	lr

0801bd60 <_ZN8touchgfx11ApplicationC1Ev>:
 801bd60:	b570      	push	{r4, r5, r6, lr}
 801bd62:	4b1a      	ldr	r3, [pc, #104]	@ (801bdcc <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801bd64:	2500      	movs	r5, #0
 801bd66:	4604      	mov	r4, r0
 801bd68:	30a8      	adds	r0, #168	@ 0xa8
 801bd6a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801bd6e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801bd72:	f7ff ffe4 	bl	801bd3e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd76:	f104 00ea 	add.w	r0, r4, #234	@ 0xea
 801bd7a:	f7ff ffe0 	bl	801bd3e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bd7e:	f8a4 512c 	strh.w	r5, [r4, #300]	@ 0x12c
 801bd82:	f8a4 512e 	strh.w	r5, [r4, #302]	@ 0x12e
 801bd86:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801bd8a:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801bd8e:	f884 5134 	strb.w	r5, [r4, #308]	@ 0x134
 801bd92:	f884 5135 	strb.w	r5, [r4, #309]	@ 0x135
 801bd96:	490e      	ldr	r1, [pc, #56]	@ (801bdd0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801bd98:	480e      	ldr	r0, [pc, #56]	@ (801bdd4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801bd9a:	f00e ffa9 	bl	802acf0 <CRC_Lock>
 801bd9e:	4e0e      	ldr	r6, [pc, #56]	@ (801bdd8 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801bda0:	4b0e      	ldr	r3, [pc, #56]	@ (801bddc <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801bda2:	b158      	cbz	r0, 801bdbc <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801bda4:	801d      	strh	r5, [r3, #0]
 801bda6:	2300      	movs	r3, #0
 801bda8:	4a0d      	ldr	r2, [pc, #52]	@ (801bde0 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801bdaa:	4620      	mov	r0, r4
 801bdac:	6013      	str	r3, [r2, #0]
 801bdae:	4a0d      	ldr	r2, [pc, #52]	@ (801bde4 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801bdb0:	6033      	str	r3, [r6, #0]
 801bdb2:	6013      	str	r3, [r2, #0]
 801bdb4:	f7ff ffb8 	bl	801bd28 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801bdb8:	4620      	mov	r0, r4
 801bdba:	bd70      	pop	{r4, r5, r6, pc}
 801bdbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bdc0:	2002      	movs	r0, #2
 801bdc2:	801a      	strh	r2, [r3, #0]
 801bdc4:	6030      	str	r0, [r6, #0]
 801bdc6:	f001 fa81 	bl	801d2cc <_ZN8touchgfx6Screen4drawEv>
 801bdca:	e7ec      	b.n	801bda6 <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801bdcc:	0802f268 	.word	0x0802f268
 801bdd0:	b5e8b5cd 	.word	0xb5e8b5cd
 801bdd4:	f407a5c2 	.word	0xf407a5c2
 801bdd8:	2400b908 	.word	0x2400b908
 801bddc:	24000056 	.word	0x24000056
 801bde0:	2400b918 	.word	0x2400b918
 801bde4:	2400b90c 	.word	0x2400b90c

0801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801bde8:	b510      	push	{r4, lr}
 801bdea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801bdee:	428b      	cmp	r3, r1
 801bdf0:	d806      	bhi.n	801be00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801bdf2:	4b0b      	ldr	r3, [pc, #44]	@ (801be20 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801bdf4:	f44f 71de 	mov.w	r1, #444	@ 0x1bc
 801bdf8:	4a0a      	ldr	r2, [pc, #40]	@ (801be24 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801bdfa:	480b      	ldr	r0, [pc, #44]	@ (801be28 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801bdfc:	f00f f8b4 	bl	802af68 <__assert_func>
 801be00:	3b01      	subs	r3, #1
 801be02:	b29b      	uxth	r3, r3
 801be04:	428b      	cmp	r3, r1
 801be06:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801be0a:	d908      	bls.n	801be1e <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801be0c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801be10:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801be14:	681a      	ldr	r2, [r3, #0]
 801be16:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801be1a:	685a      	ldr	r2, [r3, #4]
 801be1c:	6062      	str	r2, [r4, #4]
 801be1e:	bd10      	pop	{r4, pc}
 801be20:	0802f1d0 	.word	0x0802f1d0
 801be24:	0802f32d 	.word	0x0802f32d
 801be28:	0802f1de 	.word	0x0802f1de

0801be2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801be2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801be2e:	466b      	mov	r3, sp
 801be30:	4604      	mov	r4, r0
 801be32:	e883 0006 	stmia.w	r3, {r1, r2}
 801be36:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 801be3a:	2a07      	cmp	r2, #7
 801be3c:	d906      	bls.n	801be4c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801be3e:	4b09      	ldr	r3, [pc, #36]	@ (801be64 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801be40:	f44f 71c1 	mov.w	r1, #386	@ 0x182
 801be44:	4a08      	ldr	r2, [pc, #32]	@ (801be68 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801be46:	4809      	ldr	r0, [pc, #36]	@ (801be6c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801be48:	f00f f88e 	bl	802af68 <__assert_func>
 801be4c:	1c51      	adds	r1, r2, #1
 801be4e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801be52:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801be56:	cb03      	ldmia	r3!, {r0, r1}
 801be58:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801be5c:	6069      	str	r1, [r5, #4]
 801be5e:	b003      	add	sp, #12
 801be60:	bd30      	pop	{r4, r5, pc}
 801be62:	bf00      	nop
 801be64:	0802f22f 	.word	0x0802f22f
 801be68:	0802f3c3 	.word	0x0802f3c3
 801be6c:	0802f1de 	.word	0x0802f1de

0801be70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801be70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be74:	b08d      	sub	sp, #52	@ 0x34
 801be76:	4683      	mov	fp, r0
 801be78:	ac08      	add	r4, sp, #32
 801be7a:	4620      	mov	r0, r4
 801be7c:	e884 0006 	stmia.w	r4, {r1, r2}
 801be80:	f7fc f9d5 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801be84:	2800      	cmp	r0, #0
 801be86:	d16a      	bne.n	801bf5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801be88:	9402      	str	r4, [sp, #8]
 801be8a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801be8e:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801be92:	2400      	movs	r4, #0
 801be94:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801be98:	9301      	str	r3, [sp, #4]
 801be9a:	36a0      	adds	r6, #160	@ 0xa0
 801be9c:	42a5      	cmp	r5, r4
 801be9e:	d00d      	beq.n	801bebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801bea0:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801bea4:	9802      	ldr	r0, [sp, #8]
 801bea6:	f7ff fe89 	bl	801bbbc <_ZNK8touchgfx4Rect8includesERKS0_>
 801beaa:	b128      	cbz	r0, 801beb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801beac:	1e69      	subs	r1, r5, #1
 801beae:	9801      	ldr	r0, [sp, #4]
 801beb0:	1b09      	subs	r1, r1, r4
 801beb2:	b289      	uxth	r1, r1
 801beb4:	f7ff ff98 	bl	801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801beb8:	3401      	adds	r4, #1
 801beba:	e7ef      	b.n	801be9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bebc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801bec0:	1e7b      	subs	r3, r7, #1
 801bec2:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801bec6:	9703      	str	r7, [sp, #12]
 801bec8:	9300      	str	r3, [sp, #0]
 801beca:	2400      	movs	r4, #0
 801becc:	4655      	mov	r5, sl
 801bece:	9704      	str	r7, [sp, #16]
 801bed0:	4626      	mov	r6, r4
 801bed2:	9b04      	ldr	r3, [sp, #16]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d078      	beq.n	801bfca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801bed8:	9902      	ldr	r1, [sp, #8]
 801beda:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801bede:	f7ff fe4b 	bl	801bb78 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bee2:	b360      	cbz	r0, 801bf3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801bee4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801bee8:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	@ 0xa0
 801beec:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	@ 0x22
 801bef0:	45e6      	cmp	lr, ip
 801bef2:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	@ 0xa2
 801bef6:	db35      	blt.n	801bf64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801bef8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801befc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801bf00:	4472      	add	r2, lr
 801bf02:	4463      	add	r3, ip
 801bf04:	b212      	sxth	r2, r2
 801bf06:	b21b      	sxth	r3, r3
 801bf08:	429a      	cmp	r2, r3
 801bf0a:	dc2b      	bgt.n	801bf64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801bf0c:	fa1f f288 	uxth.w	r2, r8
 801bf10:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801bf14:	45c1      	cmp	r9, r8
 801bf16:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801bf1a:	4413      	add	r3, r2
 801bf1c:	fa1f fc89 	uxth.w	ip, r9
 801bf20:	b29b      	uxth	r3, r3
 801bf22:	fa0f fe83 	sxth.w	lr, r3
 801bf26:	db0f      	blt.n	801bf48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801bf28:	eba3 030c 	sub.w	r3, r3, ip
 801bf2c:	1ac9      	subs	r1, r1, r3
 801bf2e:	b209      	sxth	r1, r1
 801bf30:	2900      	cmp	r1, #0
 801bf32:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801bf36:	dd12      	ble.n	801bf5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bf38:	f8ad e022 	strh.w	lr, [sp, #34]	@ 0x22
 801bf3c:	4604      	mov	r4, r0
 801bf3e:	9b04      	ldr	r3, [sp, #16]
 801bf40:	3d08      	subs	r5, #8
 801bf42:	3b01      	subs	r3, #1
 801bf44:	9304      	str	r3, [sp, #16]
 801bf46:	e7c4      	b.n	801bed2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801bf48:	4461      	add	r1, ip
 801bf4a:	b209      	sxth	r1, r1
 801bf4c:	4571      	cmp	r1, lr
 801bf4e:	dc3a      	bgt.n	801bfc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf50:	eba2 020c 	sub.w	r2, r2, ip
 801bf54:	b212      	sxth	r2, r2
 801bf56:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801bf5a:	2a00      	cmp	r2, #0
 801bf5c:	dcee      	bgt.n	801bf3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801bf5e:	b00d      	add	sp, #52	@ 0x34
 801bf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf64:	45c1      	cmp	r9, r8
 801bf66:	db2e      	blt.n	801bfc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf68:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 801bf6c:	4499      	add	r9, r3
 801bf6e:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	@ 0xa6
 801bf72:	4498      	add	r8, r3
 801bf74:	fa0f f989 	sxth.w	r9, r9
 801bf78:	fa0f f888 	sxth.w	r8, r8
 801bf7c:	45c1      	cmp	r9, r8
 801bf7e:	dc22      	bgt.n	801bfc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bf80:	fa1f f28c 	uxth.w	r2, ip
 801bf84:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	@ 0xa4
 801bf88:	45e6      	cmp	lr, ip
 801bf8a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801bf8e:	4413      	add	r3, r2
 801bf90:	fa1f f88e 	uxth.w	r8, lr
 801bf94:	b29b      	uxth	r3, r3
 801bf96:	fa0f f983 	sxth.w	r9, r3
 801bf9a:	db0a      	blt.n	801bfb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801bf9c:	eba3 0308 	sub.w	r3, r3, r8
 801bfa0:	1ac9      	subs	r1, r1, r3
 801bfa2:	b209      	sxth	r1, r1
 801bfa4:	2900      	cmp	r1, #0
 801bfa6:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801bfaa:	ddd8      	ble.n	801bf5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801bfac:	f8ad 9020 	strh.w	r9, [sp, #32]
 801bfb0:	e7c4      	b.n	801bf3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801bfb2:	4441      	add	r1, r8
 801bfb4:	b209      	sxth	r1, r1
 801bfb6:	4549      	cmp	r1, r9
 801bfb8:	dc05      	bgt.n	801bfc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801bfba:	eba2 0208 	sub.w	r2, r2, r8
 801bfbe:	b212      	sxth	r2, r2
 801bfc0:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 801bfc4:	e7c9      	b.n	801bf5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801bfc6:	4606      	mov	r6, r0
 801bfc8:	e7b9      	b.n	801bf3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801bfca:	2c00      	cmp	r4, #0
 801bfcc:	f47f af7d 	bne.w	801beca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801bfd0:	2e00      	cmp	r6, #0
 801bfd2:	f000 81dc 	beq.w	801c38e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801bfd6:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	@ 0x22
 801bfda:	4655      	mov	r5, sl
 801bfdc:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801bfe0:	b2b9      	uxth	r1, r7
 801bfe2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 801bfe6:	b2b3      	uxth	r3, r6
 801bfe8:	9104      	str	r1, [sp, #16]
 801bfea:	9804      	ldr	r0, [sp, #16]
 801bfec:	441a      	add	r2, r3
 801bfee:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801bff2:	b292      	uxth	r2, r2
 801bff4:	4401      	add	r1, r0
 801bff6:	fa0f f882 	sxth.w	r8, r2
 801bffa:	b289      	uxth	r1, r1
 801bffc:	9105      	str	r1, [sp, #20]
 801bffe:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801c002:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801c006:	9b03      	ldr	r3, [sp, #12]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d054      	beq.n	801c0b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801c00c:	9902      	ldr	r1, [sp, #8]
 801c00e:	f105 00a0 	add.w	r0, r5, #160	@ 0xa0
 801c012:	f7ff fdb1 	bl	801bb78 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c01a:	b1d8      	cbz	r0, 801c054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c01c:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	@ 0xa0
 801c020:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	@ 0xa2
 801c024:	4576      	cmp	r6, lr
 801c026:	dc26      	bgt.n	801c076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c028:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	@ 0xa4
 801c02c:	44f4      	add	ip, lr
 801c02e:	fa0f fc8c 	sxth.w	ip, ip
 801c032:	45e0      	cmp	r8, ip
 801c034:	db1f      	blt.n	801c076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801c036:	428f      	cmp	r7, r1
 801c038:	fa1f fc81 	uxth.w	ip, r1
 801c03c:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	@ 0xa6
 801c040:	dc0f      	bgt.n	801c062 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801c042:	9805      	ldr	r0, [sp, #20]
 801c044:	f8a5 90a2 	strh.w	r9, [r5, #162]	@ 0xa2
 801c048:	eba0 0c0c 	sub.w	ip, r0, ip
 801c04c:	eba1 010c 	sub.w	r1, r1, ip
 801c050:	f8a5 10a6 	strh.w	r1, [r5, #166]	@ 0xa6
 801c054:	4620      	mov	r0, r4
 801c056:	9903      	ldr	r1, [sp, #12]
 801c058:	3d08      	subs	r5, #8
 801c05a:	4604      	mov	r4, r0
 801c05c:	3901      	subs	r1, #1
 801c05e:	9103      	str	r1, [sp, #12]
 801c060:	e7cf      	b.n	801c002 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801c062:	4461      	add	r1, ip
 801c064:	b209      	sxth	r1, r1
 801c066:	4549      	cmp	r1, r9
 801c068:	dcf5      	bgt.n	801c056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c06a:	9904      	ldr	r1, [sp, #16]
 801c06c:	eba1 0c0c 	sub.w	ip, r1, ip
 801c070:	f8a5 c0a6 	strh.w	ip, [r5, #166]	@ 0xa6
 801c074:	e7ee      	b.n	801c054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c076:	428f      	cmp	r7, r1
 801c078:	dced      	bgt.n	801c056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c07a:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	@ 0xa6
 801c07e:	4461      	add	r1, ip
 801c080:	b209      	sxth	r1, r1
 801c082:	4589      	cmp	r9, r1
 801c084:	dbe7      	blt.n	801c056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c086:	4576      	cmp	r6, lr
 801c088:	fa1f fc8e 	uxth.w	ip, lr
 801c08c:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	@ 0xa4
 801c090:	dc08      	bgt.n	801c0a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801c092:	eba2 0c0c 	sub.w	ip, r2, ip
 801c096:	f8a5 80a0 	strh.w	r8, [r5, #160]	@ 0xa0
 801c09a:	eba1 010c 	sub.w	r1, r1, ip
 801c09e:	f8a5 10a4 	strh.w	r1, [r5, #164]	@ 0xa4
 801c0a2:	e7d7      	b.n	801c054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c0a4:	4461      	add	r1, ip
 801c0a6:	b209      	sxth	r1, r1
 801c0a8:	4588      	cmp	r8, r1
 801c0aa:	dbd4      	blt.n	801c056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801c0ac:	eba3 0c0c 	sub.w	ip, r3, ip
 801c0b0:	f8a5 c0a4 	strh.w	ip, [r5, #164]	@ 0xa4
 801c0b4:	e7ce      	b.n	801c054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801c0b6:	2c00      	cmp	r4, #0
 801c0b8:	f000 8169 	beq.w	801c38e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801c0bc:	9b00      	ldr	r3, [sp, #0]
 801c0be:	3301      	adds	r3, #1
 801c0c0:	f000 8165 	beq.w	801c38e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801c0c4:	f10a 04a0 	add.w	r4, sl, #160	@ 0xa0
 801c0c8:	9802      	ldr	r0, [sp, #8]
 801c0ca:	4621      	mov	r1, r4
 801c0cc:	f7ff fd76 	bl	801bbbc <_ZNK8touchgfx4Rect8includesERKS0_>
 801c0d0:	b120      	cbz	r0, 801c0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801c0d2:	f8bd 1000 	ldrh.w	r1, [sp]
 801c0d6:	9801      	ldr	r0, [sp, #4]
 801c0d8:	f7ff fe86 	bl	801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c0dc:	9902      	ldr	r1, [sp, #8]
 801c0de:	4620      	mov	r0, r4
 801c0e0:	f7ff fd4a 	bl	801bb78 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c0e4:	2800      	cmp	r0, #0
 801c0e6:	f000 809b 	beq.w	801c220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801c0ea:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c0ee:	f8bd 7024 	ldrh.w	r7, [sp, #36]	@ 0x24
 801c0f2:	fa1f f288 	uxth.w	r2, r8
 801c0f6:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	@ 0xa0
 801c0fa:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	@ 0xa4
 801c0fe:	19d5      	adds	r5, r2, r7
 801c100:	b2a1      	uxth	r1, r4
 801c102:	45a0      	cmp	r8, r4
 801c104:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801c108:	fa1f f985 	uxth.w	r9, r5
 801c10c:	440b      	add	r3, r1
 801c10e:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	@ 0xa2
 801c112:	fa0f f589 	sxth.w	r5, r9
 801c116:	b29b      	uxth	r3, r3
 801c118:	9503      	str	r5, [sp, #12]
 801c11a:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	@ 0xe8
 801c11e:	9507      	str	r5, [sp, #28]
 801c120:	f340 809d 	ble.w	801c25e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801c124:	1a52      	subs	r2, r2, r1
 801c126:	4584      	cmp	ip, r0
 801c128:	fa0f fe83 	sxth.w	lr, r3
 801c12c:	b292      	uxth	r2, r2
 801c12e:	b215      	sxth	r5, r2
 801c130:	dd2f      	ble.n	801c192 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801c132:	9e00      	ldr	r6, [sp, #0]
 801c134:	fa1f fc8c 	uxth.w	ip, ip
 801c138:	b280      	uxth	r0, r0
 801c13a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 801c13e:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801c142:	9e03      	ldr	r6, [sp, #12]
 801c144:	ebac 0300 	sub.w	r3, ip, r0
 801c148:	448c      	add	ip, r1
 801c14a:	eba6 060e 	sub.w	r6, r6, lr
 801c14e:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	@ 0xae
 801c152:	b29b      	uxth	r3, r3
 801c154:	4470      	add	r0, lr
 801c156:	fa0f fc8c 	sxth.w	ip, ip
 801c15a:	b21c      	sxth	r4, r3
 801c15c:	b200      	sxth	r0, r0
 801c15e:	4366      	muls	r6, r4
 801c160:	ebac 0000 	sub.w	r0, ip, r0
 801c164:	4368      	muls	r0, r5
 801c166:	4286      	cmp	r6, r0
 801c168:	db09      	blt.n	801c17e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801c16a:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	@ 0xa8
 801c16e:	f8a8 40ae 	strh.w	r4, [r8, #174]	@ 0xae
 801c172:	4417      	add	r7, r2
 801c174:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c178:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801c17c:	e685      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c17e:	440b      	add	r3, r1
 801c180:	f8a8 50ac 	strh.w	r5, [r8, #172]	@ 0xac
 801c184:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801c188:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	@ 0xaa
 801c18c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c190:	e67b      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c192:	9e03      	ldr	r6, [sp, #12]
 801c194:	45b6      	cmp	lr, r6
 801c196:	da28      	bge.n	801c1ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801c198:	9b00      	ldr	r3, [sp, #0]
 801c19a:	eba6 060e 	sub.w	r6, r6, lr
 801c19e:	f8bd 4026 	ldrh.w	r4, [sp, #38]	@ 0x26
 801c1a2:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801c1a6:	eb04 030c 	add.w	r3, r4, ip
 801c1aa:	fa1f f883 	uxth.w	r8, r3
 801c1ae:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	@ 0xae
 801c1b2:	4403      	add	r3, r0
 801c1b4:	fa0f f988 	sxth.w	r9, r8
 801c1b8:	eba0 000c 	sub.w	r0, r0, ip
 801c1bc:	eba3 0308 	sub.w	r3, r3, r8
 801c1c0:	4368      	muls	r0, r5
 801c1c2:	b29b      	uxth	r3, r3
 801c1c4:	fa0f f883 	sxth.w	r8, r3
 801c1c8:	fb08 f606 	mul.w	r6, r8, r6
 801c1cc:	42b0      	cmp	r0, r6
 801c1ce:	dc06      	bgt.n	801c1de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801c1d0:	f8a1 90aa 	strh.w	r9, [r1, #170]	@ 0xaa
 801c1d4:	f8a1 80ae 	strh.w	r8, [r1, #174]	@ 0xae
 801c1d8:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	@ 0xa8
 801c1dc:	e7c9      	b.n	801c172 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801c1de:	4423      	add	r3, r4
 801c1e0:	f8a1 50ac 	strh.w	r5, [r1, #172]	@ 0xac
 801c1e4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801c1e8:	e64f      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c1ea:	eba3 0309 	sub.w	r3, r3, r9
 801c1ee:	9807      	ldr	r0, [sp, #28]
 801c1f0:	b29b      	uxth	r3, r3
 801c1f2:	2806      	cmp	r0, #6
 801c1f4:	fa0f fc83 	sxth.w	ip, r3
 801c1f8:	d818      	bhi.n	801c22c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801c1fa:	4652      	mov	r2, sl
 801c1fc:	ab0a      	add	r3, sp, #40	@ 0x28
 801c1fe:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801c202:	6851      	ldr	r1, [r2, #4]
 801c204:	f8aa c0a4 	strh.w	ip, [sl, #164]	@ 0xa4
 801c208:	c303      	stmia	r3!, {r0, r1}
 801c20a:	9b03      	ldr	r3, [sp, #12]
 801c20c:	f8ad 502c 	strh.w	r5, [sp, #44]	@ 0x2c
 801c210:	f8aa 30a0 	strh.w	r3, [sl, #160]	@ 0xa0
 801c214:	ab0a      	add	r3, sp, #40	@ 0x28
 801c216:	9801      	ldr	r0, [sp, #4]
 801c218:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c21c:	f7ff fe06 	bl	801be2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c220:	9b00      	ldr	r3, [sp, #0]
 801c222:	f1aa 0a08 	sub.w	sl, sl, #8
 801c226:	3b01      	subs	r3, #1
 801c228:	9300      	str	r3, [sp, #0]
 801c22a:	e747      	b.n	801c0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801c22c:	9800      	ldr	r0, [sp, #0]
 801c22e:	45ac      	cmp	ip, r5
 801c230:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c234:	db0c      	blt.n	801c250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801c236:	4417      	add	r7, r2
 801c238:	4458      	add	r0, fp
 801c23a:	f8ad 4020 	strh.w	r4, [sp, #32]
 801c23e:	b2bf      	uxth	r7, r7
 801c240:	f8a0 c0ac 	strh.w	ip, [r0, #172]	@ 0xac
 801c244:	f8ad 7024 	strh.w	r7, [sp, #36]	@ 0x24
 801c248:	440f      	add	r7, r1
 801c24a:	f8a0 70a8 	strh.w	r7, [r0, #168]	@ 0xa8
 801c24e:	e61c      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c250:	4458      	add	r0, fp
 801c252:	f8a0 50ac 	strh.w	r5, [r0, #172]	@ 0xac
 801c256:	443b      	add	r3, r7
 801c258:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 801c25c:	e615      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c25e:	fa1f f18c 	uxth.w	r1, ip
 801c262:	f8bd 5026 	ldrh.w	r5, [sp, #38]	@ 0x26
 801c266:	b282      	uxth	r2, r0
 801c268:	4584      	cmp	ip, r0
 801c26a:	eb01 0e05 	add.w	lr, r1, r5
 801c26e:	9204      	str	r2, [sp, #16]
 801c270:	fa1f fe8e 	uxth.w	lr, lr
 801c274:	9e04      	ldr	r6, [sp, #16]
 801c276:	fa0f f28e 	sxth.w	r2, lr
 801c27a:	9205      	str	r2, [sp, #20]
 801c27c:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	@ 0xa6
 801c280:	4432      	add	r2, r6
 801c282:	b292      	uxth	r2, r2
 801c284:	9206      	str	r2, [sp, #24]
 801c286:	da26      	bge.n	801c2d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801c288:	eba3 0309 	sub.w	r3, r3, r9
 801c28c:	eba2 020e 	sub.w	r2, r2, lr
 801c290:	eba0 000c 	sub.w	r0, r0, ip
 801c294:	eba4 0408 	sub.w	r4, r4, r8
 801c298:	b29b      	uxth	r3, r3
 801c29a:	b292      	uxth	r2, r2
 801c29c:	fa0f fa83 	sxth.w	sl, r3
 801c2a0:	b211      	sxth	r1, r2
 801c2a2:	fb0a f000 	mul.w	r0, sl, r0
 801c2a6:	434c      	muls	r4, r1
 801c2a8:	42a0      	cmp	r0, r4
 801c2aa:	9800      	ldr	r0, [sp, #0]
 801c2ac:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801c2b0:	dc06      	bgt.n	801c2c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801c2b2:	4458      	add	r0, fp
 801c2b4:	9a05      	ldr	r2, [sp, #20]
 801c2b6:	f8a0 10ae 	strh.w	r1, [r0, #174]	@ 0xae
 801c2ba:	f8a0 20aa 	strh.w	r2, [r0, #170]	@ 0xaa
 801c2be:	e7ca      	b.n	801c256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c2c0:	eb0b 0300 	add.w	r3, fp, r0
 801c2c4:	9903      	ldr	r1, [sp, #12]
 801c2c6:	f8a3 a0ac 	strh.w	sl, [r3, #172]	@ 0xac
 801c2ca:	f8a3 10a8 	strh.w	r1, [r3, #168]	@ 0xa8
 801c2ce:	442a      	add	r2, r5
 801c2d0:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801c2d4:	e5d9      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c2d6:	9e04      	ldr	r6, [sp, #16]
 801c2d8:	9a03      	ldr	r2, [sp, #12]
 801c2da:	1b89      	subs	r1, r1, r6
 801c2dc:	b21e      	sxth	r6, r3
 801c2de:	b289      	uxth	r1, r1
 801c2e0:	4296      	cmp	r6, r2
 801c2e2:	fa0f fc81 	sxth.w	ip, r1
 801c2e6:	dd25      	ble.n	801c334 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801c2e8:	eba3 0309 	sub.w	r3, r3, r9
 801c2ec:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801c2f0:	9e05      	ldr	r6, [sp, #20]
 801c2f2:	eba4 0408 	sub.w	r4, r4, r8
 801c2f6:	b29b      	uxth	r3, r3
 801c2f8:	eba6 0902 	sub.w	r9, r6, r2
 801c2fc:	fb0c f404 	mul.w	r4, ip, r4
 801c300:	b218      	sxth	r0, r3
 801c302:	9a00      	ldr	r2, [sp, #0]
 801c304:	fb00 f909 	mul.w	r9, r0, r9
 801c308:	00d2      	lsls	r2, r2, #3
 801c30a:	454c      	cmp	r4, r9
 801c30c:	db03      	blt.n	801c316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801c30e:	445a      	add	r2, fp
 801c310:	f8a2 c0ae 	strh.w	ip, [r2, #174]	@ 0xae
 801c314:	e79f      	b.n	801c256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801c316:	eb0b 0302 	add.w	r3, fp, r2
 801c31a:	9a03      	ldr	r2, [sp, #12]
 801c31c:	4429      	add	r1, r5
 801c31e:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
 801c322:	f8a3 00ac 	strh.w	r0, [r3, #172]	@ 0xac
 801c326:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	@ 0xaa
 801c32a:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801c32e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c332:	e5aa      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c334:	9b06      	ldr	r3, [sp, #24]
 801c336:	9c07      	ldr	r4, [sp, #28]
 801c338:	eba3 020e 	sub.w	r2, r3, lr
 801c33c:	2c06      	cmp	r4, #6
 801c33e:	b292      	uxth	r2, r2
 801c340:	b213      	sxth	r3, r2
 801c342:	d80d      	bhi.n	801c360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801c344:	4651      	mov	r1, sl
 801c346:	aa0a      	add	r2, sp, #40	@ 0x28
 801c348:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801c34c:	6849      	ldr	r1, [r1, #4]
 801c34e:	f8aa 30a6 	strh.w	r3, [sl, #166]	@ 0xa6
 801c352:	9b05      	ldr	r3, [sp, #20]
 801c354:	c203      	stmia	r2!, {r0, r1}
 801c356:	f8aa 30a2 	strh.w	r3, [sl, #162]	@ 0xa2
 801c35a:	f8ad c02e 	strh.w	ip, [sp, #46]	@ 0x2e
 801c35e:	e759      	b.n	801c214 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801c360:	9c00      	ldr	r4, [sp, #0]
 801c362:	4563      	cmp	r3, ip
 801c364:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801c368:	db0d      	blt.n	801c386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801c36a:	4429      	add	r1, r5
 801c36c:	9a04      	ldr	r2, [sp, #16]
 801c36e:	445c      	add	r4, fp
 801c370:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c374:	b289      	uxth	r1, r1
 801c376:	f8a4 30ae 	strh.w	r3, [r4, #174]	@ 0xae
 801c37a:	f8ad 1026 	strh.w	r1, [sp, #38]	@ 0x26
 801c37e:	4411      	add	r1, r2
 801c380:	f8a4 10aa 	strh.w	r1, [r4, #170]	@ 0xaa
 801c384:	e581      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c386:	445c      	add	r4, fp
 801c388:	f8a4 c0ae 	strh.w	ip, [r4, #174]	@ 0xae
 801c38c:	e79f      	b.n	801c2ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801c38e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	@ 0xe8
 801c392:	2f07      	cmp	r7, #7
 801c394:	d806      	bhi.n	801c3a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801c396:	ab08      	add	r3, sp, #32
 801c398:	9801      	ldr	r0, [sp, #4]
 801c39a:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c39e:	f7ff fd45 	bl	801be2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c3a2:	e5dc      	b.n	801bf5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801c3a4:	f107 39ff 	add.w	r9, r7, #4294967295
 801c3a8:	f10b 03a8 	add.w	r3, fp, #168	@ 0xa8
 801c3ac:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801c3b0:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801c3b4:	f04f 35ff 	mov.w	r5, #4294967295
 801c3b8:	2400      	movs	r4, #0
 801c3ba:	9304      	str	r3, [sp, #16]
 801c3bc:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 801c3c0:	f109 32ff 	add.w	r2, r9, #4294967295
 801c3c4:	9300      	str	r3, [sp, #0]
 801c3c6:	4690      	mov	r8, r2
 801c3c8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	@ 0xa6
 801c3cc:	9303      	str	r3, [sp, #12]
 801c3ce:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c3d2:	f1b8 3fff 	cmp.w	r8, #4294967295
 801c3d6:	6818      	ldr	r0, [r3, #0]
 801c3d8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801c3dc:	9206      	str	r2, [sp, #24]
 801c3de:	bf16      	itet	ne
 801c3e0:	9904      	ldrne	r1, [sp, #16]
 801c3e2:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801c3e6:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801c3ea:	9305      	str	r3, [sp, #20]
 801c3ec:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801c3f0:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801c3f4:	fb16 f601 	smulbb	r6, r6, r1
 801c3f8:	6859      	ldr	r1, [r3, #4]
 801c3fa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c3fe:	4671      	mov	r1, lr
 801c400:	a80a      	add	r0, sp, #40	@ 0x28
 801c402:	f7ff fbfd 	bl	801bc00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c406:	f8bd 002e 	ldrh.w	r0, [sp, #46]	@ 0x2e
 801c40a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801c40e:	9b03      	ldr	r3, [sp, #12]
 801c410:	9a00      	ldr	r2, [sp, #0]
 801c412:	fb11 f100 	smulbb	r1, r1, r0
 801c416:	2008      	movs	r0, #8
 801c418:	fb02 6603 	mla	r6, r2, r3, r6
 801c41c:	1b8e      	subs	r6, r1, r6
 801c41e:	fb91 f1f0 	sdiv	r1, r1, r0
 801c422:	42b1      	cmp	r1, r6
 801c424:	dc21      	bgt.n	801c46a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c426:	4556      	cmp	r6, sl
 801c428:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801c42c:	da03      	bge.n	801c436 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801c42e:	b1e6      	cbz	r6, 801c46a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801c430:	46b2      	mov	sl, r6
 801c432:	4645      	mov	r5, r8
 801c434:	464c      	mov	r4, r9
 801c436:	f108 38ff 	add.w	r8, r8, #4294967295
 801c43a:	f118 0f02 	cmn.w	r8, #2
 801c43e:	d1c8      	bne.n	801c3d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801c440:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c444:	f1a7 0708 	sub.w	r7, r7, #8
 801c448:	4691      	mov	r9, r2
 801c44a:	d1b7      	bne.n	801c3bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801c44c:	9b01      	ldr	r3, [sp, #4]
 801c44e:	b2a6      	uxth	r6, r4
 801c450:	00e4      	lsls	r4, r4, #3
 801c452:	1918      	adds	r0, r3, r4
 801c454:	1c6b      	adds	r3, r5, #1
 801c456:	d10b      	bne.n	801c470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801c458:	4601      	mov	r1, r0
 801c45a:	9802      	ldr	r0, [sp, #8]
 801c45c:	f7ff fbd0 	bl	801bc00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c460:	4631      	mov	r1, r6
 801c462:	9801      	ldr	r0, [sp, #4]
 801c464:	f7ff fcc0 	bl	801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c468:	e50f      	b.n	801be8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801c46a:	4645      	mov	r5, r8
 801c46c:	464c      	mov	r4, r9
 801c46e:	e7ed      	b.n	801c44c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801c470:	9b01      	ldr	r3, [sp, #4]
 801c472:	00ed      	lsls	r5, r5, #3
 801c474:	445c      	add	r4, fp
 801c476:	1959      	adds	r1, r3, r5
 801c478:	445d      	add	r5, fp
 801c47a:	f7ff fbc1 	bl	801bc00 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801c47e:	9b02      	ldr	r3, [sp, #8]
 801c480:	cb03      	ldmia	r3!, {r0, r1}
 801c482:	9b02      	ldr	r3, [sp, #8]
 801c484:	f8c5 00a8 	str.w	r0, [r5, #168]	@ 0xa8
 801c488:	f8c5 10ac 	str.w	r1, [r5, #172]	@ 0xac
 801c48c:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801c490:	6861      	ldr	r1, [r4, #4]
 801c492:	c303      	stmia	r3!, {r0, r1}
 801c494:	e7e4      	b.n	801c460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801c498 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801c498:	4b1d      	ldr	r3, [pc, #116]	@ (801c510 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801c49a:	b530      	push	{r4, r5, lr}
 801c49c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c4a0:	b085      	sub	sp, #20
 801c4a2:	4b1c      	ldr	r3, [pc, #112]	@ (801c514 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801c4a4:	460c      	mov	r4, r1
 801c4a6:	2100      	movs	r1, #0
 801c4a8:	4605      	mov	r5, r0
 801c4aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c4ae:	6820      	ldr	r0, [r4, #0]
 801c4b0:	9100      	str	r1, [sp, #0]
 801c4b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c4b6:	ab02      	add	r3, sp, #8
 801c4b8:	6861      	ldr	r1, [r4, #4]
 801c4ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c4be:	c303      	stmia	r3!, {r0, r1}
 801c4c0:	4669      	mov	r1, sp
 801c4c2:	a802      	add	r0, sp, #8
 801c4c4:	f7fb fe70 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801c4c8:	ab02      	add	r3, sp, #8
 801c4ca:	cb03      	ldmia	r3!, {r0, r1}
 801c4cc:	4b12      	ldr	r3, [pc, #72]	@ (801c518 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801c4ce:	6020      	str	r0, [r4, #0]
 801c4d0:	6818      	ldr	r0, [r3, #0]
 801c4d2:	6061      	str	r1, [r4, #4]
 801c4d4:	b138      	cbz	r0, 801c4e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c4d6:	f895 3134 	ldrb.w	r3, [r5, #308]	@ 0x134
 801c4da:	b133      	cbz	r3, 801c4ea <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801c4dc:	6821      	ldr	r1, [r4, #0]
 801c4de:	4628      	mov	r0, r5
 801c4e0:	6862      	ldr	r2, [r4, #4]
 801c4e2:	f7ff fcc5 	bl	801be70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c4e6:	b005      	add	sp, #20
 801c4e8:	bd30      	pop	{r4, r5, pc}
 801c4ea:	6803      	ldr	r3, [r0, #0]
 801c4ec:	4621      	mov	r1, r4
 801c4ee:	689b      	ldr	r3, [r3, #8]
 801c4f0:	4798      	blx	r3
 801c4f2:	4b0a      	ldr	r3, [pc, #40]	@ (801c51c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801c4f4:	6818      	ldr	r0, [r3, #0]
 801c4f6:	b118      	cbz	r0, 801c500 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801c4f8:	6803      	ldr	r3, [r0, #0]
 801c4fa:	4621      	mov	r1, r4
 801c4fc:	689b      	ldr	r3, [r3, #8]
 801c4fe:	4798      	blx	r3
 801c500:	4b07      	ldr	r3, [pc, #28]	@ (801c520 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801c502:	4621      	mov	r1, r4
 801c504:	6818      	ldr	r0, [r3, #0]
 801c506:	6803      	ldr	r3, [r0, #0]
 801c508:	69db      	ldr	r3, [r3, #28]
 801c50a:	4798      	blx	r3
 801c50c:	e7eb      	b.n	801c4e6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801c50e:	bf00      	nop
 801c510:	2400b8c0 	.word	0x2400b8c0
 801c514:	2400b8c2 	.word	0x2400b8c2
 801c518:	2400b908 	.word	0x2400b908
 801c51c:	2400b904 	.word	0x2400b904
 801c520:	2400b8cc 	.word	0x2400b8cc

0801c524 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801c524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c528:	4604      	mov	r4, r0
 801c52a:	b09b      	sub	sp, #108	@ 0x6c
 801c52c:	f880 1134 	strb.w	r1, [r0, #308]	@ 0x134
 801c530:	b129      	cbz	r1, 801c53e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801c532:	2300      	movs	r3, #0
 801c534:	f8a0 30e8 	strh.w	r3, [r0, #232]	@ 0xe8
 801c538:	b01b      	add	sp, #108	@ 0x6c
 801c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c53e:	f500 7696 	add.w	r6, r0, #300	@ 0x12c
 801c542:	4630      	mov	r0, r6
 801c544:	f7fb fe73 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c548:	4605      	mov	r5, r0
 801c54a:	b940      	cbnz	r0, 801c55e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801c54c:	4620      	mov	r0, r4
 801c54e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801c552:	f7ff fc8d 	bl	801be70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c556:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 801c55a:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801c55e:	4ba6      	ldr	r3, [pc, #664]	@ (801c7f8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	b33b      	cbz	r3, 801c5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c564:	4da5      	ldr	r5, [pc, #660]	@ (801c7fc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801c566:	4628      	mov	r0, r5
 801c568:	f7fb fe61 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c56c:	4606      	mov	r6, r0
 801c56e:	bb08      	cbnz	r0, 801c5b4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801c570:	4628      	mov	r0, r5
 801c572:	f7ff f9b1 	bl	801b8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c576:	6829      	ldr	r1, [r5, #0]
 801c578:	686a      	ldr	r2, [r5, #4]
 801c57a:	4620      	mov	r0, r4
 801c57c:	f7ff fc78 	bl	801be70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c580:	802e      	strh	r6, [r5, #0]
 801c582:	806e      	strh	r6, [r5, #2]
 801c584:	80ae      	strh	r6, [r5, #4]
 801c586:	80ee      	strh	r6, [r5, #6]
 801c588:	4f9d      	ldr	r7, [pc, #628]	@ (801c800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801c58a:	a809      	add	r0, sp, #36	@ 0x24
 801c58c:	f7ff fbd7 	bl	801bd3e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801c590:	883d      	ldrh	r5, [r7, #0]
 801c592:	462e      	mov	r6, r5
 801c594:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c598:	42b3      	cmp	r3, r6
 801c59a:	d910      	bls.n	801c5be <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801c59c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c5a0:	3601      	adds	r6, #1
 801c5a2:	a809      	add	r0, sp, #36	@ 0x24
 801c5a4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 801c5a8:	b2b6      	uxth	r6, r6
 801c5aa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 801c5ae:	f7ff fc3d 	bl	801be2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c5b2:	e7ef      	b.n	801c594 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801c5b4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d1e5      	bne.n	801c588 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801c5bc:	e7bc      	b.n	801c538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c5be:	462e      	mov	r6, r5
 801c5c0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	@ 0x12a
 801c5c4:	42b3      	cmp	r3, r6
 801c5c6:	d90b      	bls.n	801c5e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801c5c8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801c5cc:	3601      	adds	r6, #1
 801c5ce:	4620      	mov	r0, r4
 801c5d0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	@ 0xea
 801c5d4:	b2b6      	uxth	r6, r6
 801c5d6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	@ 0xee
 801c5da:	f7ff fc49 	bl	801be70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c5de:	e7ef      	b.n	801c5c0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801c5e0:	4a88      	ldr	r2, [pc, #544]	@ (801c804 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801c5e2:	6813      	ldr	r3, [r2, #0]
 801c5e4:	4690      	mov	r8, r2
 801c5e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801c5ea:	2b01      	cmp	r3, #1
 801c5ec:	f040 8094 	bne.w	801c718 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801c5f0:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801c5f4:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	@ 0xe8
 801c5f8:	f04f 0900 	mov.w	r9, #0
 801c5fc:	33aa      	adds	r3, #170	@ 0xaa
 801c5fe:	42a8      	cmp	r0, r5
 801c600:	f103 0308 	add.w	r3, r3, #8
 801c604:	dd0a      	ble.n	801c61c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801c606:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801c60a:	3501      	adds	r5, #1
 801c60c:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801c610:	440a      	add	r2, r1
 801c612:	b212      	sxth	r2, r2
 801c614:	4591      	cmp	r9, r2
 801c616:	bfb8      	it	lt
 801c618:	4691      	movlt	r9, r2
 801c61a:	e7f0      	b.n	801c5fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801c61c:	4b7a      	ldr	r3, [pc, #488]	@ (801c808 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801c61e:	4e7b      	ldr	r6, [pc, #492]	@ (801c80c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801c620:	881d      	ldrh	r5, [r3, #0]
 801c622:	2300      	movs	r3, #0
 801c624:	2d0f      	cmp	r5, #15
 801c626:	bf8c      	ite	hi
 801c628:	08ed      	lsrhi	r5, r5, #3
 801c62a:	2501      	movls	r5, #1
 801c62c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801c630:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c634:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801c638:	f8d8 0000 	ldr.w	r0, [r8]
 801c63c:	440b      	add	r3, r1
 801c63e:	6802      	ldr	r2, [r0, #0]
 801c640:	b21b      	sxth	r3, r3
 801c642:	4599      	cmp	r9, r3
 801c644:	dd4b      	ble.n	801c6de <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801c646:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 801c64a:	4798      	blx	r3
 801c64c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c650:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801c654:	4413      	add	r3, r2
 801c656:	b21b      	sxth	r3, r3
 801c658:	195a      	adds	r2, r3, r5
 801c65a:	4290      	cmp	r0, r2
 801c65c:	da07      	bge.n	801c66e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c65e:	4581      	cmp	r9, r0
 801c660:	dd05      	ble.n	801c66e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801c662:	4298      	cmp	r0, r3
 801c664:	da33      	bge.n	801c6ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c666:	2b00      	cmp	r3, #0
 801c668:	dd31      	ble.n	801c6ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801c66a:	4648      	mov	r0, r9
 801c66c:	e004      	b.n	801c678 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801c66e:	4298      	cmp	r0, r3
 801c670:	dbfb      	blt.n	801c66a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801c672:	4548      	cmp	r0, r9
 801c674:	bfa8      	it	ge
 801c676:	4648      	movge	r0, r9
 801c678:	f9b6 2000 	ldrsh.w	r2, [r6]
 801c67c:	2100      	movs	r1, #0
 801c67e:	1ac0      	subs	r0, r0, r3
 801c680:	f8b7 a000 	ldrh.w	sl, [r7]
 801c684:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c688:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c68c:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c690:	f8ad 001a 	strh.w	r0, [sp, #26]
 801c694:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c698:	4553      	cmp	r3, sl
 801c69a:	d9c9      	bls.n	801c630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c69c:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801c6a0:	ab07      	add	r3, sp, #28
 801c6a2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c6a6:	6851      	ldr	r1, [r2, #4]
 801c6a8:	c303      	stmia	r3!, {r0, r1}
 801c6aa:	a807      	add	r0, sp, #28
 801c6ac:	a905      	add	r1, sp, #20
 801c6ae:	f7fb fd7b 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801c6b2:	a807      	add	r0, sp, #28
 801c6b4:	f7fb fdbb 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c6b8:	b920      	cbnz	r0, 801c6c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801c6ba:	6823      	ldr	r3, [r4, #0]
 801c6bc:	a907      	add	r1, sp, #28
 801c6be:	4620      	mov	r0, r4
 801c6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c6c2:	4798      	blx	r3
 801c6c4:	f10a 0a01 	add.w	sl, sl, #1
 801c6c8:	fa1f fa8a 	uxth.w	sl, sl
 801c6cc:	e7e2      	b.n	801c694 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801c6ce:	f8d8 0000 	ldr.w	r0, [r8]
 801c6d2:	2101      	movs	r1, #1
 801c6d4:	6803      	ldr	r3, [r0, #0]
 801c6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c6da:	4798      	blx	r3
 801c6dc:	e7a8      	b.n	801c630 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801c6de:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 801c6e0:	4798      	blx	r3
 801c6e2:	4b4b      	ldr	r3, [pc, #300]	@ (801c810 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801c6e4:	781b      	ldrb	r3, [r3, #0]
 801c6e6:	2b00      	cmp	r3, #0
 801c6e8:	f43f af26 	beq.w	801c538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	883d      	ldrh	r5, [r7, #0]
 801c6f0:	34ea      	adds	r4, #234	@ 0xea
 801c6f2:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
 801c6f6:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801c6fa:	42ab      	cmp	r3, r5
 801c6fc:	f67f af1c 	bls.w	801c538 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801c700:	ab1a      	add	r3, sp, #104	@ 0x68
 801c702:	4620      	mov	r0, r4
 801c704:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801c708:	3501      	adds	r5, #1
 801c70a:	3b44      	subs	r3, #68	@ 0x44
 801c70c:	b2ad      	uxth	r5, r5
 801c70e:	e893 0006 	ldmia.w	r3, {r1, r2}
 801c712:	f7ff fb8b 	bl	801be2c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801c716:	e7ee      	b.n	801c6f6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801c718:	2b02      	cmp	r3, #2
 801c71a:	f040 813d 	bne.w	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801c71e:	4b3d      	ldr	r3, [pc, #244]	@ (801c814 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801c720:	781b      	ldrb	r3, [r3, #0]
 801c722:	2b01      	cmp	r3, #1
 801c724:	d02c      	beq.n	801c780 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801c726:	f104 0ba8 	add.w	fp, r4, #168	@ 0xa8
 801c72a:	883a      	ldrh	r2, [r7, #0]
 801c72c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	@ 0xe8
 801c730:	3201      	adds	r2, #1
 801c732:	b292      	uxth	r2, r2
 801c734:	2900      	cmp	r1, #0
 801c736:	d0d4      	beq.n	801c6e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c738:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	@ 0xaa
 801c73c:	4610      	mov	r0, r2
 801c73e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	@ 0xae
 801c742:	f04f 0a00 	mov.w	sl, #0
 801c746:	441d      	add	r5, r3
 801c748:	b22d      	sxth	r5, r5
 801c74a:	b283      	uxth	r3, r0
 801c74c:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801c750:	4299      	cmp	r1, r3
 801c752:	f240 80c3 	bls.w	801c8dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801c756:	4426      	add	r6, r4
 801c758:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801c75c:	4684      	mov	ip, r0
 801c75e:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	@ 0xaa
 801c762:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	@ 0xaa
 801c766:	4573      	cmp	r3, lr
 801c768:	f340 80a5 	ble.w	801c8b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801c76c:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	@ 0xae
 801c770:	4475      	add	r5, lr
 801c772:	b22d      	sxth	r5, r5
 801c774:	429d      	cmp	r5, r3
 801c776:	bfa8      	it	ge
 801c778:	461d      	movge	r5, r3
 801c77a:	3001      	adds	r0, #1
 801c77c:	46e2      	mov	sl, ip
 801c77e:	e7e4      	b.n	801c74a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801c780:	f104 09a8 	add.w	r9, r4, #168	@ 0xa8
 801c784:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	@ 0xe8
 801c788:	f1bb 0f00 	cmp.w	fp, #0
 801c78c:	d0a9      	beq.n	801c6e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c78e:	883b      	ldrh	r3, [r7, #0]
 801c790:	2600      	movs	r6, #0
 801c792:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	@ 0xa8
 801c796:	3301      	adds	r3, #1
 801c798:	b29b      	uxth	r3, r3
 801c79a:	b299      	uxth	r1, r3
 801c79c:	00f5      	lsls	r5, r6, #3
 801c79e:	458b      	cmp	fp, r1
 801c7a0:	d93a      	bls.n	801c818 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801c7a2:	4425      	add	r5, r4
 801c7a4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801c7a8:	469c      	mov	ip, r3
 801c7aa:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	@ 0xac
 801c7ae:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	@ 0xa8
 801c7b2:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	@ 0xa8
 801c7b6:	4408      	add	r0, r1
 801c7b8:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	@ 0xac
 801c7bc:	4471      	add	r1, lr
 801c7be:	b200      	sxth	r0, r0
 801c7c0:	b209      	sxth	r1, r1
 801c7c2:	4288      	cmp	r0, r1
 801c7c4:	da06      	bge.n	801c7d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801c7c6:	4586      	cmp	lr, r0
 801c7c8:	4672      	mov	r2, lr
 801c7ca:	bfb8      	it	lt
 801c7cc:	4602      	movlt	r2, r0
 801c7ce:	3301      	adds	r3, #1
 801c7d0:	4666      	mov	r6, ip
 801c7d2:	e7e2      	b.n	801c79a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801c7d4:	d10b      	bne.n	801c7ee <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801c7d6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	@ 0xae
 801c7da:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	@ 0xae
 801c7de:	458c      	cmp	ip, r1
 801c7e0:	bfb4      	ite	lt
 801c7e2:	469c      	movlt	ip, r3
 801c7e4:	46b4      	movge	ip, r6
 801c7e6:	4572      	cmp	r2, lr
 801c7e8:	bfb8      	it	lt
 801c7ea:	4672      	movlt	r2, lr
 801c7ec:	e7ef      	b.n	801c7ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c7ee:	428a      	cmp	r2, r1
 801c7f0:	46b4      	mov	ip, r6
 801c7f2:	bfb8      	it	lt
 801c7f4:	460a      	movlt	r2, r1
 801c7f6:	e7ea      	b.n	801c7ce <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801c7f8:	2400b904 	.word	0x2400b904
 801c7fc:	2400b910 	.word	0x2400b910
 801c800:	24000056 	.word	0x24000056
 801c804:	2400b8cc 	.word	0x2400b8cc
 801c808:	2400b8c2 	.word	0x2400b8c2
 801c80c:	2400b8c0 	.word	0x2400b8c0
 801c810:	2400b8ca 	.word	0x2400b8ca
 801c814:	2400b8c4 	.word	0x2400b8c4
 801c818:	1961      	adds	r1, r4, r5
 801c81a:	ab07      	add	r3, sp, #28
 801c81c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801c820:	6849      	ldr	r1, [r1, #4]
 801c822:	c303      	stmia	r3!, {r0, r1}
 801c824:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801c828:	a807      	add	r0, sp, #28
 801c82a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c82e:	2b13      	cmp	r3, #19
 801c830:	440b      	add	r3, r1
 801c832:	bfd8      	it	le
 801c834:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801c838:	1a9b      	subs	r3, r3, r2
 801c83a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801c83e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c842:	f7ff f863 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c846:	a807      	add	r0, sp, #28
 801c848:	f7fb fcf1 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c84c:	2800      	cmp	r0, #0
 801c84e:	d199      	bne.n	801c784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c850:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801c854:	4425      	add	r5, r4
 801c856:	f8d8 0000 	ldr.w	r0, [r8]
 801c85a:	f1bc 0f14 	cmp.w	ip, #20
 801c85e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c862:	f8d0 e000 	ldr.w	lr, [r0]
 801c866:	bfa8      	it	ge
 801c868:	f04f 0c14 	movge.w	ip, #20
 801c86c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801c870:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c874:	fa1f fc8c 	uxth.w	ip, ip
 801c878:	f8cd c000 	str.w	ip, [sp]
 801c87c:	f8de a088 	ldr.w	sl, [lr, #136]	@ 0x88
 801c880:	47d0      	blx	sl
 801c882:	4682      	mov	sl, r0
 801c884:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c888:	a807      	add	r0, sp, #28
 801c88a:	f7ff f825 	bl	801b8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801c88e:	6823      	ldr	r3, [r4, #0]
 801c890:	4620      	mov	r0, r4
 801c892:	a907      	add	r1, sp, #28
 801c894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c896:	4798      	blx	r3
 801c898:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	@ 0xac
 801c89c:	eba0 000a 	sub.w	r0, r0, sl
 801c8a0:	b200      	sxth	r0, r0
 801c8a2:	f8a5 00ac 	strh.w	r0, [r5, #172]	@ 0xac
 801c8a6:	2800      	cmp	r0, #0
 801c8a8:	f47f af6c 	bne.w	801c784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c8ac:	b2b1      	uxth	r1, r6
 801c8ae:	4648      	mov	r0, r9
 801c8b0:	f7ff fa9a 	bl	801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c8b4:	e766      	b.n	801c784 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801c8b6:	d10c      	bne.n	801c8d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801c8b8:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	@ 0xac
 801c8bc:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	@ 0xac
 801c8c0:	45b4      	cmp	ip, r6
 801c8c2:	bfb4      	ite	lt
 801c8c4:	4684      	movlt	ip, r0
 801c8c6:	46d4      	movge	ip, sl
 801c8c8:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	@ 0xae
 801c8cc:	4433      	add	r3, r6
 801c8ce:	b21b      	sxth	r3, r3
 801c8d0:	e750      	b.n	801c774 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801c8d2:	4575      	cmp	r5, lr
 801c8d4:	46d4      	mov	ip, sl
 801c8d6:	bfa8      	it	ge
 801c8d8:	4675      	movge	r5, lr
 801c8da:	e74e      	b.n	801c77a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801c8dc:	eb0b 0006 	add.w	r0, fp, r6
 801c8e0:	4426      	add	r6, r4
 801c8e2:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	@ 0xae
 801c8e6:	f1b9 0f13 	cmp.w	r9, #19
 801c8ea:	bfdc      	itt	le
 801c8ec:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	@ 0xaa
 801c8f0:	444d      	addle	r5, r9
 801c8f2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c8f6:	bfd8      	it	le
 801c8f8:	b22d      	sxthle	r5, r5
 801c8fa:	f7fb fc98 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c8fe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c902:	2800      	cmp	r0, #0
 801c904:	f47f af16 	bne.w	801c734 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801c908:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	@ 0xaa
 801c90c:	fa1f f989 	uxth.w	r9, r9
 801c910:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c914:	eba5 050c 	sub.w	r5, r5, ip
 801c918:	fa1f f28c 	uxth.w	r2, ip
 801c91c:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	@ 0xa8
 801c920:	eb02 0009 	add.w	r0, r2, r9
 801c924:	2d14      	cmp	r5, #20
 801c926:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	@ 0xac
 801c92a:	bfa8      	it	ge
 801c92c:	2514      	movge	r5, #20
 801c92e:	b200      	sxth	r0, r0
 801c930:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c934:	b289      	uxth	r1, r1
 801c936:	fa1f fe85 	uxth.w	lr, r5
 801c93a:	eba0 000c 	sub.w	r0, r0, ip
 801c93e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801c942:	4586      	cmp	lr, r0
 801c944:	f8d8 0000 	ldr.w	r0, [r8]
 801c948:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c94c:	b29b      	uxth	r3, r3
 801c94e:	bfb8      	it	lt
 801c950:	46f1      	movlt	r9, lr
 801c952:	6805      	ldr	r5, [r0, #0]
 801c954:	f8cd 9000 	str.w	r9, [sp]
 801c958:	f8d5 5088 	ldr.w	r5, [r5, #136]	@ 0x88
 801c95c:	47a8      	blx	r5
 801c95e:	6823      	ldr	r3, [r4, #0]
 801c960:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801c964:	a907      	add	r1, sp, #28
 801c966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c968:	4620      	mov	r0, r4
 801c96a:	4798      	blx	r3
 801c96c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801c970:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	@ 0xae
 801c974:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	@ 0xaa
 801c978:	1a5b      	subs	r3, r3, r1
 801c97a:	440a      	add	r2, r1
 801c97c:	b21b      	sxth	r3, r3
 801c97e:	f8a6 20aa 	strh.w	r2, [r6, #170]	@ 0xaa
 801c982:	f8a6 30ae 	strh.w	r3, [r6, #174]	@ 0xae
 801c986:	2b00      	cmp	r3, #0
 801c988:	f47f aecf 	bne.w	801c72a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c98c:	fa1f f18a 	uxth.w	r1, sl
 801c990:	4658      	mov	r0, fp
 801c992:	f7ff fa29 	bl	801bde8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c996:	e6c8      	b.n	801c72a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801c998:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	@ 0xe8
 801c99c:	42ab      	cmp	r3, r5
 801c99e:	f67f aea0 	bls.w	801c6e2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801c9a2:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c9a6:	ab07      	add	r3, sp, #28
 801c9a8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c9ac:	6851      	ldr	r1, [r2, #4]
 801c9ae:	c303      	stmia	r3!, {r0, r1}
 801c9b0:	a807      	add	r0, sp, #28
 801c9b2:	f7fb fc3c 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 801c9b6:	b920      	cbnz	r0, 801c9c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801c9b8:	6823      	ldr	r3, [r4, #0]
 801c9ba:	a907      	add	r1, sp, #28
 801c9bc:	4620      	mov	r0, r4
 801c9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c9c0:	4798      	blx	r3
 801c9c2:	3501      	adds	r5, #1
 801c9c4:	b2ad      	uxth	r5, r5
 801c9c6:	e7e7      	b.n	801c998 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801c9c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c9c8:	4b03      	ldr	r3, [pc, #12]	@ (801c9d8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	801a      	strh	r2, [r3, #0]
 801c9ce:	805a      	strh	r2, [r3, #2]
 801c9d0:	809a      	strh	r2, [r3, #4]
 801c9d2:	80da      	strh	r2, [r3, #6]
 801c9d4:	4770      	bx	lr
 801c9d6:	bf00      	nop
 801c9d8:	2400b910 	.word	0x2400b910

0801c9dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9e0:	b09d      	sub	sp, #116	@ 0x74
 801c9e2:	4606      	mov	r6, r0
 801c9e4:	4614      	mov	r4, r2
 801c9e6:	468a      	mov	sl, r1
 801c9e8:	a803      	add	r0, sp, #12
 801c9ea:	461d      	mov	r5, r3
 801c9ec:	f000 fe48 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801c9f0:	6833      	ldr	r3, [r6, #0]
 801c9f2:	4630      	mov	r0, r6
 801c9f4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801c9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c9fa:	4798      	blx	r3
 801c9fc:	6833      	ldr	r3, [r6, #0]
 801c9fe:	4607      	mov	r7, r0
 801ca00:	4630      	mov	r0, r6
 801ca02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ca04:	4798      	blx	r3
 801ca06:	462a      	mov	r2, r5
 801ca08:	2500      	movs	r5, #0
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	9000      	str	r0, [sp, #0]
 801ca0e:	463b      	mov	r3, r7
 801ca10:	462c      	mov	r4, r5
 801ca12:	46a9      	mov	r9, r5
 801ca14:	46a8      	mov	r8, r5
 801ca16:	a803      	add	r0, sp, #12
 801ca18:	f000 fe85 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	9302      	str	r3, [sp, #8]
 801ca20:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801ca24:	429c      	cmp	r4, r3
 801ca26:	d002      	beq.n	801ca2e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ca28:	455c      	cmp	r4, fp
 801ca2a:	bf18      	it	ne
 801ca2c:	4625      	movne	r5, r4
 801ca2e:	ab02      	add	r3, sp, #8
 801ca30:	4632      	mov	r2, r6
 801ca32:	4651      	mov	r1, sl
 801ca34:	a803      	add	r0, sp, #12
 801ca36:	f001 f977 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ca3a:	4604      	mov	r4, r0
 801ca3c:	b108      	cbz	r0, 801ca42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ca3e:	280a      	cmp	r0, #10
 801ca40:	d10a      	bne.n	801ca58 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ca42:	45c1      	cmp	r9, r8
 801ca44:	bf38      	it	cc
 801ca46:	46c1      	movcc	r9, r8
 801ca48:	f04f 0800 	mov.w	r8, #0
 801ca4c:	2c00      	cmp	r4, #0
 801ca4e:	d1e5      	bne.n	801ca1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ca50:	4648      	mov	r0, r9
 801ca52:	b01d      	add	sp, #116	@ 0x74
 801ca54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca58:	9a02      	ldr	r2, [sp, #8]
 801ca5a:	2a00      	cmp	r2, #0
 801ca5c:	d0de      	beq.n	801ca1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801ca5e:	7b57      	ldrb	r7, [r2, #13]
 801ca60:	4629      	mov	r1, r5
 801ca62:	6833      	ldr	r3, [r6, #0]
 801ca64:	007f      	lsls	r7, r7, #1
 801ca66:	8894      	ldrh	r4, [r2, #4]
 801ca68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ca6a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801ca6e:	7a97      	ldrb	r7, [r2, #10]
 801ca70:	4307      	orrs	r7, r0
 801ca72:	4630      	mov	r0, r6
 801ca74:	4798      	blx	r3
 801ca76:	4438      	add	r0, r7
 801ca78:	4480      	add	r8, r0
 801ca7a:	fa1f f888 	uxth.w	r8, r8
 801ca7e:	e7e5      	b.n	801ca4c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ca80 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ca80:	b508      	push	{r3, lr}
 801ca82:	6803      	ldr	r3, [r0, #0]
 801ca84:	68db      	ldr	r3, [r3, #12]
 801ca86:	4798      	blx	r3
 801ca88:	b128      	cbz	r0, 801ca96 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ca8a:	7b43      	ldrb	r3, [r0, #13]
 801ca8c:	7a80      	ldrb	r0, [r0, #10]
 801ca8e:	005b      	lsls	r3, r3, #1
 801ca90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ca94:	4318      	orrs	r0, r3
 801ca96:	bd08      	pop	{r3, pc}

0801ca98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ca98:	b40e      	push	{r1, r2, r3}
 801ca9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca9c:	b09e      	sub	sp, #120	@ 0x78
 801ca9e:	4605      	mov	r5, r0
 801caa0:	ab23      	add	r3, sp, #140	@ 0x8c
 801caa2:	a805      	add	r0, sp, #20
 801caa4:	f853 4b04 	ldr.w	r4, [r3], #4
 801caa8:	9303      	str	r3, [sp, #12]
 801caaa:	f000 fde9 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801caae:	682b      	ldr	r3, [r5, #0]
 801cab0:	4628      	mov	r0, r5
 801cab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cab4:	4798      	blx	r3
 801cab6:	682b      	ldr	r3, [r5, #0]
 801cab8:	4606      	mov	r6, r0
 801caba:	4628      	mov	r0, r5
 801cabc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cabe:	4798      	blx	r3
 801cac0:	4633      	mov	r3, r6
 801cac2:	4621      	mov	r1, r4
 801cac4:	ae1e      	add	r6, sp, #120	@ 0x78
 801cac6:	2400      	movs	r4, #0
 801cac8:	9000      	str	r0, [sp, #0]
 801caca:	9a03      	ldr	r2, [sp, #12]
 801cacc:	a805      	add	r0, sp, #20
 801cace:	f000 fe2a 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cad2:	f846 4d68 	str.w	r4, [r6, #-104]!
 801cad6:	462a      	mov	r2, r5
 801cad8:	4633      	mov	r3, r6
 801cada:	4621      	mov	r1, r4
 801cadc:	a805      	add	r0, sp, #20
 801cade:	f001 f923 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cae2:	b300      	cbz	r0, 801cb26 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801cae4:	280a      	cmp	r0, #10
 801cae6:	d01a      	beq.n	801cb1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801cae8:	9f04      	ldr	r7, [sp, #16]
 801caea:	b1c7      	cbz	r7, 801cb1e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801caec:	7b78      	ldrb	r0, [r7, #13]
 801caee:	7a3b      	ldrb	r3, [r7, #8]
 801caf0:	00c1      	lsls	r1, r0, #3
 801caf2:	88aa      	ldrh	r2, [r5, #4]
 801caf4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801caf8:	4319      	orrs	r1, r3
 801cafa:	0643      	lsls	r3, r0, #25
 801cafc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801cb00:	bf48      	it	mi
 801cb02:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801cb06:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801cb0a:	bf48      	it	mi
 801cb0c:	b219      	sxthmi	r1, r3
 801cb0e:	79fb      	ldrb	r3, [r7, #7]
 801cb10:	4303      	orrs	r3, r0
 801cb12:	4413      	add	r3, r2
 801cb14:	1a5b      	subs	r3, r3, r1
 801cb16:	b29b      	uxth	r3, r3
 801cb18:	42a3      	cmp	r3, r4
 801cb1a:	bfc8      	it	gt
 801cb1c:	b21c      	sxthgt	r4, r3
 801cb1e:	4633      	mov	r3, r6
 801cb20:	462a      	mov	r2, r5
 801cb22:	2100      	movs	r1, #0
 801cb24:	e7da      	b.n	801cadc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801cb26:	b2a0      	uxth	r0, r4
 801cb28:	b01e      	add	sp, #120	@ 0x78
 801cb2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cb2e:	b003      	add	sp, #12
 801cb30:	4770      	bx	lr

0801cb32 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801cb32:	b40e      	push	{r1, r2, r3}
 801cb34:	b570      	push	{r4, r5, r6, lr}
 801cb36:	b09d      	sub	sp, #116	@ 0x74
 801cb38:	4604      	mov	r4, r0
 801cb3a:	ab21      	add	r3, sp, #132	@ 0x84
 801cb3c:	a803      	add	r0, sp, #12
 801cb3e:	f853 5b04 	ldr.w	r5, [r3], #4
 801cb42:	9302      	str	r3, [sp, #8]
 801cb44:	f000 fd9c 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801cb48:	6823      	ldr	r3, [r4, #0]
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cb4e:	4798      	blx	r3
 801cb50:	6823      	ldr	r3, [r4, #0]
 801cb52:	4606      	mov	r6, r0
 801cb54:	4620      	mov	r0, r4
 801cb56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cb58:	2401      	movs	r4, #1
 801cb5a:	4798      	blx	r3
 801cb5c:	4633      	mov	r3, r6
 801cb5e:	9000      	str	r0, [sp, #0]
 801cb60:	4629      	mov	r1, r5
 801cb62:	9a02      	ldr	r2, [sp, #8]
 801cb64:	a803      	add	r0, sp, #12
 801cb66:	f000 fdde 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cb6a:	a803      	add	r0, sp, #12
 801cb6c:	f001 f9d6 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb70:	b2a3      	uxth	r3, r4
 801cb72:	b138      	cbz	r0, 801cb84 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801cb74:	280a      	cmp	r0, #10
 801cb76:	a803      	add	r0, sp, #12
 801cb78:	bf04      	itt	eq
 801cb7a:	3301      	addeq	r3, #1
 801cb7c:	b21c      	sxtheq	r4, r3
 801cb7e:	f001 f9cd 	bl	801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801cb82:	e7f5      	b.n	801cb70 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801cb84:	4618      	mov	r0, r3
 801cb86:	b01d      	add	sp, #116	@ 0x74
 801cb88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cb8c:	b003      	add	sp, #12
 801cb8e:	4770      	bx	lr

0801cb90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801cb90:	b40e      	push	{r1, r2, r3}
 801cb92:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb94:	b09e      	sub	sp, #120	@ 0x78
 801cb96:	4604      	mov	r4, r0
 801cb98:	ab23      	add	r3, sp, #140	@ 0x8c
 801cb9a:	a805      	add	r0, sp, #20
 801cb9c:	f853 5b04 	ldr.w	r5, [r3], #4
 801cba0:	9303      	str	r3, [sp, #12]
 801cba2:	f000 fd6d 	bl	801d680 <_ZN8touchgfx12TextProviderC1Ev>
 801cba6:	6823      	ldr	r3, [r4, #0]
 801cba8:	4620      	mov	r0, r4
 801cbaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801cbac:	4798      	blx	r3
 801cbae:	6823      	ldr	r3, [r4, #0]
 801cbb0:	4606      	mov	r6, r0
 801cbb2:	4620      	mov	r0, r4
 801cbb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cbb6:	4798      	blx	r3
 801cbb8:	4633      	mov	r3, r6
 801cbba:	4629      	mov	r1, r5
 801cbbc:	9000      	str	r0, [sp, #0]
 801cbbe:	9a03      	ldr	r2, [sp, #12]
 801cbc0:	a805      	add	r0, sp, #20
 801cbc2:	f000 fdb0 	bl	801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801cbc6:	ad1e      	add	r5, sp, #120	@ 0x78
 801cbc8:	2100      	movs	r1, #0
 801cbca:	26ff      	movs	r6, #255	@ 0xff
 801cbcc:	4622      	mov	r2, r4
 801cbce:	a805      	add	r0, sp, #20
 801cbd0:	f845 1d68 	str.w	r1, [r5, #-104]!
 801cbd4:	462b      	mov	r3, r5
 801cbd6:	f001 f8a7 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cbda:	b1d8      	cbz	r0, 801cc14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801cbdc:	280a      	cmp	r0, #10
 801cbde:	d012      	beq.n	801cc06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cbe0:	9804      	ldr	r0, [sp, #16]
 801cbe2:	b180      	cbz	r0, 801cc06 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801cbe4:	7b47      	ldrb	r7, [r0, #13]
 801cbe6:	7922      	ldrb	r2, [r4, #4]
 801cbe8:	00fb      	lsls	r3, r7, #3
 801cbea:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801cbee:	7a03      	ldrb	r3, [r0, #8]
 801cbf0:	430b      	orrs	r3, r1
 801cbf2:	0679      	lsls	r1, r7, #25
 801cbf4:	bf44      	itt	mi
 801cbf6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cbfa:	b21b      	sxthmi	r3, r3
 801cbfc:	1ad3      	subs	r3, r2, r3
 801cbfe:	b2db      	uxtb	r3, r3
 801cc00:	429e      	cmp	r6, r3
 801cc02:	bf28      	it	cs
 801cc04:	461e      	movcs	r6, r3
 801cc06:	462b      	mov	r3, r5
 801cc08:	4622      	mov	r2, r4
 801cc0a:	2100      	movs	r1, #0
 801cc0c:	a805      	add	r0, sp, #20
 801cc0e:	f001 f88b 	bl	801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801cc12:	e7e2      	b.n	801cbda <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801cc14:	4630      	mov	r0, r6
 801cc16:	b01e      	add	sp, #120	@ 0x78
 801cc18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801cc1c:	b003      	add	sp, #12
 801cc1e:	4770      	bx	lr

0801cc20 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801cc20:	b513      	push	{r0, r1, r4, lr}
 801cc22:	6803      	ldr	r3, [r0, #0]
 801cc24:	2400      	movs	r4, #0
 801cc26:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801cc2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cc2e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801cc32:	4669      	mov	r1, sp
 801cc34:	691b      	ldr	r3, [r3, #16]
 801cc36:	9400      	str	r4, [sp, #0]
 801cc38:	f8ad 2006 	strh.w	r2, [sp, #6]
 801cc3c:	4798      	blx	r3
 801cc3e:	b002      	add	sp, #8
 801cc40:	bd10      	pop	{r4, pc}

0801cc42 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801cc42:	b538      	push	{r3, r4, r5, lr}
 801cc44:	680b      	ldr	r3, [r1, #0]
 801cc46:	460c      	mov	r4, r1
 801cc48:	4605      	mov	r5, r0
 801cc4a:	68db      	ldr	r3, [r3, #12]
 801cc4c:	4798      	blx	r3
 801cc4e:	6823      	ldr	r3, [r4, #0]
 801cc50:	4620      	mov	r0, r4
 801cc52:	4629      	mov	r1, r5
 801cc54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc56:	4798      	blx	r3
 801cc58:	4628      	mov	r0, r5
 801cc5a:	bd38      	pop	{r3, r4, r5, pc}

0801cc5c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801cc5c:	b410      	push	{r4}
 801cc5e:	880a      	ldrh	r2, [r1, #0]
 801cc60:	8884      	ldrh	r4, [r0, #4]
 801cc62:	4422      	add	r2, r4
 801cc64:	800a      	strh	r2, [r1, #0]
 801cc66:	884a      	ldrh	r2, [r1, #2]
 801cc68:	88c4      	ldrh	r4, [r0, #6]
 801cc6a:	4422      	add	r2, r4
 801cc6c:	804a      	strh	r2, [r1, #2]
 801cc6e:	6940      	ldr	r0, [r0, #20]
 801cc70:	b120      	cbz	r0, 801cc7c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801cc72:	6803      	ldr	r3, [r0, #0]
 801cc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cc7a:	4718      	bx	r3
 801cc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc80:	4770      	bx	lr

0801cc82 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801cc82:	b570      	push	{r4, r5, r6, lr}
 801cc84:	8882      	ldrh	r2, [r0, #4]
 801cc86:	460c      	mov	r4, r1
 801cc88:	880b      	ldrh	r3, [r1, #0]
 801cc8a:	4605      	mov	r5, r0
 801cc8c:	4413      	add	r3, r2
 801cc8e:	800b      	strh	r3, [r1, #0]
 801cc90:	884b      	ldrh	r3, [r1, #2]
 801cc92:	88c2      	ldrh	r2, [r0, #6]
 801cc94:	4413      	add	r3, r2
 801cc96:	804b      	strh	r3, [r1, #2]
 801cc98:	1d01      	adds	r1, r0, #4
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	f7fb fa84 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801cca0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	dd0b      	ble.n	801ccc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801cca8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	dd07      	ble.n	801ccc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ccb0:	6968      	ldr	r0, [r5, #20]
 801ccb2:	b128      	cbz	r0, 801ccc0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ccb4:	6803      	ldr	r3, [r0, #0]
 801ccb6:	4621      	mov	r1, r4
 801ccb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ccba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ccbe:	4718      	bx	r3
 801ccc0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ccc4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ccc4:	b570      	push	{r4, r5, r6, lr}
 801ccc6:	8882      	ldrh	r2, [r0, #4]
 801ccc8:	460c      	mov	r4, r1
 801ccca:	880b      	ldrh	r3, [r1, #0]
 801cccc:	4605      	mov	r5, r0
 801ccce:	4413      	add	r3, r2
 801ccd0:	800b      	strh	r3, [r1, #0]
 801ccd2:	884b      	ldrh	r3, [r1, #2]
 801ccd4:	88c2      	ldrh	r2, [r0, #6]
 801ccd6:	4413      	add	r3, r2
 801ccd8:	804b      	strh	r3, [r1, #2]
 801ccda:	1d01      	adds	r1, r0, #4
 801ccdc:	4620      	mov	r0, r4
 801ccde:	f7fb fa63 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801cce2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	dd15      	ble.n	801cd16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801ccea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	dd11      	ble.n	801cd16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801ccf2:	6968      	ldr	r0, [r5, #20]
 801ccf4:	b128      	cbz	r0, 801cd02 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ccf6:	6803      	ldr	r3, [r0, #0]
 801ccf8:	691b      	ldr	r3, [r3, #16]
 801ccfa:	4621      	mov	r1, r4
 801ccfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd00:	4718      	bx	r3
 801cd02:	4b05      	ldr	r3, [pc, #20]	@ (801cd18 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	3304      	adds	r3, #4
 801cd08:	429d      	cmp	r5, r3
 801cd0a:	d104      	bne.n	801cd16 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801cd0c:	f7fe ffbe 	bl	801bc8c <_ZN8touchgfx11Application11getInstanceEv>
 801cd10:	6803      	ldr	r3, [r0, #0]
 801cd12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cd14:	e7f1      	b.n	801ccfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801cd16:	bd70      	pop	{r4, r5, r6, pc}
 801cd18:	2400b908 	.word	0x2400b908

0801cd1c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801cd1c:	b570      	push	{r4, r5, r6, lr}
 801cd1e:	4604      	mov	r4, r0
 801cd20:	4616      	mov	r6, r2
 801cd22:	460d      	mov	r5, r1
 801cd24:	b901      	cbnz	r1, 801cd28 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801cd26:	b192      	cbz	r2, 801cd4e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801cd28:	6823      	ldr	r3, [r4, #0]
 801cd2a:	4620      	mov	r0, r4
 801cd2c:	695b      	ldr	r3, [r3, #20]
 801cd2e:	4798      	blx	r3
 801cd30:	88e2      	ldrh	r2, [r4, #6]
 801cd32:	88a1      	ldrh	r1, [r4, #4]
 801cd34:	4620      	mov	r0, r4
 801cd36:	4432      	add	r2, r6
 801cd38:	4429      	add	r1, r5
 801cd3a:	b212      	sxth	r2, r2
 801cd3c:	b209      	sxth	r1, r1
 801cd3e:	f7e7 f9bd 	bl	80040bc <_ZN8touchgfx8Drawable5setXYEss>
 801cd42:	6823      	ldr	r3, [r4, #0]
 801cd44:	4620      	mov	r0, r4
 801cd46:	695b      	ldr	r3, [r3, #20]
 801cd48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cd4c:	4718      	bx	r3
 801cd4e:	bd70      	pop	{r4, r5, r6, pc}

0801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801cd50:	b510      	push	{r4, lr}
 801cd52:	2300      	movs	r3, #0
 801cd54:	4604      	mov	r4, r0
 801cd56:	4608      	mov	r0, r1
 801cd58:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801cd5c:	8023      	strh	r3, [r4, #0]
 801cd5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801cd62:	8063      	strh	r3, [r4, #2]
 801cd64:	6803      	ldr	r3, [r0, #0]
 801cd66:	80a1      	strh	r1, [r4, #4]
 801cd68:	4621      	mov	r1, r4
 801cd6a:	80e2      	strh	r2, [r4, #6]
 801cd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cd6e:	4798      	blx	r3
 801cd70:	4620      	mov	r0, r4
 801cd72:	bd10      	pop	{r4, pc}

0801cd74 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801cd74:	b530      	push	{r4, r5, lr}
 801cd76:	8083      	strh	r3, [r0, #4]
 801cd78:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801cd7c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801cd80:	7183      	strb	r3, [r0, #6]
 801cd82:	79c3      	ldrb	r3, [r0, #7]
 801cd84:	6101      	str	r1, [r0, #16]
 801cd86:	f365 0306 	bfi	r3, r5, #0, #7
 801cd8a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801cd8e:	8282      	strh	r2, [r0, #20]
 801cd90:	f365 13c7 	bfi	r3, r5, #7, #1
 801cd94:	71c3      	strb	r3, [r0, #7]
 801cd96:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801cd9a:	7203      	strb	r3, [r0, #8]
 801cd9c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801cda0:	7243      	strb	r3, [r0, #9]
 801cda2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cda6:	8143      	strh	r3, [r0, #10]
 801cda8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 801cdac:	8183      	strh	r3, [r0, #12]
 801cdae:	4b01      	ldr	r3, [pc, #4]	@ (801cdb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801cdb0:	6003      	str	r3, [r0, #0]
 801cdb2:	bd30      	pop	{r4, r5, pc}
 801cdb4:	0802f52c 	.word	0x0802f52c

0801cdb8 <_ZNK8touchgfx9ConstFont4findEt>:
 801cdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cdba:	6904      	ldr	r4, [r0, #16]
 801cdbc:	b3bc      	cbz	r4, 801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdbe:	88a3      	ldrh	r3, [r4, #4]
 801cdc0:	8a82      	ldrh	r2, [r0, #20]
 801cdc2:	1acb      	subs	r3, r1, r3
 801cdc4:	f102 32ff 	add.w	r2, r2, #4294967295
 801cdc8:	d431      	bmi.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdca:	4293      	cmp	r3, r2
 801cdcc:	dd0c      	ble.n	801cde8 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801cdce:	230e      	movs	r3, #14
 801cdd0:	fb03 4302 	mla	r3, r3, r2, r4
 801cdd4:	889b      	ldrh	r3, [r3, #4]
 801cdd6:	1a5b      	subs	r3, r3, r1
 801cdd8:	1ad3      	subs	r3, r2, r3
 801cdda:	429a      	cmp	r2, r3
 801cddc:	db27      	blt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdde:	2b00      	cmp	r3, #0
 801cde0:	bfbc      	itt	lt
 801cde2:	2302      	movlt	r3, #2
 801cde4:	fb92 f3f3 	sdivlt	r3, r2, r3
 801cde8:	2500      	movs	r5, #0
 801cdea:	260e      	movs	r6, #14
 801cdec:	4295      	cmp	r5, r2
 801cdee:	dc1e      	bgt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801cdf0:	fb06 4003 	mla	r0, r6, r3, r4
 801cdf4:	8887      	ldrh	r7, [r0, #4]
 801cdf6:	42b9      	cmp	r1, r7
 801cdf8:	d01a      	beq.n	801ce30 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801cdfa:	d20d      	bcs.n	801ce18 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801cdfc:	1e5a      	subs	r2, r3, #1
 801cdfe:	4295      	cmp	r5, r2
 801ce00:	dc15      	bgt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ce02:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801ce06:	1a5b      	subs	r3, r3, r1
 801ce08:	1ad3      	subs	r3, r2, r3
 801ce0a:	429a      	cmp	r2, r3
 801ce0c:	db0f      	blt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ce0e:	429d      	cmp	r5, r3
 801ce10:	ddec      	ble.n	801cdec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ce12:	1953      	adds	r3, r2, r5
 801ce14:	105b      	asrs	r3, r3, #1
 801ce16:	e7e9      	b.n	801cdec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ce18:	1c5d      	adds	r5, r3, #1
 801ce1a:	42aa      	cmp	r2, r5
 801ce1c:	db07      	blt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ce1e:	8a43      	ldrh	r3, [r0, #18]
 801ce20:	1acb      	subs	r3, r1, r3
 801ce22:	442b      	add	r3, r5
 801ce24:	429d      	cmp	r5, r3
 801ce26:	dc02      	bgt.n	801ce2e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	dadf      	bge.n	801cdec <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801ce2c:	e7f1      	b.n	801ce12 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801ce2e:	2000      	movs	r0, #0
 801ce30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce32 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801ce32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce34:	4604      	mov	r4, r0
 801ce36:	4617      	mov	r7, r2
 801ce38:	461e      	mov	r6, r3
 801ce3a:	b911      	cbnz	r1, 801ce42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801ce3c:	2500      	movs	r5, #0
 801ce3e:	4628      	mov	r0, r5
 801ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce42:	290a      	cmp	r1, #10
 801ce44:	d0fa      	beq.n	801ce3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce46:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801ce4a:	4291      	cmp	r1, r2
 801ce4c:	d0f6      	beq.n	801ce3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce4e:	f242 020b 	movw	r2, #8203	@ 0x200b
 801ce52:	4291      	cmp	r1, r2
 801ce54:	d0f2      	beq.n	801ce3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce56:	f7ff ffaf 	bl	801cdb8 <_ZNK8touchgfx9ConstFont4findEt>
 801ce5a:	4605      	mov	r5, r0
 801ce5c:	b950      	cbnz	r0, 801ce74 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801ce5e:	6823      	ldr	r3, [r4, #0]
 801ce60:	4620      	mov	r0, r4
 801ce62:	691b      	ldr	r3, [r3, #16]
 801ce64:	4798      	blx	r3
 801ce66:	4601      	mov	r1, r0
 801ce68:	4620      	mov	r0, r4
 801ce6a:	f7ff ffa5 	bl	801cdb8 <_ZNK8touchgfx9ConstFont4findEt>
 801ce6e:	4605      	mov	r5, r0
 801ce70:	2800      	cmp	r0, #0
 801ce72:	d0e3      	beq.n	801ce3c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801ce74:	6823      	ldr	r3, [r4, #0]
 801ce76:	4629      	mov	r1, r5
 801ce78:	4620      	mov	r0, r4
 801ce7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ce7c:	4798      	blx	r3
 801ce7e:	6038      	str	r0, [r7, #0]
 801ce80:	6823      	ldr	r3, [r4, #0]
 801ce82:	4620      	mov	r0, r4
 801ce84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce86:	4798      	blx	r3
 801ce88:	7030      	strb	r0, [r6, #0]
 801ce8a:	e7d8      	b.n	801ce3e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801ce8c <_ZN8touchgfx4clzuEm>:
 801ce8c:	4603      	mov	r3, r0
 801ce8e:	b1c8      	cbz	r0, 801cec4 <_ZN8touchgfx4clzuEm+0x38>
 801ce90:	0c02      	lsrs	r2, r0, #16
 801ce92:	0412      	lsls	r2, r2, #16
 801ce94:	b9a2      	cbnz	r2, 801cec0 <_ZN8touchgfx4clzuEm+0x34>
 801ce96:	0403      	lsls	r3, r0, #16
 801ce98:	2010      	movs	r0, #16
 801ce9a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801ce9e:	bf04      	itt	eq
 801cea0:	021b      	lsleq	r3, r3, #8
 801cea2:	3008      	addeq	r0, #8
 801cea4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801cea8:	bf04      	itt	eq
 801ceaa:	011b      	lsleq	r3, r3, #4
 801ceac:	3004      	addeq	r0, #4
 801ceae:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801ceb2:	bf04      	itt	eq
 801ceb4:	009b      	lsleq	r3, r3, #2
 801ceb6:	3002      	addeq	r0, #2
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	db04      	blt.n	801cec6 <_ZN8touchgfx4clzuEm+0x3a>
 801cebc:	3001      	adds	r0, #1
 801cebe:	4770      	bx	lr
 801cec0:	2000      	movs	r0, #0
 801cec2:	e7ea      	b.n	801ce9a <_ZN8touchgfx4clzuEm+0xe>
 801cec4:	2020      	movs	r0, #32
 801cec6:	4770      	bx	lr

0801cec8 <_ZN8touchgfx7muldivuEmmmRm>:
 801cec8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cecc:	4680      	mov	r8, r0
 801cece:	460f      	mov	r7, r1
 801ced0:	4615      	mov	r5, r2
 801ced2:	461e      	mov	r6, r3
 801ced4:	f7ff ffda 	bl	801ce8c <_ZN8touchgfx4clzuEm>
 801ced8:	b998      	cbnz	r0, 801cf02 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801ceda:	4608      	mov	r0, r1
 801cedc:	f7ff ffd6 	bl	801ce8c <_ZN8touchgfx4clzuEm>
 801cee0:	2800      	cmp	r0, #0
 801cee2:	dd08      	ble.n	801cef6 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801cee4:	4633      	mov	r3, r6
 801cee6:	462a      	mov	r2, r5
 801cee8:	4641      	mov	r1, r8
 801ceea:	4638      	mov	r0, r7
 801ceec:	f7ff ffec 	bl	801cec8 <_ZN8touchgfx7muldivuEmmmRm>
 801cef0:	b003      	add	sp, #12
 801cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cef6:	f04f 33ff 	mov.w	r3, #4294967295
 801cefa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801cefe:	6033      	str	r3, [r6, #0]
 801cf00:	e7f6      	b.n	801cef0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801cf02:	fa31 f900 	lsrs.w	r9, r1, r0
 801cf06:	fb01 f308 	mul.w	r3, r1, r8
 801cf0a:	d105      	bne.n	801cf18 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801cf0c:	fbb3 f0f5 	udiv	r0, r3, r5
 801cf10:	fb05 3510 	mls	r5, r5, r0, r3
 801cf14:	6035      	str	r5, [r6, #0]
 801cf16:	e7eb      	b.n	801cef0 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801cf18:	2301      	movs	r3, #1
 801cf1a:	fa08 fb00 	lsl.w	fp, r8, r0
 801cf1e:	462a      	mov	r2, r5
 801cf20:	4641      	mov	r1, r8
 801cf22:	fa03 f000 	lsl.w	r0, r3, r0
 801cf26:	4633      	mov	r3, r6
 801cf28:	fbbb faf5 	udiv	sl, fp, r5
 801cf2c:	3801      	subs	r0, #1
 801cf2e:	fb09 f40a 	mul.w	r4, r9, sl
 801cf32:	4038      	ands	r0, r7
 801cf34:	f7ff ffc8 	bl	801cec8 <_ZN8touchgfx7muldivuEmmmRm>
 801cf38:	462a      	mov	r2, r5
 801cf3a:	4607      	mov	r7, r0
 801cf3c:	ab01      	add	r3, sp, #4
 801cf3e:	fb05 b11a 	mls	r1, r5, sl, fp
 801cf42:	4648      	mov	r0, r9
 801cf44:	f7ff ffc0 	bl	801cec8 <_ZN8touchgfx7muldivuEmmmRm>
 801cf48:	9b01      	ldr	r3, [sp, #4]
 801cf4a:	6832      	ldr	r2, [r6, #0]
 801cf4c:	441a      	add	r2, r3
 801cf4e:	fbb2 f3f5 	udiv	r3, r2, r5
 801cf52:	441c      	add	r4, r3
 801cf54:	fb05 2513 	mls	r5, r5, r3, r2
 801cf58:	443c      	add	r4, r7
 801cf5a:	4420      	add	r0, r4
 801cf5c:	e7da      	b.n	801cf14 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801cf5e <_ZN8touchgfx6muldivElllRl>:
 801cf5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cf60:	2800      	cmp	r0, #0
 801cf62:	461e      	mov	r6, r3
 801cf64:	bfba      	itte	lt
 801cf66:	4240      	neglt	r0, r0
 801cf68:	f04f 34ff 	movlt.w	r4, #4294967295
 801cf6c:	2401      	movge	r4, #1
 801cf6e:	2900      	cmp	r1, #0
 801cf70:	bfbc      	itt	lt
 801cf72:	4249      	neglt	r1, r1
 801cf74:	4264      	neglt	r4, r4
 801cf76:	2a00      	cmp	r2, #0
 801cf78:	bfb6      	itet	lt
 801cf7a:	4265      	neglt	r5, r4
 801cf7c:	4625      	movge	r5, r4
 801cf7e:	4252      	neglt	r2, r2
 801cf80:	4288      	cmp	r0, r1
 801cf82:	bfc2      	ittt	gt
 801cf84:	4603      	movgt	r3, r0
 801cf86:	4608      	movgt	r0, r1
 801cf88:	4619      	movgt	r1, r3
 801cf8a:	ab01      	add	r3, sp, #4
 801cf8c:	f7ff ff9c 	bl	801cec8 <_ZN8touchgfx7muldivuEmmmRm>
 801cf90:	9b01      	ldr	r3, [sp, #4]
 801cf92:	4368      	muls	r0, r5
 801cf94:	435c      	muls	r4, r3
 801cf96:	6034      	str	r4, [r6, #0]
 801cf98:	b002      	add	sp, #8
 801cf9a:	bd70      	pop	{r4, r5, r6, pc}

0801cf9c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801cf9c:	2000      	movs	r0, #0
 801cf9e:	4770      	bx	lr

0801cfa0 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801cfa0:	2001      	movs	r0, #1
 801cfa2:	4770      	bx	lr

0801cfa4 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801cfa4:	2002      	movs	r0, #2
 801cfa6:	4770      	bx	lr

0801cfa8 <_ZN8touchgfx12GestureEventD1Ev>:
 801cfa8:	4770      	bx	lr

0801cfaa <_ZN8touchgfx9DragEventD1Ev>:
 801cfaa:	4770      	bx	lr

0801cfac <_ZN8touchgfx10ClickEventD1Ev>:
 801cfac:	4770      	bx	lr

0801cfae <_ZN8touchgfx10ClickEventD0Ev>:
 801cfae:	b510      	push	{r4, lr}
 801cfb0:	4604      	mov	r4, r0
 801cfb2:	210c      	movs	r1, #12
 801cfb4:	f00d ffa9 	bl	802af0a <_ZdlPvj>
 801cfb8:	4620      	mov	r0, r4
 801cfba:	bd10      	pop	{r4, pc}

0801cfbc <_ZN8touchgfx9DragEventD0Ev>:
 801cfbc:	b510      	push	{r4, lr}
 801cfbe:	4604      	mov	r4, r0
 801cfc0:	2110      	movs	r1, #16
 801cfc2:	f00d ffa2 	bl	802af0a <_ZdlPvj>
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	bd10      	pop	{r4, pc}

0801cfca <_ZN8touchgfx12GestureEventD0Ev>:
 801cfca:	b510      	push	{r4, lr}
 801cfcc:	4604      	mov	r4, r0
 801cfce:	210c      	movs	r1, #12
 801cfd0:	f00d ff9b 	bl	802af0a <_ZdlPvj>
 801cfd4:	4620      	mov	r0, r4
 801cfd6:	bd10      	pop	{r4, pc}

0801cfd8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801cfd8:	b530      	push	{r4, r5, lr}
 801cfda:	460d      	mov	r5, r1
 801cfdc:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801cfde:	b087      	sub	sp, #28
 801cfe0:	4604      	mov	r4, r0
 801cfe2:	b301      	cbz	r1, 801d026 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801cfe4:	a801      	add	r0, sp, #4
 801cfe6:	f7ff feb3 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cfea:	892a      	ldrh	r2, [r5, #8]
 801cfec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801cff0:	7928      	ldrb	r0, [r5, #4]
 801cff2:	1ad2      	subs	r2, r2, r3
 801cff4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801cff6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801cffa:	441a      	add	r2, r3
 801cffc:	896b      	ldrh	r3, [r5, #10]
 801cffe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801d002:	f88d 0010 	strb.w	r0, [sp, #16]
 801d006:	1b5b      	subs	r3, r3, r5
 801d008:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801d00a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801d00c:	442b      	add	r3, r5
 801d00e:	4d07      	ldr	r5, [pc, #28]	@ (801d02c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801d010:	f8ad 1012 	strh.w	r1, [sp, #18]
 801d014:	a903      	add	r1, sp, #12
 801d016:	9503      	str	r5, [sp, #12]
 801d018:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d01c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d020:	6803      	ldr	r3, [r0, #0]
 801d022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d024:	4798      	blx	r3
 801d026:	b007      	add	sp, #28
 801d028:	bd30      	pop	{r4, r5, pc}
 801d02a:	bf00      	nop
 801d02c:	0802f5ac 	.word	0x0802f5ac

0801d030 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d034:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801d036:	b08a      	sub	sp, #40	@ 0x28
 801d038:	4604      	mov	r4, r0
 801d03a:	460d      	mov	r5, r1
 801d03c:	b113      	cbz	r3, 801d044 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801d03e:	790b      	ldrb	r3, [r1, #4]
 801d040:	2b00      	cmp	r3, #0
 801d042:	d044      	beq.n	801d0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d044:	f104 0804 	add.w	r8, r4, #4
 801d048:	a803      	add	r0, sp, #12
 801d04a:	4641      	mov	r1, r8
 801d04c:	f7ff fe80 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d050:	792b      	ldrb	r3, [r5, #4]
 801d052:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801d056:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801d05a:	b983      	cbnz	r3, 801d07e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801d05c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801d060:	892a      	ldrh	r2, [r5, #8]
 801d062:	88e9      	ldrh	r1, [r5, #6]
 801d064:	4640      	mov	r0, r8
 801d066:	1b92      	subs	r2, r2, r6
 801d068:	9301      	str	r3, [sp, #4]
 801d06a:	1bc9      	subs	r1, r1, r7
 801d06c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801d070:	b212      	sxth	r2, r2
 801d072:	9300      	str	r3, [sp, #0]
 801d074:	b209      	sxth	r1, r1
 801d076:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801d07a:	f7fa ffb3 	bl	8017fe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801d07e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d080:	b329      	cbz	r1, 801d0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d082:	a805      	add	r0, sp, #20
 801d084:	f7ff fe64 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d088:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801d08c:	792b      	ldrb	r3, [r5, #4]
 801d08e:	a907      	add	r1, sp, #28
 801d090:	1abf      	subs	r7, r7, r2
 801d092:	88ea      	ldrh	r2, [r5, #6]
 801d094:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801d096:	4417      	add	r7, r2
 801d098:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801d09a:	f88d 3020 	strb.w	r3, [sp, #32]
 801d09e:	4417      	add	r7, r2
 801d0a0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801d0a4:	1ab6      	subs	r6, r6, r2
 801d0a6:	892a      	ldrh	r2, [r5, #8]
 801d0a8:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801d0ac:	4416      	add	r6, r2
 801d0ae:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801d0b0:	4416      	add	r6, r2
 801d0b2:	4a08      	ldr	r2, [pc, #32]	@ (801d0d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801d0b4:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801d0b8:	2600      	movs	r6, #0
 801d0ba:	9207      	str	r2, [sp, #28]
 801d0bc:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801d0c0:	6803      	ldr	r3, [r0, #0]
 801d0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d0c4:	4798      	blx	r3
 801d0c6:	792b      	ldrb	r3, [r5, #4]
 801d0c8:	b10b      	cbz	r3, 801d0ce <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801d0ca:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801d0ce:	b00a      	add	sp, #40	@ 0x28
 801d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0d4:	0802f584 	.word	0x0802f584

0801d0d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0dc:	460c      	mov	r4, r1
 801d0de:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801d0e0:	b088      	sub	sp, #32
 801d0e2:	4605      	mov	r5, r0
 801d0e4:	2900      	cmp	r1, #0
 801d0e6:	d06d      	beq.n	801d1c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801d0e8:	4668      	mov	r0, sp
 801d0ea:	f7ff fe31 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d0ee:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801d0f0:	88e3      	ldrh	r3, [r4, #6]
 801d0f2:	f9bd 8000 	ldrsh.w	r8, [sp]
 801d0f6:	440b      	add	r3, r1
 801d0f8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801d0fc:	b21b      	sxth	r3, r3
 801d0fe:	4543      	cmp	r3, r8
 801d100:	db31      	blt.n	801d166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d102:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801d106:	44c4      	add	ip, r8
 801d108:	fa0f fc8c 	sxth.w	ip, ip
 801d10c:	4563      	cmp	r3, ip
 801d10e:	da2a      	bge.n	801d166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d110:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801d112:	8926      	ldrh	r6, [r4, #8]
 801d114:	4416      	add	r6, r2
 801d116:	b236      	sxth	r6, r6
 801d118:	42be      	cmp	r6, r7
 801d11a:	db24      	blt.n	801d166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d11c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801d120:	4438      	add	r0, r7
 801d122:	b200      	sxth	r0, r0
 801d124:	4286      	cmp	r6, r0
 801d126:	da1e      	bge.n	801d166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d128:	8963      	ldrh	r3, [r4, #10]
 801d12a:	4419      	add	r1, r3
 801d12c:	b209      	sxth	r1, r1
 801d12e:	4541      	cmp	r1, r8
 801d130:	db08      	blt.n	801d144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d132:	4561      	cmp	r1, ip
 801d134:	da06      	bge.n	801d144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d136:	89a3      	ldrh	r3, [r4, #12]
 801d138:	441a      	add	r2, r3
 801d13a:	b212      	sxth	r2, r2
 801d13c:	42ba      	cmp	r2, r7
 801d13e:	db01      	blt.n	801d144 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801d140:	4282      	cmp	r2, r0
 801d142:	db10      	blt.n	801d166 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801d144:	4b21      	ldr	r3, [pc, #132]	@ (801d1cc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801d146:	a904      	add	r1, sp, #16
 801d148:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801d14a:	9304      	str	r3, [sp, #16]
 801d14c:	2302      	movs	r3, #2
 801d14e:	f88d 3014 	strb.w	r3, [sp, #20]
 801d152:	2300      	movs	r3, #0
 801d154:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d158:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d15c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d160:	6803      	ldr	r3, [r0, #0]
 801d162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d164:	4798      	blx	r3
 801d166:	1d29      	adds	r1, r5, #4
 801d168:	a802      	add	r0, sp, #8
 801d16a:	f7ff fdf1 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d16e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d172:	88e0      	ldrh	r0, [r4, #6]
 801d174:	eba3 0808 	sub.w	r8, r3, r8
 801d178:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d17c:	7921      	ldrb	r1, [r4, #4]
 801d17e:	fa1f f888 	uxth.w	r8, r8
 801d182:	1bdf      	subs	r7, r3, r7
 801d184:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801d188:	b2bb      	uxth	r3, r7
 801d18a:	4440      	add	r0, r8
 801d18c:	8922      	ldrh	r2, [r4, #8]
 801d18e:	8967      	ldrh	r7, [r4, #10]
 801d190:	4460      	add	r0, ip
 801d192:	89a4      	ldrh	r4, [r4, #12]
 801d194:	441a      	add	r2, r3
 801d196:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801d198:	44b8      	add	r8, r7
 801d19a:	4423      	add	r3, r4
 801d19c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801d1a0:	4432      	add	r2, r6
 801d1a2:	44e0      	add	r8, ip
 801d1a4:	4433      	add	r3, r6
 801d1a6:	4c0a      	ldr	r4, [pc, #40]	@ (801d1d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801d1a8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801d1aa:	f88d 1014 	strb.w	r1, [sp, #20]
 801d1ae:	a904      	add	r1, sp, #16
 801d1b0:	9404      	str	r4, [sp, #16]
 801d1b2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801d1b6:	f8ad 801a 	strh.w	r8, [sp, #26]
 801d1ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d1be:	6803      	ldr	r3, [r0, #0]
 801d1c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d1c2:	4798      	blx	r3
 801d1c4:	b008      	add	sp, #32
 801d1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1ca:	bf00      	nop
 801d1cc:	0802f584 	.word	0x0802f584
 801d1d0:	0802f598 	.word	0x0802f598

0801d1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801d1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d1d6:	4604      	mov	r4, r0
 801d1d8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801d1dc:	3201      	adds	r2, #1
 801d1de:	d112      	bne.n	801d206 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801d1e0:	2500      	movs	r5, #0
 801d1e2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801d1e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d1ea:	6803      	ldr	r3, [r0, #0]
 801d1ec:	9500      	str	r5, [sp, #0]
 801d1ee:	466d      	mov	r5, sp
 801d1f0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801d1f4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801d1f8:	4629      	mov	r1, r5
 801d1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d1fc:	4798      	blx	r3
 801d1fe:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d202:	e884 0003 	stmia.w	r4, {r0, r1}
 801d206:	4620      	mov	r0, r4
 801d208:	b003      	add	sp, #12
 801d20a:	bd30      	pop	{r4, r5, pc}

0801d20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801d20c:	b513      	push	{r0, r1, r4, lr}
 801d20e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801d212:	4604      	mov	r4, r0
 801d214:	3301      	adds	r3, #1
 801d216:	d109      	bne.n	801d22c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801d218:	4601      	mov	r1, r0
 801d21a:	4668      	mov	r0, sp
 801d21c:	f7ff fd98 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d220:	f8bd 3000 	ldrh.w	r3, [sp]
 801d224:	8423      	strh	r3, [r4, #32]
 801d226:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d22a:	8463      	strh	r3, [r4, #34]	@ 0x22
 801d22c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801d230:	b002      	add	sp, #8
 801d232:	bd10      	pop	{r4, pc}

0801d234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801d234:	b513      	push	{r0, r1, r4, lr}
 801d236:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801d23a:	4604      	mov	r4, r0
 801d23c:	3301      	adds	r3, #1
 801d23e:	d109      	bne.n	801d254 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801d240:	4601      	mov	r1, r0
 801d242:	4668      	mov	r0, sp
 801d244:	f7ff fd84 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d248:	f8bd 3000 	ldrh.w	r3, [sp]
 801d24c:	8423      	strh	r3, [r4, #32]
 801d24e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d252:	8463      	strh	r3, [r4, #34]	@ 0x22
 801d254:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801d258:	b002      	add	sp, #8
 801d25a:	bd10      	pop	{r4, pc}

0801d25c <_ZN8touchgfx6ScreenC1Ev>:
 801d25c:	b570      	push	{r4, r5, r6, lr}
 801d25e:	4b17      	ldr	r3, [pc, #92]	@ (801d2bc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801d260:	4605      	mov	r5, r0
 801d262:	4a17      	ldr	r2, [pc, #92]	@ (801d2c0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801d264:	2101      	movs	r1, #1
 801d266:	f845 3b04 	str.w	r3, [r5], #4
 801d26a:	2300      	movs	r3, #0
 801d26c:	6042      	str	r2, [r0, #4]
 801d26e:	4604      	mov	r4, r0
 801d270:	8103      	strh	r3, [r0, #8]
 801d272:	8143      	strh	r3, [r0, #10]
 801d274:	8183      	strh	r3, [r0, #12]
 801d276:	81c3      	strh	r3, [r0, #14]
 801d278:	8203      	strh	r3, [r0, #16]
 801d27a:	8243      	strh	r3, [r0, #18]
 801d27c:	8283      	strh	r3, [r0, #20]
 801d27e:	82c3      	strh	r3, [r0, #22]
 801d280:	6203      	str	r3, [r0, #32]
 801d282:	8483      	strh	r3, [r0, #36]	@ 0x24
 801d284:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801d286:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801d28a:	6343      	str	r3, [r0, #52]	@ 0x34
 801d28c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801d290:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801d294:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801d298:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801d29c:	4b09      	ldr	r3, [pc, #36]	@ (801d2c4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801d29e:	4628      	mov	r0, r5
 801d2a0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d2a4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801d2a6:	4a08      	ldr	r2, [pc, #32]	@ (801d2c8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801d2a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801d2ac:	4798      	blx	r3
 801d2ae:	6863      	ldr	r3, [r4, #4]
 801d2b0:	4628      	mov	r0, r5
 801d2b2:	4631      	mov	r1, r6
 801d2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d2b6:	4798      	blx	r3
 801d2b8:	4620      	mov	r0, r4
 801d2ba:	bd70      	pop	{r4, r5, r6, pc}
 801d2bc:	0802f5c0 	.word	0x0802f5c0
 801d2c0:	0802de00 	.word	0x0802de00
 801d2c4:	2400b8c2 	.word	0x2400b8c2
 801d2c8:	2400b8c0 	.word	0x2400b8c0

0801d2cc <_ZN8touchgfx6Screen4drawEv>:
 801d2cc:	4b09      	ldr	r3, [pc, #36]	@ (801d2f4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801d2ce:	b507      	push	{r0, r1, r2, lr}
 801d2d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d2d4:	2100      	movs	r1, #0
 801d2d6:	4b08      	ldr	r3, [pc, #32]	@ (801d2f8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801d2d8:	9100      	str	r1, [sp, #0]
 801d2da:	4669      	mov	r1, sp
 801d2dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d2e0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801d2e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d2e8:	6803      	ldr	r3, [r0, #0]
 801d2ea:	689b      	ldr	r3, [r3, #8]
 801d2ec:	4798      	blx	r3
 801d2ee:	b003      	add	sp, #12
 801d2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d2f4:	2400b8c0 	.word	0x2400b8c0
 801d2f8:	2400b8c2 	.word	0x2400b8c2

0801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801d2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d300:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801d304:	b089      	sub	sp, #36	@ 0x24
 801d306:	4680      	mov	r8, r0
 801d308:	460c      	mov	r4, r1
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	4615      	mov	r5, r2
 801d30e:	dd0e      	ble.n	801d32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d310:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801d314:	2b00      	cmp	r3, #0
 801d316:	dd0a      	ble.n	801d32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d318:	4628      	mov	r0, r5
 801d31a:	f7ff ff5b 	bl	801d1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d31e:	4621      	mov	r1, r4
 801d320:	f7fe fc2a 	bl	801bb78 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801d324:	69eb      	ldr	r3, [r5, #28]
 801d326:	b928      	cbnz	r0, 801d334 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801d328:	461d      	mov	r5, r3
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d1f4      	bne.n	801d318 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801d32e:	b009      	add	sp, #36	@ 0x24
 801d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d334:	ae04      	add	r6, sp, #16
 801d336:	2b00      	cmp	r3, #0
 801d338:	f000 80b5 	beq.w	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d33c:	682b      	ldr	r3, [r5, #0]
 801d33e:	4629      	mov	r1, r5
 801d340:	a802      	add	r0, sp, #8
 801d342:	68db      	ldr	r3, [r3, #12]
 801d344:	4798      	blx	r3
 801d346:	4628      	mov	r0, r5
 801d348:	f7ff ff60 	bl	801d20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d34c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801d350:	4407      	add	r7, r0
 801d352:	4628      	mov	r0, r5
 801d354:	f7ff ff6e 	bl	801d234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d358:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801d35c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801d360:	b23f      	sxth	r7, r7
 801d362:	4418      	add	r0, r3
 801d364:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801d368:	4621      	mov	r1, r4
 801d36a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d36e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d372:	4630      	mov	r0, r6
 801d374:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d378:	f8ad 7010 	strh.w	r7, [sp, #16]
 801d37c:	f7fa ff14 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801d380:	4628      	mov	r0, r5
 801d382:	f7ff ff27 	bl	801d1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d386:	ab06      	add	r3, sp, #24
 801d388:	4602      	mov	r2, r0
 801d38a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801d38e:	e883 0003 	stmia.w	r3, {r0, r1}
 801d392:	4611      	mov	r1, r2
 801d394:	4618      	mov	r0, r3
 801d396:	f7fa ff07 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801d39a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d39e:	f9b4 1000 	ldrsh.w	r1, [r4]
 801d3a2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801d3a6:	4299      	cmp	r1, r3
 801d3a8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801d3ac:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801d3b0:	d10b      	bne.n	801d3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d3b2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d3b6:	4552      	cmp	r2, sl
 801d3b8:	d107      	bne.n	801d3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d3ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d3be:	455a      	cmp	r2, fp
 801d3c0:	d103      	bne.n	801d3ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801d3c2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d3c6:	454a      	cmp	r2, r9
 801d3c8:	d06d      	beq.n	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d3ca:	f1bb 0f00 	cmp.w	fp, #0
 801d3ce:	dd65      	ble.n	801d49c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d3d0:	f1b9 0f00 	cmp.w	r9, #0
 801d3d4:	dd62      	ble.n	801d49c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801d3d6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801d3da:	fa1f f08a 	uxth.w	r0, sl
 801d3de:	4552      	cmp	r2, sl
 801d3e0:	9000      	str	r0, [sp, #0]
 801d3e2:	da12      	bge.n	801d40a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801d3e4:	9301      	str	r3, [sp, #4]
 801d3e6:	9b00      	ldr	r3, [sp, #0]
 801d3e8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d3ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d3f0:	1a9a      	subs	r2, r3, r2
 801d3f2:	f8ad 1010 	strh.w	r1, [sp, #16]
 801d3f6:	4631      	mov	r1, r6
 801d3f8:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d3fc:	4640      	mov	r0, r8
 801d3fe:	f8ad 2016 	strh.w	r2, [sp, #22]
 801d402:	69ea      	ldr	r2, [r5, #28]
 801d404:	f7ff ff7a 	bl	801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d408:	9b01      	ldr	r3, [sp, #4]
 801d40a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d40e:	b29f      	uxth	r7, r3
 801d410:	429a      	cmp	r2, r3
 801d412:	da0d      	bge.n	801d430 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801d414:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d418:	1aba      	subs	r2, r7, r2
 801d41a:	f8ad a012 	strh.w	sl, [sp, #18]
 801d41e:	4631      	mov	r1, r6
 801d420:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d424:	4640      	mov	r0, r8
 801d426:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d42a:	69ea      	ldr	r2, [r5, #28]
 801d42c:	f7ff ff66 	bl	801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d430:	8822      	ldrh	r2, [r4, #0]
 801d432:	445f      	add	r7, fp
 801d434:	88a3      	ldrh	r3, [r4, #4]
 801d436:	b2bf      	uxth	r7, r7
 801d438:	4413      	add	r3, r2
 801d43a:	b23a      	sxth	r2, r7
 801d43c:	b29b      	uxth	r3, r3
 801d43e:	b219      	sxth	r1, r3
 801d440:	4291      	cmp	r1, r2
 801d442:	dd0d      	ble.n	801d460 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801d444:	1bdb      	subs	r3, r3, r7
 801d446:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d44a:	f8ad a012 	strh.w	sl, [sp, #18]
 801d44e:	4631      	mov	r1, r6
 801d450:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d454:	4640      	mov	r0, r8
 801d456:	f8ad 9016 	strh.w	r9, [sp, #22]
 801d45a:	69ea      	ldr	r2, [r5, #28]
 801d45c:	f7ff ff4e 	bl	801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d460:	88e2      	ldrh	r2, [r4, #6]
 801d462:	8863      	ldrh	r3, [r4, #2]
 801d464:	4413      	add	r3, r2
 801d466:	9a00      	ldr	r2, [sp, #0]
 801d468:	444a      	add	r2, r9
 801d46a:	b29b      	uxth	r3, r3
 801d46c:	fa1f f982 	uxth.w	r9, r2
 801d470:	b219      	sxth	r1, r3
 801d472:	fa0f f289 	sxth.w	r2, r9
 801d476:	428a      	cmp	r2, r1
 801d478:	da15      	bge.n	801d4a6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801d47a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d47e:	eba3 0309 	sub.w	r3, r3, r9
 801d482:	f9b4 0000 	ldrsh.w	r0, [r4]
 801d486:	f8ad 1014 	strh.w	r1, [sp, #20]
 801d48a:	4631      	mov	r1, r6
 801d48c:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d490:	f8ad 2012 	strh.w	r2, [sp, #18]
 801d494:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d498:	69ea      	ldr	r2, [r5, #28]
 801d49a:	e001      	b.n	801d4a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801d49c:	69ea      	ldr	r2, [r5, #28]
 801d49e:	4621      	mov	r1, r4
 801d4a0:	4640      	mov	r0, r8
 801d4a2:	f7ff ff2b 	bl	801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d4a6:	4628      	mov	r0, r5
 801d4a8:	f7ff fe94 	bl	801d1d4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801d4ac:	6861      	ldr	r1, [r4, #4]
 801d4ae:	4602      	mov	r2, r0
 801d4b0:	4633      	mov	r3, r6
 801d4b2:	6820      	ldr	r0, [r4, #0]
 801d4b4:	c303      	stmia	r3!, {r0, r1}
 801d4b6:	4611      	mov	r1, r2
 801d4b8:	4630      	mov	r0, r6
 801d4ba:	f7fa fe75 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801d4be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	f77f af33 	ble.w	801d32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d4c8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	f77f af2e 	ble.w	801d32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801d4d2:	4628      	mov	r0, r5
 801d4d4:	f7ff fe9a 	bl	801d20c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801d4d8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801d4dc:	1a18      	subs	r0, r3, r0
 801d4de:	f8ad 0010 	strh.w	r0, [sp, #16]
 801d4e2:	4628      	mov	r0, r5
 801d4e4:	f7ff fea6 	bl	801d234 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801d4e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801d4ec:	4631      	mov	r1, r6
 801d4ee:	1a18      	subs	r0, r3, r0
 801d4f0:	f8ad 0012 	strh.w	r0, [sp, #18]
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	682b      	ldr	r3, [r5, #0]
 801d4f8:	689b      	ldr	r3, [r3, #8]
 801d4fa:	4798      	blx	r3
 801d4fc:	e717      	b.n	801d32e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801d4fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801d4fe:	b570      	push	{r4, r5, r6, lr}
 801d500:	1d06      	adds	r6, r0, #4
 801d502:	b086      	sub	sp, #24
 801d504:	460c      	mov	r4, r1
 801d506:	2300      	movs	r3, #0
 801d508:	4631      	mov	r1, r6
 801d50a:	4605      	mov	r5, r0
 801d50c:	a802      	add	r0, sp, #8
 801d50e:	9301      	str	r3, [sp, #4]
 801d510:	f7ff fc1e 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d514:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d518:	8822      	ldrh	r2, [r4, #0]
 801d51a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801d51e:	1ad2      	subs	r2, r2, r3
 801d520:	8863      	ldrh	r3, [r4, #2]
 801d522:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801d526:	1a5b      	subs	r3, r3, r1
 801d528:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d52c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801d530:	aa01      	add	r2, sp, #4
 801d532:	f8ad 0014 	strh.w	r0, [sp, #20]
 801d536:	4630      	mov	r0, r6
 801d538:	f8ad 1016 	strh.w	r1, [sp, #22]
 801d53c:	a904      	add	r1, sp, #16
 801d53e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d542:	f7fa ff09 	bl	8018358 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801d546:	9a01      	ldr	r2, [sp, #4]
 801d548:	b11a      	cbz	r2, 801d552 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801d54a:	4621      	mov	r1, r4
 801d54c:	4628      	mov	r0, r5
 801d54e:	f7ff fed5 	bl	801d2fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801d552:	b006      	add	sp, #24
 801d554:	bd70      	pop	{r4, r5, r6, pc}

0801d556 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801d556:	4602      	mov	r2, r0
 801d558:	b530      	push	{r4, r5, lr}
 801d55a:	4604      	mov	r4, r0
 801d55c:	b085      	sub	sp, #20
 801d55e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801d562:	460d      	mov	r5, r1
 801d564:	466b      	mov	r3, sp
 801d566:	6851      	ldr	r1, [r2, #4]
 801d568:	c303      	stmia	r3!, {r0, r1}
 801d56a:	4629      	mov	r1, r5
 801d56c:	4668      	mov	r0, sp
 801d56e:	f7fa fe1b 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 801d572:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801d576:	b12b      	cbz	r3, 801d584 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801d578:	4669      	mov	r1, sp
 801d57a:	4620      	mov	r0, r4
 801d57c:	f7ff ffbf 	bl	801d4fe <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801d580:	b005      	add	sp, #20
 801d582:	bd30      	pop	{r4, r5, pc}
 801d584:	3404      	adds	r4, #4
 801d586:	a802      	add	r0, sp, #8
 801d588:	4621      	mov	r1, r4
 801d58a:	f7ff fbe1 	bl	801cd50 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801d58e:	f8bd 3000 	ldrh.w	r3, [sp]
 801d592:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801d596:	4669      	mov	r1, sp
 801d598:	4620      	mov	r0, r4
 801d59a:	1a9b      	subs	r3, r3, r2
 801d59c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801d5a0:	f8ad 3000 	strh.w	r3, [sp]
 801d5a4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801d5a8:	1a9b      	subs	r3, r3, r2
 801d5aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 801d5ae:	f7fa fe9a 	bl	80182e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801d5b2:	e7e5      	b.n	801d580 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801d5b4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801d5b4:	460b      	mov	r3, r1
 801d5b6:	680a      	ldr	r2, [r1, #0]
 801d5b8:	1d01      	adds	r1, r0, #4
 801d5ba:	6992      	ldr	r2, [r2, #24]
 801d5bc:	4618      	mov	r0, r3
 801d5be:	4710      	bx	r2

0801d5c0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801d5c0:	4298      	cmp	r0, r3
 801d5c2:	d200      	bcs.n	801d5c6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801d5c4:	b913      	cbnz	r3, 801d5cc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801d5c6:	440a      	add	r2, r1
 801d5c8:	b210      	sxth	r0, r2
 801d5ca:	4770      	bx	lr
 801d5cc:	ee07 0a90 	vmov	s15, r0
 801d5d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5d4:	ee07 3a90 	vmov	s15, r3
 801d5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d5e0:	ee07 2a90 	vmov	s15, r2
 801d5e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d5e8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801d5ec:	ee07 1a90 	vmov	s15, r1
 801d5f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d5f4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d5f8:	ee67 5a07 	vmul.f32	s11, s14, s14
 801d5fc:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d600:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d604:	eee6 7a26 	vfma.f32	s15, s12, s13
 801d608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d610:	bfcc      	ite	gt
 801d612:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d616:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d61a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d61e:	ee17 3a90 	vmov	r3, s15
 801d622:	b218      	sxth	r0, r3
 801d624:	4770      	bx	lr

0801d626 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 801d626:	4298      	cmp	r0, r3
 801d628:	d200      	bcs.n	801d62c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 801d62a:	b913      	cbnz	r3, 801d632 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 801d62c:	440a      	add	r2, r1
 801d62e:	b210      	sxth	r0, r2
 801d630:	4770      	bx	lr
 801d632:	ee07 2a90 	vmov	s15, r2
 801d636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d63a:	ee07 0a90 	vmov	s15, r0
 801d63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d642:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d646:	ee07 3a10 	vmov	s14, r3
 801d64a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801d64e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801d652:	ee07 1a90 	vmov	s15, r1
 801d656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d65a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d65e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801d662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d66a:	bfcc      	ite	gt
 801d66c:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801d670:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801d674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d678:	ee17 3a90 	vmov	r3, s15
 801d67c:	b218      	sxth	r0, r3
 801d67e:	4770      	bx	lr

0801d680 <_ZN8touchgfx12TextProviderC1Ev>:
 801d680:	b538      	push	{r3, r4, r5, lr}
 801d682:	2500      	movs	r5, #0
 801d684:	2302      	movs	r3, #2
 801d686:	4604      	mov	r4, r0
 801d688:	220e      	movs	r2, #14
 801d68a:	7403      	strb	r3, [r0, #16]
 801d68c:	4629      	mov	r1, r5
 801d68e:	6145      	str	r5, [r0, #20]
 801d690:	7605      	strb	r5, [r0, #24]
 801d692:	83c5      	strh	r5, [r0, #30]
 801d694:	8405      	strh	r5, [r0, #32]
 801d696:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801d698:	8705      	strh	r5, [r0, #56]	@ 0x38
 801d69a:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801d69c:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801d6a0:	e9c0 5500 	strd	r5, r5, [r0]
 801d6a4:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801d6a8:	304c      	adds	r0, #76	@ 0x4c
 801d6aa:	f00d fe64 	bl	802b376 <memset>
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	4620      	mov	r0, r4
 801d6b2:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801d6b6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801d6ba:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801d6be:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801d6c2:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801d6c6:	f7ec fc8d 	bl	8009fe4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801d6ca:	4620      	mov	r0, r4
 801d6cc:	bd38      	pop	{r3, r4, r5, pc}

0801d6ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801d6ce:	b530      	push	{r4, r5, lr}
 801d6d0:	2500      	movs	r5, #0
 801d6d2:	2401      	movs	r4, #1
 801d6d4:	6843      	ldr	r3, [r0, #4]
 801d6d6:	b913      	cbnz	r3, 801d6de <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801d6d8:	6803      	ldr	r3, [r0, #0]
 801d6da:	b313      	cbz	r3, 801d722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d6dc:	6043      	str	r3, [r0, #4]
 801d6de:	7e03      	ldrb	r3, [r0, #24]
 801d6e0:	b143      	cbz	r3, 801d6f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801d6e2:	6943      	ldr	r3, [r0, #20]
 801d6e4:	b12b      	cbz	r3, 801d6f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d6e6:	881a      	ldrh	r2, [r3, #0]
 801d6e8:	b11a      	cbz	r2, 801d6f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801d6ea:	1c9a      	adds	r2, r3, #2
 801d6ec:	6142      	str	r2, [r0, #20]
 801d6ee:	8818      	ldrh	r0, [r3, #0]
 801d6f0:	bd30      	pop	{r4, r5, pc}
 801d6f2:	7605      	strb	r5, [r0, #24]
 801d6f4:	6843      	ldr	r3, [r0, #4]
 801d6f6:	8819      	ldrh	r1, [r3, #0]
 801d6f8:	b199      	cbz	r1, 801d722 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801d6fa:	1c9a      	adds	r2, r3, #2
 801d6fc:	2902      	cmp	r1, #2
 801d6fe:	6042      	str	r2, [r0, #4]
 801d700:	d1f5      	bne.n	801d6ee <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801d702:	7c03      	ldrb	r3, [r0, #16]
 801d704:	2b01      	cmp	r3, #1
 801d706:	d8e5      	bhi.n	801d6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d708:	1c5a      	adds	r2, r3, #1
 801d70a:	3302      	adds	r3, #2
 801d70c:	7402      	strb	r2, [r0, #16]
 801d70e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801d712:	6143      	str	r3, [r0, #20]
 801d714:	2b00      	cmp	r3, #0
 801d716:	d0dd      	beq.n	801d6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d718:	881b      	ldrh	r3, [r3, #0]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d0da      	beq.n	801d6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d71e:	7604      	strb	r4, [r0, #24]
 801d720:	e7d8      	b.n	801d6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801d722:	2000      	movs	r0, #0
 801d724:	e7e4      	b.n	801d6f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801d726 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801d726:	b430      	push	{r4, r5}
 801d728:	6815      	ldr	r5, [r2, #0]
 801d72a:	6085      	str	r5, [r0, #8]
 801d72c:	6852      	ldr	r2, [r2, #4]
 801d72e:	6443      	str	r3, [r0, #68]	@ 0x44
 801d730:	60c2      	str	r2, [r0, #12]
 801d732:	2200      	movs	r2, #0
 801d734:	9b02      	ldr	r3, [sp, #8]
 801d736:	7402      	strb	r2, [r0, #16]
 801d738:	6001      	str	r1, [r0, #0]
 801d73a:	6483      	str	r3, [r0, #72]	@ 0x48
 801d73c:	6042      	str	r2, [r0, #4]
 801d73e:	6142      	str	r2, [r0, #20]
 801d740:	7602      	strb	r2, [r0, #24]
 801d742:	8702      	strh	r2, [r0, #56]	@ 0x38
 801d744:	8402      	strh	r2, [r0, #32]
 801d746:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801d74a:	bc30      	pop	{r4, r5}
 801d74c:	f7ec bc4a 	b.w	8009fe4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801d750 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801d750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d752:	4605      	mov	r5, r0
 801d754:	4608      	mov	r0, r1
 801d756:	b1f1      	cbz	r1, 801d796 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801d758:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801d75c:	460b      	mov	r3, r1
 801d75e:	f101 0708 	add.w	r7, r1, #8
 801d762:	4622      	mov	r2, r4
 801d764:	6818      	ldr	r0, [r3, #0]
 801d766:	3308      	adds	r3, #8
 801d768:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d76c:	4626      	mov	r6, r4
 801d76e:	42bb      	cmp	r3, r7
 801d770:	c603      	stmia	r6!, {r0, r1}
 801d772:	4634      	mov	r4, r6
 801d774:	d1f6      	bne.n	801d764 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801d776:	6818      	ldr	r0, [r3, #0]
 801d778:	6030      	str	r0, [r6, #0]
 801d77a:	4610      	mov	r0, r2
 801d77c:	889b      	ldrh	r3, [r3, #4]
 801d77e:	80b3      	strh	r3, [r6, #4]
 801d780:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801d784:	015b      	lsls	r3, r3, #5
 801d786:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801d78a:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801d78e:	430b      	orrs	r3, r1
 801d790:	425b      	negs	r3, r3
 801d792:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801d796:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d798 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801d798:	b538      	push	{r3, r4, r5, lr}
 801d79a:	460c      	mov	r4, r1
 801d79c:	6811      	ldr	r1, [r2, #0]
 801d79e:	4610      	mov	r0, r2
 801d7a0:	68cd      	ldr	r5, [r1, #12]
 801d7a2:	4619      	mov	r1, r3
 801d7a4:	47a8      	blx	r5
 801d7a6:	2800      	cmp	r0, #0
 801d7a8:	bf08      	it	eq
 801d7aa:	4620      	moveq	r0, r4
 801d7ac:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7b2:	4604      	mov	r4, r0
 801d7b4:	4615      	mov	r5, r2
 801d7b6:	4608      	mov	r0, r1
 801d7b8:	b93a      	cbnz	r2, 801d7ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801d7ba:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d7be:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 801d7c2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 801d7c6:	4628      	mov	r0, r5
 801d7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d7ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801d7ce:	8893      	ldrh	r3, [r2, #4]
 801d7d0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801d7d4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d7d8:	79ee      	ldrb	r6, [r5, #7]
 801d7da:	4316      	orrs	r6, r2
 801d7dc:	f46f 6263 	mvn.w	r2, #3632	@ 0xe30
 801d7e0:	189a      	adds	r2, r3, r2
 801d7e2:	b2b7      	uxth	r7, r6
 801d7e4:	b291      	uxth	r1, r2
 801d7e6:	291d      	cmp	r1, #29
 801d7e8:	f200 8084 	bhi.w	801d8f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d7ec:	2201      	movs	r2, #1
 801d7ee:	10f6      	asrs	r6, r6, #3
 801d7f0:	408a      	lsls	r2, r1
 801d7f2:	4978      	ldr	r1, [pc, #480]	@ (801d9d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801d7f4:	420a      	tst	r2, r1
 801d7f6:	d12e      	bne.n	801d856 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801d7f8:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801d7fc:	d07a      	beq.n	801d8f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801d7fe:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 801d802:	462b      	mov	r3, r5
 801d804:	f105 0e08 	add.w	lr, r5, #8
 801d808:	4615      	mov	r5, r2
 801d80a:	6818      	ldr	r0, [r3, #0]
 801d80c:	3308      	adds	r3, #8
 801d80e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801d812:	4694      	mov	ip, r2
 801d814:	4573      	cmp	r3, lr
 801d816:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801d81a:	4662      	mov	r2, ip
 801d81c:	d1f5      	bne.n	801d80a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801d81e:	6818      	ldr	r0, [r3, #0]
 801d820:	f8cc 0000 	str.w	r0, [ip]
 801d824:	889b      	ldrh	r3, [r3, #4]
 801d826:	f8ac 3004 	strh.w	r3, [ip, #4]
 801d82a:	b2b3      	uxth	r3, r6
 801d82c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 801d830:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 801d834:	1aca      	subs	r2, r1, r3
 801d836:	1bcf      	subs	r7, r1, r7
 801d838:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801d83c:	b292      	uxth	r2, r2
 801d83e:	1afb      	subs	r3, r7, r3
 801d840:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 801d844:	10d2      	asrs	r2, r2, #3
 801d846:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801d84a:	4302      	orrs	r2, r0
 801d84c:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 801d850:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801d854:	e7b7      	b.n	801d7c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d856:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801d858:	b92b      	cbnz	r3, 801d866 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801d85a:	4b5f      	ldr	r3, [pc, #380]	@ (801d9d8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801d85c:	21c0      	movs	r1, #192	@ 0xc0
 801d85e:	4a5f      	ldr	r2, [pc, #380]	@ (801d9dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801d860:	485f      	ldr	r0, [pc, #380]	@ (801d9e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801d862:	f00d fb81 	bl	802af68 <__assert_func>
 801d866:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801d868:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d86c:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801d86e:	f640 6333 	movw	r3, #3635	@ 0xe33
 801d872:	4299      	cmp	r1, r3
 801d874:	d110      	bne.n	801d898 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801d876:	6803      	ldr	r3, [r0, #0]
 801d878:	68db      	ldr	r3, [r3, #12]
 801d87a:	4798      	blx	r3
 801d87c:	7b41      	ldrb	r1, [r0, #13]
 801d87e:	00cb      	lsls	r3, r1, #3
 801d880:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d884:	7a03      	ldrb	r3, [r0, #8]
 801d886:	0648      	lsls	r0, r1, #25
 801d888:	ea43 0302 	orr.w	r3, r3, r2
 801d88c:	bf44      	itt	mi
 801d88e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d892:	b21b      	sxthmi	r3, r3
 801d894:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d898:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 801d89c:	462a      	mov	r2, r5
 801d89e:	f105 0c08 	add.w	ip, r5, #8
 801d8a2:	443b      	add	r3, r7
 801d8a4:	4433      	add	r3, r6
 801d8a6:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 801d8aa:	b29b      	uxth	r3, r3
 801d8ac:	4635      	mov	r5, r6
 801d8ae:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d8b2:	6810      	ldr	r0, [r2, #0]
 801d8b4:	3208      	adds	r2, #8
 801d8b6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801d8ba:	4637      	mov	r7, r6
 801d8bc:	4562      	cmp	r2, ip
 801d8be:	c703      	stmia	r7!, {r0, r1}
 801d8c0:	463e      	mov	r6, r7
 801d8c2:	d1f6      	bne.n	801d8b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801d8c4:	6810      	ldr	r0, [r2, #0]
 801d8c6:	6038      	str	r0, [r7, #0]
 801d8c8:	8892      	ldrh	r2, [r2, #4]
 801d8ca:	80ba      	strh	r2, [r7, #4]
 801d8cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801d8d0:	10db      	asrs	r3, r3, #3
 801d8d2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801d8d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801d8da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801d8de:	4313      	orrs	r3, r2
 801d8e0:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 801d8e4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801d8e8:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 801d8ec:	1a9b      	subs	r3, r3, r2
 801d8ee:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 801d8f2:	e768      	b.n	801d7c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801d8f4:	f023 0204 	bic.w	r2, r3, #4
 801d8f8:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801d8fc:	428a      	cmp	r2, r1
 801d8fe:	d003      	beq.n	801d908 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801d900:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801d904:	4293      	cmp	r3, r2
 801d906:	d120      	bne.n	801d94a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801d908:	3b01      	subs	r3, #1
 801d90a:	4602      	mov	r2, r0
 801d90c:	4629      	mov	r1, r5
 801d90e:	4620      	mov	r0, r4
 801d910:	b29b      	uxth	r3, r3
 801d912:	f7ff ff41 	bl	801d798 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d916:	7b41      	ldrb	r1, [r0, #13]
 801d918:	00cb      	lsls	r3, r1, #3
 801d91a:	0649      	lsls	r1, r1, #25
 801d91c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d920:	7a03      	ldrb	r3, [r0, #8]
 801d922:	ea43 0302 	orr.w	r3, r3, r2
 801d926:	bf44      	itt	mi
 801d928:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d92c:	b21b      	sxthmi	r3, r3
 801d92e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801d932:	7b6b      	ldrb	r3, [r5, #13]
 801d934:	7aaa      	ldrb	r2, [r5, #10]
 801d936:	005b      	lsls	r3, r3, #1
 801d938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d93c:	4313      	orrs	r3, r2
 801d93e:	115a      	asrs	r2, r3, #5
 801d940:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801d944:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d948:	e035      	b.n	801d9b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801d94a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801d94e:	f01c 0f40 	tst.w	ip, #64	@ 0x40
 801d952:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801d956:	7a2a      	ldrb	r2, [r5, #8]
 801d958:	ea42 0201 	orr.w	r2, r2, r1
 801d95c:	f640 6109 	movw	r1, #3593	@ 0xe09
 801d960:	bf1c      	itt	ne
 801d962:	f5a2 7200 	subne.w	r2, r2, #512	@ 0x200
 801d966:	b212      	sxthne	r2, r2
 801d968:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 801d96c:	f023 0210 	bic.w	r2, r3, #16
 801d970:	428a      	cmp	r2, r1
 801d972:	d003      	beq.n	801d97c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801d974:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d978:	4293      	cmp	r3, r2
 801d97a:	d129      	bne.n	801d9d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801d97c:	7b6e      	ldrb	r6, [r5, #13]
 801d97e:	4629      	mov	r1, r5
 801d980:	0076      	lsls	r6, r6, #1
 801d982:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801d986:	7aae      	ldrb	r6, [r5, #10]
 801d988:	4316      	orrs	r6, r2
 801d98a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801d98e:	4293      	cmp	r3, r2
 801d990:	4602      	mov	r2, r0
 801d992:	4620      	mov	r0, r4
 801d994:	bf16      	itet	ne
 801d996:	f103 33ff 	addne.w	r3, r3, #4294967295
 801d99a:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801d99e:	b29b      	uxthne	r3, r3
 801d9a0:	f7ff fefa 	bl	801d798 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801d9a4:	7b43      	ldrb	r3, [r0, #13]
 801d9a6:	7a82      	ldrb	r2, [r0, #10]
 801d9a8:	005b      	lsls	r3, r3, #1
 801d9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d9ae:	4313      	orrs	r3, r2
 801d9b0:	1af6      	subs	r6, r6, r3
 801d9b2:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 801d9b6:	7b69      	ldrb	r1, [r5, #13]
 801d9b8:	00cb      	lsls	r3, r1, #3
 801d9ba:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801d9be:	7a2b      	ldrb	r3, [r5, #8]
 801d9c0:	4313      	orrs	r3, r2
 801d9c2:	064a      	lsls	r2, r1, #25
 801d9c4:	bf44      	itt	mi
 801d9c6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801d9ca:	b21b      	sxthmi	r3, r3
 801d9cc:	1bdb      	subs	r3, r3, r7
 801d9ce:	e73f      	b.n	801d850 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	e7b7      	b.n	801d944 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801d9d4:	3fc00079 	.word	0x3fc00079
 801d9d8:	0802f5ec 	.word	0x0802f5ec
 801d9dc:	0802f85e 	.word	0x0802f85e
 801d9e0:	0802f5f5 	.word	0x0802f5f5

0801d9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801d9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9e8:	4604      	mov	r4, r0
 801d9ea:	b942      	cbnz	r2, 801d9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801d9ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d9f0:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801d9f4:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801d9f8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801d9fc:	e046      	b.n	801da8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801d9fe:	7b51      	ldrb	r1, [r2, #13]
 801da00:	8893      	ldrh	r3, [r2, #4]
 801da02:	010f      	lsls	r7, r1, #4
 801da04:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801da08:	79d7      	ldrb	r7, [r2, #7]
 801da0a:	4307      	orrs	r7, r0
 801da0c:	2f04      	cmp	r7, #4
 801da0e:	b2bd      	uxth	r5, r7
 801da10:	bfcc      	ite	gt
 801da12:	08bf      	lsrgt	r7, r7, #2
 801da14:	2701      	movle	r7, #1
 801da16:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801da1a:	f200 80ab 	bhi.w	801db74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801da1e:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801da22:	4283      	cmp	r3, r0
 801da24:	d216      	bcs.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da26:	f240 605b 	movw	r0, #1627	@ 0x65b
 801da2a:	4283      	cmp	r3, r0
 801da2c:	d859      	bhi.n	801dae2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801da2e:	f240 6057 	movw	r0, #1623	@ 0x657
 801da32:	4283      	cmp	r3, r0
 801da34:	d20e      	bcs.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da36:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801da3a:	d24a      	bcs.n	801dad2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801da3c:	f240 604e 	movw	r0, #1614	@ 0x64e
 801da40:	4283      	cmp	r3, r0
 801da42:	d207      	bcs.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801da44:	f240 601a 	movw	r0, #1562	@ 0x61a
 801da48:	4283      	cmp	r3, r0
 801da4a:	d02a      	beq.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801da4c:	d821      	bhi.n	801da92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801da4e:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801da52:	d35b      	bcc.n	801db0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801da54:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801da58:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801da5c:	f040 80d0 	bne.w	801dc00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801da60:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801da64:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801da68:	f040 80ca 	bne.w	801dc00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801da6c:	00cb      	lsls	r3, r1, #3
 801da6e:	0649      	lsls	r1, r1, #25
 801da70:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801da74:	7a13      	ldrb	r3, [r2, #8]
 801da76:	ea43 0300 	orr.w	r3, r3, r0
 801da7a:	bf44      	itt	mi
 801da7c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801da80:	b21b      	sxthmi	r3, r3
 801da82:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801da86:	1b5d      	subs	r5, r3, r5
 801da88:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801da8c:	4610      	mov	r0, r2
 801da8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da92:	f240 604b 	movw	r0, #1611	@ 0x64b
 801da96:	4283      	cmp	r3, r0
 801da98:	d338      	bcc.n	801db0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801da9a:	f240 604c 	movw	r0, #1612	@ 0x64c
 801da9e:	4283      	cmp	r3, r0
 801daa0:	d9d8      	bls.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801daa2:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801daa6:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801daaa:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801daae:	f040 80f2 	bne.w	801dc96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801dab2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801dab6:	f040 80ee 	bne.w	801dc96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801daba:	00cb      	lsls	r3, r1, #3
 801dabc:	064e      	lsls	r6, r1, #25
 801dabe:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801dac2:	7a13      	ldrb	r3, [r2, #8]
 801dac4:	ea43 0300 	orr.w	r3, r3, r0
 801dac8:	bf44      	itt	mi
 801daca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801dace:	b21b      	sxthmi	r3, r3
 801dad0:	e7d9      	b.n	801da86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801dad2:	f240 6054 	movw	r0, #1620	@ 0x654
 801dad6:	4283      	cmp	r3, r0
 801dad8:	d8e3      	bhi.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dada:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801dade:	d9e0      	bls.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dae0:	e7b8      	b.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dae2:	f240 6074 	movw	r0, #1652	@ 0x674
 801dae6:	4283      	cmp	r3, r0
 801dae8:	d0b4      	beq.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801daea:	d82d      	bhi.n	801db48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801daec:	f240 605e 	movw	r0, #1630	@ 0x65e
 801daf0:	4283      	cmp	r3, r0
 801daf2:	d804      	bhi.n	801dafe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801daf4:	f240 605d 	movw	r0, #1629	@ 0x65d
 801daf8:	4283      	cmp	r3, r0
 801dafa:	d3d2      	bcc.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dafc:	e7aa      	b.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dafe:	f240 605f 	movw	r0, #1631	@ 0x65f
 801db02:	4283      	cmp	r3, r0
 801db04:	d0cd      	beq.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db06:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801db0a:	d0a3      	beq.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db0c:	00cb      	lsls	r3, r1, #3
 801db0e:	0649      	lsls	r1, r1, #25
 801db10:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801db14:	7a13      	ldrb	r3, [r2, #8]
 801db16:	ea43 0300 	orr.w	r3, r3, r0
 801db1a:	bf44      	itt	mi
 801db1c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801db20:	b21b      	sxthmi	r3, r3
 801db22:	1b5d      	subs	r5, r3, r5
 801db24:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801db28:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801db2c:	7b53      	ldrb	r3, [r2, #13]
 801db2e:	015b      	lsls	r3, r3, #5
 801db30:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801db34:	7993      	ldrb	r3, [r2, #6]
 801db36:	430b      	orrs	r3, r1
 801db38:	2105      	movs	r1, #5
 801db3a:	005b      	lsls	r3, r3, #1
 801db3c:	fb93 f3f1 	sdiv	r3, r3, r1
 801db40:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801db44:	440b      	add	r3, r1
 801db46:	e757      	b.n	801d9f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801db48:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801db4c:	4283      	cmp	r3, r0
 801db4e:	d809      	bhi.n	801db64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801db50:	f240 60df 	movw	r0, #1759	@ 0x6df
 801db54:	4283      	cmp	r3, r0
 801db56:	f4bf af7d 	bcs.w	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db5a:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801db5e:	2b05      	cmp	r3, #5
 801db60:	d8d4      	bhi.n	801db0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801db62:	e777      	b.n	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db64:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801db68:	4283      	cmp	r3, r0
 801db6a:	d09a      	beq.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db6c:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801db70:	4283      	cmp	r3, r0
 801db72:	e7ca      	b.n	801db0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801db74:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801db78:	d22b      	bcs.n	801dbd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801db7a:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801db7e:	4283      	cmp	r3, r0
 801db80:	d28f      	bcs.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801db82:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801db86:	4283      	cmp	r3, r0
 801db88:	d816      	bhi.n	801dbb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801db8a:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801db8e:	4283      	cmp	r3, r0
 801db90:	f4bf af60 	bcs.w	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801db94:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801db98:	4283      	cmp	r3, r0
 801db9a:	d80a      	bhi.n	801dbb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801db9c:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801dba0:	4283      	cmp	r3, r0
 801dba2:	f4bf af57 	bcs.w	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dba6:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801dbaa:	4283      	cmp	r3, r0
 801dbac:	f43f af79 	beq.w	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dbb0:	e7ac      	b.n	801db0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801dbb2:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801dbb6:	e7f8      	b.n	801dbaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801dbb8:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801dbbc:	4283      	cmp	r3, r0
 801dbbe:	d802      	bhi.n	801dbc6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801dbc0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801dbc4:	e798      	b.n	801daf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801dbc6:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801dbca:	4283      	cmp	r3, r0
 801dbcc:	f47f af42 	bne.w	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dbd0:	e767      	b.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dbd2:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801dbd6:	4283      	cmp	r3, r0
 801dbd8:	f43f af63 	beq.w	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dbdc:	d802      	bhi.n	801dbe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801dbde:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801dbe2:	e7f2      	b.n	801dbca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801dbe4:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801dbe8:	4283      	cmp	r3, r0
 801dbea:	d805      	bhi.n	801dbf8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801dbec:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801dbf0:	4283      	cmp	r3, r0
 801dbf2:	f4ff af2f 	bcc.w	801da54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801dbf6:	e754      	b.n	801daa2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801dbf8:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801dbfc:	4283      	cmp	r3, r0
 801dbfe:	e7af      	b.n	801db60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801dc00:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801dc04:	4617      	mov	r7, r2
 801dc06:	f102 0808 	add.w	r8, r2, #8
 801dc0a:	4666      	mov	r6, ip
 801dc0c:	6838      	ldr	r0, [r7, #0]
 801dc0e:	3708      	adds	r7, #8
 801dc10:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801dc14:	46e6      	mov	lr, ip
 801dc16:	4547      	cmp	r7, r8
 801dc18:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801dc1c:	46f4      	mov	ip, lr
 801dc1e:	d1f5      	bne.n	801dc0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801dc20:	6838      	ldr	r0, [r7, #0]
 801dc22:	f8ce 0000 	str.w	r0, [lr]
 801dc26:	88b9      	ldrh	r1, [r7, #4]
 801dc28:	f8ae 1004 	strh.w	r1, [lr, #4]
 801dc2c:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801dc30:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801dc34:	d009      	beq.n	801dc4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801dc36:	7b51      	ldrb	r1, [r2, #13]
 801dc38:	7992      	ldrb	r2, [r2, #6]
 801dc3a:	0149      	lsls	r1, r1, #5
 801dc3c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801dc40:	4311      	orrs	r1, r2
 801dc42:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dc46:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801dc4a:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801dc4e:	d00d      	beq.n	801dc6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801dc50:	442b      	add	r3, r5
 801dc52:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801dc56:	b29b      	uxth	r3, r3
 801dc58:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801dc5c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801dc60:	10db      	asrs	r3, r3, #3
 801dc62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801dc66:	4313      	orrs	r3, r2
 801dc68:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801dc6c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801dc70:	00cb      	lsls	r3, r1, #3
 801dc72:	064f      	lsls	r7, r1, #25
 801dc74:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801dc78:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801dc7c:	ea43 0302 	orr.w	r3, r3, r2
 801dc80:	bf44      	itt	mi
 801dc82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801dc86:	b21b      	sxthmi	r3, r3
 801dc88:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801dc8c:	1b5d      	subs	r5, r3, r5
 801dc8e:	4632      	mov	r2, r6
 801dc90:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801dc94:	e6fa      	b.n	801da8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801dc96:	f104 0e4c 	add.w	lr, r4, #76	@ 0x4c
 801dc9a:	4694      	mov	ip, r2
 801dc9c:	f102 0908 	add.w	r9, r2, #8
 801dca0:	4676      	mov	r6, lr
 801dca2:	f8dc 0000 	ldr.w	r0, [ip]
 801dca6:	f10c 0c08 	add.w	ip, ip, #8
 801dcaa:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801dcae:	46f0      	mov	r8, lr
 801dcb0:	45cc      	cmp	ip, r9
 801dcb2:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801dcb6:	46c6      	mov	lr, r8
 801dcb8:	d1f3      	bne.n	801dca2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801dcba:	f8dc 0000 	ldr.w	r0, [ip]
 801dcbe:	f8c8 0000 	str.w	r0, [r8]
 801dcc2:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801dcc6:	f8a8 1004 	strh.w	r1, [r8, #4]
 801dcca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801dcce:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801dcd2:	d009      	beq.n	801dce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801dcd4:	7b51      	ldrb	r1, [r2, #13]
 801dcd6:	7992      	ldrb	r2, [r2, #6]
 801dcd8:	0149      	lsls	r1, r1, #5
 801dcda:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801dcde:	4311      	orrs	r1, r2
 801dce0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801dce4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801dce8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801dcec:	d00d      	beq.n	801dd0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801dcee:	1bdb      	subs	r3, r3, r7
 801dcf0:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801dcf4:	b29b      	uxth	r3, r3
 801dcf6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801dcfa:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801dcfe:	10db      	asrs	r3, r3, #3
 801dd00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801dd04:	4313      	orrs	r3, r2
 801dd06:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801dd0a:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801dd0e:	00cb      	lsls	r3, r1, #3
 801dd10:	0648      	lsls	r0, r1, #25
 801dd12:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801dd16:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801dd1a:	ea43 0302 	orr.w	r3, r3, r2
 801dd1e:	bf44      	itt	mi
 801dd20:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801dd24:	b21b      	sxthmi	r3, r3
 801dd26:	e7b1      	b.n	801dc8c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801dd28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd2c:	461e      	mov	r6, r3
 801dd2e:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801dd30:	4604      	mov	r4, r0
 801dd32:	4617      	mov	r7, r2
 801dd34:	b92b      	cbnz	r3, 801dd42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801dd36:	4b25      	ldr	r3, [pc, #148]	@ (801ddcc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801dd38:	21c0      	movs	r1, #192	@ 0xc0
 801dd3a:	4a25      	ldr	r2, [pc, #148]	@ (801ddd0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801dd3c:	4825      	ldr	r0, [pc, #148]	@ (801ddd4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801dd3e:	f00d f913 	bl	802af68 <__assert_func>
 801dd42:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801dd44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801dd48:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801dd4c:	f7ec f8a4 	bl	8009e98 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dd50:	4605      	mov	r5, r0
 801dd52:	b918      	cbnz	r0, 801dd5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801dd54:	6030      	str	r0, [r6, #0]
 801dd56:	4628      	mov	r0, r5
 801dd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dd5c:	683b      	ldr	r3, [r7, #0]
 801dd5e:	4601      	mov	r1, r0
 801dd60:	4638      	mov	r0, r7
 801dd62:	68db      	ldr	r3, [r3, #12]
 801dd64:	4798      	blx	r3
 801dd66:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801dd6a:	4602      	mov	r2, r0
 801dd6c:	6030      	str	r0, [r6, #0]
 801dd6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dd72:	d213      	bcs.n	801dd9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801dd74:	4643      	mov	r3, r8
 801dd76:	4639      	mov	r1, r7
 801dd78:	4620      	mov	r0, r4
 801dd7a:	f7ff fe33 	bl	801d9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801dd7e:	6030      	str	r0, [r6, #0]
 801dd80:	6833      	ldr	r3, [r6, #0]
 801dd82:	b143      	cbz	r3, 801dd96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801dd84:	7b5a      	ldrb	r2, [r3, #13]
 801dd86:	7a9b      	ldrb	r3, [r3, #10]
 801dd88:	0052      	lsls	r2, r2, #1
 801dd8a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801dd8e:	4313      	orrs	r3, r2
 801dd90:	bf0c      	ite	eq
 801dd92:	2301      	moveq	r3, #1
 801dd94:	2300      	movne	r3, #0
 801dd96:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801dd9a:	e7dc      	b.n	801dd56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801dd9c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801dda0:	b29b      	uxth	r3, r3
 801dda2:	2b7f      	cmp	r3, #127	@ 0x7f
 801dda4:	d804      	bhi.n	801ddb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801dda6:	4639      	mov	r1, r7
 801dda8:	4620      	mov	r0, r4
 801ddaa:	f7ff fd01 	bl	801d7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ddae:	e7e6      	b.n	801dd7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ddb0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	d0e3      	beq.n	801dd80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ddb8:	f640 1302 	movw	r3, #2306	@ 0x902
 801ddbc:	429d      	cmp	r5, r3
 801ddbe:	d1df      	bne.n	801dd80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801ddc0:	4601      	mov	r1, r0
 801ddc2:	4620      	mov	r0, r4
 801ddc4:	f7ff fcc4 	bl	801d750 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ddc8:	e7d9      	b.n	801dd7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801ddca:	bf00      	nop
 801ddcc:	0802f5ec 	.word	0x0802f5ec
 801ddd0:	0802f85e 	.word	0x0802f85e
 801ddd4:	0802f5f5 	.word	0x0802f5f5

0801ddd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ddd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dddc:	461e      	mov	r6, r3
 801ddde:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 801dde0:	4604      	mov	r4, r0
 801dde2:	4617      	mov	r7, r2
 801dde4:	b92b      	cbnz	r3, 801ddf2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801dde6:	4b26      	ldr	r3, [pc, #152]	@ (801de80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801dde8:	21c0      	movs	r1, #192	@ 0xc0
 801ddea:	4a26      	ldr	r2, [pc, #152]	@ (801de84 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801ddec:	4826      	ldr	r0, [pc, #152]	@ (801de88 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801ddee:	f00d f8bb 	bl	802af68 <__assert_func>
 801ddf2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801ddf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ddf8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801ddfc:	f7ec f84c 	bl	8009e98 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801de00:	4605      	mov	r5, r0
 801de02:	b918      	cbnz	r0, 801de0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801de04:	6030      	str	r0, [r6, #0]
 801de06:	4628      	mov	r0, r5
 801de08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	4601      	mov	r1, r0
 801de10:	4638      	mov	r0, r7
 801de12:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801de16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801de1a:	47c8      	blx	r9
 801de1c:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801de20:	4602      	mov	r2, r0
 801de22:	6030      	str	r0, [r6, #0]
 801de24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801de28:	d213      	bcs.n	801de52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801de2a:	4643      	mov	r3, r8
 801de2c:	4639      	mov	r1, r7
 801de2e:	4620      	mov	r0, r4
 801de30:	f7ff fdd8 	bl	801d9e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801de34:	6030      	str	r0, [r6, #0]
 801de36:	6833      	ldr	r3, [r6, #0]
 801de38:	b143      	cbz	r3, 801de4c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801de3a:	7b5a      	ldrb	r2, [r3, #13]
 801de3c:	7a9b      	ldrb	r3, [r3, #10]
 801de3e:	0052      	lsls	r2, r2, #1
 801de40:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801de44:	4313      	orrs	r3, r2
 801de46:	bf0c      	ite	eq
 801de48:	2301      	moveq	r3, #1
 801de4a:	2300      	movne	r3, #0
 801de4c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801de50:	e7d9      	b.n	801de06 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801de52:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801de56:	b29b      	uxth	r3, r3
 801de58:	2b7f      	cmp	r3, #127	@ 0x7f
 801de5a:	d804      	bhi.n	801de66 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801de5c:	4639      	mov	r1, r7
 801de5e:	4620      	mov	r0, r4
 801de60:	f7ff fca6 	bl	801d7b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801de64:	e7e6      	b.n	801de34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801de66:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801de6a:	2b00      	cmp	r3, #0
 801de6c:	d0e3      	beq.n	801de36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801de6e:	f640 1302 	movw	r3, #2306	@ 0x902
 801de72:	429d      	cmp	r5, r3
 801de74:	d1df      	bne.n	801de36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801de76:	4601      	mov	r1, r0
 801de78:	4620      	mov	r0, r4
 801de7a:	f7ff fc69 	bl	801d750 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801de7e:	e7d9      	b.n	801de34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801de80:	0802f5ec 	.word	0x0802f5ec
 801de84:	0802f85e 	.word	0x0802f85e
 801de88:	0802f5f5 	.word	0x0802f5f5

0801de8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801de8c:	b510      	push	{r4, lr}
 801de8e:	4604      	mov	r4, r0
 801de90:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801de94:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801de96:	b9d9      	cbnz	r1, 801ded0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801de98:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801de9a:	2b0a      	cmp	r3, #10
 801de9c:	d037      	beq.n	801df0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801de9e:	4620      	mov	r0, r4
 801dea0:	f7ff fc15 	bl	801d6ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801dea4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801dea6:	2b09      	cmp	r3, #9
 801dea8:	d906      	bls.n	801deb8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801deaa:	4b19      	ldr	r3, [pc, #100]	@ (801df10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801deac:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801deb0:	4a18      	ldr	r2, [pc, #96]	@ (801df14 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801deb2:	4819      	ldr	r0, [pc, #100]	@ (801df18 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801deb4:	f00d f858 	bl	802af68 <__assert_func>
 801deb8:	1c5a      	adds	r2, r3, #1
 801deba:	8722      	strh	r2, [r4, #56]	@ 0x38
 801debc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801debe:	4413      	add	r3, r2
 801dec0:	b29b      	uxth	r3, r3
 801dec2:	2b09      	cmp	r3, #9
 801dec4:	bf88      	it	hi
 801dec6:	3b0a      	subhi	r3, #10
 801dec8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801decc:	8458      	strh	r0, [r3, #34]	@ 0x22
 801dece:	e7e3      	b.n	801de98 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801ded0:	2b0a      	cmp	r3, #10
 801ded2:	d01c      	beq.n	801df0e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801ded4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801ded6:	3901      	subs	r1, #1
 801ded8:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801dedc:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801dede:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801dee2:	1c51      	adds	r1, r2, #1
 801dee4:	b289      	uxth	r1, r1
 801dee6:	2901      	cmp	r1, #1
 801dee8:	bf8a      	itet	hi
 801deea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801deee:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801def0:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801def2:	2b09      	cmp	r3, #9
 801def4:	d8d9      	bhi.n	801deaa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801def6:	1c5a      	adds	r2, r3, #1
 801def8:	8722      	strh	r2, [r4, #56]	@ 0x38
 801defa:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801defc:	4413      	add	r3, r2
 801defe:	b29b      	uxth	r3, r3
 801df00:	2b09      	cmp	r3, #9
 801df02:	bf88      	it	hi
 801df04:	3b0a      	subhi	r3, #10
 801df06:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801df0a:	8458      	strh	r0, [r3, #34]	@ 0x22
 801df0c:	e7c0      	b.n	801de90 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801df0e:	bd10      	pop	{r4, pc}
 801df10:	0802f621 	.word	0x0802f621
 801df14:	0802f9b4 	.word	0x0802f9b4
 801df18:	0802f5f5 	.word	0x0802f5f5

0801df1c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801df1c:	b538      	push	{r3, r4, r5, lr}
 801df1e:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801df20:	4604      	mov	r4, r0
 801df22:	b92a      	cbnz	r2, 801df30 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801df24:	4b13      	ldr	r3, [pc, #76]	@ (801df74 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801df26:	21d5      	movs	r1, #213	@ 0xd5
 801df28:	4a13      	ldr	r2, [pc, #76]	@ (801df78 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801df2a:	4814      	ldr	r0, [pc, #80]	@ (801df7c <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801df2c:	f00d f81c 	bl	802af68 <__assert_func>
 801df30:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801df32:	3a01      	subs	r2, #1
 801df34:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801df38:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 801df3a:	8702      	strh	r2, [r0, #56]	@ 0x38
 801df3c:	1c5a      	adds	r2, r3, #1
 801df3e:	b292      	uxth	r2, r2
 801df40:	2a09      	cmp	r2, #9
 801df42:	bf8a      	itet	hi
 801df44:	3b09      	subhi	r3, #9
 801df46:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801df48:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801df4a:	f7ff ff9f 	bl	801de8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801df4e:	8c23      	ldrh	r3, [r4, #32]
 801df50:	2b01      	cmp	r3, #1
 801df52:	bf9c      	itt	ls
 801df54:	3301      	addls	r3, #1
 801df56:	8423      	strhls	r3, [r4, #32]
 801df58:	8be3      	ldrh	r3, [r4, #30]
 801df5a:	b90b      	cbnz	r3, 801df60 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801df5c:	2302      	movs	r3, #2
 801df5e:	83e3      	strh	r3, [r4, #30]
 801df60:	8be3      	ldrh	r3, [r4, #30]
 801df62:	4628      	mov	r0, r5
 801df64:	3b01      	subs	r3, #1
 801df66:	b29b      	uxth	r3, r3
 801df68:	83e3      	strh	r3, [r4, #30]
 801df6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801df6e:	8365      	strh	r5, [r4, #26]
 801df70:	bd38      	pop	{r3, r4, r5, pc}
 801df72:	bf00      	nop
 801df74:	0802f5ec 	.word	0x0802f5ec
 801df78:	0802f909 	.word	0x0802f909
 801df7c:	0802f5f5 	.word	0x0802f5f5

0801df80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801df80:	428a      	cmp	r2, r1
 801df82:	b538      	push	{r3, r4, r5, lr}
 801df84:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801df86:	d90c      	bls.n	801dfa2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801df88:	b92c      	cbnz	r4, 801df96 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801df8a:	4b1c      	ldr	r3, [pc, #112]	@ (801dffc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801df8c:	21e1      	movs	r1, #225	@ 0xe1
 801df8e:	4a1c      	ldr	r2, [pc, #112]	@ (801e000 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801df90:	481c      	ldr	r0, [pc, #112]	@ (801e004 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801df92:	f00c ffe9 	bl	802af68 <__assert_func>
 801df96:	3c01      	subs	r4, #1
 801df98:	4b1b      	ldr	r3, [pc, #108]	@ (801e008 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801df9a:	4a1c      	ldr	r2, [pc, #112]	@ (801e00c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801df9c:	21c5      	movs	r1, #197	@ 0xc5
 801df9e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801dfa0:	e7f6      	b.n	801df90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dfa2:	428c      	cmp	r4, r1
 801dfa4:	d203      	bcs.n	801dfae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801dfa6:	4b1a      	ldr	r3, [pc, #104]	@ (801e010 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801dfa8:	21cb      	movs	r1, #203	@ 0xcb
 801dfaa:	4a1a      	ldr	r2, [pc, #104]	@ (801e014 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801dfac:	e7f0      	b.n	801df90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dfae:	1a64      	subs	r4, r4, r1
 801dfb0:	250a      	movs	r5, #10
 801dfb2:	8704      	strh	r4, [r0, #56]	@ 0x38
 801dfb4:	8ec4      	ldrh	r4, [r0, #54]	@ 0x36
 801dfb6:	4421      	add	r1, r4
 801dfb8:	b289      	uxth	r1, r1
 801dfba:	2909      	cmp	r1, #9
 801dfbc:	bf88      	it	hi
 801dfbe:	390a      	subhi	r1, #10
 801dfc0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dfc2:	b1ba      	cbz	r2, 801dff4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801dfc4:	3a01      	subs	r2, #1
 801dfc6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801dfc8:	b292      	uxth	r2, r2
 801dfca:	2909      	cmp	r1, #9
 801dfcc:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801dfd0:	d903      	bls.n	801dfda <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801dfd2:	4b11      	ldr	r3, [pc, #68]	@ (801e018 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801dfd4:	21e6      	movs	r1, #230	@ 0xe6
 801dfd6:	4a11      	ldr	r2, [pc, #68]	@ (801e01c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801dfd8:	e7da      	b.n	801df90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801dfda:	3101      	adds	r1, #1
 801dfdc:	8701      	strh	r1, [r0, #56]	@ 0x38
 801dfde:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dfe0:	b901      	cbnz	r1, 801dfe4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801dfe2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801dfe4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801dfe6:	3901      	subs	r1, #1
 801dfe8:	b289      	uxth	r1, r1
 801dfea:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801dfec:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801dff0:	844c      	strh	r4, [r1, #34]	@ 0x22
 801dff2:	e7e6      	b.n	801dfc2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801dff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dff8:	f7ff bf48 	b.w	801de8c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801dffc:	0802f5ec 	.word	0x0802f5ec
 801e000:	0802f6e2 	.word	0x0802f6e2
 801e004:	0802f5f5 	.word	0x0802f5f5
 801e008:	0802f62d 	.word	0x0802f62d
 801e00c:	0802f78c 	.word	0x0802f78c
 801e010:	0802f63b 	.word	0x0802f63b
 801e014:	0802fa63 	.word	0x0802fa63
 801e018:	0802f647 	.word	0x0802f647
 801e01c:	0802f65a 	.word	0x0802f65a

0801e020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801e020:	3a01      	subs	r2, #1
 801e022:	b570      	push	{r4, r5, r6, lr}
 801e024:	b292      	uxth	r2, r2
 801e026:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801e02a:	42b2      	cmp	r2, r6
 801e02c:	d019      	beq.n	801e062 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801e02e:	8c04      	ldrh	r4, [r0, #32]
 801e030:	f831 5b02 	ldrh.w	r5, [r1], #2
 801e034:	4294      	cmp	r4, r2
 801e036:	d805      	bhi.n	801e044 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801e038:	4b19      	ldr	r3, [pc, #100]	@ (801e0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e03a:	4a1a      	ldr	r2, [pc, #104]	@ (801e0a4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801e03c:	21c5      	movs	r1, #197	@ 0xc5
 801e03e:	481a      	ldr	r0, [pc, #104]	@ (801e0a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801e040:	f00c ff92 	bl	802af68 <__assert_func>
 801e044:	8bc4      	ldrh	r4, [r0, #30]
 801e046:	4414      	add	r4, r2
 801e048:	3a01      	subs	r2, #1
 801e04a:	b2a4      	uxth	r4, r4
 801e04c:	b292      	uxth	r2, r2
 801e04e:	2c01      	cmp	r4, #1
 801e050:	bf88      	it	hi
 801e052:	3c02      	subhi	r4, #2
 801e054:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801e058:	8b64      	ldrh	r4, [r4, #26]
 801e05a:	42ac      	cmp	r4, r5
 801e05c:	d0e5      	beq.n	801e02a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801e05e:	2000      	movs	r0, #0
 801e060:	bd70      	pop	{r4, r5, r6, pc}
 801e062:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801e066:	2400      	movs	r4, #0
 801e068:	4413      	add	r3, r2
 801e06a:	b2a2      	uxth	r2, r4
 801e06c:	429a      	cmp	r2, r3
 801e06e:	da14      	bge.n	801e09a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801e070:	8f06      	ldrh	r6, [r0, #56]	@ 0x38
 801e072:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801e076:	4296      	cmp	r6, r2
 801e078:	d802      	bhi.n	801e080 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801e07a:	4b09      	ldr	r3, [pc, #36]	@ (801e0a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801e07c:	4a0b      	ldr	r2, [pc, #44]	@ (801e0ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801e07e:	e7dd      	b.n	801e03c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801e080:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801e082:	3401      	adds	r4, #1
 801e084:	4432      	add	r2, r6
 801e086:	b292      	uxth	r2, r2
 801e088:	2a09      	cmp	r2, #9
 801e08a:	bf88      	it	hi
 801e08c:	3a0a      	subhi	r2, #10
 801e08e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801e092:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801e094:	42aa      	cmp	r2, r5
 801e096:	d0e8      	beq.n	801e06a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801e098:	e7e1      	b.n	801e05e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801e09a:	2001      	movs	r0, #1
 801e09c:	e7e0      	b.n	801e060 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801e09e:	bf00      	nop
 801e0a0:	0802f62d 	.word	0x0802f62d
 801e0a4:	0802fae7 	.word	0x0802fae7
 801e0a8:	0802f5f5 	.word	0x0802f5f5
 801e0ac:	0802f78c 	.word	0x0802f78c

0801e0b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801e0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0b4:	4605      	mov	r5, r0
 801e0b6:	4616      	mov	r6, r2
 801e0b8:	1c8c      	adds	r4, r1, #2
 801e0ba:	8809      	ldrh	r1, [r1, #0]
 801e0bc:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801e0c0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801e0c4:	42b3      	cmp	r3, r6
 801e0c6:	d124      	bne.n	801e112 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801e0c8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801e0cc:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801e0d0:	f001 070f 	and.w	r7, r1, #15
 801e0d4:	4652      	mov	r2, sl
 801e0d6:	f8cd 8000 	str.w	r8, [sp]
 801e0da:	464b      	mov	r3, r9
 801e0dc:	4621      	mov	r1, r4
 801e0de:	4628      	mov	r0, r5
 801e0e0:	f7ff ff9e 	bl	801e020 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801e0e4:	4683      	mov	fp, r0
 801e0e6:	b168      	cbz	r0, 801e104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801e0e8:	eb0a 0109 	add.w	r1, sl, r9
 801e0ec:	463a      	mov	r2, r7
 801e0ee:	4628      	mov	r0, r5
 801e0f0:	4441      	add	r1, r8
 801e0f2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801e0f6:	4649      	mov	r1, r9
 801e0f8:	f7ff ff42 	bl	801df80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801e0fc:	4658      	mov	r0, fp
 801e0fe:	b003      	add	sp, #12
 801e100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e104:	eb07 010a 	add.w	r1, r7, sl
 801e108:	4449      	add	r1, r9
 801e10a:	4441      	add	r1, r8
 801e10c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801e110:	e7d2      	b.n	801e0b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801e112:	f04f 0b00 	mov.w	fp, #0
 801e116:	e7f1      	b.n	801e0fc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801e118 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801e118:	b570      	push	{r4, r5, r6, lr}
 801e11a:	8810      	ldrh	r0, [r2, #0]
 801e11c:	4298      	cmp	r0, r3
 801e11e:	d817      	bhi.n	801e150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e120:	1e48      	subs	r0, r1, #1
 801e122:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801e126:	4298      	cmp	r0, r3
 801e128:	d312      	bcc.n	801e150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e12a:	2400      	movs	r4, #0
 801e12c:	428c      	cmp	r4, r1
 801e12e:	d20f      	bcs.n	801e150 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801e130:	1860      	adds	r0, r4, r1
 801e132:	1040      	asrs	r0, r0, #1
 801e134:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801e138:	0085      	lsls	r5, r0, #2
 801e13a:	42b3      	cmp	r3, r6
 801e13c:	d902      	bls.n	801e144 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801e13e:	3001      	adds	r0, #1
 801e140:	b284      	uxth	r4, r0
 801e142:	e7f3      	b.n	801e12c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e144:	d201      	bcs.n	801e14a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801e146:	b281      	uxth	r1, r0
 801e148:	e7f0      	b.n	801e12c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801e14a:	442a      	add	r2, r5
 801e14c:	8850      	ldrh	r0, [r2, #2]
 801e14e:	bd70      	pop	{r4, r5, r6, pc}
 801e150:	2000      	movs	r0, #0
 801e152:	e7fc      	b.n	801e14e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801e154 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e158:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801e15a:	4604      	mov	r4, r0
 801e15c:	260b      	movs	r6, #11
 801e15e:	886f      	ldrh	r7, [r5, #2]
 801e160:	087f      	lsrs	r7, r7, #1
 801e162:	3e01      	subs	r6, #1
 801e164:	d01b      	beq.n	801e19e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e166:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801e168:	b92b      	cbnz	r3, 801e176 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801e16a:	4b0e      	ldr	r3, [pc, #56]	@ (801e1a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801e16c:	21c0      	movs	r1, #192	@ 0xc0
 801e16e:	4a0e      	ldr	r2, [pc, #56]	@ (801e1a8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801e170:	480e      	ldr	r0, [pc, #56]	@ (801e1ac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801e172:	f00c fef9 	bl	802af68 <__assert_func>
 801e176:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801e178:	462a      	mov	r2, r5
 801e17a:	4639      	mov	r1, r7
 801e17c:	4620      	mov	r0, r4
 801e17e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801e182:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801e186:	4643      	mov	r3, r8
 801e188:	f7ff ffc6 	bl	801e118 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801e18c:	b138      	cbz	r0, 801e19e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801e18e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801e192:	4642      	mov	r2, r8
 801e194:	4620      	mov	r0, r4
 801e196:	f7ff ff8b 	bl	801e0b0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801e19a:	2800      	cmp	r0, #0
 801e19c:	d1e1      	bne.n	801e162 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801e19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1a2:	bf00      	nop
 801e1a4:	0802f5ec 	.word	0x0802f5ec
 801e1a8:	0802f85e 	.word	0x0802f85e
 801e1ac:	0802f5f5 	.word	0x0802f5f5

0801e1b0 <_ZN8touchgfx8ceil28_4El>:
 801e1b0:	f110 030f 	adds.w	r3, r0, #15
 801e1b4:	d401      	bmi.n	801e1ba <_ZN8touchgfx8ceil28_4El+0xa>
 801e1b6:	1118      	asrs	r0, r3, #4
 801e1b8:	4770      	bx	lr
 801e1ba:	2210      	movs	r2, #16
 801e1bc:	f1c0 0001 	rsb	r0, r0, #1
 801e1c0:	fb93 f3f2 	sdiv	r3, r3, r2
 801e1c4:	f010 000f 	ands.w	r0, r0, #15
 801e1c8:	bf18      	it	ne
 801e1ca:	2001      	movne	r0, #1
 801e1cc:	1a18      	subs	r0, r3, r0
 801e1ce:	4770      	bx	lr

0801e1d0 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801e1d0:	2900      	cmp	r1, #0
 801e1d2:	b538      	push	{r3, r4, r5, lr}
 801e1d4:	dc05      	bgt.n	801e1e2 <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801e1d6:	4b0f      	ldr	r3, [pc, #60]	@ (801e214 <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801e1d8:	21f7      	movs	r1, #247	@ 0xf7
 801e1da:	4a0f      	ldr	r2, [pc, #60]	@ (801e218 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801e1dc:	480f      	ldr	r0, [pc, #60]	@ (801e21c <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801e1de:	f00c fec3 	bl	802af68 <__assert_func>
 801e1e2:	2800      	cmp	r0, #0
 801e1e4:	db06      	blt.n	801e1f4 <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801e1e6:	fb90 f4f1 	sdiv	r4, r0, r1
 801e1ea:	fb01 0114 	mls	r1, r1, r4, r0
 801e1ee:	6014      	str	r4, [r2, #0]
 801e1f0:	6019      	str	r1, [r3, #0]
 801e1f2:	bd38      	pop	{r3, r4, r5, pc}
 801e1f4:	4240      	negs	r0, r0
 801e1f6:	fb90 f4f1 	sdiv	r4, r0, r1
 801e1fa:	4265      	negs	r5, r4
 801e1fc:	fb01 0014 	mls	r0, r1, r4, r0
 801e200:	6015      	str	r5, [r2, #0]
 801e202:	6018      	str	r0, [r3, #0]
 801e204:	2800      	cmp	r0, #0
 801e206:	d0f4      	beq.n	801e1f2 <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801e208:	6810      	ldr	r0, [r2, #0]
 801e20a:	3801      	subs	r0, #1
 801e20c:	6010      	str	r0, [r2, #0]
 801e20e:	6818      	ldr	r0, [r3, #0]
 801e210:	1a09      	subs	r1, r1, r0
 801e212:	e7ed      	b.n	801e1f0 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801e214:	0802fbb8 	.word	0x0802fbb8
 801e218:	0802fbf7 	.word	0x0802fbf7
 801e21c:	0802fbc8 	.word	0x0802fbc8

0801e220 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801e220:	b570      	push	{r4, r5, r6, lr}
 801e222:	694a      	ldr	r2, [r1, #20]
 801e224:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801e226:	684b      	ldr	r3, [r1, #4]
 801e228:	1b54      	subs	r4, r2, r5
 801e22a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801e22c:	f000 8106 	beq.w	801e43c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801e230:	1b9b      	subs	r3, r3, r6
 801e232:	d003      	beq.n	801e23c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e234:	4363      	muls	r3, r4
 801e236:	2210      	movs	r2, #16
 801e238:	fb93 f3f2 	sdiv	r3, r3, r2
 801e23c:	680c      	ldr	r4, [r1, #0]
 801e23e:	698a      	ldr	r2, [r1, #24]
 801e240:	1b65      	subs	r5, r4, r5
 801e242:	f000 80fd 	beq.w	801e440 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801e246:	1b92      	subs	r2, r2, r6
 801e248:	d003      	beq.n	801e252 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e24a:	436a      	muls	r2, r5
 801e24c:	2410      	movs	r4, #16
 801e24e:	fb92 f2f4 	sdiv	r2, r2, r4
 801e252:	1a9b      	subs	r3, r3, r2
 801e254:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801e47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801e258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e25c:	460a      	mov	r2, r1
 801e25e:	ee07 3a90 	vmov	s15, r3
 801e262:	f100 040c 	add.w	r4, r0, #12
 801e266:	4603      	mov	r3, r0
 801e268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e26c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e270:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801e274:	eeb1 6a43 	vneg.f32	s12, s6
 801e278:	edd2 7a02 	vldr	s15, [r2, #8]
 801e27c:	3214      	adds	r2, #20
 801e27e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e282:	ece3 6a01 	vstmia	r3!, {s13}
 801e286:	429c      	cmp	r4, r3
 801e288:	ed52 7a02 	vldr	s15, [r2, #-8]
 801e28c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e290:	edc3 7a02 	vstr	s15, [r3, #8]
 801e294:	ed52 7a01 	vldr	s15, [r2, #-4]
 801e298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e29c:	edc3 7a05 	vstr	s15, [r3, #20]
 801e2a0:	d1ea      	bne.n	801e278 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801e2a2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e2a4:	698b      	ldr	r3, [r1, #24]
 801e2a6:	edd0 4a02 	vldr	s9, [r0, #8]
 801e2aa:	1a9b      	subs	r3, r3, r2
 801e2ac:	edd0 3a00 	vldr	s7, [r0]
 801e2b0:	edd0 6a01 	vldr	s13, [r0, #4]
 801e2b4:	ee07 3a90 	vmov	s15, r3
 801e2b8:	684b      	ldr	r3, [r1, #4]
 801e2ba:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801e2be:	ed90 5a05 	vldr	s10, [r0, #20]
 801e2c2:	1a9b      	subs	r3, r3, r2
 801e2c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e2c8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801e2cc:	ed90 2a03 	vldr	s4, [r0, #12]
 801e2d0:	ee07 3a10 	vmov	s14, r3
 801e2d4:	edd0 5a04 	vldr	s11, [r0, #16]
 801e2d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801e2dc:	ed90 1a07 	vldr	s2, [r0, #28]
 801e2e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e2e4:	edd0 2a06 	vldr	s5, [r0, #24]
 801e2e8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801e2ec:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801e2f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e2f4:	ee32 5a45 	vsub.f32	s10, s4, s10
 801e2f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2fc:	ee67 7a83 	vmul.f32	s15, s15, s6
 801e300:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801e304:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e306:	694a      	ldr	r2, [r1, #20]
 801e308:	1b13      	subs	r3, r2, r4
 801e30a:	ee07 3a10 	vmov	s14, r3
 801e30e:	680b      	ldr	r3, [r1, #0]
 801e310:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e314:	1b1b      	subs	r3, r3, r4
 801e316:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e31a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801e31e:	ee07 3a10 	vmov	s14, r3
 801e322:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e326:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e32a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801e32e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801e332:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801e336:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e338:	698b      	ldr	r3, [r1, #24]
 801e33a:	1a9b      	subs	r3, r3, r2
 801e33c:	ee06 3a90 	vmov	s13, r3
 801e340:	684b      	ldr	r3, [r1, #4]
 801e342:	1a9b      	subs	r3, r3, r2
 801e344:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e348:	ee07 3a10 	vmov	s14, r3
 801e34c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801e350:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e354:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801e358:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e35c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801e360:	ee66 6a83 	vmul.f32	s13, s13, s6
 801e364:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801e368:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e36a:	694a      	ldr	r2, [r1, #20]
 801e36c:	1b13      	subs	r3, r2, r4
 801e36e:	ee07 3a10 	vmov	s14, r3
 801e372:	680b      	ldr	r3, [r1, #0]
 801e374:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e378:	1b1b      	subs	r3, r3, r4
 801e37a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e37e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801e382:	ee07 3a10 	vmov	s14, r3
 801e386:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e38a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e38e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e392:	edd0 5a08 	vldr	s11, [r0, #32]
 801e396:	ee31 1a65 	vsub.f32	s2, s2, s11
 801e39a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801e39e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801e3a2:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801e3a6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801e3a8:	698b      	ldr	r3, [r1, #24]
 801e3aa:	1a9b      	subs	r3, r3, r2
 801e3ac:	ee07 3a10 	vmov	s14, r3
 801e3b0:	684b      	ldr	r3, [r1, #4]
 801e3b2:	1a9b      	subs	r3, r3, r2
 801e3b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e3b8:	ee01 3a90 	vmov	s3, r3
 801e3bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e3c0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801e3c4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801e3c8:	ee61 1a84 	vmul.f32	s3, s3, s8
 801e3cc:	eea1 7a21 	vfma.f32	s14, s2, s3
 801e3d0:	ee27 7a03 	vmul.f32	s14, s14, s6
 801e3d4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801e3d8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801e3da:	694a      	ldr	r2, [r1, #20]
 801e3dc:	1b13      	subs	r3, r2, r4
 801e3de:	ee03 3a10 	vmov	s6, r3
 801e3e2:	680b      	ldr	r3, [r1, #0]
 801e3e4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e3e8:	1b1b      	subs	r3, r3, r4
 801e3ea:	ee23 3a04 	vmul.f32	s6, s6, s8
 801e3ee:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801e3f2:	ee03 3a10 	vmov	s6, r3
 801e3f6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801e3fa:	ee23 4a04 	vmul.f32	s8, s6, s8
 801e3fe:	eee1 5a04 	vfma.f32	s11, s2, s8
 801e402:	ee25 6a86 	vmul.f32	s12, s11, s12
 801e406:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801e40a:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801e40e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801e412:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801e416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e41a:	dd13      	ble.n	801e444 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801e41c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e420:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801e424:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801e426:	eee3 7a87 	vfma.f32	s15, s7, s14
 801e42a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801e42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e432:	dd15      	ble.n	801e460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801e434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801e438:	6403      	str	r3, [r0, #64]	@ 0x40
 801e43a:	bd70      	pop	{r4, r5, r6, pc}
 801e43c:	4623      	mov	r3, r4
 801e43e:	e6fd      	b.n	801e23c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801e440:	462a      	mov	r2, r5
 801e442:	e706      	b.n	801e252 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801e444:	d502      	bpl.n	801e44c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801e446:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e44a:	e7e9      	b.n	801e420 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801e44c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801e450:	eea3 2a85 	vfma.f32	s4, s7, s10
 801e454:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e45c:	dade      	bge.n	801e41c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801e45e:	e7f2      	b.n	801e446 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801e460:	d502      	bpl.n	801e468 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801e462:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801e466:	e7e7      	b.n	801e438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801e468:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801e46c:	eee3 4a86 	vfma.f32	s9, s7, s12
 801e470:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801e474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e478:	dadc      	bge.n	801e434 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801e47a:	e7f2      	b.n	801e462 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801e47c:	3d800000 	.word	0x3d800000

0801e480 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801e480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e484:	f04f 0814 	mov.w	r8, #20
 801e488:	4604      	mov	r4, r0
 801e48a:	4617      	mov	r7, r2
 801e48c:	460d      	mov	r5, r1
 801e48e:	fb08 f903 	mul.w	r9, r8, r3
 801e492:	461e      	mov	r6, r3
 801e494:	eb02 0a09 	add.w	sl, r2, r9
 801e498:	f8da 0004 	ldr.w	r0, [sl, #4]
 801e49c:	f7ff fe88 	bl	801e1b0 <_ZN8touchgfx8ceil28_4El>
 801e4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4a2:	6160      	str	r0, [r4, #20]
 801e4a4:	fb08 f803 	mul.w	r8, r8, r3
 801e4a8:	9001      	str	r0, [sp, #4]
 801e4aa:	eb07 0b08 	add.w	fp, r7, r8
 801e4ae:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e4b2:	f7ff fe7d 	bl	801e1b0 <_ZN8touchgfx8ceil28_4El>
 801e4b6:	9a01      	ldr	r2, [sp, #4]
 801e4b8:	1a80      	subs	r0, r0, r2
 801e4ba:	61a0      	str	r0, [r4, #24]
 801e4bc:	2800      	cmp	r0, #0
 801e4be:	f000 8088 	beq.w	801e5d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801e4c2:	f857 3009 	ldr.w	r3, [r7, r9]
 801e4c6:	f857 c008 	ldr.w	ip, [r7, r8]
 801e4ca:	f8db 0004 	ldr.w	r0, [fp, #4]
 801e4ce:	ebac 0c03 	sub.w	ip, ip, r3
 801e4d2:	f8da 1004 	ldr.w	r1, [sl, #4]
 801e4d6:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801e4da:	1a40      	subs	r0, r0, r1
 801e4dc:	fb0b f202 	mul.w	r2, fp, r2
 801e4e0:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801e4e4:	fb0c 2211 	mls	r2, ip, r1, r2
 801e4e8:	4641      	mov	r1, r8
 801e4ea:	fb00 2003 	mla	r0, r0, r3, r2
 801e4ee:	f104 0310 	add.w	r3, r4, #16
 801e4f2:	4622      	mov	r2, r4
 801e4f4:	3801      	subs	r0, #1
 801e4f6:	4440      	add	r0, r8
 801e4f8:	f7ff fe6a 	bl	801e1d0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801e4fc:	f104 0308 	add.w	r3, r4, #8
 801e500:	1d22      	adds	r2, r4, #4
 801e502:	4641      	mov	r1, r8
 801e504:	4658      	mov	r0, fp
 801e506:	f7ff fe63 	bl	801e1d0 <_ZN8touchgfx11floorDivModEllRlS0_>
 801e50a:	f8c4 800c 	str.w	r8, [r4, #12]
 801e50e:	6962      	ldr	r2, [r4, #20]
 801e510:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e514:	eddf 6a31 	vldr	s13, [pc, #196]	@ 801e5dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801e518:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e51c:	6822      	ldr	r2, [r4, #0]
 801e51e:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801e522:	ee07 3a10 	vmov	s14, r3
 801e526:	f857 3009 	ldr.w	r3, [r7, r9]
 801e52a:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801e52e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e532:	ee07 3a90 	vmov	s15, r3
 801e536:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801e53a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801e53e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e546:	edd3 6a00 	vldr	s13, [r3]
 801e54a:	eee6 6a07 	vfma.f32	s13, s12, s14
 801e54e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 801e552:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e556:	edc4 6a07 	vstr	s13, [r4, #28]
 801e55a:	edd4 6a01 	vldr	s13, [r4, #4]
 801e55e:	edd5 5a09 	vldr	s11, [r5, #36]	@ 0x24
 801e562:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801e566:	ed95 6a0a 	vldr	s12, [r5, #40]	@ 0x28
 801e56a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e56e:	ed84 6a08 	vstr	s12, [r4, #32]
 801e572:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801e574:	6262      	str	r2, [r4, #36]	@ 0x24
 801e576:	edd5 5a0c 	vldr	s11, [r5, #48]	@ 0x30
 801e57a:	ed93 6a03 	vldr	s12, [r3, #12]
 801e57e:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e582:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801e586:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801e58a:	ed84 6a0a 	vstr	s12, [r4, #40]	@ 0x28
 801e58e:	edd5 5a0b 	vldr	s11, [r5, #44]	@ 0x2c
 801e592:	ed95 6a0c 	vldr	s12, [r5, #48]	@ 0x30
 801e596:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801e59a:	ed84 6a0b 	vstr	s12, [r4, #44]	@ 0x2c
 801e59e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 801e5a0:	6322      	str	r2, [r4, #48]	@ 0x30
 801e5a2:	ed93 6a06 	vldr	s12, [r3, #24]
 801e5a6:	edd5 5a0e 	vldr	s11, [r5, #56]	@ 0x38
 801e5aa:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e5ae:	eeb0 7a46 	vmov.f32	s14, s12
 801e5b2:	ed95 6a0d 	vldr	s12, [r5, #52]	@ 0x34
 801e5b6:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e5ba:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 801e5be:	ed95 7a0d 	vldr	s14, [r5, #52]	@ 0x34
 801e5c2:	edd5 7a0e 	vldr	s15, [r5, #56]	@ 0x38
 801e5c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e5ca:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
 801e5ce:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801e5d0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e5d2:	4620      	mov	r0, r4
 801e5d4:	b003      	add	sp, #12
 801e5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5da:	bf00      	nop
 801e5dc:	3d800000 	.word	0x3d800000

0801e5e0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801e5e0:	4602      	mov	r2, r0
 801e5e2:	b148      	cbz	r0, 801e5f8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	b298      	uxth	r0, r3
 801e5e8:	3301      	adds	r3, #1
 801e5ea:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801e5ee:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801e5f2:	2900      	cmp	r1, #0
 801e5f4:	d1f7      	bne.n	801e5e6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801e5f6:	4770      	bx	lr
 801e5f8:	4770      	bx	lr

0801e5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801e5fa:	b530      	push	{r4, r5, lr}
 801e5fc:	4604      	mov	r4, r0
 801e5fe:	b159      	cbz	r1, 801e618 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801e600:	b148      	cbz	r0, 801e616 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e602:	2300      	movs	r3, #0
 801e604:	b298      	uxth	r0, r3
 801e606:	4282      	cmp	r2, r0
 801e608:	d905      	bls.n	801e616 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801e60a:	5ccd      	ldrb	r5, [r1, r3]
 801e60c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801e610:	3301      	adds	r3, #1
 801e612:	2d00      	cmp	r5, #0
 801e614:	d1f6      	bne.n	801e604 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801e616:	bd30      	pop	{r4, r5, pc}
 801e618:	4608      	mov	r0, r1
 801e61a:	e7fc      	b.n	801e616 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801e61c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801e61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e61e:	468c      	mov	ip, r1
 801e620:	b08b      	sub	sp, #44	@ 0x2c
 801e622:	2100      	movs	r1, #0
 801e624:	ae01      	add	r6, sp, #4
 801e626:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e62a:	211f      	movs	r1, #31
 801e62c:	fbb0 f7f3 	udiv	r7, r0, r3
 801e630:	fb03 0517 	mls	r5, r3, r7, r0
 801e634:	4638      	mov	r0, r7
 801e636:	b2ec      	uxtb	r4, r5
 801e638:	2d09      	cmp	r5, #9
 801e63a:	bfd4      	ite	le
 801e63c:	3430      	addle	r4, #48	@ 0x30
 801e63e:	3457      	addgt	r4, #87	@ 0x57
 801e640:	b2e4      	uxtb	r4, r4
 801e642:	558c      	strb	r4, [r1, r6]
 801e644:	1e4c      	subs	r4, r1, #1
 801e646:	b92f      	cbnz	r7, 801e654 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801e648:	4431      	add	r1, r6
 801e64a:	4660      	mov	r0, ip
 801e64c:	f7ff ffd5 	bl	801e5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e650:	b00b      	add	sp, #44	@ 0x2c
 801e652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e654:	4621      	mov	r1, r4
 801e656:	e7e9      	b.n	801e62c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801e658 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801e658:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e65a:	4607      	mov	r7, r0
 801e65c:	b08b      	sub	sp, #44	@ 0x2c
 801e65e:	4608      	mov	r0, r1
 801e660:	b341      	cbz	r1, 801e6b4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e662:	1e99      	subs	r1, r3, #2
 801e664:	2922      	cmp	r1, #34	@ 0x22
 801e666:	d825      	bhi.n	801e6b4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801e668:	2100      	movs	r1, #0
 801e66a:	463c      	mov	r4, r7
 801e66c:	261f      	movs	r6, #31
 801e66e:	f10d 0c04 	add.w	ip, sp, #4
 801e672:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e676:	1e71      	subs	r1, r6, #1
 801e678:	fb94 fef3 	sdiv	lr, r4, r3
 801e67c:	fb03 441e 	mls	r4, r3, lr, r4
 801e680:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801e684:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801e688:	b2ec      	uxtb	r4, r5
 801e68a:	2d09      	cmp	r5, #9
 801e68c:	bfd4      	ite	le
 801e68e:	3430      	addle	r4, #48	@ 0x30
 801e690:	3457      	addgt	r4, #87	@ 0x57
 801e692:	b2e4      	uxtb	r4, r4
 801e694:	f80c 4006 	strb.w	r4, [ip, r6]
 801e698:	4674      	mov	r4, lr
 801e69a:	b96c      	cbnz	r4, 801e6b8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801e69c:	2f00      	cmp	r7, #0
 801e69e:	da05      	bge.n	801e6ac <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801e6a0:	ab0a      	add	r3, sp, #40	@ 0x28
 801e6a2:	4419      	add	r1, r3
 801e6a4:	232d      	movs	r3, #45	@ 0x2d
 801e6a6:	f801 3c24 	strb.w	r3, [r1, #-36]
 801e6aa:	1eb1      	subs	r1, r6, #2
 801e6ac:	3101      	adds	r1, #1
 801e6ae:	4461      	add	r1, ip
 801e6b0:	f7ff ffa3 	bl	801e5fa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801e6b4:	b00b      	add	sp, #44	@ 0x2c
 801e6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6b8:	460e      	mov	r6, r1
 801e6ba:	e7dc      	b.n	801e676 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801e6bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801e6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6c0:	b085      	sub	sp, #20
 801e6c2:	4691      	mov	r9, r2
 801e6c4:	6802      	ldr	r2, [r0, #0]
 801e6c6:	4688      	mov	r8, r1
 801e6c8:	461c      	mov	r4, r3
 801e6ca:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801e6ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801e6d2:	4683      	mov	fp, r0
 801e6d4:	4610      	mov	r0, r2
 801e6d6:	9103      	str	r1, [sp, #12]
 801e6d8:	9302      	str	r3, [sp, #8]
 801e6da:	9201      	str	r2, [sp, #4]
 801e6dc:	f7ff ff80 	bl	801e5e0 <_ZN8touchgfx7Unicode6strlenEPKt>
 801e6e0:	f1b8 0f00 	cmp.w	r8, #0
 801e6e4:	bf0c      	ite	eq
 801e6e6:	4684      	moveq	ip, r0
 801e6e8:	f100 0c01 	addne.w	ip, r0, #1
 801e6ec:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801e6f0:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801e6f4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801e6f6:	fa1f fc8c 	uxth.w	ip, ip
 801e6fa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e6fc:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801e700:	9903      	ldr	r1, [sp, #12]
 801e702:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801e706:	d041      	beq.n	801e78c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e708:	d834      	bhi.n	801e774 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801e70a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801e70e:	d059      	beq.n	801e7c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801e710:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801e714:	d03a      	beq.n	801e78c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801e716:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801e71a:	d034      	beq.n	801e786 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e71c:	2400      	movs	r4, #0
 801e71e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801e722:	3a01      	subs	r2, #1
 801e724:	b169      	cbz	r1, 801e742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e726:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e728:	458c      	cmp	ip, r1
 801e72a:	da09      	bge.n	801e740 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e72c:	eba1 010c 	sub.w	r1, r1, ip
 801e730:	b289      	uxth	r1, r1
 801e732:	b933      	cbnz	r3, 801e742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e734:	2e00      	cmp	r6, #0
 801e736:	d051      	beq.n	801e7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e738:	2800      	cmp	r0, #0
 801e73a:	d04f      	beq.n	801e7dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801e73c:	440c      	add	r4, r1
 801e73e:	b2a4      	uxth	r4, r4
 801e740:	2100      	movs	r1, #0
 801e742:	682b      	ldr	r3, [r5, #0]
 801e744:	4293      	cmp	r3, r2
 801e746:	da07      	bge.n	801e758 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e748:	f1b8 0f00 	cmp.w	r8, #0
 801e74c:	d004      	beq.n	801e758 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801e74e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801e752:	682b      	ldr	r3, [r5, #0]
 801e754:	3301      	adds	r3, #1
 801e756:	602b      	str	r3, [r5, #0]
 801e758:	2730      	movs	r7, #48	@ 0x30
 801e75a:	2c00      	cmp	r4, #0
 801e75c:	d04e      	beq.n	801e7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e75e:	682e      	ldr	r6, [r5, #0]
 801e760:	3c01      	subs	r4, #1
 801e762:	42b2      	cmp	r2, r6
 801e764:	b2a4      	uxth	r4, r4
 801e766:	dd49      	ble.n	801e7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e768:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e76c:	682b      	ldr	r3, [r5, #0]
 801e76e:	3301      	adds	r3, #1
 801e770:	602b      	str	r3, [r5, #0]
 801e772:	e7f2      	b.n	801e75a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801e774:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801e778:	d01d      	beq.n	801e7b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801e77a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801e77e:	d002      	beq.n	801e786 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801e780:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801e784:	e7c9      	b.n	801e71a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801e786:	4684      	mov	ip, r0
 801e788:	f04f 0800 	mov.w	r8, #0
 801e78c:	2c00      	cmp	r4, #0
 801e78e:	d0c6      	beq.n	801e71e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e790:	b947      	cbnz	r7, 801e7a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e792:	2801      	cmp	r0, #1
 801e794:	d106      	bne.n	801e7a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801e796:	8814      	ldrh	r4, [r2, #0]
 801e798:	2c30      	cmp	r4, #48	@ 0x30
 801e79a:	bf02      	ittt	eq
 801e79c:	3202      	addeq	r2, #2
 801e79e:	4638      	moveq	r0, r7
 801e7a0:	f8cb 2000 	streq.w	r2, [fp]
 801e7a4:	45bc      	cmp	ip, r7
 801e7a6:	da14      	bge.n	801e7d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801e7a8:	b2bf      	uxth	r7, r7
 801e7aa:	eba7 040c 	sub.w	r4, r7, ip
 801e7ae:	46bc      	mov	ip, r7
 801e7b0:	b2a4      	uxth	r4, r4
 801e7b2:	2600      	movs	r6, #0
 801e7b4:	e7b3      	b.n	801e71e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e7b6:	4684      	mov	ip, r0
 801e7b8:	b16c      	cbz	r4, 801e7d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801e7ba:	42b8      	cmp	r0, r7
 801e7bc:	dd00      	ble.n	801e7c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801e7be:	b2b8      	uxth	r0, r7
 801e7c0:	2400      	movs	r4, #0
 801e7c2:	e003      	b.n	801e7cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801e7c4:	f04f 0c01 	mov.w	ip, #1
 801e7c8:	2400      	movs	r4, #0
 801e7ca:	4660      	mov	r0, ip
 801e7cc:	4626      	mov	r6, r4
 801e7ce:	46a0      	mov	r8, r4
 801e7d0:	e7a5      	b.n	801e71e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e7d2:	2400      	movs	r4, #0
 801e7d4:	e7ed      	b.n	801e7b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801e7d6:	4626      	mov	r6, r4
 801e7d8:	46a0      	mov	r8, r4
 801e7da:	e7a0      	b.n	801e71e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801e7dc:	2900      	cmp	r1, #0
 801e7de:	d0b0      	beq.n	801e742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e7e0:	2720      	movs	r7, #32
 801e7e2:	682e      	ldr	r6, [r5, #0]
 801e7e4:	2900      	cmp	r1, #0
 801e7e6:	d0ac      	beq.n	801e742 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801e7e8:	3901      	subs	r1, #1
 801e7ea:	4296      	cmp	r6, r2
 801e7ec:	b289      	uxth	r1, r1
 801e7ee:	daa7      	bge.n	801e740 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801e7f0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801e7f4:	682b      	ldr	r3, [r5, #0]
 801e7f6:	3301      	adds	r3, #1
 801e7f8:	602b      	str	r3, [r5, #0]
 801e7fa:	e7f2      	b.n	801e7e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801e7fc:	b188      	cbz	r0, 801e822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e7fe:	682b      	ldr	r3, [r5, #0]
 801e800:	3801      	subs	r0, #1
 801e802:	429a      	cmp	r2, r3
 801e804:	b280      	uxth	r0, r0
 801e806:	dd0c      	ble.n	801e822 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801e808:	f8db 3000 	ldr.w	r3, [fp]
 801e80c:	1c9c      	adds	r4, r3, #2
 801e80e:	f8cb 4000 	str.w	r4, [fp]
 801e812:	881c      	ldrh	r4, [r3, #0]
 801e814:	682b      	ldr	r3, [r5, #0]
 801e816:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801e81a:	682b      	ldr	r3, [r5, #0]
 801e81c:	3301      	adds	r3, #1
 801e81e:	602b      	str	r3, [r5, #0]
 801e820:	e7ec      	b.n	801e7fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801e822:	2620      	movs	r6, #32
 801e824:	b151      	cbz	r1, 801e83c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e826:	6828      	ldr	r0, [r5, #0]
 801e828:	3901      	subs	r1, #1
 801e82a:	4282      	cmp	r2, r0
 801e82c:	b289      	uxth	r1, r1
 801e82e:	dd05      	ble.n	801e83c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801e830:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801e834:	682b      	ldr	r3, [r5, #0]
 801e836:	3301      	adds	r3, #1
 801e838:	602b      	str	r3, [r5, #0]
 801e83a:	e7f3      	b.n	801e824 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801e83c:	b005      	add	sp, #20
 801e83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e842 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801e842:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e846:	2400      	movs	r4, #0
 801e848:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801e84c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801e850:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801e854:	8014      	strh	r4, [r2, #0]
 801e856:	701c      	strb	r4, [r3, #0]
 801e858:	f888 4000 	strb.w	r4, [r8]
 801e85c:	f88c 4000 	strb.w	r4, [ip]
 801e860:	f88e 4000 	strb.w	r4, [lr]
 801e864:	703c      	strb	r4, [r7, #0]
 801e866:	6804      	ldr	r4, [r0, #0]
 801e868:	b1a4      	cbz	r4, 801e894 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801e86a:	8824      	ldrh	r4, [r4, #0]
 801e86c:	f04f 0901 	mov.w	r9, #1
 801e870:	b314      	cbz	r4, 801e8b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e872:	2c2b      	cmp	r4, #43	@ 0x2b
 801e874:	d001      	beq.n	801e87a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801e876:	2c20      	cmp	r4, #32
 801e878:	d110      	bne.n	801e89c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801e87a:	8014      	strh	r4, [r2, #0]
 801e87c:	6804      	ldr	r4, [r0, #0]
 801e87e:	b10c      	cbz	r4, 801e884 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801e880:	3402      	adds	r4, #2
 801e882:	6004      	str	r4, [r0, #0]
 801e884:	680c      	ldr	r4, [r1, #0]
 801e886:	b10c      	cbz	r4, 801e88c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801e888:	3401      	adds	r4, #1
 801e88a:	600c      	str	r4, [r1, #0]
 801e88c:	6804      	ldr	r4, [r0, #0]
 801e88e:	b17c      	cbz	r4, 801e8b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801e890:	8824      	ldrh	r4, [r4, #0]
 801e892:	e7ed      	b.n	801e870 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e894:	680c      	ldr	r4, [r1, #0]
 801e896:	b17c      	cbz	r4, 801e8b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e898:	7824      	ldrb	r4, [r4, #0]
 801e89a:	e7e7      	b.n	801e86c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801e89c:	2c2d      	cmp	r4, #45	@ 0x2d
 801e89e:	d102      	bne.n	801e8a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801e8a0:	f883 9000 	strb.w	r9, [r3]
 801e8a4:	e7ea      	b.n	801e87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e8a6:	2c23      	cmp	r4, #35	@ 0x23
 801e8a8:	d107      	bne.n	801e8ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801e8aa:	f888 9000 	strb.w	r9, [r8]
 801e8ae:	e7e5      	b.n	801e87c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801e8b0:	680c      	ldr	r4, [r1, #0]
 801e8b2:	b10c      	cbz	r4, 801e8b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801e8b4:	7824      	ldrb	r4, [r4, #0]
 801e8b6:	e7db      	b.n	801e870 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801e8b8:	2400      	movs	r4, #0
 801e8ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801e8be:	2b09      	cmp	r3, #9
 801e8c0:	d901      	bls.n	801e8c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801e8c2:	2c2a      	cmp	r4, #42	@ 0x2a
 801e8c4:	d122      	bne.n	801e90c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e8c6:	2301      	movs	r3, #1
 801e8c8:	2c30      	cmp	r4, #48	@ 0x30
 801e8ca:	f88e 3000 	strb.w	r3, [lr]
 801e8ce:	d10d      	bne.n	801e8ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e8d0:	f88c 3000 	strb.w	r3, [ip]
 801e8d4:	6803      	ldr	r3, [r0, #0]
 801e8d6:	b10b      	cbz	r3, 801e8dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801e8d8:	3302      	adds	r3, #2
 801e8da:	6003      	str	r3, [r0, #0]
 801e8dc:	680b      	ldr	r3, [r1, #0]
 801e8de:	b10b      	cbz	r3, 801e8e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801e8e0:	3301      	adds	r3, #1
 801e8e2:	600b      	str	r3, [r1, #0]
 801e8e4:	6803      	ldr	r3, [r0, #0]
 801e8e6:	2b00      	cmp	r3, #0
 801e8e8:	d02f      	beq.n	801e94a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801e8ea:	881c      	ldrh	r4, [r3, #0]
 801e8ec:	2c2a      	cmp	r4, #42	@ 0x2a
 801e8ee:	d135      	bne.n	801e95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e8f0:	f04f 33ff 	mov.w	r3, #4294967295
 801e8f4:	6033      	str	r3, [r6, #0]
 801e8f6:	6803      	ldr	r3, [r0, #0]
 801e8f8:	b10b      	cbz	r3, 801e8fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801e8fa:	3302      	adds	r3, #2
 801e8fc:	6003      	str	r3, [r0, #0]
 801e8fe:	680b      	ldr	r3, [r1, #0]
 801e900:	b10b      	cbz	r3, 801e906 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801e902:	3301      	adds	r3, #1
 801e904:	600b      	str	r3, [r1, #0]
 801e906:	6803      	ldr	r3, [r0, #0]
 801e908:	b31b      	cbz	r3, 801e952 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801e90a:	881c      	ldrh	r4, [r3, #0]
 801e90c:	2c2e      	cmp	r4, #46	@ 0x2e
 801e90e:	d11a      	bne.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e910:	2301      	movs	r3, #1
 801e912:	703b      	strb	r3, [r7, #0]
 801e914:	6803      	ldr	r3, [r0, #0]
 801e916:	b10b      	cbz	r3, 801e91c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801e918:	3302      	adds	r3, #2
 801e91a:	6003      	str	r3, [r0, #0]
 801e91c:	680b      	ldr	r3, [r1, #0]
 801e91e:	b10b      	cbz	r3, 801e924 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801e920:	3301      	adds	r3, #1
 801e922:	600b      	str	r3, [r1, #0]
 801e924:	6803      	ldr	r3, [r0, #0]
 801e926:	2b00      	cmp	r3, #0
 801e928:	d036      	beq.n	801e998 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801e92a:	881b      	ldrh	r3, [r3, #0]
 801e92c:	2b2a      	cmp	r3, #42	@ 0x2a
 801e92e:	d137      	bne.n	801e9a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e930:	f04f 33ff 	mov.w	r3, #4294967295
 801e934:	602b      	str	r3, [r5, #0]
 801e936:	6803      	ldr	r3, [r0, #0]
 801e938:	b10b      	cbz	r3, 801e93e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801e93a:	3302      	adds	r3, #2
 801e93c:	6003      	str	r3, [r0, #0]
 801e93e:	680b      	ldr	r3, [r1, #0]
 801e940:	b10b      	cbz	r3, 801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e942:	3301      	adds	r3, #1
 801e944:	600b      	str	r3, [r1, #0]
 801e946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e94a:	680c      	ldr	r4, [r1, #0]
 801e94c:	b134      	cbz	r4, 801e95c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801e94e:	7824      	ldrb	r4, [r4, #0]
 801e950:	e7cc      	b.n	801e8ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801e952:	680b      	ldr	r3, [r1, #0]
 801e954:	2b00      	cmp	r3, #0
 801e956:	d0f6      	beq.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801e958:	781c      	ldrb	r4, [r3, #0]
 801e95a:	e7d7      	b.n	801e90c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e95c:	2300      	movs	r3, #0
 801e95e:	220a      	movs	r2, #10
 801e960:	6033      	str	r3, [r6, #0]
 801e962:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e966:	fa1f f38c 	uxth.w	r3, ip
 801e96a:	2b09      	cmp	r3, #9
 801e96c:	d8ce      	bhi.n	801e90c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801e96e:	6833      	ldr	r3, [r6, #0]
 801e970:	fb02 c303 	mla	r3, r2, r3, ip
 801e974:	6033      	str	r3, [r6, #0]
 801e976:	6803      	ldr	r3, [r0, #0]
 801e978:	b10b      	cbz	r3, 801e97e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801e97a:	3302      	adds	r3, #2
 801e97c:	6003      	str	r3, [r0, #0]
 801e97e:	680b      	ldr	r3, [r1, #0]
 801e980:	b10b      	cbz	r3, 801e986 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801e982:	3301      	adds	r3, #1
 801e984:	600b      	str	r3, [r1, #0]
 801e986:	6803      	ldr	r3, [r0, #0]
 801e988:	b10b      	cbz	r3, 801e98e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801e98a:	881c      	ldrh	r4, [r3, #0]
 801e98c:	e7e9      	b.n	801e962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e98e:	680c      	ldr	r4, [r1, #0]
 801e990:	2c00      	cmp	r4, #0
 801e992:	d0e6      	beq.n	801e962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e994:	7824      	ldrb	r4, [r4, #0]
 801e996:	e7e4      	b.n	801e962 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801e998:	680b      	ldr	r3, [r1, #0]
 801e99a:	b10b      	cbz	r3, 801e9a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801e99c:	781b      	ldrb	r3, [r3, #0]
 801e99e:	e7c5      	b.n	801e92c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801e9a0:	2200      	movs	r2, #0
 801e9a2:	240a      	movs	r4, #10
 801e9a4:	602a      	str	r2, [r5, #0]
 801e9a6:	3b30      	subs	r3, #48	@ 0x30
 801e9a8:	682a      	ldr	r2, [r5, #0]
 801e9aa:	b29e      	uxth	r6, r3
 801e9ac:	2e09      	cmp	r6, #9
 801e9ae:	d813      	bhi.n	801e9d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801e9b0:	fb04 3302 	mla	r3, r4, r2, r3
 801e9b4:	602b      	str	r3, [r5, #0]
 801e9b6:	6803      	ldr	r3, [r0, #0]
 801e9b8:	b10b      	cbz	r3, 801e9be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801e9ba:	3302      	adds	r3, #2
 801e9bc:	6003      	str	r3, [r0, #0]
 801e9be:	680b      	ldr	r3, [r1, #0]
 801e9c0:	b10b      	cbz	r3, 801e9c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801e9c2:	3301      	adds	r3, #1
 801e9c4:	600b      	str	r3, [r1, #0]
 801e9c6:	6803      	ldr	r3, [r0, #0]
 801e9c8:	b10b      	cbz	r3, 801e9ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801e9ca:	881b      	ldrh	r3, [r3, #0]
 801e9cc:	e7eb      	b.n	801e9a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e9ce:	680b      	ldr	r3, [r1, #0]
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d0e8      	beq.n	801e9a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e9d4:	781b      	ldrb	r3, [r3, #0]
 801e9d6:	e7e6      	b.n	801e9a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801e9d8:	2a06      	cmp	r2, #6
 801e9da:	bfa8      	it	ge
 801e9dc:	2206      	movge	r2, #6
 801e9de:	602a      	str	r2, [r5, #0]
 801e9e0:	e7b1      	b.n	801e946 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801e9e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801e9e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9e6:	b0a3      	sub	sp, #140	@ 0x8c
 801e9e8:	2600      	movs	r6, #0
 801e9ea:	4607      	mov	r7, r0
 801e9ec:	4688      	mov	r8, r1
 801e9ee:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801e9f2:	4631      	mov	r1, r6
 801e9f4:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801e9f6:	4648      	mov	r0, r9
 801e9f8:	960d      	str	r6, [sp, #52]	@ 0x34
 801e9fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801e9fe:	2242      	movs	r2, #66	@ 0x42
 801ea00:	f00c fcb9 	bl	802b376 <memset>
 801ea04:	b15f      	cbz	r7, 801ea1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ea06:	f108 3aff 	add.w	sl, r8, #4294967295
 801ea0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea0e:	b152      	cbz	r2, 801ea26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ea10:	8812      	ldrh	r2, [r2, #0]
 801ea12:	b10a      	cbz	r2, 801ea18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ea14:	459a      	cmp	sl, r3
 801ea16:	dc2e      	bgt.n	801ea76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ea18:	2200      	movs	r2, #0
 801ea1a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ea1e:	4638      	mov	r0, r7
 801ea20:	b023      	add	sp, #140	@ 0x8c
 801ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea26:	9a08      	ldr	r2, [sp, #32]
 801ea28:	2a00      	cmp	r2, #0
 801ea2a:	d0f5      	beq.n	801ea18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801ea2c:	7812      	ldrb	r2, [r2, #0]
 801ea2e:	e7f0      	b.n	801ea12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801ea30:	2d00      	cmp	r5, #0
 801ea32:	d0ea      	beq.n	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea34:	782a      	ldrb	r2, [r5, #0]
 801ea36:	b142      	cbz	r2, 801ea4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ea38:	2a25      	cmp	r2, #37	@ 0x25
 801ea3a:	d001      	beq.n	801ea40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ea3c:	459a      	cmp	sl, r3
 801ea3e:	dc08      	bgt.n	801ea52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ea40:	f1bb 0f00 	cmp.w	fp, #0
 801ea44:	d121      	bne.n	801ea8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ea46:	2d00      	cmp	r5, #0
 801ea48:	d0df      	beq.n	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea4a:	782a      	ldrb	r2, [r5, #0]
 801ea4c:	f04f 0b00 	mov.w	fp, #0
 801ea50:	e01d      	b.n	801ea8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801ea52:	f1bb 0f00 	cmp.w	fp, #0
 801ea56:	d077      	beq.n	801eb48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801ea58:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea5c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ea60:	f1bb 0f00 	cmp.w	fp, #0
 801ea64:	d002      	beq.n	801ea6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801ea66:	f10b 0202 	add.w	r2, fp, #2
 801ea6a:	9209      	str	r2, [sp, #36]	@ 0x24
 801ea6c:	b10d      	cbz	r5, 801ea72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801ea6e:	3501      	adds	r5, #1
 801ea70:	9508      	str	r5, [sp, #32]
 801ea72:	3301      	adds	r3, #1
 801ea74:	930d      	str	r3, [sp, #52]	@ 0x34
 801ea76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ea78:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801ea7c:	f1bb 0f00 	cmp.w	fp, #0
 801ea80:	d0d6      	beq.n	801ea30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801ea82:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea86:	2a00      	cmp	r2, #0
 801ea88:	d1d6      	bne.n	801ea38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801ea8a:	f8bb 2000 	ldrh.w	r2, [fp]
 801ea8e:	2a00      	cmp	r2, #0
 801ea90:	d0bb      	beq.n	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea92:	459a      	cmp	sl, r3
 801ea94:	ddb9      	ble.n	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ea96:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801ea9a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801ea9e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801eaa2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801eaa6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801eaaa:	960e      	str	r6, [sp, #56]	@ 0x38
 801eaac:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801eab0:	960f      	str	r6, [sp, #60]	@ 0x3c
 801eab2:	f1bb 0f00 	cmp.w	fp, #0
 801eab6:	d002      	beq.n	801eabe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801eab8:	f10b 0302 	add.w	r3, fp, #2
 801eabc:	9309      	str	r3, [sp, #36]	@ 0x24
 801eabe:	b10d      	cbz	r5, 801eac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801eac0:	1c6b      	adds	r3, r5, #1
 801eac2:	9308      	str	r3, [sp, #32]
 801eac4:	ab0f      	add	r3, sp, #60	@ 0x3c
 801eac6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801eaca:	a908      	add	r1, sp, #32
 801eacc:	a809      	add	r0, sp, #36	@ 0x24
 801eace:	9305      	str	r3, [sp, #20]
 801ead0:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801ead4:	9304      	str	r3, [sp, #16]
 801ead6:	ab0e      	add	r3, sp, #56	@ 0x38
 801ead8:	9303      	str	r3, [sp, #12]
 801eada:	ab0c      	add	r3, sp, #48	@ 0x30
 801eadc:	9302      	str	r3, [sp, #8]
 801eade:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801eae2:	9301      	str	r3, [sp, #4]
 801eae4:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801eae8:	9300      	str	r3, [sp, #0]
 801eaea:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801eaee:	f7ff fea8 	bl	801e842 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801eaf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eaf4:	2b00      	cmp	r3, #0
 801eaf6:	bfbf      	itttt	lt
 801eaf8:	6823      	ldrlt	r3, [r4, #0]
 801eafa:	3404      	addlt	r4, #4
 801eafc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801eb00:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801eb02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	bfbe      	ittt	lt
 801eb08:	6823      	ldrlt	r3, [r4, #0]
 801eb0a:	3404      	addlt	r4, #4
 801eb0c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801eb10:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801eb14:	bfb8      	it	lt
 801eb16:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801eb18:	b1d9      	cbz	r1, 801eb52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801eb1a:	880b      	ldrh	r3, [r1, #0]
 801eb1c:	2b69      	cmp	r3, #105	@ 0x69
 801eb1e:	d01f      	beq.n	801eb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb20:	d82f      	bhi.n	801eb82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801eb22:	2b58      	cmp	r3, #88	@ 0x58
 801eb24:	d01c      	beq.n	801eb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb26:	d818      	bhi.n	801eb5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801eb28:	2b25      	cmp	r3, #37	@ 0x25
 801eb2a:	d034      	beq.n	801eb96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801eb2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb2e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801eb32:	f1bb 0f00 	cmp.w	fp, #0
 801eb36:	f000 80b7 	beq.w	801eca8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801eb3a:	f8bb 5000 	ldrh.w	r5, [fp]
 801eb3e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801eb42:	3301      	adds	r3, #1
 801eb44:	930d      	str	r3, [sp, #52]	@ 0x34
 801eb46:	e029      	b.n	801eb9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801eb48:	b10d      	cbz	r5, 801eb4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801eb4a:	782a      	ldrb	r2, [r5, #0]
 801eb4c:	e786      	b.n	801ea5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801eb4e:	462a      	mov	r2, r5
 801eb50:	e784      	b.n	801ea5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801eb52:	2a00      	cmp	r2, #0
 801eb54:	d0ea      	beq.n	801eb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb56:	7813      	ldrb	r3, [r2, #0]
 801eb58:	e7e0      	b.n	801eb1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801eb5a:	3b63      	subs	r3, #99	@ 0x63
 801eb5c:	2b01      	cmp	r3, #1
 801eb5e:	d8e5      	bhi.n	801eb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb60:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801eb64:	b329      	cbz	r1, 801ebb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801eb66:	880b      	ldrh	r3, [r1, #0]
 801eb68:	2b69      	cmp	r3, #105	@ 0x69
 801eb6a:	d063      	beq.n	801ec34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eb6c:	d825      	bhi.n	801ebba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801eb6e:	2b63      	cmp	r3, #99	@ 0x63
 801eb70:	d038      	beq.n	801ebe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801eb72:	2b64      	cmp	r3, #100	@ 0x64
 801eb74:	d05e      	beq.n	801ec34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801eb76:	2b58      	cmp	r3, #88	@ 0x58
 801eb78:	d07a      	beq.n	801ec70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801eb7a:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801eb7e:	4625      	mov	r5, r4
 801eb80:	e036      	b.n	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801eb82:	2b73      	cmp	r3, #115	@ 0x73
 801eb84:	d0ec      	beq.n	801eb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb86:	d802      	bhi.n	801eb8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801eb88:	2b6f      	cmp	r3, #111	@ 0x6f
 801eb8a:	d1cf      	bne.n	801eb2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801eb8c:	e7e8      	b.n	801eb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb8e:	2b75      	cmp	r3, #117	@ 0x75
 801eb90:	d0e6      	beq.n	801eb60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801eb92:	2b78      	cmp	r3, #120	@ 0x78
 801eb94:	e7f9      	b.n	801eb8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801eb96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801eb98:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801eb9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb9e:	b10b      	cbz	r3, 801eba4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801eba0:	3302      	adds	r3, #2
 801eba2:	9309      	str	r3, [sp, #36]	@ 0x24
 801eba4:	9b08      	ldr	r3, [sp, #32]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	f43f af2f 	beq.w	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ebac:	3301      	adds	r3, #1
 801ebae:	9308      	str	r3, [sp, #32]
 801ebb0:	e72b      	b.n	801ea0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ebb2:	2a00      	cmp	r2, #0
 801ebb4:	d0e1      	beq.n	801eb7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ebb6:	7813      	ldrb	r3, [r2, #0]
 801ebb8:	e7d6      	b.n	801eb68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ebba:	2b73      	cmp	r3, #115	@ 0x73
 801ebbc:	d036      	beq.n	801ec2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ebbe:	d807      	bhi.n	801ebd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ebc0:	2b6f      	cmp	r3, #111	@ 0x6f
 801ebc2:	d1da      	bne.n	801eb7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ebc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ebc6:	1d25      	adds	r5, r4, #4
 801ebc8:	2308      	movs	r3, #8
 801ebca:	eba8 0202 	sub.w	r2, r8, r2
 801ebce:	e049      	b.n	801ec64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ebd0:	2b75      	cmp	r3, #117	@ 0x75
 801ebd2:	d042      	beq.n	801ec5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801ebd4:	2b78      	cmp	r3, #120	@ 0x78
 801ebd6:	d1d0      	bne.n	801eb7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ebd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ebda:	1d25      	adds	r5, r4, #4
 801ebdc:	2310      	movs	r3, #16
 801ebde:	eba8 0202 	sub.w	r2, r8, r2
 801ebe2:	e03f      	b.n	801ec64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ebe4:	7823      	ldrb	r3, [r4, #0]
 801ebe6:	1d25      	adds	r5, r4, #4
 801ebe8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801ebec:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801ebf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ebf2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	d051      	beq.n	801ec9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801ebfa:	881a      	ldrh	r2, [r3, #0]
 801ebfc:	a80d      	add	r0, sp, #52	@ 0x34
 801ebfe:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801ec02:	462c      	mov	r4, r5
 801ec04:	9005      	str	r0, [sp, #20]
 801ec06:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801ec0a:	9004      	str	r0, [sp, #16]
 801ec0c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ec0e:	9003      	str	r0, [sp, #12]
 801ec10:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801ec14:	9002      	str	r0, [sp, #8]
 801ec16:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ec18:	9001      	str	r0, [sp, #4]
 801ec1a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801ec1e:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ec22:	9000      	str	r0, [sp, #0]
 801ec24:	a810      	add	r0, sp, #64	@ 0x40
 801ec26:	f7ff fd49 	bl	801e6bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801ec2a:	e7b7      	b.n	801eb9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ec2c:	1d25      	adds	r5, r4, #4
 801ec2e:	6823      	ldr	r3, [r4, #0]
 801ec30:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec32:	e7dd      	b.n	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec36:	230a      	movs	r3, #10
 801ec38:	4649      	mov	r1, r9
 801ec3a:	6820      	ldr	r0, [r4, #0]
 801ec3c:	eba8 0202 	sub.w	r2, r8, r2
 801ec40:	1d25      	adds	r5, r4, #4
 801ec42:	b292      	uxth	r2, r2
 801ec44:	f7ff fd08 	bl	801e658 <_ZN8touchgfx7Unicode4itoaElPtti>
 801ec48:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801ec4c:	2b2d      	cmp	r3, #45	@ 0x2d
 801ec4e:	d1cf      	bne.n	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec50:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801ec54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ec56:	3302      	adds	r3, #2
 801ec58:	e7ea      	b.n	801ec30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801ec5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec5c:	1d25      	adds	r5, r4, #4
 801ec5e:	230a      	movs	r3, #10
 801ec60:	eba8 0202 	sub.w	r2, r8, r2
 801ec64:	b292      	uxth	r2, r2
 801ec66:	4649      	mov	r1, r9
 801ec68:	6820      	ldr	r0, [r4, #0]
 801ec6a:	f7ff fcd7 	bl	801e61c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ec6e:	e7bf      	b.n	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ec72:	2310      	movs	r3, #16
 801ec74:	4649      	mov	r1, r9
 801ec76:	6820      	ldr	r0, [r4, #0]
 801ec78:	eba8 0202 	sub.w	r2, r8, r2
 801ec7c:	1d25      	adds	r5, r4, #4
 801ec7e:	b292      	uxth	r2, r2
 801ec80:	f7ff fccc 	bl	801e61c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801ec84:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801ec88:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	d0af      	beq.n	801ebf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ec90:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801ec94:	2919      	cmp	r1, #25
 801ec96:	d8f7      	bhi.n	801ec88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec98:	3b20      	subs	r3, #32
 801ec9a:	8013      	strh	r3, [r2, #0]
 801ec9c:	e7f4      	b.n	801ec88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801ec9e:	9a08      	ldr	r2, [sp, #32]
 801eca0:	2a00      	cmp	r2, #0
 801eca2:	d0ab      	beq.n	801ebfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801eca4:	7812      	ldrb	r2, [r2, #0]
 801eca6:	e7a9      	b.n	801ebfc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801eca8:	2d00      	cmp	r5, #0
 801ecaa:	f43f af48 	beq.w	801eb3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801ecae:	782d      	ldrb	r5, [r5, #0]
 801ecb0:	e745      	b.n	801eb3e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801ecb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801ecb2:	b507      	push	{r0, r1, r2, lr}
 801ecb4:	9300      	str	r3, [sp, #0]
 801ecb6:	4613      	mov	r3, r2
 801ecb8:	2200      	movs	r2, #0
 801ecba:	f7ff fe92 	bl	801e9e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801ecbe:	b003      	add	sp, #12
 801ecc0:	f85d fb04 	ldr.w	pc, [sp], #4

0801ecc4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801ecc4:	b40c      	push	{r2, r3}
 801ecc6:	b507      	push	{r0, r1, r2, lr}
 801ecc8:	ab04      	add	r3, sp, #16
 801ecca:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecce:	9301      	str	r3, [sp, #4]
 801ecd0:	f7ff ffef 	bl	801ecb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801ecd4:	b003      	add	sp, #12
 801ecd6:	f85d eb04 	ldr.w	lr, [sp], #4
 801ecda:	b002      	add	sp, #8
 801ecdc:	4770      	bx	lr
	...

0801ece0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ece0:	4b01      	ldr	r3, [pc, #4]	@ (801ece8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ece2:	6018      	str	r0, [r3, #0]
 801ece4:	4770      	bx	lr
 801ece6:	bf00      	nop
 801ece8:	2400b92c 	.word	0x2400b92c

0801ecec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801ecec:	4b06      	ldr	r3, [pc, #24]	@ (801ed08 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801ecee:	881a      	ldrh	r2, [r3, #0]
 801ecf0:	4282      	cmp	r2, r0
 801ecf2:	d807      	bhi.n	801ed04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801ecf4:	4b05      	ldr	r3, [pc, #20]	@ (801ed0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801ecf6:	881b      	ldrh	r3, [r3, #0]
 801ecf8:	4413      	add	r3, r2
 801ecfa:	4298      	cmp	r0, r3
 801ecfc:	bfac      	ite	ge
 801ecfe:	2000      	movge	r0, #0
 801ed00:	2001      	movlt	r0, #1
 801ed02:	4770      	bx	lr
 801ed04:	2000      	movs	r0, #0
 801ed06:	4770      	bx	lr
 801ed08:	2400b94c 	.word	0x2400b94c
 801ed0c:	2400b950 	.word	0x2400b950

0801ed10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ed10:	b508      	push	{r3, lr}
 801ed12:	4601      	mov	r1, r0
 801ed14:	f7ff ffea 	bl	801ecec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801ed18:	b118      	cbz	r0, 801ed22 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801ed1a:	4b02      	ldr	r3, [pc, #8]	@ (801ed24 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801ed1c:	681b      	ldr	r3, [r3, #0]
 801ed1e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801ed22:	bd08      	pop	{r3, pc}
 801ed24:	2400b930 	.word	0x2400b930

0801ed28 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ed28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed2c:	4d28      	ldr	r5, [pc, #160]	@ (801edd0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ed2e:	682b      	ldr	r3, [r5, #0]
 801ed30:	2b00      	cmp	r3, #0
 801ed32:	d04a      	beq.n	801edca <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801ed34:	4a27      	ldr	r2, [pc, #156]	@ (801edd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ed36:	4e28      	ldr	r6, [pc, #160]	@ (801edd8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ed38:	8810      	ldrh	r0, [r2, #0]
 801ed3a:	f8b6 8000 	ldrh.w	r8, [r6]
 801ed3e:	4c27      	ldr	r4, [pc, #156]	@ (801eddc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ed40:	4440      	add	r0, r8
 801ed42:	4f27      	ldr	r7, [pc, #156]	@ (801ede0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ed44:	1c41      	adds	r1, r0, #1
 801ed46:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801ed4a:	f021 0101 	bic.w	r1, r1, #1
 801ed4e:	eb03 020e 	add.w	r2, r3, lr
 801ed52:	0409      	lsls	r1, r1, #16
 801ed54:	6022      	str	r2, [r4, #0]
 801ed56:	0c09      	lsrs	r1, r1, #16
 801ed58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801ed5c:	eb0e 010c 	add.w	r1, lr, ip
 801ed60:	185a      	adds	r2, r3, r1
 801ed62:	603a      	str	r2, [r7, #0]
 801ed64:	220e      	movs	r2, #14
 801ed66:	fb02 f208 	mul.w	r2, r2, r8
 801ed6a:	3203      	adds	r2, #3
 801ed6c:	f022 0203 	bic.w	r2, r2, #3
 801ed70:	4411      	add	r1, r2
 801ed72:	440b      	add	r3, r1
 801ed74:	491b      	ldr	r1, [pc, #108]	@ (801ede4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ed76:	600b      	str	r3, [r1, #0]
 801ed78:	2300      	movs	r3, #0
 801ed7a:	491b      	ldr	r1, [pc, #108]	@ (801ede8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ed7c:	800b      	strh	r3, [r1, #0]
 801ed7e:	491b      	ldr	r1, [pc, #108]	@ (801edec <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ed80:	6809      	ldr	r1, [r1, #0]
 801ed82:	eba1 010e 	sub.w	r1, r1, lr
 801ed86:	eba1 010c 	sub.w	r1, r1, ip
 801ed8a:	469c      	mov	ip, r3
 801ed8c:	1a8a      	subs	r2, r1, r2
 801ed8e:	4918      	ldr	r1, [pc, #96]	@ (801edf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801ed90:	600a      	str	r2, [r1, #0]
 801ed92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801ed96:	4a17      	ldr	r2, [pc, #92]	@ (801edf4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801ed98:	8013      	strh	r3, [r2, #0]
 801ed9a:	4283      	cmp	r3, r0
 801ed9c:	d10d      	bne.n	801edba <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801ed9e:	8835      	ldrh	r5, [r6, #0]
 801eda0:	2300      	movs	r3, #0
 801eda2:	6838      	ldr	r0, [r7, #0]
 801eda4:	240e      	movs	r4, #14
 801eda6:	429d      	cmp	r5, r3
 801eda8:	d90f      	bls.n	801edca <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801edaa:	fb04 0203 	mla	r2, r4, r3, r0
 801edae:	3301      	adds	r3, #1
 801edb0:	7b11      	ldrb	r1, [r2, #12]
 801edb2:	f36f 1145 	bfc	r1, #5, #1
 801edb6:	7311      	strb	r1, [r2, #12]
 801edb8:	e7f5      	b.n	801eda6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801edba:	682a      	ldr	r2, [r5, #0]
 801edbc:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801edc0:	6822      	ldr	r2, [r4, #0]
 801edc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801edc6:	3301      	adds	r3, #1
 801edc8:	e7e7      	b.n	801ed9a <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801edca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edce:	bf00      	nop
 801edd0:	2400b930 	.word	0x2400b930
 801edd4:	2400b94c 	.word	0x2400b94c
 801edd8:	2400b950 	.word	0x2400b950
 801eddc:	2400b944 	.word	0x2400b944
 801ede0:	2400b934 	.word	0x2400b934
 801ede4:	2400b93c 	.word	0x2400b93c
 801ede8:	2400b94e 	.word	0x2400b94e
 801edec:	2400b938 	.word	0x2400b938
 801edf0:	2400b948 	.word	0x2400b948
 801edf4:	2400b940 	.word	0x2400b940

0801edf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801edf8:	4b10      	ldr	r3, [pc, #64]	@ (801ee3c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801edfa:	b510      	push	{r4, lr}
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	b9db      	cbnz	r3, 801ee38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ee00:	b1d1      	cbz	r1, 801ee38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801ee02:	4b0f      	ldr	r3, [pc, #60]	@ (801ee40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801ee04:	240e      	movs	r4, #14
 801ee06:	801a      	strh	r2, [r3, #0]
 801ee08:	b292      	uxth	r2, r2
 801ee0a:	4b0e      	ldr	r3, [pc, #56]	@ (801ee44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801ee0c:	881b      	ldrh	r3, [r3, #0]
 801ee0e:	4413      	add	r3, r2
 801ee10:	4362      	muls	r2, r4
 801ee12:	2406      	movs	r4, #6
 801ee14:	fb04 2203 	mla	r2, r4, r3, r2
 801ee18:	428a      	cmp	r2, r1
 801ee1a:	d305      	bcc.n	801ee28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801ee1c:	4b0a      	ldr	r3, [pc, #40]	@ (801ee48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801ee1e:	2135      	movs	r1, #53	@ 0x35
 801ee20:	4a0a      	ldr	r2, [pc, #40]	@ (801ee4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801ee22:	480b      	ldr	r0, [pc, #44]	@ (801ee50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801ee24:	f00c f8a0 	bl	802af68 <__assert_func>
 801ee28:	4b0a      	ldr	r3, [pc, #40]	@ (801ee54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801ee2a:	6019      	str	r1, [r3, #0]
 801ee2c:	4b0a      	ldr	r3, [pc, #40]	@ (801ee58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801ee2e:	6018      	str	r0, [r3, #0]
 801ee30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ee34:	f7ff bf78 	b.w	801ed28 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801ee38:	bd10      	pop	{r4, pc}
 801ee3a:	bf00      	nop
 801ee3c:	2400b93c 	.word	0x2400b93c
 801ee40:	2400b950 	.word	0x2400b950
 801ee44:	2400b94c 	.word	0x2400b94c
 801ee48:	0802fc95 	.word	0x0802fc95
 801ee4c:	0802fcee 	.word	0x0802fcee
 801ee50:	0802fc70 	.word	0x0802fc70
 801ee54:	2400b938 	.word	0x2400b938
 801ee58:	2400b930 	.word	0x2400b930

0801ee5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801ee5c:	b470      	push	{r4, r5, r6}
 801ee5e:	4c07      	ldr	r4, [pc, #28]	@ (801ee7c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801ee60:	4605      	mov	r5, r0
 801ee62:	4610      	mov	r0, r2
 801ee64:	9a03      	ldr	r2, [sp, #12]
 801ee66:	6826      	ldr	r6, [r4, #0]
 801ee68:	b936      	cbnz	r6, 801ee78 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801ee6a:	6025      	str	r5, [r4, #0]
 801ee6c:	4c04      	ldr	r4, [pc, #16]	@ (801ee80 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801ee6e:	8021      	strh	r1, [r4, #0]
 801ee70:	4619      	mov	r1, r3
 801ee72:	bc70      	pop	{r4, r5, r6}
 801ee74:	f7ff bfc0 	b.w	801edf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801ee78:	bc70      	pop	{r4, r5, r6}
 801ee7a:	4770      	bx	lr
 801ee7c:	2400b954 	.word	0x2400b954
 801ee80:	2400b94c 	.word	0x2400b94c

0801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801ee84:	b508      	push	{r3, lr}
 801ee86:	4b14      	ldr	r3, [pc, #80]	@ (801eed8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801ee88:	6819      	ldr	r1, [r3, #0]
 801ee8a:	b931      	cbnz	r1, 801ee9a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801ee8c:	4b13      	ldr	r3, [pc, #76]	@ (801eedc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801ee8e:	f240 4185 	movw	r1, #1157	@ 0x485
 801ee92:	4a13      	ldr	r2, [pc, #76]	@ (801eee0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801ee94:	4813      	ldr	r0, [pc, #76]	@ (801eee4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801ee96:	f00c f867 	bl	802af68 <__assert_func>
 801ee9a:	4a13      	ldr	r2, [pc, #76]	@ (801eee8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801ee9c:	8803      	ldrh	r3, [r0, #0]
 801ee9e:	8812      	ldrh	r2, [r2, #0]
 801eea0:	4293      	cmp	r3, r2
 801eea2:	d204      	bcs.n	801eeae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801eea4:	2214      	movs	r2, #20
 801eea6:	fb02 1303 	mla	r3, r2, r3, r1
 801eeaa:	8918      	ldrh	r0, [r3, #8]
 801eeac:	bd08      	pop	{r3, pc}
 801eeae:	490f      	ldr	r1, [pc, #60]	@ (801eeec <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801eeb0:	8809      	ldrh	r1, [r1, #0]
 801eeb2:	4411      	add	r1, r2
 801eeb4:	428b      	cmp	r3, r1
 801eeb6:	da06      	bge.n	801eec6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801eeb8:	1a9b      	subs	r3, r3, r2
 801eeba:	4a0d      	ldr	r2, [pc, #52]	@ (801eef0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801eebc:	210e      	movs	r1, #14
 801eebe:	6812      	ldr	r2, [r2, #0]
 801eec0:	fb01 2303 	mla	r3, r1, r3, r2
 801eec4:	e7f1      	b.n	801eeaa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801eec6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801eeca:	4293      	cmp	r3, r2
 801eecc:	bf0a      	itet	eq
 801eece:	4b09      	ldreq	r3, [pc, #36]	@ (801eef4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801eed0:	2000      	movne	r0, #0
 801eed2:	8818      	ldrheq	r0, [r3, #0]
 801eed4:	e7ea      	b.n	801eeac <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801eed6:	bf00      	nop
 801eed8:	2400b954 	.word	0x2400b954
 801eedc:	0802eed0 	.word	0x0802eed0
 801eee0:	0802fd9b 	.word	0x0802fd9b
 801eee4:	0802fc70 	.word	0x0802fc70
 801eee8:	2400b94c 	.word	0x2400b94c
 801eeec:	2400b950 	.word	0x2400b950
 801eef0:	2400b934 	.word	0x2400b934
 801eef4:	2400b8c0 	.word	0x2400b8c0

0801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801eef8:	b508      	push	{r3, lr}
 801eefa:	4b14      	ldr	r3, [pc, #80]	@ (801ef4c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801eefc:	6819      	ldr	r1, [r3, #0]
 801eefe:	b931      	cbnz	r1, 801ef0e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801ef00:	4b13      	ldr	r3, [pc, #76]	@ (801ef50 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801ef02:	f240 4199 	movw	r1, #1177	@ 0x499
 801ef06:	4a13      	ldr	r2, [pc, #76]	@ (801ef54 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801ef08:	4813      	ldr	r0, [pc, #76]	@ (801ef58 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801ef0a:	f00c f82d 	bl	802af68 <__assert_func>
 801ef0e:	4a13      	ldr	r2, [pc, #76]	@ (801ef5c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801ef10:	8803      	ldrh	r3, [r0, #0]
 801ef12:	8812      	ldrh	r2, [r2, #0]
 801ef14:	4293      	cmp	r3, r2
 801ef16:	d204      	bcs.n	801ef22 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ef18:	2214      	movs	r2, #20
 801ef1a:	fb02 1303 	mla	r3, r2, r3, r1
 801ef1e:	8958      	ldrh	r0, [r3, #10]
 801ef20:	bd08      	pop	{r3, pc}
 801ef22:	490f      	ldr	r1, [pc, #60]	@ (801ef60 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ef24:	8809      	ldrh	r1, [r1, #0]
 801ef26:	4411      	add	r1, r2
 801ef28:	428b      	cmp	r3, r1
 801ef2a:	da06      	bge.n	801ef3a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ef2c:	1a9b      	subs	r3, r3, r2
 801ef2e:	4a0d      	ldr	r2, [pc, #52]	@ (801ef64 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ef30:	210e      	movs	r1, #14
 801ef32:	6812      	ldr	r2, [r2, #0]
 801ef34:	fb01 2303 	mla	r3, r1, r3, r2
 801ef38:	e7f1      	b.n	801ef1e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ef3a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801ef3e:	4293      	cmp	r3, r2
 801ef40:	bf0a      	itet	eq
 801ef42:	4b09      	ldreq	r3, [pc, #36]	@ (801ef68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801ef44:	2000      	movne	r0, #0
 801ef46:	8818      	ldrheq	r0, [r3, #0]
 801ef48:	e7ea      	b.n	801ef20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801ef4a:	bf00      	nop
 801ef4c:	2400b954 	.word	0x2400b954
 801ef50:	0802eed0 	.word	0x0802eed0
 801ef54:	0802fdc7 	.word	0x0802fdc7
 801ef58:	0802fc70 	.word	0x0802fc70
 801ef5c:	2400b94c 	.word	0x2400b94c
 801ef60:	2400b950 	.word	0x2400b950
 801ef64:	2400b934 	.word	0x2400b934
 801ef68:	2400b8c2 	.word	0x2400b8c2

0801ef6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801ef6c:	4b23      	ldr	r3, [pc, #140]	@ (801effc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801ef6e:	b510      	push	{r4, lr}
 801ef70:	681c      	ldr	r4, [r3, #0]
 801ef72:	b934      	cbnz	r4, 801ef82 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801ef74:	4b22      	ldr	r3, [pc, #136]	@ (801f000 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801ef76:	f240 41ad 	movw	r1, #1197	@ 0x4ad
 801ef7a:	4a22      	ldr	r2, [pc, #136]	@ (801f004 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801ef7c:	4822      	ldr	r0, [pc, #136]	@ (801f008 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801ef7e:	f00b fff3 	bl	802af68 <__assert_func>
 801ef82:	4a22      	ldr	r2, [pc, #136]	@ (801f00c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801ef84:	880b      	ldrh	r3, [r1, #0]
 801ef86:	8812      	ldrh	r2, [r2, #0]
 801ef88:	4293      	cmp	r3, r2
 801ef8a:	d211      	bcs.n	801efb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801ef8c:	2214      	movs	r2, #20
 801ef8e:	fb02 4303 	mla	r3, r2, r3, r4
 801ef92:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801ef96:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801ef9a:	8a1a      	ldrh	r2, [r3, #16]
 801ef9c:	8a5b      	ldrh	r3, [r3, #18]
 801ef9e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801efa2:	8004      	strh	r4, [r0, #0]
 801efa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801efa8:	8041      	strh	r1, [r0, #2]
 801efaa:	8082      	strh	r2, [r0, #4]
 801efac:	80c3      	strh	r3, [r0, #6]
 801efae:	e00e      	b.n	801efce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801efb0:	4917      	ldr	r1, [pc, #92]	@ (801f010 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801efb2:	8809      	ldrh	r1, [r1, #0]
 801efb4:	4411      	add	r1, r2
 801efb6:	428b      	cmp	r3, r1
 801efb8:	da0a      	bge.n	801efd0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801efba:	1a9b      	subs	r3, r3, r2
 801efbc:	4a15      	ldr	r2, [pc, #84]	@ (801f014 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801efbe:	210e      	movs	r1, #14
 801efc0:	6812      	ldr	r2, [r2, #0]
 801efc2:	fb01 2303 	mla	r3, r1, r3, r2
 801efc6:	681a      	ldr	r2, [r3, #0]
 801efc8:	6002      	str	r2, [r0, #0]
 801efca:	685a      	ldr	r2, [r3, #4]
 801efcc:	6042      	str	r2, [r0, #4]
 801efce:	bd10      	pop	{r4, pc}
 801efd0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801efd4:	4293      	cmp	r3, r2
 801efd6:	d10b      	bne.n	801eff0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801efd8:	4b0f      	ldr	r3, [pc, #60]	@ (801f018 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801efda:	f9b3 1000 	ldrsh.w	r1, [r3]
 801efde:	4b0f      	ldr	r3, [pc, #60]	@ (801f01c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801efe0:	8081      	strh	r1, [r0, #4]
 801efe2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801efe6:	2300      	movs	r3, #0
 801efe8:	80c2      	strh	r2, [r0, #6]
 801efea:	8003      	strh	r3, [r0, #0]
 801efec:	8043      	strh	r3, [r0, #2]
 801efee:	e7ee      	b.n	801efce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801eff0:	2300      	movs	r3, #0
 801eff2:	8003      	strh	r3, [r0, #0]
 801eff4:	8043      	strh	r3, [r0, #2]
 801eff6:	8083      	strh	r3, [r0, #4]
 801eff8:	e7d8      	b.n	801efac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801effa:	bf00      	nop
 801effc:	2400b954 	.word	0x2400b954
 801f000:	0802eed0 	.word	0x0802eed0
 801f004:	0802fd34 	.word	0x0802fd34
 801f008:	0802fc70 	.word	0x0802fc70
 801f00c:	2400b94c 	.word	0x2400b94c
 801f010:	2400b950 	.word	0x2400b950
 801f014:	2400b934 	.word	0x2400b934
 801f018:	2400b8c0 	.word	0x2400b8c0
 801f01c:	2400b8c2 	.word	0x2400b8c2

0801f020 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801f020:	4b18      	ldr	r3, [pc, #96]	@ (801f084 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	b34b      	cbz	r3, 801f07a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801f026:	4a18      	ldr	r2, [pc, #96]	@ (801f088 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801f028:	8800      	ldrh	r0, [r0, #0]
 801f02a:	8812      	ldrh	r2, [r2, #0]
 801f02c:	4290      	cmp	r0, r2
 801f02e:	d211      	bcs.n	801f054 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801f030:	2214      	movs	r2, #20
 801f032:	fb02 3300 	mla	r3, r2, r0, r3
 801f036:	8a1a      	ldrh	r2, [r3, #16]
 801f038:	8919      	ldrh	r1, [r3, #8]
 801f03a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801f03e:	428a      	cmp	r2, r1
 801f040:	db1d      	blt.n	801f07e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801f042:	8a58      	ldrh	r0, [r3, #18]
 801f044:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f048:	895b      	ldrh	r3, [r3, #10]
 801f04a:	4298      	cmp	r0, r3
 801f04c:	bfac      	ite	ge
 801f04e:	2000      	movge	r0, #0
 801f050:	2001      	movlt	r0, #1
 801f052:	4770      	bx	lr
 801f054:	4b0d      	ldr	r3, [pc, #52]	@ (801f08c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801f056:	881b      	ldrh	r3, [r3, #0]
 801f058:	4413      	add	r3, r2
 801f05a:	4298      	cmp	r0, r3
 801f05c:	da0d      	bge.n	801f07a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801f05e:	4b0c      	ldr	r3, [pc, #48]	@ (801f090 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801f060:	1a80      	subs	r0, r0, r2
 801f062:	220e      	movs	r2, #14
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	fb02 3300 	mla	r3, r2, r0, r3
 801f06a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801f06e:	891a      	ldrh	r2, [r3, #8]
 801f070:	4291      	cmp	r1, r2
 801f072:	db04      	blt.n	801f07e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801f074:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801f078:	e7e6      	b.n	801f048 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801f07a:	2000      	movs	r0, #0
 801f07c:	4770      	bx	lr
 801f07e:	2001      	movs	r0, #1
 801f080:	4770      	bx	lr
 801f082:	bf00      	nop
 801f084:	2400b954 	.word	0x2400b954
 801f088:	2400b94c 	.word	0x2400b94c
 801f08c:	2400b950 	.word	0x2400b950
 801f090:	2400b934 	.word	0x2400b934

0801f094 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801f094:	b508      	push	{r3, lr}
 801f096:	4b12      	ldr	r3, [pc, #72]	@ (801f0e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801f098:	6819      	ldr	r1, [r3, #0]
 801f09a:	b931      	cbnz	r1, 801f0aa <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801f09c:	4b11      	ldr	r3, [pc, #68]	@ (801f0e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801f09e:	f240 41d1 	movw	r1, #1233	@ 0x4d1
 801f0a2:	4a11      	ldr	r2, [pc, #68]	@ (801f0e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801f0a4:	4811      	ldr	r0, [pc, #68]	@ (801f0ec <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801f0a6:	f00b ff5f 	bl	802af68 <__assert_func>
 801f0aa:	8803      	ldrh	r3, [r0, #0]
 801f0ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801f0b0:	4293      	cmp	r3, r2
 801f0b2:	d012      	beq.n	801f0da <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801f0b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f0b8:	4293      	cmp	r3, r2
 801f0ba:	d103      	bne.n	801f0c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801f0bc:	4b0c      	ldr	r3, [pc, #48]	@ (801f0f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801f0c2:	bd08      	pop	{r3, pc}
 801f0c4:	4a0b      	ldr	r2, [pc, #44]	@ (801f0f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801f0c6:	6812      	ldr	r2, [r2, #0]
 801f0c8:	b11a      	cbz	r2, 801f0d2 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801f0ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	d1f7      	bne.n	801f0c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f0d2:	2214      	movs	r2, #20
 801f0d4:	4353      	muls	r3, r2
 801f0d6:	58c8      	ldr	r0, [r1, r3]
 801f0d8:	e7f3      	b.n	801f0c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f0da:	2000      	movs	r0, #0
 801f0dc:	e7f1      	b.n	801f0c2 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801f0de:	bf00      	nop
 801f0e0:	2400b954 	.word	0x2400b954
 801f0e4:	0802eed0 	.word	0x0802eed0
 801f0e8:	0802fd6a 	.word	0x0802fd6a
 801f0ec:	0802fc70 	.word	0x0802fc70
 801f0f0:	2400b8cc 	.word	0x2400b8cc
 801f0f4:	2400b930 	.word	0x2400b930

0801f0f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801f0f8:	8802      	ldrh	r2, [r0, #0]
 801f0fa:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 801f0fe:	429a      	cmp	r2, r3
 801f100:	d845      	bhi.n	801f18e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f102:	4b24      	ldr	r3, [pc, #144]	@ (801f194 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801f104:	8818      	ldrh	r0, [r3, #0]
 801f106:	4282      	cmp	r2, r0
 801f108:	d221      	bcs.n	801f14e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801f10a:	4b23      	ldr	r3, [pc, #140]	@ (801f198 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801f10c:	6819      	ldr	r1, [r3, #0]
 801f10e:	2314      	movs	r3, #20
 801f110:	fb03 1302 	mla	r3, r3, r2, r1
 801f114:	6858      	ldr	r0, [r3, #4]
 801f116:	2800      	cmp	r0, #0
 801f118:	d03a      	beq.n	801f190 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f11a:	4920      	ldr	r1, [pc, #128]	@ (801f19c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f11c:	6809      	ldr	r1, [r1, #0]
 801f11e:	2900      	cmp	r1, #0
 801f120:	d036      	beq.n	801f190 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f122:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801f126:	2900      	cmp	r1, #0
 801f128:	d032      	beq.n	801f190 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801f12a:	891a      	ldrh	r2, [r3, #8]
 801f12c:	8958      	ldrh	r0, [r3, #10]
 801f12e:	4350      	muls	r0, r2
 801f130:	7c5a      	ldrb	r2, [r3, #17]
 801f132:	7cdb      	ldrb	r3, [r3, #19]
 801f134:	0952      	lsrs	r2, r2, #5
 801f136:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801f13a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801f13e:	2b0b      	cmp	r3, #11
 801f140:	bf18      	it	ne
 801f142:	0040      	lslne	r0, r0, #1
 801f144:	3003      	adds	r0, #3
 801f146:	f020 0003 	bic.w	r0, r0, #3
 801f14a:	4408      	add	r0, r1
 801f14c:	4770      	bx	lr
 801f14e:	4b14      	ldr	r3, [pc, #80]	@ (801f1a0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801f150:	881b      	ldrh	r3, [r3, #0]
 801f152:	4403      	add	r3, r0
 801f154:	429a      	cmp	r2, r3
 801f156:	da1a      	bge.n	801f18e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f158:	4b12      	ldr	r3, [pc, #72]	@ (801f1a4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801f15a:	1a10      	subs	r0, r2, r0
 801f15c:	210e      	movs	r1, #14
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	fb01 3000 	mla	r0, r1, r0, r3
 801f164:	7b03      	ldrb	r3, [r0, #12]
 801f166:	f003 031f 	and.w	r3, r3, #31
 801f16a:	2b0b      	cmp	r3, #11
 801f16c:	d10b      	bne.n	801f186 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801f16e:	8903      	ldrh	r3, [r0, #8]
 801f170:	8940      	ldrh	r0, [r0, #10]
 801f172:	4358      	muls	r0, r3
 801f174:	4b09      	ldr	r3, [pc, #36]	@ (801f19c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801f176:	3003      	adds	r0, #3
 801f178:	6819      	ldr	r1, [r3, #0]
 801f17a:	f020 0303 	bic.w	r3, r0, #3
 801f17e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801f182:	4418      	add	r0, r3
 801f184:	4770      	bx	lr
 801f186:	2b0d      	cmp	r3, #13
 801f188:	d101      	bne.n	801f18e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801f18a:	300d      	adds	r0, #13
 801f18c:	4770      	bx	lr
 801f18e:	2000      	movs	r0, #0
 801f190:	4770      	bx	lr
 801f192:	bf00      	nop
 801f194:	2400b94c 	.word	0x2400b94c
 801f198:	2400b954 	.word	0x2400b954
 801f19c:	2400b930 	.word	0x2400b930
 801f1a0:	2400b950 	.word	0x2400b950
 801f1a4:	2400b934 	.word	0x2400b934

0801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801f1a8:	4b17      	ldr	r3, [pc, #92]	@ (801f208 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801f1aa:	b510      	push	{r4, lr}
 801f1ac:	6819      	ldr	r1, [r3, #0]
 801f1ae:	8803      	ldrh	r3, [r0, #0]
 801f1b0:	b1e9      	cbz	r1, 801f1ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801f1b2:	4a16      	ldr	r2, [pc, #88]	@ (801f20c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801f1b4:	8812      	ldrh	r2, [r2, #0]
 801f1b6:	429a      	cmp	r2, r3
 801f1b8:	d90a      	bls.n	801f1d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801f1ba:	2214      	movs	r2, #20
 801f1bc:	fb02 1303 	mla	r3, r2, r3, r1
 801f1c0:	7c58      	ldrb	r0, [r3, #17]
 801f1c2:	0942      	lsrs	r2, r0, #5
 801f1c4:	7cd8      	ldrb	r0, [r3, #19]
 801f1c6:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801f1ca:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801f1ce:	bd10      	pop	{r4, pc}
 801f1d0:	490f      	ldr	r1, [pc, #60]	@ (801f210 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801f1d2:	8809      	ldrh	r1, [r1, #0]
 801f1d4:	4411      	add	r1, r2
 801f1d6:	428b      	cmp	r3, r1
 801f1d8:	da09      	bge.n	801f1ee <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801f1da:	1a9b      	subs	r3, r3, r2
 801f1dc:	4a0d      	ldr	r2, [pc, #52]	@ (801f214 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801f1de:	210e      	movs	r1, #14
 801f1e0:	6812      	ldr	r2, [r2, #0]
 801f1e2:	fb01 2303 	mla	r3, r1, r3, r2
 801f1e6:	7b18      	ldrb	r0, [r3, #12]
 801f1e8:	f000 001f 	and.w	r0, r0, #31
 801f1ec:	e7ef      	b.n	801f1ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f1ee:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801f1f2:	4293      	cmp	r3, r2
 801f1f4:	d106      	bne.n	801f204 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801f1f6:	f7e5 f857 	bl	80042a8 <_ZN8touchgfx3HAL3lcdEv>
 801f1fa:	6803      	ldr	r3, [r0, #0]
 801f1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f202:	4718      	bx	r3
 801f204:	2000      	movs	r0, #0
 801f206:	e7e2      	b.n	801f1ce <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801f208:	2400b954 	.word	0x2400b954
 801f20c:	2400b94c 	.word	0x2400b94c
 801f210:	2400b950 	.word	0x2400b950
 801f214:	2400b934 	.word	0x2400b934

0801f218 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801f218:	2010      	movs	r0, #16
 801f21a:	4770      	bx	lr

0801f21c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801f21c:	2000      	movs	r0, #0
 801f21e:	4770      	bx	lr

0801f220 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801f220:	2bff      	cmp	r3, #255	@ 0xff
 801f222:	d050      	beq.n	801f2c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801f224:	2a0b      	cmp	r2, #11
 801f226:	d04a      	beq.n	801f2be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f228:	d80e      	bhi.n	801f248 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801f22a:	2a03      	cmp	r2, #3
 801f22c:	d03f      	beq.n	801f2ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801f22e:	d804      	bhi.n	801f23a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801f230:	2a01      	cmp	r2, #1
 801f232:	d03e      	beq.n	801f2b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801f234:	d93f      	bls.n	801f2b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801f236:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 801f238:	4770      	bx	lr
 801f23a:	2a09      	cmp	r2, #9
 801f23c:	d03f      	beq.n	801f2be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801f23e:	d83c      	bhi.n	801f2ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f240:	2a08      	cmp	r2, #8
 801f242:	d03a      	beq.n	801f2ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801f244:	2000      	movs	r0, #0
 801f246:	4770      	bx	lr
 801f248:	2a2f      	cmp	r2, #47	@ 0x2f
 801f24a:	d024      	beq.n	801f296 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801f24c:	d80d      	bhi.n	801f26a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801f24e:	2a2d      	cmp	r2, #45	@ 0x2d
 801f250:	d014      	beq.n	801f27c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801f252:	d826      	bhi.n	801f2a2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801f254:	2a2c      	cmp	r2, #44	@ 0x2c
 801f256:	d1f5      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f258:	684b      	ldr	r3, [r1, #4]
 801f25a:	781b      	ldrb	r3, [r3, #0]
 801f25c:	2b01      	cmp	r3, #1
 801f25e:	d018      	beq.n	801f292 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801f260:	d323      	bcc.n	801f2aa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801f262:	2b02      	cmp	r3, #2
 801f264:	d1ee      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f266:	6880      	ldr	r0, [r0, #8]
 801f268:	4770      	bx	lr
 801f26a:	2a31      	cmp	r2, #49	@ 0x31
 801f26c:	d004      	beq.n	801f278 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801f26e:	d328      	bcc.n	801f2c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f270:	2a32      	cmp	r2, #50	@ 0x32
 801f272:	d026      	beq.n	801f2c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801f274:	2a33      	cmp	r2, #51	@ 0x33
 801f276:	d1e5      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f278:	6f00      	ldr	r0, [r0, #112]	@ 0x70
 801f27a:	4770      	bx	lr
 801f27c:	684b      	ldr	r3, [r1, #4]
 801f27e:	781b      	ldrb	r3, [r3, #0]
 801f280:	2b01      	cmp	r3, #1
 801f282:	d004      	beq.n	801f28e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801f284:	d30b      	bcc.n	801f29e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801f286:	2b02      	cmp	r3, #2
 801f288:	d1dc      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f28a:	6900      	ldr	r0, [r0, #16]
 801f28c:	4770      	bx	lr
 801f28e:	6a00      	ldr	r0, [r0, #32]
 801f290:	4770      	bx	lr
 801f292:	6980      	ldr	r0, [r0, #24]
 801f294:	4770      	bx	lr
 801f296:	684b      	ldr	r3, [r1, #4]
 801f298:	781b      	ldrb	r3, [r3, #0]
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d1d2      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f29e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801f2a0:	4770      	bx	lr
 801f2a2:	684b      	ldr	r3, [r1, #4]
 801f2a4:	781b      	ldrb	r3, [r3, #0]
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d1cc      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2aa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 801f2ac:	4770      	bx	lr
 801f2ae:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 801f2b0:	4770      	bx	lr
 801f2b2:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 801f2b4:	4770      	bx	lr
 801f2b6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 801f2b8:	4770      	bx	lr
 801f2ba:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 801f2bc:	4770      	bx	lr
 801f2be:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801f2c0:	4770      	bx	lr
 801f2c2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801f2c4:	4770      	bx	lr
 801f2c6:	2a0b      	cmp	r2, #11
 801f2c8:	d049      	beq.n	801f35e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f2ca:	d80e      	bhi.n	801f2ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801f2cc:	2a03      	cmp	r2, #3
 801f2ce:	d040      	beq.n	801f352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801f2d0:	d804      	bhi.n	801f2dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801f2d2:	2a01      	cmp	r2, #1
 801f2d4:	d03f      	beq.n	801f356 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801f2d6:	d940      	bls.n	801f35a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801f2d8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 801f2da:	4770      	bx	lr
 801f2dc:	2a09      	cmp	r2, #9
 801f2de:	d03e      	beq.n	801f35e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801f2e0:	d801      	bhi.n	801f2e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801f2e2:	2a08      	cmp	r2, #8
 801f2e4:	d1ae      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2e6:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801f2e8:	4770      	bx	lr
 801f2ea:	2a2f      	cmp	r2, #47	@ 0x2f
 801f2ec:	d024      	beq.n	801f338 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801f2ee:	d80d      	bhi.n	801f30c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801f2f0:	2a2d      	cmp	r2, #45	@ 0x2d
 801f2f2:	d014      	beq.n	801f31e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801f2f4:	d826      	bhi.n	801f344 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801f2f6:	2a2c      	cmp	r2, #44	@ 0x2c
 801f2f8:	d1a4      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f2fa:	684b      	ldr	r3, [r1, #4]
 801f2fc:	781b      	ldrb	r3, [r3, #0]
 801f2fe:	2b01      	cmp	r3, #1
 801f300:	d018      	beq.n	801f334 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801f302:	d324      	bcc.n	801f34e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801f304:	2b02      	cmp	r3, #2
 801f306:	d19d      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f308:	68c0      	ldr	r0, [r0, #12]
 801f30a:	4770      	bx	lr
 801f30c:	2a31      	cmp	r2, #49	@ 0x31
 801f30e:	d004      	beq.n	801f31a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801f310:	d327      	bcc.n	801f362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f312:	2a32      	cmp	r2, #50	@ 0x32
 801f314:	d025      	beq.n	801f362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801f316:	2a33      	cmp	r2, #51	@ 0x33
 801f318:	d194      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f31a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801f31c:	4770      	bx	lr
 801f31e:	684b      	ldr	r3, [r1, #4]
 801f320:	781b      	ldrb	r3, [r3, #0]
 801f322:	2b01      	cmp	r3, #1
 801f324:	d004      	beq.n	801f330 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801f326:	d30b      	bcc.n	801f340 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801f328:	2b02      	cmp	r3, #2
 801f32a:	d18b      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f32c:	6940      	ldr	r0, [r0, #20]
 801f32e:	4770      	bx	lr
 801f330:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801f332:	4770      	bx	lr
 801f334:	69c0      	ldr	r0, [r0, #28]
 801f336:	4770      	bx	lr
 801f338:	684b      	ldr	r3, [r1, #4]
 801f33a:	781b      	ldrb	r3, [r3, #0]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d181      	bne.n	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f340:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801f342:	4770      	bx	lr
 801f344:	684b      	ldr	r3, [r1, #4]
 801f346:	781b      	ldrb	r3, [r3, #0]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	f47f af7b 	bne.w	801f244 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801f34e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 801f350:	4770      	bx	lr
 801f352:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 801f354:	4770      	bx	lr
 801f356:	6d40      	ldr	r0, [r0, #84]	@ 0x54
 801f358:	4770      	bx	lr
 801f35a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 801f35c:	4770      	bx	lr
 801f35e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801f360:	4770      	bx	lr
 801f362:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801f364:	4770      	bx	lr

0801f366 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f366:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f36a:	b087      	sub	sp, #28
 801f36c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f36e:	9205      	str	r2, [sp, #20]
 801f370:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f374:	9101      	str	r1, [sp, #4]
 801f376:	9202      	str	r2, [sp, #8]
 801f378:	6841      	ldr	r1, [r0, #4]
 801f37a:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801f37e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801f382:	fb01 2404 	mla	r4, r1, r4, r2
 801f386:	6802      	ldr	r2, [r0, #0]
 801f388:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f38c:	f8de 2000 	ldr.w	r2, [lr]
 801f390:	9203      	str	r2, [sp, #12]
 801f392:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f396:	3204      	adds	r2, #4
 801f398:	9204      	str	r2, [sp, #16]
 801f39a:	9a02      	ldr	r2, [sp, #8]
 801f39c:	43d6      	mvns	r6, r2
 801f39e:	b2f6      	uxtb	r6, r6
 801f3a0:	9a01      	ldr	r2, [sp, #4]
 801f3a2:	2a00      	cmp	r2, #0
 801f3a4:	dc03      	bgt.n	801f3ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f3a6:	9a05      	ldr	r2, [sp, #20]
 801f3a8:	2a00      	cmp	r2, #0
 801f3aa:	f340 8129 	ble.w	801f600 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f3ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f3b0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f3b4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f3b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f3ba:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f3be:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	dd0e      	ble.n	801f3e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f3c6:	1408      	asrs	r0, r1, #16
 801f3c8:	d405      	bmi.n	801f3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f3ca:	4560      	cmp	r0, ip
 801f3cc:	da03      	bge.n	801f3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f3ce:	1410      	asrs	r0, r2, #16
 801f3d0:	d401      	bmi.n	801f3d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f3d2:	42b8      	cmp	r0, r7
 801f3d4:	db07      	blt.n	801f3e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f3d6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f3d8:	3b01      	subs	r3, #1
 801f3da:	3402      	adds	r4, #2
 801f3dc:	4401      	add	r1, r0
 801f3de:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f3e0:	4402      	add	r2, r0
 801f3e2:	e7ee      	b.n	801f3c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f3e4:	d071      	beq.n	801f4ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f3e6:	1e58      	subs	r0, r3, #1
 801f3e8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801f3ea:	fb05 1500 	mla	r5, r5, r0, r1
 801f3ee:	142d      	asrs	r5, r5, #16
 801f3f0:	d45f      	bmi.n	801f4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f3f2:	4565      	cmp	r5, ip
 801f3f4:	da5d      	bge.n	801f4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f3f6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f3f8:	fb05 2000 	mla	r0, r5, r0, r2
 801f3fc:	1400      	asrs	r0, r0, #16
 801f3fe:	d458      	bmi.n	801f4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f400:	42b8      	cmp	r0, r7
 801f402:	da56      	bge.n	801f4b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801f404:	4699      	mov	r9, r3
 801f406:	46a2      	mov	sl, r4
 801f408:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801f40c:	f1b9 0f00 	cmp.w	r9, #0
 801f410:	dd57      	ble.n	801f4c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801f412:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801f416:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f41a:	9803      	ldr	r0, [sp, #12]
 801f41c:	140d      	asrs	r5, r1, #16
 801f41e:	f109 39ff 	add.w	r9, r9, #4294967295
 801f422:	fb07 000c 	mla	r0, r7, ip, r0
 801f426:	5d40      	ldrb	r0, [r0, r5]
 801f428:	9d04      	ldr	r5, [sp, #16]
 801f42a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f42e:	f8ba 5000 	ldrh.w	r5, [sl]
 801f432:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f436:	122f      	asrs	r7, r5, #8
 801f438:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f43c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f440:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f444:	00ed      	lsls	r5, r5, #3
 801f446:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801f44a:	fb17 f706 	smulbb	r7, r7, r6
 801f44e:	b2ed      	uxtb	r5, r5
 801f450:	fb18 f806 	smulbb	r8, r8, r6
 801f454:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f458:	10c7      	asrs	r7, r0, #3
 801f45a:	fb15 f506 	smulbb	r5, r5, r6
 801f45e:	00c0      	lsls	r0, r0, #3
 801f460:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f464:	fa1f fc8c 	uxth.w	ip, ip
 801f468:	b2c0      	uxtb	r0, r0
 801f46a:	fb07 870b 	mla	r7, r7, fp, r8
 801f46e:	fb00 500b 	mla	r0, r0, fp, r5
 801f472:	f10c 0501 	add.w	r5, ip, #1
 801f476:	b2bf      	uxth	r7, r7
 801f478:	b280      	uxth	r0, r0
 801f47a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f47e:	f107 0801 	add.w	r8, r7, #1
 801f482:	1c45      	adds	r5, r0, #1
 801f484:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f488:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f48c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f490:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f492:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f496:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f49a:	4401      	add	r1, r0
 801f49c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801f4a0:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f4a2:	ea45 0c0c 	orr.w	ip, r5, ip
 801f4a6:	4402      	add	r2, r0
 801f4a8:	ea4c 0c08 	orr.w	ip, ip, r8
 801f4ac:	f82a cb02 	strh.w	ip, [sl], #2
 801f4b0:	e7ac      	b.n	801f40c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f4b2:	f04f 0800 	mov.w	r8, #0
 801f4b6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801f4ba:	eb03 0008 	add.w	r0, r3, r8
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	dc41      	bgt.n	801f546 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801f4c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f4c6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f4ca:	9b01      	ldr	r3, [sp, #4]
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	f340 8097 	ble.w	801f600 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801f4d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f4d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4dc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4e0:	eef0 6a62 	vmov.f32	s13, s5
 801f4e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f4e8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4f0:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801f4f4:	eef0 6a43 	vmov.f32	s13, s6
 801f4f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f4fc:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801f500:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f504:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f508:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f50c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f510:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f514:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f518:	ee12 2a90 	vmov	r2, s5
 801f51c:	eef0 2a47 	vmov.f32	s5, s14
 801f520:	fb92 f3f3 	sdiv	r3, r2, r3
 801f524:	ee13 2a10 	vmov	r2, s6
 801f528:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f52a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f52c:	eeb0 3a67 	vmov.f32	s6, s15
 801f530:	fb92 f3f3 	sdiv	r3, r2, r3
 801f534:	9314      	str	r3, [sp, #80]	@ 0x50
 801f536:	9b01      	ldr	r3, [sp, #4]
 801f538:	9a05      	ldr	r2, [sp, #20]
 801f53a:	3b01      	subs	r3, #1
 801f53c:	9301      	str	r3, [sp, #4]
 801f53e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f540:	bf08      	it	eq
 801f542:	4613      	moveq	r3, r2
 801f544:	e72c      	b.n	801f3a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f546:	140f      	asrs	r7, r1, #16
 801f548:	d453      	bmi.n	801f5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f54a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f54e:	42bd      	cmp	r5, r7
 801f550:	dd4f      	ble.n	801f5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f552:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f556:	d44c      	bmi.n	801f5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f558:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f55c:	4560      	cmp	r0, ip
 801f55e:	dd48      	ble.n	801f5f2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801f560:	9803      	ldr	r0, [sp, #12]
 801f562:	b22d      	sxth	r5, r5
 801f564:	fb0c 0505 	mla	r5, ip, r5, r0
 801f568:	5de8      	ldrb	r0, [r5, r7]
 801f56a:	9d04      	ldr	r5, [sp, #16]
 801f56c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f570:	f06f 0501 	mvn.w	r5, #1
 801f574:	fb05 fb08 	mul.w	fp, r5, r8
 801f578:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f57c:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f580:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f584:	122f      	asrs	r7, r5, #8
 801f586:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f58a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f58e:	00ed      	lsls	r5, r5, #3
 801f590:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f594:	fb17 f706 	smulbb	r7, r7, r6
 801f598:	b2ed      	uxtb	r5, r5
 801f59a:	fb19 f906 	smulbb	r9, r9, r6
 801f59e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f5a2:	10c7      	asrs	r7, r0, #3
 801f5a4:	fb15 f506 	smulbb	r5, r5, r6
 801f5a8:	00c0      	lsls	r0, r0, #3
 801f5aa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f5ae:	fa1f fc8c 	uxth.w	ip, ip
 801f5b2:	b2c0      	uxtb	r0, r0
 801f5b4:	fb07 970a 	mla	r7, r7, sl, r9
 801f5b8:	fb00 500a 	mla	r0, r0, sl, r5
 801f5bc:	f10c 0501 	add.w	r5, ip, #1
 801f5c0:	b2bf      	uxth	r7, r7
 801f5c2:	b280      	uxth	r0, r0
 801f5c4:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f5c8:	f107 0901 	add.w	r9, r7, #1
 801f5cc:	1c45      	adds	r5, r0, #1
 801f5ce:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f5d2:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f5d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f5da:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f5de:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f5e2:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f5e6:	ea45 0c0c 	orr.w	ip, r5, ip
 801f5ea:	ea4c 0c09 	orr.w	ip, ip, r9
 801f5ee:	f824 c00b 	strh.w	ip, [r4, fp]
 801f5f2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f5f4:	f108 38ff 	add.w	r8, r8, #4294967295
 801f5f8:	4401      	add	r1, r0
 801f5fa:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f5fc:	4402      	add	r2, r0
 801f5fe:	e75c      	b.n	801f4ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801f600:	b007      	add	sp, #28
 801f602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f606 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f60a:	b085      	sub	sp, #20
 801f60c:	4693      	mov	fp, r2
 801f60e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f612:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f614:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f616:	6870      	ldr	r0, [r6, #4]
 801f618:	9100      	str	r1, [sp, #0]
 801f61a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f61e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801f622:	fb00 2404 	mla	r4, r0, r4, r2
 801f626:	6832      	ldr	r2, [r6, #0]
 801f628:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f62c:	682a      	ldr	r2, [r5, #0]
 801f62e:	9201      	str	r2, [sp, #4]
 801f630:	686a      	ldr	r2, [r5, #4]
 801f632:	3204      	adds	r2, #4
 801f634:	9202      	str	r2, [sp, #8]
 801f636:	9a00      	ldr	r2, [sp, #0]
 801f638:	2a00      	cmp	r2, #0
 801f63a:	dc03      	bgt.n	801f644 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f63c:	f1bb 0f00 	cmp.w	fp, #0
 801f640:	f340 80a0 	ble.w	801f784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f644:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f646:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f64a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f64e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f650:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f654:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f658:	2b00      	cmp	r3, #0
 801f65a:	dd0c      	ble.n	801f676 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f65c:	1406      	asrs	r6, r0, #16
 801f65e:	d405      	bmi.n	801f66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f660:	454e      	cmp	r6, r9
 801f662:	da03      	bge.n	801f66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f664:	1416      	asrs	r6, r2, #16
 801f666:	d401      	bmi.n	801f66c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f668:	4546      	cmp	r6, r8
 801f66a:	db05      	blt.n	801f678 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f66c:	4470      	add	r0, lr
 801f66e:	4462      	add	r2, ip
 801f670:	3b01      	subs	r3, #1
 801f672:	3402      	adds	r4, #2
 801f674:	e7f0      	b.n	801f658 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f676:	d00f      	beq.n	801f698 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801f678:	1e5e      	subs	r6, r3, #1
 801f67a:	fb0e 0706 	mla	r7, lr, r6, r0
 801f67e:	143f      	asrs	r7, r7, #16
 801f680:	d541      	bpl.n	801f706 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f682:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f686:	4698      	mov	r8, r3
 801f688:	9603      	str	r6, [sp, #12]
 801f68a:	f1b8 0f00 	cmp.w	r8, #0
 801f68e:	dc59      	bgt.n	801f744 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f690:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f694:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f698:	9b00      	ldr	r3, [sp, #0]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	dd72      	ble.n	801f784 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801f69e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f6a8:	eeb0 6a62 	vmov.f32	s12, s5
 801f6ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f6b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f6b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f6bc:	eeb0 6a43 	vmov.f32	s12, s6
 801f6c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f6c4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f6c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f6cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f6d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f6d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f6d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f6dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f6e0:	ee12 2a90 	vmov	r2, s5
 801f6e4:	eef0 2a47 	vmov.f32	s5, s14
 801f6e8:	fb92 fef3 	sdiv	lr, r2, r3
 801f6ec:	ee13 2a10 	vmov	r2, s6
 801f6f0:	eeb0 3a67 	vmov.f32	s6, s15
 801f6f4:	fb92 fcf3 	sdiv	ip, r2, r3
 801f6f8:	9b00      	ldr	r3, [sp, #0]
 801f6fa:	3b01      	subs	r3, #1
 801f6fc:	9300      	str	r3, [sp, #0]
 801f6fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f700:	bf08      	it	eq
 801f702:	465b      	moveq	r3, fp
 801f704:	e797      	b.n	801f636 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f706:	454f      	cmp	r7, r9
 801f708:	dabb      	bge.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f70a:	fb0c 2606 	mla	r6, ip, r6, r2
 801f70e:	1436      	asrs	r6, r6, #16
 801f710:	d4b7      	bmi.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f712:	4546      	cmp	r6, r8
 801f714:	dab5      	bge.n	801f682 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f716:	461e      	mov	r6, r3
 801f718:	46a0      	mov	r8, r4
 801f71a:	2e00      	cmp	r6, #0
 801f71c:	ddb8      	ble.n	801f690 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f71e:	1417      	asrs	r7, r2, #16
 801f720:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f724:	9901      	ldr	r1, [sp, #4]
 801f726:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f72a:	4462      	add	r2, ip
 801f72c:	4470      	add	r0, lr
 801f72e:	fb0a 1707 	mla	r7, sl, r7, r1
 801f732:	9902      	ldr	r1, [sp, #8]
 801f734:	3e01      	subs	r6, #1
 801f736:	f817 7009 	ldrb.w	r7, [r7, r9]
 801f73a:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f73e:	f828 7b02 	strh.w	r7, [r8], #2
 801f742:	e7ea      	b.n	801f71a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f744:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f748:	d417      	bmi.n	801f77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f74a:	68ae      	ldr	r6, [r5, #8]
 801f74c:	454e      	cmp	r6, r9
 801f74e:	dd14      	ble.n	801f77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f750:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f754:	d411      	bmi.n	801f77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f756:	68ef      	ldr	r7, [r5, #12]
 801f758:	4557      	cmp	r7, sl
 801f75a:	dd0e      	ble.n	801f77a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801f75c:	9f01      	ldr	r7, [sp, #4]
 801f75e:	b236      	sxth	r6, r6
 801f760:	f06f 0101 	mvn.w	r1, #1
 801f764:	fb0a 7606 	mla	r6, sl, r6, r7
 801f768:	9f02      	ldr	r7, [sp, #8]
 801f76a:	f816 6009 	ldrb.w	r6, [r6, r9]
 801f76e:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f772:	fb01 f608 	mul.w	r6, r1, r8
 801f776:	9903      	ldr	r1, [sp, #12]
 801f778:	538f      	strh	r7, [r1, r6]
 801f77a:	4470      	add	r0, lr
 801f77c:	4462      	add	r2, ip
 801f77e:	f108 38ff 	add.w	r8, r8, #4294967295
 801f782:	e782      	b.n	801f68a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f784:	b005      	add	sp, #20
 801f786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f78a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f78e:	b087      	sub	sp, #28
 801f790:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801f792:	9205      	str	r2, [sp, #20]
 801f794:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f798:	9102      	str	r1, [sp, #8]
 801f79a:	9203      	str	r2, [sp, #12]
 801f79c:	6861      	ldr	r1, [r4, #4]
 801f79e:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801f7a2:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801f7a6:	fb01 2000 	mla	r0, r1, r0, r2
 801f7aa:	6822      	ldr	r2, [r4, #0]
 801f7ac:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801f7b0:	9200      	str	r2, [sp, #0]
 801f7b2:	f8dc 2000 	ldr.w	r2, [ip]
 801f7b6:	9204      	str	r2, [sp, #16]
 801f7b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801f7bc:	3204      	adds	r2, #4
 801f7be:	9201      	str	r2, [sp, #4]
 801f7c0:	9a03      	ldr	r2, [sp, #12]
 801f7c2:	43d5      	mvns	r5, r2
 801f7c4:	b2ed      	uxtb	r5, r5
 801f7c6:	9a02      	ldr	r2, [sp, #8]
 801f7c8:	2a00      	cmp	r2, #0
 801f7ca:	dc03      	bgt.n	801f7d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801f7cc:	9a05      	ldr	r2, [sp, #20]
 801f7ce:	2a00      	cmp	r2, #0
 801f7d0:	f340 812c 	ble.w	801fa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f7d4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f7d6:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801f7da:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f7de:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f7e0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801f7e4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	dd10      	ble.n	801f80e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f7ec:	140c      	asrs	r4, r1, #16
 801f7ee:	d405      	bmi.n	801f7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7f0:	4574      	cmp	r4, lr
 801f7f2:	da03      	bge.n	801f7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7f4:	1414      	asrs	r4, r2, #16
 801f7f6:	d401      	bmi.n	801f7fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f7f8:	42bc      	cmp	r4, r7
 801f7fa:	db09      	blt.n	801f810 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801f7fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f7fe:	3b01      	subs	r3, #1
 801f800:	9800      	ldr	r0, [sp, #0]
 801f802:	4421      	add	r1, r4
 801f804:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f806:	3002      	adds	r0, #2
 801f808:	4422      	add	r2, r4
 801f80a:	9000      	str	r0, [sp, #0]
 801f80c:	e7ec      	b.n	801f7e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f80e:	d071      	beq.n	801f8f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801f810:	1e5c      	subs	r4, r3, #1
 801f812:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f814:	fb06 1604 	mla	r6, r6, r4, r1
 801f818:	1436      	asrs	r6, r6, #16
 801f81a:	d45d      	bmi.n	801f8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f81c:	4576      	cmp	r6, lr
 801f81e:	da5b      	bge.n	801f8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f820:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f822:	fb06 2404 	mla	r4, r6, r4, r2
 801f826:	1424      	asrs	r4, r4, #16
 801f828:	d456      	bmi.n	801f8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f82a:	42bc      	cmp	r4, r7
 801f82c:	da54      	bge.n	801f8d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f82e:	4698      	mov	r8, r3
 801f830:	f8dd 9000 	ldr.w	r9, [sp]
 801f834:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801f838:	f1b8 0f00 	cmp.w	r8, #0
 801f83c:	dd54      	ble.n	801f8e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f83e:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801f842:	1414      	asrs	r4, r2, #16
 801f844:	9804      	ldr	r0, [sp, #16]
 801f846:	140e      	asrs	r6, r1, #16
 801f848:	f108 38ff 	add.w	r8, r8, #4294967295
 801f84c:	fb07 0404 	mla	r4, r7, r4, r0
 801f850:	9801      	ldr	r0, [sp, #4]
 801f852:	f814 e006 	ldrb.w	lr, [r4, r6]
 801f856:	f8b9 4000 	ldrh.w	r4, [r9]
 801f85a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f85e:	1227      	asrs	r7, r4, #8
 801f860:	eb00 0b0e 	add.w	fp, r0, lr
 801f864:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801f868:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f86c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f86e:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f872:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f876:	4401      	add	r1, r0
 801f878:	fb16 f60a 	smulbb	r6, r6, sl
 801f87c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801f87e:	fb1b fb0a 	smulbb	fp, fp, sl
 801f882:	fb07 6705 	mla	r7, r7, r5, r6
 801f886:	10e6      	asrs	r6, r4, #3
 801f888:	00e4      	lsls	r4, r4, #3
 801f88a:	4402      	add	r2, r0
 801f88c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f890:	b2bf      	uxth	r7, r7
 801f892:	b2e4      	uxtb	r4, r4
 801f894:	fb06 b605 	mla	r6, r6, r5, fp
 801f898:	fb14 f405 	smulbb	r4, r4, r5
 801f89c:	b2b6      	uxth	r6, r6
 801f89e:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801f8a2:	1c7c      	adds	r4, r7, #1
 801f8a4:	f106 0b01 	add.w	fp, r6, #1
 801f8a8:	fa1f fe8e 	uxth.w	lr, lr
 801f8ac:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f8b0:	f10e 0401 	add.w	r4, lr, #1
 801f8b4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801f8b8:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801f8bc:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801f8c0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f8c4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801f8c8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801f8cc:	4327      	orrs	r7, r4
 801f8ce:	ea47 070b 	orr.w	r7, r7, fp
 801f8d2:	f829 7b02 	strh.w	r7, [r9], #2
 801f8d6:	e7af      	b.n	801f838 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801f8d8:	f04f 0e00 	mov.w	lr, #0
 801f8dc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801f8e0:	eb03 040e 	add.w	r4, r3, lr
 801f8e4:	2c00      	cmp	r4, #0
 801f8e6:	dc43      	bgt.n	801f970 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801f8e8:	9a00      	ldr	r2, [sp, #0]
 801f8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f8f2:	9300      	str	r3, [sp, #0]
 801f8f4:	9b02      	ldr	r3, [sp, #8]
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	f340 8098 	ble.w	801fa2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801f8fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f90a:	eef0 6a62 	vmov.f32	s13, s5
 801f90e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f912:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f91a:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801f91e:	eef0 6a43 	vmov.f32	s13, s6
 801f922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f926:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801f92a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f92e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f932:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f93a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f942:	ee12 2a90 	vmov	r2, s5
 801f946:	eef0 2a47 	vmov.f32	s5, s14
 801f94a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f94e:	ee13 2a10 	vmov	r2, s6
 801f952:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f954:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f956:	eeb0 3a67 	vmov.f32	s6, s15
 801f95a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f95e:	9314      	str	r3, [sp, #80]	@ 0x50
 801f960:	9b02      	ldr	r3, [sp, #8]
 801f962:	9a05      	ldr	r2, [sp, #20]
 801f964:	3b01      	subs	r3, #1
 801f966:	9302      	str	r3, [sp, #8]
 801f968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f96a:	bf08      	it	eq
 801f96c:	4613      	moveq	r3, r2
 801f96e:	e72a      	b.n	801f7c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801f970:	140f      	asrs	r7, r1, #16
 801f972:	d454      	bmi.n	801fa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f974:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801f978:	42be      	cmp	r6, r7
 801f97a:	dd50      	ble.n	801fa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f97c:	ea5f 4822 	movs.w	r8, r2, asr #16
 801f980:	d44d      	bmi.n	801fa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f982:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801f986:	4544      	cmp	r4, r8
 801f988:	dd49      	ble.n	801fa1e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801f98a:	9c04      	ldr	r4, [sp, #16]
 801f98c:	b236      	sxth	r6, r6
 801f98e:	f06f 0001 	mvn.w	r0, #1
 801f992:	fb08 4606 	mla	r6, r8, r6, r4
 801f996:	9c01      	ldr	r4, [sp, #4]
 801f998:	fb00 fa0e 	mul.w	sl, r0, lr
 801f99c:	9800      	ldr	r0, [sp, #0]
 801f99e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801f9a2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801f9a6:	eb04 0b08 	add.w	fp, r4, r8
 801f9aa:	f830 400a 	ldrh.w	r4, [r0, sl]
 801f9ae:	9801      	ldr	r0, [sp, #4]
 801f9b0:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801f9b4:	1227      	asrs	r7, r4, #8
 801f9b6:	f89b b001 	ldrb.w	fp, [fp, #1]
 801f9ba:	fb16 f609 	smulbb	r6, r6, r9
 801f9be:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f9c2:	f810 8008 	ldrb.w	r8, [r0, r8]
 801f9c6:	fb1b fb09 	smulbb	fp, fp, r9
 801f9ca:	fb07 6705 	mla	r7, r7, r5, r6
 801f9ce:	10e6      	asrs	r6, r4, #3
 801f9d0:	00e4      	lsls	r4, r4, #3
 801f9d2:	9800      	ldr	r0, [sp, #0]
 801f9d4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f9d8:	b2bf      	uxth	r7, r7
 801f9da:	b2e4      	uxtb	r4, r4
 801f9dc:	fb06 b605 	mla	r6, r6, r5, fp
 801f9e0:	fb14 f405 	smulbb	r4, r4, r5
 801f9e4:	b2b6      	uxth	r6, r6
 801f9e6:	fb08 4809 	mla	r8, r8, r9, r4
 801f9ea:	1c7c      	adds	r4, r7, #1
 801f9ec:	f106 0b01 	add.w	fp, r6, #1
 801f9f0:	fa1f f888 	uxth.w	r8, r8
 801f9f4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801f9f8:	f108 0401 	add.w	r4, r8, #1
 801f9fc:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801fa00:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fa04:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801fa08:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801fa0c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801fa10:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801fa14:	4327      	orrs	r7, r4
 801fa16:	ea47 070b 	orr.w	r7, r7, fp
 801fa1a:	f820 700a 	strh.w	r7, [r0, sl]
 801fa1e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fa20:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fa24:	4401      	add	r1, r0
 801fa26:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801fa28:	4402      	add	r2, r0
 801fa2a:	e759      	b.n	801f8e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801fa2c:	b007      	add	sp, #28
 801fa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa38:	b085      	sub	sp, #20
 801fa3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fa3e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801fa40:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801fa42:	9203      	str	r2, [sp, #12]
 801fa44:	6870      	ldr	r0, [r6, #4]
 801fa46:	686f      	ldr	r7, [r5, #4]
 801fa48:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801fa4c:	3704      	adds	r7, #4
 801fa4e:	9101      	str	r1, [sp, #4]
 801fa50:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801fa54:	fb00 2404 	mla	r4, r0, r4, r2
 801fa58:	6832      	ldr	r2, [r6, #0]
 801fa5a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fa5e:	682a      	ldr	r2, [r5, #0]
 801fa60:	9202      	str	r2, [sp, #8]
 801fa62:	9a01      	ldr	r2, [sp, #4]
 801fa64:	2a00      	cmp	r2, #0
 801fa66:	dc03      	bgt.n	801fa70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fa68:	9a03      	ldr	r2, [sp, #12]
 801fa6a:	2a00      	cmp	r2, #0
 801fa6c:	f340 80cc 	ble.w	801fc08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fa70:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fa72:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fa76:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fa7a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fa7c:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801fa80:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	dd0d      	ble.n	801faa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fa88:	1406      	asrs	r6, r0, #16
 801fa8a:	d405      	bmi.n	801fa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa8c:	454e      	cmp	r6, r9
 801fa8e:	da03      	bge.n	801fa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa90:	1416      	asrs	r6, r2, #16
 801fa92:	d401      	bmi.n	801fa98 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fa94:	4546      	cmp	r6, r8
 801fa96:	db06      	blt.n	801faa6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fa98:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801fa9a:	4460      	add	r0, ip
 801fa9c:	3b01      	subs	r3, #1
 801fa9e:	3402      	adds	r4, #2
 801faa0:	4432      	add	r2, r6
 801faa2:	e7ef      	b.n	801fa84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801faa4:	d00f      	beq.n	801fac6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801faa6:	1e5e      	subs	r6, r3, #1
 801faa8:	fb0c 0e06 	mla	lr, ip, r6, r0
 801faac:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801fab0:	d543      	bpl.n	801fb3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801fab2:	4698      	mov	r8, r3
 801fab4:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801fab8:	f1b8 0f00 	cmp.w	r8, #0
 801fabc:	dc71      	bgt.n	801fba2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801fabe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fac2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fac6:	9b01      	ldr	r3, [sp, #4]
 801fac8:	2b00      	cmp	r3, #0
 801faca:	f340 809d 	ble.w	801fc08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801face:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fad4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fad8:	eeb0 6a62 	vmov.f32	s12, s5
 801fadc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fae0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fae8:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801faec:	eeb0 6a43 	vmov.f32	s12, s6
 801faf0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801faf4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801faf8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fafc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fb00:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fb04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fb08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fb0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fb10:	ee12 2a90 	vmov	r2, s5
 801fb14:	eef0 2a47 	vmov.f32	s5, s14
 801fb18:	fb92 fcf3 	sdiv	ip, r2, r3
 801fb1c:	ee13 2a10 	vmov	r2, s6
 801fb20:	eeb0 3a67 	vmov.f32	s6, s15
 801fb24:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb28:	9312      	str	r3, [sp, #72]	@ 0x48
 801fb2a:	9b01      	ldr	r3, [sp, #4]
 801fb2c:	9a03      	ldr	r2, [sp, #12]
 801fb2e:	3b01      	subs	r3, #1
 801fb30:	9301      	str	r3, [sp, #4]
 801fb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb34:	bf08      	it	eq
 801fb36:	4613      	moveq	r3, r2
 801fb38:	e793      	b.n	801fa62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801fb3a:	45ce      	cmp	lr, r9
 801fb3c:	dab9      	bge.n	801fab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb3e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fb40:	fb01 2606 	mla	r6, r1, r6, r2
 801fb44:	1436      	asrs	r6, r6, #16
 801fb46:	d4b4      	bmi.n	801fab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb48:	4546      	cmp	r6, r8
 801fb4a:	dab2      	bge.n	801fab2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fb4c:	4698      	mov	r8, r3
 801fb4e:	46a2      	mov	sl, r4
 801fb50:	f1b8 0f00 	cmp.w	r8, #0
 801fb54:	ddb3      	ble.n	801fabe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fb56:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801fb5a:	1416      	asrs	r6, r2, #16
 801fb5c:	9902      	ldr	r1, [sp, #8]
 801fb5e:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801fb62:	f108 38ff 	add.w	r8, r8, #4294967295
 801fb66:	4460      	add	r0, ip
 801fb68:	fb09 1606 	mla	r6, r9, r6, r1
 801fb6c:	4928      	ldr	r1, [pc, #160]	@ (801fc10 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801fb6e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801fb72:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fb76:	eb07 0b0e 	add.w	fp, r7, lr
 801fb7a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801fb7e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801fb82:	00f6      	lsls	r6, r6, #3
 801fb84:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801fb88:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fb8a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fb8e:	440a      	add	r2, r1
 801fb90:	ea49 0606 	orr.w	r6, r9, r6
 801fb94:	f817 900e 	ldrb.w	r9, [r7, lr]
 801fb98:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801fb9c:	f82a 6b02 	strh.w	r6, [sl], #2
 801fba0:	e7d6      	b.n	801fb50 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fba2:	ea5f 4920 	movs.w	r9, r0, asr #16
 801fba6:	d429      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fba8:	68ae      	ldr	r6, [r5, #8]
 801fbaa:	454e      	cmp	r6, r9
 801fbac:	dd26      	ble.n	801fbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fbae:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fbb2:	d423      	bmi.n	801fbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fbb4:	68e9      	ldr	r1, [r5, #12]
 801fbb6:	4559      	cmp	r1, fp
 801fbb8:	dd20      	ble.n	801fbfc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801fbba:	fa0f fe86 	sxth.w	lr, r6
 801fbbe:	9902      	ldr	r1, [sp, #8]
 801fbc0:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801fbc4:	f06f 0101 	mvn.w	r1, #1
 801fbc8:	f81e e009 	ldrb.w	lr, [lr, r9]
 801fbcc:	fb01 f908 	mul.w	r9, r1, r8
 801fbd0:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801fbd4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fbd8:	eb07 060e 	add.w	r6, r7, lr
 801fbdc:	f896 b002 	ldrb.w	fp, [r6, #2]
 801fbe0:	7876      	ldrb	r6, [r6, #1]
 801fbe2:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801fbe6:	00f6      	lsls	r6, r6, #3
 801fbe8:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fbec:	ea4b 0606 	orr.w	r6, fp, r6
 801fbf0:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801fbf4:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801fbf8:	f82a 6009 	strh.w	r6, [sl, r9]
 801fbfc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801fbfe:	4460      	add	r0, ip
 801fc00:	f108 38ff 	add.w	r8, r8, #4294967295
 801fc04:	440a      	add	r2, r1
 801fc06:	e757      	b.n	801fab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fc08:	b005      	add	sp, #20
 801fc0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc0e:	bf00      	nop
 801fc10:	fffff800 	.word	0xfffff800

0801fc14 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc18:	b087      	sub	sp, #28
 801fc1a:	468b      	mov	fp, r1
 801fc1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fc20:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801fc22:	9204      	str	r2, [sp, #16]
 801fc24:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fc28:	6841      	ldr	r1, [r0, #4]
 801fc2a:	9205      	str	r2, [sp, #20]
 801fc2c:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801fc30:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801fc34:	fb01 2404 	mla	r4, r1, r4, r2
 801fc38:	6802      	ldr	r2, [r0, #0]
 801fc3a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fc3e:	f8dc 2000 	ldr.w	r2, [ip]
 801fc42:	9201      	str	r2, [sp, #4]
 801fc44:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801fc48:	3204      	adds	r2, #4
 801fc4a:	9202      	str	r2, [sp, #8]
 801fc4c:	f1bb 0f00 	cmp.w	fp, #0
 801fc50:	dc03      	bgt.n	801fc5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fc52:	9a04      	ldr	r2, [sp, #16]
 801fc54:	2a00      	cmp	r2, #0
 801fc56:	f340 8138 	ble.w	801feca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fc5a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fc5c:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801fc60:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fc64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fc66:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801fc6a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fc6e:	2b00      	cmp	r3, #0
 801fc70:	dd0e      	ble.n	801fc90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fc72:	1402      	asrs	r2, r0, #16
 801fc74:	d405      	bmi.n	801fc82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc76:	42ba      	cmp	r2, r7
 801fc78:	da03      	bge.n	801fc82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc7a:	140a      	asrs	r2, r1, #16
 801fc7c:	d401      	bmi.n	801fc82 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc7e:	42b2      	cmp	r2, r6
 801fc80:	db07      	blt.n	801fc92 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801fc82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fc84:	3b01      	subs	r3, #1
 801fc86:	3402      	adds	r4, #2
 801fc88:	4410      	add	r0, r2
 801fc8a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fc8c:	4411      	add	r1, r2
 801fc8e:	e7ee      	b.n	801fc6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fc90:	d019      	beq.n	801fcc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fc92:	1e5a      	subs	r2, r3, #1
 801fc94:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fc96:	fb05 0502 	mla	r5, r5, r2, r0
 801fc9a:	142d      	asrs	r5, r5, #16
 801fc9c:	d409      	bmi.n	801fcb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc9e:	42bd      	cmp	r5, r7
 801fca0:	da07      	bge.n	801fcb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fca2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fca4:	fb05 1202 	mla	r2, r5, r2, r1
 801fca8:	1412      	asrs	r2, r2, #16
 801fcaa:	d402      	bmi.n	801fcb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fcac:	42b2      	cmp	r2, r6
 801fcae:	f2c0 80ac 	blt.w	801fe0a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fcb2:	f04f 0e00 	mov.w	lr, #0
 801fcb6:	eb03 020e 	add.w	r2, r3, lr
 801fcba:	2a00      	cmp	r2, #0
 801fcbc:	dc3e      	bgt.n	801fd3c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fcbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fcc2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fcc6:	f1bb 0f00 	cmp.w	fp, #0
 801fcca:	f340 80fe 	ble.w	801feca <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fcce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fcd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcd8:	f1bb 0b01 	subs.w	fp, fp, #1
 801fcdc:	eeb0 6a62 	vmov.f32	s12, s5
 801fce0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fce4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fce8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcec:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801fcf0:	eeb0 6a43 	vmov.f32	s12, s6
 801fcf4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcf8:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801fcfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd04:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd14:	ee12 2a90 	vmov	r2, s5
 801fd18:	eef0 2a47 	vmov.f32	s5, s14
 801fd1c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd20:	ee13 2a10 	vmov	r2, s6
 801fd24:	9313      	str	r3, [sp, #76]	@ 0x4c
 801fd26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd28:	eeb0 3a67 	vmov.f32	s6, s15
 801fd2c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd30:	9a04      	ldr	r2, [sp, #16]
 801fd32:	9314      	str	r3, [sp, #80]	@ 0x50
 801fd34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fd36:	bf08      	it	eq
 801fd38:	4613      	moveq	r3, r2
 801fd3a:	e787      	b.n	801fc4c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fd3c:	1406      	asrs	r6, r0, #16
 801fd3e:	d45d      	bmi.n	801fdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd40:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801fd44:	42b5      	cmp	r5, r6
 801fd46:	dd59      	ble.n	801fdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd48:	140f      	asrs	r7, r1, #16
 801fd4a:	d457      	bmi.n	801fdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd4c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801fd50:	42ba      	cmp	r2, r7
 801fd52:	dd53      	ble.n	801fdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd54:	9a01      	ldr	r2, [sp, #4]
 801fd56:	b22d      	sxth	r5, r5
 801fd58:	fb07 2505 	mla	r5, r7, r5, r2
 801fd5c:	5daa      	ldrb	r2, [r5, r6]
 801fd5e:	9d02      	ldr	r5, [sp, #8]
 801fd60:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fd64:	0e2e      	lsrs	r6, r5, #24
 801fd66:	d049      	beq.n	801fdfc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fd68:	f06f 0201 	mvn.w	r2, #1
 801fd6c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fd70:	fb02 f20e 	mul.w	r2, r2, lr
 801fd74:	f834 8002 	ldrh.w	r8, [r4, r2]
 801fd78:	9203      	str	r2, [sp, #12]
 801fd7a:	9a05      	ldr	r2, [sp, #20]
 801fd7c:	ea4f 2728 	mov.w	r7, r8, asr #8
 801fd80:	4356      	muls	r6, r2
 801fd82:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fd86:	1c72      	adds	r2, r6, #1
 801fd88:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fd8c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd90:	b2ed      	uxtb	r5, r5
 801fd92:	1212      	asrs	r2, r2, #8
 801fd94:	fa1f f982 	uxth.w	r9, r2
 801fd98:	43d2      	mvns	r2, r2
 801fd9a:	fb16 f609 	smulbb	r6, r6, r9
 801fd9e:	b2d2      	uxtb	r2, r2
 801fda0:	fb15 f509 	smulbb	r5, r5, r9
 801fda4:	fb07 6702 	mla	r7, r7, r2, r6
 801fda8:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801fdac:	fb1a fa09 	smulbb	sl, sl, r9
 801fdb0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fdb4:	b2bf      	uxth	r7, r7
 801fdb6:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fdba:	fa5f f888 	uxtb.w	r8, r8
 801fdbe:	fb06 a602 	mla	r6, r6, r2, sl
 801fdc2:	fb08 5502 	mla	r5, r8, r2, r5
 801fdc6:	1c7a      	adds	r2, r7, #1
 801fdc8:	b2b6      	uxth	r6, r6
 801fdca:	b2ad      	uxth	r5, r5
 801fdcc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fdd0:	9a03      	ldr	r2, [sp, #12]
 801fdd2:	f105 0a01 	add.w	sl, r5, #1
 801fdd6:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fdda:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fdde:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fde2:	ea4a 0707 	orr.w	r7, sl, r7
 801fde6:	f106 0a01 	add.w	sl, r6, #1
 801fdea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fdee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdf2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fdf6:	ea47 070a 	orr.w	r7, r7, sl
 801fdfa:	52a7      	strh	r7, [r4, r2]
 801fdfc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fdfe:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fe02:	4410      	add	r0, r2
 801fe04:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fe06:	4411      	add	r1, r2
 801fe08:	e755      	b.n	801fcb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801fe0a:	f04f 0800 	mov.w	r8, #0
 801fe0e:	eba3 0208 	sub.w	r2, r3, r8
 801fe12:	2a00      	cmp	r2, #0
 801fe14:	f77f af53 	ble.w	801fcbe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801fe18:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801fe1c:	140a      	asrs	r2, r1, #16
 801fe1e:	9f01      	ldr	r7, [sp, #4]
 801fe20:	1405      	asrs	r5, r0, #16
 801fe22:	fb06 7202 	mla	r2, r6, r2, r7
 801fe26:	5d52      	ldrb	r2, [r2, r5]
 801fe28:	9d02      	ldr	r5, [sp, #8]
 801fe2a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801fe2e:	0e2e      	lsrs	r6, r5, #24
 801fe30:	d044      	beq.n	801febc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801fe32:	9a05      	ldr	r2, [sp, #20]
 801fe34:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fe38:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801fe3c:	4356      	muls	r6, r2
 801fe3e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801fe42:	1c72      	adds	r2, r6, #1
 801fe44:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fe48:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801fe4c:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fe50:	b2ed      	uxtb	r5, r5
 801fe52:	1212      	asrs	r2, r2, #8
 801fe54:	fa1f f982 	uxth.w	r9, r2
 801fe58:	43d2      	mvns	r2, r2
 801fe5a:	fb16 f609 	smulbb	r6, r6, r9
 801fe5e:	b2d2      	uxtb	r2, r2
 801fe60:	fb15 f509 	smulbb	r5, r5, r9
 801fe64:	fb07 6702 	mla	r7, r7, r2, r6
 801fe68:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801fe6c:	fb1a fa09 	smulbb	sl, sl, r9
 801fe70:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fe74:	b2bf      	uxth	r7, r7
 801fe76:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fe7a:	fa5f fe8e 	uxtb.w	lr, lr
 801fe7e:	fb06 a602 	mla	r6, r6, r2, sl
 801fe82:	fb0e 5502 	mla	r5, lr, r2, r5
 801fe86:	1c7a      	adds	r2, r7, #1
 801fe88:	b2b6      	uxth	r6, r6
 801fe8a:	b2ad      	uxth	r5, r5
 801fe8c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fe90:	f105 0a01 	add.w	sl, r5, #1
 801fe94:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fe98:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fea0:	ea4a 0707 	orr.w	r7, sl, r7
 801fea4:	f106 0a01 	add.w	sl, r6, #1
 801fea8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801feac:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801feb0:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801feb4:	ea47 070a 	orr.w	r7, r7, sl
 801feb8:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801febc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801febe:	f108 0801 	add.w	r8, r8, #1
 801fec2:	4410      	add	r0, r2
 801fec4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fec6:	4411      	add	r1, r2
 801fec8:	e7a1      	b.n	801fe0e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801feca:	b007      	add	sp, #28
 801fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fed0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fed4:	b085      	sub	sp, #20
 801fed6:	468b      	mov	fp, r1
 801fed8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fedc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fede:	9203      	str	r2, [sp, #12]
 801fee0:	6841      	ldr	r1, [r0, #4]
 801fee2:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801fee6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801feea:	fb01 2404 	mla	r4, r1, r4, r2
 801feee:	6802      	ldr	r2, [r0, #0]
 801fef0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fef4:	f8de 2000 	ldr.w	r2, [lr]
 801fef8:	9200      	str	r2, [sp, #0]
 801fefa:	f8de 2004 	ldr.w	r2, [lr, #4]
 801fefe:	3204      	adds	r2, #4
 801ff00:	9201      	str	r2, [sp, #4]
 801ff02:	f1bb 0f00 	cmp.w	fp, #0
 801ff06:	dc03      	bgt.n	801ff10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ff08:	9a03      	ldr	r2, [sp, #12]
 801ff0a:	2a00      	cmp	r2, #0
 801ff0c:	f340 8153 	ble.w	80201b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ff10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ff12:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ff16:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ff1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ff1c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ff20:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	dd0e      	ble.n	801ff46 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ff28:	1408      	asrs	r0, r1, #16
 801ff2a:	d405      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ff2c:	42b8      	cmp	r0, r7
 801ff2e:	da03      	bge.n	801ff38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ff30:	1410      	asrs	r0, r2, #16
 801ff32:	d401      	bmi.n	801ff38 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ff34:	42b0      	cmp	r0, r6
 801ff36:	db07      	blt.n	801ff48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ff38:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ff3a:	3b01      	subs	r3, #1
 801ff3c:	3402      	adds	r4, #2
 801ff3e:	4401      	add	r1, r0
 801ff40:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ff42:	4402      	add	r2, r0
 801ff44:	e7ee      	b.n	801ff24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ff46:	d017      	beq.n	801ff78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ff48:	1e58      	subs	r0, r3, #1
 801ff4a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ff4c:	fb05 1500 	mla	r5, r5, r0, r1
 801ff50:	142d      	asrs	r5, r5, #16
 801ff52:	d409      	bmi.n	801ff68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ff54:	42bd      	cmp	r5, r7
 801ff56:	da07      	bge.n	801ff68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ff58:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ff5a:	fb05 2000 	mla	r0, r5, r0, r2
 801ff5e:	1400      	asrs	r0, r0, #16
 801ff60:	d402      	bmi.n	801ff68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ff62:	42b0      	cmp	r0, r6
 801ff64:	f2c0 80bc 	blt.w	80200e0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ff68:	2600      	movs	r6, #0
 801ff6a:	1998      	adds	r0, r3, r6
 801ff6c:	2800      	cmp	r0, #0
 801ff6e:	dc3e      	bgt.n	801ffee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ff70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff78:	f1bb 0f00 	cmp.w	fp, #0
 801ff7c:	f340 811b 	ble.w	80201b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ff80:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ff86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff8a:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff8e:	eeb0 6a62 	vmov.f32	s12, s5
 801ff92:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff96:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff9e:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ffa2:	eeb0 6a43 	vmov.f32	s12, s6
 801ffa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffaa:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ffae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ffb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ffb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ffba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ffbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ffc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ffc6:	ee12 2a90 	vmov	r2, s5
 801ffca:	eef0 2a47 	vmov.f32	s5, s14
 801ffce:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffd2:	ee13 2a10 	vmov	r2, s6
 801ffd6:	9311      	str	r3, [sp, #68]	@ 0x44
 801ffd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ffda:	eeb0 3a67 	vmov.f32	s6, s15
 801ffde:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffe2:	9a03      	ldr	r2, [sp, #12]
 801ffe4:	9312      	str	r3, [sp, #72]	@ 0x48
 801ffe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ffe8:	bf08      	it	eq
 801ffea:	4613      	moveq	r3, r2
 801ffec:	e789      	b.n	801ff02 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ffee:	140f      	asrs	r7, r1, #16
 801fff0:	d426      	bmi.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fff2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801fff6:	42bd      	cmp	r5, r7
 801fff8:	dd22      	ble.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fffa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fffe:	d41f      	bmi.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020000:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020004:	4560      	cmp	r0, ip
 8020006:	dd1b      	ble.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020008:	9800      	ldr	r0, [sp, #0]
 802000a:	b22d      	sxth	r5, r5
 802000c:	fb0c 0505 	mla	r5, ip, r5, r0
 8020010:	5de8      	ldrb	r0, [r5, r7]
 8020012:	9d01      	ldr	r5, [sp, #4]
 8020014:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8020018:	0e07      	lsrs	r7, r0, #24
 802001a:	2fff      	cmp	r7, #255	@ 0xff
 802001c:	d116      	bne.n	802004c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802001e:	f06f 0501 	mvn.w	r5, #1
 8020022:	fb05 f706 	mul.w	r7, r5, r6
 8020026:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 802002a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 802002e:	0945      	lsrs	r5, r0, #5
 8020030:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020034:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020038:	ea4c 0505 	orr.w	r5, ip, r5
 802003c:	4305      	orrs	r5, r0
 802003e:	53e5      	strh	r5, [r4, r7]
 8020040:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020042:	3e01      	subs	r6, #1
 8020044:	4401      	add	r1, r0
 8020046:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020048:	4402      	add	r2, r0
 802004a:	e78e      	b.n	801ff6a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802004c:	b2fd      	uxtb	r5, r7
 802004e:	2f00      	cmp	r7, #0
 8020050:	d0f6      	beq.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020052:	f06f 0701 	mvn.w	r7, #1
 8020056:	fa1f f985 	uxth.w	r9, r5
 802005a:	43ed      	mvns	r5, r5
 802005c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020060:	4377      	muls	r7, r6
 8020062:	fb1a fa09 	smulbb	sl, sl, r9
 8020066:	b2ed      	uxtb	r5, r5
 8020068:	f834 8007 	ldrh.w	r8, [r4, r7]
 802006c:	9702      	str	r7, [sp, #8]
 802006e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020072:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8020076:	fb17 f709 	smulbb	r7, r7, r9
 802007a:	b2c0      	uxtb	r0, r0
 802007c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020080:	fb10 f009 	smulbb	r0, r0, r9
 8020084:	fb0c 7c05 	mla	ip, ip, r5, r7
 8020088:	ea4f 07e8 	mov.w	r7, r8, asr #3
 802008c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020090:	fa1f fc8c 	uxth.w	ip, ip
 8020094:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020098:	fa5f f888 	uxtb.w	r8, r8
 802009c:	fb07 a705 	mla	r7, r7, r5, sl
 80200a0:	fb08 0005 	mla	r0, r8, r5, r0
 80200a4:	f10c 0501 	add.w	r5, ip, #1
 80200a8:	b2bf      	uxth	r7, r7
 80200aa:	b280      	uxth	r0, r0
 80200ac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80200b0:	f100 0a01 	add.w	sl, r0, #1
 80200b4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80200b8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80200bc:	9802      	ldr	r0, [sp, #8]
 80200be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80200c2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80200c6:	f107 0a01 	add.w	sl, r7, #1
 80200ca:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80200ce:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80200d2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80200d6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80200da:	f824 c000 	strh.w	ip, [r4, r0]
 80200de:	e7af      	b.n	8020040 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80200e0:	f04f 0800 	mov.w	r8, #0
 80200e4:	eba3 0008 	sub.w	r0, r3, r8
 80200e8:	2800      	cmp	r0, #0
 80200ea:	f77f af41 	ble.w	801ff70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80200ee:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80200f2:	1410      	asrs	r0, r2, #16
 80200f4:	9f00      	ldr	r7, [sp, #0]
 80200f6:	140d      	asrs	r5, r1, #16
 80200f8:	fb06 7000 	mla	r0, r6, r0, r7
 80200fc:	5d40      	ldrb	r0, [r0, r5]
 80200fe:	9d01      	ldr	r5, [sp, #4]
 8020100:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8020104:	0e2e      	lsrs	r6, r5, #24
 8020106:	2eff      	cmp	r6, #255	@ 0xff
 8020108:	d112      	bne.n	8020130 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 802010a:	482c      	ldr	r0, [pc, #176]	@ (80201bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 802010c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8020110:	0968      	lsrs	r0, r5, #5
 8020112:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020116:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802011a:	4330      	orrs	r0, r6
 802011c:	4328      	orrs	r0, r5
 802011e:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8020122:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020124:	f108 0801 	add.w	r8, r8, #1
 8020128:	4401      	add	r1, r0
 802012a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802012c:	4402      	add	r2, r0
 802012e:	e7d9      	b.n	80200e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020130:	b2f0      	uxtb	r0, r6
 8020132:	2e00      	cmp	r6, #0
 8020134:	d0f5      	beq.n	8020122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8020136:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 802013a:	fa1f f980 	uxth.w	r9, r0
 802013e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020142:	43c0      	mvns	r0, r0
 8020144:	ea4f 272c 	mov.w	r7, ip, asr #8
 8020148:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802014c:	fb16 f609 	smulbb	r6, r6, r9
 8020150:	b2c0      	uxtb	r0, r0
 8020152:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020156:	b2ed      	uxtb	r5, r5
 8020158:	fb1a fa09 	smulbb	sl, sl, r9
 802015c:	fb07 6700 	mla	r7, r7, r0, r6
 8020160:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8020164:	fb15 f509 	smulbb	r5, r5, r9
 8020168:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802016c:	b2bf      	uxth	r7, r7
 802016e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020172:	fa5f fc8c 	uxtb.w	ip, ip
 8020176:	fb06 a600 	mla	r6, r6, r0, sl
 802017a:	fb0c 5500 	mla	r5, ip, r0, r5
 802017e:	1c78      	adds	r0, r7, #1
 8020180:	b2b6      	uxth	r6, r6
 8020182:	b2ad      	uxth	r5, r5
 8020184:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8020188:	f105 0a01 	add.w	sl, r5, #1
 802018c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8020190:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020194:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020198:	ea4a 0707 	orr.w	r7, sl, r7
 802019c:	f106 0a01 	add.w	sl, r6, #1
 80201a0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80201a4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80201a8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80201ac:	ea47 070a 	orr.w	r7, r7, sl
 80201b0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80201b4:	e7b5      	b.n	8020122 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80201b6:	b005      	add	sp, #20
 80201b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201bc:	fffff800 	.word	0xfffff800

080201c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c4:	b087      	sub	sp, #28
 80201c6:	468b      	mov	fp, r1
 80201c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80201cc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80201ce:	9204      	str	r2, [sp, #16]
 80201d0:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80201d4:	6861      	ldr	r1, [r4, #4]
 80201d6:	9205      	str	r2, [sp, #20]
 80201d8:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 80201dc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 80201e0:	fb01 2000 	mla	r0, r1, r0, r2
 80201e4:	6822      	ldr	r2, [r4, #0]
 80201e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80201ea:	f8de 2000 	ldr.w	r2, [lr]
 80201ee:	9201      	str	r2, [sp, #4]
 80201f0:	f8de 2004 	ldr.w	r2, [lr, #4]
 80201f4:	9202      	str	r2, [sp, #8]
 80201f6:	f1bb 0f00 	cmp.w	fp, #0
 80201fa:	dc03      	bgt.n	8020204 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80201fc:	9a04      	ldr	r2, [sp, #16]
 80201fe:	2a00      	cmp	r2, #0
 8020200:	f340 8142 	ble.w	8020488 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020204:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020206:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802020a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 802020e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020210:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8020214:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020218:	2b00      	cmp	r3, #0
 802021a:	dd0e      	ble.n	802023a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802021c:	140c      	asrs	r4, r1, #16
 802021e:	d405      	bmi.n	802022c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020220:	42bc      	cmp	r4, r7
 8020222:	da03      	bge.n	802022c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020224:	1414      	asrs	r4, r2, #16
 8020226:	d401      	bmi.n	802022c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020228:	42b4      	cmp	r4, r6
 802022a:	db07      	blt.n	802023c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802022c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802022e:	3b01      	subs	r3, #1
 8020230:	3002      	adds	r0, #2
 8020232:	4421      	add	r1, r4
 8020234:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020236:	4422      	add	r2, r4
 8020238:	e7ee      	b.n	8020218 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802023a:	d019      	beq.n	8020270 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802023c:	1e5c      	subs	r4, r3, #1
 802023e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8020240:	fb05 1504 	mla	r5, r5, r4, r1
 8020244:	142d      	asrs	r5, r5, #16
 8020246:	d409      	bmi.n	802025c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020248:	42bd      	cmp	r5, r7
 802024a:	da07      	bge.n	802025c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802024c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802024e:	fb05 2404 	mla	r4, r5, r4, r2
 8020252:	1424      	asrs	r4, r4, #16
 8020254:	d402      	bmi.n	802025c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020256:	42b4      	cmp	r4, r6
 8020258:	f2c0 80b1 	blt.w	80203be <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802025c:	f04f 0800 	mov.w	r8, #0
 8020260:	eb03 0408 	add.w	r4, r3, r8
 8020264:	2c00      	cmp	r4, #0
 8020266:	dc3e      	bgt.n	80202e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020268:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802026c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020270:	f1bb 0f00 	cmp.w	fp, #0
 8020274:	f340 8108 	ble.w	8020488 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8020278:	ee30 0a04 	vadd.f32	s0, s0, s8
 802027c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802027e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020282:	f1bb 0b01 	subs.w	fp, fp, #1
 8020286:	eeb0 6a62 	vmov.f32	s12, s5
 802028a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802028e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020292:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020296:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 802029a:	eeb0 6a43 	vmov.f32	s12, s6
 802029e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202a2:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 80202a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80202aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80202ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202be:	ee12 2a90 	vmov	r2, s5
 80202c2:	eef0 2a47 	vmov.f32	s5, s14
 80202c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ca:	ee13 2a10 	vmov	r2, s6
 80202ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80202d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80202d2:	eeb0 3a67 	vmov.f32	s6, s15
 80202d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80202da:	9a04      	ldr	r2, [sp, #16]
 80202dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80202de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80202e0:	bf08      	it	eq
 80202e2:	4613      	moveq	r3, r2
 80202e4:	e787      	b.n	80201f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80202e6:	140e      	asrs	r6, r1, #16
 80202e8:	d462      	bmi.n	80203b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202ea:	f8de 5008 	ldr.w	r5, [lr, #8]
 80202ee:	42b5      	cmp	r5, r6
 80202f0:	dd5e      	ble.n	80203b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202f2:	1417      	asrs	r7, r2, #16
 80202f4:	d45c      	bmi.n	80203b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202f6:	f8de 400c 	ldr.w	r4, [lr, #12]
 80202fa:	42bc      	cmp	r4, r7
 80202fc:	dd58      	ble.n	80203b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80202fe:	b22d      	sxth	r5, r5
 8020300:	9c02      	ldr	r4, [sp, #8]
 8020302:	fb07 6505 	mla	r5, r7, r5, r6
 8020306:	5d66      	ldrb	r6, [r4, r5]
 8020308:	2e00      	cmp	r6, #0
 802030a:	d051      	beq.n	80203b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 802030c:	9c01      	ldr	r4, [sp, #4]
 802030e:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8020312:	f06f 0401 	mvn.w	r4, #1
 8020316:	fb04 f408 	mul.w	r4, r4, r8
 802031a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 802031e:	5b05      	ldrh	r5, [r0, r4]
 8020320:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020324:	9403      	str	r4, [sp, #12]
 8020326:	9c05      	ldr	r4, [sp, #20]
 8020328:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802032c:	4366      	muls	r6, r4
 802032e:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020332:	1c74      	adds	r4, r6, #1
 8020334:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020338:	122e      	asrs	r6, r5, #8
 802033a:	1224      	asrs	r4, r4, #8
 802033c:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8020340:	00ed      	lsls	r5, r5, #3
 8020342:	b2a7      	uxth	r7, r4
 8020344:	43e4      	mvns	r4, r4
 8020346:	b2ed      	uxtb	r5, r5
 8020348:	b2e4      	uxtb	r4, r4
 802034a:	fb16 f604 	smulbb	r6, r6, r4
 802034e:	fb15 f504 	smulbb	r5, r5, r4
 8020352:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020356:	ea4f 06e9 	mov.w	r6, r9, asr #3
 802035a:	fb1a fa04 	smulbb	sl, sl, r4
 802035e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8020362:	fa1f fc8c 	uxth.w	ip, ip
 8020366:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802036a:	fa5f f989 	uxtb.w	r9, r9
 802036e:	fb06 a607 	mla	r6, r6, r7, sl
 8020372:	f10c 0401 	add.w	r4, ip, #1
 8020376:	fb09 5507 	mla	r5, r9, r7, r5
 802037a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802037e:	9c03      	ldr	r4, [sp, #12]
 8020380:	b2ad      	uxth	r5, r5
 8020382:	b2b6      	uxth	r6, r6
 8020384:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020388:	f105 0a01 	add.w	sl, r5, #1
 802038c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020390:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020394:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020398:	f106 0a01 	add.w	sl, r6, #1
 802039c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80203a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80203a4:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80203a8:	ea4c 0c0a 	orr.w	ip, ip, sl
 80203ac:	f820 c004 	strh.w	ip, [r0, r4]
 80203b0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80203b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80203b6:	4421      	add	r1, r4
 80203b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80203ba:	4422      	add	r2, r4
 80203bc:	e750      	b.n	8020260 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80203be:	f04f 0900 	mov.w	r9, #0
 80203c2:	eba3 0409 	sub.w	r4, r3, r9
 80203c6:	2c00      	cmp	r4, #0
 80203c8:	f77f af4e 	ble.w	8020268 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80203cc:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80203d0:	140d      	asrs	r5, r1, #16
 80203d2:	1414      	asrs	r4, r2, #16
 80203d4:	fb06 5404 	mla	r4, r6, r4, r5
 80203d8:	9d02      	ldr	r5, [sp, #8]
 80203da:	5d2e      	ldrb	r6, [r5, r4]
 80203dc:	2e00      	cmp	r6, #0
 80203de:	d04c      	beq.n	802047a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80203e0:	9d01      	ldr	r5, [sp, #4]
 80203e2:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 80203e6:	9c05      	ldr	r4, [sp, #20]
 80203e8:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80203ec:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80203f0:	4366      	muls	r6, r4
 80203f2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80203f6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80203fa:	1c74      	adds	r4, r6, #1
 80203fc:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020400:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8020404:	122e      	asrs	r6, r5, #8
 8020406:	1224      	asrs	r4, r4, #8
 8020408:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 802040c:	00ed      	lsls	r5, r5, #3
 802040e:	b2a7      	uxth	r7, r4
 8020410:	43e4      	mvns	r4, r4
 8020412:	b2ed      	uxtb	r5, r5
 8020414:	b2e4      	uxtb	r4, r4
 8020416:	fb16 f604 	smulbb	r6, r6, r4
 802041a:	fb15 f504 	smulbb	r5, r5, r4
 802041e:	fb0c 6c07 	mla	ip, ip, r7, r6
 8020422:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8020426:	fb1a fa04 	smulbb	sl, sl, r4
 802042a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802042e:	fa1f fc8c 	uxth.w	ip, ip
 8020432:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020436:	fa5f f888 	uxtb.w	r8, r8
 802043a:	fb06 a607 	mla	r6, r6, r7, sl
 802043e:	f10c 0401 	add.w	r4, ip, #1
 8020442:	fb08 5507 	mla	r5, r8, r7, r5
 8020446:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 802044a:	b2ad      	uxth	r5, r5
 802044c:	b2b6      	uxth	r6, r6
 802044e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020452:	f105 0a01 	add.w	sl, r5, #1
 8020456:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802045a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802045e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8020462:	f106 0a01 	add.w	sl, r6, #1
 8020466:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802046a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802046e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020472:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020476:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 802047a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802047c:	f109 0901 	add.w	r9, r9, #1
 8020480:	4421      	add	r1, r4
 8020482:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020484:	4422      	add	r2, r4
 8020486:	e79c      	b.n	80203c2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8020488:	b007      	add	sp, #28
 802048a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802048e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802048e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020492:	b085      	sub	sp, #20
 8020494:	468b      	mov	fp, r1
 8020496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802049a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802049c:	9203      	str	r2, [sp, #12]
 802049e:	6861      	ldr	r1, [r4, #4]
 80204a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80204a4:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 80204a8:	fb01 2000 	mla	r0, r1, r0, r2
 80204ac:	6822      	ldr	r2, [r4, #0]
 80204ae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80204b2:	f8d8 2000 	ldr.w	r2, [r8]
 80204b6:	9200      	str	r2, [sp, #0]
 80204b8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80204bc:	9201      	str	r2, [sp, #4]
 80204be:	f1bb 0f00 	cmp.w	fp, #0
 80204c2:	dc03      	bgt.n	80204cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80204c4:	9a03      	ldr	r2, [sp, #12]
 80204c6:	2a00      	cmp	r2, #0
 80204c8:	f340 8146 	ble.w	8020758 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80204cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80204ce:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 80204d2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80204d6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80204d8:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 80204dc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80204e0:	2b00      	cmp	r3, #0
 80204e2:	dd0e      	ble.n	8020502 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80204e4:	140c      	asrs	r4, r1, #16
 80204e6:	d405      	bmi.n	80204f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204e8:	42bc      	cmp	r4, r7
 80204ea:	da03      	bge.n	80204f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204ec:	1414      	asrs	r4, r2, #16
 80204ee:	d401      	bmi.n	80204f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80204f0:	42b4      	cmp	r4, r6
 80204f2:	db07      	blt.n	8020504 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80204f4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80204f6:	3b01      	subs	r3, #1
 80204f8:	3002      	adds	r0, #2
 80204fa:	4421      	add	r1, r4
 80204fc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80204fe:	4422      	add	r2, r4
 8020500:	e7ee      	b.n	80204e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020502:	d017      	beq.n	8020534 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020504:	1e5c      	subs	r4, r3, #1
 8020506:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020508:	fb05 1504 	mla	r5, r5, r4, r1
 802050c:	142d      	asrs	r5, r5, #16
 802050e:	d409      	bmi.n	8020524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020510:	42bd      	cmp	r5, r7
 8020512:	da07      	bge.n	8020524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020514:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020516:	fb05 2404 	mla	r4, r5, r4, r2
 802051a:	1424      	asrs	r4, r4, #16
 802051c:	d402      	bmi.n	8020524 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802051e:	42b4      	cmp	r4, r6
 8020520:	f2c0 80b3 	blt.w	802068a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8020524:	2600      	movs	r6, #0
 8020526:	199c      	adds	r4, r3, r6
 8020528:	2c00      	cmp	r4, #0
 802052a:	dc3e      	bgt.n	80205aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802052c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020530:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020534:	f1bb 0f00 	cmp.w	fp, #0
 8020538:	f340 810e 	ble.w	8020758 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802053c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020540:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020542:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020546:	f1bb 0b01 	subs.w	fp, fp, #1
 802054a:	eeb0 6a62 	vmov.f32	s12, s5
 802054e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020552:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020556:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802055a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 802055e:	eeb0 6a43 	vmov.f32	s12, s6
 8020562:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020566:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 802056a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802056e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020572:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020576:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802057a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802057e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020582:	ee12 2a90 	vmov	r2, s5
 8020586:	eef0 2a47 	vmov.f32	s5, s14
 802058a:	fb92 f3f3 	sdiv	r3, r2, r3
 802058e:	ee13 2a10 	vmov	r2, s6
 8020592:	9311      	str	r3, [sp, #68]	@ 0x44
 8020594:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020596:	eeb0 3a67 	vmov.f32	s6, s15
 802059a:	fb92 f3f3 	sdiv	r3, r2, r3
 802059e:	9a03      	ldr	r2, [sp, #12]
 80205a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80205a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205a4:	bf08      	it	eq
 80205a6:	4613      	moveq	r3, r2
 80205a8:	e789      	b.n	80204be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80205aa:	140f      	asrs	r7, r1, #16
 80205ac:	d418      	bmi.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80205ae:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80205b2:	42bd      	cmp	r5, r7
 80205b4:	dd14      	ble.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80205b6:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80205ba:	d411      	bmi.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80205bc:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80205c0:	4564      	cmp	r4, ip
 80205c2:	dd0d      	ble.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80205c4:	b22d      	sxth	r5, r5
 80205c6:	9c01      	ldr	r4, [sp, #4]
 80205c8:	fb0c 7505 	mla	r5, ip, r5, r7
 80205cc:	5d64      	ldrb	r4, [r4, r5]
 80205ce:	2cff      	cmp	r4, #255	@ 0xff
 80205d0:	d10c      	bne.n	80205ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80205d2:	9c00      	ldr	r4, [sp, #0]
 80205d4:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80205d8:	f06f 0401 	mvn.w	r4, #1
 80205dc:	4374      	muls	r4, r6
 80205de:	5305      	strh	r5, [r0, r4]
 80205e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80205e2:	3e01      	subs	r6, #1
 80205e4:	4421      	add	r1, r4
 80205e6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80205e8:	4422      	add	r2, r4
 80205ea:	e79c      	b.n	8020526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80205ec:	2c00      	cmp	r4, #0
 80205ee:	d0f7      	beq.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80205f0:	9f00      	ldr	r7, [sp, #0]
 80205f2:	fa1f fc84 	uxth.w	ip, r4
 80205f6:	43e4      	mvns	r4, r4
 80205f8:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80205fc:	f06f 0501 	mvn.w	r5, #1
 8020600:	b2e4      	uxtb	r4, r4
 8020602:	4375      	muls	r5, r6
 8020604:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8020608:	9502      	str	r5, [sp, #8]
 802060a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802060e:	5b45      	ldrh	r5, [r0, r5]
 8020610:	122f      	asrs	r7, r5, #8
 8020612:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8020616:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802061a:	00ed      	lsls	r5, r5, #3
 802061c:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8020620:	fb17 f704 	smulbb	r7, r7, r4
 8020624:	b2ed      	uxtb	r5, r5
 8020626:	fb1a fa04 	smulbb	sl, sl, r4
 802062a:	fb0e 7e0c 	mla	lr, lr, ip, r7
 802062e:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8020632:	fb15 f504 	smulbb	r5, r5, r4
 8020636:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 802063a:	fa1f fe8e 	uxth.w	lr, lr
 802063e:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020642:	fa5f f989 	uxtb.w	r9, r9
 8020646:	fb07 a70c 	mla	r7, r7, ip, sl
 802064a:	f10e 0401 	add.w	r4, lr, #1
 802064e:	fb09 550c 	mla	r5, r9, ip, r5
 8020652:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8020656:	9c02      	ldr	r4, [sp, #8]
 8020658:	b2ad      	uxth	r5, r5
 802065a:	b2bf      	uxth	r7, r7
 802065c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8020660:	f105 0a01 	add.w	sl, r5, #1
 8020664:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020668:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802066c:	ea4a 0e0e 	orr.w	lr, sl, lr
 8020670:	f107 0a01 	add.w	sl, r7, #1
 8020674:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020678:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802067c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020680:	ea4e 0e0a 	orr.w	lr, lr, sl
 8020684:	f820 e004 	strh.w	lr, [r0, r4]
 8020688:	e7aa      	b.n	80205e0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802068a:	f04f 0900 	mov.w	r9, #0
 802068e:	eba3 0409 	sub.w	r4, r3, r9
 8020692:	2c00      	cmp	r4, #0
 8020694:	f77f af4a 	ble.w	802052c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020698:	1414      	asrs	r4, r2, #16
 802069a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802069e:	140d      	asrs	r5, r1, #16
 80206a0:	fb06 5504 	mla	r5, r6, r4, r5
 80206a4:	9c01      	ldr	r4, [sp, #4]
 80206a6:	5d64      	ldrb	r4, [r4, r5]
 80206a8:	2cff      	cmp	r4, #255	@ 0xff
 80206aa:	d10b      	bne.n	80206c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80206ac:	9c00      	ldr	r4, [sp, #0]
 80206ae:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 80206b2:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 80206b6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80206b8:	f109 0901 	add.w	r9, r9, #1
 80206bc:	4421      	add	r1, r4
 80206be:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80206c0:	4422      	add	r2, r4
 80206c2:	e7e4      	b.n	802068e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80206c4:	2c00      	cmp	r4, #0
 80206c6:	d0f6      	beq.n	80206b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80206c8:	9e00      	ldr	r6, [sp, #0]
 80206ca:	b2a7      	uxth	r7, r4
 80206cc:	43e4      	mvns	r4, r4
 80206ce:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80206d2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 80206d6:	b2e4      	uxtb	r4, r4
 80206d8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80206dc:	122e      	asrs	r6, r5, #8
 80206de:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80206e2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80206e6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80206ea:	00ed      	lsls	r5, r5, #3
 80206ec:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 80206f0:	fb16 f604 	smulbb	r6, r6, r4
 80206f4:	b2ed      	uxtb	r5, r5
 80206f6:	fb1a fa04 	smulbb	sl, sl, r4
 80206fa:	fb0c 6c07 	mla	ip, ip, r7, r6
 80206fe:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020702:	fb15 f504 	smulbb	r5, r5, r4
 8020706:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802070a:	fa1f fc8c 	uxth.w	ip, ip
 802070e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8020712:	fa5f fe8e 	uxtb.w	lr, lr
 8020716:	fb06 a607 	mla	r6, r6, r7, sl
 802071a:	f10c 0401 	add.w	r4, ip, #1
 802071e:	fb0e 5507 	mla	r5, lr, r7, r5
 8020722:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8020726:	b2ad      	uxth	r5, r5
 8020728:	b2b6      	uxth	r6, r6
 802072a:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802072e:	f105 0a01 	add.w	sl, r5, #1
 8020732:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8020736:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802073a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802073e:	f106 0a01 	add.w	sl, r6, #1
 8020742:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020746:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802074a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802074e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8020752:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8020756:	e7ae      	b.n	80206b6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020758:	b005      	add	sp, #20
 802075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802075e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802075e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020762:	b085      	sub	sp, #20
 8020764:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020766:	9203      	str	r2, [sp, #12]
 8020768:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 802076c:	9100      	str	r1, [sp, #0]
 802076e:	9201      	str	r2, [sp, #4]
 8020770:	6841      	ldr	r1, [r0, #4]
 8020772:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 8020776:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 802077a:	fb01 2404 	mla	r4, r1, r4, r2
 802077e:	6802      	ldr	r2, [r0, #0]
 8020780:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020784:	f8de 2000 	ldr.w	r2, [lr]
 8020788:	9202      	str	r2, [sp, #8]
 802078a:	9a01      	ldr	r2, [sp, #4]
 802078c:	43d6      	mvns	r6, r2
 802078e:	b2f6      	uxtb	r6, r6
 8020790:	9a00      	ldr	r2, [sp, #0]
 8020792:	2a00      	cmp	r2, #0
 8020794:	dc03      	bgt.n	802079e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8020796:	9a03      	ldr	r2, [sp, #12]
 8020798:	2a00      	cmp	r2, #0
 802079a:	f340 8124 	ble.w	80209e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 802079e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80207a0:	f9be c008 	ldrsh.w	ip, [lr, #8]
 80207a4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80207a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80207aa:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 80207ae:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	dd0e      	ble.n	80207d4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80207b6:	1408      	asrs	r0, r1, #16
 80207b8:	d405      	bmi.n	80207c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80207ba:	4560      	cmp	r0, ip
 80207bc:	da03      	bge.n	80207c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80207be:	1410      	asrs	r0, r2, #16
 80207c0:	d401      	bmi.n	80207c6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80207c2:	42b8      	cmp	r0, r7
 80207c4:	db07      	blt.n	80207d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80207c6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80207c8:	3b01      	subs	r3, #1
 80207ca:	3402      	adds	r4, #2
 80207cc:	4401      	add	r1, r0
 80207ce:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207d0:	4402      	add	r2, r0
 80207d2:	e7ee      	b.n	80207b2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80207d4:	d06e      	beq.n	80208b4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80207d6:	1e58      	subs	r0, r3, #1
 80207d8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80207da:	fb05 1500 	mla	r5, r5, r0, r1
 80207de:	142d      	asrs	r5, r5, #16
 80207e0:	d45c      	bmi.n	802089c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80207e2:	4565      	cmp	r5, ip
 80207e4:	da5a      	bge.n	802089c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80207e6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80207e8:	fb05 2000 	mla	r0, r5, r0, r2
 80207ec:	1400      	asrs	r0, r0, #16
 80207ee:	d455      	bmi.n	802089c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80207f0:	42b8      	cmp	r0, r7
 80207f2:	da53      	bge.n	802089c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80207f4:	4699      	mov	r9, r3
 80207f6:	46a2      	mov	sl, r4
 80207f8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80207fc:	f1b9 0f00 	cmp.w	r9, #0
 8020800:	dd54      	ble.n	80208ac <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8020802:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8020806:	140d      	asrs	r5, r1, #16
 8020808:	1410      	asrs	r0, r2, #16
 802080a:	f109 39ff 	add.w	r9, r9, #4294967295
 802080e:	fb07 5000 	mla	r0, r7, r0, r5
 8020812:	9d02      	ldr	r5, [sp, #8]
 8020814:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8020818:	f8ba 5000 	ldrh.w	r5, [sl]
 802081c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020820:	122f      	asrs	r7, r5, #8
 8020822:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8020826:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802082a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802082e:	00ed      	lsls	r5, r5, #3
 8020830:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 8020834:	fb17 f706 	smulbb	r7, r7, r6
 8020838:	b2ed      	uxtb	r5, r5
 802083a:	fb18 f806 	smulbb	r8, r8, r6
 802083e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8020842:	10c7      	asrs	r7, r0, #3
 8020844:	fb15 f506 	smulbb	r5, r5, r6
 8020848:	00c0      	lsls	r0, r0, #3
 802084a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802084e:	fa1f fc8c 	uxth.w	ip, ip
 8020852:	b2c0      	uxtb	r0, r0
 8020854:	fb07 870b 	mla	r7, r7, fp, r8
 8020858:	fb00 500b 	mla	r0, r0, fp, r5
 802085c:	f10c 0501 	add.w	r5, ip, #1
 8020860:	b2bf      	uxth	r7, r7
 8020862:	b280      	uxth	r0, r0
 8020864:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8020868:	f107 0801 	add.w	r8, r7, #1
 802086c:	1c45      	adds	r5, r0, #1
 802086e:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8020872:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020876:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802087a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802087c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8020880:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8020884:	4401      	add	r1, r0
 8020886:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802088a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 802088c:	ea45 0c0c 	orr.w	ip, r5, ip
 8020890:	4402      	add	r2, r0
 8020892:	ea4c 0c08 	orr.w	ip, ip, r8
 8020896:	f82a cb02 	strh.w	ip, [sl], #2
 802089a:	e7af      	b.n	80207fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 802089c:	f04f 0800 	mov.w	r8, #0
 80208a0:	f8bd a004 	ldrh.w	sl, [sp, #4]
 80208a4:	eb03 0008 	add.w	r0, r3, r8
 80208a8:	2800      	cmp	r0, #0
 80208aa:	dc41      	bgt.n	8020930 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80208ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80208b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80208b4:	9b00      	ldr	r3, [sp, #0]
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	f340 8095 	ble.w	80209e6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80208bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80208c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80208c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80208ca:	eef0 6a62 	vmov.f32	s13, s5
 80208ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80208d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208da:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 80208de:	eef0 6a43 	vmov.f32	s13, s6
 80208e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80208e6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 80208ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80208ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80208f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80208f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80208fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80208fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020902:	ee12 2a90 	vmov	r2, s5
 8020906:	eef0 2a47 	vmov.f32	s5, s14
 802090a:	fb92 f3f3 	sdiv	r3, r2, r3
 802090e:	ee13 2a10 	vmov	r2, s6
 8020912:	9311      	str	r3, [sp, #68]	@ 0x44
 8020914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020916:	eeb0 3a67 	vmov.f32	s6, s15
 802091a:	fb92 f3f3 	sdiv	r3, r2, r3
 802091e:	9312      	str	r3, [sp, #72]	@ 0x48
 8020920:	9b00      	ldr	r3, [sp, #0]
 8020922:	9a03      	ldr	r2, [sp, #12]
 8020924:	3b01      	subs	r3, #1
 8020926:	9300      	str	r3, [sp, #0]
 8020928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802092a:	bf08      	it	eq
 802092c:	4613      	moveq	r3, r2
 802092e:	e72f      	b.n	8020790 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8020930:	140f      	asrs	r7, r1, #16
 8020932:	d451      	bmi.n	80209d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020934:	f8de 5008 	ldr.w	r5, [lr, #8]
 8020938:	42bd      	cmp	r5, r7
 802093a:	dd4d      	ble.n	80209d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802093c:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020940:	d44a      	bmi.n	80209d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020942:	f8de 000c 	ldr.w	r0, [lr, #12]
 8020946:	4560      	cmp	r0, ip
 8020948:	dd46      	ble.n	80209d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802094a:	b22d      	sxth	r5, r5
 802094c:	9802      	ldr	r0, [sp, #8]
 802094e:	fb0c 7505 	mla	r5, ip, r5, r7
 8020952:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 8020956:	f06f 0501 	mvn.w	r5, #1
 802095a:	fb05 fb08 	mul.w	fp, r5, r8
 802095e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8020962:	f834 500b 	ldrh.w	r5, [r4, fp]
 8020966:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802096a:	122f      	asrs	r7, r5, #8
 802096c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8020970:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8020974:	00ed      	lsls	r5, r5, #3
 8020976:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802097a:	fb17 f706 	smulbb	r7, r7, r6
 802097e:	b2ed      	uxtb	r5, r5
 8020980:	fb19 f906 	smulbb	r9, r9, r6
 8020984:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8020988:	10c7      	asrs	r7, r0, #3
 802098a:	fb15 f506 	smulbb	r5, r5, r6
 802098e:	00c0      	lsls	r0, r0, #3
 8020990:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020994:	fa1f fc8c 	uxth.w	ip, ip
 8020998:	b2c0      	uxtb	r0, r0
 802099a:	fb07 970a 	mla	r7, r7, sl, r9
 802099e:	fb00 500a 	mla	r0, r0, sl, r5
 80209a2:	f10c 0501 	add.w	r5, ip, #1
 80209a6:	b2bf      	uxth	r7, r7
 80209a8:	b280      	uxth	r0, r0
 80209aa:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80209ae:	f107 0901 	add.w	r9, r7, #1
 80209b2:	1c45      	adds	r5, r0, #1
 80209b4:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80209b8:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80209bc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80209c0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80209c4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80209c8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80209cc:	ea45 0c0c 	orr.w	ip, r5, ip
 80209d0:	ea4c 0c09 	orr.w	ip, ip, r9
 80209d4:	f824 c00b 	strh.w	ip, [r4, fp]
 80209d8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80209da:	f108 38ff 	add.w	r8, r8, #4294967295
 80209de:	4401      	add	r1, r0
 80209e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80209e2:	4402      	add	r2, r0
 80209e4:	e75e      	b.n	80208a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80209e6:	b005      	add	sp, #20
 80209e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80209ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209f0:	b085      	sub	sp, #20
 80209f2:	4693      	mov	fp, r2
 80209f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80209f8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80209fa:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80209fc:	6870      	ldr	r0, [r6, #4]
 80209fe:	9101      	str	r1, [sp, #4]
 8020a00:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020a04:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 8020a08:	fb00 2404 	mla	r4, r0, r4, r2
 8020a0c:	6832      	ldr	r2, [r6, #0]
 8020a0e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020a12:	682a      	ldr	r2, [r5, #0]
 8020a14:	9202      	str	r2, [sp, #8]
 8020a16:	9a01      	ldr	r2, [sp, #4]
 8020a18:	2a00      	cmp	r2, #0
 8020a1a:	dc03      	bgt.n	8020a24 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020a1c:	f1bb 0f00 	cmp.w	fp, #0
 8020a20:	f340 809a 	ble.w	8020b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020a24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020a26:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8020a2a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020a2e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020a30:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8020a34:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020a38:	2b00      	cmp	r3, #0
 8020a3a:	dd0c      	ble.n	8020a56 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8020a3c:	1406      	asrs	r6, r0, #16
 8020a3e:	d405      	bmi.n	8020a4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020a40:	454e      	cmp	r6, r9
 8020a42:	da03      	bge.n	8020a4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020a44:	1416      	asrs	r6, r2, #16
 8020a46:	d401      	bmi.n	8020a4c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020a48:	4546      	cmp	r6, r8
 8020a4a:	db05      	blt.n	8020a58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8020a4c:	4470      	add	r0, lr
 8020a4e:	4462      	add	r2, ip
 8020a50:	3b01      	subs	r3, #1
 8020a52:	3402      	adds	r4, #2
 8020a54:	e7f0      	b.n	8020a38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020a56:	d00f      	beq.n	8020a78 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020a58:	1e5e      	subs	r6, r3, #1
 8020a5a:	fb0e 0706 	mla	r7, lr, r6, r0
 8020a5e:	143f      	asrs	r7, r7, #16
 8020a60:	d541      	bpl.n	8020ae6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8020a62:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8020a66:	4698      	mov	r8, r3
 8020a68:	9603      	str	r6, [sp, #12]
 8020a6a:	f1b8 0f00 	cmp.w	r8, #0
 8020a6e:	dc56      	bgt.n	8020b1e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8020a70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020a74:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020a78:	9b01      	ldr	r3, [sp, #4]
 8020a7a:	2b00      	cmp	r3, #0
 8020a7c:	dd6c      	ble.n	8020b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8020a7e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020a82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a84:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020a88:	eeb0 6a62 	vmov.f32	s12, s5
 8020a8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020a90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020a94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020a98:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020a9c:	eeb0 6a43 	vmov.f32	s12, s6
 8020aa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020aa4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020aa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020aac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020ab0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020ab4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020ab8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020abc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ac0:	ee12 2a90 	vmov	r2, s5
 8020ac4:	eef0 2a47 	vmov.f32	s5, s14
 8020ac8:	fb92 fef3 	sdiv	lr, r2, r3
 8020acc:	ee13 2a10 	vmov	r2, s6
 8020ad0:	eeb0 3a67 	vmov.f32	s6, s15
 8020ad4:	fb92 fcf3 	sdiv	ip, r2, r3
 8020ad8:	9b01      	ldr	r3, [sp, #4]
 8020ada:	3b01      	subs	r3, #1
 8020adc:	9301      	str	r3, [sp, #4]
 8020ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ae0:	bf08      	it	eq
 8020ae2:	465b      	moveq	r3, fp
 8020ae4:	e797      	b.n	8020a16 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020ae6:	454f      	cmp	r7, r9
 8020ae8:	dabb      	bge.n	8020a62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020aea:	fb0c 2606 	mla	r6, ip, r6, r2
 8020aee:	1436      	asrs	r6, r6, #16
 8020af0:	d4b7      	bmi.n	8020a62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020af2:	4546      	cmp	r6, r8
 8020af4:	dab5      	bge.n	8020a62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020af6:	461e      	mov	r6, r3
 8020af8:	46a0      	mov	r8, r4
 8020afa:	2e00      	cmp	r6, #0
 8020afc:	ddb8      	ble.n	8020a70 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020afe:	1417      	asrs	r7, r2, #16
 8020b00:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8020b04:	ea4f 4920 	mov.w	r9, r0, asr #16
 8020b08:	9902      	ldr	r1, [sp, #8]
 8020b0a:	4470      	add	r0, lr
 8020b0c:	4462      	add	r2, ip
 8020b0e:	fb0a 9707 	mla	r7, sl, r7, r9
 8020b12:	3e01      	subs	r6, #1
 8020b14:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8020b18:	f828 7b02 	strh.w	r7, [r8], #2
 8020b1c:	e7ed      	b.n	8020afa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8020b1e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8020b22:	d414      	bmi.n	8020b4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020b24:	68ae      	ldr	r6, [r5, #8]
 8020b26:	454e      	cmp	r6, r9
 8020b28:	dd11      	ble.n	8020b4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020b2a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8020b2e:	d40e      	bmi.n	8020b4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020b30:	68ef      	ldr	r7, [r5, #12]
 8020b32:	4557      	cmp	r7, sl
 8020b34:	dd0b      	ble.n	8020b4e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8020b36:	b236      	sxth	r6, r6
 8020b38:	f06f 0101 	mvn.w	r1, #1
 8020b3c:	9f02      	ldr	r7, [sp, #8]
 8020b3e:	fb0a 9606 	mla	r6, sl, r6, r9
 8020b42:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8020b46:	fb01 f608 	mul.w	r6, r1, r8
 8020b4a:	9903      	ldr	r1, [sp, #12]
 8020b4c:	538f      	strh	r7, [r1, r6]
 8020b4e:	4470      	add	r0, lr
 8020b50:	4462      	add	r2, ip
 8020b52:	f108 38ff 	add.w	r8, r8, #4294967295
 8020b56:	e788      	b.n	8020a6a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020b58:	b005      	add	sp, #20
 8020b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020b5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b62:	b087      	sub	sp, #28
 8020b64:	468b      	mov	fp, r1
 8020b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020b6a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020b6c:	9203      	str	r2, [sp, #12]
 8020b6e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020b72:	6841      	ldr	r1, [r0, #4]
 8020b74:	9204      	str	r2, [sp, #16]
 8020b76:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8020b7a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8020b7e:	fb01 2505 	mla	r5, r1, r5, r2
 8020b82:	6802      	ldr	r2, [r0, #0]
 8020b84:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8020b88:	f8d9 2000 	ldr.w	r2, [r9]
 8020b8c:	9201      	str	r2, [sp, #4]
 8020b8e:	f1bb 0f00 	cmp.w	fp, #0
 8020b92:	dc03      	bgt.n	8020b9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020b94:	9a03      	ldr	r2, [sp, #12]
 8020b96:	2a00      	cmp	r2, #0
 8020b98:	f340 8158 	ble.w	8020e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020b9c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020b9e:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8020ba2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020ba6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020ba8:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020bac:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	dd0e      	ble.n	8020bd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8020bb4:	1402      	asrs	r2, r0, #16
 8020bb6:	d405      	bmi.n	8020bc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020bb8:	42ba      	cmp	r2, r7
 8020bba:	da03      	bge.n	8020bc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020bbc:	140a      	asrs	r2, r1, #16
 8020bbe:	d401      	bmi.n	8020bc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020bc0:	42b2      	cmp	r2, r6
 8020bc2:	db07      	blt.n	8020bd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020bc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020bc6:	3b01      	subs	r3, #1
 8020bc8:	3502      	adds	r5, #2
 8020bca:	4410      	add	r0, r2
 8020bcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020bce:	4411      	add	r1, r2
 8020bd0:	e7ee      	b.n	8020bb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020bd2:	d017      	beq.n	8020c04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8020bd4:	1e5a      	subs	r2, r3, #1
 8020bd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020bd8:	fb04 0402 	mla	r4, r4, r2, r0
 8020bdc:	1424      	asrs	r4, r4, #16
 8020bde:	d409      	bmi.n	8020bf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020be0:	42bc      	cmp	r4, r7
 8020be2:	da07      	bge.n	8020bf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020be4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020be6:	fb04 1202 	mla	r2, r4, r2, r1
 8020bea:	1412      	asrs	r2, r2, #16
 8020bec:	d402      	bmi.n	8020bf4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020bee:	42b2      	cmp	r2, r6
 8020bf0:	f2c0 80bf 	blt.w	8020d72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8020bf4:	2700      	movs	r7, #0
 8020bf6:	19da      	adds	r2, r3, r7
 8020bf8:	2a00      	cmp	r2, #0
 8020bfa:	dc3e      	bgt.n	8020c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8020bfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020c00:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020c04:	f1bb 0f00 	cmp.w	fp, #0
 8020c08:	f340 8120 	ble.w	8020e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8020c0c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020c10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c12:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020c16:	f1bb 0b01 	subs.w	fp, fp, #1
 8020c1a:	eeb0 6a62 	vmov.f32	s12, s5
 8020c1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020c22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020c26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c2a:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020c2e:	eeb0 6a43 	vmov.f32	s12, s6
 8020c32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020c36:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8020c3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020c3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020c42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020c46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020c4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020c4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020c52:	ee12 2a90 	vmov	r2, s5
 8020c56:	eef0 2a47 	vmov.f32	s5, s14
 8020c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c5e:	ee13 2a10 	vmov	r2, s6
 8020c62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020c64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c66:	eeb0 3a67 	vmov.f32	s6, s15
 8020c6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020c6e:	9a03      	ldr	r2, [sp, #12]
 8020c70:	9314      	str	r3, [sp, #80]	@ 0x50
 8020c72:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c74:	bf08      	it	eq
 8020c76:	4613      	moveq	r3, r2
 8020c78:	e789      	b.n	8020b8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8020c7a:	1406      	asrs	r6, r0, #16
 8020c7c:	d42d      	bmi.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c7e:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8020c82:	42b4      	cmp	r4, r6
 8020c84:	dd29      	ble.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c86:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8020c8a:	d426      	bmi.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c8c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020c90:	4562      	cmp	r2, ip
 8020c92:	dd22      	ble.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020c94:	b224      	sxth	r4, r4
 8020c96:	9a01      	ldr	r2, [sp, #4]
 8020c98:	fb0c 6404 	mla	r4, ip, r4, r6
 8020c9c:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8020ca0:	0e22      	lsrs	r2, r4, #24
 8020ca2:	d01a      	beq.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020ca4:	9e04      	ldr	r6, [sp, #16]
 8020ca6:	4372      	muls	r2, r6
 8020ca8:	1c56      	adds	r6, r2, #1
 8020caa:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020cae:	0a26      	lsrs	r6, r4, #8
 8020cb0:	1212      	asrs	r2, r2, #8
 8020cb2:	9605      	str	r6, [sp, #20]
 8020cb4:	2aff      	cmp	r2, #255	@ 0xff
 8020cb6:	d116      	bne.n	8020ce6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020cb8:	f06f 0201 	mvn.w	r2, #1
 8020cbc:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020cc0:	fb02 fc07 	mul.w	ip, r2, r7
 8020cc4:	0962      	lsrs	r2, r4, #5
 8020cc6:	f026 0607 	bic.w	r6, r6, #7
 8020cca:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020cce:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020cd2:	4316      	orrs	r6, r2
 8020cd4:	4326      	orrs	r6, r4
 8020cd6:	f825 600c 	strh.w	r6, [r5, ip]
 8020cda:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020cdc:	3f01      	subs	r7, #1
 8020cde:	4410      	add	r0, r2
 8020ce0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020ce2:	4411      	add	r1, r2
 8020ce4:	e787      	b.n	8020bf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020ce6:	f06f 0601 	mvn.w	r6, #1
 8020cea:	fa1f fa82 	uxth.w	sl, r2
 8020cee:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8020cf2:	43d2      	mvns	r2, r2
 8020cf4:	437e      	muls	r6, r7
 8020cf6:	b2e4      	uxtb	r4, r4
 8020cf8:	fb1c fc0a 	smulbb	ip, ip, sl
 8020cfc:	b2d2      	uxtb	r2, r2
 8020cfe:	f835 8006 	ldrh.w	r8, [r5, r6]
 8020d02:	fb14 f40a 	smulbb	r4, r4, sl
 8020d06:	9602      	str	r6, [sp, #8]
 8020d08:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020d0c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8020d10:	fb16 f60a 	smulbb	r6, r6, sl
 8020d14:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8020d18:	fb0e ce02 	mla	lr, lr, r2, ip
 8020d1c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020d20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020d24:	fa1f fe8e 	uxth.w	lr, lr
 8020d28:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8020d2c:	fa5f f888 	uxtb.w	r8, r8
 8020d30:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020d34:	fb08 4402 	mla	r4, r8, r2, r4
 8020d38:	f10e 0201 	add.w	r2, lr, #1
 8020d3c:	fa1f fc8c 	uxth.w	ip, ip
 8020d40:	b2a4      	uxth	r4, r4
 8020d42:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020d46:	9a02      	ldr	r2, [sp, #8]
 8020d48:	1c66      	adds	r6, r4, #1
 8020d4a:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8020d4e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020d52:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020d56:	ea46 0e0e 	orr.w	lr, r6, lr
 8020d5a:	f10c 0601 	add.w	r6, ip, #1
 8020d5e:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8020d62:	0976      	lsrs	r6, r6, #5
 8020d64:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020d68:	ea4e 0e06 	orr.w	lr, lr, r6
 8020d6c:	f825 e002 	strh.w	lr, [r5, r2]
 8020d70:	e7b3      	b.n	8020cda <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8020d72:	f04f 0800 	mov.w	r8, #0
 8020d76:	eba3 0208 	sub.w	r2, r3, r8
 8020d7a:	2a00      	cmp	r2, #0
 8020d7c:	f77f af3e 	ble.w	8020bfc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8020d80:	1404      	asrs	r4, r0, #16
 8020d82:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8020d86:	140a      	asrs	r2, r1, #16
 8020d88:	fb06 4202 	mla	r2, r6, r2, r4
 8020d8c:	9c01      	ldr	r4, [sp, #4]
 8020d8e:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8020d92:	0e22      	lsrs	r2, r4, #24
 8020d94:	d015      	beq.n	8020dc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020d96:	9e04      	ldr	r6, [sp, #16]
 8020d98:	4372      	muls	r2, r6
 8020d9a:	1c56      	adds	r6, r2, #1
 8020d9c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8020da0:	0a26      	lsrs	r6, r4, #8
 8020da2:	1212      	asrs	r2, r2, #8
 8020da4:	2aff      	cmp	r2, #255	@ 0xff
 8020da6:	d113      	bne.n	8020dd0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020da8:	0962      	lsrs	r2, r4, #5
 8020daa:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8020dae:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020db2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8020db6:	f026 0607 	bic.w	r6, r6, #7
 8020dba:	4316      	orrs	r6, r2
 8020dbc:	4326      	orrs	r6, r4
 8020dbe:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8020dc2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8020dc4:	f108 0801 	add.w	r8, r8, #1
 8020dc8:	4410      	add	r0, r2
 8020dca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020dcc:	4411      	add	r1, r2
 8020dce:	e7d2      	b.n	8020d76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020dd0:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8020dd4:	fa1f fa82 	uxth.w	sl, r2
 8020dd8:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8020ddc:	43d2      	mvns	r2, r2
 8020dde:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020de2:	fb17 f70a 	smulbb	r7, r7, sl
 8020de6:	b2d2      	uxtb	r2, r2
 8020de8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020dec:	b2e4      	uxtb	r4, r4
 8020dee:	b2f6      	uxtb	r6, r6
 8020df0:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020df4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020df8:	fb14 f40a 	smulbb	r4, r4, sl
 8020dfc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020e00:	fa1f fc8c 	uxth.w	ip, ip
 8020e04:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8020e08:	fb16 f60a 	smulbb	r6, r6, sl
 8020e0c:	fa5f fe8e 	uxtb.w	lr, lr
 8020e10:	fb0e 4402 	mla	r4, lr, r2, r4
 8020e14:	fb07 6702 	mla	r7, r7, r2, r6
 8020e18:	f10c 0201 	add.w	r2, ip, #1
 8020e1c:	b2a4      	uxth	r4, r4
 8020e1e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020e22:	1c66      	adds	r6, r4, #1
 8020e24:	b2bf      	uxth	r7, r7
 8020e26:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020e2a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8020e2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020e32:	ea46 0c0c 	orr.w	ip, r6, ip
 8020e36:	1c7e      	adds	r6, r7, #1
 8020e38:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020e3c:	0976      	lsrs	r6, r6, #5
 8020e3e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020e42:	ea4c 0c06 	orr.w	ip, ip, r6
 8020e46:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8020e4a:	e7ba      	b.n	8020dc2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8020e4c:	b007      	add	sp, #28
 8020e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020e54 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e58:	b085      	sub	sp, #20
 8020e5a:	468b      	mov	fp, r1
 8020e5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020e60:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8020e62:	9203      	str	r2, [sp, #12]
 8020e64:	6841      	ldr	r1, [r0, #4]
 8020e66:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020e6a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8020e6e:	fb01 2404 	mla	r4, r1, r4, r2
 8020e72:	6802      	ldr	r2, [r0, #0]
 8020e74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8020e78:	f8d8 2000 	ldr.w	r2, [r8]
 8020e7c:	9201      	str	r2, [sp, #4]
 8020e7e:	f1bb 0f00 	cmp.w	fp, #0
 8020e82:	dc03      	bgt.n	8020e8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020e84:	9a03      	ldr	r2, [sp, #12]
 8020e86:	2a00      	cmp	r2, #0
 8020e88:	f340 814f 	ble.w	802112a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020e8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020e8e:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8020e92:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8020e96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8020e98:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8020e9c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	dd0e      	ble.n	8020ec2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8020ea4:	1408      	asrs	r0, r1, #16
 8020ea6:	d405      	bmi.n	8020eb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020ea8:	42b8      	cmp	r0, r7
 8020eaa:	da03      	bge.n	8020eb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020eac:	1410      	asrs	r0, r2, #16
 8020eae:	d401      	bmi.n	8020eb4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8020eb0:	42b0      	cmp	r0, r6
 8020eb2:	db07      	blt.n	8020ec4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020eb4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020eb6:	3b01      	subs	r3, #1
 8020eb8:	3402      	adds	r4, #2
 8020eba:	4401      	add	r1, r0
 8020ebc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020ebe:	4402      	add	r2, r0
 8020ec0:	e7ee      	b.n	8020ea0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020ec2:	d017      	beq.n	8020ef4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020ec4:	1e58      	subs	r0, r3, #1
 8020ec6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8020ec8:	fb05 1500 	mla	r5, r5, r0, r1
 8020ecc:	142d      	asrs	r5, r5, #16
 8020ece:	d409      	bmi.n	8020ee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020ed0:	42bd      	cmp	r5, r7
 8020ed2:	da07      	bge.n	8020ee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020ed4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8020ed6:	fb05 2000 	mla	r0, r5, r0, r2
 8020eda:	1400      	asrs	r0, r0, #16
 8020edc:	d402      	bmi.n	8020ee4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020ede:	42b0      	cmp	r0, r6
 8020ee0:	f2c0 80ba 	blt.w	8021058 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8020ee4:	2600      	movs	r6, #0
 8020ee6:	1998      	adds	r0, r3, r6
 8020ee8:	2800      	cmp	r0, #0
 8020eea:	dc3e      	bgt.n	8020f6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8020eec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020ef0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020ef4:	f1bb 0f00 	cmp.w	fp, #0
 8020ef8:	f340 8117 	ble.w	802112a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8020efc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020f06:	f1bb 0b01 	subs.w	fp, fp, #1
 8020f0a:	eeb0 6a62 	vmov.f32	s12, s5
 8020f0e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020f12:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020f16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f1a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8020f1e:	eeb0 6a43 	vmov.f32	s12, s6
 8020f22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020f26:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020f2a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020f2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020f32:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020f36:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f3a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020f3e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f42:	ee12 2a90 	vmov	r2, s5
 8020f46:	eef0 2a47 	vmov.f32	s5, s14
 8020f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f4e:	ee13 2a10 	vmov	r2, s6
 8020f52:	9311      	str	r3, [sp, #68]	@ 0x44
 8020f54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f56:	eeb0 3a67 	vmov.f32	s6, s15
 8020f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f5e:	9a03      	ldr	r2, [sp, #12]
 8020f60:	9312      	str	r3, [sp, #72]	@ 0x48
 8020f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f64:	bf08      	it	eq
 8020f66:	4613      	moveq	r3, r2
 8020f68:	e789      	b.n	8020e7e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020f6a:	140f      	asrs	r7, r1, #16
 8020f6c:	d424      	bmi.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f6e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8020f72:	42bd      	cmp	r5, r7
 8020f74:	dd20      	ble.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f76:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8020f7a:	d41d      	bmi.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f7c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020f80:	4560      	cmp	r0, ip
 8020f82:	dd19      	ble.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020f84:	b22d      	sxth	r5, r5
 8020f86:	9801      	ldr	r0, [sp, #4]
 8020f88:	fb0c 7505 	mla	r5, ip, r5, r7
 8020f8c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8020f90:	0e07      	lsrs	r7, r0, #24
 8020f92:	2fff      	cmp	r7, #255	@ 0xff
 8020f94:	d116      	bne.n	8020fc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8020f96:	f06f 0501 	mvn.w	r5, #1
 8020f9a:	fb05 f706 	mul.w	r7, r5, r6
 8020f9e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 8020fa2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8020fa6:	0945      	lsrs	r5, r0, #5
 8020fa8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8020fac:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020fb0:	ea4c 0505 	orr.w	r5, ip, r5
 8020fb4:	4305      	orrs	r5, r0
 8020fb6:	53e5      	strh	r5, [r4, r7]
 8020fb8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8020fba:	3e01      	subs	r6, #1
 8020fbc:	4401      	add	r1, r0
 8020fbe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020fc0:	4402      	add	r2, r0
 8020fc2:	e790      	b.n	8020ee6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020fc4:	b2fd      	uxtb	r5, r7
 8020fc6:	2f00      	cmp	r7, #0
 8020fc8:	d0f6      	beq.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020fca:	f06f 0701 	mvn.w	r7, #1
 8020fce:	fa1f f985 	uxth.w	r9, r5
 8020fd2:	43ed      	mvns	r5, r5
 8020fd4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8020fd8:	4377      	muls	r7, r6
 8020fda:	fb1a fa09 	smulbb	sl, sl, r9
 8020fde:	b2ed      	uxtb	r5, r5
 8020fe0:	f834 e007 	ldrh.w	lr, [r4, r7]
 8020fe4:	9702      	str	r7, [sp, #8]
 8020fe6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8020fea:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020fee:	fb17 f709 	smulbb	r7, r7, r9
 8020ff2:	b2c0      	uxtb	r0, r0
 8020ff4:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020ff8:	fb10 f009 	smulbb	r0, r0, r9
 8020ffc:	fb0c 7c05 	mla	ip, ip, r5, r7
 8021000:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8021004:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021008:	fa1f fc8c 	uxth.w	ip, ip
 802100c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8021010:	fa5f fe8e 	uxtb.w	lr, lr
 8021014:	fb07 a705 	mla	r7, r7, r5, sl
 8021018:	fb0e 0005 	mla	r0, lr, r5, r0
 802101c:	f10c 0501 	add.w	r5, ip, #1
 8021020:	b2bf      	uxth	r7, r7
 8021022:	b280      	uxth	r0, r0
 8021024:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021028:	f100 0a01 	add.w	sl, r0, #1
 802102c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021030:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8021034:	9802      	ldr	r0, [sp, #8]
 8021036:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802103a:	ea4a 0c0c 	orr.w	ip, sl, ip
 802103e:	f107 0a01 	add.w	sl, r7, #1
 8021042:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021046:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802104a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802104e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8021052:	f824 c000 	strh.w	ip, [r4, r0]
 8021056:	e7af      	b.n	8020fb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021058:	f04f 0e00 	mov.w	lr, #0
 802105c:	eba3 000e 	sub.w	r0, r3, lr
 8021060:	2800      	cmp	r0, #0
 8021062:	f77f af43 	ble.w	8020eec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8021066:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802106a:	140d      	asrs	r5, r1, #16
 802106c:	1410      	asrs	r0, r2, #16
 802106e:	fb06 5000 	mla	r0, r6, r0, r5
 8021072:	9d01      	ldr	r5, [sp, #4]
 8021074:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8021078:	0e2e      	lsrs	r6, r5, #24
 802107a:	2eff      	cmp	r6, #255	@ 0xff
 802107c:	d112      	bne.n	80210a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802107e:	482c      	ldr	r0, [pc, #176]	@ (8021130 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8021080:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8021084:	0968      	lsrs	r0, r5, #5
 8021086:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802108a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802108e:	4330      	orrs	r0, r6
 8021090:	4328      	orrs	r0, r5
 8021092:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 8021096:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8021098:	f10e 0e01 	add.w	lr, lr, #1
 802109c:	4401      	add	r1, r0
 802109e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80210a0:	4402      	add	r2, r0
 80210a2:	e7db      	b.n	802105c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80210a4:	b2f0      	uxtb	r0, r6
 80210a6:	2e00      	cmp	r6, #0
 80210a8:	d0f5      	beq.n	8021096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80210aa:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80210ae:	fa1f f980 	uxth.w	r9, r0
 80210b2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80210b6:	43c0      	mvns	r0, r0
 80210b8:	ea4f 272c 	mov.w	r7, ip, asr #8
 80210bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80210c0:	fb16 f609 	smulbb	r6, r6, r9
 80210c4:	b2c0      	uxtb	r0, r0
 80210c6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80210ca:	b2ed      	uxtb	r5, r5
 80210cc:	fb1a fa09 	smulbb	sl, sl, r9
 80210d0:	fb07 6700 	mla	r7, r7, r0, r6
 80210d4:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80210d8:	fb15 f509 	smulbb	r5, r5, r9
 80210dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80210e0:	b2bf      	uxth	r7, r7
 80210e2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80210e6:	fa5f fc8c 	uxtb.w	ip, ip
 80210ea:	fb06 a600 	mla	r6, r6, r0, sl
 80210ee:	fb0c 5500 	mla	r5, ip, r0, r5
 80210f2:	1c78      	adds	r0, r7, #1
 80210f4:	b2b6      	uxth	r6, r6
 80210f6:	b2ad      	uxth	r5, r5
 80210f8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80210fc:	f105 0a01 	add.w	sl, r5, #1
 8021100:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021104:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021108:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802110c:	ea4a 0707 	orr.w	r7, sl, r7
 8021110:	f106 0a01 	add.w	sl, r6, #1
 8021114:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021118:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802111c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021120:	ea47 070a 	orr.w	r7, r7, sl
 8021124:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8021128:	e7b5      	b.n	8021096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802112a:	b005      	add	sp, #20
 802112c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021130:	fffff800 	.word	0xfffff800

08021134 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021138:	b087      	sub	sp, #28
 802113a:	468b      	mov	fp, r1
 802113c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021140:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8021142:	9203      	str	r2, [sp, #12]
 8021144:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021148:	6841      	ldr	r1, [r0, #4]
 802114a:	9204      	str	r2, [sp, #16]
 802114c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 8021150:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 8021154:	fb01 2404 	mla	r4, r1, r4, r2
 8021158:	6802      	ldr	r2, [r0, #0]
 802115a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802115e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021162:	3201      	adds	r2, #1
 8021164:	f022 0201 	bic.w	r2, r2, #1
 8021168:	9200      	str	r2, [sp, #0]
 802116a:	f8d9 2000 	ldr.w	r2, [r9]
 802116e:	9201      	str	r2, [sp, #4]
 8021170:	f1bb 0f00 	cmp.w	fp, #0
 8021174:	dc03      	bgt.n	802117e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021176:	9a03      	ldr	r2, [sp, #12]
 8021178:	2a00      	cmp	r2, #0
 802117a:	f340 816a 	ble.w	8021452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802117e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021180:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8021184:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8021188:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802118a:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802118e:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 8021192:	2b00      	cmp	r3, #0
 8021194:	dd0e      	ble.n	80211b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021196:	1402      	asrs	r2, r0, #16
 8021198:	d405      	bmi.n	80211a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802119a:	42ba      	cmp	r2, r7
 802119c:	da03      	bge.n	80211a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802119e:	140a      	asrs	r2, r1, #16
 80211a0:	d401      	bmi.n	80211a6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80211a2:	42b2      	cmp	r2, r6
 80211a4:	db07      	blt.n	80211b6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80211a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80211a8:	3b01      	subs	r3, #1
 80211aa:	3402      	adds	r4, #2
 80211ac:	4410      	add	r0, r2
 80211ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80211b0:	4411      	add	r1, r2
 80211b2:	e7ee      	b.n	8021192 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80211b4:	d017      	beq.n	80211e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80211b6:	1e5a      	subs	r2, r3, #1
 80211b8:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80211ba:	fb05 0502 	mla	r5, r5, r2, r0
 80211be:	142d      	asrs	r5, r5, #16
 80211c0:	d409      	bmi.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80211c2:	42bd      	cmp	r5, r7
 80211c4:	da07      	bge.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80211c6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80211c8:	fb05 1202 	mla	r2, r5, r2, r1
 80211cc:	1412      	asrs	r2, r2, #16
 80211ce:	d402      	bmi.n	80211d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80211d0:	42b2      	cmp	r2, r6
 80211d2:	f2c0 80c8 	blt.w	8021366 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80211d6:	2700      	movs	r7, #0
 80211d8:	19da      	adds	r2, r3, r7
 80211da:	2a00      	cmp	r2, #0
 80211dc:	dc3e      	bgt.n	802125c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80211de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80211e2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80211e6:	f1bb 0f00 	cmp.w	fp, #0
 80211ea:	f340 8132 	ble.w	8021452 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80211ee:	ee30 0a04 	vadd.f32	s0, s0, s8
 80211f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80211f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80211f8:	f1bb 0b01 	subs.w	fp, fp, #1
 80211fc:	eeb0 6a62 	vmov.f32	s12, s5
 8021200:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021204:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021208:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802120c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8021210:	eeb0 6a43 	vmov.f32	s12, s6
 8021214:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021218:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802121c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021220:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021224:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021228:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802122c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021230:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021234:	ee12 2a90 	vmov	r2, s5
 8021238:	eef0 2a47 	vmov.f32	s5, s14
 802123c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021240:	ee13 2a10 	vmov	r2, s6
 8021244:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021248:	eeb0 3a67 	vmov.f32	s6, s15
 802124c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021250:	9a03      	ldr	r2, [sp, #12]
 8021252:	9314      	str	r3, [sp, #80]	@ 0x50
 8021254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8021256:	bf08      	it	eq
 8021258:	4613      	moveq	r3, r2
 802125a:	e789      	b.n	8021170 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802125c:	1405      	asrs	r5, r0, #16
 802125e:	d436      	bmi.n	80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021260:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8021264:	42aa      	cmp	r2, r5
 8021266:	dd32      	ble.n	80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021268:	140e      	asrs	r6, r1, #16
 802126a:	d430      	bmi.n	80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802126c:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8021270:	42b2      	cmp	r2, r6
 8021272:	dd2c      	ble.n	80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021274:	9a00      	ldr	r2, [sp, #0]
 8021276:	fb06 5502 	mla	r5, r6, r2, r5
 802127a:	9e01      	ldr	r6, [sp, #4]
 802127c:	086a      	lsrs	r2, r5, #1
 802127e:	5cb2      	ldrb	r2, [r6, r2]
 8021280:	07ee      	lsls	r6, r5, #31
 8021282:	bf54      	ite	pl
 8021284:	f002 020f 	andpl.w	r2, r2, #15
 8021288:	1112      	asrmi	r2, r2, #4
 802128a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802128e:	b2d2      	uxtb	r2, r2
 8021290:	b1ea      	cbz	r2, 80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021292:	9d04      	ldr	r5, [sp, #16]
 8021294:	436a      	muls	r2, r5
 8021296:	1c55      	adds	r5, r2, #1
 8021298:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802129c:	4d6e      	ldr	r5, [pc, #440]	@ (8021458 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802129e:	1212      	asrs	r2, r2, #8
 80212a0:	682d      	ldr	r5, [r5, #0]
 80212a2:	2aff      	cmp	r2, #255	@ 0xff
 80212a4:	ea4f 2615 	mov.w	r6, r5, lsr #8
 80212a8:	9605      	str	r6, [sp, #20]
 80212aa:	d116      	bne.n	80212da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80212ac:	f06f 0201 	mvn.w	r2, #1
 80212b0:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 80212b4:	fb02 fc07 	mul.w	ip, r2, r7
 80212b8:	096a      	lsrs	r2, r5, #5
 80212ba:	f026 0607 	bic.w	r6, r6, #7
 80212be:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80212c2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80212c6:	4316      	orrs	r6, r2
 80212c8:	432e      	orrs	r6, r5
 80212ca:	f824 600c 	strh.w	r6, [r4, ip]
 80212ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80212d0:	3f01      	subs	r7, #1
 80212d2:	4410      	add	r0, r2
 80212d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80212d6:	4411      	add	r1, r2
 80212d8:	e77e      	b.n	80211d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 80212da:	f06f 0601 	mvn.w	r6, #1
 80212de:	fa1f fa82 	uxth.w	sl, r2
 80212e2:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 80212e6:	43d2      	mvns	r2, r2
 80212e8:	437e      	muls	r6, r7
 80212ea:	b2ed      	uxtb	r5, r5
 80212ec:	fb1c fc0a 	smulbb	ip, ip, sl
 80212f0:	b2d2      	uxtb	r2, r2
 80212f2:	f834 8006 	ldrh.w	r8, [r4, r6]
 80212f6:	fb15 f50a 	smulbb	r5, r5, sl
 80212fa:	9602      	str	r6, [sp, #8]
 80212fc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8021300:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8021304:	fb16 f60a 	smulbb	r6, r6, sl
 8021308:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802130c:	fb0e ce02 	mla	lr, lr, r2, ip
 8021310:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8021314:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8021318:	fa1f fe8e 	uxth.w	lr, lr
 802131c:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8021320:	fa5f f888 	uxtb.w	r8, r8
 8021324:	fb0c 6c02 	mla	ip, ip, r2, r6
 8021328:	fb08 5502 	mla	r5, r8, r2, r5
 802132c:	f10e 0201 	add.w	r2, lr, #1
 8021330:	fa1f fc8c 	uxth.w	ip, ip
 8021334:	b2ad      	uxth	r5, r5
 8021336:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 802133a:	9a02      	ldr	r2, [sp, #8]
 802133c:	1c6e      	adds	r6, r5, #1
 802133e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8021342:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8021346:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802134a:	ea46 0e0e 	orr.w	lr, r6, lr
 802134e:	f10c 0601 	add.w	r6, ip, #1
 8021352:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8021356:	0976      	lsrs	r6, r6, #5
 8021358:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802135c:	ea4e 0e06 	orr.w	lr, lr, r6
 8021360:	f824 e002 	strh.w	lr, [r4, r2]
 8021364:	e7b3      	b.n	80212ce <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8021366:	f04f 0800 	mov.w	r8, #0
 802136a:	eba3 0208 	sub.w	r2, r3, r8
 802136e:	2a00      	cmp	r2, #0
 8021370:	f77f af35 	ble.w	80211de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8021374:	1402      	asrs	r2, r0, #16
 8021376:	9e00      	ldr	r6, [sp, #0]
 8021378:	140d      	asrs	r5, r1, #16
 802137a:	fb06 2505 	mla	r5, r6, r5, r2
 802137e:	9e01      	ldr	r6, [sp, #4]
 8021380:	086a      	lsrs	r2, r5, #1
 8021382:	07ed      	lsls	r5, r5, #31
 8021384:	5cb2      	ldrb	r2, [r6, r2]
 8021386:	bf54      	ite	pl
 8021388:	f002 020f 	andpl.w	r2, r2, #15
 802138c:	1112      	asrmi	r2, r2, #4
 802138e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021392:	b2d2      	uxtb	r2, r2
 8021394:	b1c2      	cbz	r2, 80213c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021396:	9d04      	ldr	r5, [sp, #16]
 8021398:	436a      	muls	r2, r5
 802139a:	1c55      	adds	r5, r2, #1
 802139c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 80213a0:	4d2d      	ldr	r5, [pc, #180]	@ (8021458 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 80213a2:	1212      	asrs	r2, r2, #8
 80213a4:	682e      	ldr	r6, [r5, #0]
 80213a6:	2aff      	cmp	r2, #255	@ 0xff
 80213a8:	ea4f 2516 	mov.w	r5, r6, lsr #8
 80213ac:	d113      	bne.n	80213d6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80213ae:	0972      	lsrs	r2, r6, #5
 80213b0:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 80213b4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80213b8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80213bc:	f025 0507 	bic.w	r5, r5, #7
 80213c0:	4315      	orrs	r5, r2
 80213c2:	4335      	orrs	r5, r6
 80213c4:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80213c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80213ca:	f108 0801 	add.w	r8, r8, #1
 80213ce:	4410      	add	r0, r2
 80213d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80213d2:	4411      	add	r1, r2
 80213d4:	e7c9      	b.n	802136a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80213d6:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80213da:	fa1f fa82 	uxth.w	sl, r2
 80213de:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80213e2:	43d2      	mvns	r2, r2
 80213e4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80213e8:	fb17 f70a 	smulbb	r7, r7, sl
 80213ec:	b2d2      	uxtb	r2, r2
 80213ee:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80213f2:	b2f6      	uxtb	r6, r6
 80213f4:	b2ed      	uxtb	r5, r5
 80213f6:	fb0c 7c02 	mla	ip, ip, r2, r7
 80213fa:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80213fe:	fb16 f60a 	smulbb	r6, r6, sl
 8021402:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021406:	fa1f fc8c 	uxth.w	ip, ip
 802140a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 802140e:	fb15 f50a 	smulbb	r5, r5, sl
 8021412:	fa5f fe8e 	uxtb.w	lr, lr
 8021416:	fb0e 6602 	mla	r6, lr, r2, r6
 802141a:	fb07 5702 	mla	r7, r7, r2, r5
 802141e:	f10c 0201 	add.w	r2, ip, #1
 8021422:	b2b6      	uxth	r6, r6
 8021424:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021428:	1c75      	adds	r5, r6, #1
 802142a:	b2bf      	uxth	r7, r7
 802142c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8021430:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8021434:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021438:	ea45 0c0c 	orr.w	ip, r5, ip
 802143c:	1c7d      	adds	r5, r7, #1
 802143e:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8021442:	096d      	lsrs	r5, r5, #5
 8021444:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021448:	ea4c 0c05 	orr.w	ip, ip, r5
 802144c:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8021450:	e7ba      	b.n	80213c8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8021452:	b007      	add	sp, #28
 8021454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021458:	2400b8d4 	.word	0x2400b8d4

0802145c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021460:	b087      	sub	sp, #28
 8021462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021466:	f8df 8308 	ldr.w	r8, [pc, #776]	@ 8021770 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 802146a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802146c:	9101      	str	r1, [sp, #4]
 802146e:	9205      	str	r2, [sp, #20]
 8021470:	6841      	ldr	r1, [r0, #4]
 8021472:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8021476:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 802147a:	fb01 2404 	mla	r4, r1, r4, r2
 802147e:	6802      	ldr	r2, [r0, #0]
 8021480:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021484:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021488:	3201      	adds	r2, #1
 802148a:	f022 0201 	bic.w	r2, r2, #1
 802148e:	9202      	str	r2, [sp, #8]
 8021490:	f8db 2000 	ldr.w	r2, [fp]
 8021494:	9203      	str	r2, [sp, #12]
 8021496:	9a01      	ldr	r2, [sp, #4]
 8021498:	2a00      	cmp	r2, #0
 802149a:	dc03      	bgt.n	80214a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802149c:	9a05      	ldr	r2, [sp, #20]
 802149e:	2a00      	cmp	r2, #0
 80214a0:	f340 8162 	ble.w	8021768 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80214a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80214a6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80214aa:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80214ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80214b0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80214b4:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80214b8:	2b00      	cmp	r3, #0
 80214ba:	dd0e      	ble.n	80214da <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80214bc:	1402      	asrs	r2, r0, #16
 80214be:	d405      	bmi.n	80214cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80214c0:	42ba      	cmp	r2, r7
 80214c2:	da03      	bge.n	80214cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80214c4:	140a      	asrs	r2, r1, #16
 80214c6:	d401      	bmi.n	80214cc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80214c8:	42b2      	cmp	r2, r6
 80214ca:	db07      	blt.n	80214dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80214cc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80214ce:	3b01      	subs	r3, #1
 80214d0:	3402      	adds	r4, #2
 80214d2:	4410      	add	r0, r2
 80214d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80214d6:	4411      	add	r1, r2
 80214d8:	e7ee      	b.n	80214b8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80214da:	d017      	beq.n	802150c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80214dc:	1e5a      	subs	r2, r3, #1
 80214de:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80214e0:	fb05 0502 	mla	r5, r5, r2, r0
 80214e4:	142d      	asrs	r5, r5, #16
 80214e6:	d409      	bmi.n	80214fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80214e8:	42bd      	cmp	r5, r7
 80214ea:	da07      	bge.n	80214fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80214ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80214ee:	fb05 1202 	mla	r2, r5, r2, r1
 80214f2:	1412      	asrs	r2, r2, #16
 80214f4:	d402      	bmi.n	80214fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80214f6:	42b2      	cmp	r2, r6
 80214f8:	f2c0 80c3 	blt.w	8021682 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80214fc:	2500      	movs	r5, #0
 80214fe:	195a      	adds	r2, r3, r5
 8021500:	2a00      	cmp	r2, #0
 8021502:	dc3f      	bgt.n	8021584 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8021504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021508:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802150c:	9b01      	ldr	r3, [sp, #4]
 802150e:	2b00      	cmp	r3, #0
 8021510:	f340 812a 	ble.w	8021768 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8021514:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802151a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802151e:	eeb0 6a62 	vmov.f32	s12, s5
 8021522:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021526:	ee31 1a05 	vadd.f32	s2, s2, s10
 802152a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802152e:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8021532:	eeb0 6a43 	vmov.f32	s12, s6
 8021536:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802153a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802153e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021542:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021546:	ee77 2a62 	vsub.f32	s5, s14, s5
 802154a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802154e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021552:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021556:	ee12 2a90 	vmov	r2, s5
 802155a:	eef0 2a47 	vmov.f32	s5, s14
 802155e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021562:	ee13 2a10 	vmov	r2, s6
 8021566:	9313      	str	r3, [sp, #76]	@ 0x4c
 8021568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802156a:	eeb0 3a67 	vmov.f32	s6, s15
 802156e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021572:	9314      	str	r3, [sp, #80]	@ 0x50
 8021574:	9b01      	ldr	r3, [sp, #4]
 8021576:	9a05      	ldr	r2, [sp, #20]
 8021578:	3b01      	subs	r3, #1
 802157a:	9301      	str	r3, [sp, #4]
 802157c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802157e:	bf08      	it	eq
 8021580:	4613      	moveq	r3, r2
 8021582:	e788      	b.n	8021496 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021584:	1406      	asrs	r6, r0, #16
 8021586:	d42c      	bmi.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021588:	f8db 2008 	ldr.w	r2, [fp, #8]
 802158c:	42b2      	cmp	r2, r6
 802158e:	dd28      	ble.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021590:	140f      	asrs	r7, r1, #16
 8021592:	d426      	bmi.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021594:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021598:	42ba      	cmp	r2, r7
 802159a:	dd22      	ble.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802159c:	9a02      	ldr	r2, [sp, #8]
 802159e:	fb07 6602 	mla	r6, r7, r2, r6
 80215a2:	9f03      	ldr	r7, [sp, #12]
 80215a4:	0872      	lsrs	r2, r6, #1
 80215a6:	07f6      	lsls	r6, r6, #31
 80215a8:	5cba      	ldrb	r2, [r7, r2]
 80215aa:	bf54      	ite	pl
 80215ac:	f002 020f 	andpl.w	r2, r2, #15
 80215b0:	1112      	asrmi	r2, r2, #4
 80215b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80215b6:	b2d2      	uxtb	r2, r2
 80215b8:	2aff      	cmp	r2, #255	@ 0xff
 80215ba:	d118      	bne.n	80215ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80215bc:	f06f 0601 	mvn.w	r6, #1
 80215c0:	f8d8 2000 	ldr.w	r2, [r8]
 80215c4:	fb06 f705 	mul.w	r7, r6, r5
 80215c8:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 80215cc:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80215d0:	0956      	lsrs	r6, r2, #5
 80215d2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80215d6:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80215da:	ea4c 0606 	orr.w	r6, ip, r6
 80215de:	4316      	orrs	r6, r2
 80215e0:	53e6      	strh	r6, [r4, r7]
 80215e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80215e4:	3d01      	subs	r5, #1
 80215e6:	4410      	add	r0, r2
 80215e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80215ea:	4411      	add	r1, r2
 80215ec:	e787      	b.n	80214fe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80215ee:	2a00      	cmp	r2, #0
 80215f0:	d0f7      	beq.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80215f2:	f06f 0601 	mvn.w	r6, #1
 80215f6:	f8d8 c000 	ldr.w	ip, [r8]
 80215fa:	fa1f f982 	uxth.w	r9, r2
 80215fe:	43d2      	mvns	r2, r2
 8021600:	436e      	muls	r6, r5
 8021602:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8021606:	b2d2      	uxtb	r2, r2
 8021608:	f834 e006 	ldrh.w	lr, [r4, r6]
 802160c:	fb1a fa09 	smulbb	sl, sl, r9
 8021610:	9604      	str	r6, [sp, #16]
 8021612:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8021616:	ea4f 272e 	mov.w	r7, lr, asr #8
 802161a:	fb16 f609 	smulbb	r6, r6, r9
 802161e:	fa5f fc8c 	uxtb.w	ip, ip
 8021622:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8021626:	fb1c fc09 	smulbb	ip, ip, r9
 802162a:	fb07 6702 	mla	r7, r7, r2, r6
 802162e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021632:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021636:	b2bf      	uxth	r7, r7
 8021638:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802163c:	fa5f fe8e 	uxtb.w	lr, lr
 8021640:	fb06 a602 	mla	r6, r6, r2, sl
 8021644:	fb0e cc02 	mla	ip, lr, r2, ip
 8021648:	1c7a      	adds	r2, r7, #1
 802164a:	b2b6      	uxth	r6, r6
 802164c:	fa1f fc8c 	uxth.w	ip, ip
 8021650:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8021654:	9a04      	ldr	r2, [sp, #16]
 8021656:	f10c 0a01 	add.w	sl, ip, #1
 802165a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802165e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8021662:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021666:	ea4a 0707 	orr.w	r7, sl, r7
 802166a:	f106 0a01 	add.w	sl, r6, #1
 802166e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8021672:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8021676:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802167a:	ea47 070a 	orr.w	r7, r7, sl
 802167e:	52a7      	strh	r7, [r4, r2]
 8021680:	e7af      	b.n	80215e2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8021682:	f04f 0e00 	mov.w	lr, #0
 8021686:	eba3 020e 	sub.w	r2, r3, lr
 802168a:	2a00      	cmp	r2, #0
 802168c:	f77f af3a 	ble.w	8021504 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8021690:	1402      	asrs	r2, r0, #16
 8021692:	9e02      	ldr	r6, [sp, #8]
 8021694:	140d      	asrs	r5, r1, #16
 8021696:	fb06 2505 	mla	r5, r6, r5, r2
 802169a:	9e03      	ldr	r6, [sp, #12]
 802169c:	086a      	lsrs	r2, r5, #1
 802169e:	07ed      	lsls	r5, r5, #31
 80216a0:	5cb2      	ldrb	r2, [r6, r2]
 80216a2:	bf54      	ite	pl
 80216a4:	f002 020f 	andpl.w	r2, r2, #15
 80216a8:	1112      	asrmi	r2, r2, #4
 80216aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80216ae:	b2d2      	uxtb	r2, r2
 80216b0:	2aff      	cmp	r2, #255	@ 0xff
 80216b2:	d115      	bne.n	80216e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80216b4:	f8d8 5000 	ldr.w	r5, [r8]
 80216b8:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 80216bc:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80216c0:	096a      	lsrs	r2, r5, #5
 80216c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80216c6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80216ca:	4332      	orrs	r2, r6
 80216cc:	432a      	orrs	r2, r5
 80216ce:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80216d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80216d4:	f10e 0e01 	add.w	lr, lr, #1
 80216d8:	4410      	add	r0, r2
 80216da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80216dc:	4411      	add	r1, r2
 80216de:	e7d2      	b.n	8021686 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80216e0:	2a00      	cmp	r2, #0
 80216e2:	d0f6      	beq.n	80216d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80216e4:	f8d8 7000 	ldr.w	r7, [r8]
 80216e8:	fa1f f982 	uxth.w	r9, r2
 80216ec:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80216f0:	43d2      	mvns	r2, r2
 80216f2:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80216f6:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80216fa:	ea4f 262c 	mov.w	r6, ip, asr #8
 80216fe:	fb15 f509 	smulbb	r5, r5, r9
 8021702:	b2d2      	uxtb	r2, r2
 8021704:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021708:	b2ff      	uxtb	r7, r7
 802170a:	fb1a fa09 	smulbb	sl, sl, r9
 802170e:	fb06 5602 	mla	r6, r6, r2, r5
 8021712:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021716:	fb17 f709 	smulbb	r7, r7, r9
 802171a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802171e:	b2b6      	uxth	r6, r6
 8021720:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021724:	fa5f fc8c 	uxtb.w	ip, ip
 8021728:	fb05 a502 	mla	r5, r5, r2, sl
 802172c:	fb0c 7702 	mla	r7, ip, r2, r7
 8021730:	1c72      	adds	r2, r6, #1
 8021732:	b2ad      	uxth	r5, r5
 8021734:	b2bf      	uxth	r7, r7
 8021736:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802173a:	f107 0a01 	add.w	sl, r7, #1
 802173e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021742:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8021746:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802174a:	ea4a 0606 	orr.w	r6, sl, r6
 802174e:	f105 0a01 	add.w	sl, r5, #1
 8021752:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8021756:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802175a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 802175e:	ea46 060a 	orr.w	r6, r6, sl
 8021762:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8021766:	e7b4      	b.n	80216d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8021768:	b007      	add	sp, #28
 802176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802176e:	bf00      	nop
 8021770:	2400b8d4 	.word	0x2400b8d4

08021774 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8021774:	4770      	bx	lr

08021776 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8021776:	4770      	bx	lr

08021778 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8021778:	4770      	bx	lr

0802177a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802177a:	4770      	bx	lr

0802177c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802177c:	4770      	bx	lr

0802177e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802177e:	4770      	bx	lr

08021780 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021780:	4770      	bx	lr

08021782 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021782:	4770      	bx	lr

08021784 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8021784:	4770      	bx	lr

08021786 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8021786:	4770      	bx	lr

08021788 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021788:	4770      	bx	lr

0802178a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802178a:	4770      	bx	lr

0802178c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802178c:	4770      	bx	lr

0802178e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802178e:	4770      	bx	lr

08021790 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021790:	4770      	bx	lr

08021792 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8021792:	4770      	bx	lr

08021794 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8021794:	4770      	bx	lr

08021796 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8021796:	4770      	bx	lr

08021798 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8021798:	4770      	bx	lr

0802179a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802179a:	4770      	bx	lr

0802179c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802179c:	4770      	bx	lr

0802179e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802179e:	4770      	bx	lr

080217a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80217a0:	4770      	bx	lr

080217a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80217a2:	4770      	bx	lr

080217a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80217a4:	4770      	bx	lr

080217a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80217a6:	4770      	bx	lr

080217a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80217a8:	4770      	bx	lr

080217aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80217aa:	4770      	bx	lr

080217ac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80217ac:	b508      	push	{r3, lr}
 80217ae:	4b06      	ldr	r3, [pc, #24]	@ (80217c8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 80217b0:	8818      	ldrh	r0, [r3, #0]
 80217b2:	b928      	cbnz	r0, 80217c0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 80217b4:	4b05      	ldr	r3, [pc, #20]	@ (80217cc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 80217b6:	2150      	movs	r1, #80	@ 0x50
 80217b8:	4a05      	ldr	r2, [pc, #20]	@ (80217d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 80217ba:	4806      	ldr	r0, [pc, #24]	@ (80217d4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 80217bc:	f009 fbd4 	bl	802af68 <__assert_func>
 80217c0:	0040      	lsls	r0, r0, #1
 80217c2:	b280      	uxth	r0, r0
 80217c4:	bd08      	pop	{r3, pc}
 80217c6:	bf00      	nop
 80217c8:	2400b8c6 	.word	0x2400b8c6
 80217cc:	0803014b 	.word	0x0803014b
 80217d0:	08030744 	.word	0x08030744
 80217d4:	0803018d 	.word	0x0803018d

080217d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80217d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217dc:	b08b      	sub	sp, #44	@ 0x2c
 80217de:	460f      	mov	r7, r1
 80217e0:	4616      	mov	r6, r2
 80217e2:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80217e6:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 80217ea:	f1bb 0f00 	cmp.w	fp, #0
 80217ee:	d049      	beq.n	8021884 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80217f0:	6810      	ldr	r0, [r2, #0]
 80217f2:	ad06      	add	r5, sp, #24
 80217f4:	6851      	ldr	r1, [r2, #4]
 80217f6:	c503      	stmia	r5!, {r0, r1}
 80217f8:	6818      	ldr	r0, [r3, #0]
 80217fa:	ad08      	add	r5, sp, #32
 80217fc:	6859      	ldr	r1, [r3, #4]
 80217fe:	c503      	stmia	r5!, {r0, r1}
 8021800:	a806      	add	r0, sp, #24
 8021802:	f7fa f883 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021806:	4631      	mov	r1, r6
 8021808:	a808      	add	r0, sp, #32
 802180a:	f7fa f8a7 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802180e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021812:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8021816:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 802181a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802181e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8021822:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8021826:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 802182a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802182e:	4f5f      	ldr	r7, [pc, #380]	@ (80219ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8021830:	440a      	add	r2, r1
 8021832:	6838      	ldr	r0, [r7, #0]
 8021834:	46b9      	mov	r9, r7
 8021836:	f8ad 2020 	strh.w	r2, [sp, #32]
 802183a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802183e:	4413      	add	r3, r2
 8021840:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8021844:	6803      	ldr	r3, [r0, #0]
 8021846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021848:	4798      	blx	r3
 802184a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 802184e:	d01c      	beq.n	802188a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8021850:	f010 0f04 	tst.w	r0, #4
 8021854:	d01d      	beq.n	8021892 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8021856:	f8d9 0000 	ldr.w	r0, [r9]
 802185a:	2700      	movs	r7, #0
 802185c:	b2ad      	uxth	r5, r5
 802185e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021862:	6801      	ldr	r1, [r0, #0]
 8021864:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8021868:	f8cd b00c 	str.w	fp, [sp, #12]
 802186c:	9501      	str	r5, [sp, #4]
 802186e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8021872:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8021876:	9402      	str	r4, [sp, #8]
 8021878:	fa1f f488 	uxth.w	r4, r8
 802187c:	9400      	str	r4, [sp, #0]
 802187e:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8021880:	4631      	mov	r1, r6
 8021882:	47a0      	blx	r4
 8021884:	b00b      	add	sp, #44	@ 0x2c
 8021886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802188a:	b914      	cbnz	r4, 8021892 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802188c:	f010 0f01 	tst.w	r0, #1
 8021890:	e7e0      	b.n	8021854 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8021892:	f8d9 0000 	ldr.w	r0, [r9]
 8021896:	ea4f 0748 	mov.w	r7, r8, lsl #1
 802189a:	6803      	ldr	r3, [r0, #0]
 802189c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802189e:	4798      	blx	r3
 80218a0:	4b43      	ldr	r3, [pc, #268]	@ (80219b0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80218a2:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80218a6:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80218aa:	881a      	ldrh	r2, [r3, #0]
 80218ac:	469a      	mov	sl, r3
 80218ae:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80218b2:	fb05 f502 	mul.w	r5, r5, r2
 80218b6:	fb02 1404 	mla	r4, r2, r4, r1
 80218ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80218be:	d059      	beq.n	8021974 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80218c0:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80218c4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80218c8:	fa1f f28b 	uxth.w	r2, fp
 80218cc:	469e      	mov	lr, r3
 80218ce:	fa1f f989 	uxth.w	r9, r9
 80218d2:	42ac      	cmp	r4, r5
 80218d4:	d264      	bcs.n	80219a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80218d6:	eb04 0a07 	add.w	sl, r4, r7
 80218da:	4554      	cmp	r4, sl
 80218dc:	d23d      	bcs.n	802195a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80218de:	8821      	ldrh	r1, [r4, #0]
 80218e0:	f836 3b02 	ldrh.w	r3, [r6], #2
 80218e4:	1208      	asrs	r0, r1, #8
 80218e6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80218ea:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80218ee:	ea4f 0be1 	mov.w	fp, r1, asr #3
 80218f2:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80218f6:	00c9      	lsls	r1, r1, #3
 80218f8:	fb10 f009 	smulbb	r0, r0, r9
 80218fc:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8021900:	b2c9      	uxtb	r1, r1
 8021902:	fb0c 0c02 	mla	ip, ip, r2, r0
 8021906:	10d8      	asrs	r0, r3, #3
 8021908:	fb1b fb09 	smulbb	fp, fp, r9
 802190c:	00db      	lsls	r3, r3, #3
 802190e:	fa1f fc8c 	uxth.w	ip, ip
 8021912:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8021916:	fb11 f109 	smulbb	r1, r1, r9
 802191a:	b2db      	uxtb	r3, r3
 802191c:	fb00 b002 	mla	r0, r0, r2, fp
 8021920:	f10c 0b01 	add.w	fp, ip, #1
 8021924:	fb03 1302 	mla	r3, r3, r2, r1
 8021928:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802192c:	b29b      	uxth	r3, r3
 802192e:	b280      	uxth	r0, r0
 8021930:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8021934:	f103 0c01 	add.w	ip, r3, #1
 8021938:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802193c:	1c43      	adds	r3, r0, #1
 802193e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8021942:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021946:	0940      	lsrs	r0, r0, #5
 8021948:	ea4c 0c0b 	orr.w	ip, ip, fp
 802194c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8021950:	ea4c 0c00 	orr.w	ip, ip, r0
 8021954:	f824 cb02 	strh.w	ip, [r4], #2
 8021958:	e7bf      	b.n	80218da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 802195a:	f8be 3000 	ldrh.w	r3, [lr]
 802195e:	eba3 0308 	sub.w	r3, r3, r8
 8021962:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021966:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802196a:	eba3 0308 	sub.w	r3, r3, r8
 802196e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8021972:	e7ae      	b.n	80218d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8021974:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8021978:	f8d9 0000 	ldr.w	r0, [r9]
 802197c:	42ac      	cmp	r4, r5
 802197e:	6803      	ldr	r3, [r0, #0]
 8021980:	d20e      	bcs.n	80219a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8021982:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8021986:	4632      	mov	r2, r6
 8021988:	463b      	mov	r3, r7
 802198a:	4621      	mov	r1, r4
 802198c:	47c0      	blx	r8
 802198e:	f8ba 3000 	ldrh.w	r3, [sl]
 8021992:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021996:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802199a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802199e:	e7eb      	b.n	8021978 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80219a0:	4b02      	ldr	r3, [pc, #8]	@ (80219ac <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80219a2:	6818      	ldr	r0, [r3, #0]
 80219a4:	6803      	ldr	r3, [r0, #0]
 80219a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80219a8:	4798      	blx	r3
 80219aa:	e76b      	b.n	8021884 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80219ac:	2400b8cc 	.word	0x2400b8cc
 80219b0:	2400b8c6 	.word	0x2400b8c6

080219b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80219b4:	b510      	push	{r4, lr}
 80219b6:	4604      	mov	r4, r0
 80219b8:	2104      	movs	r1, #4
 80219ba:	f009 faa6 	bl	802af0a <_ZdlPvj>
 80219be:	4620      	mov	r0, r4
 80219c0:	bd10      	pop	{r4, pc}

080219c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80219c2:	b510      	push	{r4, lr}
 80219c4:	4604      	mov	r4, r0
 80219c6:	2104      	movs	r1, #4
 80219c8:	f009 fa9f 	bl	802af0a <_ZdlPvj>
 80219cc:	4620      	mov	r0, r4
 80219ce:	bd10      	pop	{r4, pc}

080219d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80219d0:	b510      	push	{r4, lr}
 80219d2:	4604      	mov	r4, r0
 80219d4:	2104      	movs	r1, #4
 80219d6:	f009 fa98 	bl	802af0a <_ZdlPvj>
 80219da:	4620      	mov	r0, r4
 80219dc:	bd10      	pop	{r4, pc}

080219de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80219de:	b510      	push	{r4, lr}
 80219e0:	4604      	mov	r4, r0
 80219e2:	2104      	movs	r1, #4
 80219e4:	f009 fa91 	bl	802af0a <_ZdlPvj>
 80219e8:	4620      	mov	r0, r4
 80219ea:	bd10      	pop	{r4, pc}

080219ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80219ec:	b510      	push	{r4, lr}
 80219ee:	4604      	mov	r4, r0
 80219f0:	2104      	movs	r1, #4
 80219f2:	f009 fa8a 	bl	802af0a <_ZdlPvj>
 80219f6:	4620      	mov	r0, r4
 80219f8:	bd10      	pop	{r4, pc}

080219fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80219fa:	b510      	push	{r4, lr}
 80219fc:	4604      	mov	r4, r0
 80219fe:	2104      	movs	r1, #4
 8021a00:	f009 fa83 	bl	802af0a <_ZdlPvj>
 8021a04:	4620      	mov	r0, r4
 8021a06:	bd10      	pop	{r4, pc}

08021a08 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a08:	b510      	push	{r4, lr}
 8021a0a:	4604      	mov	r4, r0
 8021a0c:	2104      	movs	r1, #4
 8021a0e:	f009 fa7c 	bl	802af0a <_ZdlPvj>
 8021a12:	4620      	mov	r0, r4
 8021a14:	bd10      	pop	{r4, pc}

08021a16 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8021a16:	b510      	push	{r4, lr}
 8021a18:	4604      	mov	r4, r0
 8021a1a:	2104      	movs	r1, #4
 8021a1c:	f009 fa75 	bl	802af0a <_ZdlPvj>
 8021a20:	4620      	mov	r0, r4
 8021a22:	bd10      	pop	{r4, pc}

08021a24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a24:	b510      	push	{r4, lr}
 8021a26:	4604      	mov	r4, r0
 8021a28:	2104      	movs	r1, #4
 8021a2a:	f009 fa6e 	bl	802af0a <_ZdlPvj>
 8021a2e:	4620      	mov	r0, r4
 8021a30:	bd10      	pop	{r4, pc}

08021a32 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a32:	b510      	push	{r4, lr}
 8021a34:	4604      	mov	r4, r0
 8021a36:	2104      	movs	r1, #4
 8021a38:	f009 fa67 	bl	802af0a <_ZdlPvj>
 8021a3c:	4620      	mov	r0, r4
 8021a3e:	bd10      	pop	{r4, pc}

08021a40 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021a40:	b510      	push	{r4, lr}
 8021a42:	4604      	mov	r4, r0
 8021a44:	2104      	movs	r1, #4
 8021a46:	f009 fa60 	bl	802af0a <_ZdlPvj>
 8021a4a:	4620      	mov	r0, r4
 8021a4c:	bd10      	pop	{r4, pc}

08021a4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021a4e:	b510      	push	{r4, lr}
 8021a50:	4604      	mov	r4, r0
 8021a52:	2104      	movs	r1, #4
 8021a54:	f009 fa59 	bl	802af0a <_ZdlPvj>
 8021a58:	4620      	mov	r0, r4
 8021a5a:	bd10      	pop	{r4, pc}

08021a5c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8021a5c:	b510      	push	{r4, lr}
 8021a5e:	4604      	mov	r4, r0
 8021a60:	2104      	movs	r1, #4
 8021a62:	f009 fa52 	bl	802af0a <_ZdlPvj>
 8021a66:	4620      	mov	r0, r4
 8021a68:	bd10      	pop	{r4, pc}

08021a6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8021a6a:	b510      	push	{r4, lr}
 8021a6c:	4604      	mov	r4, r0
 8021a6e:	2104      	movs	r1, #4
 8021a70:	f009 fa4b 	bl	802af0a <_ZdlPvj>
 8021a74:	4620      	mov	r0, r4
 8021a76:	bd10      	pop	{r4, pc}

08021a78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021a78:	b510      	push	{r4, lr}
 8021a7a:	4604      	mov	r4, r0
 8021a7c:	2104      	movs	r1, #4
 8021a7e:	f009 fa44 	bl	802af0a <_ZdlPvj>
 8021a82:	4620      	mov	r0, r4
 8021a84:	bd10      	pop	{r4, pc}

08021a86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021a86:	b510      	push	{r4, lr}
 8021a88:	4604      	mov	r4, r0
 8021a8a:	2104      	movs	r1, #4
 8021a8c:	f009 fa3d 	bl	802af0a <_ZdlPvj>
 8021a90:	4620      	mov	r0, r4
 8021a92:	bd10      	pop	{r4, pc}

08021a94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8021a94:	b510      	push	{r4, lr}
 8021a96:	4604      	mov	r4, r0
 8021a98:	2104      	movs	r1, #4
 8021a9a:	f009 fa36 	bl	802af0a <_ZdlPvj>
 8021a9e:	4620      	mov	r0, r4
 8021aa0:	bd10      	pop	{r4, pc}

08021aa2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8021aa2:	b510      	push	{r4, lr}
 8021aa4:	4604      	mov	r4, r0
 8021aa6:	2104      	movs	r1, #4
 8021aa8:	f009 fa2f 	bl	802af0a <_ZdlPvj>
 8021aac:	4620      	mov	r0, r4
 8021aae:	bd10      	pop	{r4, pc}

08021ab0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021ab0:	b510      	push	{r4, lr}
 8021ab2:	4604      	mov	r4, r0
 8021ab4:	2104      	movs	r1, #4
 8021ab6:	f009 fa28 	bl	802af0a <_ZdlPvj>
 8021aba:	4620      	mov	r0, r4
 8021abc:	bd10      	pop	{r4, pc}

08021abe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021abe:	b510      	push	{r4, lr}
 8021ac0:	4604      	mov	r4, r0
 8021ac2:	2104      	movs	r1, #4
 8021ac4:	f009 fa21 	bl	802af0a <_ZdlPvj>
 8021ac8:	4620      	mov	r0, r4
 8021aca:	bd10      	pop	{r4, pc}

08021acc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8021acc:	b510      	push	{r4, lr}
 8021ace:	4604      	mov	r4, r0
 8021ad0:	2104      	movs	r1, #4
 8021ad2:	f009 fa1a 	bl	802af0a <_ZdlPvj>
 8021ad6:	4620      	mov	r0, r4
 8021ad8:	bd10      	pop	{r4, pc}

08021ada <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8021ada:	b510      	push	{r4, lr}
 8021adc:	4604      	mov	r4, r0
 8021ade:	2104      	movs	r1, #4
 8021ae0:	f009 fa13 	bl	802af0a <_ZdlPvj>
 8021ae4:	4620      	mov	r0, r4
 8021ae6:	bd10      	pop	{r4, pc}

08021ae8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8021ae8:	b510      	push	{r4, lr}
 8021aea:	4604      	mov	r4, r0
 8021aec:	2104      	movs	r1, #4
 8021aee:	f009 fa0c 	bl	802af0a <_ZdlPvj>
 8021af2:	4620      	mov	r0, r4
 8021af4:	bd10      	pop	{r4, pc}

08021af6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021af6:	b510      	push	{r4, lr}
 8021af8:	4604      	mov	r4, r0
 8021afa:	2104      	movs	r1, #4
 8021afc:	f009 fa05 	bl	802af0a <_ZdlPvj>
 8021b00:	4620      	mov	r0, r4
 8021b02:	bd10      	pop	{r4, pc}

08021b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021b04:	b510      	push	{r4, lr}
 8021b06:	4604      	mov	r4, r0
 8021b08:	2104      	movs	r1, #4
 8021b0a:	f009 f9fe 	bl	802af0a <_ZdlPvj>
 8021b0e:	4620      	mov	r0, r4
 8021b10:	bd10      	pop	{r4, pc}

08021b12 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8021b12:	b510      	push	{r4, lr}
 8021b14:	4604      	mov	r4, r0
 8021b16:	2104      	movs	r1, #4
 8021b18:	f009 f9f7 	bl	802af0a <_ZdlPvj>
 8021b1c:	4620      	mov	r0, r4
 8021b1e:	bd10      	pop	{r4, pc}

08021b20 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8021b20:	b510      	push	{r4, lr}
 8021b22:	4604      	mov	r4, r0
 8021b24:	2104      	movs	r1, #4
 8021b26:	f009 f9f0 	bl	802af0a <_ZdlPvj>
 8021b2a:	4620      	mov	r0, r4
 8021b2c:	bd10      	pop	{r4, pc}

08021b2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8021b2e:	b510      	push	{r4, lr}
 8021b30:	4604      	mov	r4, r0
 8021b32:	2104      	movs	r1, #4
 8021b34:	f009 f9e9 	bl	802af0a <_ZdlPvj>
 8021b38:	4620      	mov	r0, r4
 8021b3a:	bd10      	pop	{r4, pc}

08021b3c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021b3e:	4606      	mov	r6, r0
 8021b40:	b087      	sub	sp, #28
 8021b42:	460c      	mov	r4, r1
 8021b44:	4617      	mov	r7, r2
 8021b46:	461d      	mov	r5, r3
 8021b48:	b333      	cbz	r3, 8021b98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021b4a:	4608      	mov	r0, r1
 8021b4c:	f7f6 fb6f 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021b50:	bb10      	cbnz	r0, 8021b98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021b52:	6820      	ldr	r0, [r4, #0]
 8021b54:	ab04      	add	r3, sp, #16
 8021b56:	6861      	ldr	r1, [r4, #4]
 8021b58:	4c1b      	ldr	r4, [pc, #108]	@ (8021bc8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8021b5a:	c303      	stmia	r3!, {r0, r1}
 8021b5c:	a804      	add	r0, sp, #16
 8021b5e:	f7f9 fed5 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b62:	6820      	ldr	r0, [r4, #0]
 8021b64:	6803      	ldr	r3, [r0, #0]
 8021b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b68:	4798      	blx	r3
 8021b6a:	2dff      	cmp	r5, #255	@ 0xff
 8021b6c:	d016      	beq.n	8021b9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8021b6e:	f010 0f08 	tst.w	r0, #8
 8021b72:	6820      	ldr	r0, [r4, #0]
 8021b74:	d015      	beq.n	8021ba2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021b76:	2400      	movs	r4, #0
 8021b78:	6801      	ldr	r1, [r0, #0]
 8021b7a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021b7e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021b82:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8021b86:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021b8a:	9401      	str	r4, [sp, #4]
 8021b8c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021b90:	9400      	str	r4, [sp, #0]
 8021b92:	6dcc      	ldr	r4, [r1, #92]	@ 0x5c
 8021b94:	4639      	mov	r1, r7
 8021b96:	47a0      	blx	r4
 8021b98:	b007      	add	sp, #28
 8021b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021b9c:	f010 0f02 	tst.w	r0, #2
 8021ba0:	e7e7      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8021ba2:	6803      	ldr	r3, [r0, #0]
 8021ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ba6:	4798      	blx	r3
 8021ba8:	4b08      	ldr	r3, [pc, #32]	@ (8021bcc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8021baa:	4601      	mov	r1, r0
 8021bac:	4630      	mov	r0, r6
 8021bae:	881a      	ldrh	r2, [r3, #0]
 8021bb0:	6833      	ldr	r3, [r6, #0]
 8021bb2:	e9cd 7500 	strd	r7, r5, [sp]
 8021bb6:	69dd      	ldr	r5, [r3, #28]
 8021bb8:	ab04      	add	r3, sp, #16
 8021bba:	47a8      	blx	r5
 8021bbc:	6820      	ldr	r0, [r4, #0]
 8021bbe:	6803      	ldr	r3, [r0, #0]
 8021bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021bc2:	4798      	blx	r3
 8021bc4:	e7e8      	b.n	8021b98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8021bc6:	bf00      	nop
 8021bc8:	2400b8cc 	.word	0x2400b8cc
 8021bcc:	2400b8c6 	.word	0x2400b8c6

08021bd0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8021bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd4:	4f97      	ldr	r7, [pc, #604]	@ (8021e34 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8021bd6:	4616      	mov	r6, r2
 8021bd8:	b08f      	sub	sp, #60	@ 0x3c
 8021bda:	4604      	mov	r4, r0
 8021bdc:	683a      	ldr	r2, [r7, #0]
 8021bde:	4689      	mov	r9, r1
 8021be0:	f892 2048 	ldrb.w	r2, [r2, #72]	@ 0x48
 8021be4:	2a02      	cmp	r2, #2
 8021be6:	d106      	bne.n	8021bf6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8021be8:	4b93      	ldr	r3, [pc, #588]	@ (8021e38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8021bea:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8021bee:	4a93      	ldr	r2, [pc, #588]	@ (8021e3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021bf0:	4893      	ldr	r0, [pc, #588]	@ (8021e40 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8021bf2:	f009 f9b9 	bl	802af68 <__assert_func>
 8021bf6:	ad0e      	add	r5, sp, #56	@ 0x38
 8021bf8:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8021bfc:	4628      	mov	r0, r5
 8021bfe:	f7fd fad3 	bl	801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021c02:	6823      	ldr	r3, [r4, #0]
 8021c04:	4680      	mov	r8, r0
 8021c06:	4620      	mov	r0, r4
 8021c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021c0a:	4798      	blx	r3
 8021c0c:	4580      	cmp	r8, r0
 8021c0e:	d004      	beq.n	8021c1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8021c10:	4b8c      	ldr	r3, [pc, #560]	@ (8021e44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8021c12:	f240 3166 	movw	r1, #870	@ 0x366
 8021c16:	4a89      	ldr	r2, [pc, #548]	@ (8021e3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021c18:	e7ea      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021c1a:	4628      	mov	r0, r5
 8021c1c:	f7fd fa3a 	bl	801f094 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021c20:	4680      	mov	r8, r0
 8021c22:	b920      	cbnz	r0, 8021c2e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8021c24:	4b88      	ldr	r3, [pc, #544]	@ (8021e48 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8021c26:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8021c2a:	4a84      	ldr	r2, [pc, #528]	@ (8021e3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021c2c:	e7e0      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021c2e:	6830      	ldr	r0, [r6, #0]
 8021c30:	ab06      	add	r3, sp, #24
 8021c32:	6871      	ldr	r1, [r6, #4]
 8021c34:	f10d 0b20 	add.w	fp, sp, #32
 8021c38:	f9b6 a000 	ldrsh.w	sl, [r6]
 8021c3c:	c303      	stmia	r3!, {r0, r1}
 8021c3e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8021c42:	ab08      	add	r3, sp, #32
 8021c44:	f8d9 0000 	ldr.w	r0, [r9]
 8021c48:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8021c4c:	c303      	stmia	r3!, {r0, r1}
 8021c4e:	4628      	mov	r0, r5
 8021c50:	f7fd f918 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021c54:	4606      	mov	r6, r0
 8021c56:	4628      	mov	r0, r5
 8021c58:	4d7c      	ldr	r5, [pc, #496]	@ (8021e4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8021c5a:	f7fd f94d 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021c5e:	f8ad 002e 	strh.w	r0, [sp, #46]	@ 0x2e
 8021c62:	a806      	add	r0, sp, #24
 8021c64:	f8ad a028 	strh.w	sl, [sp, #40]	@ 0x28
 8021c68:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8021c6c:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8021c70:	f7f9 fe4c 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c74:	4658      	mov	r0, fp
 8021c76:	f7f9 fe49 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c7a:	a80a      	add	r0, sp, #40	@ 0x28
 8021c7c:	f7f9 fe46 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c80:	4b73      	ldr	r3, [pc, #460]	@ (8021e50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021c82:	2100      	movs	r1, #0
 8021c84:	f9b5 2000 	ldrsh.w	r2, [r5]
 8021c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8021c8c:	4658      	mov	r0, fp
 8021c8e:	910c      	str	r1, [sp, #48]	@ 0x30
 8021c90:	a90c      	add	r1, sp, #48	@ 0x30
 8021c92:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8021c96:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8021c9a:	f7f6 fa85 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8021c9e:	4658      	mov	r0, fp
 8021ca0:	f7f6 fac5 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021ca4:	2800      	cmp	r0, #0
 8021ca6:	f040 809a 	bne.w	8021dde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021caa:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8021cae:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8021cb2:	4288      	cmp	r0, r1
 8021cb4:	db38      	blt.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021cb6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	@ 0x22
 8021cba:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021cbe:	429a      	cmp	r2, r3
 8021cc0:	db32      	blt.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021cc2:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 8021cc6:	4430      	add	r0, r6
 8021cc8:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8021ccc:	4431      	add	r1, r6
 8021cce:	b200      	sxth	r0, r0
 8021cd0:	b209      	sxth	r1, r1
 8021cd2:	4288      	cmp	r0, r1
 8021cd4:	dc28      	bgt.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021cd6:	f8bd 1026 	ldrh.w	r1, [sp, #38]	@ 0x26
 8021cda:	440a      	add	r2, r1
 8021cdc:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8021ce0:	440b      	add	r3, r1
 8021ce2:	b212      	sxth	r2, r2
 8021ce4:	b21b      	sxth	r3, r3
 8021ce6:	429a      	cmp	r2, r3
 8021ce8:	dc1e      	bgt.n	8021d28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8021cea:	6823      	ldr	r3, [r4, #0]
 8021cec:	4620      	mov	r0, r4
 8021cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021cf0:	4798      	blx	r3
 8021cf2:	4682      	mov	sl, r0
 8021cf4:	6838      	ldr	r0, [r7, #0]
 8021cf6:	6803      	ldr	r3, [r0, #0]
 8021cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021cfa:	4798      	blx	r3
 8021cfc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8021d00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021d04:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8021d08:	1a5b      	subs	r3, r3, r1
 8021d0a:	b29b      	uxth	r3, r3
 8021d0c:	b21c      	sxth	r4, r3
 8021d0e:	2c00      	cmp	r4, #0
 8021d10:	dc0f      	bgt.n	8021d32 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8021d12:	bf18      	it	ne
 8021d14:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8021d18:	4644      	mov	r4, r8
 8021d1a:	bf1e      	ittt	ne
 8021d1c:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	@ 0x24
 8021d20:	185b      	addne	r3, r3, r1
 8021d22:	f8ad 3024 	strhne.w	r3, [sp, #36]	@ 0x24
 8021d26:	e009      	b.n	8021d3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8021d28:	4b4a      	ldr	r3, [pc, #296]	@ (8021e54 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8021d2a:	f240 3176 	movw	r1, #886	@ 0x376
 8021d2e:	4a43      	ldr	r2, [pc, #268]	@ (8021e3c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8021d30:	e75e      	b.n	8021bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8021d32:	1ad3      	subs	r3, r2, r3
 8021d34:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8021d38:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8021d3c:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	@ 0x2a
 8021d40:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8021d44:	1b9b      	subs	r3, r3, r6
 8021d46:	b29b      	uxth	r3, r3
 8021d48:	b219      	sxth	r1, r3
 8021d4a:	2900      	cmp	r1, #0
 8021d4c:	dd4b      	ble.n	8021de6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8021d4e:	4351      	muls	r1, r2
 8021d50:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021d54:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8021d58:	1acb      	subs	r3, r1, r3
 8021d5a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8021d5e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021d62:	2e00      	cmp	r6, #0
 8021d64:	dd3b      	ble.n	8021dde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021d66:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8021d6a:	2b00      	cmp	r3, #0
 8021d6c:	dd37      	ble.n	8021dde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021d6e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8021d72:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021d76:	fb0a f90c 	mul.w	r9, sl, ip
 8021d7a:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8021d7e:	4481      	add	r9, r0
 8021d80:	8828      	ldrh	r0, [r5, #0]
 8021d82:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	@ 0x24
 8021d86:	1a41      	subs	r1, r0, r1
 8021d88:	42ae      	cmp	r6, r5
 8021d8a:	bfa8      	it	ge
 8021d8c:	462e      	movge	r6, r5
 8021d8e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8021d92:	428e      	cmp	r6, r1
 8021d94:	bfa8      	it	ge
 8021d96:	460e      	movge	r6, r1
 8021d98:	429d      	cmp	r5, r3
 8021d9a:	bfa8      	it	ge
 8021d9c:	461d      	movge	r5, r3
 8021d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8021e50 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8021da0:	881b      	ldrh	r3, [r3, #0]
 8021da2:	eba3 030c 	sub.w	r3, r3, ip
 8021da6:	429d      	cmp	r5, r3
 8021da8:	bfa8      	it	ge
 8021daa:	461d      	movge	r5, r3
 8021dac:	42b0      	cmp	r0, r6
 8021dae:	d12c      	bne.n	8021e0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021db0:	4290      	cmp	r0, r2
 8021db2:	d12a      	bne.n	8021e0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8021db4:	6838      	ldr	r0, [r7, #0]
 8021db6:	9203      	str	r2, [sp, #12]
 8021db8:	6803      	ldr	r3, [r0, #0]
 8021dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021dbc:	4798      	blx	r3
 8021dbe:	07c3      	lsls	r3, r0, #31
 8021dc0:	d51a      	bpl.n	8021df8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8021dc2:	9a03      	ldr	r2, [sp, #12]
 8021dc4:	6838      	ldr	r0, [r7, #0]
 8021dc6:	f8ad 5026 	strh.w	r5, [sp, #38]	@ 0x26
 8021dca:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
 8021dce:	6803      	ldr	r3, [r0, #0]
 8021dd0:	9200      	str	r2, [sp, #0]
 8021dd2:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8021dd4:	4623      	mov	r3, r4
 8021dd6:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8021dda:	47a8      	blx	r5
 8021ddc:	4680      	mov	r8, r0
 8021dde:	4640      	mov	r0, r8
 8021de0:	b00f      	add	sp, #60	@ 0x3c
 8021de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021de6:	bf1f      	itttt	ne
 8021de8:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	@ 0x26
 8021dec:	f8ad 6022 	strhne.w	r6, [sp, #34]	@ 0x22
 8021df0:	185b      	addne	r3, r3, r1
 8021df2:	f8ad 3026 	strhne.w	r3, [sp, #38]	@ 0x26
 8021df6:	e7b2      	b.n	8021d5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8021df8:	6838      	ldr	r0, [r7, #0]
 8021dfa:	464a      	mov	r2, r9
 8021dfc:	4621      	mov	r1, r4
 8021dfe:	6803      	ldr	r3, [r0, #0]
 8021e00:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8021e02:	fb05 f30a 	mul.w	r3, r5, sl
 8021e06:	47b0      	blx	r6
 8021e08:	e7e9      	b.n	8021dde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021e0a:	4355      	muls	r5, r2
 8021e0c:	0076      	lsls	r6, r6, #1
 8021e0e:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8021e12:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8021e16:	9303      	str	r3, [sp, #12]
 8021e18:	9b03      	ldr	r3, [sp, #12]
 8021e1a:	429c      	cmp	r4, r3
 8021e1c:	d2df      	bcs.n	8021dde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8021e1e:	6838      	ldr	r0, [r7, #0]
 8021e20:	464a      	mov	r2, r9
 8021e22:	4621      	mov	r1, r4
 8021e24:	44d1      	add	r9, sl
 8021e26:	6803      	ldr	r3, [r0, #0]
 8021e28:	445c      	add	r4, fp
 8021e2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021e2c:	461d      	mov	r5, r3
 8021e2e:	4633      	mov	r3, r6
 8021e30:	47a8      	blx	r5
 8021e32:	e7f1      	b.n	8021e18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8021e34:	2400b8cc 	.word	0x2400b8cc
 8021e38:	0802ff43 	.word	0x0802ff43
 8021e3c:	080307f4 	.word	0x080307f4
 8021e40:	0802fff5 	.word	0x0802fff5
 8021e44:	08030027 	.word	0x08030027
 8021e48:	0803007c 	.word	0x0803007c
 8021e4c:	2400b8c6 	.word	0x2400b8c6
 8021e50:	2400b8c8 	.word	0x2400b8c8
 8021e54:	080300ba 	.word	0x080300ba

08021e58 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8021e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e5c:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8021e60:	4688      	mov	r8, r1
 8021e62:	4614      	mov	r4, r2
 8021e64:	461d      	mov	r5, r3
 8021e66:	9e08      	ldr	r6, [sp, #32]
 8021e68:	2f00      	cmp	r7, #0
 8021e6a:	f000 80b4 	beq.w	8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021e6e:	4618      	mov	r0, r3
 8021e70:	f7f6 f9dd 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e74:	2800      	cmp	r0, #0
 8021e76:	f040 80ae 	bne.w	8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021e7a:	f9b5 1000 	ldrsh.w	r1, [r5]
 8021e7e:	2fff      	cmp	r7, #255	@ 0xff
 8021e80:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8021e84:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8021e88:	fb04 1303 	mla	r3, r4, r3, r1
 8021e8c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8021e90:	eba4 0200 	sub.w	r2, r4, r0
 8021e94:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8021e98:	fb04 f505 	mul.w	r5, r4, r5
 8021e9c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8021ea0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8021ea4:	d04b      	beq.n	8021f3e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8021ea6:	b2bc      	uxth	r4, r7
 8021ea8:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8021eac:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8021eb0:	fa5f f788 	uxtb.w	r7, r8
 8021eb4:	b2f3      	uxtb	r3, r6
 8021eb6:	0040      	lsls	r0, r0, #1
 8021eb8:	fb0e fe04 	mul.w	lr, lr, r4
 8021ebc:	4367      	muls	r7, r4
 8021ebe:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021ec2:	4363      	muls	r3, r4
 8021ec4:	fa1f fc8c 	uxth.w	ip, ip
 8021ec8:	42a9      	cmp	r1, r5
 8021eca:	f080 8084 	bcs.w	8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021ece:	eb01 0900 	add.w	r9, r1, r0
 8021ed2:	4549      	cmp	r1, r9
 8021ed4:	d231      	bcs.n	8021f3a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8021ed6:	880a      	ldrh	r2, [r1, #0]
 8021ed8:	1214      	asrs	r4, r2, #8
 8021eda:	10d6      	asrs	r6, r2, #3
 8021edc:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8021ee0:	00d2      	lsls	r2, r2, #3
 8021ee2:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8021ee6:	b2d2      	uxtb	r2, r2
 8021ee8:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021eec:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021ef0:	fb14 f40c 	smulbb	r4, r4, ip
 8021ef4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8021ef8:	fb12 f20c 	smulbb	r2, r2, ip
 8021efc:	fb16 f60c 	smulbb	r6, r6, ip
 8021f00:	4474      	add	r4, lr
 8021f02:	441a      	add	r2, r3
 8021f04:	b2a4      	uxth	r4, r4
 8021f06:	443e      	add	r6, r7
 8021f08:	b292      	uxth	r2, r2
 8021f0a:	f104 0a01 	add.w	sl, r4, #1
 8021f0e:	b2b6      	uxth	r6, r6
 8021f10:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8021f14:	f102 0a01 	add.w	sl, r2, #1
 8021f18:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8021f1c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8021f20:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021f24:	4322      	orrs	r2, r4
 8021f26:	1c74      	adds	r4, r6, #1
 8021f28:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8021f2c:	0976      	lsrs	r6, r6, #5
 8021f2e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8021f32:	4332      	orrs	r2, r6
 8021f34:	f821 2b02 	strh.w	r2, [r1], #2
 8021f38:	e7cb      	b.n	8021ed2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8021f3a:	4441      	add	r1, r8
 8021f3c:	e7c4      	b.n	8021ec8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8021f3e:	0973      	lsrs	r3, r6, #5
 8021f40:	4f26      	ldr	r7, [pc, #152]	@ (8021fdc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8021f42:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021f46:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8021f4a:	ea08 0707 	and.w	r7, r8, r7
 8021f4e:	433b      	orrs	r3, r7
 8021f50:	4333      	orrs	r3, r6
 8021f52:	07e6      	lsls	r6, r4, #31
 8021f54:	b29b      	uxth	r3, r3
 8021f56:	d50b      	bpl.n	8021f70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8021f58:	0040      	lsls	r0, r0, #1
 8021f5a:	0052      	lsls	r2, r2, #1
 8021f5c:	42a9      	cmp	r1, r5
 8021f5e:	d23a      	bcs.n	8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021f60:	180c      	adds	r4, r1, r0
 8021f62:	42a1      	cmp	r1, r4
 8021f64:	d202      	bcs.n	8021f6c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8021f66:	f821 3b02 	strh.w	r3, [r1], #2
 8021f6a:	e7fa      	b.n	8021f62 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8021f6c:	4411      	add	r1, r2
 8021f6e:	e7f5      	b.n	8021f5c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8021f70:	078f      	lsls	r7, r1, #30
 8021f72:	d008      	beq.n	8021f86 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8021f74:	0066      	lsls	r6, r4, #1
 8021f76:	460a      	mov	r2, r1
 8021f78:	42aa      	cmp	r2, r5
 8021f7a:	d202      	bcs.n	8021f82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8021f7c:	8013      	strh	r3, [r2, #0]
 8021f7e:	4432      	add	r2, r6
 8021f80:	e7fa      	b.n	8021f78 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8021f82:	3102      	adds	r1, #2
 8021f84:	3801      	subs	r0, #1
 8021f86:	07c6      	lsls	r6, r0, #31
 8021f88:	d50b      	bpl.n	8021fa2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8021f8a:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8021f8e:	0066      	lsls	r6, r4, #1
 8021f90:	3a01      	subs	r2, #1
 8021f92:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8021f96:	42aa      	cmp	r2, r5
 8021f98:	d202      	bcs.n	8021fa0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8021f9a:	8013      	strh	r3, [r2, #0]
 8021f9c:	4432      	add	r2, r6
 8021f9e:	e7fa      	b.n	8021f96 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8021fa0:	3801      	subs	r0, #1
 8021fa2:	b1c0      	cbz	r0, 8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021fa4:	1040      	asrs	r0, r0, #1
 8021fa6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8021faa:	0080      	lsls	r0, r0, #2
 8021fac:	0064      	lsls	r4, r4, #1
 8021fae:	42a9      	cmp	r1, r5
 8021fb0:	d211      	bcs.n	8021fd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8021fb2:	078a      	lsls	r2, r1, #30
 8021fb4:	d006      	beq.n	8021fc4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8021fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8021fe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8021fb8:	f44f 6185 	mov.w	r1, #1064	@ 0x428
 8021fbc:	4a09      	ldr	r2, [pc, #36]	@ (8021fe4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8021fbe:	480a      	ldr	r0, [pc, #40]	@ (8021fe8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8021fc0:	f008 ffd2 	bl	802af68 <__assert_func>
 8021fc4:	180e      	adds	r6, r1, r0
 8021fc6:	460a      	mov	r2, r1
 8021fc8:	42b2      	cmp	r2, r6
 8021fca:	d202      	bcs.n	8021fd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8021fcc:	f842 3b04 	str.w	r3, [r2], #4
 8021fd0:	e7fa      	b.n	8021fc8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8021fd2:	4421      	add	r1, r4
 8021fd4:	e7eb      	b.n	8021fae <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8021fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021fda:	bf00      	nop
 8021fdc:	00fff800 	.word	0x00fff800
 8021fe0:	0802fdf4 	.word	0x0802fdf4
 8021fe4:	08030440 	.word	0x08030440
 8021fe8:	0802fff5 	.word	0x0802fff5

08021fec <_ZN8touchgfx8LCD16bppC1Ev>:
 8021fec:	2200      	movs	r2, #0
 8021fee:	4910      	ldr	r1, [pc, #64]	@ (8022030 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8021ff0:	6042      	str	r2, [r0, #4]
 8021ff2:	6001      	str	r1, [r0, #0]
 8021ff4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021ff8:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021ffc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8022000:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8022004:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8022008:	e9c0 220c 	strd	r2, r2, [r0, #48]	@ 0x30
 802200c:	e9c0 220e 	strd	r2, r2, [r0, #56]	@ 0x38
 8022010:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
 8022014:	e9c0 2212 	strd	r2, r2, [r0, #72]	@ 0x48
 8022018:	e9c0 2214 	strd	r2, r2, [r0, #80]	@ 0x50
 802201c:	e9c0 2216 	strd	r2, r2, [r0, #88]	@ 0x58
 8022020:	e9c0 2218 	strd	r2, r2, [r0, #96]	@ 0x60
 8022024:	e9c0 221a 	strd	r2, r2, [r0, #104]	@ 0x68
 8022028:	e9c0 221c 	strd	r2, r2, [r0, #112]	@ 0x70
 802202c:	4770      	bx	lr
 802202e:	bf00      	nop
 8022030:	080303f8 	.word	0x080303f8

08022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022038:	b08d      	sub	sp, #52	@ 0x34
 802203a:	460d      	mov	r5, r1
 802203c:	4604      	mov	r4, r0
 802203e:	4699      	mov	r9, r3
 8022040:	6808      	ldr	r0, [r1, #0]
 8022042:	ab08      	add	r3, sp, #32
 8022044:	6849      	ldr	r1, [r1, #4]
 8022046:	c303      	stmia	r3!, {r0, r1}
 8022048:	6810      	ldr	r0, [r2, #0]
 802204a:	ab0a      	add	r3, sp, #40	@ 0x28
 802204c:	6851      	ldr	r1, [r2, #4]
 802204e:	c303      	stmia	r3!, {r0, r1}
 8022050:	a808      	add	r0, sp, #32
 8022052:	f7f9 fc5b 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022056:	4629      	mov	r1, r5
 8022058:	a80a      	add	r0, sp, #40	@ 0x28
 802205a:	4d67      	ldr	r5, [pc, #412]	@ (80221f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 802205c:	f7f9 fc7e 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022060:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8022064:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8022068:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 802206c:	6828      	ldr	r0, [r5, #0]
 802206e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022072:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8022076:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 802207a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802207e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022082:	440a      	add	r2, r1
 8022084:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8022088:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 802208c:	4413      	add	r3, r2
 802208e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022092:	6803      	ldr	r3, [r0, #0]
 8022094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022096:	4798      	blx	r3
 8022098:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802209c:	d119      	bne.n	80220d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 802209e:	f010 0f20 	tst.w	r0, #32
 80220a2:	6828      	ldr	r0, [r5, #0]
 80220a4:	d018      	beq.n	80220d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80220a6:	2500      	movs	r5, #0
 80220a8:	6801      	ldr	r1, [r0, #0]
 80220aa:	b2b6      	uxth	r6, r6
 80220ac:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80220b0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80220b4:	9601      	str	r6, [sp, #4]
 80220b6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80220ba:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80220be:	9502      	str	r5, [sp, #8]
 80220c0:	fa1f f588 	uxth.w	r5, r8
 80220c4:	9500      	str	r5, [sp, #0]
 80220c6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80220c8:	4621      	mov	r1, r4
 80220ca:	47a8      	blx	r5
 80220cc:	b00d      	add	sp, #52	@ 0x34
 80220ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220d2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80220d6:	e7e4      	b.n	80220a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80220d8:	6803      	ldr	r3, [r0, #0]
 80220da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80220dc:	4798      	blx	r3
 80220de:	4947      	ldr	r1, [pc, #284]	@ (80221fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80220e0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80220e4:	880b      	ldrh	r3, [r1, #0]
 80220e6:	468a      	mov	sl, r1
 80220e8:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80220ec:	fb03 5202 	mla	r2, r3, r2, r5
 80220f0:	4373      	muls	r3, r6
 80220f2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80220f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80220fa:	9307      	str	r3, [sp, #28]
 80220fc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022100:	9306      	str	r3, [sp, #24]
 8022102:	9b07      	ldr	r3, [sp, #28]
 8022104:	4298      	cmp	r0, r3
 8022106:	d270      	bcs.n	80221ea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022108:	9b06      	ldr	r3, [sp, #24]
 802210a:	4621      	mov	r1, r4
 802210c:	eb00 0b03 	add.w	fp, r0, r3
 8022110:	4558      	cmp	r0, fp
 8022112:	d25d      	bcs.n	80221d0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022114:	f851 4b04 	ldr.w	r4, [r1], #4
 8022118:	0e23      	lsrs	r3, r4, #24
 802211a:	d014      	beq.n	8022146 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 802211c:	2bff      	cmp	r3, #255	@ 0xff
 802211e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022122:	d112      	bne.n	802214a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022124:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022128:	d10f      	bne.n	802214a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 802212a:	0963      	lsrs	r3, r4, #5
 802212c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8022130:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022134:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022138:	f02c 0c07 	bic.w	ip, ip, #7
 802213c:	ea43 0c0c 	orr.w	ip, r3, ip
 8022140:	ea4c 0404 	orr.w	r4, ip, r4
 8022144:	8004      	strh	r4, [r0, #0]
 8022146:	3002      	adds	r0, #2
 8022148:	e7e2      	b.n	8022110 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 802214a:	fb09 f303 	mul.w	r3, r9, r3
 802214e:	8807      	ldrh	r7, [r0, #0]
 8022150:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022154:	fa5f fc8c 	uxtb.w	ip, ip
 8022158:	1c5a      	adds	r2, r3, #1
 802215a:	123e      	asrs	r6, r7, #8
 802215c:	10fd      	asrs	r5, r7, #3
 802215e:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022162:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022166:	00ff      	lsls	r7, r7, #3
 8022168:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802216c:	1212      	asrs	r2, r2, #8
 802216e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022172:	b293      	uxth	r3, r2
 8022174:	43d2      	mvns	r2, r2
 8022176:	b2ff      	uxtb	r7, r7
 8022178:	fb1e fe03 	smulbb	lr, lr, r3
 802217c:	b2d2      	uxtb	r2, r2
 802217e:	fb1c fc03 	smulbb	ip, ip, r3
 8022182:	b2e4      	uxtb	r4, r4
 8022184:	fb06 e602 	mla	r6, r6, r2, lr
 8022188:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802218c:	fb14 f403 	smulbb	r4, r4, r3
 8022190:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022194:	b2b6      	uxth	r6, r6
 8022196:	fb05 c502 	mla	r5, r5, r2, ip
 802219a:	fb07 4702 	mla	r7, r7, r2, r4
 802219e:	f106 0e01 	add.w	lr, r6, #1
 80221a2:	b2ad      	uxth	r5, r5
 80221a4:	b2bf      	uxth	r7, r7
 80221a6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80221aa:	f105 0c01 	add.w	ip, r5, #1
 80221ae:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 80221b2:	1c7e      	adds	r6, r7, #1
 80221b4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80221b8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80221bc:	096d      	lsrs	r5, r5, #5
 80221be:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80221c2:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80221c6:	ea46 060e 	orr.w	r6, r6, lr
 80221ca:	432e      	orrs	r6, r5
 80221cc:	8006      	strh	r6, [r0, #0]
 80221ce:	e7ba      	b.n	8022146 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80221d0:	f8ba 3000 	ldrh.w	r3, [sl]
 80221d4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80221d8:	eba3 0308 	sub.w	r3, r3, r8
 80221dc:	eba4 0408 	sub.w	r4, r4, r8
 80221e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80221e4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80221e8:	e78b      	b.n	8022102 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80221ea:	4b03      	ldr	r3, [pc, #12]	@ (80221f8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80221ec:	6818      	ldr	r0, [r3, #0]
 80221ee:	6803      	ldr	r3, [r0, #0]
 80221f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80221f2:	4798      	blx	r3
 80221f4:	e76a      	b.n	80220cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80221f6:	bf00      	nop
 80221f8:	2400b8cc 	.word	0x2400b8cc
 80221fc:	2400b8c6 	.word	0x2400b8c6

08022200 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022204:	b085      	sub	sp, #20
 8022206:	6810      	ldr	r0, [r2, #0]
 8022208:	460c      	mov	r4, r1
 802220a:	6851      	ldr	r1, [r2, #4]
 802220c:	466d      	mov	r5, sp
 802220e:	4616      	mov	r6, r2
 8022210:	c503      	stmia	r5!, {r0, r1}
 8022212:	6818      	ldr	r0, [r3, #0]
 8022214:	6859      	ldr	r1, [r3, #4]
 8022216:	c503      	stmia	r5!, {r0, r1}
 8022218:	4668      	mov	r0, sp
 802221a:	4d2e      	ldr	r5, [pc, #184]	@ (80222d4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 802221c:	f7f9 fb76 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022220:	4631      	mov	r1, r6
 8022222:	a802      	add	r0, sp, #8
 8022224:	4e2c      	ldr	r6, [pc, #176]	@ (80222d8 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022226:	f7f9 fb99 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802222a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802222e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022232:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022236:	6828      	ldr	r0, [r5, #0]
 8022238:	fb11 2103 	smlabb	r1, r1, r3, r2
 802223c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022240:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022244:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022248:	f8bd 1000 	ldrh.w	r1, [sp]
 802224c:	440a      	add	r2, r1
 802224e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022252:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022256:	4413      	add	r3, r2
 8022258:	f8ad 300a 	strh.w	r3, [sp, #10]
 802225c:	6803      	ldr	r3, [r0, #0]
 802225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022260:	4798      	blx	r3
 8022262:	8833      	ldrh	r3, [r6, #0]
 8022264:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022268:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 802226c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022270:	f8df e068 	ldr.w	lr, [pc, #104]	@ 80222dc <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022274:	fb03 1202 	mla	r2, r3, r2, r1
 8022278:	fb08 f303 	mul.w	r3, r8, r3
 802227c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022280:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022284:	4298      	cmp	r0, r3
 8022286:	d21d      	bcs.n	80222c4 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022288:	eb00 080c 	add.w	r8, r0, ip
 802228c:	4540      	cmp	r0, r8
 802228e:	d20f      	bcs.n	80222b0 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022290:	f854 1b04 	ldr.w	r1, [r4], #4
 8022294:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022298:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 802229c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80222a0:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80222a4:	ea42 0209 	orr.w	r2, r2, r9
 80222a8:	430a      	orrs	r2, r1
 80222aa:	f820 2b02 	strh.w	r2, [r0], #2
 80222ae:	e7ed      	b.n	802228c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80222b0:	8832      	ldrh	r2, [r6, #0]
 80222b2:	1bd2      	subs	r2, r2, r7
 80222b4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80222b8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80222bc:	1bd2      	subs	r2, r2, r7
 80222be:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80222c2:	e7df      	b.n	8022284 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80222c4:	6828      	ldr	r0, [r5, #0]
 80222c6:	6803      	ldr	r3, [r0, #0]
 80222c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80222ca:	4798      	blx	r3
 80222cc:	b005      	add	sp, #20
 80222ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80222d2:	bf00      	nop
 80222d4:	2400b8cc 	.word	0x2400b8cc
 80222d8:	2400b8c6 	.word	0x2400b8c6
 80222dc:	fffff800 	.word	0xfffff800

080222e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80222e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222e4:	b08e      	sub	sp, #56	@ 0x38
 80222e6:	460e      	mov	r6, r1
 80222e8:	4604      	mov	r4, r0
 80222ea:	461d      	mov	r5, r3
 80222ec:	6808      	ldr	r0, [r1, #0]
 80222ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80222f0:	6849      	ldr	r1, [r1, #4]
 80222f2:	f8df 81d4 	ldr.w	r8, [pc, #468]	@ 80224c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80222f6:	f8df 91d4 	ldr.w	r9, [pc, #468]	@ 80224cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80222fa:	c303      	stmia	r3!, {r0, r1}
 80222fc:	6810      	ldr	r0, [r2, #0]
 80222fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8022300:	6851      	ldr	r1, [r2, #4]
 8022302:	c303      	stmia	r3!, {r0, r1}
 8022304:	a80a      	add	r0, sp, #40	@ 0x28
 8022306:	f7f9 fb01 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802230a:	4631      	mov	r1, r6
 802230c:	a80c      	add	r0, sp, #48	@ 0x30
 802230e:	f7f9 fb25 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022312:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8022316:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802231a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802231e:	f8d8 0000 	ldr.w	r0, [r8]
 8022322:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022326:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 802232a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802232e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8022332:	440c      	add	r4, r1
 8022334:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8022338:	440a      	add	r2, r1
 802233a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802233e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8022342:	4413      	add	r3, r2
 8022344:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022348:	6803      	ldr	r3, [r0, #0]
 802234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802234c:	4798      	blx	r3
 802234e:	2dff      	cmp	r5, #255	@ 0xff
 8022350:	d124      	bne.n	802239c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8022352:	f010 0f01 	tst.w	r0, #1
 8022356:	f8d8 0000 	ldr.w	r0, [r8]
 802235a:	d022      	beq.n	80223a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 802235c:	2100      	movs	r1, #0
 802235e:	f04f 0e01 	mov.w	lr, #1
 8022362:	f8d0 c000 	ldr.w	ip, [r0]
 8022366:	b2b6      	uxth	r6, r6
 8022368:	f8cd e018 	str.w	lr, [sp, #24]
 802236c:	b2bf      	uxth	r7, r7
 802236e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8022372:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 8022376:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802237a:	f8b9 e000 	ldrh.w	lr, [r9]
 802237e:	9503      	str	r5, [sp, #12]
 8022380:	9601      	str	r6, [sp, #4]
 8022382:	9700      	str	r7, [sp, #0]
 8022384:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8022388:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802238c:	9102      	str	r1, [sp, #8]
 802238e:	4621      	mov	r1, r4
 8022390:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8022394:	47a8      	blx	r5
 8022396:	b00e      	add	sp, #56	@ 0x38
 8022398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802239c:	f010 0f04 	tst.w	r0, #4
 80223a0:	e7d9      	b.n	8022356 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80223a2:	6803      	ldr	r3, [r0, #0]
 80223a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80223a6:	4798      	blx	r3
 80223a8:	f8b9 3000 	ldrh.w	r3, [r9]
 80223ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80223b0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80223b4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80223b8:	435e      	muls	r6, r3
 80223ba:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80223be:	2dff      	cmp	r5, #255	@ 0xff
 80223c0:	fb03 1202 	mla	r2, r3, r2, r1
 80223c4:	ebac 0c07 	sub.w	ip, ip, r7
 80223c8:	eba3 0707 	sub.w	r7, r3, r7
 80223cc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80223d0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80223d4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80223d8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80223dc:	d049      	beq.n	8022472 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80223de:	43eb      	mvns	r3, r5
 80223e0:	fa1f f985 	uxth.w	r9, r5
 80223e4:	b2db      	uxtb	r3, r3
 80223e6:	42b0      	cmp	r0, r6
 80223e8:	d266      	bcs.n	80224b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80223ea:	eb00 0a0e 	add.w	sl, r0, lr
 80223ee:	4550      	cmp	r0, sl
 80223f0:	4621      	mov	r1, r4
 80223f2:	f104 0403 	add.w	r4, r4, #3
 80223f6:	d25b      	bcs.n	80224b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80223f8:	8802      	ldrh	r2, [r0, #0]
 80223fa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80223fe:	ea4f 2822 	mov.w	r8, r2, asr #8
 8022402:	fb11 f109 	smulbb	r1, r1, r9
 8022406:	10d5      	asrs	r5, r2, #3
 8022408:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 802240c:	00d2      	lsls	r2, r2, #3
 802240e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022412:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8022416:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802241a:	fb08 1803 	mla	r8, r8, r3, r1
 802241e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8022422:	b2d2      	uxtb	r2, r2
 8022424:	fb11 f109 	smulbb	r1, r1, r9
 8022428:	fa1f f888 	uxth.w	r8, r8
 802242c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022430:	fb05 1503 	mla	r5, r5, r3, r1
 8022434:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8022438:	fb11 f109 	smulbb	r1, r1, r9
 802243c:	b2ad      	uxth	r5, r5
 802243e:	fb02 1203 	mla	r2, r2, r3, r1
 8022442:	f108 0101 	add.w	r1, r8, #1
 8022446:	b292      	uxth	r2, r2
 8022448:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802244c:	1c51      	adds	r1, r2, #1
 802244e:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8022452:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022456:	1c69      	adds	r1, r5, #1
 8022458:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802245c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022460:	096d      	lsrs	r5, r5, #5
 8022462:	ea42 0208 	orr.w	r2, r2, r8
 8022466:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802246a:	432a      	orrs	r2, r5
 802246c:	f820 2b02 	strh.w	r2, [r0], #2
 8022470:	e7bd      	b.n	80223ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8022472:	4a14      	ldr	r2, [pc, #80]	@ (80224c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8022474:	42b0      	cmp	r0, r6
 8022476:	d21f      	bcs.n	80224b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8022478:	eb00 050e 	add.w	r5, r0, lr
 802247c:	42a8      	cmp	r0, r5
 802247e:	4621      	mov	r1, r4
 8022480:	f104 0403 	add.w	r4, r4, #3
 8022484:	d210      	bcs.n	80224a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8022486:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802248a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802248e:	00db      	lsls	r3, r3, #3
 8022490:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8022494:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022498:	430b      	orrs	r3, r1
 802249a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802249e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80224a2:	f820 3b02 	strh.w	r3, [r0], #2
 80224a6:	e7e9      	b.n	802247c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80224a8:	4438      	add	r0, r7
 80224aa:	eb01 040c 	add.w	r4, r1, ip
 80224ae:	e7e1      	b.n	8022474 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80224b0:	4438      	add	r0, r7
 80224b2:	eb01 040c 	add.w	r4, r1, ip
 80224b6:	e796      	b.n	80223e6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80224b8:	4b03      	ldr	r3, [pc, #12]	@ (80224c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80224ba:	6818      	ldr	r0, [r3, #0]
 80224bc:	6803      	ldr	r3, [r0, #0]
 80224be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80224c0:	4798      	blx	r3
 80224c2:	e768      	b.n	8022396 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80224c4:	fffff800 	.word	0xfffff800
 80224c8:	2400b8cc 	.word	0x2400b8cc
 80224cc:	2400b8c6 	.word	0x2400b8c6

080224d0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80224d0:	b570      	push	{r4, r5, r6, lr}
 80224d2:	9c04      	ldr	r4, [sp, #16]
 80224d4:	4605      	mov	r5, r0
 80224d6:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80224da:	4608      	mov	r0, r1
 80224dc:	4619      	mov	r1, r3
 80224de:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80224e2:	2a0d      	cmp	r2, #13
 80224e4:	d825      	bhi.n	8022532 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 80224e6:	e8df f002 	tbb	[pc, r2]
 80224ea:	1807      	.short	0x1807
 80224ec:	1d1d1d13 	.word	0x1d1d1d13
 80224f0:	1d1d1d1d 	.word	0x1d1d1d1d
 80224f4:	1d1d1d1d 	.word	0x1d1d1d1d
 80224f8:	682a      	ldr	r2, [r5, #0]
 80224fa:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80224fe:	68d6      	ldr	r6, [r2, #12]
 8022500:	4623      	mov	r3, r4
 8022502:	460a      	mov	r2, r1
 8022504:	4601      	mov	r1, r0
 8022506:	46b4      	mov	ip, r6
 8022508:	4628      	mov	r0, r5
 802250a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802250e:	4760      	bx	ip
 8022510:	4622      	mov	r2, r4
 8022512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022516:	f7ff bd8d 	b.w	8022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802251a:	4622      	mov	r2, r4
 802251c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022520:	f7ff bede 	b.w	80222e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022524:	4b03      	ldr	r3, [pc, #12]	@ (8022534 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8022526:	f240 315d 	movw	r1, #861	@ 0x35d
 802252a:	4a03      	ldr	r2, [pc, #12]	@ (8022538 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 802252c:	4803      	ldr	r0, [pc, #12]	@ (802253c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 802252e:	f008 fd1b 	bl	802af68 <__assert_func>
 8022532:	bd70      	pop	{r4, r5, r6, pc}
 8022534:	0803011a 	.word	0x0803011a
 8022538:	0803087a 	.word	0x0803087a
 802253c:	0802fff5 	.word	0x0802fff5

08022540 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8022540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022544:	b093      	sub	sp, #76	@ 0x4c
 8022546:	880e      	ldrh	r6, [r1, #0]
 8022548:	4681      	mov	r9, r0
 802254a:	4688      	mov	r8, r1
 802254c:	4615      	mov	r5, r2
 802254e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8022552:	b136      	cbz	r6, 8022562 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8022554:	4b70      	ldr	r3, [pc, #448]	@ (8022718 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8022556:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 802255a:	4a70      	ldr	r2, [pc, #448]	@ (802271c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 802255c:	4870      	ldr	r0, [pc, #448]	@ (8022720 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 802255e:	f008 fd03 	bl	802af68 <__assert_func>
 8022562:	6810      	ldr	r0, [r2, #0]
 8022564:	ac0e      	add	r4, sp, #56	@ 0x38
 8022566:	6851      	ldr	r1, [r2, #4]
 8022568:	4f6e      	ldr	r7, [pc, #440]	@ (8022724 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802256a:	f8df b1bc 	ldr.w	fp, [pc, #444]	@ 8022728 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802256e:	c403      	stmia	r4!, {r0, r1}
 8022570:	6818      	ldr	r0, [r3, #0]
 8022572:	ac10      	add	r4, sp, #64	@ 0x40
 8022574:	6859      	ldr	r1, [r3, #4]
 8022576:	c403      	stmia	r4!, {r0, r1}
 8022578:	a80e      	add	r0, sp, #56	@ 0x38
 802257a:	f7f9 f9c7 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802257e:	4629      	mov	r1, r5
 8022580:	a810      	add	r0, sp, #64	@ 0x40
 8022582:	f7f9 f9eb 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022586:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 802258a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 802258e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8022592:	6838      	ldr	r0, [r7, #0]
 8022594:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022598:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 802259c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80225a0:	4489      	add	r9, r1
 80225a2:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 80225a6:	440a      	add	r2, r1
 80225a8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80225ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80225b0:	4413      	add	r3, r2
 80225b2:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 80225b6:	6803      	ldr	r3, [r0, #0]
 80225b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225ba:	4798      	blx	r3
 80225bc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80225c0:	6838      	ldr	r0, [r7, #0]
 80225c2:	d01d      	beq.n	8022600 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 80225c4:	210b      	movs	r1, #11
 80225c6:	6802      	ldr	r2, [r0, #0]
 80225c8:	b2a4      	uxth	r4, r4
 80225ca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80225ce:	9107      	str	r1, [sp, #28]
 80225d0:	b2ad      	uxth	r5, r5
 80225d2:	e9cd 6608 	strd	r6, r6, [sp, #32]
 80225d6:	f8bb 1000 	ldrh.w	r1, [fp]
 80225da:	9502      	str	r5, [sp, #8]
 80225dc:	9106      	str	r1, [sp, #24]
 80225de:	2101      	movs	r1, #1
 80225e0:	9401      	str	r4, [sp, #4]
 80225e2:	e9cd a104 	strd	sl, r1, [sp, #16]
 80225e6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80225ea:	9103      	str	r1, [sp, #12]
 80225ec:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 80225f0:	9100      	str	r1, [sp, #0]
 80225f2:	4649      	mov	r1, r9
 80225f4:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
 80225f6:	4642      	mov	r2, r8
 80225f8:	47a0      	blx	r4
 80225fa:	b013      	add	sp, #76	@ 0x4c
 80225fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022600:	6803      	ldr	r3, [r0, #0]
 8022602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022604:	4798      	blx	r3
 8022606:	f8bb 3000 	ldrh.w	r3, [fp]
 802260a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 802260e:	f04f 0e04 	mov.w	lr, #4
 8022612:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8022616:	435d      	muls	r5, r3
 8022618:	fb03 1202 	mla	r2, r3, r2, r1
 802261c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022620:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8022624:	920c      	str	r2, [sp, #48]	@ 0x30
 8022626:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 802262a:	1b12      	subs	r2, r2, r4
 802262c:	920d      	str	r2, [sp, #52]	@ 0x34
 802262e:	0062      	lsls	r2, r4, #1
 8022630:	1b1c      	subs	r4, r3, r4
 8022632:	920a      	str	r2, [sp, #40]	@ 0x28
 8022634:	0063      	lsls	r3, r4, #1
 8022636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802263a:	4298      	cmp	r0, r3
 802263c:	d266      	bcs.n	802270c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 802263e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022640:	eb00 0b03 	add.w	fp, r0, r3
 8022644:	4558      	cmp	r0, fp
 8022646:	d25c      	bcs.n	8022702 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 8022648:	f819 3b01 	ldrb.w	r3, [r9], #1
 802264c:	fb1e e303 	smlabb	r3, lr, r3, lr
 8022650:	f858 2003 	ldr.w	r2, [r8, r3]
 8022654:	0e11      	lsrs	r1, r2, #24
 8022656:	d012      	beq.n	802267e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8022658:	29ff      	cmp	r1, #255	@ 0xff
 802265a:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802265e:	d110      	bne.n	8022682 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022660:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022664:	d10d      	bne.n	8022682 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8022666:	0953      	lsrs	r3, r2, #5
 8022668:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 802266c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022670:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022674:	f027 0707 	bic.w	r7, r7, #7
 8022678:	431f      	orrs	r7, r3
 802267a:	433a      	orrs	r2, r7
 802267c:	8002      	strh	r2, [r0, #0]
 802267e:	3002      	adds	r0, #2
 8022680:	e7e0      	b.n	8022644 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 8022682:	fb0a f101 	mul.w	r1, sl, r1
 8022686:	8806      	ldrh	r6, [r0, #0]
 8022688:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802268c:	b2d2      	uxtb	r2, r2
 802268e:	1c4b      	adds	r3, r1, #1
 8022690:	1235      	asrs	r5, r6, #8
 8022692:	10f4      	asrs	r4, r6, #3
 8022694:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8022698:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802269c:	00f6      	lsls	r6, r6, #3
 802269e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80226a2:	121b      	asrs	r3, r3, #8
 80226a4:	b2f6      	uxtb	r6, r6
 80226a6:	b299      	uxth	r1, r3
 80226a8:	43db      	mvns	r3, r3
 80226aa:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80226ae:	fb1c fc01 	smulbb	ip, ip, r1
 80226b2:	b2db      	uxtb	r3, r3
 80226b4:	fb12 f201 	smulbb	r2, r2, r1
 80226b8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80226bc:	fb05 c503 	mla	r5, r5, r3, ip
 80226c0:	b2ff      	uxtb	r7, r7
 80226c2:	fb06 2203 	mla	r2, r6, r3, r2
 80226c6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80226ca:	fb17 f701 	smulbb	r7, r7, r1
 80226ce:	b2ad      	uxth	r5, r5
 80226d0:	b292      	uxth	r2, r2
 80226d2:	fb04 7403 	mla	r4, r4, r3, r7
 80226d6:	f105 0c01 	add.w	ip, r5, #1
 80226da:	1c57      	adds	r7, r2, #1
 80226dc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80226e0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80226e4:	b2a4      	uxth	r4, r4
 80226e6:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80226ea:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80226ee:	433d      	orrs	r5, r7
 80226f0:	1c67      	adds	r7, r4, #1
 80226f2:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80226f6:	0964      	lsrs	r4, r4, #5
 80226f8:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80226fc:	4325      	orrs	r5, r4
 80226fe:	8005      	strh	r5, [r0, #0]
 8022700:	e7bd      	b.n	802267e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8022702:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022704:	4418      	add	r0, r3
 8022706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022708:	4499      	add	r9, r3
 802270a:	e795      	b.n	8022638 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 802270c:	4b05      	ldr	r3, [pc, #20]	@ (8022724 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 802270e:	6818      	ldr	r0, [r3, #0]
 8022710:	6803      	ldr	r3, [r0, #0]
 8022712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022714:	4798      	blx	r3
 8022716:	e770      	b.n	80225fa <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 8022718:	0802fef3 	.word	0x0802fef3
 802271c:	0803064b 	.word	0x0803064b
 8022720:	0802fff5 	.word	0x0802fff5
 8022724:	2400b8cc 	.word	0x2400b8cc
 8022728:	2400b8c6 	.word	0x2400b8c6

0802272c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 802272c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022730:	4614      	mov	r4, r2
 8022732:	880a      	ldrh	r2, [r1, #0]
 8022734:	b087      	sub	sp, #28
 8022736:	4680      	mov	r8, r0
 8022738:	2a02      	cmp	r2, #2
 802273a:	460d      	mov	r5, r1
 802273c:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8022740:	d006      	beq.n	8022750 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8022742:	4b63      	ldr	r3, [pc, #396]	@ (80228d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 8022744:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8022748:	4a62      	ldr	r2, [pc, #392]	@ (80228d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 802274a:	4863      	ldr	r0, [pc, #396]	@ (80228d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 802274c:	f008 fc0c 	bl	802af68 <__assert_func>
 8022750:	2e00      	cmp	r6, #0
 8022752:	f000 80b9 	beq.w	80228c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8022756:	6820      	ldr	r0, [r4, #0]
 8022758:	af02      	add	r7, sp, #8
 802275a:	6861      	ldr	r1, [r4, #4]
 802275c:	c703      	stmia	r7!, {r0, r1}
 802275e:	6818      	ldr	r0, [r3, #0]
 8022760:	af04      	add	r7, sp, #16
 8022762:	6859      	ldr	r1, [r3, #4]
 8022764:	c703      	stmia	r7!, {r0, r1}
 8022766:	a802      	add	r0, sp, #8
 8022768:	f7f9 f8d0 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802276c:	4621      	mov	r1, r4
 802276e:	a804      	add	r0, sp, #16
 8022770:	f7f9 f8f4 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022774:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022778:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802277c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8022780:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8022784:	fb14 2103 	smlabb	r1, r4, r3, r2
 8022788:	eb08 0401 	add.w	r4, r8, r1
 802278c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022790:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022794:	440a      	add	r2, r1
 8022796:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802279a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802279e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80227a2:	4413      	add	r3, r2
 80227a4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80227a8:	4b4c      	ldr	r3, [pc, #304]	@ (80228dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80227aa:	6818      	ldr	r0, [r3, #0]
 80227ac:	6803      	ldr	r3, [r0, #0]
 80227ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80227b0:	4798      	blx	r3
 80227b2:	4b4b      	ldr	r3, [pc, #300]	@ (80228e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 80227b4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80227b8:	2eff      	cmp	r6, #255	@ 0xff
 80227ba:	881a      	ldrh	r2, [r3, #0]
 80227bc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80227c0:	fb02 c101 	mla	r1, r2, r1, ip
 80227c4:	fb02 f207 	mul.w	r2, r2, r7
 80227c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80227cc:	f105 0104 	add.w	r1, r5, #4
 80227d0:	461d      	mov	r5, r3
 80227d2:	d05a      	beq.n	802288a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 80227d4:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 80227d8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80227dc:	b2b6      	uxth	r6, r6
 80227de:	9301      	str	r3, [sp, #4]
 80227e0:	fa1f fe8e 	uxth.w	lr, lr
 80227e4:	4282      	cmp	r2, r0
 80227e6:	d96a      	bls.n	80228be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 80227e8:	eb00 0b0a 	add.w	fp, r0, sl
 80227ec:	4583      	cmp	fp, r0
 80227ee:	d940      	bls.n	8022872 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 80227f0:	8805      	ldrh	r5, [r0, #0]
 80227f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80227f6:	122f      	asrs	r7, r5, #8
 80227f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80227fc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8022800:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022804:	00ed      	lsls	r5, r5, #3
 8022806:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802280a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 802280e:	fb17 f70e 	smulbb	r7, r7, lr
 8022812:	b2ed      	uxtb	r5, r5
 8022814:	fb19 f90e 	smulbb	r9, r9, lr
 8022818:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802281c:	fb15 f50e 	smulbb	r5, r5, lr
 8022820:	fb0c 7c06 	mla	ip, ip, r6, r7
 8022824:	10df      	asrs	r7, r3, #3
 8022826:	00db      	lsls	r3, r3, #3
 8022828:	fa1f fc8c 	uxth.w	ip, ip
 802282c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8022830:	b2db      	uxtb	r3, r3
 8022832:	fb07 9706 	mla	r7, r7, r6, r9
 8022836:	f10c 0901 	add.w	r9, ip, #1
 802283a:	fb03 5306 	mla	r3, r3, r6, r5
 802283e:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8022842:	b29b      	uxth	r3, r3
 8022844:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8022848:	b2bf      	uxth	r7, r7
 802284a:	f103 0c01 	add.w	ip, r3, #1
 802284e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022852:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022856:	ea4c 0c09 	orr.w	ip, ip, r9
 802285a:	f107 0901 	add.w	r9, r7, #1
 802285e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8022862:	097f      	lsrs	r7, r7, #5
 8022864:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8022868:	ea4c 0c07 	orr.w	ip, ip, r7
 802286c:	f820 cb02 	strh.w	ip, [r0], #2
 8022870:	e7bc      	b.n	80227ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8022872:	9b01      	ldr	r3, [sp, #4]
 8022874:	881b      	ldrh	r3, [r3, #0]
 8022876:	eba3 0308 	sub.w	r3, r3, r8
 802287a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802287e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8022882:	eba3 0308 	sub.w	r3, r3, r8
 8022886:	441c      	add	r4, r3
 8022888:	e7ac      	b.n	80227e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 802288a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802288e:	4282      	cmp	r2, r0
 8022890:	d915      	bls.n	80228be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8022892:	eb00 060a 	add.w	r6, r0, sl
 8022896:	4286      	cmp	r6, r0
 8022898:	d906      	bls.n	80228a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 802289a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802289e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80228a2:	f820 3b02 	strh.w	r3, [r0], #2
 80228a6:	e7f6      	b.n	8022896 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 80228a8:	882b      	ldrh	r3, [r5, #0]
 80228aa:	eba3 0308 	sub.w	r3, r3, r8
 80228ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80228b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80228b6:	eba3 0308 	sub.w	r3, r3, r8
 80228ba:	441c      	add	r4, r3
 80228bc:	e7e7      	b.n	802288e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 80228be:	4b07      	ldr	r3, [pc, #28]	@ (80228dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80228c0:	6818      	ldr	r0, [r3, #0]
 80228c2:	6803      	ldr	r3, [r0, #0]
 80228c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228c6:	4798      	blx	r3
 80228c8:	b007      	add	sp, #28
 80228ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ce:	bf00      	nop
 80228d0:	0802fe23 	.word	0x0802fe23
 80228d4:	080304b5 	.word	0x080304b5
 80228d8:	0802fff5 	.word	0x0802fff5
 80228dc:	2400b8cc 	.word	0x2400b8cc
 80228e0:	2400b8c6 	.word	0x2400b8c6

080228e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80228e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228e8:	f8b1 9000 	ldrh.w	r9, [r1]
 80228ec:	b091      	sub	sp, #68	@ 0x44
 80228ee:	4604      	mov	r4, r0
 80228f0:	460f      	mov	r7, r1
 80228f2:	f1b9 0f01 	cmp.w	r9, #1
 80228f6:	4690      	mov	r8, r2
 80228f8:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80228fc:	d006      	beq.n	802290c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 80228fe:	4b84      	ldr	r3, [pc, #528]	@ (8022b10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 8022900:	f240 212f 	movw	r1, #559	@ 0x22f
 8022904:	4a83      	ldr	r2, [pc, #524]	@ (8022b14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 8022906:	4884      	ldr	r0, [pc, #528]	@ (8022b18 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 8022908:	f008 fb2e 	bl	802af68 <__assert_func>
 802290c:	2d00      	cmp	r5, #0
 802290e:	d04f      	beq.n	80229b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8022910:	6810      	ldr	r0, [r2, #0]
 8022912:	ae0c      	add	r6, sp, #48	@ 0x30
 8022914:	6851      	ldr	r1, [r2, #4]
 8022916:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8022b20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 802291a:	c603      	stmia	r6!, {r0, r1}
 802291c:	6818      	ldr	r0, [r3, #0]
 802291e:	ae0e      	add	r6, sp, #56	@ 0x38
 8022920:	6859      	ldr	r1, [r3, #4]
 8022922:	c603      	stmia	r6!, {r0, r1}
 8022924:	a80c      	add	r0, sp, #48	@ 0x30
 8022926:	f7f8 fff1 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802292a:	4641      	mov	r1, r8
 802292c:	a80e      	add	r0, sp, #56	@ 0x38
 802292e:	f8df 81f4 	ldr.w	r8, [pc, #500]	@ 8022b24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 8022932:	f7f9 f813 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022936:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 802293a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 802293e:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8022942:	f8db 0000 	ldr.w	r0, [fp]
 8022946:	fb11 2103 	smlabb	r1, r1, r3, r2
 802294a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 802294e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8022952:	440c      	add	r4, r1
 8022954:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8022958:	440a      	add	r2, r1
 802295a:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 802295e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8022962:	4413      	add	r3, r2
 8022964:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8022968:	6803      	ldr	r3, [r0, #0]
 802296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802296c:	4798      	blx	r3
 802296e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8022972:	f8db 0000 	ldr.w	r0, [fp]
 8022976:	d01e      	beq.n	80229b6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8022978:	2200      	movs	r2, #0
 802297a:	6801      	ldr	r1, [r0, #0]
 802297c:	b2b6      	uxth	r6, r6
 802297e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8022982:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8022986:	220b      	movs	r2, #11
 8022988:	9207      	str	r2, [sp, #28]
 802298a:	f8b8 2000 	ldrh.w	r2, [r8]
 802298e:	9504      	str	r5, [sp, #16]
 8022990:	9601      	str	r6, [sp, #4]
 8022992:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8022996:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 802299a:	9203      	str	r2, [sp, #12]
 802299c:	fa1f f28a 	uxth.w	r2, sl
 80229a0:	9202      	str	r2, [sp, #8]
 80229a2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80229a6:	9200      	str	r2, [sp, #0]
 80229a8:	463a      	mov	r2, r7
 80229aa:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80229ac:	4621      	mov	r1, r4
 80229ae:	47a8      	blx	r5
 80229b0:	b011      	add	sp, #68	@ 0x44
 80229b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229b6:	6803      	ldr	r3, [r0, #0]
 80229b8:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80229bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80229be:	4798      	blx	r3
 80229c0:	f8b8 2000 	ldrh.w	r2, [r8]
 80229c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80229c8:	2dff      	cmp	r5, #255	@ 0xff
 80229ca:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80229ce:	fb0a fa02 	mul.w	sl, sl, r2
 80229d2:	fb02 1303 	mla	r3, r2, r3, r1
 80229d6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80229da:	d062      	beq.n	8022aa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 80229dc:	ea6f 0c05 	mvn.w	ip, r5
 80229e0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 80229e4:	b2ad      	uxth	r5, r5
 80229e6:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 80229ea:	fa5f fc8c 	uxtb.w	ip, ip
 80229ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80229f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80229f2:	4298      	cmp	r0, r3
 80229f4:	f080 8085 	bcs.w	8022b02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80229f8:	eb00 0b09 	add.w	fp, r0, r9
 80229fc:	4558      	cmp	r0, fp
 80229fe:	d246      	bcs.n	8022a8e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8022a00:	f814 eb01 	ldrb.w	lr, [r4], #1
 8022a04:	2303      	movs	r3, #3
 8022a06:	2204      	movs	r2, #4
 8022a08:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8022a0c:	8803      	ldrh	r3, [r0, #0]
 8022a0e:	eb07 0a0e 	add.w	sl, r7, lr
 8022a12:	1219      	asrs	r1, r3, #8
 8022a14:	10da      	asrs	r2, r3, #3
 8022a16:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022a1a:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8022a1e:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8022a22:	00db      	lsls	r3, r3, #3
 8022a24:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8022a28:	fb18 f805 	smulbb	r8, r8, r5
 8022a2c:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022a30:	fb1e fe05 	smulbb	lr, lr, r5
 8022a34:	b2db      	uxtb	r3, r3
 8022a36:	fb01 810c 	mla	r1, r1, ip, r8
 8022a3a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8022a3e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022a42:	fb18 f805 	smulbb	r8, r8, r5
 8022a46:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022a4a:	b289      	uxth	r1, r1
 8022a4c:	fb02 820c 	mla	r2, r2, ip, r8
 8022a50:	fb03 e30c 	mla	r3, r3, ip, lr
 8022a54:	f101 0801 	add.w	r8, r1, #1
 8022a58:	b292      	uxth	r2, r2
 8022a5a:	b29b      	uxth	r3, r3
 8022a5c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8022a60:	f102 0801 	add.w	r8, r2, #1
 8022a64:	f103 0e01 	add.w	lr, r3, #1
 8022a68:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8022a6c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8022a70:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8022a74:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8022a78:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022a7c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8022a80:	ea4e 0101 	orr.w	r1, lr, r1
 8022a84:	ea41 0108 	orr.w	r1, r1, r8
 8022a88:	f820 1b02 	strh.w	r1, [r0], #2
 8022a8c:	e7b6      	b.n	80229fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8022a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022a90:	881b      	ldrh	r3, [r3, #0]
 8022a92:	1b9b      	subs	r3, r3, r6
 8022a94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a98:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022a9c:	1b9b      	subs	r3, r3, r6
 8022a9e:	441c      	add	r4, r3
 8022aa0:	e7a6      	b.n	80229f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 8022aa2:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8022aa6:	2203      	movs	r2, #3
 8022aa8:	2504      	movs	r5, #4
 8022aaa:	491c      	ldr	r1, [pc, #112]	@ (8022b1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8022aac:	4550      	cmp	r0, sl
 8022aae:	d228      	bcs.n	8022b02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 8022ab0:	eb00 0c09 	add.w	ip, r0, r9
 8022ab4:	4560      	cmp	r0, ip
 8022ab6:	4623      	mov	r3, r4
 8022ab8:	d219      	bcs.n	8022aee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8022aba:	f893 e000 	ldrb.w	lr, [r3]
 8022abe:	3401      	adds	r4, #1
 8022ac0:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8022ac4:	eb07 0b0e 	add.w	fp, r7, lr
 8022ac8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022acc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8022ad0:	f89b b001 	ldrb.w	fp, [fp, #1]
 8022ad4:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8022ad8:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8022adc:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8022ae0:	ea43 030b 	orr.w	r3, r3, fp
 8022ae4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8022ae8:	f820 3b02 	strh.w	r3, [r0], #2
 8022aec:	e7e2      	b.n	8022ab4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8022aee:	f8b8 3000 	ldrh.w	r3, [r8]
 8022af2:	1b9b      	subs	r3, r3, r6
 8022af4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022af8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022afc:	1b9b      	subs	r3, r3, r6
 8022afe:	441c      	add	r4, r3
 8022b00:	e7d4      	b.n	8022aac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8022b02:	4b07      	ldr	r3, [pc, #28]	@ (8022b20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 8022b04:	6818      	ldr	r0, [r3, #0]
 8022b06:	6803      	ldr	r3, [r0, #0]
 8022b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b0a:	4798      	blx	r3
 8022b0c:	e750      	b.n	80229b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 8022b0e:	bf00      	nop
 8022b10:	0802fe71 	.word	0x0802fe71
 8022b14:	0803053e 	.word	0x0803053e
 8022b18:	0802fff5 	.word	0x0802fff5
 8022b1c:	fffff800 	.word	0xfffff800
 8022b20:	2400b8cc 	.word	0x2400b8cc
 8022b24:	2400b8c6 	.word	0x2400b8c6

08022b28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8022b28:	b430      	push	{r4, r5}
 8022b2a:	780d      	ldrb	r5, [r1, #0]
 8022b2c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8022b30:	2d01      	cmp	r5, #1
 8022b32:	d00a      	beq.n	8022b4a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8022b34:	d305      	bcc.n	8022b42 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8022b36:	2d02      	cmp	r5, #2
 8022b38:	d10b      	bne.n	8022b52 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8022b3a:	9402      	str	r4, [sp, #8]
 8022b3c:	bc30      	pop	{r4, r5}
 8022b3e:	f7ff bdf5 	b.w	802272c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8022b42:	9402      	str	r4, [sp, #8]
 8022b44:	bc30      	pop	{r4, r5}
 8022b46:	f7ff bcfb 	b.w	8022540 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8022b4a:	9402      	str	r4, [sp, #8]
 8022b4c:	bc30      	pop	{r4, r5}
 8022b4e:	f7ff bec9 	b.w	80228e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8022b52:	bc30      	pop	{r4, r5}
 8022b54:	4770      	bx	lr
	...

08022b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8022b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b5c:	b087      	sub	sp, #28
 8022b5e:	4604      	mov	r4, r0
 8022b60:	460e      	mov	r6, r1
 8022b62:	6810      	ldr	r0, [r2, #0]
 8022b64:	6851      	ldr	r1, [r2, #4]
 8022b66:	ad02      	add	r5, sp, #8
 8022b68:	4617      	mov	r7, r2
 8022b6a:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8022b6e:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8022da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8022b72:	c503      	stmia	r5!, {r0, r1}
 8022b74:	6818      	ldr	r0, [r3, #0]
 8022b76:	ad04      	add	r5, sp, #16
 8022b78:	6859      	ldr	r1, [r3, #4]
 8022b7a:	c503      	stmia	r5!, {r0, r1}
 8022b7c:	a802      	add	r0, sp, #8
 8022b7e:	f7f8 fec5 	bl	801b90c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b82:	4639      	mov	r1, r7
 8022b84:	a804      	add	r0, sp, #16
 8022b86:	f7f8 fee9 	bl	801b95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022b8a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022b8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022b92:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8022b96:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8022b9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022b9e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8022ba2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8022ba6:	440e      	add	r6, r1
 8022ba8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8022bac:	440a      	add	r2, r1
 8022bae:	f8ad 2010 	strh.w	r2, [sp, #16]
 8022bb2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8022bb6:	4413      	add	r3, r2
 8022bb8:	f8ad 3012 	strh.w	r3, [sp, #18]
 8022bbc:	4b77      	ldr	r3, [pc, #476]	@ (8022d9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022bbe:	6818      	ldr	r0, [r3, #0]
 8022bc0:	6803      	ldr	r3, [r0, #0]
 8022bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022bc4:	4798      	blx	r3
 8022bc6:	f8b9 b000 	ldrh.w	fp, [r9]
 8022bca:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022bce:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8022bd2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8022bd6:	fb05 f50b 	mul.w	r5, r5, fp
 8022bda:	fb0b 2303 	mla	r3, fp, r3, r2
 8022bde:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022be2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022be6:	9300      	str	r3, [sp, #0]
 8022be8:	d069      	beq.n	8022cbe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8022bea:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8022bee:	4558      	cmp	r0, fp
 8022bf0:	f080 80cc 	bcs.w	8022d8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022bf4:	9b00      	ldr	r3, [sp, #0]
 8022bf6:	4631      	mov	r1, r6
 8022bf8:	18c3      	adds	r3, r0, r3
 8022bfa:	9301      	str	r3, [sp, #4]
 8022bfc:	9b01      	ldr	r3, [sp, #4]
 8022bfe:	4298      	cmp	r0, r3
 8022c00:	d24f      	bcs.n	8022ca2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8022c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022c06:	2a00      	cmp	r2, #0
 8022c08:	d048      	beq.n	8022c9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022c0a:	fb0a f202 	mul.w	r2, sl, r2
 8022c0e:	1c53      	adds	r3, r2, #1
 8022c10:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022c14:	121b      	asrs	r3, r3, #8
 8022c16:	d041      	beq.n	8022c9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8022c18:	8802      	ldrh	r2, [r0, #0]
 8022c1a:	b29e      	uxth	r6, r3
 8022c1c:	f8b4 c000 	ldrh.w	ip, [r4]
 8022c20:	43db      	mvns	r3, r3
 8022c22:	1215      	asrs	r5, r2, #8
 8022c24:	b2db      	uxtb	r3, r3
 8022c26:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022c2a:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8022c2e:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8022c32:	fb15 f503 	smulbb	r5, r5, r3
 8022c36:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8022c3a:	00d2      	lsls	r2, r2, #3
 8022c3c:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8022c40:	fb07 5706 	mla	r7, r7, r6, r5
 8022c44:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8022c48:	b2d2      	uxtb	r2, r2
 8022c4a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022c4e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022c52:	fb1e fe03 	smulbb	lr, lr, r3
 8022c56:	b2bf      	uxth	r7, r7
 8022c58:	fb12 f203 	smulbb	r2, r2, r3
 8022c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8022c60:	fb05 e506 	mla	r5, r5, r6, lr
 8022c64:	f107 0e01 	add.w	lr, r7, #1
 8022c68:	fb0c 2c06 	mla	ip, ip, r6, r2
 8022c6c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8022c70:	fa1f fc8c 	uxth.w	ip, ip
 8022c74:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8022c78:	b2ad      	uxth	r5, r5
 8022c7a:	f10c 0701 	add.w	r7, ip, #1
 8022c7e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022c82:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8022c86:	ea47 070e 	orr.w	r7, r7, lr
 8022c8a:	f105 0e01 	add.w	lr, r5, #1
 8022c8e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8022c92:	096d      	lsrs	r5, r5, #5
 8022c94:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022c98:	432f      	orrs	r7, r5
 8022c9a:	8007      	strh	r7, [r0, #0]
 8022c9c:	3002      	adds	r0, #2
 8022c9e:	3402      	adds	r4, #2
 8022ca0:	e7ac      	b.n	8022bfc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8022ca2:	f8b9 3000 	ldrh.w	r3, [r9]
 8022ca6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022caa:	eba3 0308 	sub.w	r3, r3, r8
 8022cae:	eba6 0608 	sub.w	r6, r6, r8
 8022cb2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022cb6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022cba:	440e      	add	r6, r1
 8022cbc:	e797      	b.n	8022bee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8022cbe:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8022cc2:	42a8      	cmp	r0, r5
 8022cc4:	d262      	bcs.n	8022d8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8022cc6:	9b00      	ldr	r3, [sp, #0]
 8022cc8:	4631      	mov	r1, r6
 8022cca:	eb00 0b03 	add.w	fp, r0, r3
 8022cce:	4558      	cmp	r0, fp
 8022cd0:	d24e      	bcs.n	8022d70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8022cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022cd6:	b12b      	cbz	r3, 8022ce4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022cd8:	2bff      	cmp	r3, #255	@ 0xff
 8022cda:	f8b4 e000 	ldrh.w	lr, [r4]
 8022cde:	d104      	bne.n	8022cea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8022ce0:	f8a0 e000 	strh.w	lr, [r0]
 8022ce4:	3002      	adds	r0, #2
 8022ce6:	3402      	adds	r4, #2
 8022ce8:	e7f1      	b.n	8022cce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8022cea:	8802      	ldrh	r2, [r0, #0]
 8022cec:	b29f      	uxth	r7, r3
 8022cee:	43db      	mvns	r3, r3
 8022cf0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022cf4:	1216      	asrs	r6, r2, #8
 8022cf6:	b2db      	uxtb	r3, r3
 8022cf8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8022cfc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022d00:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8022d04:	00d2      	lsls	r2, r2, #3
 8022d06:	fb16 f603 	smulbb	r6, r6, r3
 8022d0a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8022d0e:	b2d2      	uxtb	r2, r2
 8022d10:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022d14:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022d18:	fb1a fa03 	smulbb	sl, sl, r3
 8022d1c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022d20:	fa1f fc8c 	uxth.w	ip, ip
 8022d24:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022d28:	fb12 f303 	smulbb	r3, r2, r3
 8022d2c:	fa5f fe8e 	uxtb.w	lr, lr
 8022d30:	fb06 a607 	mla	r6, r6, r7, sl
 8022d34:	f10c 0201 	add.w	r2, ip, #1
 8022d38:	fb0e 3307 	mla	r3, lr, r7, r3
 8022d3c:	b2b6      	uxth	r6, r6
 8022d3e:	b29b      	uxth	r3, r3
 8022d40:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8022d44:	f106 0a01 	add.w	sl, r6, #1
 8022d48:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8022d4c:	f103 0c01 	add.w	ip, r3, #1
 8022d50:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022d54:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022d58:	0976      	lsrs	r6, r6, #5
 8022d5a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8022d5e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022d62:	ea4c 0c02 	orr.w	ip, ip, r2
 8022d66:	ea4c 0c06 	orr.w	ip, ip, r6
 8022d6a:	f8a0 c000 	strh.w	ip, [r0]
 8022d6e:	e7b9      	b.n	8022ce4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8022d70:	f8b9 3000 	ldrh.w	r3, [r9]
 8022d74:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8022d78:	eba3 0308 	sub.w	r3, r3, r8
 8022d7c:	eba6 0608 	sub.w	r6, r6, r8
 8022d80:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022d84:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8022d88:	440e      	add	r6, r1
 8022d8a:	e79a      	b.n	8022cc2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8022d8c:	4b03      	ldr	r3, [pc, #12]	@ (8022d9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8022d8e:	6818      	ldr	r0, [r3, #0]
 8022d90:	6803      	ldr	r3, [r0, #0]
 8022d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d94:	4798      	blx	r3
 8022d96:	b007      	add	sp, #28
 8022d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d9c:	2400b8cc 	.word	0x2400b8cc
 8022da0:	2400b8c6 	.word	0x2400b8c6

08022da4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8022da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022da8:	b089      	sub	sp, #36	@ 0x24
 8022daa:	4682      	mov	sl, r0
 8022dac:	460f      	mov	r7, r1
 8022dae:	4691      	mov	r9, r2
 8022db0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8022db4:	4698      	mov	r8, r3
 8022db6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022db8:	2e00      	cmp	r6, #0
 8022dba:	d03d      	beq.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022dbc:	4608      	mov	r0, r1
 8022dbe:	f7fc f861 	bl	801ee84 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8022dc2:	4605      	mov	r5, r0
 8022dc4:	4638      	mov	r0, r7
 8022dc6:	f7fc f897 	bl	801eef8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8022dca:	f8ad 000e 	strh.w	r0, [sp, #14]
 8022dce:	4638      	mov	r0, r7
 8022dd0:	f8ad 9008 	strh.w	r9, [sp, #8]
 8022dd4:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022dd8:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022ddc:	f7fc f95a 	bl	801f094 <_ZNK8touchgfx6Bitmap7getDataEv>
 8022de0:	4605      	mov	r5, r0
 8022de2:	4638      	mov	r0, r7
 8022de4:	f7fc f988 	bl	801f0f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8022de8:	4681      	mov	r9, r0
 8022dea:	4638      	mov	r0, r7
 8022dec:	f7fc f9dc 	bl	801f1a8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8022df0:	280b      	cmp	r0, #11
 8022df2:	f200 816f 	bhi.w	80230d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8022df6:	e8df f010 	tbh	[pc, r0, lsl #1]
 8022dfa:	00c3      	.short	0x00c3
 8022dfc:	000c00b4 	.word	0x000c00b4
 8022e00:	016d016d 	.word	0x016d016d
 8022e04:	016d016d 	.word	0x016d016d
 8022e08:	016d016d 	.word	0x016d016d
 8022e0c:	016d016d 	.word	0x016d016d
 8022e10:	00bb      	.short	0x00bb
 8022e12:	4bb3      	ldr	r3, [pc, #716]	@ (80230e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8022e14:	6818      	ldr	r0, [r3, #0]
 8022e16:	6803      	ldr	r3, [r0, #0]
 8022e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022e1a:	4798      	blx	r3
 8022e1c:	2eff      	cmp	r6, #255	@ 0xff
 8022e1e:	d121      	bne.n	8022e64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022e20:	0683      	lsls	r3, r0, #26
 8022e22:	d41f      	bmi.n	8022e64 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8022e24:	4638      	mov	r0, r7
 8022e26:	f7fc f8fb 	bl	801f020 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022e2a:	b940      	cbnz	r0, 8022e3e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8022e2c:	4623      	mov	r3, r4
 8022e2e:	aa02      	add	r2, sp, #8
 8022e30:	4629      	mov	r1, r5
 8022e32:	4650      	mov	r0, sl
 8022e34:	f7ff f9e4 	bl	8022200 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022e38:	b009      	add	sp, #36	@ 0x24
 8022e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e3e:	f10d 0818 	add.w	r8, sp, #24
 8022e42:	4639      	mov	r1, r7
 8022e44:	af04      	add	r7, sp, #16
 8022e46:	4640      	mov	r0, r8
 8022e48:	f7fc f890 	bl	801ef6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022e4c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022e50:	e887 0003 	stmia.w	r7, {r0, r1}
 8022e54:	4638      	mov	r0, r7
 8022e56:	4621      	mov	r1, r4
 8022e58:	f7f5 f9a6 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8022e5c:	4638      	mov	r0, r7
 8022e5e:	f7f5 f9e6 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022e62:	b130      	cbz	r0, 8022e72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8022e64:	4633      	mov	r3, r6
 8022e66:	4622      	mov	r2, r4
 8022e68:	a902      	add	r1, sp, #8
 8022e6a:	4628      	mov	r0, r5
 8022e6c:	f7ff f8e2 	bl	8022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022e70:	e7e2      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022e72:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022e76:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022e7a:	4293      	cmp	r3, r2
 8022e7c:	dd12      	ble.n	8022ea4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8022e7e:	1a9b      	subs	r3, r3, r2
 8022e80:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022e84:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022e88:	f8ad 0018 	strh.w	r0, [sp, #24]
 8022e8c:	4628      	mov	r0, r5
 8022e8e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8022e92:	4642      	mov	r2, r8
 8022e94:	f8ad 101c 	strh.w	r1, [sp, #28]
 8022e98:	a902      	add	r1, sp, #8
 8022e9a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022e9e:	4633      	mov	r3, r6
 8022ea0:	f7ff f8c8 	bl	8022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022ea4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8022ea8:	f9b4 2000 	ldrsh.w	r2, [r4]
 8022eac:	4293      	cmp	r3, r2
 8022eae:	dd12      	ble.n	8022ed6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8022eb0:	1a9b      	subs	r3, r3, r2
 8022eb2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8022eb6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8022eba:	f8ad 2018 	strh.w	r2, [sp, #24]
 8022ebe:	4642      	mov	r2, r8
 8022ec0:	f8ad 001a 	strh.w	r0, [sp, #26]
 8022ec4:	4628      	mov	r0, r5
 8022ec6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022eca:	23ff      	movs	r3, #255	@ 0xff
 8022ecc:	f8ad 101e 	strh.w	r1, [sp, #30]
 8022ed0:	a902      	add	r1, sp, #8
 8022ed2:	f7ff f8af 	bl	8022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022ed6:	463b      	mov	r3, r7
 8022ed8:	aa02      	add	r2, sp, #8
 8022eda:	4629      	mov	r1, r5
 8022edc:	4650      	mov	r0, sl
 8022ede:	f7ff f98f 	bl	8022200 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8022ee2:	88a2      	ldrh	r2, [r4, #4]
 8022ee4:	8823      	ldrh	r3, [r4, #0]
 8022ee6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8022eea:	4413      	add	r3, r2
 8022eec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022ef0:	440a      	add	r2, r1
 8022ef2:	b29b      	uxth	r3, r3
 8022ef4:	b292      	uxth	r2, r2
 8022ef6:	b218      	sxth	r0, r3
 8022ef8:	b211      	sxth	r1, r2
 8022efa:	4288      	cmp	r0, r1
 8022efc:	dd12      	ble.n	8022f24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8022efe:	1a9b      	subs	r3, r3, r2
 8022f00:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8022f04:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8022f08:	4642      	mov	r2, r8
 8022f0a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8022f0e:	a902      	add	r1, sp, #8
 8022f10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022f14:	23ff      	movs	r3, #255	@ 0xff
 8022f16:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022f1a:	4628      	mov	r0, r5
 8022f1c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8022f20:	f7ff f888 	bl	8022034 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8022f24:	88e2      	ldrh	r2, [r4, #6]
 8022f26:	8863      	ldrh	r3, [r4, #2]
 8022f28:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8022f2c:	4413      	add	r3, r2
 8022f2e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8022f32:	440a      	add	r2, r1
 8022f34:	b29b      	uxth	r3, r3
 8022f36:	b292      	uxth	r2, r2
 8022f38:	b218      	sxth	r0, r3
 8022f3a:	b211      	sxth	r1, r2
 8022f3c:	4288      	cmp	r0, r1
 8022f3e:	f77f af7b 	ble.w	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f42:	1a9b      	subs	r3, r3, r2
 8022f44:	f9b4 6000 	ldrsh.w	r6, [r4]
 8022f48:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8022f4c:	4642      	mov	r2, r8
 8022f4e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022f52:	23ff      	movs	r3, #255	@ 0xff
 8022f54:	f8ad 6018 	strh.w	r6, [sp, #24]
 8022f58:	f8ad 101a 	strh.w	r1, [sp, #26]
 8022f5c:	f8ad 001c 	strh.w	r0, [sp, #28]
 8022f60:	e782      	b.n	8022e68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8022f62:	4633      	mov	r3, r6
 8022f64:	4622      	mov	r2, r4
 8022f66:	a902      	add	r1, sp, #8
 8022f68:	4628      	mov	r0, r5
 8022f6a:	f7ff f9b9 	bl	80222e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8022f6e:	e763      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f70:	9600      	str	r6, [sp, #0]
 8022f72:	4623      	mov	r3, r4
 8022f74:	aa02      	add	r2, sp, #8
 8022f76:	4649      	mov	r1, r9
 8022f78:	4628      	mov	r0, r5
 8022f7a:	f7ff fdd5 	bl	8022b28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8022f7e:	e75b      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f80:	4638      	mov	r0, r7
 8022f82:	f7fc f84d 	bl	801f020 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8022f86:	b950      	cbnz	r0, 8022f9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8022f88:	f8da 3000 	ldr.w	r3, [sl]
 8022f8c:	aa02      	add	r2, sp, #8
 8022f8e:	4629      	mov	r1, r5
 8022f90:	e9cd 6000 	strd	r6, r0, [sp]
 8022f94:	4650      	mov	r0, sl
 8022f96:	68de      	ldr	r6, [r3, #12]
 8022f98:	4623      	mov	r3, r4
 8022f9a:	47b0      	blx	r6
 8022f9c:	e74c      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022f9e:	f10d 0818 	add.w	r8, sp, #24
 8022fa2:	4639      	mov	r1, r7
 8022fa4:	af04      	add	r7, sp, #16
 8022fa6:	4640      	mov	r0, r8
 8022fa8:	f7fb ffe0 	bl	801ef6c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8022fac:	e898 0003 	ldmia.w	r8, {r0, r1}
 8022fb0:	e887 0003 	stmia.w	r7, {r0, r1}
 8022fb4:	4638      	mov	r0, r7
 8022fb6:	4621      	mov	r1, r4
 8022fb8:	f7f5 f8f6 	bl	80181a8 <_ZN8touchgfx4RectaNERKS0_>
 8022fbc:	4638      	mov	r0, r7
 8022fbe:	f7f5 f936 	bl	801822e <_ZNK8touchgfx4Rect7isEmptyEv>
 8022fc2:	b138      	cbz	r0, 8022fd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8022fc4:	4623      	mov	r3, r4
 8022fc6:	9600      	str	r6, [sp, #0]
 8022fc8:	aa02      	add	r2, sp, #8
 8022fca:	4649      	mov	r1, r9
 8022fcc:	4628      	mov	r0, r5
 8022fce:	f7ff fdc3 	bl	8022b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8022fd2:	e731      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8022fd4:	f8da 3000 	ldr.w	r3, [sl]
 8022fd8:	aa02      	add	r2, sp, #8
 8022fda:	4629      	mov	r1, r5
 8022fdc:	e9cd 6000 	strd	r6, r0, [sp]
 8022fe0:	4650      	mov	r0, sl
 8022fe2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8022fe6:	463b      	mov	r3, r7
 8022fe8:	47d8      	blx	fp
 8022fea:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8022fee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8022ff2:	4293      	cmp	r3, r2
 8022ff4:	dd13      	ble.n	802301e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8022ff6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8022ffa:	1a9b      	subs	r3, r3, r2
 8022ffc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023000:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023004:	4628      	mov	r0, r5
 8023006:	f8ad 201a 	strh.w	r2, [sp, #26]
 802300a:	aa02      	add	r2, sp, #8
 802300c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023010:	4649      	mov	r1, r9
 8023012:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023016:	4643      	mov	r3, r8
 8023018:	9600      	str	r6, [sp, #0]
 802301a:	f7ff fd9d 	bl	8022b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802301e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023022:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023026:	4293      	cmp	r3, r2
 8023028:	dd13      	ble.n	8023052 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 802302a:	1a9b      	subs	r3, r3, r2
 802302c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023030:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023034:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023038:	aa02      	add	r2, sp, #8
 802303a:	f8ad 001a 	strh.w	r0, [sp, #26]
 802303e:	4628      	mov	r0, r5
 8023040:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023044:	4643      	mov	r3, r8
 8023046:	f8ad 101e 	strh.w	r1, [sp, #30]
 802304a:	4649      	mov	r1, r9
 802304c:	9600      	str	r6, [sp, #0]
 802304e:	f7ff fd83 	bl	8022b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023052:	88a2      	ldrh	r2, [r4, #4]
 8023054:	8823      	ldrh	r3, [r4, #0]
 8023056:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802305a:	4413      	add	r3, r2
 802305c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023060:	440a      	add	r2, r1
 8023062:	b29b      	uxth	r3, r3
 8023064:	b292      	uxth	r2, r2
 8023066:	b218      	sxth	r0, r3
 8023068:	b211      	sxth	r1, r2
 802306a:	4288      	cmp	r0, r1
 802306c:	dd13      	ble.n	8023096 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 802306e:	1a9b      	subs	r3, r3, r2
 8023070:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023074:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023078:	aa02      	add	r2, sp, #8
 802307a:	f8ad 1018 	strh.w	r1, [sp, #24]
 802307e:	4649      	mov	r1, r9
 8023080:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023084:	4643      	mov	r3, r8
 8023086:	f8ad 001e 	strh.w	r0, [sp, #30]
 802308a:	4628      	mov	r0, r5
 802308c:	9600      	str	r6, [sp, #0]
 802308e:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023092:	f7ff fd61 	bl	8022b58 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023096:	88e2      	ldrh	r2, [r4, #6]
 8023098:	8863      	ldrh	r3, [r4, #2]
 802309a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802309e:	4413      	add	r3, r2
 80230a0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80230a4:	440a      	add	r2, r1
 80230a6:	b29b      	uxth	r3, r3
 80230a8:	b292      	uxth	r2, r2
 80230aa:	b218      	sxth	r0, r3
 80230ac:	b211      	sxth	r1, r2
 80230ae:	4288      	cmp	r0, r1
 80230b0:	f77f aec2 	ble.w	8022e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 80230b4:	f9b4 7000 	ldrsh.w	r7, [r4]
 80230b8:	1a9b      	subs	r3, r3, r2
 80230ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80230be:	f8ad 301e 	strh.w	r3, [sp, #30]
 80230c2:	4643      	mov	r3, r8
 80230c4:	f8ad 7018 	strh.w	r7, [sp, #24]
 80230c8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80230cc:	f8ad 001c 	strh.w	r0, [sp, #28]
 80230d0:	9600      	str	r6, [sp, #0]
 80230d2:	e779      	b.n	8022fc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 80230d4:	4b03      	ldr	r3, [pc, #12]	@ (80230e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 80230d6:	21b4      	movs	r1, #180	@ 0xb4
 80230d8:	4a03      	ldr	r2, [pc, #12]	@ (80230e8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 80230da:	4804      	ldr	r0, [pc, #16]	@ (80230ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 80230dc:	f007 ff44 	bl	802af68 <__assert_func>
 80230e0:	2400b8cc 	.word	0x2400b8cc
 80230e4:	0802febf 	.word	0x0802febf
 80230e8:	080305c7 	.word	0x080305c7
 80230ec:	0802fff5 	.word	0x0802fff5

080230f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80230f0:	b508      	push	{r3, lr}
 80230f2:	b180      	cbz	r0, 8023116 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80230f4:	2902      	cmp	r1, #2
 80230f6:	d014      	beq.n	8023122 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 80230f8:	2903      	cmp	r1, #3
 80230fa:	d01d      	beq.n	8023138 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 80230fc:	2901      	cmp	r1, #1
 80230fe:	d101      	bne.n	8023104 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8023100:	2001      	movs	r0, #1
 8023102:	bd08      	pop	{r3, pc}
 8023104:	4b0e      	ldr	r3, [pc, #56]	@ (8023140 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023106:	8818      	ldrh	r0, [r3, #0]
 8023108:	b990      	cbnz	r0, 8023130 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 802310a:	4b0e      	ldr	r3, [pc, #56]	@ (8023144 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 802310c:	2150      	movs	r1, #80	@ 0x50
 802310e:	4a0e      	ldr	r2, [pc, #56]	@ (8023148 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8023110:	480e      	ldr	r0, [pc, #56]	@ (802314c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8023112:	f007 ff29 	bl	802af68 <__assert_func>
 8023116:	2902      	cmp	r1, #2
 8023118:	d00e      	beq.n	8023138 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 802311a:	2903      	cmp	r1, #3
 802311c:	d0f2      	beq.n	8023104 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 802311e:	2901      	cmp	r1, #1
 8023120:	d1ee      	bne.n	8023100 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8023122:	4b07      	ldr	r3, [pc, #28]	@ (8023140 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023124:	8818      	ldrh	r0, [r3, #0]
 8023126:	2800      	cmp	r0, #0
 8023128:	d0ef      	beq.n	802310a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 802312a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802312e:	e7e8      	b.n	8023102 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023130:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023134:	4240      	negs	r0, r0
 8023136:	e7e4      	b.n	8023102 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8023138:	f04f 30ff 	mov.w	r0, #4294967295
 802313c:	e7e1      	b.n	8023102 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 802313e:	bf00      	nop
 8023140:	2400b8c6 	.word	0x2400b8c6
 8023144:	0803014b 	.word	0x0803014b
 8023148:	08030744 	.word	0x08030744
 802314c:	0803018d 	.word	0x0803018d

08023150 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023150:	b508      	push	{r3, lr}
 8023152:	b180      	cbz	r0, 8023176 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8023154:	2902      	cmp	r1, #2
 8023156:	d014      	beq.n	8023182 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8023158:	2903      	cmp	r1, #3
 802315a:	d018      	beq.n	802318e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802315c:	2901      	cmp	r1, #1
 802315e:	d001      	beq.n	8023164 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023160:	2001      	movs	r0, #1
 8023162:	e013      	b.n	802318c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023164:	4b0e      	ldr	r3, [pc, #56]	@ (80231a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023166:	8818      	ldrh	r0, [r3, #0]
 8023168:	b970      	cbnz	r0, 8023188 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 802316a:	4b0e      	ldr	r3, [pc, #56]	@ (80231a4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 802316c:	2150      	movs	r1, #80	@ 0x50
 802316e:	4a0e      	ldr	r2, [pc, #56]	@ (80231a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8023170:	480e      	ldr	r0, [pc, #56]	@ (80231ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8023172:	f007 fef9 	bl	802af68 <__assert_func>
 8023176:	2902      	cmp	r1, #2
 8023178:	d009      	beq.n	802318e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 802317a:	2903      	cmp	r1, #3
 802317c:	d0f0      	beq.n	8023160 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802317e:	2901      	cmp	r1, #1
 8023180:	d1f0      	bne.n	8023164 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8023182:	f04f 30ff 	mov.w	r0, #4294967295
 8023186:	e001      	b.n	802318c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8023188:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802318c:	bd08      	pop	{r3, pc}
 802318e:	4b04      	ldr	r3, [pc, #16]	@ (80231a0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023190:	8818      	ldrh	r0, [r3, #0]
 8023192:	2800      	cmp	r0, #0
 8023194:	d0e9      	beq.n	802316a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8023196:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802319a:	4240      	negs	r0, r0
 802319c:	e7f6      	b.n	802318c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802319e:	bf00      	nop
 80231a0:	2400b8c6 	.word	0x2400b8c6
 80231a4:	0803014b 	.word	0x0803014b
 80231a8:	08030744 	.word	0x08030744
 80231ac:	0803018d 	.word	0x0803018d

080231b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80231b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b4:	b099      	sub	sp, #100	@ 0x64
 80231b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80231b8:	a914      	add	r1, sp, #80	@ 0x50
 80231ba:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	@ 0x88
 80231be:	f8bd 6090 	ldrh.w	r6, [sp, #144]	@ 0x90
 80231c2:	f8bd 7094 	ldrh.w	r7, [sp, #148]	@ 0x94
 80231c6:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80231ca:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80231ce:	e881 000c 	stmia.w	r1, {r2, r3}
 80231d2:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80231d6:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80231da:	930a      	str	r3, [sp, #40]	@ 0x28
 80231dc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80231e0:	f891 900d 	ldrb.w	r9, [r1, #13]
 80231e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80231e6:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80231ea:	7988      	ldrb	r0, [r1, #6]
 80231ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80231ee:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80231f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80231f6:	4303      	orrs	r3, r0
 80231f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80231fa:	f000 81a1 	beq.w	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80231fe:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023202:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8023206:	f891 9007 	ldrb.w	r9, [r1, #7]
 802320a:	ea59 0903 	orrs.w	r9, r9, r3
 802320e:	f000 8197 	beq.w	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023212:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023216:	b29b      	uxth	r3, r3
 8023218:	2e00      	cmp	r6, #0
 802321a:	f000 813a 	beq.w	8023492 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 802321e:	1af6      	subs	r6, r6, r3
 8023220:	b2b6      	uxth	r6, r6
 8023222:	0433      	lsls	r3, r6, #16
 8023224:	d502      	bpl.n	802322c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023226:	1bad      	subs	r5, r5, r6
 8023228:	2600      	movs	r6, #0
 802322a:	b22d      	sxth	r5, r5
 802322c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023230:	a814      	add	r0, sp, #80	@ 0x50
 8023232:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8023236:	428d      	cmp	r5, r1
 8023238:	b28b      	uxth	r3, r1
 802323a:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 802323e:	bfbf      	itttt	lt
 8023240:	18f6      	addlt	r6, r6, r3
 8023242:	1b75      	sublt	r5, r6, r5
 8023244:	b2ae      	uxthlt	r6, r5
 8023246:	460d      	movlt	r5, r1
 8023248:	8891      	ldrh	r1, [r2, #4]
 802324a:	440b      	add	r3, r1
 802324c:	4629      	mov	r1, r5
 802324e:	b21b      	sxth	r3, r3
 8023250:	9310      	str	r3, [sp, #64]	@ 0x40
 8023252:	88d3      	ldrh	r3, [r2, #6]
 8023254:	8852      	ldrh	r2, [r2, #2]
 8023256:	4413      	add	r3, r2
 8023258:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802325a:	b21b      	sxth	r3, r3
 802325c:	930f      	str	r3, [sp, #60]	@ 0x3c
 802325e:	4bbd      	ldr	r3, [pc, #756]	@ (8023554 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8023260:	f893 b000 	ldrb.w	fp, [r3]
 8023264:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023268:	f1dc 0300 	rsbs	r3, ip, #0
 802326c:	eb43 030c 	adc.w	r3, r3, ip
 8023270:	930e      	str	r3, [sp, #56]	@ 0x38
 8023272:	4653      	mov	r3, sl
 8023274:	f7f8 f9ce 	bl	801b614 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023278:	4629      	mov	r1, r5
 802327a:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 802327e:	4653      	mov	r3, sl
 8023280:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023282:	a814      	add	r0, sp, #80	@ 0x50
 8023284:	f7f8 f9de 	bl	801b644 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023288:	a918      	add	r1, sp, #96	@ 0x60
 802328a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802328e:	a817      	add	r0, sp, #92	@ 0x5c
 8023290:	f7f8 fafa 	bl	801b888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023294:	f1ba 0f00 	cmp.w	sl, #0
 8023298:	f040 80fe 	bne.w	8023498 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 802329c:	f1bb 0f01 	cmp.w	fp, #1
 80232a0:	f040 8102 	bne.w	80234a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 80232a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80232a6:	b153      	cbz	r3, 80232be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80232a8:	2408      	movs	r4, #8
 80232aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80232ac:	fb94 f3f8 	sdiv	r3, r4, r8
 80232b0:	1e5c      	subs	r4, r3, #1
 80232b2:	4414      	add	r4, r2
 80232b4:	fb94 f4f3 	sdiv	r4, r4, r3
 80232b8:	fb14 f403 	smulbb	r4, r4, r3
 80232bc:	b2a4      	uxth	r4, r4
 80232be:	b906      	cbnz	r6, 80232c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 80232c0:	b16f      	cbz	r7, 80232de <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 80232c2:	fb07 6304 	mla	r3, r7, r4, r6
 80232c6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80232c8:	463a      	mov	r2, r7
 80232ca:	fb08 f303 	mul.w	r3, r8, r3
 80232ce:	f003 0707 	and.w	r7, r3, #7
 80232d2:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 80232d6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80232d8:	eba9 0302 	sub.w	r3, r9, r2
 80232dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80232de:	4651      	mov	r1, sl
 80232e0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80232e2:	f7ff ff05 	bl	80230f0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80232e6:	4651      	mov	r1, sl
 80232e8:	4681      	mov	r9, r0
 80232ea:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80232ec:	f7ff ff30 	bl	8023150 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80232f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80232f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80232f4:	4683      	mov	fp, r0
 80232f6:	eba3 0a02 	sub.w	sl, r3, r2
 80232fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80232fc:	459a      	cmp	sl, r3
 80232fe:	bfa8      	it	ge
 8023300:	469a      	movge	sl, r3
 8023302:	f1ba 0f00 	cmp.w	sl, #0
 8023306:	f340 811b 	ble.w	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802330a:	1bad      	subs	r5, r5, r6
 802330c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802330e:	1b5d      	subs	r5, r3, r5
 8023310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023312:	429d      	cmp	r5, r3
 8023314:	bfd4      	ite	le
 8023316:	ebc6 0605 	rsble	r6, r6, r5
 802331a:	ebc6 0603 	rsbgt	r6, r6, r3
 802331e:	2e00      	cmp	r6, #0
 8023320:	f340 810e 	ble.w	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023324:	1ba4      	subs	r4, r4, r6
 8023326:	fb08 f304 	mul.w	r3, r8, r4
 802332a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802332c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802332e:	2b00      	cmp	r3, #0
 8023330:	f040 810b 	bne.w	802354a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 8023334:	4b88      	ldr	r3, [pc, #544]	@ (8023558 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8023336:	6818      	ldr	r0, [r3, #0]
 8023338:	6803      	ldr	r3, [r0, #0]
 802333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802333c:	4798      	blx	r3
 802333e:	2301      	movs	r3, #1
 8023340:	4a86      	ldr	r2, [pc, #536]	@ (802355c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8023342:	fa03 f308 	lsl.w	r3, r3, r8
 8023346:	8811      	ldrh	r1, [r2, #0]
 8023348:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 802334c:	3b01      	subs	r3, #1
 802334e:	b2db      	uxtb	r3, r3
 8023350:	930e      	str	r3, [sp, #56]	@ 0x38
 8023352:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8023356:	fb01 2303 	mla	r3, r1, r3, r2
 802335a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802335e:	930a      	str	r3, [sp, #40]	@ 0x28
 8023360:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023362:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8023366:	9313      	str	r3, [sp, #76]	@ 0x4c
 8023368:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802336a:	0a19      	lsrs	r1, r3, #8
 802336c:	b2cb      	uxtb	r3, r1
 802336e:	9312      	str	r3, [sp, #72]	@ 0x48
 8023370:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023372:	b2db      	uxtb	r3, r3
 8023374:	9311      	str	r3, [sp, #68]	@ 0x44
 8023376:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023378:	095a      	lsrs	r2, r3, #5
 802337a:	4b79      	ldr	r3, [pc, #484]	@ (8023560 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 802337c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023380:	400b      	ands	r3, r1
 8023382:	4313      	orrs	r3, r2
 8023384:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8023386:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802338a:	4313      	orrs	r3, r2
 802338c:	b29b      	uxth	r3, r3
 802338e:	9310      	str	r3, [sp, #64]	@ 0x40
 8023390:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023392:	781a      	ldrb	r2, [r3, #0]
 8023394:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8023398:	fb06 b919 	mls	r9, r6, r9, fp
 802339c:	413a      	asrs	r2, r7
 802339e:	fb03 fb06 	mul.w	fp, r3, r6
 80233a2:	930d      	str	r3, [sp, #52]	@ 0x34
 80233a4:	b2d2      	uxtb	r2, r2
 80233a6:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80233aa:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80233ae:	f0c0 80ea 	bcc.w	8023586 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 80233b2:	46b6      	mov	lr, r6
 80233b4:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 80233b8:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80233bc:	f0c0 80d2 	bcc.w	8023564 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 80233c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80233c2:	4013      	ands	r3, r2
 80233c4:	d055      	beq.n	8023472 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 80233c6:	20ff      	movs	r0, #255	@ 0xff
 80233c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80233ca:	fb90 f1f1 	sdiv	r1, r0, r1
 80233ce:	434b      	muls	r3, r1
 80233d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80233d2:	dd03      	ble.n	80233dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 80233d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80233d6:	4281      	cmp	r1, r0
 80233d8:	f000 80b9 	beq.w	802354e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 80233dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80233de:	f8bc 4000 	ldrh.w	r4, [ip]
 80233e2:	fb11 f303 	smulbb	r3, r1, r3
 80233e6:	1220      	asrs	r0, r4, #8
 80233e8:	b29b      	uxth	r3, r3
 80233ea:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80233ee:	1c59      	adds	r1, r3, #1
 80233f0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80233f4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80233f8:	10e1      	asrs	r1, r4, #3
 80233fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80233fe:	00e4      	lsls	r4, r4, #3
 8023400:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8023404:	b29d      	uxth	r5, r3
 8023406:	43db      	mvns	r3, r3
 8023408:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802340c:	b2db      	uxtb	r3, r3
 802340e:	b2e4      	uxtb	r4, r4
 8023410:	9309      	str	r3, [sp, #36]	@ 0x24
 8023412:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8023414:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8023418:	fb13 f905 	smulbb	r9, r3, r5
 802341c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802341e:	fb00 9003 	mla	r0, r0, r3, r9
 8023422:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023424:	fb13 f905 	smulbb	r9, r3, r5
 8023428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802342a:	b280      	uxth	r0, r0
 802342c:	fb01 9103 	mla	r1, r1, r3, r9
 8023430:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023432:	fb13 f505 	smulbb	r5, r3, r5
 8023436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023438:	b289      	uxth	r1, r1
 802343a:	fb04 5403 	mla	r4, r4, r3, r5
 802343e:	1c43      	adds	r3, r0, #1
 8023440:	b2a4      	uxth	r4, r4
 8023442:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023446:	f104 0901 	add.w	r9, r4, #1
 802344a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802344e:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8023452:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8023456:	ea49 0000 	orr.w	r0, r9, r0
 802345a:	f101 0901 	add.w	r9, r1, #1
 802345e:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8023462:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8023466:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 802346a:	ea40 0009 	orr.w	r0, r0, r9
 802346e:	f8ac 0000 	strh.w	r0, [ip]
 8023472:	4447      	add	r7, r8
 8023474:	b2bf      	uxth	r7, r7
 8023476:	2f07      	cmp	r7, #7
 8023478:	bf89      	itett	hi
 802347a:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 802347c:	fa42 f208 	asrls.w	r2, r2, r8
 8023480:	2700      	movhi	r7, #0
 8023482:	785a      	ldrbhi	r2, [r3, #1]
 8023484:	bf8a      	itet	hi
 8023486:	3301      	addhi	r3, #1
 8023488:	b2d2      	uxtbls	r2, r2
 802348a:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 802348c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802348e:	449c      	add	ip, r3
 8023490:	e792      	b.n	80233b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8023492:	441d      	add	r5, r3
 8023494:	b22d      	sxth	r5, r5
 8023496:	e6c9      	b.n	802322c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8023498:	f1ba 0f01 	cmp.w	sl, #1
 802349c:	f47f af02 	bne.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234a0:	f1bb 0f01 	cmp.w	fp, #1
 80234a4:	f47f aefe 	bne.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234a8:	f8df b0ac 	ldr.w	fp, [pc, #172]	@ 8023558 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 80234ac:	f8db 0000 	ldr.w	r0, [fp]
 80234b0:	6803      	ldr	r3, [r0, #0]
 80234b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80234b4:	4798      	blx	r3
 80234b6:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80234ba:	465a      	mov	r2, fp
 80234bc:	d006      	beq.n	80234cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80234be:	f1b8 0f04 	cmp.w	r8, #4
 80234c2:	d140      	bne.n	8023546 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80234c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80234c6:	3300      	adds	r3, #0
 80234c8:	bf18      	it	ne
 80234ca:	2301      	movne	r3, #1
 80234cc:	0580      	lsls	r0, r0, #22
 80234ce:	d563      	bpl.n	8023598 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 80234d0:	f1b8 0f08 	cmp.w	r8, #8
 80234d4:	d160      	bne.n	8023598 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	bf0c      	ite	eq
 80234da:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80234de:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80234e2:	2e00      	cmp	r6, #0
 80234e4:	f47f aede 	bne.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234e8:	2f00      	cmp	r7, #0
 80234ea:	f47f aedb 	bne.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80234f2:	18eb      	adds	r3, r5, r3
 80234f4:	4283      	cmp	r3, r0
 80234f6:	f73f aed5 	bgt.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80234fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80234fc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80234fe:	444b      	add	r3, r9
 8023500:	4283      	cmp	r3, r0
 8023502:	f73f aecf 	bgt.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8023506:	f1b8 0f08 	cmp.w	r8, #8
 802350a:	6810      	ldr	r0, [r2, #0]
 802350c:	f04f 0600 	mov.w	r6, #0
 8023510:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 8023514:	bf18      	it	ne
 8023516:	3401      	addne	r4, #1
 8023518:	6805      	ldr	r5, [r0, #0]
 802351a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 802351e:	bf18      	it	ne
 8023520:	f024 0401 	bicne.w	r4, r4, #1
 8023524:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8023528:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802352a:	bf18      	it	ne
 802352c:	b2a4      	uxthne	r4, r4
 802352e:	9104      	str	r1, [sp, #16]
 8023530:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8023532:	e9cd 4900 	strd	r4, r9, [sp]
 8023536:	e9cd 4102 	strd	r4, r1, [sp, #8]
 802353a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802353c:	6d6c      	ldr	r4, [r5, #84]	@ 0x54
 802353e:	47a0      	blx	r4
 8023540:	b019      	add	sp, #100	@ 0x64
 8023542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023546:	2300      	movs	r3, #0
 8023548:	e7c0      	b.n	80234cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802354a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802354c:	e6f7      	b.n	802333e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 802354e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8023550:	e78d      	b.n	802346e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 8023552:	bf00      	nop
 8023554:	2400b8c4 	.word	0x2400b8c4
 8023558:	2400b8cc 	.word	0x2400b8cc
 802355c:	2400b8c6 	.word	0x2400b8c6
 8023560:	00fff800 	.word	0x00fff800
 8023564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023566:	b153      	cbz	r3, 802357e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8023568:	441f      	add	r7, r3
 802356a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802356c:	b2bf      	uxth	r7, r7
 802356e:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 8023572:	f007 0707 	and.w	r7, r7, #7
 8023576:	781a      	ldrb	r2, [r3, #0]
 8023578:	9328      	str	r3, [sp, #160]	@ 0xa0
 802357a:	413a      	asrs	r2, r7
 802357c:	b2d2      	uxtb	r2, r2
 802357e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8023580:	445b      	add	r3, fp
 8023582:	930a      	str	r3, [sp, #40]	@ 0x28
 8023584:	e711      	b.n	80233aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8023586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8023588:	2b00      	cmp	r3, #0
 802358a:	d1d9      	bne.n	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802358c:	4b05      	ldr	r3, [pc, #20]	@ (80235a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 802358e:	6818      	ldr	r0, [r3, #0]
 8023590:	6803      	ldr	r3, [r0, #0]
 8023592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023594:	4798      	blx	r3
 8023596:	e7d3      	b.n	8023540 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8023598:	2b00      	cmp	r3, #0
 802359a:	f43f ae83 	beq.w	80232a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802359e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80235a2:	e79e      	b.n	80234e2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 80235a4:	2400b8cc 	.word	0x2400b8cc

080235a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80235a8:	b538      	push	{r3, r4, r5, lr}
 80235aa:	4c15      	ldr	r4, [pc, #84]	@ (8023600 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80235ac:	4605      	mov	r5, r0
 80235ae:	7823      	ldrb	r3, [r4, #0]
 80235b0:	f3bf 8f5b 	dmb	ish
 80235b4:	07da      	lsls	r2, r3, #31
 80235b6:	d40b      	bmi.n	80235d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80235b8:	4620      	mov	r0, r4
 80235ba:	f007 fca8 	bl	802af0e <__cxa_guard_acquire>
 80235be:	b138      	cbz	r0, 80235d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80235c0:	4620      	mov	r0, r4
 80235c2:	f007 fcb0 	bl	802af26 <__cxa_guard_release>
 80235c6:	4a0f      	ldr	r2, [pc, #60]	@ (8023604 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80235c8:	490f      	ldr	r1, [pc, #60]	@ (8023608 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80235ca:	4810      	ldr	r0, [pc, #64]	@ (802360c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80235cc:	f007 fc98 	bl	802af00 <__aeabi_atexit>
 80235d0:	4c0f      	ldr	r4, [pc, #60]	@ (8023610 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80235d2:	7823      	ldrb	r3, [r4, #0]
 80235d4:	f3bf 8f5b 	dmb	ish
 80235d8:	07db      	lsls	r3, r3, #31
 80235da:	d40b      	bmi.n	80235f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80235dc:	4620      	mov	r0, r4
 80235de:	f007 fc96 	bl	802af0e <__cxa_guard_acquire>
 80235e2:	b138      	cbz	r0, 80235f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80235e4:	4620      	mov	r0, r4
 80235e6:	f007 fc9e 	bl	802af26 <__cxa_guard_release>
 80235ea:	4a06      	ldr	r2, [pc, #24]	@ (8023604 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80235ec:	4909      	ldr	r1, [pc, #36]	@ (8023614 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80235ee:	480a      	ldr	r0, [pc, #40]	@ (8023618 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80235f0:	f007 fc86 	bl	802af00 <__aeabi_atexit>
 80235f4:	4b05      	ldr	r3, [pc, #20]	@ (802360c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80235f6:	612b      	str	r3, [r5, #16]
 80235f8:	4b07      	ldr	r3, [pc, #28]	@ (8023618 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80235fa:	616b      	str	r3, [r5, #20]
 80235fc:	bd38      	pop	{r3, r4, r5, pc}
 80235fe:	bf00      	nop
 8023600:	2400b998 	.word	0x2400b998
 8023604:	24000000 	.word	0x24000000
 8023608:	080217a7 	.word	0x080217a7
 802360c:	24000098 	.word	0x24000098
 8023610:	2400b99c 	.word	0x2400b99c
 8023614:	080217a5 	.word	0x080217a5
 8023618:	2400009c 	.word	0x2400009c

0802361c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 802361c:	b538      	push	{r3, r4, r5, lr}
 802361e:	4c15      	ldr	r4, [pc, #84]	@ (8023674 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8023620:	4605      	mov	r5, r0
 8023622:	7823      	ldrb	r3, [r4, #0]
 8023624:	f3bf 8f5b 	dmb	ish
 8023628:	07da      	lsls	r2, r3, #31
 802362a:	d40b      	bmi.n	8023644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802362c:	4620      	mov	r0, r4
 802362e:	f007 fc6e 	bl	802af0e <__cxa_guard_acquire>
 8023632:	b138      	cbz	r0, 8023644 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8023634:	4620      	mov	r0, r4
 8023636:	f007 fc76 	bl	802af26 <__cxa_guard_release>
 802363a:	4a0f      	ldr	r2, [pc, #60]	@ (8023678 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802363c:	490f      	ldr	r1, [pc, #60]	@ (802367c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802363e:	4810      	ldr	r0, [pc, #64]	@ (8023680 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8023640:	f007 fc5e 	bl	802af00 <__aeabi_atexit>
 8023644:	4c0f      	ldr	r4, [pc, #60]	@ (8023684 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8023646:	7823      	ldrb	r3, [r4, #0]
 8023648:	f3bf 8f5b 	dmb	ish
 802364c:	07db      	lsls	r3, r3, #31
 802364e:	d40b      	bmi.n	8023668 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023650:	4620      	mov	r0, r4
 8023652:	f007 fc5c 	bl	802af0e <__cxa_guard_acquire>
 8023656:	b138      	cbz	r0, 8023668 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8023658:	4620      	mov	r0, r4
 802365a:	f007 fc64 	bl	802af26 <__cxa_guard_release>
 802365e:	4a06      	ldr	r2, [pc, #24]	@ (8023678 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8023660:	4909      	ldr	r1, [pc, #36]	@ (8023688 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8023662:	480a      	ldr	r0, [pc, #40]	@ (802368c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8023664:	f007 fc4c 	bl	802af00 <__aeabi_atexit>
 8023668:	4b05      	ldr	r3, [pc, #20]	@ (8023680 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802366a:	60ab      	str	r3, [r5, #8]
 802366c:	4b07      	ldr	r3, [pc, #28]	@ (802368c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802366e:	60eb      	str	r3, [r5, #12]
 8023670:	bd38      	pop	{r3, r4, r5, pc}
 8023672:	bf00      	nop
 8023674:	2400b970 	.word	0x2400b970
 8023678:	24000000 	.word	0x24000000
 802367c:	080217ab 	.word	0x080217ab
 8023680:	24000070 	.word	0x24000070
 8023684:	2400b974 	.word	0x2400b974
 8023688:	080217a9 	.word	0x080217a9
 802368c:	24000074 	.word	0x24000074

08023690 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8023690:	b510      	push	{r4, lr}
 8023692:	4604      	mov	r4, r0
 8023694:	f7ff ff88 	bl	80235a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8023698:	4620      	mov	r0, r4
 802369a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802369e:	f7ff bfbd 	b.w	802361c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080236a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80236a4:	b538      	push	{r3, r4, r5, lr}
 80236a6:	4c15      	ldr	r4, [pc, #84]	@ (80236fc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80236a8:	4605      	mov	r5, r0
 80236aa:	7823      	ldrb	r3, [r4, #0]
 80236ac:	f3bf 8f5b 	dmb	ish
 80236b0:	07da      	lsls	r2, r3, #31
 80236b2:	d40b      	bmi.n	80236cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80236b4:	4620      	mov	r0, r4
 80236b6:	f007 fc2a 	bl	802af0e <__cxa_guard_acquire>
 80236ba:	b138      	cbz	r0, 80236cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80236bc:	4620      	mov	r0, r4
 80236be:	f007 fc32 	bl	802af26 <__cxa_guard_release>
 80236c2:	4a0f      	ldr	r2, [pc, #60]	@ (8023700 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80236c4:	490f      	ldr	r1, [pc, #60]	@ (8023704 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80236c6:	4810      	ldr	r0, [pc, #64]	@ (8023708 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80236c8:	f007 fc1a 	bl	802af00 <__aeabi_atexit>
 80236cc:	4c0f      	ldr	r4, [pc, #60]	@ (802370c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80236ce:	7823      	ldrb	r3, [r4, #0]
 80236d0:	f3bf 8f5b 	dmb	ish
 80236d4:	07db      	lsls	r3, r3, #31
 80236d6:	d40b      	bmi.n	80236f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80236d8:	4620      	mov	r0, r4
 80236da:	f007 fc18 	bl	802af0e <__cxa_guard_acquire>
 80236de:	b138      	cbz	r0, 80236f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80236e0:	4620      	mov	r0, r4
 80236e2:	f007 fc20 	bl	802af26 <__cxa_guard_release>
 80236e6:	4a06      	ldr	r2, [pc, #24]	@ (8023700 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80236e8:	4909      	ldr	r1, [pc, #36]	@ (8023710 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80236ea:	480a      	ldr	r0, [pc, #40]	@ (8023714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80236ec:	f007 fc08 	bl	802af00 <__aeabi_atexit>
 80236f0:	4b05      	ldr	r3, [pc, #20]	@ (8023708 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80236f2:	622b      	str	r3, [r5, #32]
 80236f4:	4b07      	ldr	r3, [pc, #28]	@ (8023714 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80236f6:	626b      	str	r3, [r5, #36]	@ 0x24
 80236f8:	bd38      	pop	{r3, r4, r5, pc}
 80236fa:	bf00      	nop
 80236fc:	2400b9a0 	.word	0x2400b9a0
 8023700:	24000000 	.word	0x24000000
 8023704:	0802179f 	.word	0x0802179f
 8023708:	240000a0 	.word	0x240000a0
 802370c:	2400b9a4 	.word	0x2400b9a4
 8023710:	0802179d 	.word	0x0802179d
 8023714:	240000a4 	.word	0x240000a4

08023718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8023718:	b538      	push	{r3, r4, r5, lr}
 802371a:	4c15      	ldr	r4, [pc, #84]	@ (8023770 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 802371c:	4605      	mov	r5, r0
 802371e:	7823      	ldrb	r3, [r4, #0]
 8023720:	f3bf 8f5b 	dmb	ish
 8023724:	07da      	lsls	r2, r3, #31
 8023726:	d40b      	bmi.n	8023740 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023728:	4620      	mov	r0, r4
 802372a:	f007 fbf0 	bl	802af0e <__cxa_guard_acquire>
 802372e:	b138      	cbz	r0, 8023740 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8023730:	4620      	mov	r0, r4
 8023732:	f007 fbf8 	bl	802af26 <__cxa_guard_release>
 8023736:	4a0f      	ldr	r2, [pc, #60]	@ (8023774 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8023738:	490f      	ldr	r1, [pc, #60]	@ (8023778 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802373a:	4810      	ldr	r0, [pc, #64]	@ (802377c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802373c:	f007 fbe0 	bl	802af00 <__aeabi_atexit>
 8023740:	4c0f      	ldr	r4, [pc, #60]	@ (8023780 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8023742:	7823      	ldrb	r3, [r4, #0]
 8023744:	f3bf 8f5b 	dmb	ish
 8023748:	07db      	lsls	r3, r3, #31
 802374a:	d40b      	bmi.n	8023764 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802374c:	4620      	mov	r0, r4
 802374e:	f007 fbde 	bl	802af0e <__cxa_guard_acquire>
 8023752:	b138      	cbz	r0, 8023764 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8023754:	4620      	mov	r0, r4
 8023756:	f007 fbe6 	bl	802af26 <__cxa_guard_release>
 802375a:	4a06      	ldr	r2, [pc, #24]	@ (8023774 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 802375c:	4909      	ldr	r1, [pc, #36]	@ (8023784 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802375e:	480a      	ldr	r0, [pc, #40]	@ (8023788 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8023760:	f007 fbce 	bl	802af00 <__aeabi_atexit>
 8023764:	4b05      	ldr	r3, [pc, #20]	@ (802377c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8023766:	61ab      	str	r3, [r5, #24]
 8023768:	4b07      	ldr	r3, [pc, #28]	@ (8023788 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802376a:	61eb      	str	r3, [r5, #28]
 802376c:	bd38      	pop	{r3, r4, r5, pc}
 802376e:	bf00      	nop
 8023770:	2400b978 	.word	0x2400b978
 8023774:	24000000 	.word	0x24000000
 8023778:	080217a3 	.word	0x080217a3
 802377c:	24000078 	.word	0x24000078
 8023780:	2400b97c 	.word	0x2400b97c
 8023784:	080217a1 	.word	0x080217a1
 8023788:	2400007c 	.word	0x2400007c

0802378c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 802378c:	b510      	push	{r4, lr}
 802378e:	4604      	mov	r4, r0
 8023790:	f7ff ff88 	bl	80236a4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8023794:	4620      	mov	r0, r4
 8023796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802379a:	f7ff bfbd 	b.w	8023718 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080237a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80237a0:	b538      	push	{r3, r4, r5, lr}
 80237a2:	4c15      	ldr	r4, [pc, #84]	@ (80237f8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80237a4:	4605      	mov	r5, r0
 80237a6:	7823      	ldrb	r3, [r4, #0]
 80237a8:	f3bf 8f5b 	dmb	ish
 80237ac:	07da      	lsls	r2, r3, #31
 80237ae:	d40b      	bmi.n	80237c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80237b0:	4620      	mov	r0, r4
 80237b2:	f007 fbac 	bl	802af0e <__cxa_guard_acquire>
 80237b6:	b138      	cbz	r0, 80237c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80237b8:	4620      	mov	r0, r4
 80237ba:	f007 fbb4 	bl	802af26 <__cxa_guard_release>
 80237be:	4a0f      	ldr	r2, [pc, #60]	@ (80237fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80237c0:	490f      	ldr	r1, [pc, #60]	@ (8023800 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80237c2:	4810      	ldr	r0, [pc, #64]	@ (8023804 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80237c4:	f007 fb9c 	bl	802af00 <__aeabi_atexit>
 80237c8:	4c0f      	ldr	r4, [pc, #60]	@ (8023808 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80237ca:	7823      	ldrb	r3, [r4, #0]
 80237cc:	f3bf 8f5b 	dmb	ish
 80237d0:	07db      	lsls	r3, r3, #31
 80237d2:	d40b      	bmi.n	80237ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80237d4:	4620      	mov	r0, r4
 80237d6:	f007 fb9a 	bl	802af0e <__cxa_guard_acquire>
 80237da:	b138      	cbz	r0, 80237ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80237dc:	4620      	mov	r0, r4
 80237de:	f007 fba2 	bl	802af26 <__cxa_guard_release>
 80237e2:	4a06      	ldr	r2, [pc, #24]	@ (80237fc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80237e4:	4909      	ldr	r1, [pc, #36]	@ (802380c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80237e6:	480a      	ldr	r0, [pc, #40]	@ (8023810 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80237e8:	f007 fb8a 	bl	802af00 <__aeabi_atexit>
 80237ec:	4b05      	ldr	r3, [pc, #20]	@ (8023804 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80237ee:	632b      	str	r3, [r5, #48]	@ 0x30
 80237f0:	4b07      	ldr	r3, [pc, #28]	@ (8023810 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80237f2:	636b      	str	r3, [r5, #52]	@ 0x34
 80237f4:	bd38      	pop	{r3, r4, r5, pc}
 80237f6:	bf00      	nop
 80237f8:	2400b9b0 	.word	0x2400b9b0
 80237fc:	24000000 	.word	0x24000000
 8023800:	08021797 	.word	0x08021797
 8023804:	240000b0 	.word	0x240000b0
 8023808:	2400b9b4 	.word	0x2400b9b4
 802380c:	08021795 	.word	0x08021795
 8023810:	240000b4 	.word	0x240000b4

08023814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8023814:	b538      	push	{r3, r4, r5, lr}
 8023816:	4c15      	ldr	r4, [pc, #84]	@ (802386c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8023818:	4605      	mov	r5, r0
 802381a:	7823      	ldrb	r3, [r4, #0]
 802381c:	f3bf 8f5b 	dmb	ish
 8023820:	07da      	lsls	r2, r3, #31
 8023822:	d40b      	bmi.n	802383c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8023824:	4620      	mov	r0, r4
 8023826:	f007 fb72 	bl	802af0e <__cxa_guard_acquire>
 802382a:	b138      	cbz	r0, 802383c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802382c:	4620      	mov	r0, r4
 802382e:	f007 fb7a 	bl	802af26 <__cxa_guard_release>
 8023832:	4a0f      	ldr	r2, [pc, #60]	@ (8023870 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023834:	490f      	ldr	r1, [pc, #60]	@ (8023874 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8023836:	4810      	ldr	r0, [pc, #64]	@ (8023878 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023838:	f007 fb62 	bl	802af00 <__aeabi_atexit>
 802383c:	4c0f      	ldr	r4, [pc, #60]	@ (802387c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802383e:	7823      	ldrb	r3, [r4, #0]
 8023840:	f3bf 8f5b 	dmb	ish
 8023844:	07db      	lsls	r3, r3, #31
 8023846:	d40b      	bmi.n	8023860 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023848:	4620      	mov	r0, r4
 802384a:	f007 fb60 	bl	802af0e <__cxa_guard_acquire>
 802384e:	b138      	cbz	r0, 8023860 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8023850:	4620      	mov	r0, r4
 8023852:	f007 fb68 	bl	802af26 <__cxa_guard_release>
 8023856:	4a06      	ldr	r2, [pc, #24]	@ (8023870 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8023858:	4909      	ldr	r1, [pc, #36]	@ (8023880 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802385a:	480a      	ldr	r0, [pc, #40]	@ (8023884 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802385c:	f007 fb50 	bl	802af00 <__aeabi_atexit>
 8023860:	4b05      	ldr	r3, [pc, #20]	@ (8023878 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8023862:	62ab      	str	r3, [r5, #40]	@ 0x28
 8023864:	4b07      	ldr	r3, [pc, #28]	@ (8023884 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8023866:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8023868:	bd38      	pop	{r3, r4, r5, pc}
 802386a:	bf00      	nop
 802386c:	2400b980 	.word	0x2400b980
 8023870:	24000000 	.word	0x24000000
 8023874:	0802179b 	.word	0x0802179b
 8023878:	24000080 	.word	0x24000080
 802387c:	2400b984 	.word	0x2400b984
 8023880:	08021799 	.word	0x08021799
 8023884:	24000084 	.word	0x24000084

08023888 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8023888:	b510      	push	{r4, lr}
 802388a:	4604      	mov	r4, r0
 802388c:	f7ff ff88 	bl	80237a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8023890:	4620      	mov	r0, r4
 8023892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023896:	f7ff bfbd 	b.w	8023814 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802389c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802389c:	b538      	push	{r3, r4, r5, lr}
 802389e:	4c15      	ldr	r4, [pc, #84]	@ (80238f4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80238a0:	4605      	mov	r5, r0
 80238a2:	7823      	ldrb	r3, [r4, #0]
 80238a4:	f3bf 8f5b 	dmb	ish
 80238a8:	07da      	lsls	r2, r3, #31
 80238aa:	d40b      	bmi.n	80238c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80238ac:	4620      	mov	r0, r4
 80238ae:	f007 fb2e 	bl	802af0e <__cxa_guard_acquire>
 80238b2:	b138      	cbz	r0, 80238c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80238b4:	4620      	mov	r0, r4
 80238b6:	f007 fb36 	bl	802af26 <__cxa_guard_release>
 80238ba:	4a0f      	ldr	r2, [pc, #60]	@ (80238f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80238bc:	490f      	ldr	r1, [pc, #60]	@ (80238fc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80238be:	4810      	ldr	r0, [pc, #64]	@ (8023900 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80238c0:	f007 fb1e 	bl	802af00 <__aeabi_atexit>
 80238c4:	4c0f      	ldr	r4, [pc, #60]	@ (8023904 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80238c6:	7823      	ldrb	r3, [r4, #0]
 80238c8:	f3bf 8f5b 	dmb	ish
 80238cc:	07db      	lsls	r3, r3, #31
 80238ce:	d40b      	bmi.n	80238e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80238d0:	4620      	mov	r0, r4
 80238d2:	f007 fb1c 	bl	802af0e <__cxa_guard_acquire>
 80238d6:	b138      	cbz	r0, 80238e8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80238d8:	4620      	mov	r0, r4
 80238da:	f007 fb24 	bl	802af26 <__cxa_guard_release>
 80238de:	4a06      	ldr	r2, [pc, #24]	@ (80238f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80238e0:	4909      	ldr	r1, [pc, #36]	@ (8023908 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80238e2:	480a      	ldr	r0, [pc, #40]	@ (802390c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80238e4:	f007 fb0c 	bl	802af00 <__aeabi_atexit>
 80238e8:	4b05      	ldr	r3, [pc, #20]	@ (8023900 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80238ea:	652b      	str	r3, [r5, #80]	@ 0x50
 80238ec:	4b07      	ldr	r3, [pc, #28]	@ (802390c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80238ee:	656b      	str	r3, [r5, #84]	@ 0x54
 80238f0:	bd38      	pop	{r3, r4, r5, pc}
 80238f2:	bf00      	nop
 80238f4:	2400b9b8 	.word	0x2400b9b8
 80238f8:	24000000 	.word	0x24000000
 80238fc:	08021787 	.word	0x08021787
 8023900:	240000b8 	.word	0x240000b8
 8023904:	2400b9bc 	.word	0x2400b9bc
 8023908:	08021785 	.word	0x08021785
 802390c:	240000bc 	.word	0x240000bc

08023910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8023910:	b538      	push	{r3, r4, r5, lr}
 8023912:	4c15      	ldr	r4, [pc, #84]	@ (8023968 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8023914:	4605      	mov	r5, r0
 8023916:	7823      	ldrb	r3, [r4, #0]
 8023918:	f3bf 8f5b 	dmb	ish
 802391c:	07da      	lsls	r2, r3, #31
 802391e:	d40b      	bmi.n	8023938 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023920:	4620      	mov	r0, r4
 8023922:	f007 faf4 	bl	802af0e <__cxa_guard_acquire>
 8023926:	b138      	cbz	r0, 8023938 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8023928:	4620      	mov	r0, r4
 802392a:	f007 fafc 	bl	802af26 <__cxa_guard_release>
 802392e:	4a0f      	ldr	r2, [pc, #60]	@ (802396c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023930:	490f      	ldr	r1, [pc, #60]	@ (8023970 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8023932:	4810      	ldr	r0, [pc, #64]	@ (8023974 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8023934:	f007 fae4 	bl	802af00 <__aeabi_atexit>
 8023938:	4c0f      	ldr	r4, [pc, #60]	@ (8023978 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802393a:	7823      	ldrb	r3, [r4, #0]
 802393c:	f3bf 8f5b 	dmb	ish
 8023940:	07db      	lsls	r3, r3, #31
 8023942:	d40b      	bmi.n	802395c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8023944:	4620      	mov	r0, r4
 8023946:	f007 fae2 	bl	802af0e <__cxa_guard_acquire>
 802394a:	b138      	cbz	r0, 802395c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802394c:	4620      	mov	r0, r4
 802394e:	f007 faea 	bl	802af26 <__cxa_guard_release>
 8023952:	4a06      	ldr	r2, [pc, #24]	@ (802396c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8023954:	4909      	ldr	r1, [pc, #36]	@ (802397c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8023956:	480a      	ldr	r0, [pc, #40]	@ (8023980 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023958:	f007 fad2 	bl	802af00 <__aeabi_atexit>
 802395c:	4b05      	ldr	r3, [pc, #20]	@ (8023974 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802395e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8023960:	4b07      	ldr	r3, [pc, #28]	@ (8023980 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8023962:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8023964:	bd38      	pop	{r3, r4, r5, pc}
 8023966:	bf00      	nop
 8023968:	2400b9c0 	.word	0x2400b9c0
 802396c:	24000000 	.word	0x24000000
 8023970:	0802178b 	.word	0x0802178b
 8023974:	240000c0 	.word	0x240000c0
 8023978:	2400b9c4 	.word	0x2400b9c4
 802397c:	08021789 	.word	0x08021789
 8023980:	240000c4 	.word	0x240000c4

08023984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8023984:	b538      	push	{r3, r4, r5, lr}
 8023986:	4c15      	ldr	r4, [pc, #84]	@ (80239dc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8023988:	4605      	mov	r5, r0
 802398a:	7823      	ldrb	r3, [r4, #0]
 802398c:	f3bf 8f5b 	dmb	ish
 8023990:	07da      	lsls	r2, r3, #31
 8023992:	d40b      	bmi.n	80239ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8023994:	4620      	mov	r0, r4
 8023996:	f007 faba 	bl	802af0e <__cxa_guard_acquire>
 802399a:	b138      	cbz	r0, 80239ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802399c:	4620      	mov	r0, r4
 802399e:	f007 fac2 	bl	802af26 <__cxa_guard_release>
 80239a2:	4a0f      	ldr	r2, [pc, #60]	@ (80239e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80239a4:	490f      	ldr	r1, [pc, #60]	@ (80239e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80239a6:	4810      	ldr	r0, [pc, #64]	@ (80239e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80239a8:	f007 faaa 	bl	802af00 <__aeabi_atexit>
 80239ac:	4c0f      	ldr	r4, [pc, #60]	@ (80239ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80239ae:	7823      	ldrb	r3, [r4, #0]
 80239b0:	f3bf 8f5b 	dmb	ish
 80239b4:	07db      	lsls	r3, r3, #31
 80239b6:	d40b      	bmi.n	80239d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80239b8:	4620      	mov	r0, r4
 80239ba:	f007 faa8 	bl	802af0e <__cxa_guard_acquire>
 80239be:	b138      	cbz	r0, 80239d0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80239c0:	4620      	mov	r0, r4
 80239c2:	f007 fab0 	bl	802af26 <__cxa_guard_release>
 80239c6:	4a06      	ldr	r2, [pc, #24]	@ (80239e0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80239c8:	4909      	ldr	r1, [pc, #36]	@ (80239f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80239ca:	480a      	ldr	r0, [pc, #40]	@ (80239f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80239cc:	f007 fa98 	bl	802af00 <__aeabi_atexit>
 80239d0:	4b05      	ldr	r3, [pc, #20]	@ (80239e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80239d2:	642b      	str	r3, [r5, #64]	@ 0x40
 80239d4:	4b07      	ldr	r3, [pc, #28]	@ (80239f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80239d6:	646b      	str	r3, [r5, #68]	@ 0x44
 80239d8:	bd38      	pop	{r3, r4, r5, pc}
 80239da:	bf00      	nop
 80239dc:	2400b988 	.word	0x2400b988
 80239e0:	24000000 	.word	0x24000000
 80239e4:	0802178f 	.word	0x0802178f
 80239e8:	24000088 	.word	0x24000088
 80239ec:	2400b98c 	.word	0x2400b98c
 80239f0:	0802178d 	.word	0x0802178d
 80239f4:	2400008c 	.word	0x2400008c

080239f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80239f8:	b538      	push	{r3, r4, r5, lr}
 80239fa:	4c15      	ldr	r4, [pc, #84]	@ (8023a50 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80239fc:	4605      	mov	r5, r0
 80239fe:	7823      	ldrb	r3, [r4, #0]
 8023a00:	f3bf 8f5b 	dmb	ish
 8023a04:	07da      	lsls	r2, r3, #31
 8023a06:	d40b      	bmi.n	8023a20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023a08:	4620      	mov	r0, r4
 8023a0a:	f007 fa80 	bl	802af0e <__cxa_guard_acquire>
 8023a0e:	b138      	cbz	r0, 8023a20 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8023a10:	4620      	mov	r0, r4
 8023a12:	f007 fa88 	bl	802af26 <__cxa_guard_release>
 8023a16:	4a0f      	ldr	r2, [pc, #60]	@ (8023a54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023a18:	490f      	ldr	r1, [pc, #60]	@ (8023a58 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8023a1a:	4810      	ldr	r0, [pc, #64]	@ (8023a5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023a1c:	f007 fa70 	bl	802af00 <__aeabi_atexit>
 8023a20:	4c0f      	ldr	r4, [pc, #60]	@ (8023a60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8023a22:	7823      	ldrb	r3, [r4, #0]
 8023a24:	f3bf 8f5b 	dmb	ish
 8023a28:	07db      	lsls	r3, r3, #31
 8023a2a:	d40b      	bmi.n	8023a44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023a2c:	4620      	mov	r0, r4
 8023a2e:	f007 fa6e 	bl	802af0e <__cxa_guard_acquire>
 8023a32:	b138      	cbz	r0, 8023a44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8023a34:	4620      	mov	r0, r4
 8023a36:	f007 fa76 	bl	802af26 <__cxa_guard_release>
 8023a3a:	4a06      	ldr	r2, [pc, #24]	@ (8023a54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8023a3c:	4909      	ldr	r1, [pc, #36]	@ (8023a64 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8023a3e:	480a      	ldr	r0, [pc, #40]	@ (8023a68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023a40:	f007 fa5e 	bl	802af00 <__aeabi_atexit>
 8023a44:	4b05      	ldr	r3, [pc, #20]	@ (8023a5c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8023a46:	63ab      	str	r3, [r5, #56]	@ 0x38
 8023a48:	4b07      	ldr	r3, [pc, #28]	@ (8023a68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8023a4a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 8023a4c:	bd38      	pop	{r3, r4, r5, pc}
 8023a4e:	bf00      	nop
 8023a50:	2400b9a8 	.word	0x2400b9a8
 8023a54:	24000000 	.word	0x24000000
 8023a58:	08021793 	.word	0x08021793
 8023a5c:	240000a8 	.word	0x240000a8
 8023a60:	2400b9ac 	.word	0x2400b9ac
 8023a64:	08021791 	.word	0x08021791
 8023a68:	240000ac 	.word	0x240000ac

08023a6c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8023a6c:	b510      	push	{r4, lr}
 8023a6e:	4604      	mov	r4, r0
 8023a70:	f7ff ff14 	bl	802389c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8023a74:	4620      	mov	r0, r4
 8023a76:	f7ff ff85 	bl	8023984 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8023a7a:	4620      	mov	r0, r4
 8023a7c:	f7ff ff48 	bl	8023910 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8023a80:	4620      	mov	r0, r4
 8023a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023a86:	f7ff bfb7 	b.w	80239f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08023a8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8023a8c:	b538      	push	{r3, r4, r5, lr}
 8023a8e:	4c15      	ldr	r4, [pc, #84]	@ (8023ae4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8023a90:	4605      	mov	r5, r0
 8023a92:	7823      	ldrb	r3, [r4, #0]
 8023a94:	f3bf 8f5b 	dmb	ish
 8023a98:	07da      	lsls	r2, r3, #31
 8023a9a:	d40b      	bmi.n	8023ab4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f007 fa36 	bl	802af0e <__cxa_guard_acquire>
 8023aa2:	b138      	cbz	r0, 8023ab4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8023aa4:	4620      	mov	r0, r4
 8023aa6:	f007 fa3e 	bl	802af26 <__cxa_guard_release>
 8023aaa:	4a0f      	ldr	r2, [pc, #60]	@ (8023ae8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023aac:	490f      	ldr	r1, [pc, #60]	@ (8023aec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8023aae:	4810      	ldr	r0, [pc, #64]	@ (8023af0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023ab0:	f007 fa26 	bl	802af00 <__aeabi_atexit>
 8023ab4:	4c0f      	ldr	r4, [pc, #60]	@ (8023af4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8023ab6:	7823      	ldrb	r3, [r4, #0]
 8023ab8:	f3bf 8f5b 	dmb	ish
 8023abc:	07db      	lsls	r3, r3, #31
 8023abe:	d40b      	bmi.n	8023ad8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023ac0:	4620      	mov	r0, r4
 8023ac2:	f007 fa24 	bl	802af0e <__cxa_guard_acquire>
 8023ac6:	b138      	cbz	r0, 8023ad8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8023ac8:	4620      	mov	r0, r4
 8023aca:	f007 fa2c 	bl	802af26 <__cxa_guard_release>
 8023ace:	4a06      	ldr	r2, [pc, #24]	@ (8023ae8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8023ad0:	4909      	ldr	r1, [pc, #36]	@ (8023af8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8023ad2:	480a      	ldr	r0, [pc, #40]	@ (8023afc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023ad4:	f007 fa14 	bl	802af00 <__aeabi_atexit>
 8023ad8:	4b05      	ldr	r3, [pc, #20]	@ (8023af0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8023ada:	662b      	str	r3, [r5, #96]	@ 0x60
 8023adc:	4b07      	ldr	r3, [pc, #28]	@ (8023afc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8023ade:	666b      	str	r3, [r5, #100]	@ 0x64
 8023ae0:	bd38      	pop	{r3, r4, r5, pc}
 8023ae2:	bf00      	nop
 8023ae4:	2400b990 	.word	0x2400b990
 8023ae8:	24000000 	.word	0x24000000
 8023aec:	0802177f 	.word	0x0802177f
 8023af0:	24000090 	.word	0x24000090
 8023af4:	2400b994 	.word	0x2400b994
 8023af8:	0802177d 	.word	0x0802177d
 8023afc:	24000094 	.word	0x24000094

08023b00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8023b00:	b538      	push	{r3, r4, r5, lr}
 8023b02:	4c15      	ldr	r4, [pc, #84]	@ (8023b58 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8023b04:	4605      	mov	r5, r0
 8023b06:	7823      	ldrb	r3, [r4, #0]
 8023b08:	f3bf 8f5b 	dmb	ish
 8023b0c:	07da      	lsls	r2, r3, #31
 8023b0e:	d40b      	bmi.n	8023b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b10:	4620      	mov	r0, r4
 8023b12:	f007 f9fc 	bl	802af0e <__cxa_guard_acquire>
 8023b16:	b138      	cbz	r0, 8023b28 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8023b18:	4620      	mov	r0, r4
 8023b1a:	f007 fa04 	bl	802af26 <__cxa_guard_release>
 8023b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8023b5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b20:	490f      	ldr	r1, [pc, #60]	@ (8023b60 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8023b22:	4810      	ldr	r0, [pc, #64]	@ (8023b64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b24:	f007 f9ec 	bl	802af00 <__aeabi_atexit>
 8023b28:	4c0f      	ldr	r4, [pc, #60]	@ (8023b68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8023b2a:	7823      	ldrb	r3, [r4, #0]
 8023b2c:	f3bf 8f5b 	dmb	ish
 8023b30:	07db      	lsls	r3, r3, #31
 8023b32:	d40b      	bmi.n	8023b4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b34:	4620      	mov	r0, r4
 8023b36:	f007 f9ea 	bl	802af0e <__cxa_guard_acquire>
 8023b3a:	b138      	cbz	r0, 8023b4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8023b3c:	4620      	mov	r0, r4
 8023b3e:	f007 f9f2 	bl	802af26 <__cxa_guard_release>
 8023b42:	4a06      	ldr	r2, [pc, #24]	@ (8023b5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8023b44:	4909      	ldr	r1, [pc, #36]	@ (8023b6c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8023b46:	480a      	ldr	r0, [pc, #40]	@ (8023b70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b48:	f007 f9da 	bl	802af00 <__aeabi_atexit>
 8023b4c:	4b05      	ldr	r3, [pc, #20]	@ (8023b64 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8023b4e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8023b50:	4b07      	ldr	r3, [pc, #28]	@ (8023b70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8023b52:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8023b54:	bd38      	pop	{r3, r4, r5, pc}
 8023b56:	bf00      	nop
 8023b58:	2400b968 	.word	0x2400b968
 8023b5c:	24000000 	.word	0x24000000
 8023b60:	08021783 	.word	0x08021783
 8023b64:	24000068 	.word	0x24000068
 8023b68:	2400b96c 	.word	0x2400b96c
 8023b6c:	08021781 	.word	0x08021781
 8023b70:	2400006c 	.word	0x2400006c

08023b74 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8023b74:	b510      	push	{r4, lr}
 8023b76:	4604      	mov	r4, r0
 8023b78:	f7ff ff88 	bl	8023a8c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8023b7c:	4620      	mov	r0, r4
 8023b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023b82:	f7ff bfbd 	b.w	8023b00 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08023b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8023b88:	b538      	push	{r3, r4, r5, lr}
 8023b8a:	4c15      	ldr	r4, [pc, #84]	@ (8023be0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8023b8c:	4605      	mov	r5, r0
 8023b8e:	7823      	ldrb	r3, [r4, #0]
 8023b90:	f3bf 8f5b 	dmb	ish
 8023b94:	07da      	lsls	r2, r3, #31
 8023b96:	d40b      	bmi.n	8023bb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023b98:	4620      	mov	r0, r4
 8023b9a:	f007 f9b8 	bl	802af0e <__cxa_guard_acquire>
 8023b9e:	b138      	cbz	r0, 8023bb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8023ba0:	4620      	mov	r0, r4
 8023ba2:	f007 f9c0 	bl	802af26 <__cxa_guard_release>
 8023ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8023be4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023ba8:	490f      	ldr	r1, [pc, #60]	@ (8023be8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8023baa:	4810      	ldr	r0, [pc, #64]	@ (8023bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023bac:	f007 f9a8 	bl	802af00 <__aeabi_atexit>
 8023bb0:	4c0f      	ldr	r4, [pc, #60]	@ (8023bf0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8023bb2:	7823      	ldrb	r3, [r4, #0]
 8023bb4:	f3bf 8f5b 	dmb	ish
 8023bb8:	07db      	lsls	r3, r3, #31
 8023bba:	d40b      	bmi.n	8023bd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023bbc:	4620      	mov	r0, r4
 8023bbe:	f007 f9a6 	bl	802af0e <__cxa_guard_acquire>
 8023bc2:	b138      	cbz	r0, 8023bd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8023bc4:	4620      	mov	r0, r4
 8023bc6:	f007 f9ae 	bl	802af26 <__cxa_guard_release>
 8023bca:	4a06      	ldr	r2, [pc, #24]	@ (8023be4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8023bcc:	4909      	ldr	r1, [pc, #36]	@ (8023bf4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8023bce:	480a      	ldr	r0, [pc, #40]	@ (8023bf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023bd0:	f007 f996 	bl	802af00 <__aeabi_atexit>
 8023bd4:	4b05      	ldr	r3, [pc, #20]	@ (8023bec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8023bd6:	672b      	str	r3, [r5, #112]	@ 0x70
 8023bd8:	4b07      	ldr	r3, [pc, #28]	@ (8023bf8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8023bda:	676b      	str	r3, [r5, #116]	@ 0x74
 8023bdc:	bd38      	pop	{r3, r4, r5, pc}
 8023bde:	bf00      	nop
 8023be0:	2400b960 	.word	0x2400b960
 8023be4:	24000000 	.word	0x24000000
 8023be8:	08021777 	.word	0x08021777
 8023bec:	24000060 	.word	0x24000060
 8023bf0:	2400b964 	.word	0x2400b964
 8023bf4:	08021775 	.word	0x08021775
 8023bf8:	24000064 	.word	0x24000064

08023bfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8023bfc:	b538      	push	{r3, r4, r5, lr}
 8023bfe:	4c15      	ldr	r4, [pc, #84]	@ (8023c54 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8023c00:	4605      	mov	r5, r0
 8023c02:	7823      	ldrb	r3, [r4, #0]
 8023c04:	f3bf 8f5b 	dmb	ish
 8023c08:	07da      	lsls	r2, r3, #31
 8023c0a:	d40b      	bmi.n	8023c24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c0c:	4620      	mov	r0, r4
 8023c0e:	f007 f97e 	bl	802af0e <__cxa_guard_acquire>
 8023c12:	b138      	cbz	r0, 8023c24 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8023c14:	4620      	mov	r0, r4
 8023c16:	f007 f986 	bl	802af26 <__cxa_guard_release>
 8023c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8023c58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c1c:	490f      	ldr	r1, [pc, #60]	@ (8023c5c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8023c1e:	4810      	ldr	r0, [pc, #64]	@ (8023c60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c20:	f007 f96e 	bl	802af00 <__aeabi_atexit>
 8023c24:	4c0f      	ldr	r4, [pc, #60]	@ (8023c64 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8023c26:	7823      	ldrb	r3, [r4, #0]
 8023c28:	f3bf 8f5b 	dmb	ish
 8023c2c:	07db      	lsls	r3, r3, #31
 8023c2e:	d40b      	bmi.n	8023c48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c30:	4620      	mov	r0, r4
 8023c32:	f007 f96c 	bl	802af0e <__cxa_guard_acquire>
 8023c36:	b138      	cbz	r0, 8023c48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8023c38:	4620      	mov	r0, r4
 8023c3a:	f007 f974 	bl	802af26 <__cxa_guard_release>
 8023c3e:	4a06      	ldr	r2, [pc, #24]	@ (8023c58 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8023c40:	4909      	ldr	r1, [pc, #36]	@ (8023c68 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8023c42:	480a      	ldr	r0, [pc, #40]	@ (8023c6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c44:	f007 f95c 	bl	802af00 <__aeabi_atexit>
 8023c48:	4b05      	ldr	r3, [pc, #20]	@ (8023c60 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8023c4a:	66ab      	str	r3, [r5, #104]	@ 0x68
 8023c4c:	4b07      	ldr	r3, [pc, #28]	@ (8023c6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8023c4e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8023c50:	bd38      	pop	{r3, r4, r5, pc}
 8023c52:	bf00      	nop
 8023c54:	2400b958 	.word	0x2400b958
 8023c58:	24000000 	.word	0x24000000
 8023c5c:	0802177b 	.word	0x0802177b
 8023c60:	24000058 	.word	0x24000058
 8023c64:	2400b95c 	.word	0x2400b95c
 8023c68:	08021779 	.word	0x08021779
 8023c6c:	2400005c 	.word	0x2400005c

08023c70 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8023c70:	b510      	push	{r4, lr}
 8023c72:	4604      	mov	r4, r0
 8023c74:	f7ff ff88 	bl	8023b88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8023c78:	4620      	mov	r0, r4
 8023c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023c7e:	f7ff bfbd 	b.w	8023bfc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08023c82 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8023c82:	b510      	push	{r4, lr}
 8023c84:	4604      	mov	r4, r0
 8023c86:	f7ff fff3 	bl	8023c70 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8023c8a:	4620      	mov	r0, r4
 8023c8c:	f7ff ff72 	bl	8023b74 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8023c90:	4620      	mov	r0, r4
 8023c92:	f7ff fdf9 	bl	8023888 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8023c96:	4620      	mov	r0, r4
 8023c98:	f7ff fcfa 	bl	8023690 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8023c9c:	4620      	mov	r0, r4
 8023c9e:	f7ff fd75 	bl	802378c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8023ca2:	4620      	mov	r0, r4
 8023ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ca8:	f7ff bee0 	b.w	8023a6c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08023cac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8023cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cb0:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	@ 0x30
 8023cb4:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 8023cb8:	f1be 0f00 	cmp.w	lr, #0
 8023cbc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8023cc0:	fb0e 4708 	mla	r7, lr, r8, r4
 8023cc4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8023cc8:	f89d c03c 	ldrb.w	ip, [sp, #60]	@ 0x3c
 8023ccc:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8023cd0:	eb02 0a07 	add.w	sl, r2, r7
 8023cd4:	8808      	ldrh	r0, [r1, #0]
 8023cd6:	db37      	blt.n	8023d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023cd8:	45f3      	cmp	fp, lr
 8023cda:	dd35      	ble.n	8023d48 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8023cdc:	2c00      	cmp	r4, #0
 8023cde:	db31      	blt.n	8023d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023ce0:	45a0      	cmp	r8, r4
 8023ce2:	dd2f      	ble.n	8023d44 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8023ce4:	5dd2      	ldrb	r2, [r2, r7]
 8023ce6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8023cea:	1c62      	adds	r2, r4, #1
 8023cec:	d42f      	bmi.n	8023d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023cee:	4590      	cmp	r8, r2
 8023cf0:	dd2d      	ble.n	8023d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023cf2:	b366      	cbz	r6, 8023d4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8023cf4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023cf8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023cfc:	f11e 0e01 	adds.w	lr, lr, #1
 8023d00:	d429      	bmi.n	8023d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023d02:	45f3      	cmp	fp, lr
 8023d04:	dd27      	ble.n	8023d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8023d06:	f1bc 0f00 	cmp.w	ip, #0
 8023d0a:	f000 80a1 	beq.w	8023e50 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8023d0e:	2c00      	cmp	r4, #0
 8023d10:	db1f      	blt.n	8023d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023d12:	45a0      	cmp	r8, r4
 8023d14:	dd1d      	ble.n	8023d52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8023d16:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8023d1a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8023d1e:	3401      	adds	r4, #1
 8023d20:	d41c      	bmi.n	8023d5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023d22:	45a0      	cmp	r8, r4
 8023d24:	dd1a      	ble.n	8023d5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8023d26:	b1de      	cbz	r6, 8023d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8023d28:	44d0      	add	r8, sl
 8023d2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023d2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8023d32:	2e0f      	cmp	r6, #15
 8023d34:	d915      	bls.n	8023d62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8023d36:	4b49      	ldr	r3, [pc, #292]	@ (8023e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8023d38:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8023d3c:	4a48      	ldr	r2, [pc, #288]	@ (8023e60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8023d3e:	4849      	ldr	r0, [pc, #292]	@ (8023e64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8023d40:	f007 f912 	bl	802af68 <__assert_func>
 8023d44:	4681      	mov	r9, r0
 8023d46:	e7d0      	b.n	8023cea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8023d48:	4607      	mov	r7, r0
 8023d4a:	4681      	mov	r9, r0
 8023d4c:	e7d6      	b.n	8023cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023d4e:	4607      	mov	r7, r0
 8023d50:	e7d4      	b.n	8023cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8023d52:	4686      	mov	lr, r0
 8023d54:	e7e3      	b.n	8023d1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8023d56:	4603      	mov	r3, r0
 8023d58:	4686      	mov	lr, r0
 8023d5a:	e7ea      	b.n	8023d32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023d5c:	4603      	mov	r3, r0
 8023d5e:	e7e8      	b.n	8023d32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8023d60:	4603      	mov	r3, r0
 8023d62:	f1bc 0f0f 	cmp.w	ip, #15
 8023d66:	d8e6      	bhi.n	8023d36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023d68:	fb16 f80c 	smulbb	r8, r6, ip
 8023d6c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8023d70:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8023d74:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8023d78:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8023d7c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8023d80:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8023d84:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8023d88:	ea44 0909 	orr.w	r9, r4, r9
 8023d8c:	f1cc 0410 	rsb	r4, ip, #16
 8023d90:	041a      	lsls	r2, r3, #16
 8023d92:	ea4a 0707 	orr.w	r7, sl, r7
 8023d96:	1ba4      	subs	r4, r4, r6
 8023d98:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8023d9c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023da0:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023da4:	4377      	muls	r7, r6
 8023da6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8023daa:	4313      	orrs	r3, r2
 8023dac:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8023db0:	fb04 7409 	mla	r4, r4, r9, r7
 8023db4:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8023db8:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8023dbc:	b2af      	uxth	r7, r5
 8023dbe:	fb08 4303 	mla	r3, r8, r3, r4
 8023dc2:	f42e 64fc 	bic.w	r4, lr, #2016	@ 0x7e0
 8023dc6:	43ed      	mvns	r5, r5
 8023dc8:	10c6      	asrs	r6, r0, #3
 8023dca:	4322      	orrs	r2, r4
 8023dcc:	b2ed      	uxtb	r5, r5
 8023dce:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8023dd6:	fb16 f605 	smulbb	r6, r6, r5
 8023dda:	0d53      	lsrs	r3, r2, #21
 8023ddc:	0952      	lsrs	r2, r2, #5
 8023dde:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8023de2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8023de6:	431a      	orrs	r2, r3
 8023de8:	b293      	uxth	r3, r2
 8023dea:	1202      	asrs	r2, r0, #8
 8023dec:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8023df0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8023df4:	00dc      	lsls	r4, r3, #3
 8023df6:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023dfa:	fb12 f205 	smulbb	r2, r2, r5
 8023dfe:	b2e4      	uxtb	r4, r4
 8023e00:	fb0c 2c07 	mla	ip, ip, r7, r2
 8023e04:	10da      	asrs	r2, r3, #3
 8023e06:	00c3      	lsls	r3, r0, #3
 8023e08:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8023e0c:	fa1f fc8c 	uxth.w	ip, ip
 8023e10:	b2db      	uxtb	r3, r3
 8023e12:	fb02 6207 	mla	r2, r2, r7, r6
 8023e16:	fb13 f305 	smulbb	r3, r3, r5
 8023e1a:	b296      	uxth	r6, r2
 8023e1c:	fb04 3307 	mla	r3, r4, r7, r3
 8023e20:	b29a      	uxth	r2, r3
 8023e22:	f10c 0301 	add.w	r3, ip, #1
 8023e26:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023e2a:	1c53      	adds	r3, r2, #1
 8023e2c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023e30:	1c72      	adds	r2, r6, #1
 8023e32:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8023e36:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8023e3a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8023e3e:	0952      	lsrs	r2, r2, #5
 8023e40:	ea43 030c 	orr.w	r3, r3, ip
 8023e44:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8023e48:	4313      	orrs	r3, r2
 8023e4a:	800b      	strh	r3, [r1, #0]
 8023e4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e50:	2e0f      	cmp	r6, #15
 8023e52:	f63f af70 	bhi.w	8023d36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8023e56:	4603      	mov	r3, r0
 8023e58:	4686      	mov	lr, r0
 8023e5a:	e785      	b.n	8023d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8023e5c:	08030109 	.word	0x08030109
 8023e60:	0803077f 	.word	0x0803077f
 8023e64:	0803018d 	.word	0x0803018d

08023e68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	ed2d 8b08 	vpush	{d8-d11}
 8023e70:	b099      	sub	sp, #100	@ 0x64
 8023e72:	eeb0 aa40 	vmov.f32	s20, s0
 8023e76:	eef0 9a60 	vmov.f32	s19, s1
 8023e7a:	9215      	str	r2, [sp, #84]	@ 0x54
 8023e7c:	eeb0 9a41 	vmov.f32	s18, s2
 8023e80:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8023e82:	eeb0 8a62 	vmov.f32	s16, s5
 8023e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e88:	eef0 8a43 	vmov.f32	s17, s6
 8023e8c:	f89d 30cc 	ldrb.w	r3, [sp, #204]	@ 0xcc
 8023e90:	eef0 ba44 	vmov.f32	s23, s8
 8023e94:	9016      	str	r0, [sp, #88]	@ 0x58
 8023e96:	eeb0 ba64 	vmov.f32	s22, s9
 8023e9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8023e9c:	eef0 aa45 	vmov.f32	s21, s10
 8023ea0:	6850      	ldr	r0, [r2, #4]
 8023ea2:	910c      	str	r1, [sp, #48]	@ 0x30
 8023ea4:	6812      	ldr	r2, [r2, #0]
 8023ea6:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	@ 0xc0
 8023eaa:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	@ 0xac
 8023eae:	fb00 1303 	mla	r3, r0, r3, r1
 8023eb2:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8023eb6:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023ebc:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023ebe:	685e      	ldr	r6, [r3, #4]
 8023ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8023ec2:	3604      	adds	r6, #4
 8023ec4:	43db      	mvns	r3, r3
 8023ec6:	b2db      	uxtb	r3, r3
 8023ec8:	930a      	str	r3, [sp, #40]	@ 0x28
 8023eca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023ecc:	2b00      	cmp	r3, #0
 8023ece:	dc03      	bgt.n	8023ed8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023ed0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8023ed2:	2b00      	cmp	r3, #0
 8023ed4:	f340 8225 	ble.w	8024322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8023ed8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023eda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023ede:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023ee2:	1e48      	subs	r0, r1, #1
 8023ee4:	1e57      	subs	r7, r2, #1
 8023ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023ee8:	2b00      	cmp	r3, #0
 8023eea:	f340 80e3 	ble.w	80240b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8023eee:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8023ef2:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023ef6:	d406      	bmi.n	8023f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023ef8:	4584      	cmp	ip, r0
 8023efa:	da04      	bge.n	8023f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023efc:	2b00      	cmp	r3, #0
 8023efe:	db02      	blt.n	8023f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023f00:	42bb      	cmp	r3, r7
 8023f02:	f2c0 80d8 	blt.w	80240b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8023f06:	f11c 0c01 	adds.w	ip, ip, #1
 8023f0a:	f100 80c9 	bmi.w	80240a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023f0e:	4561      	cmp	r1, ip
 8023f10:	f2c0 80c6 	blt.w	80240a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023f14:	3301      	adds	r3, #1
 8023f16:	f100 80c3 	bmi.w	80240a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023f1a:	429a      	cmp	r2, r3
 8023f1c:	f2c0 80c0 	blt.w	80240a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8023f20:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8023f24:	4647      	mov	r7, r8
 8023f26:	f1bb 0f00 	cmp.w	fp, #0
 8023f2a:	f340 80e3 	ble.w	80240f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023f2e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8023f30:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8023f34:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8023f36:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8023f3a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8023f3e:	ea5f 422a 	movs.w	r2, sl, asr #16
 8023f42:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023f46:	689b      	ldr	r3, [r3, #8]
 8023f48:	f100 8121 	bmi.w	802418e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023f4c:	f103 39ff 	add.w	r9, r3, #4294967295
 8023f50:	454a      	cmp	r2, r9
 8023f52:	f280 811c 	bge.w	802418e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023f56:	f1bc 0f00 	cmp.w	ip, #0
 8023f5a:	f2c0 8118 	blt.w	802418e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023f5e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023f62:	45cc      	cmp	ip, r9
 8023f64:	f280 8113 	bge.w	802418e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8023f68:	b21b      	sxth	r3, r3
 8023f6a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8023f6c:	fb0c 2203 	mla	r2, ip, r3, r2
 8023f70:	eb04 0902 	add.w	r9, r4, r2
 8023f74:	5ca2      	ldrb	r2, [r4, r2]
 8023f76:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8023f7a:	2800      	cmp	r0, #0
 8023f7c:	f000 80fe 	beq.w	802417c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023f80:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023f84:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8023f88:	9211      	str	r2, [sp, #68]	@ 0x44
 8023f8a:	b151      	cbz	r1, 8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023f8c:	eb09 0203 	add.w	r2, r9, r3
 8023f90:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023f94:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023f98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023f9a:	7853      	ldrb	r3, [r2, #1]
 8023f9c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023fa0:	9312      	str	r3, [sp, #72]	@ 0x48
 8023fa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023fa4:	fb10 f201 	smulbb	r2, r0, r1
 8023fa8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023faa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023fae:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8023fb2:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8023fb6:	10d2      	asrs	r2, r2, #3
 8023fb8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023fbc:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8023fc0:	ea4c 0c03 	orr.w	ip, ip, r3
 8023fc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8023fc6:	041b      	lsls	r3, r3, #16
 8023fc8:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8023fcc:	4323      	orrs	r3, r4
 8023fce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8023fd0:	4353      	muls	r3, r2
 8023fd2:	fb09 330c 	mla	r3, r9, ip, r3
 8023fd6:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023fda:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8023fde:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8023fe2:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023fe6:	f1c1 0c10 	rsb	ip, r1, #16
 8023fea:	ebac 0c00 	sub.w	ip, ip, r0
 8023fee:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023ff2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023ff6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8023ffc:	0418      	lsls	r0, r3, #16
 8023ffe:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024002:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8024006:	4318      	orrs	r0, r3
 8024008:	fb02 c200 	mla	r2, r2, r0, ip
 802400c:	8838      	ldrh	r0, [r7, #0]
 802400e:	0d53      	lsrs	r3, r2, #21
 8024010:	0952      	lsrs	r2, r2, #5
 8024012:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024016:	1201      	asrs	r1, r0, #8
 8024018:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802401c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024020:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024024:	00c0      	lsls	r0, r0, #3
 8024026:	431a      	orrs	r2, r3
 8024028:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 802402c:	fb11 f104 	smulbb	r1, r1, r4
 8024030:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8024034:	b292      	uxth	r2, r2
 8024036:	fb1e fe04 	smulbb	lr, lr, r4
 802403a:	b2c0      	uxtb	r0, r0
 802403c:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024040:	fb10 f004 	smulbb	r0, r0, r4
 8024044:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8024048:	fb0c 1c03 	mla	ip, ip, r3, r1
 802404c:	10d1      	asrs	r1, r2, #3
 802404e:	00d2      	lsls	r2, r2, #3
 8024050:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024054:	fa1f fc8c 	uxth.w	ip, ip
 8024058:	b2d2      	uxtb	r2, r2
 802405a:	fb01 e103 	mla	r1, r1, r3, lr
 802405e:	fb02 0303 	mla	r3, r2, r3, r0
 8024062:	b289      	uxth	r1, r1
 8024064:	b29a      	uxth	r2, r3
 8024066:	f10c 0301 	add.w	r3, ip, #1
 802406a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802406e:	1c53      	adds	r3, r2, #1
 8024070:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024074:	1c4a      	adds	r2, r1, #1
 8024076:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 802407a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802407e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024082:	0949      	lsrs	r1, r1, #5
 8024084:	ea43 030c 	orr.w	r3, r3, ip
 8024088:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802408c:	430b      	orrs	r3, r1
 802408e:	803b      	strh	r3, [r7, #0]
 8024090:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8024092:	3702      	adds	r7, #2
 8024094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024098:	449a      	add	sl, r3
 802409a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802409c:	441d      	add	r5, r3
 802409e:	e742      	b.n	8023f26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 80240a0:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80240a2:	f108 0802 	add.w	r8, r8, #2
 80240a6:	449a      	add	sl, r3
 80240a8:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80240aa:	441d      	add	r5, r3
 80240ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240ae:	3b01      	subs	r3, #1
 80240b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80240b2:	e718      	b.n	8023ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80240b4:	d023      	beq.n	80240fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80240b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240b8:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80240ba:	3b01      	subs	r3, #1
 80240bc:	fb00 a003 	mla	r0, r0, r3, sl
 80240c0:	1400      	asrs	r0, r0, #16
 80240c2:	f53f af2d 	bmi.w	8023f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80240c6:	3901      	subs	r1, #1
 80240c8:	4288      	cmp	r0, r1
 80240ca:	f6bf af29 	bge.w	8023f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80240ce:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80240d0:	fb01 5303 	mla	r3, r1, r3, r5
 80240d4:	141b      	asrs	r3, r3, #16
 80240d6:	f53f af23 	bmi.w	8023f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80240da:	3a01      	subs	r2, #1
 80240dc:	4293      	cmp	r3, r2
 80240de:	f6bf af1f 	bge.w	8023f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 80240e2:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 80240e6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 80240ea:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 80240ee:	f1be 0f00 	cmp.w	lr, #0
 80240f2:	dc6c      	bgt.n	80241ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80240f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80240f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80240fa:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 80240fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024100:	2b00      	cmp	r3, #0
 8024102:	f340 810e 	ble.w	8024322 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8024106:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802410a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802410c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024110:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024114:	eef0 6a48 	vmov.f32	s13, s16
 8024118:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802411c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024120:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024124:	ee16 aa90 	vmov	sl, s13
 8024128:	eef0 6a68 	vmov.f32	s13, s17
 802412c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024130:	ee16 5a90 	vmov	r5, s13
 8024134:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024138:	ee69 7a27 	vmul.f32	s15, s18, s15
 802413c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024140:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024144:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024148:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802414c:	ee18 2a10 	vmov	r2, s16
 8024150:	eeb0 8a47 	vmov.f32	s16, s14
 8024154:	fb92 f3f3 	sdiv	r3, r2, r3
 8024158:	ee18 2a90 	vmov	r2, s17
 802415c:	932d      	str	r3, [sp, #180]	@ 0xb4
 802415e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024160:	eef0 8a67 	vmov.f32	s17, s15
 8024164:	fb92 f3f3 	sdiv	r3, r2, r3
 8024168:	932e      	str	r3, [sp, #184]	@ 0xb8
 802416a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802416c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 802416e:	3b01      	subs	r3, #1
 8024170:	930c      	str	r3, [sp, #48]	@ 0x30
 8024172:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024174:	bf08      	it	eq
 8024176:	4613      	moveq	r3, r2
 8024178:	9309      	str	r3, [sp, #36]	@ 0x24
 802417a:	e6a6      	b.n	8023eca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 802417c:	2900      	cmp	r1, #0
 802417e:	f43f af10 	beq.w	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024182:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024186:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802418a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802418c:	e709      	b.n	8023fa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802418e:	f112 0901 	adds.w	r9, r2, #1
 8024192:	f53f af7d 	bmi.w	8024090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024196:	454b      	cmp	r3, r9
 8024198:	f6ff af7a 	blt.w	8024090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802419c:	f11c 0901 	adds.w	r9, ip, #1
 80241a0:	f53f af76 	bmi.w	8024090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80241a4:	45ce      	cmp	lr, r9
 80241a6:	f6ff af73 	blt.w	8024090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80241aa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80241ac:	b21b      	sxth	r3, r3
 80241ae:	9202      	str	r2, [sp, #8]
 80241b0:	fa0f f28e 	sxth.w	r2, lr
 80241b4:	9300      	str	r3, [sp, #0]
 80241b6:	4633      	mov	r3, r6
 80241b8:	9201      	str	r2, [sp, #4]
 80241ba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80241bc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80241c0:	e9cd c003 	strd	ip, r0, [sp, #12]
 80241c4:	4639      	mov	r1, r7
 80241c6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80241c8:	f7ff fd70 	bl	8023cac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80241cc:	e760      	b.n	8024090 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80241ce:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80241d0:	ea4f 422a 	mov.w	r2, sl, asr #16
 80241d4:	1429      	asrs	r1, r5, #16
 80241d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80241d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80241dc:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 80241e0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80241e4:	fb03 2101 	mla	r1, r3, r1, r2
 80241e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80241ea:	440a      	add	r2, r1
 80241ec:	5c61      	ldrb	r1, [r4, r1]
 80241ee:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 80241f2:	f1bc 0f00 	cmp.w	ip, #0
 80241f6:	f000 808c 	beq.w	8024312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80241fa:	7857      	ldrb	r7, [r2, #1]
 80241fc:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024200:	9413      	str	r4, [sp, #76]	@ 0x4c
 8024202:	b140      	cbz	r0, 8024216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024204:	18d7      	adds	r7, r2, r3
 8024206:	5cd3      	ldrb	r3, [r2, r3]
 8024208:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802420c:	9310      	str	r3, [sp, #64]	@ 0x40
 802420e:	787b      	ldrb	r3, [r7, #1]
 8024210:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024214:	9314      	str	r3, [sp, #80]	@ 0x50
 8024216:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024218:	fb1c f200 	smulbb	r2, ip, r0
 802421c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802421e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8024222:	041f      	lsls	r7, r3, #16
 8024224:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024228:	10d2      	asrs	r2, r2, #3
 802422a:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 802422e:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8024232:	431f      	orrs	r7, r3
 8024234:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8024238:	9317      	str	r3, [sp, #92]	@ 0x5c
 802423a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802423c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 802423e:	041b      	lsls	r3, r3, #16
 8024240:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024244:	ea43 030b 	orr.w	r3, r3, fp
 8024248:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802424c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8024250:	4353      	muls	r3, r2
 8024252:	fb04 3707 	mla	r7, r4, r7, r3
 8024256:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 802425a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802425c:	ea43 0b01 	orr.w	fp, r3, r1
 8024260:	f1c0 0110 	rsb	r1, r0, #16
 8024264:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024266:	eba1 0c0c 	sub.w	ip, r1, ip
 802426a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802426e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8024272:	fb0c 770b 	mla	r7, ip, fp, r7
 8024276:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802427a:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 802427e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024282:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024286:	fb02 770c 	mla	r7, r2, ip, r7
 802428a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802428c:	0d79      	lsrs	r1, r7, #21
 802428e:	8812      	ldrh	r2, [r2, #0]
 8024290:	097f      	lsrs	r7, r7, #5
 8024292:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024296:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802429a:	430f      	orrs	r7, r1
 802429c:	1211      	asrs	r1, r2, #8
 802429e:	b2bb      	uxth	r3, r7
 80242a0:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80242a4:	10d7      	asrs	r7, r2, #3
 80242a6:	fb11 f104 	smulbb	r1, r1, r4
 80242aa:	1218      	asrs	r0, r3, #8
 80242ac:	00d2      	lsls	r2, r2, #3
 80242ae:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80242b2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80242b6:	fb17 f704 	smulbb	r7, r7, r4
 80242ba:	b2d2      	uxtb	r2, r2
 80242bc:	fb00 1009 	mla	r0, r0, r9, r1
 80242c0:	10d9      	asrs	r1, r3, #3
 80242c2:	fb12 f204 	smulbb	r2, r2, r4
 80242c6:	00db      	lsls	r3, r3, #3
 80242c8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80242cc:	b280      	uxth	r0, r0
 80242ce:	b2db      	uxtb	r3, r3
 80242d0:	fb01 7109 	mla	r1, r1, r9, r7
 80242d4:	fb03 2309 	mla	r3, r3, r9, r2
 80242d8:	1c42      	adds	r2, r0, #1
 80242da:	b289      	uxth	r1, r1
 80242dc:	b29b      	uxth	r3, r3
 80242de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80242e2:	1c4f      	adds	r7, r1, #1
 80242e4:	1c5a      	adds	r2, r3, #1
 80242e6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80242ea:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80242ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80242f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80242f4:	0949      	lsrs	r1, r1, #5
 80242f6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80242fa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80242fe:	4310      	orrs	r0, r2
 8024300:	4308      	orrs	r0, r1
 8024302:	f823 0b02 	strh.w	r0, [r3], #2
 8024306:	930e      	str	r3, [sp, #56]	@ 0x38
 8024308:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 802430a:	449a      	add	sl, r3
 802430c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802430e:	441d      	add	r5, r3
 8024310:	e6ed      	b.n	80240ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 8024312:	2800      	cmp	r0, #0
 8024314:	f43f af7f 	beq.w	8024216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024318:	5cd3      	ldrb	r3, [r2, r3]
 802431a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802431e:	9310      	str	r3, [sp, #64]	@ 0x40
 8024320:	e779      	b.n	8024216 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8024322:	b019      	add	sp, #100	@ 0x64
 8024324:	ecbd 8b08 	vpop	{d8-d11}
 8024328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802432c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024330:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	@ 0x28
 8024334:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8024338:	2e00      	cmp	r6, #0
 802433a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802433e:	fb06 570e 	mla	r7, r6, lr, r5
 8024342:	f89d 4030 	ldrb.w	r4, [sp, #48]	@ 0x30
 8024346:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802434a:	eb02 0807 	add.w	r8, r2, r7
 802434e:	8808      	ldrh	r0, [r1, #0]
 8024350:	db38      	blt.n	80243c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024352:	45b1      	cmp	r9, r6
 8024354:	dd36      	ble.n	80243c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8024356:	2d00      	cmp	r5, #0
 8024358:	db32      	blt.n	80243c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802435a:	45ae      	cmp	lr, r5
 802435c:	dd30      	ble.n	80243c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802435e:	5dd2      	ldrb	r2, [r2, r7]
 8024360:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8024364:	1c6a      	adds	r2, r5, #1
 8024366:	d430      	bmi.n	80243ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8024368:	4596      	cmp	lr, r2
 802436a:	dd2e      	ble.n	80243ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802436c:	b36c      	cbz	r4, 80243ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802436e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024372:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8024376:	3601      	adds	r6, #1
 8024378:	d42b      	bmi.n	80243d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802437a:	45b1      	cmp	r9, r6
 802437c:	dd29      	ble.n	80243d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802437e:	f1bc 0f00 	cmp.w	ip, #0
 8024382:	d028      	beq.n	80243d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8024384:	2d00      	cmp	r5, #0
 8024386:	db22      	blt.n	80243ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8024388:	45ae      	cmp	lr, r5
 802438a:	dd20      	ble.n	80243ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 802438c:	f818 600e 	ldrb.w	r6, [r8, lr]
 8024390:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8024394:	3501      	adds	r5, #1
 8024396:	d407      	bmi.n	80243a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8024398:	45ae      	cmp	lr, r5
 802439a:	dd05      	ble.n	80243a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 802439c:	b134      	cbz	r4, 80243ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802439e:	44c6      	add	lr, r8
 80243a0:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80243a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80243a8:	2c0f      	cmp	r4, #15
 80243aa:	d802      	bhi.n	80243b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80243ac:	f1bc 0f0f 	cmp.w	ip, #15
 80243b0:	d914      	bls.n	80243dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80243b2:	4b26      	ldr	r3, [pc, #152]	@ (802444c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80243b4:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 80243b8:	4a25      	ldr	r2, [pc, #148]	@ (8024450 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80243ba:	4826      	ldr	r0, [pc, #152]	@ (8024454 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80243bc:	f006 fdd4 	bl	802af68 <__assert_func>
 80243c0:	4607      	mov	r7, r0
 80243c2:	e7cf      	b.n	8024364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80243c4:	4602      	mov	r2, r0
 80243c6:	4607      	mov	r7, r0
 80243c8:	e7d5      	b.n	8024376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80243ca:	4602      	mov	r2, r0
 80243cc:	e7d3      	b.n	8024376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80243ce:	4606      	mov	r6, r0
 80243d0:	e7e0      	b.n	8024394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80243d2:	4606      	mov	r6, r0
 80243d4:	e7e8      	b.n	80243a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80243d6:	2c0f      	cmp	r4, #15
 80243d8:	d8eb      	bhi.n	80243b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80243da:	4606      	mov	r6, r0
 80243dc:	fb14 f30c 	smulbb	r3, r4, ip
 80243e0:	043d      	lsls	r5, r7, #16
 80243e2:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80243e6:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80243ea:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 80243ee:	10db      	asrs	r3, r3, #3
 80243f0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80243f4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80243f8:	432f      	orrs	r7, r5
 80243fa:	f1cc 0510 	rsb	r5, ip, #16
 80243fe:	ea4e 0202 	orr.w	r2, lr, r2
 8024402:	1b2d      	subs	r5, r5, r4
 8024404:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8024408:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802440c:	4354      	muls	r4, r2
 802440e:	fb05 4507 	mla	r5, r5, r7, r4
 8024412:	0404      	lsls	r4, r0, #16
 8024414:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024418:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802441c:	4320      	orrs	r0, r4
 802441e:	fb03 5400 	mla	r4, r3, r0, r5
 8024422:	0430      	lsls	r0, r6, #16
 8024424:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8024428:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802442c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8024430:	4330      	orrs	r0, r6
 8024432:	fb03 4000 	mla	r0, r3, r0, r4
 8024436:	0d43      	lsrs	r3, r0, #21
 8024438:	0940      	lsrs	r0, r0, #5
 802443a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802443e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8024442:	4318      	orrs	r0, r3
 8024444:	8008      	strh	r0, [r1, #0]
 8024446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802444a:	bf00      	nop
 802444c:	08030109 	.word	0x08030109
 8024450:	0803077f 	.word	0x0803077f
 8024454:	0803018d 	.word	0x0803018d

08024458 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802445c:	ed2d 8b0a 	vpush	{d8-d12}
 8024460:	b093      	sub	sp, #76	@ 0x4c
 8024462:	eeb0 aa40 	vmov.f32	s20, s0
 8024466:	eef0 9a60 	vmov.f32	s19, s1
 802446a:	920f      	str	r2, [sp, #60]	@ 0x3c
 802446c:	eeb0 9a41 	vmov.f32	s18, s2
 8024470:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8024472:	eeb0 8a62 	vmov.f32	s16, s5
 8024476:	9010      	str	r0, [sp, #64]	@ 0x40
 8024478:	eef0 8a43 	vmov.f32	s17, s6
 802447c:	6850      	ldr	r0, [r2, #4]
 802447e:	eeb0 ca44 	vmov.f32	s24, s8
 8024482:	9108      	str	r1, [sp, #32]
 8024484:	eef0 ba64 	vmov.f32	s23, s9
 8024488:	9306      	str	r3, [sp, #24]
 802448a:	eeb0 ba45 	vmov.f32	s22, s10
 802448e:	6812      	ldr	r2, [r2, #0]
 8024490:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8024494:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024498:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 802449c:	fb00 1303 	mla	r3, r0, r3, r1
 80244a0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80244a4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80244a6:	681b      	ldr	r3, [r3, #0]
 80244a8:	9307      	str	r3, [sp, #28]
 80244aa:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80244ac:	685f      	ldr	r7, [r3, #4]
 80244ae:	3704      	adds	r7, #4
 80244b0:	9b08      	ldr	r3, [sp, #32]
 80244b2:	2b00      	cmp	r3, #0
 80244b4:	dc03      	bgt.n	80244be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80244b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80244b8:	2b00      	cmp	r3, #0
 80244ba:	f340 81b2 	ble.w	8024822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80244be:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80244c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80244c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80244c8:	1e48      	subs	r0, r1, #1
 80244ca:	f102 3cff 	add.w	ip, r2, #4294967295
 80244ce:	9b06      	ldr	r3, [sp, #24]
 80244d0:	2b00      	cmp	r3, #0
 80244d2:	f340 80a9 	ble.w	8024628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 80244d6:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80244da:	ea4f 4326 	mov.w	r3, r6, asr #16
 80244de:	d406      	bmi.n	80244ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80244e0:	4586      	cmp	lr, r0
 80244e2:	da04      	bge.n	80244ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80244e4:	2b00      	cmp	r3, #0
 80244e6:	db02      	blt.n	80244ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80244e8:	4563      	cmp	r3, ip
 80244ea:	f2c0 809e 	blt.w	802462a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80244ee:	f11e 0e01 	adds.w	lr, lr, #1
 80244f2:	f100 808f 	bmi.w	8024614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80244f6:	4571      	cmp	r1, lr
 80244f8:	f2c0 808c 	blt.w	8024614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80244fc:	3301      	adds	r3, #1
 80244fe:	f100 8089 	bmi.w	8024614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024502:	429a      	cmp	r2, r3
 8024504:	f2c0 8086 	blt.w	8024614 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 8024508:	f8dd b018 	ldr.w	fp, [sp, #24]
 802450c:	46c8      	mov	r8, r9
 802450e:	f1bb 0f00 	cmp.w	fp, #0
 8024512:	f340 80a6 	ble.w	8024662 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8024516:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8024518:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802451c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802451e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8024522:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024526:	1422      	asrs	r2, r4, #16
 8024528:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802452c:	689b      	ldr	r3, [r3, #8]
 802452e:	f100 80e3 	bmi.w	80246f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024532:	f103 3aff 	add.w	sl, r3, #4294967295
 8024536:	4552      	cmp	r2, sl
 8024538:	f280 80de 	bge.w	80246f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802453c:	f1bc 0f00 	cmp.w	ip, #0
 8024540:	f2c0 80da 	blt.w	80246f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8024544:	f10e 3aff 	add.w	sl, lr, #4294967295
 8024548:	45d4      	cmp	ip, sl
 802454a:	f280 80d5 	bge.w	80246f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 802454e:	b21b      	sxth	r3, r3
 8024550:	9d07      	ldr	r5, [sp, #28]
 8024552:	fb0c 2203 	mla	r2, ip, r3, r2
 8024556:	eb05 0a02 	add.w	sl, r5, r2
 802455a:	5caa      	ldrb	r2, [r5, r2]
 802455c:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8024560:	2800      	cmp	r0, #0
 8024562:	f000 80c0 	beq.w	80246e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8024566:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802456a:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802456e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024570:	b151      	cbz	r1, 8024588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8024572:	eb0a 0203 	add.w	r2, sl, r3
 8024576:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802457a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802457e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024580:	7853      	ldrb	r3, [r2, #1]
 8024582:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024586:	930c      	str	r3, [sp, #48]	@ 0x30
 8024588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802458a:	fb10 f201 	smulbb	r2, r0, r1
 802458e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8024590:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024594:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024598:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802459c:	10d2      	asrs	r2, r2, #3
 802459e:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80245a2:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80245a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80245aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80245ac:	041b      	lsls	r3, r3, #16
 80245ae:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80245b2:	432b      	orrs	r3, r5
 80245b4:	4353      	muls	r3, r2
 80245b6:	fb0a 330c 	mla	r3, sl, ip, r3
 80245ba:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80245be:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80245c2:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80245c6:	ea4c 0e0e 	orr.w	lr, ip, lr
 80245ca:	f1c1 0c10 	rsb	ip, r1, #16
 80245ce:	ebac 0c00 	sub.w	ip, ip, r0
 80245d2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80245d6:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80245da:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80245de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80245e0:	0418      	lsls	r0, r3, #16
 80245e2:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80245e6:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80245ea:	4318      	orrs	r0, r3
 80245ec:	fb02 c200 	mla	r2, r2, r0, ip
 80245f0:	0d53      	lsrs	r3, r2, #21
 80245f2:	0952      	lsrs	r2, r2, #5
 80245f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80245f8:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80245fc:	431a      	orrs	r2, r3
 80245fe:	f8a8 2000 	strh.w	r2, [r8]
 8024602:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024604:	f108 0802 	add.w	r8, r8, #2
 8024608:	f10b 3bff 	add.w	fp, fp, #4294967295
 802460c:	441c      	add	r4, r3
 802460e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024610:	441e      	add	r6, r3
 8024612:	e77c      	b.n	802450e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024614:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024616:	f109 0902 	add.w	r9, r9, #2
 802461a:	441c      	add	r4, r3
 802461c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802461e:	441e      	add	r6, r3
 8024620:	9b06      	ldr	r3, [sp, #24]
 8024622:	3b01      	subs	r3, #1
 8024624:	9306      	str	r3, [sp, #24]
 8024626:	e752      	b.n	80244ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8024628:	d020      	beq.n	802466c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802462a:	9b06      	ldr	r3, [sp, #24]
 802462c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 802462e:	3b01      	subs	r3, #1
 8024630:	fb00 4003 	mla	r0, r0, r3, r4
 8024634:	1400      	asrs	r0, r0, #16
 8024636:	f53f af67 	bmi.w	8024508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802463a:	3901      	subs	r1, #1
 802463c:	4288      	cmp	r0, r1
 802463e:	f6bf af63 	bge.w	8024508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024642:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024644:	fb01 6303 	mla	r3, r1, r3, r6
 8024648:	141b      	asrs	r3, r3, #16
 802464a:	f53f af5d 	bmi.w	8024508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 802464e:	3a01      	subs	r2, #1
 8024650:	4293      	cmp	r3, r2
 8024652:	f6bf af59 	bge.w	8024508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8024656:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802465a:	46ca      	mov	sl, r9
 802465c:	f1b8 0f00 	cmp.w	r8, #0
 8024660:	dc67      	bgt.n	8024732 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8024662:	9b06      	ldr	r3, [sp, #24]
 8024664:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8024668:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802466c:	9b08      	ldr	r3, [sp, #32]
 802466e:	2b00      	cmp	r3, #0
 8024670:	f340 80d7 	ble.w	8024822 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8024674:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8024678:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 802467a:	ee79 9aab 	vadd.f32	s19, s19, s23
 802467e:	eef0 6a48 	vmov.f32	s13, s16
 8024682:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8024686:	ee39 9a0b 	vadd.f32	s18, s18, s22
 802468a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802468e:	ee16 4a90 	vmov	r4, s13
 8024692:	eef0 6a68 	vmov.f32	s13, s17
 8024696:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802469a:	ee16 6a90 	vmov	r6, s13
 802469e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80246a2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80246a6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80246aa:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80246ae:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80246b2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80246b6:	ee18 2a10 	vmov	r2, s16
 80246ba:	eeb0 8a47 	vmov.f32	s16, s14
 80246be:	fb92 f3f3 	sdiv	r3, r2, r3
 80246c2:	ee18 2a90 	vmov	r2, s17
 80246c6:	9329      	str	r3, [sp, #164]	@ 0xa4
 80246c8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80246ca:	eef0 8a67 	vmov.f32	s17, s15
 80246ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80246d2:	932a      	str	r3, [sp, #168]	@ 0xa8
 80246d4:	9b08      	ldr	r3, [sp, #32]
 80246d6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80246d8:	3b01      	subs	r3, #1
 80246da:	9308      	str	r3, [sp, #32]
 80246dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80246de:	bf08      	it	eq
 80246e0:	4613      	moveq	r3, r2
 80246e2:	9306      	str	r3, [sp, #24]
 80246e4:	e6e4      	b.n	80244b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80246e6:	2900      	cmp	r1, #0
 80246e8:	f43f af4e 	beq.w	8024588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80246ec:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80246f0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80246f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80246f6:	e747      	b.n	8024588 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80246f8:	f112 0a01 	adds.w	sl, r2, #1
 80246fc:	d481      	bmi.n	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80246fe:	4553      	cmp	r3, sl
 8024700:	f6ff af7f 	blt.w	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024704:	f11c 0a01 	adds.w	sl, ip, #1
 8024708:	f53f af7b 	bmi.w	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802470c:	45d6      	cmp	lr, sl
 802470e:	f6ff af78 	blt.w	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024712:	b21b      	sxth	r3, r3
 8024714:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8024718:	fa0f f28e 	sxth.w	r2, lr
 802471c:	9300      	str	r3, [sp, #0]
 802471e:	463b      	mov	r3, r7
 8024720:	9201      	str	r2, [sp, #4]
 8024722:	9a07      	ldr	r2, [sp, #28]
 8024724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024728:	4641      	mov	r1, r8
 802472a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802472c:	f7ff fdfe 	bl	802432c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8024730:	e767      	b.n	8024602 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8024732:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024734:	1422      	asrs	r2, r4, #16
 8024736:	1431      	asrs	r1, r6, #16
 8024738:	9d07      	ldr	r5, [sp, #28]
 802473a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802473e:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8024742:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024746:	fb03 2101 	mla	r1, r3, r1, r2
 802474a:	9a07      	ldr	r2, [sp, #28]
 802474c:	440a      	add	r2, r1
 802474e:	5c69      	ldrb	r1, [r5, r1]
 8024750:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8024754:	f1be 0f00 	cmp.w	lr, #0
 8024758:	d05c      	beq.n	8024814 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 802475a:	f892 c001 	ldrb.w	ip, [r2, #1]
 802475e:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8024762:	950d      	str	r5, [sp, #52]	@ 0x34
 8024764:	b150      	cbz	r0, 802477c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024766:	eb02 0c03 	add.w	ip, r2, r3
 802476a:	5cd3      	ldrb	r3, [r2, r3]
 802476c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8024770:	930a      	str	r3, [sp, #40]	@ 0x28
 8024772:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024776:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802477a:	930e      	str	r3, [sp, #56]	@ 0x38
 802477c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802477e:	fb1e f200 	smulbb	r2, lr, r0
 8024782:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8024784:	f108 38ff 	add.w	r8, r8, #4294967295
 8024788:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802478c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024790:	10d2      	asrs	r2, r2, #3
 8024792:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8024796:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802479a:	ea4c 0c03 	orr.w	ip, ip, r3
 802479e:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80247a2:	9311      	str	r3, [sp, #68]	@ 0x44
 80247a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80247a6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80247a8:	041b      	lsls	r3, r3, #16
 80247aa:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80247ae:	ea43 030b 	orr.w	r3, r3, fp
 80247b2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80247b6:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80247ba:	4353      	muls	r3, r2
 80247bc:	fb05 3c0c 	mla	ip, r5, ip, r3
 80247c0:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 80247c4:	ea43 0b01 	orr.w	fp, r3, r1
 80247c8:	f1c0 0110 	rsb	r1, r0, #16
 80247cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80247ce:	eba1 0e0e 	sub.w	lr, r1, lr
 80247d2:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80247d6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80247da:	fb0e cc0b 	mla	ip, lr, fp, ip
 80247de:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80247e2:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 80247e6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80247ea:	ea4b 0e0e 	orr.w	lr, fp, lr
 80247ee:	fb02 cc0e 	mla	ip, r2, lr, ip
 80247f2:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80247f6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80247fa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80247fe:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024802:	ea43 0c0c 	orr.w	ip, r3, ip
 8024806:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8024808:	441c      	add	r4, r3
 802480a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802480c:	f82a cb02 	strh.w	ip, [sl], #2
 8024810:	441e      	add	r6, r3
 8024812:	e723      	b.n	802465c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024814:	2800      	cmp	r0, #0
 8024816:	d0b1      	beq.n	802477c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024818:	5cd3      	ldrb	r3, [r2, r3]
 802481a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802481e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024820:	e7ac      	b.n	802477c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8024822:	b013      	add	sp, #76	@ 0x4c
 8024824:	ecbd 8b0a 	vpop	{d8-d12}
 8024828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802482c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 802482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024830:	468b      	mov	fp, r1
 8024832:	8809      	ldrh	r1, [r1, #0]
 8024834:	b089      	sub	sp, #36	@ 0x24
 8024836:	10cd      	asrs	r5, r1, #3
 8024838:	ea4f 2921 	mov.w	r9, r1, asr #8
 802483c:	f9bd e048 	ldrsh.w	lr, [sp, #72]	@ 0x48
 8024840:	00c9      	lsls	r1, r1, #3
 8024842:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8024846:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 802484a:	9202      	str	r2, [sp, #8]
 802484c:	b2c9      	uxtb	r1, r1
 802484e:	9500      	str	r5, [sp, #0]
 8024850:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	@ 0x4c
 8024854:	9101      	str	r1, [sp, #4]
 8024856:	9900      	ldr	r1, [sp, #0]
 8024858:	f89d 7058 	ldrb.w	r7, [sp, #88]	@ 0x58
 802485c:	0209      	lsls	r1, r1, #8
 802485e:	f89d 005c 	ldrb.w	r0, [sp, #92]	@ 0x5c
 8024862:	f89d c060 	ldrb.w	ip, [sp, #96]	@ 0x60
 8024866:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 802486a:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	@ 0x50
 802486e:	fb04 650e 	mla	r5, r4, lr, r6
 8024872:	2c00      	cmp	r4, #0
 8024874:	eb02 0805 	add.w	r8, r2, r5
 8024878:	9a01      	ldr	r2, [sp, #4]
 802487a:	ea41 0102 	orr.w	r1, r1, r2
 802487e:	9107      	str	r1, [sp, #28]
 8024880:	db43      	blt.n	802490a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024882:	45a2      	cmp	sl, r4
 8024884:	dd41      	ble.n	802490a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8024886:	2e00      	cmp	r6, #0
 8024888:	db3d      	blt.n	8024906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802488a:	45b6      	cmp	lr, r6
 802488c:	dd3b      	ble.n	8024906 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802488e:	9a02      	ldr	r2, [sp, #8]
 8024890:	5d55      	ldrb	r5, [r2, r5]
 8024892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024896:	441d      	add	r5, r3
 8024898:	1c72      	adds	r2, r6, #1
 802489a:	d439      	bmi.n	8024910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802489c:	4596      	cmp	lr, r2
 802489e:	dd37      	ble.n	8024910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80248a0:	2f00      	cmp	r7, #0
 80248a2:	d035      	beq.n	8024910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 80248a4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80248a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80248ac:	4419      	add	r1, r3
 80248ae:	3401      	adds	r4, #1
 80248b0:	d432      	bmi.n	8024918 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80248b2:	45a2      	cmp	sl, r4
 80248b4:	dd30      	ble.n	8024918 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80248b6:	b378      	cbz	r0, 8024918 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 80248b8:	2e00      	cmp	r6, #0
 80248ba:	db2b      	blt.n	8024914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80248bc:	45b6      	cmp	lr, r6
 80248be:	dd29      	ble.n	8024914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 80248c0:	f818 400e 	ldrb.w	r4, [r8, lr]
 80248c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80248c8:	441c      	add	r4, r3
 80248ca:	3601      	adds	r6, #1
 80248cc:	d427      	bmi.n	802491e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80248ce:	45b6      	cmp	lr, r6
 80248d0:	dd25      	ble.n	802491e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80248d2:	b327      	cbz	r7, 802491e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 80248d4:	44c6      	add	lr, r8
 80248d6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80248da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248de:	4413      	add	r3, r2
 80248e0:	782a      	ldrb	r2, [r5, #0]
 80248e2:	2f0f      	cmp	r7, #15
 80248e4:	9202      	str	r2, [sp, #8]
 80248e6:	780a      	ldrb	r2, [r1, #0]
 80248e8:	9203      	str	r2, [sp, #12]
 80248ea:	7822      	ldrb	r2, [r4, #0]
 80248ec:	9204      	str	r2, [sp, #16]
 80248ee:	781a      	ldrb	r2, [r3, #0]
 80248f0:	9205      	str	r2, [sp, #20]
 80248f2:	d801      	bhi.n	80248f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80248f4:	280f      	cmp	r0, #15
 80248f6:	d914      	bls.n	8024922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80248f8:	4b3f      	ldr	r3, [pc, #252]	@ (80249f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80248fa:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80248fe:	4a3f      	ldr	r2, [pc, #252]	@ (80249fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8024900:	483f      	ldr	r0, [pc, #252]	@ (8024a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 8024902:	f006 fb31 	bl	802af68 <__assert_func>
 8024906:	ad07      	add	r5, sp, #28
 8024908:	e7c6      	b.n	8024898 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 802490a:	a907      	add	r1, sp, #28
 802490c:	460d      	mov	r5, r1
 802490e:	e7ce      	b.n	80248ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8024910:	a907      	add	r1, sp, #28
 8024912:	e7cc      	b.n	80248ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 8024914:	ac07      	add	r4, sp, #28
 8024916:	e7d8      	b.n	80248ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 8024918:	ab07      	add	r3, sp, #28
 802491a:	461c      	mov	r4, r3
 802491c:	e7e0      	b.n	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 802491e:	ab07      	add	r3, sp, #28
 8024920:	e7de      	b.n	80248e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8024922:	b2ba      	uxth	r2, r7
 8024924:	f891 8002 	ldrb.w	r8, [r1, #2]
 8024928:	b280      	uxth	r0, r0
 802492a:	7849      	ldrb	r1, [r1, #1]
 802492c:	78ae      	ldrb	r6, [r5, #2]
 802492e:	fa1f f78c 	uxth.w	r7, ip
 8024932:	fb02 fa00 	mul.w	sl, r2, r0
 8024936:	0112      	lsls	r2, r2, #4
 8024938:	786d      	ldrb	r5, [r5, #1]
 802493a:	ea6f 0c0c 	mvn.w	ip, ip
 802493e:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024942:	f5c2 7e80 	rsb	lr, r2, #256	@ 0x100
 8024946:	eba2 020a 	sub.w	r2, r2, sl
 802494a:	fa5f fc8c 	uxtb.w	ip, ip
 802494e:	b280      	uxth	r0, r0
 8024950:	fb19 f90c 	smulbb	r9, r9, ip
 8024954:	b292      	uxth	r2, r2
 8024956:	ebae 0e00 	sub.w	lr, lr, r0
 802495a:	4351      	muls	r1, r2
 802495c:	fa1f fe8e 	uxth.w	lr, lr
 8024960:	fb02 f808 	mul.w	r8, r2, r8
 8024964:	fb0e 1505 	mla	r5, lr, r5, r1
 8024968:	7861      	ldrb	r1, [r4, #1]
 802496a:	fb0e 8806 	mla	r8, lr, r6, r8
 802496e:	78a6      	ldrb	r6, [r4, #2]
 8024970:	fb00 5501 	mla	r5, r0, r1, r5
 8024974:	7859      	ldrb	r1, [r3, #1]
 8024976:	fb00 8806 	mla	r8, r0, r6, r8
 802497a:	789e      	ldrb	r6, [r3, #2]
 802497c:	9b00      	ldr	r3, [sp, #0]
 802497e:	fb0a 5101 	mla	r1, sl, r1, r5
 8024982:	fb0a 8606 	mla	r6, sl, r6, r8
 8024986:	fb13 f50c 	smulbb	r5, r3, ip
 802498a:	9b03      	ldr	r3, [sp, #12]
 802498c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024990:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024994:	435a      	muls	r2, r3
 8024996:	9b02      	ldr	r3, [sp, #8]
 8024998:	fb06 9607 	mla	r6, r6, r7, r9
 802499c:	fb0e 2203 	mla	r2, lr, r3, r2
 80249a0:	9b04      	ldr	r3, [sp, #16]
 80249a2:	b2b6      	uxth	r6, r6
 80249a4:	fb01 5107 	mla	r1, r1, r7, r5
 80249a8:	fb00 2003 	mla	r0, r0, r3, r2
 80249ac:	9b05      	ldr	r3, [sp, #20]
 80249ae:	f106 0901 	add.w	r9, r6, #1
 80249b2:	b289      	uxth	r1, r1
 80249b4:	fb0a 0a03 	mla	sl, sl, r3, r0
 80249b8:	9b01      	ldr	r3, [sp, #4]
 80249ba:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80249be:	1c4d      	adds	r5, r1, #1
 80249c0:	fb13 fc0c 	smulbb	ip, r3, ip
 80249c4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80249c8:	f406 4978 	and.w	r9, r6, #63488	@ 0xf800
 80249cc:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 80249d0:	fb0a c707 	mla	r7, sl, r7, ip
 80249d4:	0949      	lsrs	r1, r1, #5
 80249d6:	b2bf      	uxth	r7, r7
 80249d8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80249dc:	1c7e      	adds	r6, r7, #1
 80249de:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80249e2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80249e6:	ea46 0609 	orr.w	r6, r6, r9
 80249ea:	430e      	orrs	r6, r1
 80249ec:	f8ab 6000 	strh.w	r6, [fp]
 80249f0:	b009      	add	sp, #36	@ 0x24
 80249f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249f6:	bf00      	nop
 80249f8:	08030109 	.word	0x08030109
 80249fc:	080306d6 	.word	0x080306d6
 8024a00:	0803018d 	.word	0x0803018d

08024a04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a08:	ed2d 8b08 	vpush	{d8-d11}
 8024a0c:	b095      	sub	sp, #84	@ 0x54
 8024a0e:	eeb0 aa40 	vmov.f32	s20, s0
 8024a12:	eef0 9a60 	vmov.f32	s19, s1
 8024a16:	9212      	str	r2, [sp, #72]	@ 0x48
 8024a18:	eeb0 9a41 	vmov.f32	s18, s2
 8024a1c:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8024a1e:	eeb0 8a62 	vmov.f32	s16, s5
 8024a22:	9309      	str	r3, [sp, #36]	@ 0x24
 8024a24:	eef0 8a43 	vmov.f32	s17, s6
 8024a28:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8024a2c:	eef0 ba44 	vmov.f32	s23, s8
 8024a30:	9013      	str	r0, [sp, #76]	@ 0x4c
 8024a32:	eeb0 ba64 	vmov.f32	s22, s9
 8024a36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024a38:	eef0 aa45 	vmov.f32	s21, s10
 8024a3c:	6850      	ldr	r0, [r2, #4]
 8024a3e:	910e      	str	r1, [sp, #56]	@ 0x38
 8024a40:	6812      	ldr	r2, [r2, #0]
 8024a42:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8024a46:	fb00 1303 	mla	r3, r0, r3, r1
 8024a4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024a4e:	930a      	str	r3, [sp, #40]	@ 0x28
 8024a50:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024a52:	681b      	ldr	r3, [r3, #0]
 8024a54:	930d      	str	r3, [sp, #52]	@ 0x34
 8024a56:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024a58:	685c      	ldr	r4, [r3, #4]
 8024a5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024a5c:	3404      	adds	r4, #4
 8024a5e:	43db      	mvns	r3, r3
 8024a60:	b2db      	uxtb	r3, r3
 8024a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	dc03      	bgt.n	8024a72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024a6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024a6c:	2b00      	cmp	r3, #0
 8024a6e:	f340 8255 	ble.w	8024f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024a72:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8024a74:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024a78:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024a7c:	1e48      	subs	r0, r1, #1
 8024a7e:	1e55      	subs	r5, r2, #1
 8024a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024a82:	2b00      	cmp	r3, #0
 8024a84:	f340 80f9 	ble.w	8024c7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024a88:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8024a8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024a8c:	1436      	asrs	r6, r6, #16
 8024a8e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024a92:	d406      	bmi.n	8024aa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a94:	4286      	cmp	r6, r0
 8024a96:	da04      	bge.n	8024aa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a98:	2b00      	cmp	r3, #0
 8024a9a:	db02      	blt.n	8024aa2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8024a9c:	42ab      	cmp	r3, r5
 8024a9e:	f2c0 80ed 	blt.w	8024c7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8024aa2:	3601      	adds	r6, #1
 8024aa4:	f100 80da 	bmi.w	8024c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024aa8:	42b1      	cmp	r1, r6
 8024aaa:	f2c0 80d7 	blt.w	8024c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024aae:	3301      	adds	r3, #1
 8024ab0:	f100 80d4 	bmi.w	8024c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024ab4:	429a      	cmp	r2, r3
 8024ab6:	f2c0 80d1 	blt.w	8024c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8024aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024abc:	9311      	str	r3, [sp, #68]	@ 0x44
 8024abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024ac0:	930c      	str	r3, [sp, #48]	@ 0x30
 8024ac2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024ac4:	2b00      	cmp	r3, #0
 8024ac6:	f340 80fa 	ble.w	8024cbe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024aca:	982e      	ldr	r0, [sp, #184]	@ 0xb8
 8024acc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024ace:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024ad0:	68c6      	ldr	r6, [r0, #12]
 8024ad2:	141d      	asrs	r5, r3, #16
 8024ad4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8024ad6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024ada:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024adc:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8024ade:	1400      	asrs	r0, r0, #16
 8024ae0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024ae4:	6892      	ldr	r2, [r2, #8]
 8024ae6:	f100 813e 	bmi.w	8024d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024aea:	1e57      	subs	r7, r2, #1
 8024aec:	42b8      	cmp	r0, r7
 8024aee:	f280 813a 	bge.w	8024d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024af2:	2d00      	cmp	r5, #0
 8024af4:	f2c0 8137 	blt.w	8024d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024af8:	1e77      	subs	r7, r6, #1
 8024afa:	42bd      	cmp	r5, r7
 8024afc:	f280 8133 	bge.w	8024d66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8024b00:	b212      	sxth	r2, r2
 8024b02:	fb05 0002 	mla	r0, r5, r2, r0
 8024b06:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024b08:	f815 a000 	ldrb.w	sl, [r5, r0]
 8024b0c:	182e      	adds	r6, r5, r0
 8024b0e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8024b12:	eb04 050a 	add.w	r5, r4, sl
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	f000 8117 	beq.w	8024d4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 8024b1c:	f896 c001 	ldrb.w	ip, [r6, #1]
 8024b20:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024b24:	44a4      	add	ip, r4
 8024b26:	2900      	cmp	r1, #0
 8024b28:	f000 8117 	beq.w	8024d5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8024b2c:	18b0      	adds	r0, r6, r2
 8024b2e:	5cb2      	ldrb	r2, [r6, r2]
 8024b30:	7840      	ldrb	r0, [r0, #1]
 8024b32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024b36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024b3a:	4422      	add	r2, r4
 8024b3c:	4420      	add	r0, r4
 8024b3e:	b29b      	uxth	r3, r3
 8024b40:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8024b44:	b289      	uxth	r1, r1
 8024b46:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024b4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024b4c:	fb03 f901 	mul.w	r9, r3, r1
 8024b50:	011b      	lsls	r3, r3, #4
 8024b52:	f8b6 e000 	ldrh.w	lr, [r6]
 8024b56:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024b5a:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 8024b5e:	eba3 0309 	sub.w	r3, r3, r9
 8024b62:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8024b66:	b289      	uxth	r1, r1
 8024b68:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8024b6c:	b29b      	uxth	r3, r3
 8024b6e:	eba8 0801 	sub.w	r8, r8, r1
 8024b72:	435f      	muls	r7, r3
 8024b74:	fa1f f888 	uxth.w	r8, r8
 8024b78:	9310      	str	r3, [sp, #64]	@ 0x40
 8024b7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024b7c:	fb08 770b 	mla	r7, r8, fp, r7
 8024b80:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024b84:	fb01 770b 	mla	r7, r1, fp, r7
 8024b88:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024b8c:	fb09 770b 	mla	r7, r9, fp, r7
 8024b90:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8024b94:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024b98:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024b9c:	fb1b fb03 	smulbb	fp, fp, r3
 8024ba0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024ba2:	fb07 b706 	mla	r7, r7, r6, fp
 8024ba6:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024baa:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8024bae:	f89c c000 	ldrb.w	ip, [ip]
 8024bb2:	b2bf      	uxth	r7, r7
 8024bb4:	435d      	muls	r5, r3
 8024bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024bb8:	fb08 550b 	mla	r5, r8, fp, r5
 8024bbc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024bc0:	fb01 550b 	mla	r5, r1, fp, r5
 8024bc4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024bc8:	fb09 550b 	mla	r5, r9, fp, r5
 8024bcc:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8024bd0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8024bd4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024bd8:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024bdc:	fa5f fe8e 	uxtb.w	lr, lr
 8024be0:	fb1b fb03 	smulbb	fp, fp, r3
 8024be4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024be6:	fb03 f30c 	mul.w	r3, r3, ip
 8024bea:	f892 c000 	ldrb.w	ip, [r2]
 8024bee:	fb05 b506 	mla	r5, r5, r6, fp
 8024bf2:	fb08 330a 	mla	r3, r8, sl, r3
 8024bf6:	b2ad      	uxth	r5, r5
 8024bf8:	fb01 330c 	mla	r3, r1, ip, r3
 8024bfc:	f890 c000 	ldrb.w	ip, [r0]
 8024c00:	f105 0b01 	add.w	fp, r5, #1
 8024c04:	fb09 3c0c 	mla	ip, r9, ip, r3
 8024c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024c0a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024c0e:	fb1e fe03 	smulbb	lr, lr, r3
 8024c12:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8024c16:	1c7b      	adds	r3, r7, #1
 8024c18:	096d      	lsrs	r5, r5, #5
 8024c1a:	fb0c e606 	mla	r6, ip, r6, lr
 8024c1e:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8024c22:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024c26:	b2b6      	uxth	r6, r6
 8024c28:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8024c2c:	1c77      	adds	r7, r6, #1
 8024c2e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8024c32:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024c36:	431f      	orrs	r7, r3
 8024c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c3a:	433d      	orrs	r5, r7
 8024c3c:	801d      	strh	r5, [r3, #0]
 8024c3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024c40:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024c42:	3302      	adds	r3, #2
 8024c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8024c46:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024c48:	4413      	add	r3, r2
 8024c4a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024c4c:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024c4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024c50:	4413      	add	r3, r2
 8024c52:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024c54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024c56:	3b01      	subs	r3, #1
 8024c58:	9311      	str	r3, [sp, #68]	@ 0x44
 8024c5a:	e732      	b.n	8024ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8024c5c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024c5e:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 8024c60:	4433      	add	r3, r6
 8024c62:	9e2a      	ldr	r6, [sp, #168]	@ 0xa8
 8024c64:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024c66:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024c68:	4433      	add	r3, r6
 8024c6a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c6e:	3b01      	subs	r3, #1
 8024c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024c74:	3302      	adds	r3, #2
 8024c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8024c78:	e702      	b.n	8024a80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8024c7a:	d027      	beq.n	8024ccc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8024c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024c7e:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8024c80:	3b01      	subs	r3, #1
 8024c82:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024c84:	fb00 5003 	mla	r0, r0, r3, r5
 8024c88:	1400      	asrs	r0, r0, #16
 8024c8a:	f53f af16 	bmi.w	8024aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c8e:	3901      	subs	r1, #1
 8024c90:	4288      	cmp	r0, r1
 8024c92:	f6bf af12 	bge.w	8024aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024c96:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8024c98:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024c9a:	fb01 0303 	mla	r3, r1, r3, r0
 8024c9e:	141b      	asrs	r3, r3, #16
 8024ca0:	f53f af0b 	bmi.w	8024aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024ca4:	3a01      	subs	r2, #1
 8024ca6:	4293      	cmp	r3, r2
 8024ca8:	f6bf af07 	bge.w	8024aba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cae:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8024cb2:	9311      	str	r3, [sp, #68]	@ 0x44
 8024cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024cb6:	930c      	str	r3, [sp, #48]	@ 0x30
 8024cb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024cba:	2b00      	cmp	r3, #0
 8024cbc:	dc70      	bgt.n	8024da0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024cc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024cc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024cca:	930a      	str	r3, [sp, #40]	@ 0x28
 8024ccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024cce:	2b00      	cmp	r3, #0
 8024cd0:	f340 8124 	ble.w	8024f1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8024cd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024cd8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024cda:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024cde:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024ce2:	eef0 6a48 	vmov.f32	s13, s16
 8024ce6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024cea:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024cee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cf2:	edcd 6a27 	vstr	s13, [sp, #156]	@ 0x9c
 8024cf6:	eef0 6a68 	vmov.f32	s13, s17
 8024cfa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024cfe:	edcd 6a28 	vstr	s13, [sp, #160]	@ 0xa0
 8024d02:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024d06:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024d0a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024d0e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024d12:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024d16:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024d1a:	ee18 2a10 	vmov	r2, s16
 8024d1e:	eeb0 8a47 	vmov.f32	s16, s14
 8024d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d26:	ee18 2a90 	vmov	r2, s17
 8024d2a:	9329      	str	r3, [sp, #164]	@ 0xa4
 8024d2c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024d2e:	eef0 8a67 	vmov.f32	s17, s15
 8024d32:	fb92 f3f3 	sdiv	r3, r2, r3
 8024d36:	932a      	str	r3, [sp, #168]	@ 0xa8
 8024d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8024d3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8024d3c:	3b01      	subs	r3, #1
 8024d3e:	930e      	str	r3, [sp, #56]	@ 0x38
 8024d40:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024d42:	bf08      	it	eq
 8024d44:	4613      	moveq	r3, r2
 8024d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8024d48:	e68c      	b.n	8024a64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024d4a:	b149      	cbz	r1, 8024d60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8024d4c:	5cb2      	ldrb	r2, [r6, r2]
 8024d4e:	4628      	mov	r0, r5
 8024d50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024d54:	4422      	add	r2, r4
 8024d56:	46ac      	mov	ip, r5
 8024d58:	e6f1      	b.n	8024b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024d5a:	4628      	mov	r0, r5
 8024d5c:	462a      	mov	r2, r5
 8024d5e:	e6ee      	b.n	8024b3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8024d60:	4628      	mov	r0, r5
 8024d62:	462a      	mov	r2, r5
 8024d64:	e7f7      	b.n	8024d56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8024d66:	1c47      	adds	r7, r0, #1
 8024d68:	f53f af69 	bmi.w	8024c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d6c:	42ba      	cmp	r2, r7
 8024d6e:	f6ff af66 	blt.w	8024c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d72:	1c6f      	adds	r7, r5, #1
 8024d74:	f53f af63 	bmi.w	8024c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d78:	42be      	cmp	r6, r7
 8024d7a:	f6ff af60 	blt.w	8024c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024d7e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8024d80:	b236      	sxth	r6, r6
 8024d82:	b212      	sxth	r2, r2
 8024d84:	9002      	str	r0, [sp, #8]
 8024d86:	9601      	str	r6, [sp, #4]
 8024d88:	9200      	str	r2, [sp, #0]
 8024d8a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8024d8c:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8024d90:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8024d94:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8024d98:	4623      	mov	r3, r4
 8024d9a:	f7ff fd47 	bl	802482c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8024d9e:	e74e      	b.n	8024c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024da0:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8024da2:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8024da4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8024da8:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8024daa:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 8024dac:	1400      	asrs	r0, r0, #16
 8024dae:	142d      	asrs	r5, r5, #16
 8024db0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024db2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024db6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8024dba:	fb02 5000 	mla	r0, r2, r0, r5
 8024dbe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8024dc0:	f815 9000 	ldrb.w	r9, [r5, r0]
 8024dc4:	182e      	adds	r6, r5, r0
 8024dc6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8024dca:	eb04 0509 	add.w	r5, r4, r9
 8024dce:	2b00      	cmp	r3, #0
 8024dd0:	f000 8096 	beq.w	8024f00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8024dd4:	7877      	ldrb	r7, [r6, #1]
 8024dd6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024dda:	4427      	add	r7, r4
 8024ddc:	2900      	cmp	r1, #0
 8024dde:	f000 8097 	beq.w	8024f10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8024de2:	18b0      	adds	r0, r6, r2
 8024de4:	5cb2      	ldrb	r2, [r6, r2]
 8024de6:	7840      	ldrb	r0, [r0, #1]
 8024de8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024dec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024df0:	4422      	add	r2, r4
 8024df2:	4420      	add	r0, r4
 8024df4:	b29b      	uxth	r3, r3
 8024df6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024df8:	b289      	uxth	r1, r1
 8024dfa:	f895 b002 	ldrb.w	fp, [r5, #2]
 8024dfe:	f8b6 c000 	ldrh.w	ip, [r6]
 8024e02:	fb03 f801 	mul.w	r8, r3, r1
 8024e06:	011b      	lsls	r3, r3, #4
 8024e08:	78be      	ldrb	r6, [r7, #2]
 8024e0a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8024e0e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8024e12:	eba3 0308 	sub.w	r3, r3, r8
 8024e16:	f814 9009 	ldrb.w	r9, [r4, r9]
 8024e1a:	b289      	uxth	r1, r1
 8024e1c:	b29b      	uxth	r3, r3
 8024e1e:	ebae 0e01 	sub.w	lr, lr, r1
 8024e22:	435e      	muls	r6, r3
 8024e24:	fa1f fe8e 	uxth.w	lr, lr
 8024e28:	9310      	str	r3, [sp, #64]	@ 0x40
 8024e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024e2c:	fb0e 660b 	mla	r6, lr, fp, r6
 8024e30:	f892 b002 	ldrb.w	fp, [r2, #2]
 8024e34:	fb01 660b 	mla	r6, r1, fp, r6
 8024e38:	f890 b002 	ldrb.w	fp, [r0, #2]
 8024e3c:	fb08 660b 	mla	r6, r8, fp, r6
 8024e40:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8024e44:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8024e48:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8024e4c:	fb1b fb03 	smulbb	fp, fp, r3
 8024e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e52:	fb06 b60a 	mla	r6, r6, sl, fp
 8024e56:	f895 b001 	ldrb.w	fp, [r5, #1]
 8024e5a:	787d      	ldrb	r5, [r7, #1]
 8024e5c:	783f      	ldrb	r7, [r7, #0]
 8024e5e:	b2b6      	uxth	r6, r6
 8024e60:	435d      	muls	r5, r3
 8024e62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024e64:	fb0e 550b 	mla	r5, lr, fp, r5
 8024e68:	f892 b001 	ldrb.w	fp, [r2, #1]
 8024e6c:	fb01 550b 	mla	r5, r1, fp, r5
 8024e70:	f890 b001 	ldrb.w	fp, [r0, #1]
 8024e74:	fb08 550b 	mla	r5, r8, fp, r5
 8024e78:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8024e7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8024e80:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8024e84:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8024e88:	fa5f fc8c 	uxtb.w	ip, ip
 8024e8c:	fb1b fb03 	smulbb	fp, fp, r3
 8024e90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8024e92:	437b      	muls	r3, r7
 8024e94:	7817      	ldrb	r7, [r2, #0]
 8024e96:	fb05 b50a 	mla	r5, r5, sl, fp
 8024e9a:	fb0e 3309 	mla	r3, lr, r9, r3
 8024e9e:	b2ad      	uxth	r5, r5
 8024ea0:	fb01 3307 	mla	r3, r1, r7, r3
 8024ea4:	7807      	ldrb	r7, [r0, #0]
 8024ea6:	f105 0b01 	add.w	fp, r5, #1
 8024eaa:	fb08 3707 	mla	r7, r8, r7, r3
 8024eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024eb0:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8024eb4:	fb1c fc03 	smulbb	ip, ip, r3
 8024eb8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8024ebc:	1c73      	adds	r3, r6, #1
 8024ebe:	096d      	lsrs	r5, r5, #5
 8024ec0:	fb07 c70a 	mla	r7, r7, sl, ip
 8024ec4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024ec8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8024ecc:	b2bf      	uxth	r7, r7
 8024ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ed0:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8024ed4:	1c7a      	adds	r2, r7, #1
 8024ed6:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8024eda:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024ede:	4316      	orrs	r6, r2
 8024ee0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8024ee2:	432e      	orrs	r6, r5
 8024ee4:	f823 6b02 	strh.w	r6, [r3], #2
 8024ee8:	930c      	str	r3, [sp, #48]	@ 0x30
 8024eea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8024eec:	4413      	add	r3, r2
 8024eee:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024ef0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8024ef2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024ef4:	4413      	add	r3, r2
 8024ef6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8024ef8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024efa:	3b01      	subs	r3, #1
 8024efc:	9311      	str	r3, [sp, #68]	@ 0x44
 8024efe:	e6db      	b.n	8024cb8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8024f00:	b149      	cbz	r1, 8024f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8024f02:	5cb2      	ldrb	r2, [r6, r2]
 8024f04:	4628      	mov	r0, r5
 8024f06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024f0a:	4422      	add	r2, r4
 8024f0c:	462f      	mov	r7, r5
 8024f0e:	e771      	b.n	8024df4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f10:	4628      	mov	r0, r5
 8024f12:	462a      	mov	r2, r5
 8024f14:	e76e      	b.n	8024df4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024f16:	4628      	mov	r0, r5
 8024f18:	462a      	mov	r2, r5
 8024f1a:	e7f7      	b.n	8024f0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8024f1c:	b015      	add	sp, #84	@ 0x54
 8024f1e:	ecbd 8b08 	vpop	{d8-d11}
 8024f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8024f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f2c:	880e      	ldrh	r6, [r1, #0]
 8024f2e:	b085      	sub	sp, #20
 8024f30:	4691      	mov	r9, r2
 8024f32:	0230      	lsls	r0, r6, #8
 8024f34:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8024f38:	9101      	str	r1, [sp, #4]
 8024f3a:	f400 0b78 	and.w	fp, r0, #16252928	@ 0xf80000
 8024f3e:	0170      	lsls	r0, r6, #5
 8024f40:	00f6      	lsls	r6, r6, #3
 8024f42:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8024f46:	f400 407c 	and.w	r0, r0, #64512	@ 0xfc00
 8024f4a:	f89d 2048 	ldrb.w	r2, [sp, #72]	@ 0x48
 8024f4e:	b2f6      	uxtb	r6, r6
 8024f50:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8024f54:	ea4b 0000 	orr.w	r0, fp, r0
 8024f58:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8024f5c:	4306      	orrs	r6, r0
 8024f5e:	fb05 7a0c 	mla	sl, r5, ip, r7
 8024f62:	2d00      	cmp	r5, #0
 8024f64:	9603      	str	r6, [sp, #12]
 8024f66:	eb09 0e0a 	add.w	lr, r9, sl
 8024f6a:	db42      	blt.n	8024ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024f6c:	45a8      	cmp	r8, r5
 8024f6e:	dd40      	ble.n	8024ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8024f70:	2f00      	cmp	r7, #0
 8024f72:	db3c      	blt.n	8024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024f74:	45bc      	cmp	ip, r7
 8024f76:	dd3a      	ble.n	8024fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8024f78:	f819 600a 	ldrb.w	r6, [r9, sl]
 8024f7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024f80:	441e      	add	r6, r3
 8024f82:	1c78      	adds	r0, r7, #1
 8024f84:	d438      	bmi.n	8024ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f86:	4584      	cmp	ip, r0
 8024f88:	dd36      	ble.n	8024ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f8a:	b3aa      	cbz	r2, 8024ff8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8024f8c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024f90:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024f94:	4418      	add	r0, r3
 8024f96:	3501      	adds	r5, #1
 8024f98:	d432      	bmi.n	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024f9a:	45a8      	cmp	r8, r5
 8024f9c:	dd30      	ble.n	8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024f9e:	b37c      	cbz	r4, 8025000 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8024fa0:	2f00      	cmp	r7, #0
 8024fa2:	db2b      	blt.n	8024ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024fa4:	45bc      	cmp	ip, r7
 8024fa6:	dd29      	ble.n	8024ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8024fa8:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8024fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024fb0:	441d      	add	r5, r3
 8024fb2:	3701      	adds	r7, #1
 8024fb4:	d427      	bmi.n	8025006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024fb6:	45bc      	cmp	ip, r7
 8024fb8:	dd25      	ble.n	8025006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024fba:	b322      	cbz	r2, 8025006 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8024fbc:	44f4      	add	ip, lr
 8024fbe:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024fc2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024fc6:	443b      	add	r3, r7
 8024fc8:	781f      	ldrb	r7, [r3, #0]
 8024fca:	2a0f      	cmp	r2, #15
 8024fcc:	f896 9000 	ldrb.w	r9, [r6]
 8024fd0:	f890 a000 	ldrb.w	sl, [r0]
 8024fd4:	4639      	mov	r1, r7
 8024fd6:	f895 8000 	ldrb.w	r8, [r5]
 8024fda:	d801      	bhi.n	8024fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8024fdc:	2c0f      	cmp	r4, #15
 8024fde:	d914      	bls.n	802500a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8024fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8025094 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8024fe2:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8024fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8025098 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8024fe8:	482c      	ldr	r0, [pc, #176]	@ (802509c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8024fea:	f005 ffbd 	bl	802af68 <__assert_func>
 8024fee:	ae03      	add	r6, sp, #12
 8024ff0:	e7c7      	b.n	8024f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8024ff2:	a803      	add	r0, sp, #12
 8024ff4:	4606      	mov	r6, r0
 8024ff6:	e7ce      	b.n	8024f96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024ff8:	a803      	add	r0, sp, #12
 8024ffa:	e7cc      	b.n	8024f96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8024ffc:	ad03      	add	r5, sp, #12
 8024ffe:	e7d8      	b.n	8024fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8025000:	ab03      	add	r3, sp, #12
 8025002:	461d      	mov	r5, r3
 8025004:	e7e0      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8025006:	ab03      	add	r3, sp, #12
 8025008:	e7de      	b.n	8024fc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 802500a:	b292      	uxth	r2, r2
 802500c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8025010:	b2a4      	uxth	r4, r4
 8025012:	f896 b002 	ldrb.w	fp, [r6, #2]
 8025016:	7840      	ldrb	r0, [r0, #1]
 8025018:	fb02 fe04 	mul.w	lr, r2, r4
 802501c:	0112      	lsls	r2, r2, #4
 802501e:	7876      	ldrb	r6, [r6, #1]
 8025020:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8025024:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8025028:	eba2 020e 	sub.w	r2, r2, lr
 802502c:	b2a4      	uxth	r4, r4
 802502e:	b292      	uxth	r2, r2
 8025030:	1b3f      	subs	r7, r7, r4
 8025032:	fb02 fc0c 	mul.w	ip, r2, ip
 8025036:	b2bf      	uxth	r7, r7
 8025038:	fb07 cc0b 	mla	ip, r7, fp, ip
 802503c:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025040:	fb04 cc0b 	mla	ip, r4, fp, ip
 8025044:	f893 b002 	ldrb.w	fp, [r3, #2]
 8025048:	785b      	ldrb	r3, [r3, #1]
 802504a:	fb0e cc0b 	mla	ip, lr, fp, ip
 802504e:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8025052:	fb02 fc0a 	mul.w	ip, r2, sl
 8025056:	4342      	muls	r2, r0
 8025058:	7868      	ldrb	r0, [r5, #1]
 802505a:	fb07 cc09 	mla	ip, r7, r9, ip
 802505e:	fb07 2206 	mla	r2, r7, r6, r2
 8025062:	fb04 cc08 	mla	ip, r4, r8, ip
 8025066:	fb04 2400 	mla	r4, r4, r0, r2
 802506a:	fb0e cc01 	mla	ip, lr, r1, ip
 802506e:	fb0e 4e03 	mla	lr, lr, r3, r4
 8025072:	9b01      	ldr	r3, [sp, #4]
 8025074:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025078:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802507c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8025080:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8025084:	ea4c 0c0e 	orr.w	ip, ip, lr
 8025088:	f8a3 c000 	strh.w	ip, [r3]
 802508c:	b005      	add	sp, #20
 802508e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025092:	bf00      	nop
 8025094:	08030109 	.word	0x08030109
 8025098:	080306d6 	.word	0x080306d6
 802509c:	0803018d 	.word	0x0803018d

080250a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80250a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250a4:	ed2d 8b08 	vpush	{d8-d11}
 80250a8:	b08f      	sub	sp, #60	@ 0x3c
 80250aa:	eeb0 aa40 	vmov.f32	s20, s0
 80250ae:	eef0 9a60 	vmov.f32	s19, s1
 80250b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80250b4:	eeb0 9a41 	vmov.f32	s18, s2
 80250b8:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80250ba:	eeb0 8a62 	vmov.f32	s16, s5
 80250be:	900d      	str	r0, [sp, #52]	@ 0x34
 80250c0:	eef0 8a43 	vmov.f32	s17, s6
 80250c4:	6850      	ldr	r0, [r2, #4]
 80250c6:	eef0 ba44 	vmov.f32	s23, s8
 80250ca:	910a      	str	r1, [sp, #40]	@ 0x28
 80250cc:	eeb0 ba64 	vmov.f32	s22, s9
 80250d0:	9306      	str	r3, [sp, #24]
 80250d2:	eef0 aa45 	vmov.f32	s21, s10
 80250d6:	6812      	ldr	r2, [r2, #0]
 80250d8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80250dc:	e9dd b521 	ldrd	fp, r5, [sp, #132]	@ 0x84
 80250e0:	fb00 1303 	mla	r3, r0, r3, r1
 80250e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80250e8:	9307      	str	r3, [sp, #28]
 80250ea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	9308      	str	r3, [sp, #32]
 80250f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80250f2:	685c      	ldr	r4, [r3, #4]
 80250f4:	3404      	adds	r4, #4
 80250f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80250f8:	2b00      	cmp	r3, #0
 80250fa:	dc03      	bgt.n	8025104 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80250fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80250fe:	2b00      	cmp	r3, #0
 8025100:	f340 81d5 	ble.w	80254ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025104:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8025106:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802510a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802510e:	1e48      	subs	r0, r1, #1
 8025110:	1e56      	subs	r6, r2, #1
 8025112:	9b06      	ldr	r3, [sp, #24]
 8025114:	2b00      	cmp	r3, #0
 8025116:	f340 80b6 	ble.w	8025286 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802511a:	ea5f 472b 	movs.w	r7, fp, asr #16
 802511e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025122:	d406      	bmi.n	8025132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025124:	4287      	cmp	r7, r0
 8025126:	da04      	bge.n	8025132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025128:	2b00      	cmp	r3, #0
 802512a:	db02      	blt.n	8025132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802512c:	42b3      	cmp	r3, r6
 802512e:	f2c0 80ab 	blt.w	8025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8025132:	3701      	adds	r7, #1
 8025134:	f100 809c 	bmi.w	8025270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025138:	42b9      	cmp	r1, r7
 802513a:	f2c0 8099 	blt.w	8025270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802513e:	3301      	adds	r3, #1
 8025140:	f100 8096 	bmi.w	8025270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8025144:	429a      	cmp	r2, r3
 8025146:	f2c0 8093 	blt.w	8025270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 802514a:	9b06      	ldr	r3, [sp, #24]
 802514c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802514e:	9b07      	ldr	r3, [sp, #28]
 8025150:	9309      	str	r3, [sp, #36]	@ 0x24
 8025152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025154:	2b00      	cmp	r3, #0
 8025156:	f340 80b4 	ble.w	80252c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802515a:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 802515c:	142e      	asrs	r6, r5, #16
 802515e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8025160:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025164:	68c7      	ldr	r7, [r0, #12]
 8025166:	ea5f 402b 	movs.w	r0, fp, asr #16
 802516a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802516e:	6892      	ldr	r2, [r2, #8]
 8025170:	f100 80fb 	bmi.w	802536a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025174:	f102 3cff 	add.w	ip, r2, #4294967295
 8025178:	4560      	cmp	r0, ip
 802517a:	f280 80f6 	bge.w	802536a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802517e:	2e00      	cmp	r6, #0
 8025180:	f2c0 80f3 	blt.w	802536a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8025184:	f107 3cff 	add.w	ip, r7, #4294967295
 8025188:	4566      	cmp	r6, ip
 802518a:	f280 80ee 	bge.w	802536a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802518e:	b212      	sxth	r2, r2
 8025190:	fb06 0002 	mla	r0, r6, r2, r0
 8025194:	9e08      	ldr	r6, [sp, #32]
 8025196:	1837      	adds	r7, r6, r0
 8025198:	5c30      	ldrb	r0, [r6, r0]
 802519a:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802519e:	eb04 0c08 	add.w	ip, r4, r8
 80251a2:	2b00      	cmp	r3, #0
 80251a4:	f000 80d3 	beq.w	802534e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80251a8:	787e      	ldrb	r6, [r7, #1]
 80251aa:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80251ae:	4426      	add	r6, r4
 80251b0:	2900      	cmp	r1, #0
 80251b2:	f000 80d4 	beq.w	802535e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 80251b6:	18b8      	adds	r0, r7, r2
 80251b8:	5cba      	ldrb	r2, [r7, r2]
 80251ba:	7840      	ldrb	r0, [r0, #1]
 80251bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80251c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80251c4:	4422      	add	r2, r4
 80251c6:	4420      	add	r0, r4
 80251c8:	b29b      	uxth	r3, r3
 80251ca:	78b7      	ldrb	r7, [r6, #2]
 80251cc:	b289      	uxth	r1, r1
 80251ce:	f89c a002 	ldrb.w	sl, [ip, #2]
 80251d2:	f89c c001 	ldrb.w	ip, [ip, #1]
 80251d6:	fb03 f901 	mul.w	r9, r3, r1
 80251da:	011b      	lsls	r3, r3, #4
 80251dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80251e0:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 80251e4:	eba3 0309 	sub.w	r3, r3, r9
 80251e8:	b289      	uxth	r1, r1
 80251ea:	b29b      	uxth	r3, r3
 80251ec:	ebae 0e01 	sub.w	lr, lr, r1
 80251f0:	435f      	muls	r7, r3
 80251f2:	fa1f fe8e 	uxth.w	lr, lr
 80251f6:	fb0e 770a 	mla	r7, lr, sl, r7
 80251fa:	f892 a002 	ldrb.w	sl, [r2, #2]
 80251fe:	fb01 770a 	mla	r7, r1, sl, r7
 8025202:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025206:	fb09 7a0a 	mla	sl, r9, sl, r7
 802520a:	f814 7008 	ldrb.w	r7, [r4, r8]
 802520e:	f896 8000 	ldrb.w	r8, [r6]
 8025212:	7876      	ldrb	r6, [r6, #1]
 8025214:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8025218:	fb03 f808 	mul.w	r8, r3, r8
 802521c:	4373      	muls	r3, r6
 802521e:	fb0e 8807 	mla	r8, lr, r7, r8
 8025222:	7817      	ldrb	r7, [r2, #0]
 8025224:	fb0e 330c 	mla	r3, lr, ip, r3
 8025228:	fb01 8807 	mla	r8, r1, r7, r8
 802522c:	7807      	ldrb	r7, [r0, #0]
 802522e:	fb09 8707 	mla	r7, r9, r7, r8
 8025232:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025236:	ea47 070a 	orr.w	r7, r7, sl
 802523a:	f892 a001 	ldrb.w	sl, [r2, #1]
 802523e:	fb01 310a 	mla	r1, r1, sl, r3
 8025242:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025248:	fb09 1a0a 	mla	sl, r9, sl, r1
 802524c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025250:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025254:	ea47 070a 	orr.w	r7, r7, sl
 8025258:	801f      	strh	r7, [r3, #0]
 802525a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802525c:	3302      	adds	r3, #2
 802525e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025260:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025262:	449b      	add	fp, r3
 8025264:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025266:	441d      	add	r5, r3
 8025268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802526a:	3b01      	subs	r3, #1
 802526c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802526e:	e770      	b.n	8025152 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8025270:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025272:	449b      	add	fp, r3
 8025274:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025276:	441d      	add	r5, r3
 8025278:	9b06      	ldr	r3, [sp, #24]
 802527a:	3b01      	subs	r3, #1
 802527c:	9306      	str	r3, [sp, #24]
 802527e:	9b07      	ldr	r3, [sp, #28]
 8025280:	3302      	adds	r3, #2
 8025282:	9307      	str	r3, [sp, #28]
 8025284:	e745      	b.n	8025112 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025286:	d023      	beq.n	80252d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8025288:	9b06      	ldr	r3, [sp, #24]
 802528a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802528c:	3b01      	subs	r3, #1
 802528e:	fb00 b003 	mla	r0, r0, r3, fp
 8025292:	1400      	asrs	r0, r0, #16
 8025294:	f53f af59 	bmi.w	802514a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025298:	3901      	subs	r1, #1
 802529a:	4288      	cmp	r0, r1
 802529c:	f6bf af55 	bge.w	802514a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252a0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80252a2:	fb01 5303 	mla	r3, r1, r3, r5
 80252a6:	141b      	asrs	r3, r3, #16
 80252a8:	f53f af4f 	bmi.w	802514a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252ac:	3a01      	subs	r2, #1
 80252ae:	4293      	cmp	r3, r2
 80252b0:	f6bf af4b 	bge.w	802514a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80252b4:	9b06      	ldr	r3, [sp, #24]
 80252b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80252b8:	9b07      	ldr	r3, [sp, #28]
 80252ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80252bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80252be:	2b00      	cmp	r3, #0
 80252c0:	dc70      	bgt.n	80253a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 80252c2:	9b06      	ldr	r3, [sp, #24]
 80252c4:	9a07      	ldr	r2, [sp, #28]
 80252c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80252ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80252ce:	9307      	str	r3, [sp, #28]
 80252d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80252d2:	2b00      	cmp	r3, #0
 80252d4:	f340 80eb 	ble.w	80254ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 80252d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80252dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80252de:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80252e2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80252e6:	eef0 6a48 	vmov.f32	s13, s16
 80252ea:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80252ee:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80252f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80252f6:	ee16 ba90 	vmov	fp, s13
 80252fa:	eef0 6a68 	vmov.f32	s13, s17
 80252fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025302:	ee16 5a90 	vmov	r5, s13
 8025306:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802530a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802530e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025312:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025316:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802531a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802531e:	ee18 2a10 	vmov	r2, s16
 8025322:	eeb0 8a47 	vmov.f32	s16, s14
 8025326:	fb92 f3f3 	sdiv	r3, r2, r3
 802532a:	ee18 2a90 	vmov	r2, s17
 802532e:	9323      	str	r3, [sp, #140]	@ 0x8c
 8025330:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025332:	eef0 8a67 	vmov.f32	s17, s15
 8025336:	fb92 f3f3 	sdiv	r3, r2, r3
 802533a:	9324      	str	r3, [sp, #144]	@ 0x90
 802533c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802533e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8025340:	3b01      	subs	r3, #1
 8025342:	930a      	str	r3, [sp, #40]	@ 0x28
 8025344:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025346:	bf08      	it	eq
 8025348:	4613      	moveq	r3, r2
 802534a:	9306      	str	r3, [sp, #24]
 802534c:	e6d3      	b.n	80250f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 802534e:	b149      	cbz	r1, 8025364 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8025350:	5cba      	ldrb	r2, [r7, r2]
 8025352:	4660      	mov	r0, ip
 8025354:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025358:	4422      	add	r2, r4
 802535a:	4666      	mov	r6, ip
 802535c:	e734      	b.n	80251c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802535e:	4660      	mov	r0, ip
 8025360:	4662      	mov	r2, ip
 8025362:	e731      	b.n	80251c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8025364:	4660      	mov	r0, ip
 8025366:	4662      	mov	r2, ip
 8025368:	e7f7      	b.n	802535a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 802536a:	f110 0c01 	adds.w	ip, r0, #1
 802536e:	f53f af74 	bmi.w	802525a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025372:	4562      	cmp	r2, ip
 8025374:	f6ff af71 	blt.w	802525a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025378:	f116 0c01 	adds.w	ip, r6, #1
 802537c:	f53f af6d 	bmi.w	802525a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025380:	4567      	cmp	r7, ip
 8025382:	f6ff af6a 	blt.w	802525a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025386:	b23f      	sxth	r7, r7
 8025388:	b212      	sxth	r2, r2
 802538a:	9701      	str	r7, [sp, #4]
 802538c:	9200      	str	r2, [sp, #0]
 802538e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8025392:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8025396:	4623      	mov	r3, r4
 8025398:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802539a:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802539e:	f7ff fdc3 	bl	8024f28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80253a2:	e75a      	b.n	802525a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80253a4:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80253a6:	ea4f 462b 	mov.w	r6, fp, asr #16
 80253aa:	1428      	asrs	r0, r5, #16
 80253ac:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80253b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80253b4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80253b8:	fb02 6000 	mla	r0, r2, r0, r6
 80253bc:	9e08      	ldr	r6, [sp, #32]
 80253be:	f816 8000 	ldrb.w	r8, [r6, r0]
 80253c2:	1837      	adds	r7, r6, r0
 80253c4:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80253c8:	eb04 0c08 	add.w	ip, r4, r8
 80253cc:	2b00      	cmp	r3, #0
 80253ce:	d060      	beq.n	8025492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80253d0:	787e      	ldrb	r6, [r7, #1]
 80253d2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80253d6:	4426      	add	r6, r4
 80253d8:	2900      	cmp	r1, #0
 80253da:	d062      	beq.n	80254a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80253dc:	18b8      	adds	r0, r7, r2
 80253de:	5cba      	ldrb	r2, [r7, r2]
 80253e0:	7840      	ldrb	r0, [r0, #1]
 80253e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80253e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80253ea:	4422      	add	r2, r4
 80253ec:	4420      	add	r0, r4
 80253ee:	b29b      	uxth	r3, r3
 80253f0:	78b7      	ldrb	r7, [r6, #2]
 80253f2:	b289      	uxth	r1, r1
 80253f4:	f89c a002 	ldrb.w	sl, [ip, #2]
 80253f8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80253fc:	fb03 f901 	mul.w	r9, r3, r1
 8025400:	011b      	lsls	r3, r3, #4
 8025402:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025406:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802540a:	eba3 0309 	sub.w	r3, r3, r9
 802540e:	b289      	uxth	r1, r1
 8025410:	b29b      	uxth	r3, r3
 8025412:	ebae 0e01 	sub.w	lr, lr, r1
 8025416:	435f      	muls	r7, r3
 8025418:	fa1f fe8e 	uxth.w	lr, lr
 802541c:	fb0e 770a 	mla	r7, lr, sl, r7
 8025420:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025424:	fb01 770a 	mla	r7, r1, sl, r7
 8025428:	f890 a002 	ldrb.w	sl, [r0, #2]
 802542c:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025430:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025434:	f896 8000 	ldrb.w	r8, [r6]
 8025438:	7876      	ldrb	r6, [r6, #1]
 802543a:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 802543e:	fb03 f808 	mul.w	r8, r3, r8
 8025442:	4373      	muls	r3, r6
 8025444:	7856      	ldrb	r6, [r2, #1]
 8025446:	fb0e 8807 	mla	r8, lr, r7, r8
 802544a:	7817      	ldrb	r7, [r2, #0]
 802544c:	fb0e 330c 	mla	r3, lr, ip, r3
 8025450:	fb01 8807 	mla	r8, r1, r7, r8
 8025454:	7807      	ldrb	r7, [r0, #0]
 8025456:	fb01 3306 	mla	r3, r1, r6, r3
 802545a:	fb09 8707 	mla	r7, r9, r7, r8
 802545e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025462:	ea47 070a 	orr.w	r7, r7, sl
 8025466:	f890 a001 	ldrb.w	sl, [r0, #1]
 802546a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802546e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025470:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025474:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025478:	ea47 070a 	orr.w	r7, r7, sl
 802547c:	f823 7b02 	strh.w	r7, [r3], #2
 8025480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025482:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025484:	449b      	add	fp, r3
 8025486:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025488:	441d      	add	r5, r3
 802548a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802548c:	3b01      	subs	r3, #1
 802548e:	9309      	str	r3, [sp, #36]	@ 0x24
 8025490:	e714      	b.n	80252bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 8025492:	b149      	cbz	r1, 80254a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8025494:	5cba      	ldrb	r2, [r7, r2]
 8025496:	4660      	mov	r0, ip
 8025498:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802549c:	4422      	add	r2, r4
 802549e:	4666      	mov	r6, ip
 80254a0:	e7a5      	b.n	80253ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80254a2:	4660      	mov	r0, ip
 80254a4:	4662      	mov	r2, ip
 80254a6:	e7a2      	b.n	80253ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 80254a8:	4660      	mov	r0, ip
 80254aa:	4662      	mov	r2, ip
 80254ac:	e7f7      	b.n	802549e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80254ae:	b00f      	add	sp, #60	@ 0x3c
 80254b0:	ecbd 8b08 	vpop	{d8-d11}
 80254b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080254b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80254b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254bc:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	@ 0x38
 80254c0:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80254c4:	2c00      	cmp	r4, #0
 80254c6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 80254ca:	fb04 560c 	mla	r6, r4, ip, r5
 80254ce:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 80254d2:	f89d 7044 	ldrb.w	r7, [sp, #68]	@ 0x44
 80254d6:	eb02 0e06 	add.w	lr, r2, r6
 80254da:	db3d      	blt.n	8025558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80254dc:	45a0      	cmp	r8, r4
 80254de:	dd3b      	ble.n	8025558 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 80254e0:	2d00      	cmp	r5, #0
 80254e2:	db37      	blt.n	8025554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80254e4:	45ac      	cmp	ip, r5
 80254e6:	dd35      	ble.n	8025554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 80254e8:	5d92      	ldrb	r2, [r2, r6]
 80254ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80254ee:	1c6e      	adds	r6, r5, #1
 80254f0:	d435      	bmi.n	802555e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80254f2:	45b4      	cmp	ip, r6
 80254f4:	dd33      	ble.n	802555e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80254f6:	b3a0      	cbz	r0, 8025562 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 80254f8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80254fc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025500:	3401      	adds	r4, #1
 8025502:	d432      	bmi.n	802556a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025504:	45a0      	cmp	r8, r4
 8025506:	dd30      	ble.n	802556a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 8025508:	b397      	cbz	r7, 8025570 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 802550a:	2d00      	cmp	r5, #0
 802550c:	db2b      	blt.n	8025566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 802550e:	45ac      	cmp	ip, r5
 8025510:	dd29      	ble.n	8025566 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 8025512:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8025516:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 802551a:	3501      	adds	r5, #1
 802551c:	d42b      	bmi.n	8025576 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 802551e:	45ac      	cmp	ip, r5
 8025520:	dd29      	ble.n	8025576 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 8025522:	b350      	cbz	r0, 802557a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 8025524:	44f4      	add	ip, lr
 8025526:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802552a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802552e:	280f      	cmp	r0, #15
 8025530:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025534:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025538:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802553c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025540:	d801      	bhi.n	8025546 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 8025542:	2f0f      	cmp	r7, #15
 8025544:	d91b      	bls.n	802557e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 8025546:	4b8d      	ldr	r3, [pc, #564]	@ (802577c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8025548:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802554c:	4a8c      	ldr	r2, [pc, #560]	@ (8025780 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 802554e:	488d      	ldr	r0, [pc, #564]	@ (8025784 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 8025550:	f005 fd0a 	bl	802af68 <__assert_func>
 8025554:	2200      	movs	r2, #0
 8025556:	e7ca      	b.n	80254ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8025558:	2600      	movs	r6, #0
 802555a:	4632      	mov	r2, r6
 802555c:	e7d0      	b.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802555e:	2600      	movs	r6, #0
 8025560:	e7ce      	b.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025562:	4606      	mov	r6, r0
 8025564:	e7cc      	b.n	8025500 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8025566:	2400      	movs	r4, #0
 8025568:	e7d7      	b.n	802551a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 802556a:	2300      	movs	r3, #0
 802556c:	461c      	mov	r4, r3
 802556e:	e7de      	b.n	802552e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025570:	463b      	mov	r3, r7
 8025572:	463c      	mov	r4, r7
 8025574:	e7db      	b.n	802552e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8025576:	2300      	movs	r3, #0
 8025578:	e7d9      	b.n	802552e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802557a:	4603      	mov	r3, r0
 802557c:	e7d7      	b.n	802552e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802557e:	b280      	uxth	r0, r0
 8025580:	b2bf      	uxth	r7, r7
 8025582:	fb07 fe00 	mul.w	lr, r7, r0
 8025586:	0100      	lsls	r0, r0, #4
 8025588:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802558c:	eba0 0c0e 	sub.w	ip, r0, lr
 8025590:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8025594:	b2bf      	uxth	r7, r7
 8025596:	fa1f fc8c 	uxth.w	ip, ip
 802559a:	1bed      	subs	r5, r5, r7
 802559c:	fb0a f00c 	mul.w	r0, sl, ip
 80255a0:	b2ad      	uxth	r5, r5
 80255a2:	fb0b 0005 	mla	r0, fp, r5, r0
 80255a6:	fb07 0009 	mla	r0, r7, r9, r0
 80255aa:	fb0e 0008 	mla	r0, lr, r8, r0
 80255ae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80255b2:	9001      	str	r0, [sp, #4]
 80255b4:	2800      	cmp	r0, #0
 80255b6:	f000 80de 	beq.w	8025776 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 80255ba:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80255be:	d018      	beq.n	80255f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 80255c0:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 80255c4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80255c8:	fb0b f000 	mul.w	r0, fp, r0
 80255cc:	fb0b fb02 	mul.w	fp, fp, r2
 80255d0:	0a02      	lsrs	r2, r0, #8
 80255d2:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 80255d6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80255da:	4402      	add	r2, r0
 80255dc:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 80255e0:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80255e4:	0a12      	lsrs	r2, r2, #8
 80255e6:	0a00      	lsrs	r0, r0, #8
 80255e8:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80255ec:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80255f0:	4302      	orrs	r2, r0
 80255f2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80255f6:	d01a      	beq.n	802562e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 80255f8:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 80255fc:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8025600:	fb0a f000 	mul.w	r0, sl, r0
 8025604:	fb0a fa06 	mul.w	sl, sl, r6
 8025608:	0a06      	lsrs	r6, r0, #8
 802560a:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802560e:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025612:	4406      	add	r6, r0
 8025614:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8025618:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 802561c:	0a36      	lsrs	r6, r6, #8
 802561e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025622:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8025626:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802562a:	ea46 060a 	orr.w	r6, r6, sl
 802562e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8025632:	d01b      	beq.n	802566c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 8025634:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8025638:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802563c:	fb09 fa0a 	mul.w	sl, r9, sl
 8025640:	fb09 f004 	mul.w	r0, r9, r4
 8025644:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8025648:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802564c:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8025650:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025654:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8025658:	4454      	add	r4, sl
 802565a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802565e:	0a24      	lsrs	r4, r4, #8
 8025660:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025664:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8025668:	ea44 0409 	orr.w	r4, r4, r9
 802566c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8025670:	d01b      	beq.n	80256aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 8025672:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8025676:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802567a:	fb08 f909 	mul.w	r9, r8, r9
 802567e:	fb08 f003 	mul.w	r0, r8, r3
 8025682:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8025686:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 802568a:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 802568e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025692:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8025696:	444b      	add	r3, r9
 8025698:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802569c:	0a1b      	lsrs	r3, r3, #8
 802569e:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80256a2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80256a6:	ea43 0308 	orr.w	r3, r3, r8
 80256aa:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 80256ae:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80256b2:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 80256b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80256ba:	fb0c f808 	mul.w	r8, ip, r8
 80256be:	8808      	ldrh	r0, [r1, #0]
 80256c0:	fb0c f606 	mul.w	r6, ip, r6
 80256c4:	fb05 8909 	mla	r9, r5, r9, r8
 80256c8:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 80256cc:	fb05 6502 	mla	r5, r5, r2, r6
 80256d0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80256d4:	fb07 9908 	mla	r9, r7, r8, r9
 80256d8:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80256dc:	fb07 5704 	mla	r7, r7, r4, r5
 80256e0:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 80256e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80256e8:	b2b6      	uxth	r6, r6
 80256ea:	fb0e 9808 	mla	r8, lr, r8, r9
 80256ee:	9a01      	ldr	r2, [sp, #4]
 80256f0:	fb0e 7e03 	mla	lr, lr, r3, r7
 80256f4:	1205      	asrs	r5, r0, #8
 80256f6:	4372      	muls	r2, r6
 80256f8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80256fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025700:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8025704:	1c53      	adds	r3, r2, #1
 8025706:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802570a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802570e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025712:	ea48 0e0e 	orr.w	lr, r8, lr
 8025716:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802571a:	ea4f 421e 	mov.w	r2, lr, lsr #16
 802571e:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8025722:	b2db      	uxtb	r3, r3
 8025724:	fb12 f206 	smulbb	r2, r2, r6
 8025728:	fa5f fe8e 	uxtb.w	lr, lr
 802572c:	fb14 f406 	smulbb	r4, r4, r6
 8025730:	fb05 2503 	mla	r5, r5, r3, r2
 8025734:	10c2      	asrs	r2, r0, #3
 8025736:	fb1e fe06 	smulbb	lr, lr, r6
 802573a:	00c0      	lsls	r0, r0, #3
 802573c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025740:	b2ad      	uxth	r5, r5
 8025742:	b2c0      	uxtb	r0, r0
 8025744:	fb02 4203 	mla	r2, r2, r3, r4
 8025748:	fb00 e303 	mla	r3, r0, r3, lr
 802574c:	b294      	uxth	r4, r2
 802574e:	b298      	uxth	r0, r3
 8025750:	1c6b      	adds	r3, r5, #1
 8025752:	1c62      	adds	r2, r4, #1
 8025754:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025758:	1c43      	adds	r3, r0, #1
 802575a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802575e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025762:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8025766:	0952      	lsrs	r2, r2, #5
 8025768:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802576c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025770:	432b      	orrs	r3, r5
 8025772:	4313      	orrs	r3, r2
 8025774:	800b      	strh	r3, [r1, #0]
 8025776:	b003      	add	sp, #12
 8025778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802577c:	08030109 	.word	0x08030109
 8025780:	080306d6 	.word	0x080306d6
 8025784:	0803018d 	.word	0x0803018d

08025788 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802578c:	ed2d 8b08 	vpush	{d8-d11}
 8025790:	b09f      	sub	sp, #124	@ 0x7c
 8025792:	eeb0 aa40 	vmov.f32	s20, s0
 8025796:	eef0 9a60 	vmov.f32	s19, s1
 802579a:	921b      	str	r2, [sp, #108]	@ 0x6c
 802579c:	eeb0 9a41 	vmov.f32	s18, s2
 80257a0:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 80257a2:	eeb0 8a62 	vmov.f32	s16, s5
 80257a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80257a8:	eef0 8a43 	vmov.f32	s17, s6
 80257ac:	f89d 30e4 	ldrb.w	r3, [sp, #228]	@ 0xe4
 80257b0:	eef0 ba44 	vmov.f32	s23, s8
 80257b4:	901d      	str	r0, [sp, #116]	@ 0x74
 80257b6:	eeb0 ba64 	vmov.f32	s22, s9
 80257ba:	931c      	str	r3, [sp, #112]	@ 0x70
 80257bc:	eef0 aa45 	vmov.f32	s21, s10
 80257c0:	6850      	ldr	r0, [r2, #4]
 80257c2:	9119      	str	r1, [sp, #100]	@ 0x64
 80257c4:	6812      	ldr	r2, [r2, #0]
 80257c6:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
 80257c8:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	@ 0xd8
 80257cc:	fb00 1303 	mla	r3, r0, r3, r1
 80257d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80257d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80257d6:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80257d8:	681b      	ldr	r3, [r3, #0]
 80257da:	9312      	str	r3, [sp, #72]	@ 0x48
 80257dc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80257de:	685e      	ldr	r6, [r3, #4]
 80257e0:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80257e4:	3604      	adds	r6, #4
 80257e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80257e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80257ea:	2b00      	cmp	r3, #0
 80257ec:	dc03      	bgt.n	80257f6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80257ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	f340 8387 	ble.w	8025f04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80257f6:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80257f8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025800:	1e48      	subs	r0, r1, #1
 8025802:	1e57      	subs	r7, r2, #1
 8025804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025806:	2b00      	cmp	r3, #0
 8025808:	f340 8194 	ble.w	8025b34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 802580c:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 802580e:	142b      	asrs	r3, r5, #16
 8025810:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8025814:	d406      	bmi.n	8025824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025816:	4584      	cmp	ip, r0
 8025818:	da04      	bge.n	8025824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802581a:	2b00      	cmp	r3, #0
 802581c:	db02      	blt.n	8025824 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802581e:	42bb      	cmp	r3, r7
 8025820:	f2c0 8189 	blt.w	8025b36 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025824:	f11c 0c01 	adds.w	ip, ip, #1
 8025828:	f100 8177 	bmi.w	8025b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802582c:	4561      	cmp	r1, ip
 802582e:	f2c0 8174 	blt.w	8025b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025832:	3301      	adds	r3, #1
 8025834:	f100 8171 	bmi.w	8025b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8025838:	429a      	cmp	r2, r3
 802583a:	f2c0 816e 	blt.w	8025b1a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 802583e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025840:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8025842:	931a      	str	r3, [sp, #104]	@ 0x68
 8025844:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025846:	2b00      	cmp	r3, #0
 8025848:	f340 8193 	ble.w	8025b72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802584c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 802584e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025852:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025856:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802585a:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 802585c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8025860:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8025862:	141b      	asrs	r3, r3, #16
 8025864:	f100 81d6 	bmi.w	8025c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025868:	f100 38ff 	add.w	r8, r0, #4294967295
 802586c:	4543      	cmp	r3, r8
 802586e:	f280 81d1 	bge.w	8025c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025872:	f1bc 0f00 	cmp.w	ip, #0
 8025876:	f2c0 81cd 	blt.w	8025c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802587a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802587e:	45c4      	cmp	ip, r8
 8025880:	f280 81c8 	bge.w	8025c14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025884:	b200      	sxth	r0, r0
 8025886:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025888:	fb0c 3300 	mla	r3, ip, r0, r3
 802588c:	eb04 0803 	add.w	r8, r4, r3
 8025890:	5ce3      	ldrb	r3, [r4, r3]
 8025892:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025896:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802589a:	2a00      	cmp	r2, #0
 802589c:	f000 81af 	beq.w	8025bfe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80258a0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80258a4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80258a8:	940e      	str	r4, [sp, #56]	@ 0x38
 80258aa:	0e24      	lsrs	r4, r4, #24
 80258ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80258ae:	b179      	cbz	r1, 80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80258b0:	eb08 0c00 	add.w	ip, r8, r0
 80258b4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80258b8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80258be:	0e00      	lsrs	r0, r0, #24
 80258c0:	9013      	str	r0, [sp, #76]	@ 0x4c
 80258c2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80258c6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80258ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80258cc:	0e00      	lsrs	r0, r0, #24
 80258ce:	9016      	str	r0, [sp, #88]	@ 0x58
 80258d0:	b292      	uxth	r2, r2
 80258d2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80258d4:	b289      	uxth	r1, r1
 80258d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80258d8:	fb02 f901 	mul.w	r9, r2, r1
 80258dc:	0112      	lsls	r2, r2, #4
 80258de:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80258e2:	eba2 0809 	sub.w	r8, r2, r9
 80258e6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80258ea:	b289      	uxth	r1, r1
 80258ec:	fa1f f888 	uxth.w	r8, r8
 80258f0:	1a52      	subs	r2, r2, r1
 80258f2:	fb08 f000 	mul.w	r0, r8, r0
 80258f6:	b292      	uxth	r2, r2
 80258f8:	fb02 000e 	mla	r0, r2, lr, r0
 80258fc:	fb01 0004 	mla	r0, r1, r4, r0
 8025900:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8025902:	fb09 0004 	mla	r0, r9, r4, r0
 8025906:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802590a:	2800      	cmp	r0, #0
 802590c:	f000 80fa 	beq.w	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025910:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8025914:	d01b      	beq.n	802594e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025916:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802591a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802591e:	fb0e fa0a 	mul.w	sl, lr, sl
 8025922:	fb0e fe03 	mul.w	lr, lr, r3
 8025926:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802592a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802592e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8025932:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025936:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802593a:	4453      	add	r3, sl
 802593c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025940:	0a1b      	lsrs	r3, r3, #8
 8025942:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025946:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802594a:	ea43 030c 	orr.w	r3, r3, ip
 802594e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025950:	2cff      	cmp	r4, #255	@ 0xff
 8025952:	d021      	beq.n	8025998 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8025954:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025956:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802595a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802595c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025960:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025962:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025966:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8025968:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802596c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025970:	fb04 fa0a 	mul.w	sl, r4, sl
 8025974:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025978:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802597c:	44de      	add	lr, fp
 802597e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025982:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025986:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802598a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802598e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025992:	ea4e 040a 	orr.w	r4, lr, sl
 8025996:	940e      	str	r4, [sp, #56]	@ 0x38
 8025998:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802599a:	2cff      	cmp	r4, #255	@ 0xff
 802599c:	d021      	beq.n	80259e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802599e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80259a0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80259a4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80259a6:	fb04 fb0b 	mul.w	fp, r4, fp
 80259aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80259ac:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80259b0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80259b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80259b6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80259ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80259be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80259c2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80259c6:	44de      	add	lr, fp
 80259c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80259cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80259d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80259d4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80259d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80259dc:	ea4e 040a 	orr.w	r4, lr, sl
 80259e0:	940a      	str	r4, [sp, #40]	@ 0x28
 80259e2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259e4:	2cff      	cmp	r4, #255	@ 0xff
 80259e6:	d021      	beq.n	8025a2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80259e8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80259ea:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80259ee:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80259f4:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80259f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80259fa:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80259fc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025a00:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8025a04:	fb04 fa0a 	mul.w	sl, r4, sl
 8025a08:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a0c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8025a10:	44de      	add	lr, fp
 8025a12:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025a16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025a1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8025a22:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025a26:	ea4e 040a 	orr.w	r4, lr, sl
 8025a2a:	940f      	str	r4, [sp, #60]	@ 0x3c
 8025a2c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a2e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8025a32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025a36:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025a3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a3c:	fb08 fc0c 	mul.w	ip, r8, ip
 8025a40:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025a44:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025a48:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8025a4a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8025a4e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8025a52:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8025a54:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025a58:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8025a5c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025a5e:	fb08 f80e 	mul.w	r8, r8, lr
 8025a62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025a66:	fb02 8303 	mla	r3, r2, r3, r8
 8025a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a6c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025a70:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025a74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025a76:	fb01 330a 	mla	r3, r1, sl, r3
 8025a7a:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8025a7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8025a80:	fb09 3901 	mla	r9, r9, r1, r3
 8025a84:	883b      	ldrh	r3, [r7, #0]
 8025a86:	4342      	muls	r2, r0
 8025a88:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025a8c:	1c50      	adds	r0, r2, #1
 8025a8e:	1219      	asrs	r1, r3, #8
 8025a90:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8025a94:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025a98:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8025a9c:	ea4c 0c09 	orr.w	ip, ip, r9
 8025aa0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8025aa4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8025aa8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8025aac:	b2c0      	uxtb	r0, r0
 8025aae:	fb12 f204 	smulbb	r2, r2, r4
 8025ab2:	fa5f fc8c 	uxtb.w	ip, ip
 8025ab6:	fb1e fe04 	smulbb	lr, lr, r4
 8025aba:	fb01 2100 	mla	r1, r1, r0, r2
 8025abe:	10da      	asrs	r2, r3, #3
 8025ac0:	fb1c fc04 	smulbb	ip, ip, r4
 8025ac4:	00db      	lsls	r3, r3, #3
 8025ac6:	b289      	uxth	r1, r1
 8025ac8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8025acc:	b2db      	uxtb	r3, r3
 8025ace:	fb02 e200 	mla	r2, r2, r0, lr
 8025ad2:	fb03 c300 	mla	r3, r3, r0, ip
 8025ad6:	b292      	uxth	r2, r2
 8025ad8:	fa1f fc83 	uxth.w	ip, r3
 8025adc:	1c4b      	adds	r3, r1, #1
 8025ade:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8025ae2:	f10c 0301 	add.w	r3, ip, #1
 8025ae6:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8025aea:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8025aee:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025af2:	430b      	orrs	r3, r1
 8025af4:	1c51      	adds	r1, r2, #1
 8025af6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8025afa:	0952      	lsrs	r2, r2, #5
 8025afc:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8025b00:	4313      	orrs	r3, r2
 8025b02:	803b      	strh	r3, [r7, #0]
 8025b04:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8025b06:	3702      	adds	r7, #2
 8025b08:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8025b0a:	441a      	add	r2, r3
 8025b0c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025b0e:	441d      	add	r5, r3
 8025b10:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8025b12:	9231      	str	r2, [sp, #196]	@ 0xc4
 8025b14:	3b01      	subs	r3, #1
 8025b16:	931a      	str	r3, [sp, #104]	@ 0x68
 8025b18:	e694      	b.n	8025844 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8025b1a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8025b1c:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 8025b1e:	441c      	add	r4, r3
 8025b20:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025b22:	441d      	add	r5, r3
 8025b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b26:	9431      	str	r4, [sp, #196]	@ 0xc4
 8025b28:	3b01      	subs	r3, #1
 8025b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b2e:	3302      	adds	r3, #2
 8025b30:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b32:	e667      	b.n	8025804 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8025b34:	d024      	beq.n	8025b80 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025b36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b38:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8025b3a:	3b01      	subs	r3, #1
 8025b3c:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 8025b3e:	fb00 4003 	mla	r0, r0, r3, r4
 8025b42:	1400      	asrs	r0, r0, #16
 8025b44:	f53f ae7b 	bmi.w	802583e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b48:	3901      	subs	r1, #1
 8025b4a:	4288      	cmp	r0, r1
 8025b4c:	f6bf ae77 	bge.w	802583e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b50:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8025b52:	fb01 5303 	mla	r3, r1, r3, r5
 8025b56:	141b      	asrs	r3, r3, #16
 8025b58:	f53f ae71 	bmi.w	802583e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b5c:	3a01      	subs	r2, #1
 8025b5e:	4293      	cmp	r3, r2
 8025b60:	f6bf ae6d 	bge.w	802583e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8025b64:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8025b68:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8025b6c:	f1bb 0f00 	cmp.w	fp, #0
 8025b70:	dc70      	bgt.n	8025c54 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8025b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b74:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025b78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025b7a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025b7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8025b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	f340 81be 	ble.w	8025f04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8025b88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025b8c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025b8e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025b92:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025b96:	eef0 6a48 	vmov.f32	s13, s16
 8025b9a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025b9e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025ba2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025ba6:	edcd 6a31 	vstr	s13, [sp, #196]	@ 0xc4
 8025baa:	eef0 6a68 	vmov.f32	s13, s17
 8025bae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025bb2:	ee16 5a90 	vmov	r5, s13
 8025bb6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025bba:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025bbe:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025bc2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025bc6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025bca:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025bce:	ee18 2a10 	vmov	r2, s16
 8025bd2:	eeb0 8a47 	vmov.f32	s16, s14
 8025bd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bda:	ee18 2a90 	vmov	r2, s17
 8025bde:	9333      	str	r3, [sp, #204]	@ 0xcc
 8025be0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025be2:	eef0 8a67 	vmov.f32	s17, s15
 8025be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bea:	9334      	str	r3, [sp, #208]	@ 0xd0
 8025bec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025bee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8025bf0:	3b01      	subs	r3, #1
 8025bf2:	9319      	str	r3, [sp, #100]	@ 0x64
 8025bf4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8025bf6:	bf08      	it	eq
 8025bf8:	4613      	moveq	r3, r2
 8025bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8025bfc:	e5f4      	b.n	80257e8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8025bfe:	2900      	cmp	r1, #0
 8025c00:	f43f ae66 	beq.w	80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025c04:	f818 0000 	ldrb.w	r0, [r8, r0]
 8025c08:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025c0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8025c0e:	0e00      	lsrs	r0, r0, #24
 8025c10:	9013      	str	r0, [sp, #76]	@ 0x4c
 8025c12:	e65d      	b.n	80258d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8025c14:	f113 0801 	adds.w	r8, r3, #1
 8025c18:	f53f af74 	bmi.w	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c1c:	4540      	cmp	r0, r8
 8025c1e:	f6ff af71 	blt.w	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c22:	f11c 0801 	adds.w	r8, ip, #1
 8025c26:	f53f af6d 	bmi.w	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c2a:	45c6      	cmp	lr, r8
 8025c2c:	f6ff af6a 	blt.w	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c30:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8025c32:	b200      	sxth	r0, r0
 8025c34:	9302      	str	r3, [sp, #8]
 8025c36:	fa0f f38e 	sxth.w	r3, lr
 8025c3a:	9000      	str	r0, [sp, #0]
 8025c3c:	9301      	str	r3, [sp, #4]
 8025c3e:	4633      	mov	r3, r6
 8025c40:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8025c42:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8025c46:	e9cd c203 	strd	ip, r2, [sp, #12]
 8025c4a:	4639      	mov	r1, r7
 8025c4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025c4e:	f7ff fc33 	bl	80254b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8025c52:	e757      	b.n	8025b04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025c54:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8025c56:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025c5a:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
 8025c5c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025c60:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8025c62:	1427      	asrs	r7, r4, #16
 8025c64:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8025c66:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025c6a:	142b      	asrs	r3, r5, #16
 8025c6c:	fb01 7303 	mla	r3, r1, r3, r7
 8025c70:	18e7      	adds	r7, r4, r3
 8025c72:	5ce3      	ldrb	r3, [r4, r3]
 8025c74:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025c78:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025c7c:	2a00      	cmp	r2, #0
 8025c7e:	f000 8137 	beq.w	8025ef0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8025c82:	f897 e001 	ldrb.w	lr, [r7, #1]
 8025c86:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025c8a:	9410      	str	r4, [sp, #64]	@ 0x40
 8025c8c:	0e24      	lsrs	r4, r4, #24
 8025c8e:	9417      	str	r4, [sp, #92]	@ 0x5c
 8025c90:	b170      	cbz	r0, 8025cb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025c92:	eb07 0e01 	add.w	lr, r7, r1
 8025c96:	5c79      	ldrb	r1, [r7, r1]
 8025c98:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025c9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025c9e:	0e09      	lsrs	r1, r1, #24
 8025ca0:	9114      	str	r1, [sp, #80]	@ 0x50
 8025ca2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8025ca6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025caa:	9111      	str	r1, [sp, #68]	@ 0x44
 8025cac:	0e09      	lsrs	r1, r1, #24
 8025cae:	9118      	str	r1, [sp, #96]	@ 0x60
 8025cb0:	b292      	uxth	r2, r2
 8025cb2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8025cb4:	b280      	uxth	r0, r0
 8025cb6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025cb8:	fb02 f800 	mul.w	r8, r2, r0
 8025cbc:	0112      	lsls	r2, r2, #4
 8025cbe:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025cc2:	eba2 0e08 	sub.w	lr, r2, r8
 8025cc6:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8025cca:	b280      	uxth	r0, r0
 8025ccc:	fa1f fe8e 	uxth.w	lr, lr
 8025cd0:	1a12      	subs	r2, r2, r0
 8025cd2:	fb0e f101 	mul.w	r1, lr, r1
 8025cd6:	b292      	uxth	r2, r2
 8025cd8:	fb02 110c 	mla	r1, r2, ip, r1
 8025cdc:	fb00 1104 	mla	r1, r0, r4, r1
 8025ce0:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025ce2:	fb08 1104 	mla	r1, r8, r4, r1
 8025ce6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8025cea:	2900      	cmp	r1, #0
 8025cec:	f000 80f5 	beq.w	8025eda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8025cf0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8025cf4:	d019      	beq.n	8025d2a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8025cf6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8025cfa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025cfe:	fb0c fa0a 	mul.w	sl, ip, sl
 8025d02:	fb0c fc03 	mul.w	ip, ip, r3
 8025d06:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8025d0a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8025d0e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8025d12:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025d16:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025d1a:	4453      	add	r3, sl
 8025d1c:	0a3f      	lsrs	r7, r7, #8
 8025d1e:	0a1b      	lsrs	r3, r3, #8
 8025d20:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8025d24:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8025d28:	433b      	orrs	r3, r7
 8025d2a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d2c:	2cff      	cmp	r4, #255	@ 0xff
 8025d2e:	d020      	beq.n	8025d72 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8025d30:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025d32:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025d36:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d38:	4367      	muls	r7, r4
 8025d3a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025d3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d40:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025d44:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025d46:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025d4a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d52:	44bc      	add	ip, r7
 8025d54:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025d58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025d5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025d60:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025d68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025d6c:	ea4c 040a 	orr.w	r4, ip, sl
 8025d70:	9410      	str	r4, [sp, #64]	@ 0x40
 8025d72:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d74:	2cff      	cmp	r4, #255	@ 0xff
 8025d76:	d020      	beq.n	8025dba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8025d78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d7a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025d7e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d80:	4367      	muls	r7, r4
 8025d82:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025d84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025d88:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025d8c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025d8e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025d92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025d96:	fb04 fa0a 	mul.w	sl, r4, sl
 8025d9a:	44bc      	add	ip, r7
 8025d9c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025da0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025da4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025da8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025db0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025db4:	ea4c 040a 	orr.w	r4, ip, sl
 8025db8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8025dba:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025dbc:	2cff      	cmp	r4, #255	@ 0xff
 8025dbe:	d020      	beq.n	8025e02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8025dc0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025dc2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025dc6:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025dc8:	4367      	muls	r7, r4
 8025dca:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025dcc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025dd0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8025dd4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8025dd6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8025dda:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025dde:	fb04 fa0a 	mul.w	sl, r4, sl
 8025de2:	44bc      	add	ip, r7
 8025de4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8025de8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025dec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025df0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8025df4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025df8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8025dfc:	ea4c 040a 	orr.w	r4, ip, sl
 8025e00:	9411      	str	r4, [sp, #68]	@ 0x44
 8025e02:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025e04:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8025e08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8025e0c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8025e10:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8025e12:	fb0e f707 	mul.w	r7, lr, r7
 8025e16:	fb02 770c 	mla	r7, r2, ip, r7
 8025e1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e1e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8025e20:	fb00 770c 	mla	r7, r0, ip, r7
 8025e24:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8025e28:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8025e2a:	fb08 770c 	mla	r7, r8, ip, r7
 8025e2e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8025e32:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8025e34:	fb0e fe0c 	mul.w	lr, lr, ip
 8025e38:	0a3f      	lsrs	r7, r7, #8
 8025e3a:	fb02 e303 	mla	r3, r2, r3, lr
 8025e3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025e40:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8025e44:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8025e48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8025e4a:	fb00 330a 	mla	r3, r0, sl, r3
 8025e4e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8025e52:	f8b9 0000 	ldrh.w	r0, [r9]
 8025e56:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025e5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025e5c:	1202      	asrs	r2, r0, #8
 8025e5e:	434b      	muls	r3, r1
 8025e60:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e64:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8025e68:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8025e6c:	1c59      	adds	r1, r3, #1
 8025e6e:	ea47 070c 	orr.w	r7, r7, ip
 8025e72:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8025e76:	0c3b      	lsrs	r3, r7, #16
 8025e78:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8025e7c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8025e80:	b2ff      	uxtb	r7, r7
 8025e82:	fb13 f304 	smulbb	r3, r3, r4
 8025e86:	b2c9      	uxtb	r1, r1
 8025e88:	fb1c fc04 	smulbb	ip, ip, r4
 8025e8c:	fb02 3201 	mla	r2, r2, r1, r3
 8025e90:	10c3      	asrs	r3, r0, #3
 8025e92:	fb17 f704 	smulbb	r7, r7, r4
 8025e96:	00c0      	lsls	r0, r0, #3
 8025e98:	b292      	uxth	r2, r2
 8025e9a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8025e9e:	b2c0      	uxtb	r0, r0
 8025ea0:	fb03 c301 	mla	r3, r3, r1, ip
 8025ea4:	f102 0c01 	add.w	ip, r2, #1
 8025ea8:	fb00 7001 	mla	r0, r0, r1, r7
 8025eac:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8025eb0:	b280      	uxth	r0, r0
 8025eb2:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8025eb6:	b29b      	uxth	r3, r3
 8025eb8:	1c42      	adds	r2, r0, #1
 8025eba:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8025ebe:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025ec2:	ea42 020c 	orr.w	r2, r2, ip
 8025ec6:	f103 0c01 	add.w	ip, r3, #1
 8025eca:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8025ece:	095b      	lsrs	r3, r3, #5
 8025ed0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025ed4:	431a      	orrs	r2, r3
 8025ed6:	f8a9 2000 	strh.w	r2, [r9]
 8025eda:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8025edc:	f109 0902 	add.w	r9, r9, #2
 8025ee0:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8025ee2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025ee6:	441a      	add	r2, r3
 8025ee8:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8025eea:	9231      	str	r2, [sp, #196]	@ 0xc4
 8025eec:	441d      	add	r5, r3
 8025eee:	e63d      	b.n	8025b6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8025ef0:	2800      	cmp	r0, #0
 8025ef2:	f43f aedd 	beq.w	8025cb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025ef6:	5c79      	ldrb	r1, [r7, r1]
 8025ef8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025efc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8025efe:	0e09      	lsrs	r1, r1, #24
 8025f00:	9114      	str	r1, [sp, #80]	@ 0x50
 8025f02:	e6d5      	b.n	8025cb0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8025f04:	b01f      	add	sp, #124	@ 0x7c
 8025f06:	ecbd 8b08 	vpop	{d8-d11}
 8025f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8025f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f14:	880e      	ldrh	r6, [r1, #0]
 8025f16:	b085      	sub	sp, #20
 8025f18:	4691      	mov	r9, r2
 8025f1a:	ea4f 2826 	mov.w	r8, r6, asr #8
 8025f1e:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 8025f22:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	@ 0x3c
 8025f26:	f008 02f8 	and.w	r2, r8, #248	@ 0xf8
 8025f2a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8025f2e:	00f6      	lsls	r6, r6, #3
 8025f30:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8025f34:	9200      	str	r2, [sp, #0]
 8025f36:	f008 02fc 	and.w	r2, r8, #252	@ 0xfc
 8025f3a:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8025f3e:	9201      	str	r2, [sp, #4]
 8025f40:	b2f2      	uxtb	r2, r6
 8025f42:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	@ 0x40
 8025f46:	9202      	str	r2, [sp, #8]
 8025f48:	fb04 560c 	mla	r6, r4, ip, r5
 8025f4c:	2c00      	cmp	r4, #0
 8025f4e:	eb09 0806 	add.w	r8, r9, r6
 8025f52:	db3f      	blt.n	8025fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025f54:	45a6      	cmp	lr, r4
 8025f56:	dd3d      	ble.n	8025fd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8025f58:	2d00      	cmp	r5, #0
 8025f5a:	db39      	blt.n	8025fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025f5c:	45ac      	cmp	ip, r5
 8025f5e:	dd37      	ble.n	8025fd0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8025f60:	f819 2006 	ldrb.w	r2, [r9, r6]
 8025f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8025f68:	1c6e      	adds	r6, r5, #1
 8025f6a:	d436      	bmi.n	8025fda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025f6c:	45b4      	cmp	ip, r6
 8025f6e:	dd34      	ble.n	8025fda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8025f70:	b3a8      	cbz	r0, 8025fde <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8025f72:	f898 6001 	ldrb.w	r6, [r8, #1]
 8025f76:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8025f7a:	3401      	adds	r4, #1
 8025f7c:	d433      	bmi.n	8025fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025f7e:	45a6      	cmp	lr, r4
 8025f80:	dd31      	ble.n	8025fe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8025f82:	b39f      	cbz	r7, 8025fec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8025f84:	2d00      	cmp	r5, #0
 8025f86:	eb08 0e0c 	add.w	lr, r8, ip
 8025f8a:	db2a      	blt.n	8025fe2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025f8c:	45ac      	cmp	ip, r5
 8025f8e:	dd28      	ble.n	8025fe2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8025f90:	f818 400c 	ldrb.w	r4, [r8, ip]
 8025f94:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8025f98:	3501      	adds	r5, #1
 8025f9a:	d42a      	bmi.n	8025ff2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025f9c:	45ac      	cmp	ip, r5
 8025f9e:	dd28      	ble.n	8025ff2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8025fa0:	b348      	cbz	r0, 8025ff6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8025fa2:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8025fa6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8025faa:	280f      	cmp	r0, #15
 8025fac:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8025fb0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8025fb4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8025fb8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8025fbc:	d801      	bhi.n	8025fc2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8025fbe:	2f0f      	cmp	r7, #15
 8025fc0:	d91b      	bls.n	8025ffa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8025fc2:	4b7e      	ldr	r3, [pc, #504]	@ (80261bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8025fc4:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8025fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80261c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8025fca:	487e      	ldr	r0, [pc, #504]	@ (80261c4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8025fcc:	f004 ffcc 	bl	802af68 <__assert_func>
 8025fd0:	2200      	movs	r2, #0
 8025fd2:	e7c9      	b.n	8025f68 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8025fd4:	2600      	movs	r6, #0
 8025fd6:	4632      	mov	r2, r6
 8025fd8:	e7cf      	b.n	8025f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025fda:	2600      	movs	r6, #0
 8025fdc:	e7cd      	b.n	8025f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025fde:	4606      	mov	r6, r0
 8025fe0:	e7cb      	b.n	8025f7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8025fe2:	2400      	movs	r4, #0
 8025fe4:	e7d8      	b.n	8025f98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8025fe6:	2300      	movs	r3, #0
 8025fe8:	461c      	mov	r4, r3
 8025fea:	e7de      	b.n	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025fec:	463b      	mov	r3, r7
 8025fee:	463c      	mov	r4, r7
 8025ff0:	e7db      	b.n	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025ff2:	2300      	movs	r3, #0
 8025ff4:	e7d9      	b.n	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025ff6:	4603      	mov	r3, r0
 8025ff8:	e7d7      	b.n	8025faa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8025ffa:	b280      	uxth	r0, r0
 8025ffc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8026000:	b2bf      	uxth	r7, r7
 8026002:	fb00 fe07 	mul.w	lr, r0, r7
 8026006:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802600a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802600e:	eba0 0c0e 	sub.w	ip, r0, lr
 8026012:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8026016:	b2bf      	uxth	r7, r7
 8026018:	fa1f fc8c 	uxth.w	ip, ip
 802601c:	eba5 0507 	sub.w	r5, r5, r7
 8026020:	fb0c f00a 	mul.w	r0, ip, sl
 8026024:	b2ad      	uxth	r5, r5
 8026026:	fb05 000b 	mla	r0, r5, fp, r0
 802602a:	fb07 0009 	mla	r0, r7, r9, r0
 802602e:	fb0e 0008 	mla	r0, lr, r8, r0
 8026032:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8026036:	9003      	str	r0, [sp, #12]
 8026038:	d018      	beq.n	802606c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 802603a:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 802603e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8026042:	fb0b f000 	mul.w	r0, fp, r0
 8026046:	fb0b fb02 	mul.w	fp, fp, r2
 802604a:	0a02      	lsrs	r2, r0, #8
 802604c:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8026050:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026054:	4402      	add	r2, r0
 8026056:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 802605a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802605e:	0a12      	lsrs	r2, r2, #8
 8026060:	0a00      	lsrs	r0, r0, #8
 8026062:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8026066:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 802606a:	4302      	orrs	r2, r0
 802606c:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8026070:	d019      	beq.n	80260a6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8026072:	f006 1bff 	and.w	fp, r6, #16711935	@ 0xff00ff
 8026076:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802607a:	fb0a fb0b 	mul.w	fp, sl, fp
 802607e:	fb0a fa06 	mul.w	sl, sl, r6
 8026082:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8026086:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802608a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 802608e:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8026092:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026096:	445e      	add	r6, fp
 8026098:	0a00      	lsrs	r0, r0, #8
 802609a:	0a36      	lsrs	r6, r6, #8
 802609c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80260a0:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 80260a4:	4306      	orrs	r6, r0
 80260a6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80260aa:	d019      	beq.n	80260e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 80260ac:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 80260b0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80260b4:	fb09 fa0a 	mul.w	sl, r9, sl
 80260b8:	fb09 f904 	mul.w	r9, r9, r4
 80260bc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80260c0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80260c4:	f509 7080 	add.w	r0, r9, #256	@ 0x100
 80260c8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80260cc:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 80260d0:	4454      	add	r4, sl
 80260d2:	0a00      	lsrs	r0, r0, #8
 80260d4:	0a24      	lsrs	r4, r4, #8
 80260d6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80260da:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80260de:	4304      	orrs	r4, r0
 80260e0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80260e4:	d019      	beq.n	802611a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 80260e6:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 80260ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80260ee:	fb08 f909 	mul.w	r9, r8, r9
 80260f2:	fb08 f803 	mul.w	r8, r8, r3
 80260f6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80260fa:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 80260fe:	f508 7080 	add.w	r0, r8, #256	@ 0x100
 8026102:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026106:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802610a:	444b      	add	r3, r9
 802610c:	0a00      	lsrs	r0, r0, #8
 802610e:	0a1b      	lsrs	r3, r3, #8
 8026110:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026114:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026118:	4303      	orrs	r3, r0
 802611a:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 802611e:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8026122:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026126:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802612a:	fb0c f808 	mul.w	r8, ip, r8
 802612e:	fb0c f606 	mul.w	r6, ip, r6
 8026132:	fb05 8800 	mla	r8, r5, r0, r8
 8026136:	f004 10ff 	and.w	r0, r4, #16711935	@ 0xff00ff
 802613a:	fb05 6202 	mla	r2, r5, r2, r6
 802613e:	9d00      	ldr	r5, [sp, #0]
 8026140:	fb07 8800 	mla	r8, r7, r0, r8
 8026144:	f003 10ff 	and.w	r0, r3, #16711935	@ 0xff00ff
 8026148:	fb0e 8000 	mla	r0, lr, r0, r8
 802614c:	0a00      	lsrs	r0, r0, #8
 802614e:	f000 18ff 	and.w	r8, r0, #16711935	@ 0xff00ff
 8026152:	f404 407f 	and.w	r0, r4, #65280	@ 0xff00
 8026156:	fb07 2700 	mla	r7, r7, r0, r2
 802615a:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 802615e:	9b03      	ldr	r3, [sp, #12]
 8026160:	fb0e 7000 	mla	r0, lr, r0, r7
 8026164:	9a02      	ldr	r2, [sp, #8]
 8026166:	43dc      	mvns	r4, r3
 8026168:	9b01      	ldr	r3, [sp, #4]
 802616a:	0a00      	lsrs	r0, r0, #8
 802616c:	b2e4      	uxtb	r4, r4
 802616e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026172:	4363      	muls	r3, r4
 8026174:	4365      	muls	r5, r4
 8026176:	ea48 0000 	orr.w	r0, r8, r0
 802617a:	4362      	muls	r2, r4
 802617c:	1c5e      	adds	r6, r3, #1
 802617e:	4614      	mov	r4, r2
 8026180:	1c6a      	adds	r2, r5, #1
 8026182:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8026186:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 802618a:	0a03      	lsrs	r3, r0, #8
 802618c:	0c02      	lsrs	r2, r0, #16
 802618e:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 8026192:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8026196:	00db      	lsls	r3, r3, #3
 8026198:	0212      	lsls	r2, r2, #8
 802619a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802619e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 80261a2:	4313      	orrs	r3, r2
 80261a4:	1c62      	adds	r2, r4, #1
 80261a6:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80261aa:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 80261ae:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80261b2:	4318      	orrs	r0, r3
 80261b4:	8008      	strh	r0, [r1, #0]
 80261b6:	b005      	add	sp, #20
 80261b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261bc:	08030109 	.word	0x08030109
 80261c0:	080306d6 	.word	0x080306d6
 80261c4:	0803018d 	.word	0x0803018d

080261c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80261c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261cc:	ed2d 8b08 	vpush	{d8-d11}
 80261d0:	b09b      	sub	sp, #108	@ 0x6c
 80261d2:	eeb0 aa40 	vmov.f32	s20, s0
 80261d6:	eef0 9a60 	vmov.f32	s19, s1
 80261da:	9218      	str	r2, [sp, #96]	@ 0x60
 80261dc:	eeb0 9a41 	vmov.f32	s18, s2
 80261e0:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80261e2:	eeb0 8a62 	vmov.f32	s16, s5
 80261e6:	9019      	str	r0, [sp, #100]	@ 0x64
 80261e8:	eef0 8a43 	vmov.f32	s17, s6
 80261ec:	6850      	ldr	r0, [r2, #4]
 80261ee:	eef0 ba44 	vmov.f32	s23, s8
 80261f2:	9116      	str	r1, [sp, #88]	@ 0x58
 80261f4:	eeb0 ba64 	vmov.f32	s22, s9
 80261f8:	9307      	str	r3, [sp, #28]
 80261fa:	eef0 aa45 	vmov.f32	s21, s10
 80261fe:	6812      	ldr	r2, [r2, #0]
 8026200:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
 8026202:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8026206:	fb00 1303 	mla	r3, r0, r3, r1
 802620a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802620e:	930a      	str	r3, [sp, #40]	@ 0x28
 8026210:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026212:	681b      	ldr	r3, [r3, #0]
 8026214:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026216:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026218:	685e      	ldr	r6, [r3, #4]
 802621a:	3604      	adds	r6, #4
 802621c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802621e:	2b00      	cmp	r3, #0
 8026220:	dc03      	bgt.n	802622a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8026222:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026224:	2b00      	cmp	r3, #0
 8026226:	f340 8373 	ble.w	8026910 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802622a:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802622c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026230:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026234:	1e48      	subs	r0, r1, #1
 8026236:	1e57      	subs	r7, r2, #1
 8026238:	9b07      	ldr	r3, [sp, #28]
 802623a:	2b00      	cmp	r3, #0
 802623c:	f340 818f 	ble.w	802655e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8026240:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026242:	142b      	asrs	r3, r5, #16
 8026244:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026248:	d406      	bmi.n	8026258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802624a:	4584      	cmp	ip, r0
 802624c:	da04      	bge.n	8026258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802624e:	2b00      	cmp	r3, #0
 8026250:	db02      	blt.n	8026258 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026252:	42bb      	cmp	r3, r7
 8026254:	f2c0 8184 	blt.w	8026560 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026258:	f11c 0c01 	adds.w	ip, ip, #1
 802625c:	f100 8172 	bmi.w	8026544 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026260:	4561      	cmp	r1, ip
 8026262:	f2c0 816f 	blt.w	8026544 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026266:	3301      	adds	r3, #1
 8026268:	f100 816c 	bmi.w	8026544 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802626c:	429a      	cmp	r2, r3
 802626e:	f2c0 8169 	blt.w	8026544 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8026272:	9b07      	ldr	r3, [sp, #28]
 8026274:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026276:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026278:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802627a:	2b00      	cmp	r3, #0
 802627c:	f340 818e 	ble.w	802659c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 8026280:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8026282:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026286:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802628a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802628e:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8026290:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026294:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8026296:	141b      	asrs	r3, r3, #16
 8026298:	f100 81d1 	bmi.w	802663e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802629c:	f101 38ff 	add.w	r8, r1, #4294967295
 80262a0:	4543      	cmp	r3, r8
 80262a2:	f280 81cc 	bge.w	802663e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80262a6:	f1bc 0f00 	cmp.w	ip, #0
 80262aa:	f2c0 81c8 	blt.w	802663e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80262ae:	f10e 38ff 	add.w	r8, lr, #4294967295
 80262b2:	45c4      	cmp	ip, r8
 80262b4:	f280 81c3 	bge.w	802663e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80262b8:	b209      	sxth	r1, r1
 80262ba:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80262bc:	fb0c 3301 	mla	r3, ip, r1, r3
 80262c0:	eb04 0803 	add.w	r8, r4, r3
 80262c4:	5ce3      	ldrb	r3, [r4, r3]
 80262c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80262ca:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80262ce:	2a00      	cmp	r2, #0
 80262d0:	f000 81aa 	beq.w	8026628 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 80262d4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80262d8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80262dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80262de:	0e24      	lsrs	r4, r4, #24
 80262e0:	9412      	str	r4, [sp, #72]	@ 0x48
 80262e2:	b178      	cbz	r0, 8026304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80262e4:	eb08 0c01 	add.w	ip, r8, r1
 80262e8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80262ec:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80262f0:	9108      	str	r1, [sp, #32]
 80262f2:	0e09      	lsrs	r1, r1, #24
 80262f4:	9110      	str	r1, [sp, #64]	@ 0x40
 80262f6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80262fa:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80262fe:	910c      	str	r1, [sp, #48]	@ 0x30
 8026300:	0e09      	lsrs	r1, r1, #24
 8026302:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026304:	b292      	uxth	r2, r2
 8026306:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026308:	b280      	uxth	r0, r0
 802630a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802630c:	fb02 f900 	mul.w	r9, r2, r0
 8026310:	0112      	lsls	r2, r2, #4
 8026312:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026316:	eba2 0809 	sub.w	r8, r2, r9
 802631a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802631e:	b280      	uxth	r0, r0
 8026320:	fa1f f888 	uxth.w	r8, r8
 8026324:	1a12      	subs	r2, r2, r0
 8026326:	fb08 f101 	mul.w	r1, r8, r1
 802632a:	b292      	uxth	r2, r2
 802632c:	fb02 110e 	mla	r1, r2, lr, r1
 8026330:	fb00 1104 	mla	r1, r0, r4, r1
 8026334:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026336:	fb09 1104 	mla	r1, r9, r4, r1
 802633a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802633e:	2900      	cmp	r1, #0
 8026340:	f000 80f5 	beq.w	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026344:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026348:	d01b      	beq.n	8026382 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802634a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802634e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026352:	fb0e fa0a 	mul.w	sl, lr, sl
 8026356:	fb0e fe03 	mul.w	lr, lr, r3
 802635a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802635e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026362:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026366:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802636a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802636e:	4453      	add	r3, sl
 8026370:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026374:	0a1b      	lsrs	r3, r3, #8
 8026376:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802637a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802637e:	ea43 030c 	orr.w	r3, r3, ip
 8026382:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026384:	2cff      	cmp	r4, #255	@ 0xff
 8026386:	d021      	beq.n	80263cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026388:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802638a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802638e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026390:	fb04 fb0b 	mul.w	fp, r4, fp
 8026394:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026396:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802639a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802639c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263a0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80263a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80263a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263ac:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80263b0:	44de      	add	lr, fp
 80263b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80263b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80263ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80263be:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263c2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80263c6:	ea4e 040a 	orr.w	r4, lr, sl
 80263ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80263cc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80263ce:	2cff      	cmp	r4, #255	@ 0xff
 80263d0:	d021      	beq.n	8026416 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80263d2:	9c08      	ldr	r4, [sp, #32]
 80263d4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80263d8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80263da:	fb04 fb0b 	mul.w	fp, r4, fp
 80263de:	9c08      	ldr	r4, [sp, #32]
 80263e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80263e4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80263e6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80263ea:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80263ee:	fb04 fa0a 	mul.w	sl, r4, sl
 80263f2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80263f6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80263fa:	44de      	add	lr, fp
 80263fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026400:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026404:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026408:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802640c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026410:	ea4e 040a 	orr.w	r4, lr, sl
 8026414:	9408      	str	r4, [sp, #32]
 8026416:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026418:	2cff      	cmp	r4, #255	@ 0xff
 802641a:	d021      	beq.n	8026460 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 802641c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802641e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026422:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026424:	fb04 fb0b 	mul.w	fp, r4, fp
 8026428:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802642a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802642e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026430:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026434:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026438:	fb04 fa0a 	mul.w	sl, r4, sl
 802643c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026440:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026444:	44de      	add	lr, fp
 8026446:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802644a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802644e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026452:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026456:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802645a:	ea4e 040a 	orr.w	r4, lr, sl
 802645e:	940c      	str	r4, [sp, #48]	@ 0x30
 8026460:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026462:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8026466:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802646a:	43c9      	mvns	r1, r1
 802646c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026470:	9c08      	ldr	r4, [sp, #32]
 8026472:	fb08 fc0c 	mul.w	ip, r8, ip
 8026476:	fb02 cc0e 	mla	ip, r2, lr, ip
 802647a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802647e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8026480:	fb00 cc0e 	mla	ip, r0, lr, ip
 8026484:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026488:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802648a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802648e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026492:	fb08 f80e 	mul.w	r8, r8, lr
 8026496:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802649a:	fa5f fe81 	uxtb.w	lr, r1
 802649e:	fb02 8303 	mla	r3, r2, r3, r8
 80264a2:	9a08      	ldr	r2, [sp, #32]
 80264a4:	f8b7 8000 	ldrh.w	r8, [r7]
 80264a8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80264ac:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80264b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80264b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80264b6:	fb00 330a 	mla	r3, r0, sl, r3
 80264ba:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80264be:	ea4f 2228 	mov.w	r2, r8, asr #8
 80264c2:	fb09 3900 	mla	r9, r9, r0, r3
 80264c6:	ea4f 00e8 	mov.w	r0, r8, asr #3
 80264ca:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80264ce:	b2c9      	uxtb	r1, r1
 80264d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80264d4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80264d8:	fb02 f20e 	mul.w	r2, r2, lr
 80264dc:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80264e0:	fb00 f00e 	mul.w	r0, r0, lr
 80264e4:	1c53      	adds	r3, r2, #1
 80264e6:	fb01 f10e 	mul.w	r1, r1, lr
 80264ea:	ea4c 0c09 	orr.w	ip, ip, r9
 80264ee:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80264f2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80264f6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80264fa:	4a60      	ldr	r2, [pc, #384]	@ (802667c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 80264fc:	b2db      	uxtb	r3, r3
 80264fe:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8026502:	1c43      	adds	r3, r0, #1
 8026504:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8026508:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802650c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026510:	00db      	lsls	r3, r3, #3
 8026512:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026516:	4313      	orrs	r3, r2
 8026518:	1c4a      	adds	r2, r1, #1
 802651a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802651e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026522:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8026526:	ea4c 0c03 	orr.w	ip, ip, r3
 802652a:	f8a7 c000 	strh.w	ip, [r7]
 802652e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8026530:	3702      	adds	r7, #2
 8026532:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026534:	441a      	add	r2, r3
 8026536:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026538:	441d      	add	r5, r3
 802653a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802653c:	922d      	str	r2, [sp, #180]	@ 0xb4
 802653e:	3b01      	subs	r3, #1
 8026540:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026542:	e699      	b.n	8026278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8026544:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8026546:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026548:	441c      	add	r4, r3
 802654a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802654c:	441d      	add	r5, r3
 802654e:	9b07      	ldr	r3, [sp, #28]
 8026550:	942d      	str	r4, [sp, #180]	@ 0xb4
 8026552:	3b01      	subs	r3, #1
 8026554:	9307      	str	r3, [sp, #28]
 8026556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026558:	3302      	adds	r3, #2
 802655a:	930a      	str	r3, [sp, #40]	@ 0x28
 802655c:	e66c      	b.n	8026238 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802655e:	d024      	beq.n	80265aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8026560:	9b07      	ldr	r3, [sp, #28]
 8026562:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8026564:	3b01      	subs	r3, #1
 8026566:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026568:	fb00 4003 	mla	r0, r0, r3, r4
 802656c:	1400      	asrs	r0, r0, #16
 802656e:	f53f ae80 	bmi.w	8026272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026572:	3901      	subs	r1, #1
 8026574:	4288      	cmp	r0, r1
 8026576:	f6bf ae7c 	bge.w	8026272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802657a:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 802657c:	fb01 5303 	mla	r3, r1, r3, r5
 8026580:	141b      	asrs	r3, r3, #16
 8026582:	f53f ae76 	bmi.w	8026272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8026586:	3a01      	subs	r2, #1
 8026588:	4293      	cmp	r3, r2
 802658a:	f6bf ae72 	bge.w	8026272 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802658e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8026592:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8026596:	f1bb 0f00 	cmp.w	fp, #0
 802659a:	dc71      	bgt.n	8026680 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802659c:	9b07      	ldr	r3, [sp, #28]
 802659e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80265a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80265a4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80265a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80265aa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80265ac:	2b00      	cmp	r3, #0
 80265ae:	f340 81af 	ble.w	8026910 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80265b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80265b6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80265b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80265bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80265c0:	eef0 6a48 	vmov.f32	s13, s16
 80265c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80265c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80265cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265d0:	edcd 6a2d 	vstr	s13, [sp, #180]	@ 0xb4
 80265d4:	eef0 6a68 	vmov.f32	s13, s17
 80265d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265dc:	ee16 5a90 	vmov	r5, s13
 80265e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80265e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80265e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80265ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80265f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80265f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80265f8:	ee18 2a10 	vmov	r2, s16
 80265fc:	eeb0 8a47 	vmov.f32	s16, s14
 8026600:	fb92 f3f3 	sdiv	r3, r2, r3
 8026604:	ee18 2a90 	vmov	r2, s17
 8026608:	932f      	str	r3, [sp, #188]	@ 0xbc
 802660a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802660c:	eef0 8a67 	vmov.f32	s17, s15
 8026610:	fb92 f3f3 	sdiv	r3, r2, r3
 8026614:	9330      	str	r3, [sp, #192]	@ 0xc0
 8026616:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026618:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802661a:	3b01      	subs	r3, #1
 802661c:	9316      	str	r3, [sp, #88]	@ 0x58
 802661e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026620:	bf08      	it	eq
 8026622:	4613      	moveq	r3, r2
 8026624:	9307      	str	r3, [sp, #28]
 8026626:	e5f9      	b.n	802621c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8026628:	2800      	cmp	r0, #0
 802662a:	f43f ae6b 	beq.w	8026304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802662e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026632:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026636:	9108      	str	r1, [sp, #32]
 8026638:	0e09      	lsrs	r1, r1, #24
 802663a:	9110      	str	r1, [sp, #64]	@ 0x40
 802663c:	e662      	b.n	8026304 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 802663e:	f113 0801 	adds.w	r8, r3, #1
 8026642:	f53f af74 	bmi.w	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026646:	4541      	cmp	r1, r8
 8026648:	f6ff af71 	blt.w	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802664c:	f11c 0801 	adds.w	r8, ip, #1
 8026650:	f53f af6d 	bmi.w	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8026654:	45c6      	cmp	lr, r8
 8026656:	f6ff af6a 	blt.w	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802665a:	b209      	sxth	r1, r1
 802665c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8026660:	fa0f f38e 	sxth.w	r3, lr
 8026664:	9100      	str	r1, [sp, #0]
 8026666:	4639      	mov	r1, r7
 8026668:	9301      	str	r3, [sp, #4]
 802666a:	4633      	mov	r3, r6
 802666c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8026670:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026672:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8026674:	f7ff fc4c 	bl	8025f10 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8026678:	e759      	b.n	802652e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 802667a:	bf00      	nop
 802667c:	fffff800 	.word	0xfffff800
 8026680:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8026682:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026686:	9c2d      	ldr	r4, [sp, #180]	@ 0xb4
 8026688:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802668c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 802668e:	1427      	asrs	r7, r4, #16
 8026690:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026692:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026696:	142b      	asrs	r3, r5, #16
 8026698:	fb01 7303 	mla	r3, r1, r3, r7
 802669c:	18e7      	adds	r7, r4, r3
 802669e:	5ce3      	ldrb	r3, [r4, r3]
 80266a0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80266a4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80266a8:	2a00      	cmp	r2, #0
 80266aa:	f000 8127 	beq.w	80268fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 80266ae:	f897 e001 	ldrb.w	lr, [r7, #1]
 80266b2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80266b6:	940d      	str	r4, [sp, #52]	@ 0x34
 80266b8:	0e24      	lsrs	r4, r4, #24
 80266ba:	9414      	str	r4, [sp, #80]	@ 0x50
 80266bc:	b170      	cbz	r0, 80266dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80266be:	eb07 0e01 	add.w	lr, r7, r1
 80266c2:	5c79      	ldrb	r1, [r7, r1]
 80266c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80266ca:	0e09      	lsrs	r1, r1, #24
 80266cc:	9111      	str	r1, [sp, #68]	@ 0x44
 80266ce:	f89e 1001 	ldrb.w	r1, [lr, #1]
 80266d2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80266d6:	910e      	str	r1, [sp, #56]	@ 0x38
 80266d8:	0e09      	lsrs	r1, r1, #24
 80266da:	9115      	str	r1, [sp, #84]	@ 0x54
 80266dc:	b292      	uxth	r2, r2
 80266de:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80266e0:	b280      	uxth	r0, r0
 80266e2:	fb02 f800 	mul.w	r8, r2, r0
 80266e6:	0112      	lsls	r2, r2, #4
 80266e8:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80266ec:	eba2 0e08 	sub.w	lr, r2, r8
 80266f0:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80266f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80266f6:	b280      	uxth	r0, r0
 80266f8:	fa1f fe8e 	uxth.w	lr, lr
 80266fc:	1a09      	subs	r1, r1, r0
 80266fe:	fb0e f202 	mul.w	r2, lr, r2
 8026702:	b289      	uxth	r1, r1
 8026704:	fb01 220c 	mla	r2, r1, ip, r2
 8026708:	fb00 2204 	mla	r2, r0, r4, r2
 802670c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802670e:	fb08 2204 	mla	r2, r8, r4, r2
 8026712:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8026716:	2a00      	cmp	r2, #0
 8026718:	f000 80e5 	beq.w	80268e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802671c:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8026720:	d019      	beq.n	8026756 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 8026722:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026726:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802672a:	fb0c fa0a 	mul.w	sl, ip, sl
 802672e:	fb0c fc03 	mul.w	ip, ip, r3
 8026732:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026736:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802673a:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802673e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026742:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8026746:	4453      	add	r3, sl
 8026748:	0a3f      	lsrs	r7, r7, #8
 802674a:	0a1b      	lsrs	r3, r3, #8
 802674c:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026750:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026754:	433b      	orrs	r3, r7
 8026756:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026758:	2cff      	cmp	r4, #255	@ 0xff
 802675a:	d020      	beq.n	802679e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 802675c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802675e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026762:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026764:	4367      	muls	r7, r4
 8026766:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026768:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802676c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026770:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026772:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026776:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802677a:	fb04 fa0a 	mul.w	sl, r4, sl
 802677e:	44bc      	add	ip, r7
 8026780:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026784:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026788:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802678c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026790:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026794:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026798:	ea4c 040a 	orr.w	r4, ip, sl
 802679c:	940d      	str	r4, [sp, #52]	@ 0x34
 802679e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267a0:	2cff      	cmp	r4, #255	@ 0xff
 80267a2:	d020      	beq.n	80267e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 80267a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80267a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80267aa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267ac:	4367      	muls	r7, r4
 80267ae:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80267b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80267b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80267ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80267be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80267c6:	44bc      	add	ip, r7
 80267c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80267cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80267d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80267d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80267d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80267dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80267e0:	ea4c 040a 	orr.w	r4, ip, sl
 80267e4:	9409      	str	r4, [sp, #36]	@ 0x24
 80267e6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80267e8:	2cff      	cmp	r4, #255	@ 0xff
 80267ea:	d020      	beq.n	802682e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 80267ec:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80267ee:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80267f2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80267f4:	4367      	muls	r7, r4
 80267f6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80267f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80267fc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026800:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026802:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026806:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802680a:	fb04 fa0a 	mul.w	sl, r4, sl
 802680e:	44bc      	add	ip, r7
 8026810:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026814:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026818:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802681c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026820:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026824:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026828:	ea4c 040a 	orr.w	r4, ip, sl
 802682c:	940e      	str	r4, [sp, #56]	@ 0x38
 802682e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026830:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026834:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026838:	43d2      	mvns	r2, r2
 802683a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802683e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8026840:	b2d2      	uxtb	r2, r2
 8026842:	fb0e f707 	mul.w	r7, lr, r7
 8026846:	fb01 770c 	mla	r7, r1, ip, r7
 802684a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802684e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026850:	fb00 770c 	mla	r7, r0, ip, r7
 8026854:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026858:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802685a:	fb08 770c 	mla	r7, r8, ip, r7
 802685e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026862:	fb0e fe0c 	mul.w	lr, lr, ip
 8026866:	0a3f      	lsrs	r7, r7, #8
 8026868:	fb01 e303 	mla	r3, r1, r3, lr
 802686c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802686e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026872:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8026876:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8026878:	fb00 330a 	mla	r3, r0, sl, r3
 802687c:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8026880:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026884:	f8b9 3000 	ldrh.w	r3, [r9]
 8026888:	1218      	asrs	r0, r3, #8
 802688a:	10d9      	asrs	r1, r3, #3
 802688c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026890:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026894:	00db      	lsls	r3, r3, #3
 8026896:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802689a:	4350      	muls	r0, r2
 802689c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80268a0:	b2db      	uxtb	r3, r3
 80268a2:	4351      	muls	r1, r2
 80268a4:	ea47 070c 	orr.w	r7, r7, ip
 80268a8:	4353      	muls	r3, r2
 80268aa:	1c42      	adds	r2, r0, #1
 80268ac:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80268b0:	0c3a      	lsrs	r2, r7, #16
 80268b2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80268b6:	4a19      	ldr	r2, [pc, #100]	@ (802691c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 80268b8:	b2c0      	uxtb	r0, r0
 80268ba:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80268be:	1c4a      	adds	r2, r1, #1
 80268c0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80268c4:	0a3a      	lsrs	r2, r7, #8
 80268c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80268ca:	00c9      	lsls	r1, r1, #3
 80268cc:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80268d0:	4301      	orrs	r1, r0
 80268d2:	1c58      	adds	r0, r3, #1
 80268d4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80268d8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80268dc:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 80268e0:	4308      	orrs	r0, r1
 80268e2:	f8a9 0000 	strh.w	r0, [r9]
 80268e6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80268e8:	f109 0902 	add.w	r9, r9, #2
 80268ec:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80268ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80268f2:	441a      	add	r2, r3
 80268f4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80268f6:	922d      	str	r2, [sp, #180]	@ 0xb4
 80268f8:	441d      	add	r5, r3
 80268fa:	e64c      	b.n	8026596 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80268fc:	2800      	cmp	r0, #0
 80268fe:	f43f aeed 	beq.w	80266dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8026902:	5c79      	ldrb	r1, [r7, r1]
 8026904:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026908:	9109      	str	r1, [sp, #36]	@ 0x24
 802690a:	0e09      	lsrs	r1, r1, #24
 802690c:	9111      	str	r1, [sp, #68]	@ 0x44
 802690e:	e6e5      	b.n	80266dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 8026910:	b01b      	add	sp, #108	@ 0x6c
 8026912:	ecbd 8b08 	vpop	{d8-d11}
 8026916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802691a:	bf00      	nop
 802691c:	fffff800 	.word	0xfffff800

08026920 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8026920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026924:	b085      	sub	sp, #20
 8026926:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 802692a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802692e:	9103      	str	r1, [sp, #12]
 8026930:	2d00      	cmp	r5, #0
 8026932:	fb05 7106 	mla	r1, r5, r6, r7
 8026936:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 802693a:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802693e:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 8026942:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 8026946:	eb03 0901 	add.w	r9, r3, r1
 802694a:	9401      	str	r4, [sp, #4]
 802694c:	f2c0 80c0 	blt.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8026950:	45a8      	cmp	r8, r5
 8026952:	f340 80bd 	ble.w	8026ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8026956:	2f00      	cmp	r7, #0
 8026958:	f2c0 80b6 	blt.w	8026ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802695c:	42be      	cmp	r6, r7
 802695e:	f340 80b3 	ble.w	8026ac8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8026962:	f813 c001 	ldrb.w	ip, [r3, r1]
 8026966:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802696a:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802696e:	d019      	beq.n	80269a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 8026970:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 8026974:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026978:	435a      	muls	r2, r3
 802697a:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 802697e:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8026982:	fb0c f403 	mul.w	r4, ip, r3
 8026986:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 802698a:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 802698e:	441a      	add	r2, r3
 8026990:	f104 0320 	add.w	r3, r4, #32
 8026994:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8026998:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 802699c:	0a1b      	lsrs	r3, r3, #8
 802699e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80269a2:	4319      	orrs	r1, r3
 80269a4:	b289      	uxth	r1, r1
 80269a6:	1c7b      	adds	r3, r7, #1
 80269a8:	f100 8097 	bmi.w	8026ada <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80269ac:	429e      	cmp	r6, r3
 80269ae:	f340 8094 	ble.w	8026ada <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 80269b2:	2800      	cmp	r0, #0
 80269b4:	f000 8094 	beq.w	8026ae0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 80269b8:	f899 4001 	ldrb.w	r4, [r9, #1]
 80269bc:	9b01      	ldr	r3, [sp, #4]
 80269be:	2cff      	cmp	r4, #255	@ 0xff
 80269c0:	885b      	ldrh	r3, [r3, #2]
 80269c2:	d01b      	beq.n	80269fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 80269c4:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 80269c8:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80269cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80269d0:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 80269d4:	fb0a f202 	mul.w	r2, sl, r2
 80269d8:	fb04 fa03 	mul.w	sl, r4, r3
 80269dc:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80269e0:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 80269e4:	441a      	add	r2, r3
 80269e6:	f10a 0320 	add.w	r3, sl, #32
 80269ea:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80269ee:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80269f2:	0a1b      	lsrs	r3, r3, #8
 80269f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80269f8:	ea4b 0303 	orr.w	r3, fp, r3
 80269fc:	b29b      	uxth	r3, r3
 80269fe:	3501      	adds	r5, #1
 8026a00:	d474      	bmi.n	8026aec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8026a02:	45a8      	cmp	r8, r5
 8026a04:	dd72      	ble.n	8026aec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 8026a06:	f1be 0f00 	cmp.w	lr, #0
 8026a0a:	f000 8120 	beq.w	8026c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 8026a0e:	2f00      	cmp	r7, #0
 8026a10:	db69      	blt.n	8026ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8026a12:	42be      	cmp	r6, r7
 8026a14:	dd67      	ble.n	8026ae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 8026a16:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026a1a:	9a01      	ldr	r2, [sp, #4]
 8026a1c:	2dff      	cmp	r5, #255	@ 0xff
 8026a1e:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 8026a22:	d01c      	beq.n	8026a5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 8026a24:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 8026a28:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026a2c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8026a30:	fb08 f802 	mul.w	r8, r8, r2
 8026a34:	fb05 fa0b 	mul.w	sl, r5, fp
 8026a38:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8026a3c:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026a40:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026a44:	4490      	add	r8, r2
 8026a46:	f10a 0220 	add.w	r2, sl, #32
 8026a4a:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026a4e:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 8026a52:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a56:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8026a5a:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026a5e:	fa1f fb8b 	uxth.w	fp, fp
 8026a62:	3701      	adds	r7, #1
 8026a64:	d447      	bmi.n	8026af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026a66:	42be      	cmp	r6, r7
 8026a68:	dd45      	ble.n	8026af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8026a6a:	2800      	cmp	r0, #0
 8026a6c:	d046      	beq.n	8026afc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 8026a6e:	3601      	adds	r6, #1
 8026a70:	9a01      	ldr	r2, [sp, #4]
 8026a72:	f819 7006 	ldrb.w	r7, [r9, r6]
 8026a76:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026a7a:	2fff      	cmp	r7, #255	@ 0xff
 8026a7c:	d01a      	beq.n	8026ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 8026a7e:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 8026a82:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8026a86:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026a8a:	fb08 f806 	mul.w	r8, r8, r6
 8026a8e:	fb07 f902 	mul.w	r9, r7, r2
 8026a92:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8026a96:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8026a9a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026a9e:	44b0      	add	r8, r6
 8026aa0:	f109 0620 	add.w	r6, r9, #32
 8026aa4:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8026aa8:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8026aac:	0a36      	lsrs	r6, r6, #8
 8026aae:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8026ab2:	4332      	orrs	r2, r6
 8026ab4:	b292      	uxth	r2, r2
 8026ab6:	280f      	cmp	r0, #15
 8026ab8:	d922      	bls.n	8026b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8026aba:	4b69      	ldr	r3, [pc, #420]	@ (8026c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8026abc:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8026ac0:	4a68      	ldr	r2, [pc, #416]	@ (8026c64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 8026ac2:	4869      	ldr	r0, [pc, #420]	@ (8026c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8026ac4:	f004 fa50 	bl	802af68 <__assert_func>
 8026ac8:	f04f 0c00 	mov.w	ip, #0
 8026acc:	4661      	mov	r1, ip
 8026ace:	e76a      	b.n	80269a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 8026ad0:	2400      	movs	r4, #0
 8026ad2:	46a4      	mov	ip, r4
 8026ad4:	4623      	mov	r3, r4
 8026ad6:	4621      	mov	r1, r4
 8026ad8:	e791      	b.n	80269fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026ada:	2400      	movs	r4, #0
 8026adc:	4623      	mov	r3, r4
 8026ade:	e78e      	b.n	80269fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026ae0:	4604      	mov	r4, r0
 8026ae2:	4603      	mov	r3, r0
 8026ae4:	e78b      	b.n	80269fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8026ae6:	2500      	movs	r5, #0
 8026ae8:	46ab      	mov	fp, r5
 8026aea:	e7ba      	b.n	8026a62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8026aec:	2700      	movs	r7, #0
 8026aee:	463d      	mov	r5, r7
 8026af0:	463a      	mov	r2, r7
 8026af2:	46bb      	mov	fp, r7
 8026af4:	e7df      	b.n	8026ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026af6:	2700      	movs	r7, #0
 8026af8:	463a      	mov	r2, r7
 8026afa:	e7dc      	b.n	8026ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 8026afc:	4607      	mov	r7, r0
 8026afe:	4602      	mov	r2, r0
 8026b00:	f1be 0f0f 	cmp.w	lr, #15
 8026b04:	d8d9      	bhi.n	8026aba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026b06:	b286      	uxth	r6, r0
 8026b08:	fa1f f98e 	uxth.w	r9, lr
 8026b0c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026b10:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8026b14:	fb06 f809 	mul.w	r8, r6, r9
 8026b18:	0136      	lsls	r6, r6, #4
 8026b1a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b1e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026b22:	9601      	str	r6, [sp, #4]
 8026b24:	ea4a 0101 	orr.w	r1, sl, r1
 8026b28:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026b2c:	fa1f f689 	uxth.w	r6, r9
 8026b30:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8026b34:	fb10 f90e 	smulbb	r9, r0, lr
 8026b38:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b3c:	9602      	str	r6, [sp, #8]
 8026b3e:	460e      	mov	r6, r1
 8026b40:	ea4f 09e9 	mov.w	r9, r9, asr #3
 8026b44:	f1ce 0110 	rsb	r1, lr, #16
 8026b48:	ea4a 0303 	orr.w	r3, sl, r3
 8026b4c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026b50:	1a09      	subs	r1, r1, r0
 8026b52:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8026b56:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b5a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026b5e:	4343      	muls	r3, r0
 8026b60:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8026b64:	9801      	ldr	r0, [sp, #4]
 8026b66:	ea4a 0202 	orr.w	r2, sl, r2
 8026b6a:	fb01 3106 	mla	r1, r1, r6, r3
 8026b6e:	9e02      	ldr	r6, [sp, #8]
 8026b70:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8026b74:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8026b78:	fb09 1302 	mla	r3, r9, r2, r1
 8026b7c:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 8026b80:	1b80      	subs	r0, r0, r6
 8026b82:	9e01      	ldr	r6, [sp, #4]
 8026b84:	9a03      	ldr	r2, [sp, #12]
 8026b86:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026b8a:	eba6 0608 	sub.w	r6, r6, r8
 8026b8e:	b280      	uxth	r0, r0
 8026b90:	8811      	ldrh	r1, [r2, #0]
 8026b92:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026b96:	b2b6      	uxth	r6, r6
 8026b98:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8026b9c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026ba0:	4374      	muls	r4, r6
 8026ba2:	b292      	uxth	r2, r2
 8026ba4:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8026ba8:	fb0c 4400 	mla	r4, ip, r0, r4
 8026bac:	9802      	ldr	r0, [sp, #8]
 8026bae:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8026bb2:	fb00 4505 	mla	r5, r0, r5, r4
 8026bb6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026bba:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026bbe:	1208      	asrs	r0, r1, #8
 8026bc0:	fb08 5707 	mla	r7, r8, r7, r5
 8026bc4:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026bc8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8026bcc:	10cd      	asrs	r5, r1, #3
 8026bce:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8026bd2:	ea43 0e0e 	orr.w	lr, r3, lr
 8026bd6:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8026bda:	4357      	muls	r7, r2
 8026bdc:	fa1f f38e 	uxth.w	r3, lr
 8026be0:	f107 0801 	add.w	r8, r7, #1
 8026be4:	121c      	asrs	r4, r3, #8
 8026be6:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8026bea:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8026bee:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8026bf2:	b2ff      	uxtb	r7, r7
 8026bf4:	fb10 f007 	smulbb	r0, r0, r7
 8026bf8:	fb15 f507 	smulbb	r5, r5, r7
 8026bfc:	fb04 0402 	mla	r4, r4, r2, r0
 8026c00:	10d8      	asrs	r0, r3, #3
 8026c02:	00db      	lsls	r3, r3, #3
 8026c04:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8026c08:	b2a4      	uxth	r4, r4
 8026c0a:	fb00 5002 	mla	r0, r0, r2, r5
 8026c0e:	b2dd      	uxtb	r5, r3
 8026c10:	00cb      	lsls	r3, r1, #3
 8026c12:	b280      	uxth	r0, r0
 8026c14:	b2db      	uxtb	r3, r3
 8026c16:	fb13 f307 	smulbb	r3, r3, r7
 8026c1a:	fb05 3202 	mla	r2, r5, r2, r3
 8026c1e:	1c63      	adds	r3, r4, #1
 8026c20:	b292      	uxth	r2, r2
 8026c22:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8026c26:	1c53      	adds	r3, r2, #1
 8026c28:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8026c2c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026c30:	1c42      	adds	r2, r0, #1
 8026c32:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026c36:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026c3a:	9a03      	ldr	r2, [sp, #12]
 8026c3c:	0940      	lsrs	r0, r0, #5
 8026c3e:	4323      	orrs	r3, r4
 8026c40:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026c44:	4303      	orrs	r3, r0
 8026c46:	8013      	strh	r3, [r2, #0]
 8026c48:	b005      	add	sp, #20
 8026c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c4e:	280f      	cmp	r0, #15
 8026c50:	f63f af33 	bhi.w	8026aba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8026c54:	4677      	mov	r7, lr
 8026c56:	4675      	mov	r5, lr
 8026c58:	4672      	mov	r2, lr
 8026c5a:	46f3      	mov	fp, lr
 8026c5c:	e753      	b.n	8026b06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8026c5e:	bf00      	nop
 8026c60:	08030109 	.word	0x08030109
 8026c64:	080306d6 	.word	0x080306d6
 8026c68:	0803018d 	.word	0x0803018d

08026c6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026c70:	ed2d 8b08 	vpush	{d8-d11}
 8026c74:	b097      	sub	sp, #92	@ 0x5c
 8026c76:	eeb0 aa40 	vmov.f32	s20, s0
 8026c7a:	eef0 9a60 	vmov.f32	s19, s1
 8026c7e:	9214      	str	r2, [sp, #80]	@ 0x50
 8026c80:	eeb0 9a41 	vmov.f32	s18, s2
 8026c84:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026c86:	eeb0 8a62 	vmov.f32	s16, s5
 8026c8a:	9308      	str	r3, [sp, #32]
 8026c8c:	eef0 8a43 	vmov.f32	s17, s6
 8026c90:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 8026c94:	eef0 ba44 	vmov.f32	s23, s8
 8026c98:	9015      	str	r0, [sp, #84]	@ 0x54
 8026c9a:	eeb0 ba64 	vmov.f32	s22, s9
 8026c9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8026ca0:	eef0 aa45 	vmov.f32	s21, s10
 8026ca4:	6850      	ldr	r0, [r2, #4]
 8026ca6:	9111      	str	r1, [sp, #68]	@ 0x44
 8026ca8:	6812      	ldr	r2, [r2, #0]
 8026caa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8026cae:	fb00 1303 	mla	r3, r0, r3, r1
 8026cb2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026cb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8026cb8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026cba:	681b      	ldr	r3, [r3, #0]
 8026cbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026cbe:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026cc0:	685b      	ldr	r3, [r3, #4]
 8026cc2:	930c      	str	r3, [sp, #48]	@ 0x30
 8026cc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8026cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8026cca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8026ccc:	2b00      	cmp	r3, #0
 8026cce:	dc03      	bgt.n	8026cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026cd0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8026cd2:	2b00      	cmp	r3, #0
 8026cd4:	f340 83cd 	ble.w	8027472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8026cd8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026cda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026cde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026ce2:	1e48      	subs	r0, r1, #1
 8026ce4:	1e55      	subs	r5, r2, #1
 8026ce6:	9b08      	ldr	r3, [sp, #32]
 8026ce8:	2b00      	cmp	r3, #0
 8026cea:	f340 81a5 	ble.w	8027038 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8026cee:	9e29      	ldr	r6, [sp, #164]	@ 0xa4
 8026cf0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026cf2:	1436      	asrs	r6, r6, #16
 8026cf4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8026cf8:	d406      	bmi.n	8026d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026cfa:	4286      	cmp	r6, r0
 8026cfc:	da04      	bge.n	8026d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026cfe:	2b00      	cmp	r3, #0
 8026d00:	db02      	blt.n	8026d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8026d02:	42ab      	cmp	r3, r5
 8026d04:	f2c0 8199 	blt.w	802703a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8026d08:	3601      	adds	r6, #1
 8026d0a:	f100 8186 	bmi.w	802701a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026d0e:	42b1      	cmp	r1, r6
 8026d10:	f2c0 8183 	blt.w	802701a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026d14:	3301      	adds	r3, #1
 8026d16:	f100 8180 	bmi.w	802701a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026d1a:	429a      	cmp	r2, r3
 8026d1c:	f2c0 817d 	blt.w	802701a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8026d20:	9b08      	ldr	r3, [sp, #32]
 8026d22:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8026d26:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8026d28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8026d2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8026d2c:	2b00      	cmp	r3, #0
 8026d2e:	f340 81a6 	ble.w	802707e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026d32:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026d34:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8026d36:	1418      	asrs	r0, r3, #16
 8026d38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026d3a:	142d      	asrs	r5, r5, #16
 8026d3c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026d40:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8026d42:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026d46:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026d48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026d4c:	f100 81fa 	bmi.w	8027144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d50:	f102 3eff 	add.w	lr, r2, #4294967295
 8026d54:	4575      	cmp	r5, lr
 8026d56:	f280 81f5 	bge.w	8027144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d5a:	2800      	cmp	r0, #0
 8026d5c:	f2c0 81f2 	blt.w	8027144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d60:	f103 3eff 	add.w	lr, r3, #4294967295
 8026d64:	4570      	cmp	r0, lr
 8026d66:	f280 81ed 	bge.w	8027144 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8026d6a:	b212      	sxth	r2, r2
 8026d6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026d6e:	fa1f fe81 	uxth.w	lr, r1
 8026d72:	fb00 5002 	mla	r0, r0, r2, r5
 8026d76:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026d7a:	eb03 0a00 	add.w	sl, r3, r0
 8026d7e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8026d82:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8026d86:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026d8a:	b29b      	uxth	r3, r3
 8026d8c:	f1bc 0f00 	cmp.w	ip, #0
 8026d90:	f000 81bb 	beq.w	802710a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8026d94:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026d98:	eb0a 0b02 	add.w	fp, sl, r2
 8026d9c:	fa1f fa8c 	uxth.w	sl, ip
 8026da0:	940d      	str	r4, [sp, #52]	@ 0x34
 8026da2:	fb0a fe0e 	mul.w	lr, sl, lr
 8026da6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026daa:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026dae:	eba5 050e 	sub.w	r5, r5, lr
 8026db2:	940e      	str	r4, [sp, #56]	@ 0x38
 8026db4:	fa1f fa8a 	uxth.w	sl, sl
 8026db8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026dba:	b2ad      	uxth	r5, r5
 8026dbc:	eba3 030a 	sub.w	r3, r3, sl
 8026dc0:	fb08 f505 	mul.w	r5, r8, r5
 8026dc4:	b29b      	uxth	r3, r3
 8026dc6:	fb09 5303 	mla	r3, r9, r3, r5
 8026dca:	fb0a 3304 	mla	r3, sl, r4, r3
 8026dce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026dd0:	fb0e 3304 	mla	r3, lr, r4, r3
 8026dd4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026dd8:	2b00      	cmp	r3, #0
 8026dda:	f000 8111 	beq.w	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026dde:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026de0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8026de4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8026de8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8026dec:	f000 8192 	beq.w	8027114 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8026df0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026df4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026df8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026dfc:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e00:	fb09 f000 	mul.w	r0, r9, r0
 8026e04:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8026e08:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026e0c:	f100 0b20 	add.w	fp, r0, #32
 8026e10:	44ce      	add	lr, r9
 8026e12:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8026e16:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e1a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e1e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8026e22:	ea4e 0909 	orr.w	r9, lr, r9
 8026e26:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8026e2a:	8868      	ldrh	r0, [r5, #2]
 8026e2c:	d019      	beq.n	8026e62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026e2e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8026e32:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026e36:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026e3a:	fb0a fe0e 	mul.w	lr, sl, lr
 8026e3e:	fb08 f800 	mul.w	r8, r8, r0
 8026e42:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026e46:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8026e4a:	f108 0b20 	add.w	fp, r8, #32
 8026e4e:	4486      	add	lr, r0
 8026e50:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026e54:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026e58:	0a00      	lsrs	r0, r0, #8
 8026e5a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8026e5e:	ea4e 0000 	orr.w	r0, lr, r0
 8026e62:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026e66:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8026e6a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026e6e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8026e72:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8026e76:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026e7a:	ea4e 0909 	orr.w	r9, lr, r9
 8026e7e:	ea4a 0000 	orr.w	r0, sl, r0
 8026e82:	f1bc 0f00 	cmp.w	ip, #0
 8026e86:	f000 8147 	beq.w	8027118 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8026e8a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8026e8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026e90:	3a01      	subs	r2, #1
 8026e92:	2cff      	cmp	r4, #255	@ 0xff
 8026e94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026e98:	f102 0202 	add.w	r2, r2, #2
 8026e9c:	eb05 0e02 	add.w	lr, r5, r2
 8026ea0:	5aaa      	ldrh	r2, [r5, r2]
 8026ea2:	d018      	beq.n	8026ed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026ea4:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8026ea8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026eac:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026eb0:	fb04 fa02 	mul.w	sl, r4, r2
 8026eb4:	fb08 f805 	mul.w	r8, r8, r5
 8026eb8:	f10a 0520 	add.w	r5, sl, #32
 8026ebc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8026ec0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026ec4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8026ec8:	4442      	add	r2, r8
 8026eca:	0a2d      	lsrs	r5, r5, #8
 8026ecc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8026ed0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026ed4:	432a      	orrs	r2, r5
 8026ed6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026ed8:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8026edc:	2cff      	cmp	r4, #255	@ 0xff
 8026ede:	d01a      	beq.n	8026f16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8026ee0:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8026ee4:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8026ee8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026eec:	fb04 fa05 	mul.w	sl, r4, r5
 8026ef0:	fb08 f80e 	mul.w	r8, r8, lr
 8026ef4:	f10a 0e20 	add.w	lr, sl, #32
 8026ef8:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8026efc:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8026f00:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8026f04:	4445      	add	r5, r8
 8026f06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026f0a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8026f0e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8026f12:	ea45 050e 	orr.w	r5, r5, lr
 8026f16:	fb1c fe01 	smulbb	lr, ip, r1
 8026f1a:	f1cc 0810 	rsb	r8, ip, #16
 8026f1e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026f22:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8026f26:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026f2a:	eba8 0801 	sub.w	r8, r8, r1
 8026f2e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8026f32:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8026f36:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026f3a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8026f3e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026f42:	ea4a 0202 	orr.w	r2, sl, r2
 8026f46:	4341      	muls	r1, r0
 8026f48:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026f4c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8026f50:	fb09 1108 	mla	r1, r9, r8, r1
 8026f54:	ea4b 0505 	orr.w	r5, fp, r5
 8026f58:	fb0c 1102 	mla	r1, ip, r2, r1
 8026f5c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026f60:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026f64:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026f68:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8026f6c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8026f70:	ea42 0e0e 	orr.w	lr, r2, lr
 8026f74:	fa1f f28e 	uxth.w	r2, lr
 8026f78:	2bff      	cmp	r3, #255	@ 0xff
 8026f7a:	d103      	bne.n	8026f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8026f7c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026f7e:	29ff      	cmp	r1, #255	@ 0xff
 8026f80:	f000 80de 	beq.w	8027140 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8026f84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8026f86:	1215      	asrs	r5, r2, #8
 8026f88:	8838      	ldrh	r0, [r7, #0]
 8026f8a:	434b      	muls	r3, r1
 8026f8c:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8026f90:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026f92:	f103 0c01 	add.w	ip, r3, #1
 8026f96:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8026f9a:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026f9e:	fa5f fc83 	uxtb.w	ip, r3
 8026fa2:	1203      	asrs	r3, r0, #8
 8026fa4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8026fa8:	fb13 f30c 	smulbb	r3, r3, ip
 8026fac:	fb05 3501 	mla	r5, r5, r1, r3
 8026fb0:	10c3      	asrs	r3, r0, #3
 8026fb2:	10d1      	asrs	r1, r2, #3
 8026fb4:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026fb8:	00d2      	lsls	r2, r2, #3
 8026fba:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8026fbe:	b2ad      	uxth	r5, r5
 8026fc0:	fb13 f30c 	smulbb	r3, r3, ip
 8026fc4:	b2d2      	uxtb	r2, r2
 8026fc6:	fb01 3104 	mla	r1, r1, r4, r3
 8026fca:	00c3      	lsls	r3, r0, #3
 8026fcc:	b2db      	uxtb	r3, r3
 8026fce:	b289      	uxth	r1, r1
 8026fd0:	fb13 f30c 	smulbb	r3, r3, ip
 8026fd4:	fb02 3304 	mla	r3, r2, r4, r3
 8026fd8:	b29a      	uxth	r2, r3
 8026fda:	1c6b      	adds	r3, r5, #1
 8026fdc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026fe0:	1c53      	adds	r3, r2, #1
 8026fe2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026fe6:	1c4a      	adds	r2, r1, #1
 8026fe8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026fec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026ff0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026ff4:	0949      	lsrs	r1, r1, #5
 8026ff6:	432b      	orrs	r3, r5
 8026ff8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8026ffc:	430b      	orrs	r3, r1
 8026ffe:	803b      	strh	r3, [r7, #0]
 8027000:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027002:	3702      	adds	r7, #2
 8027004:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8027006:	4413      	add	r3, r2
 8027008:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802700a:	9329      	str	r3, [sp, #164]	@ 0xa4
 802700c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802700e:	441a      	add	r2, r3
 8027010:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027012:	3b01      	subs	r3, #1
 8027014:	922a      	str	r2, [sp, #168]	@ 0xa8
 8027016:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027018:	e687      	b.n	8026d2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 802701a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802701c:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
 802701e:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 8027020:	4433      	add	r3, r6
 8027022:	9329      	str	r3, [sp, #164]	@ 0xa4
 8027024:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027026:	441c      	add	r4, r3
 8027028:	9b08      	ldr	r3, [sp, #32]
 802702a:	3b01      	subs	r3, #1
 802702c:	942a      	str	r4, [sp, #168]	@ 0xa8
 802702e:	9308      	str	r3, [sp, #32]
 8027030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027032:	3302      	adds	r3, #2
 8027034:	9309      	str	r3, [sp, #36]	@ 0x24
 8027036:	e656      	b.n	8026ce6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027038:	d028      	beq.n	802708c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 802703a:	9b08      	ldr	r3, [sp, #32]
 802703c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802703e:	3b01      	subs	r3, #1
 8027040:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8027042:	fb00 5003 	mla	r0, r0, r3, r5
 8027046:	1400      	asrs	r0, r0, #16
 8027048:	f53f ae6a 	bmi.w	8026d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802704c:	3901      	subs	r1, #1
 802704e:	4288      	cmp	r0, r1
 8027050:	f6bf ae66 	bge.w	8026d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027054:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8027056:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8027058:	fb01 0303 	mla	r3, r1, r3, r0
 802705c:	141b      	asrs	r3, r3, #16
 802705e:	f53f ae5f 	bmi.w	8026d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027062:	3a01      	subs	r2, #1
 8027064:	4293      	cmp	r3, r2
 8027066:	f6bf ae5b 	bge.w	8026d20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802706a:	9b08      	ldr	r3, [sp, #32]
 802706c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027070:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8027074:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027076:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027078:	2b00      	cmp	r3, #0
 802707a:	f300 8082 	bgt.w	8027182 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802707e:	9b08      	ldr	r3, [sp, #32]
 8027080:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027086:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802708a:	9309      	str	r3, [sp, #36]	@ 0x24
 802708c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802708e:	2b00      	cmp	r3, #0
 8027090:	f340 81ef 	ble.w	8027472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8027094:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027098:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802709a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802709e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80270a2:	eef0 6a48 	vmov.f32	s13, s16
 80270a6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80270aa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80270ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270b2:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 80270b6:	eef0 6a68 	vmov.f32	s13, s17
 80270ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80270be:	edcd 6a2a 	vstr	s13, [sp, #168]	@ 0xa8
 80270c2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80270c6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80270ca:	ee37 8a48 	vsub.f32	s16, s14, s16
 80270ce:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80270d2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80270d6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80270da:	ee18 2a10 	vmov	r2, s16
 80270de:	eeb0 8a47 	vmov.f32	s16, s14
 80270e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270e6:	ee18 2a90 	vmov	r2, s17
 80270ea:	932b      	str	r3, [sp, #172]	@ 0xac
 80270ec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80270ee:	eef0 8a67 	vmov.f32	s17, s15
 80270f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80270f6:	932c      	str	r3, [sp, #176]	@ 0xb0
 80270f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80270fa:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80270fc:	3b01      	subs	r3, #1
 80270fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8027100:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027102:	bf08      	it	eq
 8027104:	4613      	moveq	r3, r2
 8027106:	9308      	str	r3, [sp, #32]
 8027108:	e5df      	b.n	8026cca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802710a:	fb08 f505 	mul.w	r5, r8, r5
 802710e:	fb09 5303 	mla	r3, r9, r3, r5
 8027112:	e65f      	b.n	8026dd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8027114:	4681      	mov	r9, r0
 8027116:	e686      	b.n	8026e26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027118:	f1c1 0210 	rsb	r2, r1, #16
 802711c:	4341      	muls	r1, r0
 802711e:	fb09 1902 	mla	r9, r9, r2, r1
 8027122:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027126:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802712a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802712e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027132:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027136:	ea42 0909 	orr.w	r9, r2, r9
 802713a:	fa1f f289 	uxth.w	r2, r9
 802713e:	e71b      	b.n	8026f78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8027140:	803a      	strh	r2, [r7, #0]
 8027142:	e75d      	b.n	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027144:	f115 0e01 	adds.w	lr, r5, #1
 8027148:	f53f af5a 	bmi.w	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802714c:	4572      	cmp	r2, lr
 802714e:	f6ff af57 	blt.w	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027152:	f110 0e01 	adds.w	lr, r0, #1
 8027156:	f53f af53 	bmi.w	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802715a:	4573      	cmp	r3, lr
 802715c:	f6ff af50 	blt.w	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027160:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027162:	b21b      	sxth	r3, r3
 8027164:	b212      	sxth	r2, r2
 8027166:	9502      	str	r5, [sp, #8]
 8027168:	9301      	str	r3, [sp, #4]
 802716a:	9200      	str	r2, [sp, #0]
 802716c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027170:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027174:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8027178:	4639      	mov	r1, r7
 802717a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802717c:	f7ff fbd0 	bl	8026920 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027180:	e73e      	b.n	8027000 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027182:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027184:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027188:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802718a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802718e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8027190:	fa1f fc82 	uxth.w	ip, r2
 8027194:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027198:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802719a:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802719e:	141f      	asrs	r7, r3, #16
 80271a0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80271a2:	141b      	asrs	r3, r3, #16
 80271a4:	fb01 3707 	mla	r7, r1, r7, r3
 80271a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80271aa:	eb03 0a07 	add.w	sl, r3, r7
 80271ae:	f813 9007 	ldrb.w	r9, [r3, r7]
 80271b2:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80271b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80271ba:	b29b      	uxth	r3, r3
 80271bc:	2d00      	cmp	r5, #0
 80271be:	f000 813d 	beq.w	802743c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 80271c2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80271c6:	eb0a 0b01 	add.w	fp, sl, r1
 80271ca:	fa1f fa85 	uxth.w	sl, r5
 80271ce:	940f      	str	r4, [sp, #60]	@ 0x3c
 80271d0:	fb0a fc0c 	mul.w	ip, sl, ip
 80271d4:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80271d8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80271dc:	eba0 000c 	sub.w	r0, r0, ip
 80271e0:	9410      	str	r4, [sp, #64]	@ 0x40
 80271e2:	fa1f fa8a 	uxth.w	sl, sl
 80271e6:	b280      	uxth	r0, r0
 80271e8:	eba3 030a 	sub.w	r3, r3, sl
 80271ec:	fb08 f000 	mul.w	r0, r8, r0
 80271f0:	b29b      	uxth	r3, r3
 80271f2:	fb09 0303 	mla	r3, r9, r3, r0
 80271f6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80271f8:	fb0a 3300 	mla	r3, sl, r0, r3
 80271fc:	fb0c 3304 	mla	r3, ip, r4, r3
 8027200:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027204:	2b00      	cmp	r3, #0
 8027206:	f000 810b 	beq.w	8027420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802720a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802720c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027210:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027212:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027216:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802721a:	f000 8114 	beq.w	8027446 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 802721e:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027222:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027226:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802722a:	fb0a fc0c 	mul.w	ip, sl, ip
 802722e:	fb09 f707 	mul.w	r7, r9, r7
 8027232:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027236:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 802723a:	f107 0b20 	add.w	fp, r7, #32
 802723e:	44cc      	add	ip, r9
 8027240:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027244:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027248:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802724c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027250:	ea4c 0909 	orr.w	r9, ip, r9
 8027254:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027258:	8847      	ldrh	r7, [r0, #2]
 802725a:	d019      	beq.n	8027290 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 802725c:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027260:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027264:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027268:	fb0a fc0c 	mul.w	ip, sl, ip
 802726c:	fb08 f807 	mul.w	r8, r8, r7
 8027270:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027274:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027278:	f108 0b20 	add.w	fp, r8, #32
 802727c:	44bc      	add	ip, r7
 802727e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027282:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027286:	0a3f      	lsrs	r7, r7, #8
 8027288:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802728c:	ea4c 0707 	orr.w	r7, ip, r7
 8027290:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027294:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027298:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802729c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80272a0:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 80272a4:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80272a8:	ea4c 0909 	orr.w	r9, ip, r9
 80272ac:	ea4a 0707 	orr.w	r7, sl, r7
 80272b0:	2d00      	cmp	r5, #0
 80272b2:	f000 80ca 	beq.w	802744a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80272b6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80272ba:	3901      	subs	r1, #1
 80272bc:	0049      	lsls	r1, r1, #1
 80272be:	3102      	adds	r1, #2
 80272c0:	eb00 0c01 	add.w	ip, r0, r1
 80272c4:	5a41      	ldrh	r1, [r0, r1]
 80272c6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80272c8:	28ff      	cmp	r0, #255	@ 0xff
 80272ca:	d019      	beq.n	8027300 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 80272cc:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 80272d0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80272d2:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80272d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80272da:	fb04 fa01 	mul.w	sl, r4, r1
 80272de:	fb08 f800 	mul.w	r8, r8, r0
 80272e2:	f10a 0020 	add.w	r0, sl, #32
 80272e6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80272ea:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80272ee:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80272f2:	4441      	add	r1, r8
 80272f4:	0a00      	lsrs	r0, r0, #8
 80272f6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80272fa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80272fe:	4301      	orrs	r1, r0
 8027300:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027302:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027306:	2cff      	cmp	r4, #255	@ 0xff
 8027308:	d01a      	beq.n	8027340 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 802730a:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 802730e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027312:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027316:	fb04 fa00 	mul.w	sl, r4, r0
 802731a:	fb08 f80c 	mul.w	r8, r8, ip
 802731e:	f10a 0c20 	add.w	ip, sl, #32
 8027322:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027326:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802732a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802732e:	4440      	add	r0, r8
 8027330:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027334:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027338:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802733c:	ea40 000c 	orr.w	r0, r0, ip
 8027340:	fb15 fc02 	smulbb	ip, r5, r2
 8027344:	f1c5 0810 	rsb	r8, r5, #16
 8027348:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802734c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027350:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027354:	eba8 0802 	sub.w	r8, r8, r2
 8027358:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802735c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027360:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027364:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027368:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802736c:	ea4a 0101 	orr.w	r1, sl, r1
 8027370:	437a      	muls	r2, r7
 8027372:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027376:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 802737a:	fb09 2208 	mla	r2, r9, r8, r2
 802737e:	ea4b 0000 	orr.w	r0, fp, r0
 8027382:	fb05 2201 	mla	r2, r5, r1, r2
 8027386:	fb0c 2200 	mla	r2, ip, r0, r2
 802738a:	0d57      	lsrs	r7, r2, #21
 802738c:	0952      	lsrs	r2, r2, #5
 802738e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027392:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027396:	433a      	orrs	r2, r7
 8027398:	2bff      	cmp	r3, #255	@ 0xff
 802739a:	b292      	uxth	r2, r2
 802739c:	d102      	bne.n	80273a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802739e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80273a0:	29ff      	cmp	r1, #255	@ 0xff
 80273a2:	d063      	beq.n	802746c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 80273a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80273a6:	1215      	asrs	r5, r2, #8
 80273a8:	f8be 1000 	ldrh.w	r1, [lr]
 80273ac:	4343      	muls	r3, r0
 80273ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80273b0:	10cf      	asrs	r7, r1, #3
 80273b2:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80273b6:	1c58      	adds	r0, r3, #1
 80273b8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80273bc:	eb00 2323 	add.w	r3, r0, r3, asr #8
 80273c0:	1208      	asrs	r0, r1, #8
 80273c2:	ea6f 2323 	mvn.w	r3, r3, asr #8
 80273c6:	00c9      	lsls	r1, r1, #3
 80273c8:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80273cc:	b2db      	uxtb	r3, r3
 80273ce:	b2c9      	uxtb	r1, r1
 80273d0:	fb10 f003 	smulbb	r0, r0, r3
 80273d4:	fb11 f103 	smulbb	r1, r1, r3
 80273d8:	fb05 0504 	mla	r5, r5, r4, r0
 80273dc:	10d0      	asrs	r0, r2, #3
 80273de:	fb17 f703 	smulbb	r7, r7, r3
 80273e2:	00d2      	lsls	r2, r2, #3
 80273e4:	b2ad      	uxth	r5, r5
 80273e6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80273ea:	b2d2      	uxtb	r2, r2
 80273ec:	fb00 7004 	mla	r0, r0, r4, r7
 80273f0:	1c6b      	adds	r3, r5, #1
 80273f2:	fb02 1204 	mla	r2, r2, r4, r1
 80273f6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80273fa:	b292      	uxth	r2, r2
 80273fc:	b280      	uxth	r0, r0
 80273fe:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027402:	1c57      	adds	r7, r2, #1
 8027404:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027408:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802740c:	433d      	orrs	r5, r7
 802740e:	1c47      	adds	r7, r0, #1
 8027410:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027414:	097f      	lsrs	r7, r7, #5
 8027416:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 802741a:	433d      	orrs	r5, r7
 802741c:	f8ae 5000 	strh.w	r5, [lr]
 8027420:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8027422:	f10e 0e02 	add.w	lr, lr, #2
 8027426:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8027428:	4413      	add	r3, r2
 802742a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 802742c:	9329      	str	r3, [sp, #164]	@ 0xa4
 802742e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027430:	441a      	add	r2, r3
 8027432:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027434:	3b01      	subs	r3, #1
 8027436:	922a      	str	r2, [sp, #168]	@ 0xa8
 8027438:	9313      	str	r3, [sp, #76]	@ 0x4c
 802743a:	e61c      	b.n	8027076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802743c:	fb08 f000 	mul.w	r0, r8, r0
 8027440:	fb09 0303 	mla	r3, r9, r3, r0
 8027444:	e6dc      	b.n	8027200 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8027446:	46b9      	mov	r9, r7
 8027448:	e704      	b.n	8027254 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 802744a:	f1c2 0110 	rsb	r1, r2, #16
 802744e:	437a      	muls	r2, r7
 8027450:	fb09 2901 	mla	r9, r9, r1, r2
 8027454:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027458:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802745c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027460:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027464:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027468:	4302      	orrs	r2, r0
 802746a:	e795      	b.n	8027398 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 802746c:	f8ae 2000 	strh.w	r2, [lr]
 8027470:	e7d6      	b.n	8027420 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 8027472:	b017      	add	sp, #92	@ 0x5c
 8027474:	ecbd 8b08 	vpop	{d8-d11}
 8027478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 802747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027480:	b085      	sub	sp, #20
 8027482:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
 8027486:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802748a:	9103      	str	r1, [sp, #12]
 802748c:	2d00      	cmp	r5, #0
 802748e:	fb05 7106 	mla	r1, r5, r6, r7
 8027492:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 8027496:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802749a:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802749e:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 80274a2:	eb02 0901 	add.w	r9, r2, r1
 80274a6:	9401      	str	r4, [sp, #4]
 80274a8:	f2c0 80c0 	blt.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80274ac:	45a8      	cmp	r8, r5
 80274ae:	f340 80bd 	ble.w	802762c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 80274b2:	2f00      	cmp	r7, #0
 80274b4:	f2c0 80b6 	blt.w	8027624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80274b8:	42be      	cmp	r6, r7
 80274ba:	f340 80b3 	ble.w	8027624 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 80274be:	f812 c001 	ldrb.w	ip, [r2, r1]
 80274c2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80274c6:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80274ca:	d019      	beq.n	8027500 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 80274cc:	f421 63fc 	bic.w	r3, r1, #2016	@ 0x7e0
 80274d0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80274d4:	435a      	muls	r2, r3
 80274d6:	f401 63fc 	and.w	r3, r1, #2016	@ 0x7e0
 80274da:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80274de:	fb0c f403 	mul.w	r4, ip, r3
 80274e2:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 80274e6:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 80274ea:	441a      	add	r2, r3
 80274ec:	f104 0320 	add.w	r3, r4, #32
 80274f0:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80274f4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80274f8:	0a1b      	lsrs	r3, r3, #8
 80274fa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80274fe:	4319      	orrs	r1, r3
 8027500:	b289      	uxth	r1, r1
 8027502:	1c7b      	adds	r3, r7, #1
 8027504:	f100 8097 	bmi.w	8027636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 8027508:	429e      	cmp	r6, r3
 802750a:	f340 8094 	ble.w	8027636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 802750e:	2800      	cmp	r0, #0
 8027510:	f000 8094 	beq.w	802763c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 8027514:	f899 4001 	ldrb.w	r4, [r9, #1]
 8027518:	9b01      	ldr	r3, [sp, #4]
 802751a:	2cff      	cmp	r4, #255	@ 0xff
 802751c:	885b      	ldrh	r3, [r3, #2]
 802751e:	d01b      	beq.n	8027558 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 8027520:	f423 62fc 	bic.w	r2, r3, #2016	@ 0x7e0
 8027524:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8027528:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802752c:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8027530:	fb0a f202 	mul.w	r2, sl, r2
 8027534:	fb04 fa03 	mul.w	sl, r4, r3
 8027538:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802753c:	f602 0201 	addw	r2, r2, #2049	@ 0x801
 8027540:	441a      	add	r2, r3
 8027542:	f10a 0320 	add.w	r3, sl, #32
 8027546:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802754a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802754e:	0a1b      	lsrs	r3, r3, #8
 8027550:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027554:	ea4b 0303 	orr.w	r3, fp, r3
 8027558:	b29b      	uxth	r3, r3
 802755a:	3501      	adds	r5, #1
 802755c:	d474      	bmi.n	8027648 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802755e:	45a8      	cmp	r8, r5
 8027560:	dd72      	ble.n	8027648 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 8027562:	f1be 0f00 	cmp.w	lr, #0
 8027566:	f000 8110 	beq.w	802778a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 802756a:	2f00      	cmp	r7, #0
 802756c:	db69      	blt.n	8027642 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802756e:	42be      	cmp	r6, r7
 8027570:	dd67      	ble.n	8027642 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 8027572:	f819 5006 	ldrb.w	r5, [r9, r6]
 8027576:	9a01      	ldr	r2, [sp, #4]
 8027578:	2dff      	cmp	r5, #255	@ 0xff
 802757a:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802757e:	d01c      	beq.n	80275ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 8027580:	f42b 62fc 	bic.w	r2, fp, #2016	@ 0x7e0
 8027584:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8027588:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802758c:	fb08 f802 	mul.w	r8, r8, r2
 8027590:	fb05 fa0b 	mul.w	sl, r5, fp
 8027594:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8027598:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 802759c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80275a0:	4490      	add	r8, r2
 80275a2:	f10a 0220 	add.w	r2, sl, #32
 80275a6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80275aa:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80275ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275b2:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 80275b6:	ea4b 0b0a 	orr.w	fp, fp, sl
 80275ba:	fa1f fb8b 	uxth.w	fp, fp
 80275be:	3701      	adds	r7, #1
 80275c0:	d447      	bmi.n	8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80275c2:	42be      	cmp	r6, r7
 80275c4:	dd45      	ble.n	8027652 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 80275c6:	2800      	cmp	r0, #0
 80275c8:	d046      	beq.n	8027658 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 80275ca:	3601      	adds	r6, #1
 80275cc:	9a01      	ldr	r2, [sp, #4]
 80275ce:	f819 7006 	ldrb.w	r7, [r9, r6]
 80275d2:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 80275d6:	2fff      	cmp	r7, #255	@ 0xff
 80275d8:	d01a      	beq.n	8027610 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 80275da:	f422 66fc 	bic.w	r6, r2, #2016	@ 0x7e0
 80275de:	ea4f 08e7 	mov.w	r8, r7, asr #3
 80275e2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80275e6:	fb08 f806 	mul.w	r8, r8, r6
 80275ea:	fb07 f902 	mul.w	r9, r7, r2
 80275ee:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80275f2:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80275f6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80275fa:	44b0      	add	r8, r6
 80275fc:	f109 0620 	add.w	r6, r9, #32
 8027600:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8027604:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8027608:	0a36      	lsrs	r6, r6, #8
 802760a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 802760e:	4332      	orrs	r2, r6
 8027610:	b292      	uxth	r2, r2
 8027612:	280f      	cmp	r0, #15
 8027614:	d922      	bls.n	802765c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8027616:	4b61      	ldr	r3, [pc, #388]	@ (802779c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 8027618:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802761c:	4a60      	ldr	r2, [pc, #384]	@ (80277a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 802761e:	4861      	ldr	r0, [pc, #388]	@ (80277a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 8027620:	f003 fca2 	bl	802af68 <__assert_func>
 8027624:	f04f 0c00 	mov.w	ip, #0
 8027628:	4661      	mov	r1, ip
 802762a:	e76a      	b.n	8027502 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 802762c:	2400      	movs	r4, #0
 802762e:	46a4      	mov	ip, r4
 8027630:	4623      	mov	r3, r4
 8027632:	4621      	mov	r1, r4
 8027634:	e791      	b.n	802755a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027636:	2400      	movs	r4, #0
 8027638:	4623      	mov	r3, r4
 802763a:	e78e      	b.n	802755a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 802763c:	4604      	mov	r4, r0
 802763e:	4603      	mov	r3, r0
 8027640:	e78b      	b.n	802755a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 8027642:	2500      	movs	r5, #0
 8027644:	46ab      	mov	fp, r5
 8027646:	e7ba      	b.n	80275be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 8027648:	2700      	movs	r7, #0
 802764a:	463d      	mov	r5, r7
 802764c:	463a      	mov	r2, r7
 802764e:	46bb      	mov	fp, r7
 8027650:	e7df      	b.n	8027612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027652:	2700      	movs	r7, #0
 8027654:	463a      	mov	r2, r7
 8027656:	e7dc      	b.n	8027612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8027658:	4607      	mov	r7, r0
 802765a:	4602      	mov	r2, r0
 802765c:	f1be 0f0f 	cmp.w	lr, #15
 8027660:	d8d9      	bhi.n	8027616 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8027662:	b286      	uxth	r6, r0
 8027664:	fa1f f98e 	uxth.w	r9, lr
 8027668:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802766c:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027670:	fb06 f809 	mul.w	r8, r6, r9
 8027674:	0136      	lsls	r6, r6, #4
 8027676:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802767a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802767e:	9601      	str	r6, [sp, #4]
 8027680:	ea4a 0101 	orr.w	r1, sl, r1
 8027684:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8027688:	fa1f f689 	uxth.w	r6, r9
 802768c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8027690:	fb10 f90e 	smulbb	r9, r0, lr
 8027694:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027698:	9602      	str	r6, [sp, #8]
 802769a:	460e      	mov	r6, r1
 802769c:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80276a0:	f1ce 0110 	rsb	r1, lr, #16
 80276a4:	ea4a 0303 	orr.w	r3, sl, r3
 80276a8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80276ac:	1a09      	subs	r1, r1, r0
 80276ae:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 80276b2:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80276b6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80276ba:	4343      	muls	r3, r0
 80276bc:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 80276c0:	ea4a 0202 	orr.w	r2, sl, r2
 80276c4:	9802      	ldr	r0, [sp, #8]
 80276c6:	fb01 3106 	mla	r1, r1, r6, r3
 80276ca:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 80276ce:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80276d2:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80276d6:	fb09 1302 	mla	r3, r9, r2, r1
 80276da:	9a03      	ldr	r2, [sp, #12]
 80276dc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80276e0:	8811      	ldrh	r1, [r2, #0]
 80276e2:	9a01      	ldr	r2, [sp, #4]
 80276e4:	ea4a 0b0b 	orr.w	fp, sl, fp
 80276e8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80276ec:	fb0e 3e0b 	mla	lr, lr, fp, r3
 80276f0:	1a12      	subs	r2, r2, r0
 80276f2:	9801      	ldr	r0, [sp, #4]
 80276f4:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80276f8:	eba0 0608 	sub.w	r6, r0, r8
 80276fc:	b292      	uxth	r2, r2
 80276fe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027702:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8027706:	b2b6      	uxth	r6, r6
 8027708:	10c8      	asrs	r0, r1, #3
 802770a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802770e:	4374      	muls	r4, r6
 8027710:	ea43 0e0e 	orr.w	lr, r3, lr
 8027714:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027718:	fb0c 4402 	mla	r4, ip, r2, r4
 802771c:	9a02      	ldr	r2, [sp, #8]
 802771e:	fa1f f38e 	uxth.w	r3, lr
 8027722:	fb02 4505 	mla	r5, r2, r5, r4
 8027726:	120a      	asrs	r2, r1, #8
 8027728:	00c9      	lsls	r1, r1, #3
 802772a:	fb08 5707 	mla	r7, r8, r7, r5
 802772e:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027732:	b2c9      	uxtb	r1, r1
 8027734:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8027738:	b2ff      	uxtb	r7, r7
 802773a:	437a      	muls	r2, r7
 802773c:	4378      	muls	r0, r7
 802773e:	434f      	muls	r7, r1
 8027740:	1c51      	adds	r1, r2, #1
 8027742:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8027746:	121a      	asrs	r2, r3, #8
 8027748:	f022 0207 	bic.w	r2, r2, #7
 802774c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8027750:	1c41      	adds	r1, r0, #1
 8027752:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027756:	10d9      	asrs	r1, r3, #3
 8027758:	0212      	lsls	r2, r2, #8
 802775a:	f021 0103 	bic.w	r1, r1, #3
 802775e:	00db      	lsls	r3, r3, #3
 8027760:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8027764:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027768:	00c9      	lsls	r1, r1, #3
 802776a:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802776e:	430a      	orrs	r2, r1
 8027770:	1c79      	adds	r1, r7, #1
 8027772:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8027776:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 802777a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802777e:	4313      	orrs	r3, r2
 8027780:	9a03      	ldr	r2, [sp, #12]
 8027782:	8013      	strh	r3, [r2, #0]
 8027784:	b005      	add	sp, #20
 8027786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802778a:	280f      	cmp	r0, #15
 802778c:	f63f af43 	bhi.w	8027616 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 8027790:	4677      	mov	r7, lr
 8027792:	4675      	mov	r5, lr
 8027794:	4672      	mov	r2, lr
 8027796:	46f3      	mov	fp, lr
 8027798:	e763      	b.n	8027662 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 802779a:	bf00      	nop
 802779c:	08030109 	.word	0x08030109
 80277a0:	080306d6 	.word	0x080306d6
 80277a4:	0803018d 	.word	0x0803018d

080277a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80277a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277ac:	ed2d 8b08 	vpush	{d8-d11}
 80277b0:	b093      	sub	sp, #76	@ 0x4c
 80277b2:	eeb0 aa40 	vmov.f32	s20, s0
 80277b6:	eef0 9a60 	vmov.f32	s19, s1
 80277ba:	9210      	str	r2, [sp, #64]	@ 0x40
 80277bc:	eeb0 9a41 	vmov.f32	s18, s2
 80277c0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80277c2:	eeb0 8a62 	vmov.f32	s16, s5
 80277c6:	9011      	str	r0, [sp, #68]	@ 0x44
 80277c8:	eef0 8a43 	vmov.f32	s17, s6
 80277cc:	6850      	ldr	r0, [r2, #4]
 80277ce:	eef0 ba44 	vmov.f32	s23, s8
 80277d2:	910e      	str	r1, [sp, #56]	@ 0x38
 80277d4:	eeb0 ba64 	vmov.f32	s22, s9
 80277d8:	9306      	str	r3, [sp, #24]
 80277da:	eef0 aa45 	vmov.f32	s21, s10
 80277de:	6812      	ldr	r2, [r2, #0]
 80277e0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 80277e4:	fb00 1303 	mla	r3, r0, r3, r1
 80277e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80277ec:	9307      	str	r3, [sp, #28]
 80277ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80277f0:	681b      	ldr	r3, [r3, #0]
 80277f2:	9308      	str	r3, [sp, #32]
 80277f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80277f6:	685b      	ldr	r3, [r3, #4]
 80277f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80277fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	dc03      	bgt.n	8027808 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8027800:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8027802:	2b00      	cmp	r3, #0
 8027804:	f340 83b6 	ble.w	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027808:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802780a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802780e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027812:	1e48      	subs	r0, r1, #1
 8027814:	1e55      	subs	r5, r2, #1
 8027816:	9b06      	ldr	r3, [sp, #24]
 8027818:	2b00      	cmp	r3, #0
 802781a:	f340 8165 	ble.w	8027ae8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802781e:	9e25      	ldr	r6, [sp, #148]	@ 0x94
 8027820:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027822:	1436      	asrs	r6, r6, #16
 8027824:	ea4f 4323 	mov.w	r3, r3, asr #16
 8027828:	d406      	bmi.n	8027838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802782a:	4286      	cmp	r6, r0
 802782c:	da04      	bge.n	8027838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802782e:	2b00      	cmp	r3, #0
 8027830:	db02      	blt.n	8027838 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027832:	42ab      	cmp	r3, r5
 8027834:	f2c0 8159 	blt.w	8027aea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8027838:	3601      	adds	r6, #1
 802783a:	f100 8146 	bmi.w	8027aca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802783e:	42b1      	cmp	r1, r6
 8027840:	f2c0 8143 	blt.w	8027aca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027844:	3301      	adds	r3, #1
 8027846:	f100 8140 	bmi.w	8027aca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802784a:	429a      	cmp	r2, r3
 802784c:	f2c0 813d 	blt.w	8027aca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8027850:	9b06      	ldr	r3, [sp, #24]
 8027852:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027856:	9f07      	ldr	r7, [sp, #28]
 8027858:	930f      	str	r3, [sp, #60]	@ 0x3c
 802785a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802785c:	2b00      	cmp	r3, #0
 802785e:	f340 8166 	ble.w	8027b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027862:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027864:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8027866:	1418      	asrs	r0, r3, #16
 8027868:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802786a:	142d      	asrs	r5, r5, #16
 802786c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027870:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027872:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027876:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027878:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802787c:	f100 81f0 	bmi.w	8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027880:	f102 3eff 	add.w	lr, r2, #4294967295
 8027884:	4575      	cmp	r5, lr
 8027886:	f280 81eb 	bge.w	8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802788a:	2800      	cmp	r0, #0
 802788c:	f2c0 81e8 	blt.w	8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8027890:	f103 3eff 	add.w	lr, r3, #4294967295
 8027894:	4570      	cmp	r0, lr
 8027896:	f280 81e3 	bge.w	8027c60 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802789a:	b212      	sxth	r2, r2
 802789c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802789e:	fa1f fe81 	uxth.w	lr, r1
 80278a2:	fb00 5002 	mla	r0, r0, r2, r5
 80278a6:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80278aa:	eb03 0a00 	add.w	sl, r3, r0
 80278ae:	f813 9000 	ldrb.w	r9, [r3, r0]
 80278b2:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 80278b6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80278ba:	b29b      	uxth	r3, r3
 80278bc:	f1bc 0f00 	cmp.w	ip, #0
 80278c0:	f000 817b 	beq.w	8027bba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 80278c4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80278c8:	eb0a 0b02 	add.w	fp, sl, r2
 80278cc:	fa1f fa8c 	uxth.w	sl, ip
 80278d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80278d2:	fb0a fe0e 	mul.w	lr, sl, lr
 80278d6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80278da:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80278de:	eba5 050e 	sub.w	r5, r5, lr
 80278e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80278e4:	fa1f fa8a 	uxth.w	sl, sl
 80278e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80278ea:	b2ad      	uxth	r5, r5
 80278ec:	eba3 030a 	sub.w	r3, r3, sl
 80278f0:	fb08 f505 	mul.w	r5, r8, r5
 80278f4:	b29b      	uxth	r3, r3
 80278f6:	fb09 5303 	mla	r3, r9, r3, r5
 80278fa:	fb0a 3304 	mla	r3, sl, r4, r3
 80278fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027900:	fb0e 3304 	mla	r3, lr, r4, r3
 8027904:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027908:	2b00      	cmp	r3, #0
 802790a:	f000 80d1 	beq.w	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 802790e:	9c08      	ldr	r4, [sp, #32]
 8027910:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027914:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8027918:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802791c:	f000 8152 	beq.w	8027bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 8027920:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027924:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027928:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802792c:	fb0a fe0e 	mul.w	lr, sl, lr
 8027930:	fb09 f000 	mul.w	r0, r9, r0
 8027934:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8027938:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802793c:	f100 0b20 	add.w	fp, r0, #32
 8027940:	44ce      	add	lr, r9
 8027942:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027946:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802794a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802794e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027952:	ea4e 0909 	orr.w	r9, lr, r9
 8027956:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 802795a:	8868      	ldrh	r0, [r5, #2]
 802795c:	d019      	beq.n	8027992 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802795e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027962:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027966:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802796a:	fb0a fe0e 	mul.w	lr, sl, lr
 802796e:	fb08 f800 	mul.w	r8, r8, r0
 8027972:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027976:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 802797a:	f108 0b20 	add.w	fp, r8, #32
 802797e:	4486      	add	lr, r0
 8027980:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027984:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027988:	0a00      	lsrs	r0, r0, #8
 802798a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802798e:	ea4e 0000 	orr.w	r0, lr, r0
 8027992:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027996:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802799a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802799e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80279a2:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80279a6:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80279aa:	ea4e 0909 	orr.w	r9, lr, r9
 80279ae:	ea4a 0000 	orr.w	r0, sl, r0
 80279b2:	f1bc 0f00 	cmp.w	ip, #0
 80279b6:	f000 8107 	beq.w	8027bc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 80279ba:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80279be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80279c0:	3a01      	subs	r2, #1
 80279c2:	2cff      	cmp	r4, #255	@ 0xff
 80279c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80279c8:	f102 0202 	add.w	r2, r2, #2
 80279cc:	eb05 0e02 	add.w	lr, r5, r2
 80279d0:	5aaa      	ldrh	r2, [r5, r2]
 80279d2:	d018      	beq.n	8027a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80279d4:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 80279d8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80279dc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80279e0:	fb04 fa02 	mul.w	sl, r4, r2
 80279e4:	fb08 f805 	mul.w	r8, r8, r5
 80279e8:	f10a 0520 	add.w	r5, sl, #32
 80279ec:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80279f0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80279f4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80279f8:	4442      	add	r2, r8
 80279fa:	0a2d      	lsrs	r5, r5, #8
 80279fc:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027a00:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027a04:	432a      	orrs	r2, r5
 8027a06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027a08:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027a0c:	2cff      	cmp	r4, #255	@ 0xff
 8027a0e:	d01a      	beq.n	8027a46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8027a10:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8027a14:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027a18:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027a1c:	fb04 fa05 	mul.w	sl, r4, r5
 8027a20:	fb08 f80e 	mul.w	r8, r8, lr
 8027a24:	f10a 0e20 	add.w	lr, sl, #32
 8027a28:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027a2c:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027a30:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027a34:	4445      	add	r5, r8
 8027a36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027a3a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027a3e:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027a42:	ea45 050e 	orr.w	r5, r5, lr
 8027a46:	fb1c fe01 	smulbb	lr, ip, r1
 8027a4a:	f1cc 0810 	rsb	r8, ip, #16
 8027a4e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027a52:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027a56:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027a5a:	eba8 0801 	sub.w	r8, r8, r1
 8027a5e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027a62:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a66:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027a6a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027a6e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027a72:	ea4a 0202 	orr.w	r2, sl, r2
 8027a76:	4341      	muls	r1, r0
 8027a78:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027a7c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027a80:	fb09 1108 	mla	r1, r9, r8, r1
 8027a84:	ea4b 0505 	orr.w	r5, fp, r5
 8027a88:	fb0c 1102 	mla	r1, ip, r2, r1
 8027a8c:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027a90:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027a94:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027a98:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a9c:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027aa0:	ea42 0e0e 	orr.w	lr, r2, lr
 8027aa4:	fa1f f28e 	uxth.w	r2, lr
 8027aa8:	2bff      	cmp	r3, #255	@ 0xff
 8027aaa:	f040 80a1 	bne.w	8027bf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8027aae:	803a      	strh	r2, [r7, #0]
 8027ab0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027ab2:	3702      	adds	r7, #2
 8027ab4:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027ab6:	4413      	add	r3, r2
 8027ab8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027aba:	9325      	str	r3, [sp, #148]	@ 0x94
 8027abc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027abe:	441a      	add	r2, r3
 8027ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027ac2:	3b01      	subs	r3, #1
 8027ac4:	9226      	str	r2, [sp, #152]	@ 0x98
 8027ac6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027ac8:	e6c7      	b.n	802785a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027aca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027acc:	9e27      	ldr	r6, [sp, #156]	@ 0x9c
 8027ace:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 8027ad0:	4433      	add	r3, r6
 8027ad2:	9325      	str	r3, [sp, #148]	@ 0x94
 8027ad4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027ad6:	441c      	add	r4, r3
 8027ad8:	9b06      	ldr	r3, [sp, #24]
 8027ada:	3b01      	subs	r3, #1
 8027adc:	9426      	str	r4, [sp, #152]	@ 0x98
 8027ade:	9306      	str	r3, [sp, #24]
 8027ae0:	9b07      	ldr	r3, [sp, #28]
 8027ae2:	3302      	adds	r3, #2
 8027ae4:	9307      	str	r3, [sp, #28]
 8027ae6:	e696      	b.n	8027816 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027ae8:	d028      	beq.n	8027b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8027aea:	9b06      	ldr	r3, [sp, #24]
 8027aec:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8027aee:	3b01      	subs	r3, #1
 8027af0:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8027af2:	fb00 5003 	mla	r0, r0, r3, r5
 8027af6:	1400      	asrs	r0, r0, #16
 8027af8:	f53f aeaa 	bmi.w	8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027afc:	3901      	subs	r1, #1
 8027afe:	4288      	cmp	r0, r1
 8027b00:	f6bf aea6 	bge.w	8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027b04:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8027b06:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8027b08:	fb01 0303 	mla	r3, r1, r3, r0
 8027b0c:	141b      	asrs	r3, r3, #16
 8027b0e:	f53f ae9f 	bmi.w	8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027b12:	3a01      	subs	r2, #1
 8027b14:	4293      	cmp	r3, r2
 8027b16:	f6bf ae9b 	bge.w	8027850 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8027b1a:	9b06      	ldr	r3, [sp, #24]
 8027b1c:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027b20:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8027b24:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027b26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027b28:	2b00      	cmp	r3, #0
 8027b2a:	f300 80b6 	bgt.w	8027c9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8027b2e:	9b06      	ldr	r3, [sp, #24]
 8027b30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027b34:	9b07      	ldr	r3, [sp, #28]
 8027b36:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027b3a:	9307      	str	r3, [sp, #28]
 8027b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b3e:	2b00      	cmp	r3, #0
 8027b40:	f340 8218 	ble.w	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 8027b44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027b48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027b4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027b4e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027b52:	eef0 6a48 	vmov.f32	s13, s16
 8027b56:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027b5a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027b5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b62:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 8027b66:	eef0 6a68 	vmov.f32	s13, s17
 8027b6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b6e:	edcd 6a26 	vstr	s13, [sp, #152]	@ 0x98
 8027b72:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027b76:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027b7a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027b7e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027b82:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027b86:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027b8a:	ee18 2a10 	vmov	r2, s16
 8027b8e:	eeb0 8a47 	vmov.f32	s16, s14
 8027b92:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b96:	ee18 2a90 	vmov	r2, s17
 8027b9a:	9327      	str	r3, [sp, #156]	@ 0x9c
 8027b9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027b9e:	eef0 8a67 	vmov.f32	s17, s15
 8027ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ba6:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027ba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027baa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8027bac:	3b01      	subs	r3, #1
 8027bae:	930e      	str	r3, [sp, #56]	@ 0x38
 8027bb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027bb2:	bf08      	it	eq
 8027bb4:	4613      	moveq	r3, r2
 8027bb6:	9306      	str	r3, [sp, #24]
 8027bb8:	e61f      	b.n	80277fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8027bba:	fb08 f505 	mul.w	r5, r8, r5
 8027bbe:	fb09 5303 	mla	r3, r9, r3, r5
 8027bc2:	e69f      	b.n	8027904 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8027bc4:	4681      	mov	r9, r0
 8027bc6:	e6c6      	b.n	8027956 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027bc8:	f1c1 0210 	rsb	r2, r1, #16
 8027bcc:	4341      	muls	r1, r0
 8027bce:	fb09 1902 	mla	r9, r9, r2, r1
 8027bd2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027bd6:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027bda:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027bde:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027be2:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027be6:	ea42 0909 	orr.w	r9, r2, r9
 8027bea:	fa1f f289 	uxth.w	r2, r9
 8027bee:	e75b      	b.n	8027aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8027bf0:	f8b7 c000 	ldrh.w	ip, [r7]
 8027bf4:	43db      	mvns	r3, r3
 8027bf6:	ea4f 202c 	mov.w	r0, ip, asr #8
 8027bfa:	fa5f fe83 	uxtb.w	lr, r3
 8027bfe:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027c02:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8027c06:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8027c0a:	fb00 f00e 	mul.w	r0, r0, lr
 8027c0e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027c12:	b2db      	uxtb	r3, r3
 8027c14:	1c41      	adds	r1, r0, #1
 8027c16:	fb05 f50e 	mul.w	r5, r5, lr
 8027c1a:	fb03 f30e 	mul.w	r3, r3, lr
 8027c1e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8027c22:	1211      	asrs	r1, r2, #8
 8027c24:	f021 0107 	bic.w	r1, r1, #7
 8027c28:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8027c2c:	48d4      	ldr	r0, [pc, #848]	@ (8027f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027c2e:	b2c9      	uxtb	r1, r1
 8027c30:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8027c34:	1c69      	adds	r1, r5, #1
 8027c36:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8027c3a:	10d1      	asrs	r1, r2, #3
 8027c3c:	00d2      	lsls	r2, r2, #3
 8027c3e:	f021 0103 	bic.w	r1, r1, #3
 8027c42:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027c46:	00c9      	lsls	r1, r1, #3
 8027c48:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027c4c:	4301      	orrs	r1, r0
 8027c4e:	1c58      	adds	r0, r3, #1
 8027c50:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8027c54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8027c58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8027c5c:	430a      	orrs	r2, r1
 8027c5e:	e726      	b.n	8027aae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8027c60:	f115 0e01 	adds.w	lr, r5, #1
 8027c64:	f53f af24 	bmi.w	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c68:	4572      	cmp	r2, lr
 8027c6a:	f6ff af21 	blt.w	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c6e:	f110 0e01 	adds.w	lr, r0, #1
 8027c72:	f53f af1d 	bmi.w	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c76:	4573      	cmp	r3, lr
 8027c78:	f6ff af1a 	blt.w	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c7c:	b21b      	sxth	r3, r3
 8027c7e:	b212      	sxth	r2, r2
 8027c80:	9301      	str	r3, [sp, #4]
 8027c82:	9200      	str	r2, [sp, #0]
 8027c84:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8027c88:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8027c8c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8027c90:	4639      	mov	r1, r7
 8027c92:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027c94:	f7ff fbf2 	bl	802747c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8027c98:	e70a      	b.n	8027ab0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8027c9a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027c9c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027ca0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027ca2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027ca6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8027ca8:	fa1f fc82 	uxth.w	ip, r2
 8027cac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027cb0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8027cb2:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027cb6:	141f      	asrs	r7, r3, #16
 8027cb8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027cba:	141b      	asrs	r3, r3, #16
 8027cbc:	fb01 3707 	mla	r7, r1, r7, r3
 8027cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027cc2:	eb03 0a07 	add.w	sl, r3, r7
 8027cc6:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027cca:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027cce:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027cd2:	b29b      	uxth	r3, r3
 8027cd4:	2d00      	cmp	r5, #0
 8027cd6:	f000 80fe 	beq.w	8027ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8027cda:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027cde:	eb0a 0b01 	add.w	fp, sl, r1
 8027ce2:	fa1f fa85 	uxth.w	sl, r5
 8027ce6:	940c      	str	r4, [sp, #48]	@ 0x30
 8027ce8:	fb0a fc0c 	mul.w	ip, sl, ip
 8027cec:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027cf0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027cf4:	eba0 000c 	sub.w	r0, r0, ip
 8027cf8:	940d      	str	r4, [sp, #52]	@ 0x34
 8027cfa:	fa1f fa8a 	uxth.w	sl, sl
 8027cfe:	b280      	uxth	r0, r0
 8027d00:	eba3 030a 	sub.w	r3, r3, sl
 8027d04:	fb08 f000 	mul.w	r0, r8, r0
 8027d08:	b29b      	uxth	r3, r3
 8027d0a:	fb09 0303 	mla	r3, r9, r3, r0
 8027d0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027d10:	fb0a 3300 	mla	r3, sl, r0, r3
 8027d14:	fb0c 3304 	mla	r3, ip, r4, r3
 8027d18:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027d1c:	2b00      	cmp	r3, #0
 8027d1e:	f000 80cc 	beq.w	8027eba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027d22:	9808      	ldr	r0, [sp, #32]
 8027d24:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027d28:	9c08      	ldr	r4, [sp, #32]
 8027d2a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027d2e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027d32:	f000 80d5 	beq.w	8027ee0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8027d36:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027d3a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027d3e:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027d42:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d46:	fb09 f707 	mul.w	r7, r9, r7
 8027d4a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027d4e:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027d52:	f107 0b20 	add.w	fp, r7, #32
 8027d56:	44cc      	add	ip, r9
 8027d58:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027d5c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d64:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027d68:	ea4c 0909 	orr.w	r9, ip, r9
 8027d6c:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027d70:	8847      	ldrh	r7, [r0, #2]
 8027d72:	d019      	beq.n	8027da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8027d74:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027d78:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027d7c:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027d80:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d84:	fb08 f807 	mul.w	r8, r8, r7
 8027d88:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027d8c:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027d90:	f108 0b20 	add.w	fp, r8, #32
 8027d94:	44bc      	add	ip, r7
 8027d96:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027d9a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027d9e:	0a3f      	lsrs	r7, r7, #8
 8027da0:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027da4:	ea4c 0707 	orr.w	r7, ip, r7
 8027da8:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027dac:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027db0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027db4:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027db8:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027dbc:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027dc0:	ea4c 0909 	orr.w	r9, ip, r9
 8027dc4:	ea4a 0707 	orr.w	r7, sl, r7
 8027dc8:	2d00      	cmp	r5, #0
 8027dca:	f000 808b 	beq.w	8027ee4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8027dce:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027dd2:	3901      	subs	r1, #1
 8027dd4:	0049      	lsls	r1, r1, #1
 8027dd6:	3102      	adds	r1, #2
 8027dd8:	eb00 0c01 	add.w	ip, r0, r1
 8027ddc:	5a41      	ldrh	r1, [r0, r1]
 8027dde:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8027de0:	28ff      	cmp	r0, #255	@ 0xff
 8027de2:	d019      	beq.n	8027e18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8027de4:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8027de8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027dea:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027dee:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027df2:	fb04 fa01 	mul.w	sl, r4, r1
 8027df6:	fb08 f800 	mul.w	r8, r8, r0
 8027dfa:	f10a 0020 	add.w	r0, sl, #32
 8027dfe:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027e02:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027e06:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027e0a:	4441      	add	r1, r8
 8027e0c:	0a00      	lsrs	r0, r0, #8
 8027e0e:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027e12:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e16:	4301      	orrs	r1, r0
 8027e18:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027e1a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027e1e:	2cff      	cmp	r4, #255	@ 0xff
 8027e20:	d01a      	beq.n	8027e58 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8027e22:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027e26:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027e2a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027e2e:	fb04 fa00 	mul.w	sl, r4, r0
 8027e32:	fb08 f80c 	mul.w	r8, r8, ip
 8027e36:	f10a 0c20 	add.w	ip, sl, #32
 8027e3a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027e3e:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027e42:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027e46:	4440      	add	r0, r8
 8027e48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e4c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027e50:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027e54:	ea40 000c 	orr.w	r0, r0, ip
 8027e58:	fb15 fc02 	smulbb	ip, r5, r2
 8027e5c:	f1c5 0810 	rsb	r8, r5, #16
 8027e60:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027e64:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027e68:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027e6c:	eba8 0802 	sub.w	r8, r8, r2
 8027e70:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027e74:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027e78:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027e7c:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027e80:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027e84:	ea4a 0101 	orr.w	r1, sl, r1
 8027e88:	437a      	muls	r2, r7
 8027e8a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027e8e:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027e92:	fb09 2208 	mla	r2, r9, r8, r2
 8027e96:	ea4b 0000 	orr.w	r0, fp, r0
 8027e9a:	fb05 2201 	mla	r2, r5, r1, r2
 8027e9e:	fb0c 2200 	mla	r2, ip, r0, r2
 8027ea2:	0d57      	lsrs	r7, r2, #21
 8027ea4:	0952      	lsrs	r2, r2, #5
 8027ea6:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027eaa:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027eae:	433a      	orrs	r2, r7
 8027eb0:	2bff      	cmp	r3, #255	@ 0xff
 8027eb2:	b292      	uxth	r2, r2
 8027eb4:	d127      	bne.n	8027f06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8027eb6:	f8ae 2000 	strh.w	r2, [lr]
 8027eba:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8027ebc:	f10e 0e02 	add.w	lr, lr, #2
 8027ec0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8027ec2:	4413      	add	r3, r2
 8027ec4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8027ec6:	9325      	str	r3, [sp, #148]	@ 0x94
 8027ec8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027eca:	441a      	add	r2, r3
 8027ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8027ece:	3b01      	subs	r3, #1
 8027ed0:	9226      	str	r2, [sp, #152]	@ 0x98
 8027ed2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8027ed4:	e627      	b.n	8027b26 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8027ed6:	fb08 f000 	mul.w	r0, r8, r0
 8027eda:	fb09 0303 	mla	r3, r9, r3, r0
 8027ede:	e71b      	b.n	8027d18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8027ee0:	46b9      	mov	r9, r7
 8027ee2:	e743      	b.n	8027d6c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8027ee4:	f1c2 0110 	rsb	r1, r2, #16
 8027ee8:	437a      	muls	r2, r7
 8027eea:	fb09 2901 	mla	r9, r9, r1, r2
 8027eee:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027ef2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8027ef6:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8027efa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027efe:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027f02:	4302      	orrs	r2, r0
 8027f04:	e7d4      	b.n	8027eb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8027f06:	f8be 7000 	ldrh.w	r7, [lr]
 8027f0a:	43db      	mvns	r3, r3
 8027f0c:	4c1c      	ldr	r4, [pc, #112]	@ (8027f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8027f0e:	1238      	asrs	r0, r7, #8
 8027f10:	fa5f fc83 	uxtb.w	ip, r3
 8027f14:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027f18:	10fd      	asrs	r5, r7, #3
 8027f1a:	00fb      	lsls	r3, r7, #3
 8027f1c:	fb00 f00c 	mul.w	r0, r0, ip
 8027f20:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8027f24:	b2db      	uxtb	r3, r3
 8027f26:	fb05 f10c 	mul.w	r1, r5, ip
 8027f2a:	1c45      	adds	r5, r0, #1
 8027f2c:	fb03 f30c 	mul.w	r3, r3, ip
 8027f30:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027f34:	1215      	asrs	r5, r2, #8
 8027f36:	f025 0507 	bic.w	r5, r5, #7
 8027f3a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8027f3e:	1c4d      	adds	r5, r1, #1
 8027f40:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027f44:	10d1      	asrs	r1, r2, #3
 8027f46:	b2c0      	uxtb	r0, r0
 8027f48:	f021 0103 	bic.w	r1, r1, #3
 8027f4c:	00d2      	lsls	r2, r2, #3
 8027f4e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8027f52:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8027f56:	00c9      	lsls	r1, r1, #3
 8027f58:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027f5c:	4308      	orrs	r0, r1
 8027f5e:	1c59      	adds	r1, r3, #1
 8027f60:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8027f64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027f68:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8027f6c:	4318      	orrs	r0, r3
 8027f6e:	f8ae 0000 	strh.w	r0, [lr]
 8027f72:	e7a2      	b.n	8027eba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8027f74:	b013      	add	sp, #76	@ 0x4c
 8027f76:	ecbd 8b08 	vpop	{d8-d11}
 8027f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f7e:	bf00      	nop
 8027f80:	fffff800 	.word	0xfffff800

08027f84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8027f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027f88:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	@ 0x24
 8027f8c:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8027f90:	fb0c 4e03 	mla	lr, ip, r3, r4
 8027f94:	f1bc 0f00 	cmp.w	ip, #0
 8027f98:	f89d 702c 	ldrb.w	r7, [sp, #44]	@ 0x2c
 8027f9c:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
 8027fa0:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8027fa4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8027fa8:	8808      	ldrh	r0, [r1, #0]
 8027faa:	db2f      	blt.n	802800c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027fac:	45e2      	cmp	sl, ip
 8027fae:	dd2d      	ble.n	802800c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8027fb0:	2c00      	cmp	r4, #0
 8027fb2:	db29      	blt.n	8028008 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027fb4:	42a3      	cmp	r3, r4
 8027fb6:	dd27      	ble.n	8028008 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8027fb8:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8027fbc:	1c62      	adds	r2, r4, #1
 8027fbe:	d428      	bmi.n	8028012 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027fc0:	4293      	cmp	r3, r2
 8027fc2:	dd26      	ble.n	8028012 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027fc4:	b32f      	cbz	r7, 8028012 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8027fc6:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8027fca:	f11c 0c01 	adds.w	ip, ip, #1
 8027fce:	d424      	bmi.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027fd0:	45e2      	cmp	sl, ip
 8027fd2:	dd22      	ble.n	802801a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8027fd4:	2e00      	cmp	r6, #0
 8027fd6:	f000 809d 	beq.w	8028114 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8027fda:	2c00      	cmp	r4, #0
 8027fdc:	db1b      	blt.n	8028016 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027fde:	42a3      	cmp	r3, r4
 8027fe0:	dd19      	ble.n	8028016 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8027fe2:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8027fe6:	3401      	adds	r4, #1
 8027fe8:	d41a      	bmi.n	8028020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027fea:	42a3      	cmp	r3, r4
 8027fec:	dd18      	ble.n	8028020 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8027fee:	b1cf      	cbz	r7, 8028024 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8027ff0:	3301      	adds	r3, #1
 8027ff2:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8027ff6:	2f0f      	cmp	r7, #15
 8027ff8:	d915      	bls.n	8028026 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8027ffa:	4b49      	ldr	r3, [pc, #292]	@ (8028120 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8027ffc:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8028000:	4a48      	ldr	r2, [pc, #288]	@ (8028124 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8028002:	4849      	ldr	r0, [pc, #292]	@ (8028128 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8028004:	f002 ffb0 	bl	802af68 <__assert_func>
 8028008:	4681      	mov	r9, r0
 802800a:	e7d7      	b.n	8027fbc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 802800c:	4686      	mov	lr, r0
 802800e:	4681      	mov	r9, r0
 8028010:	e7db      	b.n	8027fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028012:	4686      	mov	lr, r0
 8028014:	e7d9      	b.n	8027fca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8028016:	4684      	mov	ip, r0
 8028018:	e7e5      	b.n	8027fe6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 802801a:	4603      	mov	r3, r0
 802801c:	4684      	mov	ip, r0
 802801e:	e7ea      	b.n	8027ff6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028020:	4603      	mov	r3, r0
 8028022:	e7e8      	b.n	8027ff6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8028024:	4603      	mov	r3, r0
 8028026:	2e0f      	cmp	r6, #15
 8028028:	d8e7      	bhi.n	8027ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802802a:	fb17 f806 	smulbb	r8, r7, r6
 802802e:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8028032:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8028036:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802803a:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802803e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8028042:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028046:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 802804a:	ea44 0909 	orr.w	r9, r4, r9
 802804e:	f1c6 0410 	rsb	r4, r6, #16
 8028052:	041a      	lsls	r2, r3, #16
 8028054:	ea4a 0e0e 	orr.w	lr, sl, lr
 8028058:	1be4      	subs	r4, r4, r7
 802805a:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 802805e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028062:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028066:	fb07 fe0e 	mul.w	lr, r7, lr
 802806a:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 802806e:	4313      	orrs	r3, r2
 8028070:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8028074:	fb04 e409 	mla	r4, r4, r9, lr
 8028078:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 802807c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028080:	b2af      	uxth	r7, r5
 8028082:	fb08 4303 	mla	r3, r8, r3, r4
 8028086:	f42c 64fc 	bic.w	r4, ip, #2016	@ 0x7e0
 802808a:	43ed      	mvns	r5, r5
 802808c:	4322      	orrs	r2, r4
 802808e:	b2ed      	uxtb	r5, r5
 8028090:	fb06 3202 	mla	r2, r6, r2, r3
 8028094:	10c6      	asrs	r6, r0, #3
 8028096:	0d53      	lsrs	r3, r2, #21
 8028098:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802809c:	0952      	lsrs	r2, r2, #5
 802809e:	fb16 f605 	smulbb	r6, r6, r5
 80280a2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80280a6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80280aa:	431a      	orrs	r2, r3
 80280ac:	b293      	uxth	r3, r2
 80280ae:	1202      	asrs	r2, r0, #8
 80280b0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80280b4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80280b8:	00dc      	lsls	r4, r3, #3
 80280ba:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80280be:	fb12 f205 	smulbb	r2, r2, r5
 80280c2:	b2e4      	uxtb	r4, r4
 80280c4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80280c8:	10da      	asrs	r2, r3, #3
 80280ca:	00c3      	lsls	r3, r0, #3
 80280cc:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80280d0:	fa1f fc8c 	uxth.w	ip, ip
 80280d4:	b2db      	uxtb	r3, r3
 80280d6:	fb02 6207 	mla	r2, r2, r7, r6
 80280da:	fb13 f305 	smulbb	r3, r3, r5
 80280de:	b296      	uxth	r6, r2
 80280e0:	fb04 3307 	mla	r3, r4, r7, r3
 80280e4:	b29a      	uxth	r2, r3
 80280e6:	f10c 0301 	add.w	r3, ip, #1
 80280ea:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80280ee:	1c53      	adds	r3, r2, #1
 80280f0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80280f4:	1c72      	adds	r2, r6, #1
 80280f6:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 80280fa:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 80280fe:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028102:	0952      	lsrs	r2, r2, #5
 8028104:	ea43 030c 	orr.w	r3, r3, ip
 8028108:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802810c:	4313      	orrs	r3, r2
 802810e:	800b      	strh	r3, [r1, #0]
 8028110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028114:	2f0f      	cmp	r7, #15
 8028116:	f63f af70 	bhi.w	8027ffa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 802811a:	4603      	mov	r3, r0
 802811c:	4684      	mov	ip, r0
 802811e:	e784      	b.n	802802a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8028120:	08030109 	.word	0x08030109
 8028124:	0803077f 	.word	0x0803077f
 8028128:	0803018d 	.word	0x0803018d

0802812c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028130:	ed2d 8b08 	vpush	{d8-d11}
 8028134:	b093      	sub	sp, #76	@ 0x4c
 8028136:	461d      	mov	r5, r3
 8028138:	eeb0 aa40 	vmov.f32	s20, s0
 802813c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802813e:	eef0 9a60 	vmov.f32	s19, s1
 8028142:	9210      	str	r2, [sp, #64]	@ 0x40
 8028144:	eeb0 9a41 	vmov.f32	s18, s2
 8028148:	f89d 20b4 	ldrb.w	r2, [sp, #180]	@ 0xb4
 802814c:	eeb0 8a62 	vmov.f32	s16, s5
 8028150:	910a      	str	r1, [sp, #40]	@ 0x28
 8028152:	eef0 8a43 	vmov.f32	s17, s6
 8028156:	920b      	str	r2, [sp, #44]	@ 0x2c
 8028158:	eef0 ba44 	vmov.f32	s23, s8
 802815c:	6859      	ldr	r1, [r3, #4]
 802815e:	eeb0 ba64 	vmov.f32	s22, s9
 8028162:	681b      	ldr	r3, [r3, #0]
 8028164:	eef0 aa45 	vmov.f32	s21, s10
 8028168:	9011      	str	r0, [sp, #68]	@ 0x44
 802816a:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	@ 0xa8
 802816e:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 8028172:	fb01 2707 	mla	r7, r1, r7, r2
 8028176:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802817a:	9307      	str	r3, [sp, #28]
 802817c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802817e:	681b      	ldr	r3, [r3, #0]
 8028180:	9309      	str	r3, [sp, #36]	@ 0x24
 8028182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028184:	43db      	mvns	r3, r3
 8028186:	b2db      	uxtb	r3, r3
 8028188:	9308      	str	r3, [sp, #32]
 802818a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802818c:	2b00      	cmp	r3, #0
 802818e:	dc03      	bgt.n	8028198 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028192:	2b00      	cmp	r3, #0
 8028194:	f340 8205 	ble.w	80285a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028198:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802819a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802819e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80281a2:	1e48      	subs	r0, r1, #1
 80281a4:	f102 3cff 	add.w	ip, r2, #4294967295
 80281a8:	2d00      	cmp	r5, #0
 80281aa:	f340 80da 	ble.w	8028362 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80281ae:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80281b2:	ea4f 4326 	mov.w	r3, r6, asr #16
 80281b6:	d406      	bmi.n	80281c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80281b8:	4586      	cmp	lr, r0
 80281ba:	da04      	bge.n	80281c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80281bc:	2b00      	cmp	r3, #0
 80281be:	db02      	blt.n	80281c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80281c0:	4563      	cmp	r3, ip
 80281c2:	f2c0 80cf 	blt.w	8028364 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80281c6:	f11e 0e01 	adds.w	lr, lr, #1
 80281ca:	f100 80c1 	bmi.w	8028350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80281ce:	4571      	cmp	r1, lr
 80281d0:	f2c0 80be 	blt.w	8028350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80281d4:	3301      	adds	r3, #1
 80281d6:	f100 80bb 	bmi.w	8028350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80281da:	429a      	cmp	r2, r3
 80281dc:	f2c0 80b8 	blt.w	8028350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80281e0:	46a9      	mov	r9, r5
 80281e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80281e6:	f1b9 0f00 	cmp.w	r9, #0
 80281ea:	f340 80d8 	ble.w	802839e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80281ee:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80281f0:	1421      	asrs	r1, r4, #16
 80281f2:	ea4f 4026 	mov.w	r0, r6, asr #16
 80281f6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80281fa:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80281fe:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028202:	f100 8112 	bmi.w	802842a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028206:	f10e 3aff 	add.w	sl, lr, #4294967295
 802820a:	4551      	cmp	r1, sl
 802820c:	f280 810d 	bge.w	802842a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028210:	2800      	cmp	r0, #0
 8028212:	f2c0 810a 	blt.w	802842a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028216:	f103 3aff 	add.w	sl, r3, #4294967295
 802821a:	4550      	cmp	r0, sl
 802821c:	f280 8105 	bge.w	802842a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8028220:	fa0f f38e 	sxth.w	r3, lr
 8028224:	fb00 1103 	mla	r1, r0, r3, r1
 8028228:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802822a:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802822e:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028232:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028236:	f1bc 0f00 	cmp.w	ip, #0
 802823a:	d007      	beq.n	802824c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 802823c:	005b      	lsls	r3, r3, #1
 802823e:	eb0a 0003 	add.w	r0, sl, r3
 8028242:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028246:	930c      	str	r3, [sp, #48]	@ 0x30
 8028248:	8843      	ldrh	r3, [r0, #2]
 802824a:	930d      	str	r3, [sp, #52]	@ 0x34
 802824c:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028250:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028254:	fb12 f30c 	smulbb	r3, r2, ip
 8028258:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802825c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028260:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028264:	10db      	asrs	r3, r3, #3
 8028266:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802826a:	ea40 000e 	orr.w	r0, r0, lr
 802826e:	f1cc 0e10 	rsb	lr, ip, #16
 8028272:	ea4a 0101 	orr.w	r1, sl, r1
 8028276:	9f08      	ldr	r7, [sp, #32]
 8028278:	ebae 0e02 	sub.w	lr, lr, r2
 802827c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028280:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028284:	4351      	muls	r1, r2
 8028286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028288:	fb0e 1e00 	mla	lr, lr, r0, r1
 802828c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802828e:	0410      	lsls	r0, r2, #16
 8028290:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028294:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028298:	4310      	orrs	r0, r2
 802829a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802829c:	0412      	lsls	r2, r2, #16
 802829e:	fb03 e000 	mla	r0, r3, r0, lr
 80282a2:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 80282a6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80282aa:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80282ae:	ea42 020e 	orr.w	r2, r2, lr
 80282b2:	fb03 0302 	mla	r3, r3, r2, r0
 80282b6:	f8b8 0000 	ldrh.w	r0, [r8]
 80282ba:	0d5a      	lsrs	r2, r3, #21
 80282bc:	095b      	lsrs	r3, r3, #5
 80282be:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80282c2:	1201      	asrs	r1, r0, #8
 80282c4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 80282c8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80282cc:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80282d0:	00c0      	lsls	r0, r0, #3
 80282d2:	4313      	orrs	r3, r2
 80282d4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80282d8:	fb11 f107 	smulbb	r1, r1, r7
 80282dc:	b2c0      	uxtb	r0, r0
 80282de:	b29b      	uxth	r3, r3
 80282e0:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80282e4:	fb10 f007 	smulbb	r0, r0, r7
 80282e8:	fb1e fe07 	smulbb	lr, lr, r7
 80282ec:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80282f0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80282f4:	fb0c 1c02 	mla	ip, ip, r2, r1
 80282f8:	10d9      	asrs	r1, r3, #3
 80282fa:	00db      	lsls	r3, r3, #3
 80282fc:	fa1f fc8c 	uxth.w	ip, ip
 8028300:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028304:	b2db      	uxtb	r3, r3
 8028306:	fb01 e102 	mla	r1, r1, r2, lr
 802830a:	fb03 0302 	mla	r3, r3, r2, r0
 802830e:	b289      	uxth	r1, r1
 8028310:	b29a      	uxth	r2, r3
 8028312:	f10c 0301 	add.w	r3, ip, #1
 8028316:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802831a:	1c53      	adds	r3, r2, #1
 802831c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028320:	1c4a      	adds	r2, r1, #1
 8028322:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8028326:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802832a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802832e:	0949      	lsrs	r1, r1, #5
 8028330:	ea43 030c 	orr.w	r3, r3, ip
 8028334:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028338:	430b      	orrs	r3, r1
 802833a:	f8a8 3000 	strh.w	r3, [r8]
 802833e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028340:	f108 0802 	add.w	r8, r8, #2
 8028344:	f109 39ff 	add.w	r9, r9, #4294967295
 8028348:	441c      	add	r4, r3
 802834a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802834c:	441e      	add	r6, r3
 802834e:	e74a      	b.n	80281e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 8028350:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028352:	3d01      	subs	r5, #1
 8028354:	441c      	add	r4, r3
 8028356:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028358:	441e      	add	r6, r3
 802835a:	9b07      	ldr	r3, [sp, #28]
 802835c:	3302      	adds	r3, #2
 802835e:	9307      	str	r3, [sp, #28]
 8028360:	e722      	b.n	80281a8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8028362:	d022      	beq.n	80283aa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8028364:	1e6b      	subs	r3, r5, #1
 8028366:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8028368:	fb00 4003 	mla	r0, r0, r3, r4
 802836c:	1400      	asrs	r0, r0, #16
 802836e:	f53f af37 	bmi.w	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028372:	3901      	subs	r1, #1
 8028374:	4288      	cmp	r0, r1
 8028376:	f6bf af33 	bge.w	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802837a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802837c:	fb01 6303 	mla	r3, r1, r3, r6
 8028380:	141b      	asrs	r3, r3, #16
 8028382:	f53f af2d 	bmi.w	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8028386:	3a01      	subs	r2, #1
 8028388:	4293      	cmp	r3, r2
 802838a:	f6bf af29 	bge.w	80281e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802838e:	46a8      	mov	r8, r5
 8028390:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028394:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8028398:	f1b8 0f00 	cmp.w	r8, #0
 802839c:	dc60      	bgt.n	8028460 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802839e:	9b07      	ldr	r3, [sp, #28]
 80283a0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80283a4:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80283a8:	9307      	str	r3, [sp, #28]
 80283aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80283ac:	2b00      	cmp	r3, #0
 80283ae:	f340 80f8 	ble.w	80285a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80283b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80283b6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80283b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80283bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80283c0:	eef0 6a48 	vmov.f32	s13, s16
 80283c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80283c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80283cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283d0:	ee16 4a90 	vmov	r4, s13
 80283d4:	eef0 6a68 	vmov.f32	s13, s17
 80283d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80283dc:	ee16 6a90 	vmov	r6, s13
 80283e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80283e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80283e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80283ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80283f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80283f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80283f8:	ee18 2a10 	vmov	r2, s16
 80283fc:	eeb0 8a47 	vmov.f32	s16, s14
 8028400:	fb92 f3f3 	sdiv	r3, r2, r3
 8028404:	ee18 2a90 	vmov	r2, s17
 8028408:	9327      	str	r3, [sp, #156]	@ 0x9c
 802840a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802840c:	eef0 8a67 	vmov.f32	s17, s15
 8028410:	fb92 f3f3 	sdiv	r3, r2, r3
 8028414:	9328      	str	r3, [sp, #160]	@ 0xa0
 8028416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028418:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802841a:	3b01      	subs	r3, #1
 802841c:	930a      	str	r3, [sp, #40]	@ 0x28
 802841e:	bf08      	it	eq
 8028420:	4615      	moveq	r5, r2
 8028422:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028424:	bf18      	it	ne
 8028426:	461d      	movne	r5, r3
 8028428:	e6af      	b.n	802818a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802842a:	f111 0a01 	adds.w	sl, r1, #1
 802842e:	d486      	bmi.n	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028430:	45d6      	cmp	lr, sl
 8028432:	db84      	blt.n	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028434:	f110 0a01 	adds.w	sl, r0, #1
 8028438:	d481      	bmi.n	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802843a:	4553      	cmp	r3, sl
 802843c:	f6ff af7f 	blt.w	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028440:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8028442:	b21b      	sxth	r3, r3
 8028444:	9101      	str	r1, [sp, #4]
 8028446:	4641      	mov	r1, r8
 8028448:	9300      	str	r3, [sp, #0]
 802844a:	fa0f f38e 	sxth.w	r3, lr
 802844e:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028452:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028458:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802845a:	f7ff fd93 	bl	8027f84 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802845e:	e76e      	b.n	802833e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028460:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8028462:	1430      	asrs	r0, r6, #16
 8028464:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028466:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802846a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802846e:	1423      	asrs	r3, r4, #16
 8028470:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028474:	fb01 3000 	mla	r0, r1, r0, r3
 8028478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802847a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802847e:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028482:	8858      	ldrh	r0, [r3, #2]
 8028484:	f1be 0f00 	cmp.w	lr, #0
 8028488:	d00b      	beq.n	80284a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802848a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 802848e:	3901      	subs	r1, #1
 8028490:	0049      	lsls	r1, r1, #1
 8028492:	3102      	adds	r1, #2
 8028494:	eb03 0b01 	add.w	fp, r3, r1
 8028498:	5a5b      	ldrh	r3, [r3, r1]
 802849a:	930e      	str	r3, [sp, #56]	@ 0x38
 802849c:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80284a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80284a2:	ea4f 410c 	mov.w	r1, ip, lsl #16
 80284a6:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80284aa:	fb12 f30e 	smulbb	r3, r2, lr
 80284ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 80284b2:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 80284b6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80284ba:	10db      	asrs	r3, r3, #3
 80284bc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80284c0:	ea41 010c 	orr.w	r1, r1, ip
 80284c4:	f1ce 0c10 	rsb	ip, lr, #16
 80284c8:	ea4b 0000 	orr.w	r0, fp, r0
 80284cc:	9f08      	ldr	r7, [sp, #32]
 80284ce:	ebac 0c02 	sub.w	ip, ip, r2
 80284d2:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80284d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80284da:	4350      	muls	r0, r2
 80284dc:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80284e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80284e2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80284e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80284e8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80284ec:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 80284f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80284f2:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80284f6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80284fa:	0412      	lsls	r2, r2, #16
 80284fc:	ea4b 0101 	orr.w	r1, fp, r1
 8028500:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028504:	fb03 c101 	mla	r1, r3, r1, ip
 8028508:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802850c:	4302      	orrs	r2, r0
 802850e:	fb03 1202 	mla	r2, r3, r2, r1
 8028512:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8028516:	0952      	lsrs	r2, r2, #5
 8028518:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802851c:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8028520:	f8b9 2000 	ldrh.w	r2, [r9]
 8028524:	ea4b 0303 	orr.w	r3, fp, r3
 8028528:	1211      	asrs	r1, r2, #8
 802852a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802852e:	b29b      	uxth	r3, r3
 8028530:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028534:	00d2      	lsls	r2, r2, #3
 8028536:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 802853a:	fb11 f107 	smulbb	r1, r1, r7
 802853e:	1218      	asrs	r0, r3, #8
 8028540:	fb1c fc07 	smulbb	ip, ip, r7
 8028544:	b2d2      	uxtb	r2, r2
 8028546:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802854a:	fb12 f207 	smulbb	r2, r2, r7
 802854e:	fb00 100a 	mla	r0, r0, sl, r1
 8028552:	10d9      	asrs	r1, r3, #3
 8028554:	00db      	lsls	r3, r3, #3
 8028556:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802855a:	b280      	uxth	r0, r0
 802855c:	b2db      	uxtb	r3, r3
 802855e:	fb01 c10a 	mla	r1, r1, sl, ip
 8028562:	fb03 230a 	mla	r3, r3, sl, r2
 8028566:	1c42      	adds	r2, r0, #1
 8028568:	b289      	uxth	r1, r1
 802856a:	b29b      	uxth	r3, r3
 802856c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028570:	f101 0c01 	add.w	ip, r1, #1
 8028574:	1c5a      	adds	r2, r3, #1
 8028576:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802857a:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802857e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028582:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8028584:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028588:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802858c:	441c      	add	r4, r3
 802858e:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8028592:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028594:	4310      	orrs	r0, r2
 8028596:	441e      	add	r6, r3
 8028598:	ea40 000c 	orr.w	r0, r0, ip
 802859c:	f829 0b02 	strh.w	r0, [r9], #2
 80285a0:	e6fa      	b.n	8028398 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80285a2:	b013      	add	sp, #76	@ 0x4c
 80285a4:	ecbd 8b08 	vpop	{d8-d11}
 80285a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080285ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80285ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80285b0:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 80285b4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 80285b8:	fb06 5c03 	mla	ip, r6, r3, r5
 80285bc:	2e00      	cmp	r6, #0
 80285be:	f89d 4024 	ldrb.w	r4, [sp, #36]	@ 0x24
 80285c2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80285c6:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80285ca:	8808      	ldrh	r0, [r1, #0]
 80285cc:	db2e      	blt.n	802862c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80285ce:	45b0      	cmp	r8, r6
 80285d0:	dd2c      	ble.n	802862c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 80285d2:	2d00      	cmp	r5, #0
 80285d4:	db28      	blt.n	8028628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80285d6:	42ab      	cmp	r3, r5
 80285d8:	dd26      	ble.n	8028628 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 80285da:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 80285de:	1c6a      	adds	r2, r5, #1
 80285e0:	d427      	bmi.n	8028632 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80285e2:	4293      	cmp	r3, r2
 80285e4:	dd25      	ble.n	8028632 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80285e6:	b324      	cbz	r4, 8028632 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 80285e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80285ec:	3601      	adds	r6, #1
 80285ee:	d424      	bmi.n	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80285f0:	45b0      	cmp	r8, r6
 80285f2:	dd22      	ble.n	802863a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80285f4:	b31f      	cbz	r7, 802863e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80285f6:	2d00      	cmp	r5, #0
 80285f8:	db1d      	blt.n	8028636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80285fa:	42ab      	cmp	r3, r5
 80285fc:	dd1b      	ble.n	8028636 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80285fe:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 8028602:	3501      	adds	r5, #1
 8028604:	d405      	bmi.n	8028612 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 8028606:	42ab      	cmp	r3, r5
 8028608:	dd03      	ble.n	8028612 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802860a:	b124      	cbz	r4, 8028616 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 802860c:	3301      	adds	r3, #1
 802860e:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 8028612:	2c0f      	cmp	r4, #15
 8028614:	d801      	bhi.n	802861a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028616:	2f0f      	cmp	r7, #15
 8028618:	d914      	bls.n	8028644 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 802861a:	4b27      	ldr	r3, [pc, #156]	@ (80286b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 802861c:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8028620:	4a26      	ldr	r2, [pc, #152]	@ (80286bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 8028622:	4827      	ldr	r0, [pc, #156]	@ (80286c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 8028624:	f002 fca0 	bl	802af68 <__assert_func>
 8028628:	4684      	mov	ip, r0
 802862a:	e7d8      	b.n	80285de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 802862c:	4602      	mov	r2, r0
 802862e:	4684      	mov	ip, r0
 8028630:	e7dc      	b.n	80285ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028632:	4602      	mov	r2, r0
 8028634:	e7da      	b.n	80285ec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 8028636:	4606      	mov	r6, r0
 8028638:	e7e3      	b.n	8028602 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 802863a:	4606      	mov	r6, r0
 802863c:	e7e9      	b.n	8028612 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 802863e:	2c0f      	cmp	r4, #15
 8028640:	d8eb      	bhi.n	802861a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8028642:	4606      	mov	r6, r0
 8028644:	fb14 f307 	smulbb	r3, r4, r7
 8028648:	ea4f 450c 	mov.w	r5, ip, lsl #16
 802864c:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8028650:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028654:	f005 65fc 	and.w	r5, r5, #132120576	@ 0x7e00000
 8028658:	10db      	asrs	r3, r3, #3
 802865a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 802865e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028662:	ea45 0c0c 	orr.w	ip, r5, ip
 8028666:	f1c7 0510 	rsb	r5, r7, #16
 802866a:	ea4e 0202 	orr.w	r2, lr, r2
 802866e:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 8028672:	1b2d      	subs	r5, r5, r4
 8028674:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8028678:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 802867c:	4354      	muls	r4, r2
 802867e:	fb05 450c 	mla	r5, r5, ip, r4
 8028682:	0404      	lsls	r4, r0, #16
 8028684:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028688:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 802868c:	4320      	orrs	r0, r4
 802868e:	fb03 5400 	mla	r4, r3, r0, r5
 8028692:	0430      	lsls	r0, r6, #16
 8028694:	f426 66fc 	bic.w	r6, r6, #2016	@ 0x7e0
 8028698:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802869c:	4330      	orrs	r0, r6
 802869e:	fb07 4000 	mla	r0, r7, r0, r4
 80286a2:	0d43      	lsrs	r3, r0, #21
 80286a4:	0940      	lsrs	r0, r0, #5
 80286a6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80286aa:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80286ae:	4318      	orrs	r0, r3
 80286b0:	8008      	strh	r0, [r1, #0]
 80286b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80286b6:	bf00      	nop
 80286b8:	08030109 	.word	0x08030109
 80286bc:	0803077f 	.word	0x0803077f
 80286c0:	0803018d 	.word	0x0803018d

080286c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80286c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286c8:	ed2d 8b08 	vpush	{d8-d11}
 80286cc:	b08f      	sub	sp, #60	@ 0x3c
 80286ce:	461d      	mov	r5, r3
 80286d0:	eeb0 aa40 	vmov.f32	s20, s0
 80286d4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80286d6:	eef0 9a60 	vmov.f32	s19, s1
 80286da:	9107      	str	r1, [sp, #28]
 80286dc:	eeb0 9a41 	vmov.f32	s18, s2
 80286e0:	6859      	ldr	r1, [r3, #4]
 80286e2:	eeb0 8a62 	vmov.f32	s16, s5
 80286e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80286e8:	eef0 8a43 	vmov.f32	s17, s6
 80286ec:	681b      	ldr	r3, [r3, #0]
 80286ee:	eef0 ba44 	vmov.f32	s23, s8
 80286f2:	eeb0 ba64 	vmov.f32	s22, s9
 80286f6:	900d      	str	r0, [sp, #52]	@ 0x34
 80286f8:	eef0 aa45 	vmov.f32	s21, s10
 80286fc:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	@ 0x98
 8028700:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 8028704:	fb01 2707 	mla	r7, r1, r7, r2
 8028708:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802870c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802870e:	f8d3 8000 	ldr.w	r8, [r3]
 8028712:	9b07      	ldr	r3, [sp, #28]
 8028714:	2b00      	cmp	r3, #0
 8028716:	dc03      	bgt.n	8028720 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802871a:	2b00      	cmp	r3, #0
 802871c:	f340 8182 	ble.w	8028a24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8028720:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028722:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028726:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802872a:	1e48      	subs	r0, r1, #1
 802872c:	f102 3cff 	add.w	ip, r2, #4294967295
 8028730:	2d00      	cmp	r5, #0
 8028732:	f340 809b 	ble.w	802886c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 8028736:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802873a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802873e:	d406      	bmi.n	802874e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028740:	4586      	cmp	lr, r0
 8028742:	da04      	bge.n	802874e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028744:	2b00      	cmp	r3, #0
 8028746:	db02      	blt.n	802874e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8028748:	4563      	cmp	r3, ip
 802874a:	f2c0 8090 	blt.w	802886e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 802874e:	f11e 0e01 	adds.w	lr, lr, #1
 8028752:	f100 8084 	bmi.w	802885e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028756:	4571      	cmp	r1, lr
 8028758:	f2c0 8081 	blt.w	802885e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802875c:	3301      	adds	r3, #1
 802875e:	d47e      	bmi.n	802885e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028760:	429a      	cmp	r2, r3
 8028762:	db7c      	blt.n	802885e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8028764:	46aa      	mov	sl, r5
 8028766:	46b9      	mov	r9, r7
 8028768:	f1ba 0f00 	cmp.w	sl, #0
 802876c:	f340 8099 	ble.w	80288a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8028770:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8028772:	1421      	asrs	r1, r4, #16
 8028774:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028778:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802877c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028780:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028784:	f100 80d1 	bmi.w	802892a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028788:	f10e 3bff 	add.w	fp, lr, #4294967295
 802878c:	4559      	cmp	r1, fp
 802878e:	f280 80cc 	bge.w	802892a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028792:	2800      	cmp	r0, #0
 8028794:	f2c0 80c9 	blt.w	802892a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8028798:	f103 3bff 	add.w	fp, r3, #4294967295
 802879c:	4558      	cmp	r0, fp
 802879e:	f280 80c4 	bge.w	802892a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 80287a2:	fa0f fe8e 	sxth.w	lr, lr
 80287a6:	fb00 110e 	mla	r1, r0, lr, r1
 80287aa:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80287ae:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80287b2:	8841      	ldrh	r1, [r0, #2]
 80287b4:	f1bc 0f00 	cmp.w	ip, #0
 80287b8:	d00b      	beq.n	80287d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80287ba:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 80287be:	3b01      	subs	r3, #1
 80287c0:	005b      	lsls	r3, r3, #1
 80287c2:	3302      	adds	r3, #2
 80287c4:	eb00 0e03 	add.w	lr, r0, r3
 80287c8:	5ac3      	ldrh	r3, [r0, r3]
 80287ca:	9308      	str	r3, [sp, #32]
 80287cc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80287d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80287d2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80287d6:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80287da:	fb12 f30c 	smulbb	r3, r2, ip
 80287de:	f1cc 0e10 	rsb	lr, ip, #16
 80287e2:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80287e6:	10db      	asrs	r3, r3, #3
 80287e8:	ebae 0e02 	sub.w	lr, lr, r2
 80287ec:	ea40 000b 	orr.w	r0, r0, fp
 80287f0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80287f4:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80287f8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80287fc:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028800:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028804:	ea4b 0101 	orr.w	r1, fp, r1
 8028808:	4351      	muls	r1, r2
 802880a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802880c:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028810:	0410      	lsls	r0, r2, #16
 8028812:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028816:	9908      	ldr	r1, [sp, #32]
 8028818:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802881c:	4310      	orrs	r0, r2
 802881e:	9a08      	ldr	r2, [sp, #32]
 8028820:	0412      	lsls	r2, r2, #16
 8028822:	fb03 e000 	mla	r0, r3, r0, lr
 8028826:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 802882a:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802882e:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028832:	ea42 020e 	orr.w	r2, r2, lr
 8028836:	fb03 0302 	mla	r3, r3, r2, r0
 802883a:	0d5a      	lsrs	r2, r3, #21
 802883c:	095b      	lsrs	r3, r3, #5
 802883e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028842:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028846:	4313      	orrs	r3, r2
 8028848:	f8a9 3000 	strh.w	r3, [r9]
 802884c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802884e:	f109 0902 	add.w	r9, r9, #2
 8028852:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028856:	441c      	add	r4, r3
 8028858:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802885a:	441e      	add	r6, r3
 802885c:	e784      	b.n	8028768 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802885e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028860:	3d01      	subs	r5, #1
 8028862:	3702      	adds	r7, #2
 8028864:	441c      	add	r4, r3
 8028866:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028868:	441e      	add	r6, r3
 802886a:	e761      	b.n	8028730 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802886c:	d01d      	beq.n	80288aa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802886e:	1e6b      	subs	r3, r5, #1
 8028870:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8028872:	fb00 4003 	mla	r0, r0, r3, r4
 8028876:	1400      	asrs	r0, r0, #16
 8028878:	f53f af74 	bmi.w	8028764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802887c:	3901      	subs	r1, #1
 802887e:	4288      	cmp	r0, r1
 8028880:	f6bf af70 	bge.w	8028764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028884:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8028886:	fb01 6303 	mla	r3, r1, r3, r6
 802888a:	141b      	asrs	r3, r3, #16
 802888c:	f53f af6a 	bmi.w	8028764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028890:	3a01      	subs	r2, #1
 8028892:	4293      	cmp	r3, r2
 8028894:	f6bf af66 	bge.w	8028764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8028898:	46a9      	mov	r9, r5
 802889a:	46ba      	mov	sl, r7
 802889c:	f1b9 0f00 	cmp.w	r9, #0
 80288a0:	dc5b      	bgt.n	802895a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80288a2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80288a6:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80288aa:	9b07      	ldr	r3, [sp, #28]
 80288ac:	2b00      	cmp	r3, #0
 80288ae:	f340 80b9 	ble.w	8028a24 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80288b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80288b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80288b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80288bc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80288c0:	eef0 6a48 	vmov.f32	s13, s16
 80288c4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80288c8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80288cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288d0:	ee16 4a90 	vmov	r4, s13
 80288d4:	eef0 6a68 	vmov.f32	s13, s17
 80288d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80288dc:	ee16 6a90 	vmov	r6, s13
 80288e0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80288e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80288e8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80288ec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80288f0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80288f4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80288f8:	ee18 2a10 	vmov	r2, s16
 80288fc:	eeb0 8a47 	vmov.f32	s16, s14
 8028900:	fb92 f3f3 	sdiv	r3, r2, r3
 8028904:	ee18 2a90 	vmov	r2, s17
 8028908:	9323      	str	r3, [sp, #140]	@ 0x8c
 802890a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802890c:	eef0 8a67 	vmov.f32	s17, s15
 8028910:	fb92 f3f3 	sdiv	r3, r2, r3
 8028914:	9324      	str	r3, [sp, #144]	@ 0x90
 8028916:	9b07      	ldr	r3, [sp, #28]
 8028918:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802891a:	3b01      	subs	r3, #1
 802891c:	9307      	str	r3, [sp, #28]
 802891e:	bf08      	it	eq
 8028920:	4615      	moveq	r5, r2
 8028922:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028924:	bf18      	it	ne
 8028926:	461d      	movne	r5, r3
 8028928:	e6f3      	b.n	8028712 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802892a:	f111 0b01 	adds.w	fp, r1, #1
 802892e:	d48d      	bmi.n	802884c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028930:	45de      	cmp	lr, fp
 8028932:	db8b      	blt.n	802884c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8028934:	f110 0b01 	adds.w	fp, r0, #1
 8028938:	d488      	bmi.n	802884c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802893a:	455b      	cmp	r3, fp
 802893c:	db86      	blt.n	802884c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802893e:	b21b      	sxth	r3, r3
 8028940:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8028944:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8028948:	9300      	str	r3, [sp, #0]
 802894a:	4642      	mov	r2, r8
 802894c:	fa0f f38e 	sxth.w	r3, lr
 8028950:	4649      	mov	r1, r9
 8028952:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8028954:	f7ff fe2a 	bl	80285ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8028958:	e778      	b.n	802884c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802895a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802895c:	1420      	asrs	r0, r4, #16
 802895e:	1431      	asrs	r1, r6, #16
 8028960:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8028968:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802896c:	fb03 0101 	mla	r1, r3, r1, r0
 8028970:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8028974:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8028978:	8841      	ldrh	r1, [r0, #2]
 802897a:	f1be 0f00 	cmp.w	lr, #0
 802897e:	d00b      	beq.n	8028998 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8028980:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8028984:	3b01      	subs	r3, #1
 8028986:	005b      	lsls	r3, r3, #1
 8028988:	3302      	adds	r3, #2
 802898a:	eb00 0b03 	add.w	fp, r0, r3
 802898e:	5ac3      	ldrh	r3, [r0, r3]
 8028990:	930a      	str	r3, [sp, #40]	@ 0x28
 8028992:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028998:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802899c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 80289a0:	fb12 f30e 	smulbb	r3, r2, lr
 80289a4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80289a8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80289ac:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80289b0:	10db      	asrs	r3, r3, #3
 80289b2:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80289b6:	ea40 000c 	orr.w	r0, r0, ip
 80289ba:	f1ce 0c10 	rsb	ip, lr, #16
 80289be:	ea4b 0101 	orr.w	r1, fp, r1
 80289c2:	f109 39ff 	add.w	r9, r9, #4294967295
 80289c6:	ebac 0c02 	sub.w	ip, ip, r2
 80289ca:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80289ce:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80289d2:	4351      	muls	r1, r2
 80289d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80289d6:	fb0c 1c00 	mla	ip, ip, r0, r1
 80289da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80289dc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80289e0:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80289e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80289e6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80289ea:	0412      	lsls	r2, r2, #16
 80289ec:	ea4b 0000 	orr.w	r0, fp, r0
 80289f0:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80289f4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80289f8:	fb03 c000 	mla	r0, r3, r0, ip
 80289fc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8028a00:	ea42 0b0b 	orr.w	fp, r2, fp
 8028a04:	fb03 000b 	mla	r0, r3, fp, r0
 8028a08:	0d43      	lsrs	r3, r0, #21
 8028a0a:	0940      	lsrs	r0, r0, #5
 8028a0c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028a10:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028a14:	4318      	orrs	r0, r3
 8028a16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8028a18:	441c      	add	r4, r3
 8028a1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028a1c:	f82a 0b02 	strh.w	r0, [sl], #2
 8028a20:	441e      	add	r6, r3
 8028a22:	e73b      	b.n	802889c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028a24:	b00f      	add	sp, #60	@ 0x3c
 8028a26:	ecbd 8b08 	vpop	{d8-d11}
 8028a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8028a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028a34:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8028a38:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8028a3c:	fb04 5603 	mla	r6, r4, r3, r5
 8028a40:	2c00      	cmp	r4, #0
 8028a42:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8028a46:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 8028a4a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8028a4e:	db36      	blt.n	8028abe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8028a50:	45a6      	cmp	lr, r4
 8028a52:	dd34      	ble.n	8028abe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8028a54:	2d00      	cmp	r5, #0
 8028a56:	db30      	blt.n	8028aba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028a58:	42ab      	cmp	r3, r5
 8028a5a:	dd2e      	ble.n	8028aba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8028a5c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8028a60:	1c6e      	adds	r6, r5, #1
 8028a62:	d42f      	bmi.n	8028ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028a64:	42b3      	cmp	r3, r6
 8028a66:	dd2d      	ble.n	8028ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8028a68:	b370      	cbz	r0, 8028ac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8028a6a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8028a6e:	3401      	adds	r4, #1
 8028a70:	d42e      	bmi.n	8028ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028a72:	45a6      	cmp	lr, r4
 8028a74:	dd2c      	ble.n	8028ad0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8028a76:	b377      	cbz	r7, 8028ad6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8028a78:	2d00      	cmp	r5, #0
 8028a7a:	db27      	blt.n	8028acc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028a7c:	42ab      	cmp	r3, r5
 8028a7e:	dd25      	ble.n	8028acc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8028a80:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028a84:	3501      	adds	r5, #1
 8028a86:	d429      	bmi.n	8028adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028a88:	42ab      	cmp	r3, r5
 8028a8a:	dd27      	ble.n	8028adc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8028a8c:	b340      	cbz	r0, 8028ae0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 8028a8e:	3301      	adds	r3, #1
 8028a90:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8028a94:	280f      	cmp	r0, #15
 8028a96:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028a9a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8028a9e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028aa2:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028aa6:	d801      	bhi.n	8028aac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8028aa8:	2f0f      	cmp	r7, #15
 8028aaa:	d91b      	bls.n	8028ae4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8028aac:	4b8d      	ldr	r3, [pc, #564]	@ (8028ce4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 8028aae:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8028ab2:	4a8d      	ldr	r2, [pc, #564]	@ (8028ce8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8028ab4:	488d      	ldr	r0, [pc, #564]	@ (8028cec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8028ab6:	f002 fa57 	bl	802af68 <__assert_func>
 8028aba:	2200      	movs	r2, #0
 8028abc:	e7d0      	b.n	8028a60 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 8028abe:	2600      	movs	r6, #0
 8028ac0:	4632      	mov	r2, r6
 8028ac2:	e7d4      	b.n	8028a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028ac4:	2600      	movs	r6, #0
 8028ac6:	e7d2      	b.n	8028a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028ac8:	4606      	mov	r6, r0
 8028aca:	e7d0      	b.n	8028a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8028acc:	2400      	movs	r4, #0
 8028ace:	e7d9      	b.n	8028a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 8028ad0:	2300      	movs	r3, #0
 8028ad2:	461c      	mov	r4, r3
 8028ad4:	e7de      	b.n	8028a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028ad6:	463b      	mov	r3, r7
 8028ad8:	463c      	mov	r4, r7
 8028ada:	e7db      	b.n	8028a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028adc:	2300      	movs	r3, #0
 8028ade:	e7d9      	b.n	8028a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028ae0:	4603      	mov	r3, r0
 8028ae2:	e7d7      	b.n	8028a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8028ae4:	b280      	uxth	r0, r0
 8028ae6:	b2bf      	uxth	r7, r7
 8028ae8:	fb07 fe00 	mul.w	lr, r7, r0
 8028aec:	0100      	lsls	r0, r0, #4
 8028aee:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8028af2:	eba0 0c0e 	sub.w	ip, r0, lr
 8028af6:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 8028afa:	b2bf      	uxth	r7, r7
 8028afc:	fa1f fc8c 	uxth.w	ip, ip
 8028b00:	1bed      	subs	r5, r5, r7
 8028b02:	fb0a f00c 	mul.w	r0, sl, ip
 8028b06:	b2ad      	uxth	r5, r5
 8028b08:	fb0b 0005 	mla	r0, fp, r5, r0
 8028b0c:	fb07 0009 	mla	r0, r7, r9, r0
 8028b10:	fb0e 0008 	mla	r0, lr, r8, r0
 8028b14:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028b18:	9001      	str	r0, [sp, #4]
 8028b1a:	2800      	cmp	r0, #0
 8028b1c:	f000 80de 	beq.w	8028cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 8028b20:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8028b24:	d018      	beq.n	8028b58 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 8028b26:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 8028b2a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028b2e:	fb0b f000 	mul.w	r0, fp, r0
 8028b32:	fb0b fb02 	mul.w	fp, fp, r2
 8028b36:	0a02      	lsrs	r2, r0, #8
 8028b38:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028b3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028b40:	4402      	add	r2, r0
 8028b42:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8028b46:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028b4a:	0a12      	lsrs	r2, r2, #8
 8028b4c:	0a00      	lsrs	r0, r0, #8
 8028b4e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028b52:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8028b56:	4302      	orrs	r2, r0
 8028b58:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8028b5c:	d01a      	beq.n	8028b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8028b5e:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 8028b62:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028b66:	fb0a f000 	mul.w	r0, sl, r0
 8028b6a:	fb0a fa06 	mul.w	sl, sl, r6
 8028b6e:	0a06      	lsrs	r6, r0, #8
 8028b70:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8028b74:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028b78:	4406      	add	r6, r0
 8028b7a:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8028b7e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028b82:	0a36      	lsrs	r6, r6, #8
 8028b84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b88:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 8028b8c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028b90:	ea46 060a 	orr.w	r6, r6, sl
 8028b94:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8028b98:	d01b      	beq.n	8028bd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8028b9a:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 8028b9e:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028ba2:	fb09 fa0a 	mul.w	sl, r9, sl
 8028ba6:	fb09 f004 	mul.w	r0, r9, r4
 8028baa:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8028bae:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028bb2:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 8028bb6:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028bba:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8028bbe:	4454      	add	r4, sl
 8028bc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028bc4:	0a24      	lsrs	r4, r4, #8
 8028bc6:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028bca:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 8028bce:	ea44 0409 	orr.w	r4, r4, r9
 8028bd2:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8028bd6:	d01b      	beq.n	8028c10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8028bd8:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 8028bdc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028be0:	fb08 f909 	mul.w	r9, r8, r9
 8028be4:	fb08 f003 	mul.w	r0, r8, r3
 8028be8:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8028bec:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8028bf0:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 8028bf4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028bf8:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8028bfc:	444b      	add	r3, r9
 8028bfe:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028c02:	0a1b      	lsrs	r3, r3, #8
 8028c04:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8028c08:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8028c0c:	ea43 0308 	orr.w	r3, r3, r8
 8028c10:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8028c14:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8028c18:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 8028c1c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028c20:	fb0c f808 	mul.w	r8, ip, r8
 8028c24:	8808      	ldrh	r0, [r1, #0]
 8028c26:	fb0c f606 	mul.w	r6, ip, r6
 8028c2a:	fb05 8909 	mla	r9, r5, r9, r8
 8028c2e:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8028c32:	fb05 6502 	mla	r5, r5, r2, r6
 8028c36:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8028c3a:	fb07 9908 	mla	r9, r7, r8, r9
 8028c3e:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8028c42:	fb07 5704 	mla	r7, r7, r4, r5
 8028c46:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8028c4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8028c4e:	b2b6      	uxth	r6, r6
 8028c50:	fb0e 9808 	mla	r8, lr, r8, r9
 8028c54:	9a01      	ldr	r2, [sp, #4]
 8028c56:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028c5a:	1205      	asrs	r5, r0, #8
 8028c5c:	4372      	muls	r2, r6
 8028c5e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028c62:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028c66:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028c6a:	1c53      	adds	r3, r2, #1
 8028c6c:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 8028c70:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8028c74:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028c78:	ea48 0e0e 	orr.w	lr, r8, lr
 8028c7c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8028c80:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8028c84:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8028c88:	b2db      	uxtb	r3, r3
 8028c8a:	fb12 f206 	smulbb	r2, r2, r6
 8028c8e:	fa5f fe8e 	uxtb.w	lr, lr
 8028c92:	fb14 f406 	smulbb	r4, r4, r6
 8028c96:	fb05 2503 	mla	r5, r5, r3, r2
 8028c9a:	10c2      	asrs	r2, r0, #3
 8028c9c:	fb1e fe06 	smulbb	lr, lr, r6
 8028ca0:	00c0      	lsls	r0, r0, #3
 8028ca2:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028ca6:	b2ad      	uxth	r5, r5
 8028ca8:	b2c0      	uxtb	r0, r0
 8028caa:	fb02 4203 	mla	r2, r2, r3, r4
 8028cae:	fb00 e303 	mla	r3, r0, r3, lr
 8028cb2:	b294      	uxth	r4, r2
 8028cb4:	b298      	uxth	r0, r3
 8028cb6:	1c6b      	adds	r3, r5, #1
 8028cb8:	1c62      	adds	r2, r4, #1
 8028cba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028cbe:	1c43      	adds	r3, r0, #1
 8028cc0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8028cc4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028cc8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028ccc:	0952      	lsrs	r2, r2, #5
 8028cce:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028cd2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028cd6:	432b      	orrs	r3, r5
 8028cd8:	4313      	orrs	r3, r2
 8028cda:	800b      	strh	r3, [r1, #0]
 8028cdc:	b003      	add	sp, #12
 8028cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028ce2:	bf00      	nop
 8028ce4:	08030109 	.word	0x08030109
 8028ce8:	080306d6 	.word	0x080306d6
 8028cec:	0803018d 	.word	0x0803018d

08028cf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cf4:	ed2d 8b08 	vpush	{d8-d11}
 8028cf8:	b09d      	sub	sp, #116	@ 0x74
 8028cfa:	eeb0 aa40 	vmov.f32	s20, s0
 8028cfe:	eef0 9a60 	vmov.f32	s19, s1
 8028d02:	9219      	str	r2, [sp, #100]	@ 0x64
 8028d04:	eeb0 9a41 	vmov.f32	s18, s2
 8028d08:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 8028d0a:	eeb0 8a62 	vmov.f32	s16, s5
 8028d0e:	9307      	str	r3, [sp, #28]
 8028d10:	eef0 8a43 	vmov.f32	s17, s6
 8028d14:	f89d 30dc 	ldrb.w	r3, [sp, #220]	@ 0xdc
 8028d18:	eef0 ba44 	vmov.f32	s23, s8
 8028d1c:	901b      	str	r0, [sp, #108]	@ 0x6c
 8028d1e:	eeb0 ba64 	vmov.f32	s22, s9
 8028d22:	931a      	str	r3, [sp, #104]	@ 0x68
 8028d24:	eef0 aa45 	vmov.f32	s21, s10
 8028d28:	6850      	ldr	r0, [r2, #4]
 8028d2a:	9117      	str	r1, [sp, #92]	@ 0x5c
 8028d2c:	6812      	ldr	r2, [r2, #0]
 8028d2e:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	@ 0xd0
 8028d32:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	@ 0xbc
 8028d36:	fb00 1303 	mla	r3, r0, r3, r1
 8028d3a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028d3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8028d40:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028d42:	681b      	ldr	r3, [r3, #0]
 8028d44:	9310      	str	r3, [sp, #64]	@ 0x40
 8028d46:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8028d4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8028d4c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8028d4e:	2b00      	cmp	r3, #0
 8028d50:	dc03      	bgt.n	8028d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8028d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8028d54:	2b00      	cmp	r3, #0
 8028d56:	f340 8375 	ble.w	8029444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8028d5a:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028d5c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028d60:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028d64:	1e48      	subs	r0, r1, #1
 8028d66:	1e57      	subs	r7, r2, #1
 8028d68:	9b07      	ldr	r3, [sp, #28]
 8028d6a:	2b00      	cmp	r3, #0
 8028d6c:	f340 818e 	ble.w	802908c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8028d70:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028d74:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028d78:	d406      	bmi.n	8028d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d7a:	4584      	cmp	ip, r0
 8028d7c:	da04      	bge.n	8028d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	db02      	blt.n	8028d88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028d82:	42bb      	cmp	r3, r7
 8028d84:	f2c0 8183 	blt.w	802908e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8028d88:	f11c 0c01 	adds.w	ip, ip, #1
 8028d8c:	f100 8173 	bmi.w	8029076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d90:	4561      	cmp	r1, ip
 8028d92:	f2c0 8170 	blt.w	8029076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d96:	3301      	adds	r3, #1
 8028d98:	f100 816d 	bmi.w	8029076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028d9c:	429a      	cmp	r2, r3
 8028d9e:	f2c0 816a 	blt.w	8029076 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8028da2:	9b07      	ldr	r3, [sp, #28]
 8028da4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8028da6:	9318      	str	r3, [sp, #96]	@ 0x60
 8028da8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8028daa:	2b00      	cmp	r3, #0
 8028dac:	f340 818c 	ble.w	80290c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8028db0:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
 8028db2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8028db6:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8028db8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8028dbc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028dc0:	1422      	asrs	r2, r4, #16
 8028dc2:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028dc6:	689b      	ldr	r3, [r3, #8]
 8028dc8:	f100 81cd 	bmi.w	8029166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028dcc:	f103 38ff 	add.w	r8, r3, #4294967295
 8028dd0:	4542      	cmp	r2, r8
 8028dd2:	f280 81c8 	bge.w	8029166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028dd6:	f1bc 0f00 	cmp.w	ip, #0
 8028dda:	f2c0 81c4 	blt.w	8029166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028dde:	f10e 38ff 	add.w	r8, lr, #4294967295
 8028de2:	45c4      	cmp	ip, r8
 8028de4:	f280 81bf 	bge.w	8029166 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8028de8:	b21b      	sxth	r3, r3
 8028dea:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8028dec:	fb0c 2203 	mla	r2, ip, r3, r2
 8028df0:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028df4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028df8:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028dfc:	2800      	cmp	r0, #0
 8028dfe:	f000 81a9 	beq.w	8029154 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8028e02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028e06:	950c      	str	r5, [sp, #48]	@ 0x30
 8028e08:	0e2d      	lsrs	r5, r5, #24
 8028e0a:	9513      	str	r5, [sp, #76]	@ 0x4c
 8028e0c:	b181      	cbz	r1, 8028e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028e0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8028e12:	3b01      	subs	r3, #1
 8028e14:	009b      	lsls	r3, r3, #2
 8028e16:	3304      	adds	r3, #4
 8028e18:	eb08 0c03 	add.w	ip, r8, r3
 8028e1c:	f858 3003 	ldr.w	r3, [r8, r3]
 8028e20:	9308      	str	r3, [sp, #32]
 8028e22:	0e1b      	lsrs	r3, r3, #24
 8028e24:	9311      	str	r3, [sp, #68]	@ 0x44
 8028e26:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028e2a:	930d      	str	r3, [sp, #52]	@ 0x34
 8028e2c:	0e1b      	lsrs	r3, r3, #24
 8028e2e:	9314      	str	r3, [sp, #80]	@ 0x50
 8028e30:	b280      	uxth	r0, r0
 8028e32:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028e34:	b289      	uxth	r1, r1
 8028e36:	fb00 f901 	mul.w	r9, r0, r1
 8028e3a:	0100      	lsls	r0, r0, #4
 8028e3c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8028e40:	eba0 0809 	sub.w	r8, r0, r9
 8028e44:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028e48:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8028e4a:	b289      	uxth	r1, r1
 8028e4c:	fa1f f888 	uxth.w	r8, r8
 8028e50:	1a5b      	subs	r3, r3, r1
 8028e52:	fb08 f000 	mul.w	r0, r8, r0
 8028e56:	b29b      	uxth	r3, r3
 8028e58:	fb03 000e 	mla	r0, r3, lr, r0
 8028e5c:	fb01 0005 	mla	r0, r1, r5, r0
 8028e60:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028e62:	fb09 0005 	mla	r0, r9, r5, r0
 8028e66:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028e6a:	2800      	cmp	r0, #0
 8028e6c:	f000 80fa 	beq.w	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028e70:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8028e74:	d01b      	beq.n	8028eae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8028e76:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8028e7a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028e7e:	fb0e fa0a 	mul.w	sl, lr, sl
 8028e82:	fb0e fe02 	mul.w	lr, lr, r2
 8028e86:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028e8a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8028e8e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8028e92:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028e96:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028e9a:	4452      	add	r2, sl
 8028e9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ea0:	0a12      	lsrs	r2, r2, #8
 8028ea2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8028ea6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8028eaa:	ea42 020c 	orr.w	r2, r2, ip
 8028eae:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028eb0:	2dff      	cmp	r5, #255	@ 0xff
 8028eb2:	d021      	beq.n	8028ef8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8028eb4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028eb6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028eba:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028ebc:	fb05 fb0b 	mul.w	fp, r5, fp
 8028ec0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028ec2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028ec6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8028ec8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028ecc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028ed0:	fb05 fa0a 	mul.w	sl, r5, sl
 8028ed4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028ed8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028edc:	44de      	add	lr, fp
 8028ede:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028ee2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028ee6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028eea:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028eee:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028ef2:	ea4e 050a 	orr.w	r5, lr, sl
 8028ef6:	950c      	str	r5, [sp, #48]	@ 0x30
 8028ef8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028efa:	2dff      	cmp	r5, #255	@ 0xff
 8028efc:	d021      	beq.n	8028f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8028efe:	9d08      	ldr	r5, [sp, #32]
 8028f00:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028f04:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028f06:	fb05 fb0b 	mul.w	fp, r5, fp
 8028f0a:	9d08      	ldr	r5, [sp, #32]
 8028f0c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028f10:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8028f12:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028f16:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028f1a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f1e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028f22:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028f26:	44de      	add	lr, fp
 8028f28:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028f2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028f30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f34:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028f38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028f3c:	ea4e 050a 	orr.w	r5, lr, sl
 8028f40:	9508      	str	r5, [sp, #32]
 8028f42:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028f44:	2dff      	cmp	r5, #255	@ 0xff
 8028f46:	d021      	beq.n	8028f8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8028f48:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028f4a:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8028f4e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028f50:	fb05 fb0b 	mul.w	fp, r5, fp
 8028f54:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028f56:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8028f5a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8028f5c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028f60:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8028f64:	fb05 fa0a 	mul.w	sl, r5, sl
 8028f68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028f6c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8028f70:	44de      	add	lr, fp
 8028f72:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028f76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028f7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028f7e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8028f82:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8028f86:	ea4e 050a 	orr.w	r5, lr, sl
 8028f8a:	950d      	str	r5, [sp, #52]	@ 0x34
 8028f8c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028f8e:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8028f92:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8028f96:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8028f9a:	9d08      	ldr	r5, [sp, #32]
 8028f9c:	fb08 fc0c 	mul.w	ip, r8, ip
 8028fa0:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028fa4:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028fa8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8028faa:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028fae:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8028fb2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8028fb4:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028fb8:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8028fbc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8028fbe:	fb08 f80e 	mul.w	r8, r8, lr
 8028fc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028fc6:	fb03 8202 	mla	r2, r3, r2, r8
 8028fca:	9b08      	ldr	r3, [sp, #32]
 8028fcc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8028fd0:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8028fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8028fd6:	fb01 220a 	mla	r2, r1, sl, r2
 8028fda:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8028fde:	883b      	ldrh	r3, [r7, #0]
 8028fe0:	fb09 2901 	mla	r9, r9, r1, r2
 8028fe4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8028fe6:	1219      	asrs	r1, r3, #8
 8028fe8:	4342      	muls	r2, r0
 8028fea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028fee:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028ff2:	1c50      	adds	r0, r2, #1
 8028ff4:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8028ff8:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028ffc:	ea4c 0c09 	orr.w	ip, ip, r9
 8029000:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029004:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029008:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802900c:	fa5f fc8c 	uxtb.w	ip, ip
 8029010:	fb12 f205 	smulbb	r2, r2, r5
 8029014:	b2c0      	uxtb	r0, r0
 8029016:	fb1c fc05 	smulbb	ip, ip, r5
 802901a:	fb01 2100 	mla	r1, r1, r0, r2
 802901e:	10da      	asrs	r2, r3, #3
 8029020:	fb1e fe05 	smulbb	lr, lr, r5
 8029024:	00db      	lsls	r3, r3, #3
 8029026:	b289      	uxth	r1, r1
 8029028:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802902c:	b2db      	uxtb	r3, r3
 802902e:	fb02 e200 	mla	r2, r2, r0, lr
 8029032:	fb03 c300 	mla	r3, r3, r0, ip
 8029036:	b292      	uxth	r2, r2
 8029038:	fa1f fc83 	uxth.w	ip, r3
 802903c:	1c4b      	adds	r3, r1, #1
 802903e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029042:	f10c 0301 	add.w	r3, ip, #1
 8029046:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802904a:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802904e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029052:	430b      	orrs	r3, r1
 8029054:	1c51      	adds	r1, r2, #1
 8029056:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802905a:	0952      	lsrs	r2, r2, #5
 802905c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029060:	4313      	orrs	r3, r2
 8029062:	803b      	strh	r3, [r7, #0]
 8029064:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8029066:	3702      	adds	r7, #2
 8029068:	441c      	add	r4, r3
 802906a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 802906c:	441e      	add	r6, r3
 802906e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029070:	3b01      	subs	r3, #1
 8029072:	9318      	str	r3, [sp, #96]	@ 0x60
 8029074:	e698      	b.n	8028da8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8029076:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8029078:	441c      	add	r4, r3
 802907a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 802907c:	441e      	add	r6, r3
 802907e:	9b07      	ldr	r3, [sp, #28]
 8029080:	3b01      	subs	r3, #1
 8029082:	9307      	str	r3, [sp, #28]
 8029084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029086:	3302      	adds	r3, #2
 8029088:	930a      	str	r3, [sp, #40]	@ 0x28
 802908a:	e66d      	b.n	8028d68 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802908c:	d023      	beq.n	80290d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802908e:	9b07      	ldr	r3, [sp, #28]
 8029090:	9831      	ldr	r0, [sp, #196]	@ 0xc4
 8029092:	3b01      	subs	r3, #1
 8029094:	fb00 4003 	mla	r0, r0, r3, r4
 8029098:	1400      	asrs	r0, r0, #16
 802909a:	f53f ae82 	bmi.w	8028da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802909e:	3901      	subs	r1, #1
 80290a0:	4288      	cmp	r0, r1
 80290a2:	f6bf ae7e 	bge.w	8028da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80290a6:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 80290a8:	fb01 6303 	mla	r3, r1, r3, r6
 80290ac:	141b      	asrs	r3, r3, #16
 80290ae:	f53f ae78 	bmi.w	8028da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80290b2:	3a01      	subs	r2, #1
 80290b4:	4293      	cmp	r3, r2
 80290b6:	f6bf ae74 	bge.w	8028da2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80290ba:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80290be:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80290c2:	f1bb 0f00 	cmp.w	fp, #0
 80290c6:	dc6c      	bgt.n	80291a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80290c8:	9b07      	ldr	r3, [sp, #28]
 80290ca:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80290ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80290d0:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80290d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80290d6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80290d8:	2b00      	cmp	r3, #0
 80290da:	f340 81b3 	ble.w	8029444 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 80290de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80290e2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80290e4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80290e8:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80290ec:	eef0 6a48 	vmov.f32	s13, s16
 80290f0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80290f4:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80290f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80290fc:	ee16 4a90 	vmov	r4, s13
 8029100:	eef0 6a68 	vmov.f32	s13, s17
 8029104:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029108:	ee16 6a90 	vmov	r6, s13
 802910c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029110:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029114:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029118:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802911c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029120:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029124:	ee18 2a10 	vmov	r2, s16
 8029128:	eeb0 8a47 	vmov.f32	s16, s14
 802912c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029130:	ee18 2a90 	vmov	r2, s17
 8029134:	9331      	str	r3, [sp, #196]	@ 0xc4
 8029136:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029138:	eef0 8a67 	vmov.f32	s17, s15
 802913c:	fb92 f3f3 	sdiv	r3, r2, r3
 8029140:	9332      	str	r3, [sp, #200]	@ 0xc8
 8029142:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029144:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029146:	3b01      	subs	r3, #1
 8029148:	9317      	str	r3, [sp, #92]	@ 0x5c
 802914a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 802914c:	bf08      	it	eq
 802914e:	4613      	moveq	r3, r2
 8029150:	9307      	str	r3, [sp, #28]
 8029152:	e5fb      	b.n	8028d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8029154:	2900      	cmp	r1, #0
 8029156:	f43f ae6b 	beq.w	8028e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 802915a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802915e:	9308      	str	r3, [sp, #32]
 8029160:	0e1b      	lsrs	r3, r3, #24
 8029162:	9311      	str	r3, [sp, #68]	@ 0x44
 8029164:	e664      	b.n	8028e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8029166:	f112 0801 	adds.w	r8, r2, #1
 802916a:	f53f af7b 	bmi.w	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802916e:	4543      	cmp	r3, r8
 8029170:	f6ff af78 	blt.w	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029174:	f11c 0801 	adds.w	r8, ip, #1
 8029178:	f53f af74 	bmi.w	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802917c:	45c6      	cmp	lr, r8
 802917e:	f6ff af71 	blt.w	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8029182:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8029184:	b21b      	sxth	r3, r3
 8029186:	9201      	str	r2, [sp, #4]
 8029188:	fa0f f28e 	sxth.w	r2, lr
 802918c:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029190:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029194:	9200      	str	r2, [sp, #0]
 8029196:	4639      	mov	r1, r7
 8029198:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802919a:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 802919c:	f7ff fc48 	bl	8028a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80291a0:	e760      	b.n	8029064 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 80291a2:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80291a4:	1427      	asrs	r7, r4, #16
 80291a6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80291a8:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80291ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80291b0:	1433      	asrs	r3, r6, #16
 80291b2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80291b6:	fb01 7303 	mla	r3, r1, r3, r7
 80291ba:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80291be:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80291c2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80291c6:	2a00      	cmp	r2, #0
 80291c8:	f000 8133 	beq.w	8029432 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 80291cc:	687d      	ldr	r5, [r7, #4]
 80291ce:	950e      	str	r5, [sp, #56]	@ 0x38
 80291d0:	0e2d      	lsrs	r5, r5, #24
 80291d2:	9515      	str	r5, [sp, #84]	@ 0x54
 80291d4:	b178      	cbz	r0, 80291f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80291d6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80291da:	3901      	subs	r1, #1
 80291dc:	0089      	lsls	r1, r1, #2
 80291de:	3104      	adds	r1, #4
 80291e0:	eb07 0e01 	add.w	lr, r7, r1
 80291e4:	5879      	ldr	r1, [r7, r1]
 80291e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80291e8:	0e09      	lsrs	r1, r1, #24
 80291ea:	9112      	str	r1, [sp, #72]	@ 0x48
 80291ec:	f8de 1004 	ldr.w	r1, [lr, #4]
 80291f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 80291f2:	0e09      	lsrs	r1, r1, #24
 80291f4:	9116      	str	r1, [sp, #88]	@ 0x58
 80291f6:	b292      	uxth	r2, r2
 80291f8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80291fa:	b280      	uxth	r0, r0
 80291fc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80291fe:	fb02 f800 	mul.w	r8, r2, r0
 8029202:	0112      	lsls	r2, r2, #4
 8029204:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029208:	eba2 0e08 	sub.w	lr, r2, r8
 802920c:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029210:	b280      	uxth	r0, r0
 8029212:	fa1f fe8e 	uxth.w	lr, lr
 8029216:	1a12      	subs	r2, r2, r0
 8029218:	fb0e f101 	mul.w	r1, lr, r1
 802921c:	b292      	uxth	r2, r2
 802921e:	fb02 110c 	mla	r1, r2, ip, r1
 8029222:	fb00 1105 	mla	r1, r0, r5, r1
 8029226:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029228:	fb08 1105 	mla	r1, r8, r5, r1
 802922c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029230:	2900      	cmp	r1, #0
 8029232:	f000 80f5 	beq.w	8029420 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029236:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802923a:	d019      	beq.n	8029270 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802923c:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029240:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029244:	fb0c fa0a 	mul.w	sl, ip, sl
 8029248:	fb0c fc03 	mul.w	ip, ip, r3
 802924c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029250:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029254:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029258:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802925c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029260:	4453      	add	r3, sl
 8029262:	0a3f      	lsrs	r7, r7, #8
 8029264:	0a1b      	lsrs	r3, r3, #8
 8029266:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802926a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802926e:	433b      	orrs	r3, r7
 8029270:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029272:	2dff      	cmp	r5, #255	@ 0xff
 8029274:	d020      	beq.n	80292b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8029276:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029278:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802927c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802927e:	436f      	muls	r7, r5
 8029280:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029282:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029286:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802928a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802928c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029290:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029294:	fb05 fa0a 	mul.w	sl, r5, sl
 8029298:	44bc      	add	ip, r7
 802929a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802929e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292a2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80292a6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80292aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80292b2:	ea4c 050a 	orr.w	r5, ip, sl
 80292b6:	950e      	str	r5, [sp, #56]	@ 0x38
 80292b8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80292ba:	2dff      	cmp	r5, #255	@ 0xff
 80292bc:	d020      	beq.n	8029300 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80292be:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80292c0:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 80292c4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80292c6:	436f      	muls	r7, r5
 80292c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80292ca:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80292ce:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80292d2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80292d4:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80292d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80292dc:	fb05 fa0a 	mul.w	sl, r5, sl
 80292e0:	44bc      	add	ip, r7
 80292e2:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80292e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80292ea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80292ee:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80292f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80292f6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80292fa:	ea4c 050a 	orr.w	r5, ip, sl
 80292fe:	9509      	str	r5, [sp, #36]	@ 0x24
 8029300:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029302:	2dff      	cmp	r5, #255	@ 0xff
 8029304:	d020      	beq.n	8029348 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8029306:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029308:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802930c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802930e:	436f      	muls	r7, r5
 8029310:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029312:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029316:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802931a:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 802931c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029320:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029324:	fb05 fa0a 	mul.w	sl, r5, sl
 8029328:	44bc      	add	ip, r7
 802932a:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802932e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029332:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029336:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802933a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802933e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029342:	ea4c 050a 	orr.w	r5, ip, sl
 8029346:	950f      	str	r5, [sp, #60]	@ 0x3c
 8029348:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802934a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802934e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029352:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029356:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029358:	fb0e f707 	mul.w	r7, lr, r7
 802935c:	fb02 770c 	mla	r7, r2, ip, r7
 8029360:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029364:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029366:	fb00 770c 	mla	r7, r0, ip, r7
 802936a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802936e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029370:	fb08 770c 	mla	r7, r8, ip, r7
 8029374:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029378:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802937a:	fb0e fe0c 	mul.w	lr, lr, ip
 802937e:	0a3f      	lsrs	r7, r7, #8
 8029380:	fb02 e303 	mla	r3, r2, r3, lr
 8029384:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029386:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802938a:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 802938e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029390:	fb00 330a 	mla	r3, r0, sl, r3
 8029394:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8029398:	f8b9 0000 	ldrh.w	r0, [r9]
 802939c:	fb08 3c0c 	mla	ip, r8, ip, r3
 80293a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80293a2:	1202      	asrs	r2, r0, #8
 80293a4:	4359      	muls	r1, r3
 80293a6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80293aa:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80293ae:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80293b2:	1c4b      	adds	r3, r1, #1
 80293b4:	ea47 070c 	orr.w	r7, r7, ip
 80293b8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80293bc:	0c3b      	lsrs	r3, r7, #16
 80293be:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80293c2:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80293c6:	b2ff      	uxtb	r7, r7
 80293c8:	fb13 f305 	smulbb	r3, r3, r5
 80293cc:	b2c9      	uxtb	r1, r1
 80293ce:	fb17 f705 	smulbb	r7, r7, r5
 80293d2:	fb02 3201 	mla	r2, r2, r1, r3
 80293d6:	10c3      	asrs	r3, r0, #3
 80293d8:	fb1c fc05 	smulbb	ip, ip, r5
 80293dc:	00c0      	lsls	r0, r0, #3
 80293de:	b292      	uxth	r2, r2
 80293e0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80293e4:	b2c0      	uxtb	r0, r0
 80293e6:	fb03 c301 	mla	r3, r3, r1, ip
 80293ea:	fb00 7001 	mla	r0, r0, r1, r7
 80293ee:	1c51      	adds	r1, r2, #1
 80293f0:	b29b      	uxth	r3, r3
 80293f2:	b280      	uxth	r0, r0
 80293f4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80293f8:	f100 0c01 	add.w	ip, r0, #1
 80293fc:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8029400:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029404:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029408:	ea4c 0202 	orr.w	r2, ip, r2
 802940c:	f103 0c01 	add.w	ip, r3, #1
 8029410:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029414:	095b      	lsrs	r3, r3, #5
 8029416:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802941a:	431a      	orrs	r2, r3
 802941c:	f8a9 2000 	strh.w	r2, [r9]
 8029420:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8029422:	f109 0902 	add.w	r9, r9, #2
 8029426:	f10b 3bff 	add.w	fp, fp, #4294967295
 802942a:	441c      	add	r4, r3
 802942c:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 802942e:	441e      	add	r6, r3
 8029430:	e647      	b.n	80290c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 8029432:	2800      	cmp	r0, #0
 8029434:	f43f aedf 	beq.w	80291f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029438:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802943c:	9109      	str	r1, [sp, #36]	@ 0x24
 802943e:	0e09      	lsrs	r1, r1, #24
 8029440:	9112      	str	r1, [sp, #72]	@ 0x48
 8029442:	e6d8      	b.n	80291f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8029444:	b01d      	add	sp, #116	@ 0x74
 8029446:	ecbd 8b08 	vpop	{d8-d11}
 802944a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08029450 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029454:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 8029458:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 802945c:	fb04 5603 	mla	r6, r4, r3, r5
 8029460:	2c00      	cmp	r4, #0
 8029462:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 8029466:	f89d 7040 	ldrb.w	r7, [sp, #64]	@ 0x40
 802946a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802946e:	db37      	blt.n	80294e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029470:	45a6      	cmp	lr, r4
 8029472:	dd35      	ble.n	80294e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8029474:	2d00      	cmp	r5, #0
 8029476:	db31      	blt.n	80294dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8029478:	42ab      	cmp	r3, r5
 802947a:	dd2f      	ble.n	80294dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802947c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8029480:	1c6e      	adds	r6, r5, #1
 8029482:	d430      	bmi.n	80294e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029484:	42b3      	cmp	r3, r6
 8029486:	dd2e      	ble.n	80294e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8029488:	b378      	cbz	r0, 80294ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 802948a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802948e:	3401      	adds	r4, #1
 8029490:	d42f      	bmi.n	80294f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029492:	45a6      	cmp	lr, r4
 8029494:	dd2d      	ble.n	80294f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8029496:	b37f      	cbz	r7, 80294f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8029498:	2d00      	cmp	r5, #0
 802949a:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802949e:	db26      	blt.n	80294ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80294a0:	42ab      	cmp	r3, r5
 80294a2:	dd24      	ble.n	80294ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 80294a4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80294a8:	3501      	adds	r5, #1
 80294aa:	d428      	bmi.n	80294fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80294ac:	42ab      	cmp	r3, r5
 80294ae:	dd26      	ble.n	80294fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 80294b0:	b338      	cbz	r0, 8029502 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 80294b2:	f8de 3004 	ldr.w	r3, [lr, #4]
 80294b6:	280f      	cmp	r0, #15
 80294b8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80294bc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80294c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80294c4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80294c8:	d801      	bhi.n	80294ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 80294ca:	2f0f      	cmp	r7, #15
 80294cc:	d91b      	bls.n	8029506 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 80294ce:	4b87      	ldr	r3, [pc, #540]	@ (80296ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 80294d0:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 80294d4:	4a86      	ldr	r2, [pc, #536]	@ (80296f0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 80294d6:	4887      	ldr	r0, [pc, #540]	@ (80296f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 80294d8:	f001 fd46 	bl	802af68 <__assert_func>
 80294dc:	2200      	movs	r2, #0
 80294de:	e7cf      	b.n	8029480 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 80294e0:	2600      	movs	r6, #0
 80294e2:	4632      	mov	r2, r6
 80294e4:	e7d3      	b.n	802948e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80294e6:	2600      	movs	r6, #0
 80294e8:	e7d1      	b.n	802948e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80294ea:	4606      	mov	r6, r0
 80294ec:	e7cf      	b.n	802948e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 80294ee:	2400      	movs	r4, #0
 80294f0:	e7da      	b.n	80294a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 80294f2:	2300      	movs	r3, #0
 80294f4:	461c      	mov	r4, r3
 80294f6:	e7de      	b.n	80294b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80294f8:	463b      	mov	r3, r7
 80294fa:	463c      	mov	r4, r7
 80294fc:	e7db      	b.n	80294b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80294fe:	2300      	movs	r3, #0
 8029500:	e7d9      	b.n	80294b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029502:	4603      	mov	r3, r0
 8029504:	e7d7      	b.n	80294b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 8029506:	b280      	uxth	r0, r0
 8029508:	b2bf      	uxth	r7, r7
 802950a:	fb07 fe00 	mul.w	lr, r7, r0
 802950e:	0100      	lsls	r0, r0, #4
 8029510:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8029514:	eba0 0c0e 	sub.w	ip, r0, lr
 8029518:	f5c0 7580 	rsb	r5, r0, #256	@ 0x100
 802951c:	b2bf      	uxth	r7, r7
 802951e:	fa1f fc8c 	uxth.w	ip, ip
 8029522:	1bed      	subs	r5, r5, r7
 8029524:	fb0c f00a 	mul.w	r0, ip, sl
 8029528:	b2ad      	uxth	r5, r5
 802952a:	fb0b 0005 	mla	r0, fp, r5, r0
 802952e:	fb07 0009 	mla	r0, r7, r9, r0
 8029532:	fb0e 0008 	mla	r0, lr, r8, r0
 8029536:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802953a:	9001      	str	r0, [sp, #4]
 802953c:	2800      	cmp	r0, #0
 802953e:	f000 80d1 	beq.w	80296e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 8029542:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8029546:	d018      	beq.n	802957a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 8029548:	f002 10ff 	and.w	r0, r2, #16711935	@ 0xff00ff
 802954c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029550:	fb0b f000 	mul.w	r0, fp, r0
 8029554:	fb0b fb02 	mul.w	fp, fp, r2
 8029558:	0a02      	lsrs	r2, r0, #8
 802955a:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 802955e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029562:	4402      	add	r2, r0
 8029564:	f50b 7080 	add.w	r0, fp, #256	@ 0x100
 8029568:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802956c:	0a12      	lsrs	r2, r2, #8
 802956e:	0a00      	lsrs	r0, r0, #8
 8029570:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029574:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8029578:	4302      	orrs	r2, r0
 802957a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802957e:	d01a      	beq.n	80295b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 8029580:	f006 10ff 	and.w	r0, r6, #16711935	@ 0xff00ff
 8029584:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8029588:	fb0a f000 	mul.w	r0, sl, r0
 802958c:	fb0a fa06 	mul.w	sl, sl, r6
 8029590:	0a06      	lsrs	r6, r0, #8
 8029592:	f100 1001 	add.w	r0, r0, #65537	@ 0x10001
 8029596:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 802959a:	4406      	add	r6, r0
 802959c:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80295a0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80295a4:	0a36      	lsrs	r6, r6, #8
 80295a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80295aa:	f006 16ff 	and.w	r6, r6, #16711935	@ 0xff00ff
 80295ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80295b2:	ea46 060a 	orr.w	r6, r6, sl
 80295b6:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80295ba:	d01b      	beq.n	80295f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 80295bc:	f004 1aff 	and.w	sl, r4, #16711935	@ 0xff00ff
 80295c0:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 80295c4:	fb09 fa0a 	mul.w	sl, r9, sl
 80295c8:	fb09 f004 	mul.w	r0, r9, r4
 80295cc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80295d0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80295d4:	f500 7980 	add.w	r9, r0, #256	@ 0x100
 80295d8:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80295dc:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 80295e0:	4454      	add	r4, sl
 80295e2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80295e6:	0a24      	lsrs	r4, r4, #8
 80295e8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80295ec:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80295f0:	ea44 0409 	orr.w	r4, r4, r9
 80295f4:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80295f8:	d01b      	beq.n	8029632 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 80295fa:	f003 19ff 	and.w	r9, r3, #16711935	@ 0xff00ff
 80295fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029602:	fb08 f909 	mul.w	r9, r8, r9
 8029606:	fb08 f003 	mul.w	r0, r8, r3
 802960a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 802960e:	f109 1901 	add.w	r9, r9, #65537	@ 0x10001
 8029612:	f500 7880 	add.w	r8, r0, #256	@ 0x100
 8029616:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802961a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 802961e:	444b      	add	r3, r9
 8029620:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8029624:	0a1b      	lsrs	r3, r3, #8
 8029626:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802962a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802962e:	ea43 0308 	orr.w	r3, r3, r8
 8029632:	f006 18ff 	and.w	r8, r6, #16711935	@ 0xff00ff
 8029636:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802963a:	f002 19ff 	and.w	r9, r2, #16711935	@ 0xff00ff
 802963e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029642:	fb0c f808 	mul.w	r8, ip, r8
 8029646:	8808      	ldrh	r0, [r1, #0]
 8029648:	fb0c f606 	mul.w	r6, ip, r6
 802964c:	fb05 8909 	mla	r9, r5, r9, r8
 8029650:	f004 18ff 	and.w	r8, r4, #16711935	@ 0xff00ff
 8029654:	fb05 6502 	mla	r5, r5, r2, r6
 8029658:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802965c:	fb07 9908 	mla	r9, r7, r8, r9
 8029660:	f003 18ff 	and.w	r8, r3, #16711935	@ 0xff00ff
 8029664:	fb07 5704 	mla	r7, r7, r4, r5
 8029668:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802966c:	fb0e 9808 	mla	r8, lr, r8, r9
 8029670:	10c4      	asrs	r4, r0, #3
 8029672:	fb0e 7e03 	mla	lr, lr, r3, r7
 8029676:	9b01      	ldr	r3, [sp, #4]
 8029678:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802967c:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8029680:	43da      	mvns	r2, r3
 8029682:	1203      	asrs	r3, r0, #8
 8029684:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029688:	f008 18ff 	and.w	r8, r8, #16711935	@ 0xff00ff
 802968c:	b2d2      	uxtb	r2, r2
 802968e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8029692:	00c0      	lsls	r0, r0, #3
 8029694:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8029698:	4353      	muls	r3, r2
 802969a:	b2c0      	uxtb	r0, r0
 802969c:	ea48 0e0e 	orr.w	lr, r8, lr
 80296a0:	4354      	muls	r4, r2
 80296a2:	4350      	muls	r0, r2
 80296a4:	1c5a      	adds	r2, r3, #1
 80296a6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80296aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80296ae:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80296b2:	1c62      	adds	r2, r4, #1
 80296b4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80296b8:	ea4f 221e 	mov.w	r2, lr, lsr #8
 80296bc:	021b      	lsls	r3, r3, #8
 80296be:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80296c2:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80296c6:	00d2      	lsls	r2, r2, #3
 80296c8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80296cc:	4313      	orrs	r3, r2
 80296ce:	1c42      	adds	r2, r0, #1
 80296d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80296d4:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 80296d8:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 80296dc:	ea4e 0e03 	orr.w	lr, lr, r3
 80296e0:	f8a1 e000 	strh.w	lr, [r1]
 80296e4:	b003      	add	sp, #12
 80296e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296ea:	bf00      	nop
 80296ec:	08030109 	.word	0x08030109
 80296f0:	080306d6 	.word	0x080306d6
 80296f4:	0803018d 	.word	0x0803018d

080296f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80296f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80296fc:	ed2d 8b08 	vpush	{d8-d11}
 8029700:	b09b      	sub	sp, #108	@ 0x6c
 8029702:	eeb0 aa40 	vmov.f32	s20, s0
 8029706:	eef0 9a60 	vmov.f32	s19, s1
 802970a:	9218      	str	r2, [sp, #96]	@ 0x60
 802970c:	eeb0 9a41 	vmov.f32	s18, s2
 8029710:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8029712:	eeb0 8a62 	vmov.f32	s16, s5
 8029716:	9019      	str	r0, [sp, #100]	@ 0x64
 8029718:	eef0 8a43 	vmov.f32	s17, s6
 802971c:	6850      	ldr	r0, [r2, #4]
 802971e:	eef0 ba44 	vmov.f32	s23, s8
 8029722:	9116      	str	r1, [sp, #88]	@ 0x58
 8029724:	eeb0 ba64 	vmov.f32	s22, s9
 8029728:	9307      	str	r3, [sp, #28]
 802972a:	eef0 aa45 	vmov.f32	s21, s10
 802972e:	6812      	ldr	r2, [r2, #0]
 8029730:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	@ 0xc8
 8029734:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	@ 0xb4
 8029738:	fb00 1303 	mla	r3, r0, r3, r1
 802973c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029740:	930a      	str	r3, [sp, #40]	@ 0x28
 8029742:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029744:	681b      	ldr	r3, [r3, #0]
 8029746:	930f      	str	r3, [sp, #60]	@ 0x3c
 8029748:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802974a:	2b00      	cmp	r3, #0
 802974c:	dc03      	bgt.n	8029756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802974e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029750:	2b00      	cmp	r3, #0
 8029752:	f340 8387 	ble.w	8029e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029756:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029758:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802975c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029760:	1e48      	subs	r0, r1, #1
 8029762:	1e57      	subs	r7, r2, #1
 8029764:	9b07      	ldr	r3, [sp, #28]
 8029766:	2b00      	cmp	r3, #0
 8029768:	f340 8166 	ble.w	8029a38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 802976c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029770:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029774:	d406      	bmi.n	8029784 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8029776:	4584      	cmp	ip, r0
 8029778:	da04      	bge.n	8029784 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802977a:	2b00      	cmp	r3, #0
 802977c:	db02      	blt.n	8029784 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802977e:	42bb      	cmp	r3, r7
 8029780:	f2c0 815b 	blt.w	8029a3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8029784:	f11c 0c01 	adds.w	ip, ip, #1
 8029788:	f100 814b 	bmi.w	8029a22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802978c:	4561      	cmp	r1, ip
 802978e:	f2c0 8148 	blt.w	8029a22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029792:	3301      	adds	r3, #1
 8029794:	f100 8145 	bmi.w	8029a22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8029798:	429a      	cmp	r2, r3
 802979a:	f2c0 8142 	blt.w	8029a22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802979e:	9b07      	ldr	r3, [sp, #28]
 80297a0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80297a2:	9317      	str	r3, [sp, #92]	@ 0x5c
 80297a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80297a6:	2b00      	cmp	r3, #0
 80297a8:	f340 8165 	ble.w	8029a76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80297ac:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
 80297ae:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80297b2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80297b4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80297b8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80297bc:	1422      	asrs	r2, r4, #16
 80297be:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80297c2:	689b      	ldr	r3, [r3, #8]
 80297c4:	f100 81d5 	bmi.w	8029b72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80297c8:	f103 38ff 	add.w	r8, r3, #4294967295
 80297cc:	4542      	cmp	r2, r8
 80297ce:	f280 81d0 	bge.w	8029b72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80297d2:	f1bc 0f00 	cmp.w	ip, #0
 80297d6:	f2c0 81cc 	blt.w	8029b72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80297da:	f10e 38ff 	add.w	r8, lr, #4294967295
 80297de:	45c4      	cmp	ip, r8
 80297e0:	f280 81c7 	bge.w	8029b72 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 80297e4:	b21b      	sxth	r3, r3
 80297e6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80297e8:	fb0c 2203 	mla	r2, ip, r3, r2
 80297ec:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80297f0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80297f4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80297f8:	2900      	cmp	r1, #0
 80297fa:	f000 8182 	beq.w	8029b02 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80297fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029802:	950b      	str	r5, [sp, #44]	@ 0x2c
 8029804:	0e2d      	lsrs	r5, r5, #24
 8029806:	9512      	str	r5, [sp, #72]	@ 0x48
 8029808:	b180      	cbz	r0, 802982c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 802980a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802980e:	3b01      	subs	r3, #1
 8029810:	009b      	lsls	r3, r3, #2
 8029812:	3304      	adds	r3, #4
 8029814:	eb08 0c03 	add.w	ip, r8, r3
 8029818:	f858 3003 	ldr.w	r3, [r8, r3]
 802981c:	9308      	str	r3, [sp, #32]
 802981e:	0e1b      	lsrs	r3, r3, #24
 8029820:	9310      	str	r3, [sp, #64]	@ 0x40
 8029822:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029826:	930c      	str	r3, [sp, #48]	@ 0x30
 8029828:	0e1b      	lsrs	r3, r3, #24
 802982a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802982c:	b289      	uxth	r1, r1
 802982e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8029830:	b280      	uxth	r0, r0
 8029832:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029834:	fb01 f900 	mul.w	r9, r1, r0
 8029838:	0109      	lsls	r1, r1, #4
 802983a:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802983e:	eba1 0809 	sub.w	r8, r1, r9
 8029842:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8029846:	b280      	uxth	r0, r0
 8029848:	fa1f f888 	uxth.w	r8, r8
 802984c:	1a09      	subs	r1, r1, r0
 802984e:	fb08 f303 	mul.w	r3, r8, r3
 8029852:	b289      	uxth	r1, r1
 8029854:	fb01 330e 	mla	r3, r1, lr, r3
 8029858:	fb00 3305 	mla	r3, r0, r5, r3
 802985c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802985e:	fb09 3305 	mla	r3, r9, r5, r3
 8029862:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029866:	2b00      	cmp	r3, #0
 8029868:	f000 80d2 	beq.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 802986c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029870:	d01b      	beq.n	80298aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8029872:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029876:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802987a:	fb0e fa0a 	mul.w	sl, lr, sl
 802987e:	fb0e fe02 	mul.w	lr, lr, r2
 8029882:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029886:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802988a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802988e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029892:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029896:	4452      	add	r2, sl
 8029898:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802989c:	0a12      	lsrs	r2, r2, #8
 802989e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80298a2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80298a6:	ea42 020c 	orr.w	r2, r2, ip
 80298aa:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80298ac:	2dff      	cmp	r5, #255	@ 0xff
 80298ae:	d021      	beq.n	80298f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80298b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80298b2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80298b6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80298b8:	fb05 fb0b 	mul.w	fp, r5, fp
 80298bc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80298be:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80298c2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 80298c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80298c8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80298cc:	fb05 fa0a 	mul.w	sl, r5, sl
 80298d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80298d4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80298d8:	44de      	add	lr, fp
 80298da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80298de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80298e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80298e6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80298ea:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80298ee:	ea4e 050a 	orr.w	r5, lr, sl
 80298f2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80298f4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80298f6:	2dff      	cmp	r5, #255	@ 0xff
 80298f8:	d021      	beq.n	802993e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80298fa:	9d08      	ldr	r5, [sp, #32]
 80298fc:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029900:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029902:	fb05 fb0b 	mul.w	fp, r5, fp
 8029906:	9d08      	ldr	r5, [sp, #32]
 8029908:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802990c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802990e:	fb05 fa0e 	mul.w	sl, r5, lr
 8029912:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029916:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802991a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802991e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029922:	44de      	add	lr, fp
 8029924:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029928:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802992c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029930:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029934:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029938:	ea4e 050a 	orr.w	r5, lr, sl
 802993c:	9508      	str	r5, [sp, #32]
 802993e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029940:	2dff      	cmp	r5, #255	@ 0xff
 8029942:	d021      	beq.n	8029988 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8029944:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029946:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802994a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802994c:	fb05 fb0b 	mul.w	fp, r5, fp
 8029950:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029952:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029956:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029958:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802995c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029960:	fb05 fa0a 	mul.w	sl, r5, sl
 8029964:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029968:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802996c:	44de      	add	lr, fp
 802996e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029972:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029976:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802997a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802997e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029982:	ea4e 050a 	orr.w	r5, lr, sl
 8029986:	950c      	str	r5, [sp, #48]	@ 0x30
 8029988:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802998a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802998e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029992:	2bff      	cmp	r3, #255	@ 0xff
 8029994:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029998:	9d08      	ldr	r5, [sp, #32]
 802999a:	fb08 fc0c 	mul.w	ip, r8, ip
 802999e:	fb01 cc0e 	mla	ip, r1, lr, ip
 80299a2:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80299a6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80299a8:	fb00 cc0e 	mla	ip, r0, lr, ip
 80299ac:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 80299b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80299b2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80299b6:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80299ba:	fb08 f80e 	mul.w	r8, r8, lr
 80299be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80299c2:	fb01 8202 	mla	r2, r1, r2, r8
 80299c6:	9908      	ldr	r1, [sp, #32]
 80299c8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80299cc:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80299d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80299d2:	fb00 220a 	mla	r2, r0, sl, r2
 80299d6:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 80299da:	fb09 2900 	mla	r9, r9, r0, r2
 80299de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80299e2:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80299e6:	ea4c 0c09 	orr.w	ip, ip, r9
 80299ea:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80299ee:	f040 8091 	bne.w	8029b14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80299f2:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80299f6:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80299fa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80299fe:	f022 0207 	bic.w	r2, r2, #7
 8029a02:	431a      	orrs	r2, r3
 8029a04:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8029a08:	ea4c 0c02 	orr.w	ip, ip, r2
 8029a0c:	f8a7 c000 	strh.w	ip, [r7]
 8029a10:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029a12:	3702      	adds	r7, #2
 8029a14:	441c      	add	r4, r3
 8029a16:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029a18:	441e      	add	r6, r3
 8029a1a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029a1c:	3b01      	subs	r3, #1
 8029a1e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029a20:	e6c0      	b.n	80297a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 8029a22:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029a24:	441c      	add	r4, r3
 8029a26:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029a28:	441e      	add	r6, r3
 8029a2a:	9b07      	ldr	r3, [sp, #28]
 8029a2c:	3b01      	subs	r3, #1
 8029a2e:	9307      	str	r3, [sp, #28]
 8029a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029a32:	3302      	adds	r3, #2
 8029a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8029a36:	e695      	b.n	8029764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029a38:	d024      	beq.n	8029a84 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8029a3a:	9b07      	ldr	r3, [sp, #28]
 8029a3c:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8029a3e:	3b01      	subs	r3, #1
 8029a40:	fb00 4003 	mla	r0, r0, r3, r4
 8029a44:	1400      	asrs	r0, r0, #16
 8029a46:	f53f aeaa 	bmi.w	802979e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029a4a:	3901      	subs	r1, #1
 8029a4c:	4288      	cmp	r0, r1
 8029a4e:	f6bf aea6 	bge.w	802979e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029a52:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8029a54:	fb01 6303 	mla	r3, r1, r3, r6
 8029a58:	141b      	asrs	r3, r3, #16
 8029a5a:	f53f aea0 	bmi.w	802979e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029a5e:	3a01      	subs	r2, #1
 8029a60:	4293      	cmp	r3, r2
 8029a62:	f6bf ae9c 	bge.w	802979e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8029a66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029a6a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8029a6e:	f1bb 0f00 	cmp.w	fp, #0
 8029a72:	f300 809a 	bgt.w	8029baa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8029a76:	9b07      	ldr	r3, [sp, #28]
 8029a78:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029a7e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8029a84:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029a86:	2b00      	cmp	r3, #0
 8029a88:	f340 81ec 	ble.w	8029e64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8029a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029a90:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029a92:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8029a96:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029a9a:	eef0 6a48 	vmov.f32	s13, s16
 8029a9e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029aa2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8029aa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029aaa:	ee16 4a90 	vmov	r4, s13
 8029aae:	eef0 6a68 	vmov.f32	s13, s17
 8029ab2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029ab6:	ee16 6a90 	vmov	r6, s13
 8029aba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8029abe:	ee69 7a27 	vmul.f32	s15, s18, s15
 8029ac2:	ee37 8a48 	vsub.f32	s16, s14, s16
 8029ac6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8029aca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8029ace:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8029ad2:	ee18 2a10 	vmov	r2, s16
 8029ad6:	eeb0 8a47 	vmov.f32	s16, s14
 8029ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8029ade:	ee18 2a90 	vmov	r2, s17
 8029ae2:	932f      	str	r3, [sp, #188]	@ 0xbc
 8029ae4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029ae6:	eef0 8a67 	vmov.f32	s17, s15
 8029aea:	fb92 f3f3 	sdiv	r3, r2, r3
 8029aee:	9330      	str	r3, [sp, #192]	@ 0xc0
 8029af0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8029af2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8029af4:	3b01      	subs	r3, #1
 8029af6:	9316      	str	r3, [sp, #88]	@ 0x58
 8029af8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8029afa:	bf08      	it	eq
 8029afc:	4613      	moveq	r3, r2
 8029afe:	9307      	str	r3, [sp, #28]
 8029b00:	e622      	b.n	8029748 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8029b02:	2800      	cmp	r0, #0
 8029b04:	f43f ae92 	beq.w	802982c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029b08:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029b0c:	9308      	str	r3, [sp, #32]
 8029b0e:	0e1b      	lsrs	r3, r3, #24
 8029b10:	9310      	str	r3, [sp, #64]	@ 0x40
 8029b12:	e68b      	b.n	802982c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8029b14:	8839      	ldrh	r1, [r7, #0]
 8029b16:	43db      	mvns	r3, r3
 8029b18:	4dd5      	ldr	r5, [pc, #852]	@ (8029e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029b1a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8029b1e:	fa5f f883 	uxtb.w	r8, r3
 8029b22:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 8029b26:	10c8      	asrs	r0, r1, #3
 8029b28:	00cb      	lsls	r3, r1, #3
 8029b2a:	fb0e fe08 	mul.w	lr, lr, r8
 8029b2e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029b32:	b2db      	uxtb	r3, r3
 8029b34:	f10e 0101 	add.w	r1, lr, #1
 8029b38:	fb00 f008 	mul.w	r0, r0, r8
 8029b3c:	fb03 f308 	mul.w	r3, r3, r8
 8029b40:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8029b44:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8029b48:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8029b4c:	f100 0e01 	add.w	lr, r0, #1
 8029b50:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8029b54:	b2c9      	uxtb	r1, r1
 8029b56:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8029b5a:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8029b5e:	00d2      	lsls	r2, r2, #3
 8029b60:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029b64:	430a      	orrs	r2, r1
 8029b66:	1c59      	adds	r1, r3, #1
 8029b68:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8029b6c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8029b70:	e748      	b.n	8029a04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8029b72:	f112 0801 	adds.w	r8, r2, #1
 8029b76:	f53f af4b 	bmi.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b7a:	4543      	cmp	r3, r8
 8029b7c:	f6ff af48 	blt.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b80:	f11c 0801 	adds.w	r8, ip, #1
 8029b84:	f53f af44 	bmi.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b88:	45c6      	cmp	lr, r8
 8029b8a:	f6ff af41 	blt.w	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029b8e:	b21b      	sxth	r3, r3
 8029b90:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8029b94:	fa0f f28e 	sxth.w	r2, lr
 8029b98:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8029b9c:	9200      	str	r2, [sp, #0]
 8029b9e:	4639      	mov	r1, r7
 8029ba0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029ba2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8029ba4:	f7ff fc54 	bl	8029450 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8029ba8:	e732      	b.n	8029a10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029baa:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8029bac:	1421      	asrs	r1, r4, #16
 8029bae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029bb0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029bb4:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8029bb8:	1433      	asrs	r3, r6, #16
 8029bba:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029bbe:	fb07 1303 	mla	r3, r7, r3, r1
 8029bc2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8029bc4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8029bc8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029bcc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029bd0:	2a00      	cmp	r2, #0
 8029bd2:	f000 8108 	beq.w	8029de6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8029bd6:	684d      	ldr	r5, [r1, #4]
 8029bd8:	950d      	str	r5, [sp, #52]	@ 0x34
 8029bda:	0e2d      	lsrs	r5, r5, #24
 8029bdc:	9514      	str	r5, [sp, #80]	@ 0x50
 8029bde:	b178      	cbz	r0, 8029c00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029be0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8029be4:	3f01      	subs	r7, #1
 8029be6:	00bf      	lsls	r7, r7, #2
 8029be8:	3704      	adds	r7, #4
 8029bea:	eb01 0e07 	add.w	lr, r1, r7
 8029bee:	59c9      	ldr	r1, [r1, r7]
 8029bf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029bf2:	0e09      	lsrs	r1, r1, #24
 8029bf4:	9111      	str	r1, [sp, #68]	@ 0x44
 8029bf6:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029bfa:	910e      	str	r1, [sp, #56]	@ 0x38
 8029bfc:	0e09      	lsrs	r1, r1, #24
 8029bfe:	9115      	str	r1, [sp, #84]	@ 0x54
 8029c00:	b292      	uxth	r2, r2
 8029c02:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029c04:	b280      	uxth	r0, r0
 8029c06:	fb02 f900 	mul.w	r9, r2, r0
 8029c0a:	0112      	lsls	r2, r2, #4
 8029c0c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8029c10:	eba2 0e09 	sub.w	lr, r2, r9
 8029c14:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8029c18:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8029c1a:	b280      	uxth	r0, r0
 8029c1c:	fa1f fe8e 	uxth.w	lr, lr
 8029c20:	1a09      	subs	r1, r1, r0
 8029c22:	fb0e f202 	mul.w	r2, lr, r2
 8029c26:	b289      	uxth	r1, r1
 8029c28:	fb01 220c 	mla	r2, r1, ip, r2
 8029c2c:	fb00 2205 	mla	r2, r0, r5, r2
 8029c30:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029c32:	fb09 2205 	mla	r2, r9, r5, r2
 8029c36:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8029c3a:	2a00      	cmp	r2, #0
 8029c3c:	f000 80ca 	beq.w	8029dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029c40:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029c44:	d019      	beq.n	8029c7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8029c46:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029c4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029c4e:	fb0c fa0a 	mul.w	sl, ip, sl
 8029c52:	fb0c fc03 	mul.w	ip, ip, r3
 8029c56:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029c5a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029c5e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029c62:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029c66:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029c6a:	4453      	add	r3, sl
 8029c6c:	0a3f      	lsrs	r7, r7, #8
 8029c6e:	0a1b      	lsrs	r3, r3, #8
 8029c70:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029c74:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029c78:	433b      	orrs	r3, r7
 8029c7a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c7c:	2dff      	cmp	r5, #255	@ 0xff
 8029c7e:	d020      	beq.n	8029cc2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8029c80:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029c82:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029c86:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c88:	436f      	muls	r7, r5
 8029c8a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029c8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029c90:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029c94:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8029c96:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029c9a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029c9e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029ca2:	44bc      	add	ip, r7
 8029ca4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029ca8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cb0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029cb4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cb8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029cbc:	ea4c 050a 	orr.w	r5, ip, sl
 8029cc0:	950d      	str	r5, [sp, #52]	@ 0x34
 8029cc2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029cc4:	2dff      	cmp	r5, #255	@ 0xff
 8029cc6:	d020      	beq.n	8029d0a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8029cc8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029cca:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029cce:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029cd0:	436f      	muls	r7, r5
 8029cd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029cd4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029cd8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029cda:	fb05 fa0c 	mul.w	sl, r5, ip
 8029cde:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029ce2:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029ce6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029cea:	44bc      	add	ip, r7
 8029cec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029cf0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029cf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029cf8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029cfc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d00:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d04:	ea4c 050a 	orr.w	r5, ip, sl
 8029d08:	9509      	str	r5, [sp, #36]	@ 0x24
 8029d0a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029d0c:	2dff      	cmp	r5, #255	@ 0xff
 8029d0e:	d020      	beq.n	8029d52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8029d10:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029d12:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029d16:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029d18:	436f      	muls	r7, r5
 8029d1a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029d1c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d20:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029d24:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029d26:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029d2a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d2e:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d32:	44bc      	add	ip, r7
 8029d34:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029d38:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d3c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d40:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d48:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d4c:	ea4c 050a 	orr.w	r5, ip, sl
 8029d50:	950e      	str	r5, [sp, #56]	@ 0x38
 8029d52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029d54:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029d58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029d5c:	2aff      	cmp	r2, #255	@ 0xff
 8029d5e:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029d62:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029d64:	fb0e f707 	mul.w	r7, lr, r7
 8029d68:	fb01 770c 	mla	r7, r1, ip, r7
 8029d6c:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029d70:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029d72:	fb00 770c 	mla	r7, r0, ip, r7
 8029d76:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029d7a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029d7c:	fb09 770c 	mla	r7, r9, ip, r7
 8029d80:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029d84:	fb0e fe0c 	mul.w	lr, lr, ip
 8029d88:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8029d8c:	fb01 e303 	mla	r3, r1, r3, lr
 8029d90:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8029d92:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029d96:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8029d9a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8029d9c:	fb00 330a 	mla	r3, r0, sl, r3
 8029da0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8029da4:	fb09 3c0c 	mla	ip, r9, ip, r3
 8029da8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029dac:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029db0:	ea47 070c 	orr.w	r7, r7, ip
 8029db4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8029db8:	d11e      	bne.n	8029df8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8029dba:	097a      	lsrs	r2, r7, #5
 8029dbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8029dc0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029dc4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029dc8:	f023 0307 	bic.w	r3, r3, #7
 8029dcc:	4313      	orrs	r3, r2
 8029dce:	431f      	orrs	r7, r3
 8029dd0:	f8a8 7000 	strh.w	r7, [r8]
 8029dd4:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8029dd6:	f108 0802 	add.w	r8, r8, #2
 8029dda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029dde:	441c      	add	r4, r3
 8029de0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8029de2:	441e      	add	r6, r3
 8029de4:	e643      	b.n	8029a6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8029de6:	2800      	cmp	r0, #0
 8029de8:	f43f af0a 	beq.w	8029c00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029dec:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8029df0:	9109      	str	r1, [sp, #36]	@ 0x24
 8029df2:	0e09      	lsrs	r1, r1, #24
 8029df4:	9111      	str	r1, [sp, #68]	@ 0x44
 8029df6:	e703      	b.n	8029c00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8029df8:	f8b8 1000 	ldrh.w	r1, [r8]
 8029dfc:	43d2      	mvns	r2, r2
 8029dfe:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8029e02:	fa5f fe82 	uxtb.w	lr, r2
 8029e06:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8029e0a:	10c8      	asrs	r0, r1, #3
 8029e0c:	00ca      	lsls	r2, r1, #3
 8029e0e:	fb0c fc0e 	mul.w	ip, ip, lr
 8029e12:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8029e16:	b2d2      	uxtb	r2, r2
 8029e18:	f10c 0101 	add.w	r1, ip, #1
 8029e1c:	fb00 f00e 	mul.w	r0, r0, lr
 8029e20:	fb02 f20e 	mul.w	r2, r2, lr
 8029e24:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e28:	0c39      	lsrs	r1, r7, #16
 8029e2a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029e2e:	4910      	ldr	r1, [pc, #64]	@ (8029e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8029e30:	fa5f fc8c 	uxtb.w	ip, ip
 8029e34:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8029e38:	1c41      	adds	r1, r0, #1
 8029e3a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029e3e:	1c51      	adds	r1, r2, #1
 8029e40:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029e44:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029e48:	00c0      	lsls	r0, r0, #3
 8029e4a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8029e4e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029e52:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8029e56:	ea4c 0c00 	orr.w	ip, ip, r0
 8029e5a:	ea47 0c0c 	orr.w	ip, r7, ip
 8029e5e:	f8a8 c000 	strh.w	ip, [r8]
 8029e62:	e7b7      	b.n	8029dd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8029e64:	b01b      	add	sp, #108	@ 0x6c
 8029e66:	ecbd 8b08 	vpop	{d8-d11}
 8029e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029e6e:	bf00      	nop
 8029e70:	fffff800 	.word	0xfffff800

08029e74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8029e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029e78:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 8029e7c:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8029e80:	2c00      	cmp	r4, #0
 8029e82:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8029e86:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8029e8a:	fb04 ce03 	mla	lr, r4, r3, ip
 8029e8e:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 8029e92:	db60      	blt.n	8029f56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029e94:	45a1      	cmp	r9, r4
 8029e96:	dd5e      	ble.n	8029f56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8029e98:	f1bc 0f00 	cmp.w	ip, #0
 8029e9c:	db59      	blt.n	8029f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029e9e:	45e0      	cmp	r8, ip
 8029ea0:	dd57      	ble.n	8029f52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8029ea2:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8029ea6:	f01e 0f01 	tst.w	lr, #1
 8029eaa:	5c16      	ldrb	r6, [r2, r0]
 8029eac:	bf0c      	ite	eq
 8029eae:	f006 060f 	andeq.w	r6, r6, #15
 8029eb2:	1136      	asrne	r6, r6, #4
 8029eb4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8029eb8:	b2f6      	uxtb	r6, r6
 8029eba:	f11c 0001 	adds.w	r0, ip, #1
 8029ebe:	d44d      	bmi.n	8029f5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029ec0:	4580      	cmp	r8, r0
 8029ec2:	dd4b      	ble.n	8029f5c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8029ec4:	2d00      	cmp	r5, #0
 8029ec6:	d04b      	beq.n	8029f60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8029ec8:	f10e 0a01 	add.w	sl, lr, #1
 8029ecc:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029ed0:	f01a 0f01 	tst.w	sl, #1
 8029ed4:	5c10      	ldrb	r0, [r2, r0]
 8029ed6:	bf0c      	ite	eq
 8029ed8:	f000 000f 	andeq.w	r0, r0, #15
 8029edc:	1100      	asrne	r0, r0, #4
 8029ede:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029ee2:	b2c0      	uxtb	r0, r0
 8029ee4:	3401      	adds	r4, #1
 8029ee6:	d43f      	bmi.n	8029f68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029ee8:	45a1      	cmp	r9, r4
 8029eea:	dd3d      	ble.n	8029f68 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8029eec:	2f00      	cmp	r7, #0
 8029eee:	f000 80a8 	beq.w	802a042 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8029ef2:	f1bc 0f00 	cmp.w	ip, #0
 8029ef6:	db35      	blt.n	8029f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029ef8:	45e0      	cmp	r8, ip
 8029efa:	dd33      	ble.n	8029f64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8029efc:	eb03 090e 	add.w	r9, r3, lr
 8029f00:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029f04:	f019 0f01 	tst.w	r9, #1
 8029f08:	5d14      	ldrb	r4, [r2, r4]
 8029f0a:	bf0c      	ite	eq
 8029f0c:	f004 040f 	andeq.w	r4, r4, #15
 8029f10:	1124      	asrne	r4, r4, #4
 8029f12:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8029f16:	b2e4      	uxtb	r4, r4
 8029f18:	f11c 0c01 	adds.w	ip, ip, #1
 8029f1c:	d427      	bmi.n	8029f6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029f1e:	45e0      	cmp	r8, ip
 8029f20:	dd25      	ble.n	8029f6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8029f22:	b335      	cbz	r5, 8029f72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8029f24:	3301      	adds	r3, #1
 8029f26:	449e      	add	lr, r3
 8029f28:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029f2c:	f01e 0f01 	tst.w	lr, #1
 8029f30:	5cd2      	ldrb	r2, [r2, r3]
 8029f32:	bf0c      	ite	eq
 8029f34:	f002 020f 	andeq.w	r2, r2, #15
 8029f38:	1112      	asrne	r2, r2, #4
 8029f3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029f3e:	b2d3      	uxtb	r3, r2
 8029f40:	2d0f      	cmp	r5, #15
 8029f42:	d917      	bls.n	8029f74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8029f44:	4b42      	ldr	r3, [pc, #264]	@ (802a050 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8029f46:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8029f4a:	4a42      	ldr	r2, [pc, #264]	@ (802a054 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8029f4c:	4842      	ldr	r0, [pc, #264]	@ (802a058 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8029f4e:	f001 f80b 	bl	802af68 <__assert_func>
 8029f52:	2600      	movs	r6, #0
 8029f54:	e7b1      	b.n	8029eba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8029f56:	2000      	movs	r0, #0
 8029f58:	4606      	mov	r6, r0
 8029f5a:	e7c3      	b.n	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029f5c:	2000      	movs	r0, #0
 8029f5e:	e7c1      	b.n	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029f60:	4628      	mov	r0, r5
 8029f62:	e7bf      	b.n	8029ee4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8029f64:	2400      	movs	r4, #0
 8029f66:	e7d7      	b.n	8029f18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8029f68:	2300      	movs	r3, #0
 8029f6a:	461c      	mov	r4, r3
 8029f6c:	e7e8      	b.n	8029f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029f6e:	2300      	movs	r3, #0
 8029f70:	e7e6      	b.n	8029f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8029f72:	462b      	mov	r3, r5
 8029f74:	2f0f      	cmp	r7, #15
 8029f76:	d8e5      	bhi.n	8029f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8029f78:	b2ad      	uxth	r5, r5
 8029f7a:	b2bf      	uxth	r7, r7
 8029f7c:	fb05 fc07 	mul.w	ip, r5, r7
 8029f80:	012d      	lsls	r5, r5, #4
 8029f82:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8029f86:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 8029f8a:	eba5 050c 	sub.w	r5, r5, ip
 8029f8e:	b2bf      	uxth	r7, r7
 8029f90:	b2ad      	uxth	r5, r5
 8029f92:	1bd2      	subs	r2, r2, r7
 8029f94:	4368      	muls	r0, r5
 8029f96:	b292      	uxth	r2, r2
 8029f98:	fb06 0002 	mla	r0, r6, r2, r0
 8029f9c:	fb07 0404 	mla	r4, r7, r4, r0
 8029fa0:	fb0c 4303 	mla	r3, ip, r3, r4
 8029fa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029fa8:	b1b3      	cbz	r3, 8029fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8029faa:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 8029fae:	435a      	muls	r2, r3
 8029fb0:	1c53      	adds	r3, r2, #1
 8029fb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029fb6:	4a29      	ldr	r2, [pc, #164]	@ (802a05c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8029fb8:	121b      	asrs	r3, r3, #8
 8029fba:	6812      	ldr	r2, [r2, #0]
 8029fbc:	2bff      	cmp	r3, #255	@ 0xff
 8029fbe:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8029fc2:	d10b      	bne.n	8029fdc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8029fc4:	0950      	lsrs	r0, r2, #5
 8029fc6:	4b26      	ldr	r3, [pc, #152]	@ (802a060 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8029fc8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029fcc:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8029fd0:	4033      	ands	r3, r6
 8029fd2:	4318      	orrs	r0, r3
 8029fd4:	4302      	orrs	r2, r0
 8029fd6:	800a      	strh	r2, [r1, #0]
 8029fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029fdc:	880d      	ldrh	r5, [r1, #0]
 8029fde:	b29f      	uxth	r7, r3
 8029fe0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8029fe4:	43db      	mvns	r3, r3
 8029fe6:	122c      	asrs	r4, r5, #8
 8029fe8:	fb10 f007 	smulbb	r0, r0, r7
 8029fec:	b2db      	uxtb	r3, r3
 8029fee:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8029ff2:	b2f6      	uxtb	r6, r6
 8029ff4:	b2d2      	uxtb	r2, r2
 8029ff6:	fb04 0403 	mla	r4, r4, r3, r0
 8029ffa:	10e8      	asrs	r0, r5, #3
 8029ffc:	fb12 f207 	smulbb	r2, r2, r7
 802a000:	00ed      	lsls	r5, r5, #3
 802a002:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a006:	b2a4      	uxth	r4, r4
 802a008:	fb16 f607 	smulbb	r6, r6, r7
 802a00c:	b2ed      	uxtb	r5, r5
 802a00e:	fb00 6603 	mla	r6, r0, r3, r6
 802a012:	fb05 2303 	mla	r3, r5, r3, r2
 802a016:	b2b0      	uxth	r0, r6
 802a018:	b29a      	uxth	r2, r3
 802a01a:	1c63      	adds	r3, r4, #1
 802a01c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a020:	1c53      	adds	r3, r2, #1
 802a022:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a026:	1c42      	adds	r2, r0, #1
 802a028:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a02c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a030:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a034:	0940      	lsrs	r0, r0, #5
 802a036:	4323      	orrs	r3, r4
 802a038:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a03c:	4303      	orrs	r3, r0
 802a03e:	800b      	strh	r3, [r1, #0]
 802a040:	e7ca      	b.n	8029fd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 802a042:	2d0f      	cmp	r5, #15
 802a044:	f63f af7e 	bhi.w	8029f44 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 802a048:	463b      	mov	r3, r7
 802a04a:	463c      	mov	r4, r7
 802a04c:	e794      	b.n	8029f78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 802a04e:	bf00      	nop
 802a050:	08030109 	.word	0x08030109
 802a054:	080306d6 	.word	0x080306d6
 802a058:	0803018d 	.word	0x0803018d
 802a05c:	2400b8d4 	.word	0x2400b8d4
 802a060:	00fff800 	.word	0x00fff800

0802a064 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a068:	ed2d 8b08 	vpush	{d8-d11}
 802a06c:	b097      	sub	sp, #92	@ 0x5c
 802a06e:	eeb0 aa40 	vmov.f32	s20, s0
 802a072:	eef0 9a60 	vmov.f32	s19, s1
 802a076:	9214      	str	r2, [sp, #80]	@ 0x50
 802a078:	eeb0 9a41 	vmov.f32	s18, s2
 802a07c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 802a07e:	eeb0 8a62 	vmov.f32	s16, s5
 802a082:	9309      	str	r3, [sp, #36]	@ 0x24
 802a084:	eef0 8a43 	vmov.f32	s17, s6
 802a088:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802a08c:	eef0 ba44 	vmov.f32	s23, s8
 802a090:	9015      	str	r0, [sp, #84]	@ 0x54
 802a092:	eeb0 ba64 	vmov.f32	s22, s9
 802a096:	6850      	ldr	r0, [r2, #4]
 802a098:	eef0 aa45 	vmov.f32	s21, s10
 802a09c:	910d      	str	r1, [sp, #52]	@ 0x34
 802a09e:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a0a0:	6812      	ldr	r2, [r2, #0]
 802a0a2:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802a0a6:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	@ 0xa4
 802a0aa:	fb00 1303 	mla	r3, r0, r3, r1
 802a0ae:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a0b2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802a0b4:	689b      	ldr	r3, [r3, #8]
 802a0b6:	3301      	adds	r3, #1
 802a0b8:	f023 0301 	bic.w	r3, r3, #1
 802a0bc:	930a      	str	r3, [sp, #40]	@ 0x28
 802a0be:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802a0c0:	681f      	ldr	r7, [r3, #0]
 802a0c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a0c4:	2b00      	cmp	r3, #0
 802a0c6:	dc03      	bgt.n	802a0d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802a0c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802a0ca:	2b00      	cmp	r3, #0
 802a0cc:	f340 8289 	ble.w	802a5e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802a0d0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802a0d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a0d6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a0da:	1e48      	subs	r0, r1, #1
 802a0dc:	f102 3cff 	add.w	ip, r2, #4294967295
 802a0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a0e2:	2b00      	cmp	r3, #0
 802a0e4:	f340 80c5 	ble.w	802a272 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802a0e8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a0ec:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a0f0:	d406      	bmi.n	802a100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a0f2:	4586      	cmp	lr, r0
 802a0f4:	da04      	bge.n	802a100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a0f6:	2b00      	cmp	r3, #0
 802a0f8:	db02      	blt.n	802a100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802a0fa:	4563      	cmp	r3, ip
 802a0fc:	f2c0 80ba 	blt.w	802a274 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802a100:	f11e 0e01 	adds.w	lr, lr, #1
 802a104:	f100 80ab 	bmi.w	802a25e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a108:	4571      	cmp	r1, lr
 802a10a:	f2c0 80a8 	blt.w	802a25e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a10e:	3301      	adds	r3, #1
 802a110:	f100 80a5 	bmi.w	802a25e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a114:	429a      	cmp	r2, r3
 802a116:	f2c0 80a2 	blt.w	802a25e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 802a11a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a11c:	46c8      	mov	r8, r9
 802a11e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802a122:	930e      	str	r3, [sp, #56]	@ 0x38
 802a124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a126:	2b00      	cmp	r3, #0
 802a128:	f340 80c4 	ble.w	802a2b4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 802a12c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802a12e:	1430      	asrs	r0, r6, #16
 802a130:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a134:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a138:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a13c:	1423      	asrs	r3, r4, #16
 802a13e:	f100 814f 	bmi.w	802a3e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a142:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a146:	455b      	cmp	r3, fp
 802a148:	f280 814a 	bge.w	802a3e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a14c:	2800      	cmp	r0, #0
 802a14e:	f2c0 8147 	blt.w	802a3e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a152:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a156:	4558      	cmp	r0, fp
 802a158:	f280 8142 	bge.w	802a3e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802a15c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802a15e:	fb00 3305 	mla	r3, r0, r5, r3
 802a162:	0858      	lsrs	r0, r3, #1
 802a164:	07dd      	lsls	r5, r3, #31
 802a166:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a16a:	bf54      	ite	pl
 802a16c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a170:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a174:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a178:	fa5f fc8c 	uxtb.w	ip, ip
 802a17c:	2a00      	cmp	r2, #0
 802a17e:	f000 80dd 	beq.w	802a33c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a182:	1c58      	adds	r0, r3, #1
 802a184:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a188:	07c0      	lsls	r0, r0, #31
 802a18a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a18e:	bf54      	ite	pl
 802a190:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a194:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a198:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a19c:	fa5f f08e 	uxtb.w	r0, lr
 802a1a0:	9010      	str	r0, [sp, #64]	@ 0x40
 802a1a2:	b1d9      	cbz	r1, 802a1dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a1a4:	4453      	add	r3, sl
 802a1a6:	0858      	lsrs	r0, r3, #1
 802a1a8:	07dd      	lsls	r5, r3, #31
 802a1aa:	f103 0301 	add.w	r3, r3, #1
 802a1ae:	5c38      	ldrb	r0, [r7, r0]
 802a1b0:	bf54      	ite	pl
 802a1b2:	f000 000f 	andpl.w	r0, r0, #15
 802a1b6:	1100      	asrmi	r0, r0, #4
 802a1b8:	07dd      	lsls	r5, r3, #31
 802a1ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a1be:	b2c0      	uxtb	r0, r0
 802a1c0:	900b      	str	r0, [sp, #44]	@ 0x2c
 802a1c2:	ea4f 0053 	mov.w	r0, r3, lsr #1
 802a1c6:	f817 e000 	ldrb.w	lr, [r7, r0]
 802a1ca:	bf54      	ite	pl
 802a1cc:	f00e 030f 	andpl.w	r3, lr, #15
 802a1d0:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802a1d4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a1d8:	b2db      	uxtb	r3, r3
 802a1da:	9311      	str	r3, [sp, #68]	@ 0x44
 802a1dc:	b292      	uxth	r2, r2
 802a1de:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a1e0:	b289      	uxth	r1, r1
 802a1e2:	fb02 f301 	mul.w	r3, r2, r1
 802a1e6:	0112      	lsls	r2, r2, #4
 802a1e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a1ec:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a1f0:	1ad2      	subs	r2, r2, r3
 802a1f2:	b289      	uxth	r1, r1
 802a1f4:	b292      	uxth	r2, r2
 802a1f6:	1a40      	subs	r0, r0, r1
 802a1f8:	436a      	muls	r2, r5
 802a1fa:	b280      	uxth	r0, r0
 802a1fc:	fb0c 2c00 	mla	ip, ip, r0, r2
 802a200:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802a202:	fb01 c102 	mla	r1, r1, r2, ip
 802a206:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802a208:	fb03 1302 	mla	r3, r3, r2, r1
 802a20c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a210:	b1db      	cbz	r3, 802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a212:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a214:	4353      	muls	r3, r2
 802a216:	1c5a      	adds	r2, r3, #1
 802a218:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a21c:	4ac6      	ldr	r2, [pc, #792]	@ (802a538 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802a21e:	121b      	asrs	r3, r3, #8
 802a220:	6812      	ldr	r2, [r2, #0]
 802a222:	2bff      	cmp	r3, #255	@ 0xff
 802a224:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a228:	f040 8099 	bne.w	802a35e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 802a22c:	0953      	lsrs	r3, r2, #5
 802a22e:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802a232:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a236:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a23a:	f02c 0c07 	bic.w	ip, ip, #7
 802a23e:	ea43 0c0c 	orr.w	ip, r3, ip
 802a242:	ea4c 0202 	orr.w	r2, ip, r2
 802a246:	f8a8 2000 	strh.w	r2, [r8]
 802a24a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802a24c:	f108 0802 	add.w	r8, r8, #2
 802a250:	441c      	add	r4, r3
 802a252:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a254:	441e      	add	r6, r3
 802a256:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802a258:	3b01      	subs	r3, #1
 802a25a:	930e      	str	r3, [sp, #56]	@ 0x38
 802a25c:	e762      	b.n	802a124 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802a25e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802a260:	f109 0902 	add.w	r9, r9, #2
 802a264:	441c      	add	r4, r3
 802a266:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a268:	441e      	add	r6, r3
 802a26a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a26c:	3b01      	subs	r3, #1
 802a26e:	9309      	str	r3, [sp, #36]	@ 0x24
 802a270:	e736      	b.n	802a0e0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802a272:	d024      	beq.n	802a2be <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a276:	982b      	ldr	r0, [sp, #172]	@ 0xac
 802a278:	3b01      	subs	r3, #1
 802a27a:	fb00 4003 	mla	r0, r0, r3, r4
 802a27e:	1400      	asrs	r0, r0, #16
 802a280:	f53f af4b 	bmi.w	802a11a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a284:	3901      	subs	r1, #1
 802a286:	4288      	cmp	r0, r1
 802a288:	f6bf af47 	bge.w	802a11a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a28c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802a28e:	fb01 6303 	mla	r3, r1, r3, r6
 802a292:	141b      	asrs	r3, r3, #16
 802a294:	f53f af41 	bmi.w	802a11a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a298:	3a01      	subs	r2, #1
 802a29a:	4293      	cmp	r3, r2
 802a29c:	f6bf af3d 	bge.w	802a11a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a2a0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802a2a4:	46c8      	mov	r8, r9
 802a2a6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802a2aa:	930e      	str	r3, [sp, #56]	@ 0x38
 802a2ac:	f1bb 0f00 	cmp.w	fp, #0
 802a2b0:	f300 80b7 	bgt.w	802a422 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 802a2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a2b6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a2ba:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a2be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a2c0:	2b00      	cmp	r3, #0
 802a2c2:	f340 818e 	ble.w	802a5e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 802a2c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a2ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a2cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a2d0:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a2d4:	eef0 6a48 	vmov.f32	s13, s16
 802a2d8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a2dc:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a2e0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a2e4:	ee16 4a90 	vmov	r4, s13
 802a2e8:	eef0 6a68 	vmov.f32	s13, s17
 802a2ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a2f0:	ee16 6a90 	vmov	r6, s13
 802a2f4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802a2f8:	ee69 7a27 	vmul.f32	s15, s18, s15
 802a2fc:	ee37 8a48 	vsub.f32	s16, s14, s16
 802a300:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802a304:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802a308:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802a30c:	ee18 2a10 	vmov	r2, s16
 802a310:	eeb0 8a47 	vmov.f32	s16, s14
 802a314:	fb92 f3f3 	sdiv	r3, r2, r3
 802a318:	ee18 2a90 	vmov	r2, s17
 802a31c:	932b      	str	r3, [sp, #172]	@ 0xac
 802a31e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a320:	eef0 8a67 	vmov.f32	s17, s15
 802a324:	fb92 f3f3 	sdiv	r3, r2, r3
 802a328:	932c      	str	r3, [sp, #176]	@ 0xb0
 802a32a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802a32c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a32e:	3b01      	subs	r3, #1
 802a330:	930d      	str	r3, [sp, #52]	@ 0x34
 802a332:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a334:	bf08      	it	eq
 802a336:	4613      	moveq	r3, r2
 802a338:	9309      	str	r3, [sp, #36]	@ 0x24
 802a33a:	e6c2      	b.n	802a0c2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802a33c:	2900      	cmp	r1, #0
 802a33e:	f43f af4d 	beq.w	802a1dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a342:	eb0a 0003 	add.w	r0, sl, r3
 802a346:	0843      	lsrs	r3, r0, #1
 802a348:	07c0      	lsls	r0, r0, #31
 802a34a:	5cfb      	ldrb	r3, [r7, r3]
 802a34c:	bf54      	ite	pl
 802a34e:	f003 030f 	andpl.w	r3, r3, #15
 802a352:	111b      	asrmi	r3, r3, #4
 802a354:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a358:	b2db      	uxtb	r3, r3
 802a35a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802a35c:	e73e      	b.n	802a1dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802a35e:	f8b8 e000 	ldrh.w	lr, [r8]
 802a362:	fa1f fb83 	uxth.w	fp, r3
 802a366:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a36a:	43db      	mvns	r3, r3
 802a36c:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a370:	fb11 f10b 	smulbb	r1, r1, fp
 802a374:	b2db      	uxtb	r3, r3
 802a376:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a37a:	fa5f fc8c 	uxtb.w	ip, ip
 802a37e:	b2d2      	uxtb	r2, r2
 802a380:	fb00 1003 	mla	r0, r0, r3, r1
 802a384:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a388:	fb1c fc0b 	smulbb	ip, ip, fp
 802a38c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a390:	b280      	uxth	r0, r0
 802a392:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a396:	fb12 fb0b 	smulbb	fp, r2, fp
 802a39a:	fa5f fe8e 	uxtb.w	lr, lr
 802a39e:	fb01 cc03 	mla	ip, r1, r3, ip
 802a3a2:	fb0e bb03 	mla	fp, lr, r3, fp
 802a3a6:	1c43      	adds	r3, r0, #1
 802a3a8:	fa1f fc8c 	uxth.w	ip, ip
 802a3ac:	fa1f fb8b 	uxth.w	fp, fp
 802a3b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a3b4:	f10c 0101 	add.w	r1, ip, #1
 802a3b8:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802a3bc:	f10b 0001 	add.w	r0, fp, #1
 802a3c0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a3c4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802a3c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a3cc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802a3d0:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a3d4:	4318      	orrs	r0, r3
 802a3d6:	ea40 000c 	orr.w	r0, r0, ip
 802a3da:	f8a8 0000 	strh.w	r0, [r8]
 802a3de:	e734      	b.n	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3e0:	f113 0b01 	adds.w	fp, r3, #1
 802a3e4:	f53f af31 	bmi.w	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3e8:	45dc      	cmp	ip, fp
 802a3ea:	f6ff af2e 	blt.w	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3ee:	f110 0b01 	adds.w	fp, r0, #1
 802a3f2:	f53f af2a 	bmi.w	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3f6:	45de      	cmp	lr, fp
 802a3f8:	f6ff af27 	blt.w	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a3fc:	9302      	str	r3, [sp, #8]
 802a3fe:	fa0f f38e 	sxth.w	r3, lr
 802a402:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a404:	9301      	str	r3, [sp, #4]
 802a406:	fa0f f38c 	sxth.w	r3, ip
 802a40a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802a40e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802a412:	9300      	str	r3, [sp, #0]
 802a414:	463a      	mov	r2, r7
 802a416:	4653      	mov	r3, sl
 802a418:	4641      	mov	r1, r8
 802a41a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802a41c:	f7ff fd2a 	bl	8029e74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802a420:	e713      	b.n	802a24a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802a422:	1422      	asrs	r2, r4, #16
 802a424:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802a426:	1433      	asrs	r3, r6, #16
 802a428:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a42c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a430:	fb05 2303 	mla	r3, r5, r3, r2
 802a434:	085a      	lsrs	r2, r3, #1
 802a436:	07dd      	lsls	r5, r3, #31
 802a438:	5cba      	ldrb	r2, [r7, r2]
 802a43a:	bf54      	ite	pl
 802a43c:	f002 020f 	andpl.w	r2, r2, #15
 802a440:	1112      	asrmi	r2, r2, #4
 802a442:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a446:	b2d2      	uxtb	r2, r2
 802a448:	2900      	cmp	r1, #0
 802a44a:	d077      	beq.n	802a53c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802a44c:	f103 0e01 	add.w	lr, r3, #1
 802a450:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802a454:	f01e 0f01 	tst.w	lr, #1
 802a458:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a45c:	bf0c      	ite	eq
 802a45e:	f00c 0c0f 	andeq.w	ip, ip, #15
 802a462:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802a466:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a46a:	fa5f f58c 	uxtb.w	r5, ip
 802a46e:	9512      	str	r5, [sp, #72]	@ 0x48
 802a470:	b308      	cbz	r0, 802a4b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a472:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a474:	442b      	add	r3, r5
 802a476:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a47a:	07dd      	lsls	r5, r3, #31
 802a47c:	f103 0301 	add.w	r3, r3, #1
 802a480:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a484:	bf54      	ite	pl
 802a486:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a48a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a48e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a492:	fa5f f58c 	uxtb.w	r5, ip
 802a496:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a49a:	950c      	str	r5, [sp, #48]	@ 0x30
 802a49c:	07dd      	lsls	r5, r3, #31
 802a49e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a4a2:	bf54      	ite	pl
 802a4a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a4a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a4ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a4b0:	fa5f f38c 	uxtb.w	r3, ip
 802a4b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a4b6:	b289      	uxth	r1, r1
 802a4b8:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a4ba:	b280      	uxth	r0, r0
 802a4bc:	fb01 f300 	mul.w	r3, r1, r0
 802a4c0:	0109      	lsls	r1, r1, #4
 802a4c2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802a4c6:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802a4ca:	1ac9      	subs	r1, r1, r3
 802a4cc:	b280      	uxth	r0, r0
 802a4ce:	b289      	uxth	r1, r1
 802a4d0:	ebac 0c00 	sub.w	ip, ip, r0
 802a4d4:	4369      	muls	r1, r5
 802a4d6:	fa1f fc8c 	uxth.w	ip, ip
 802a4da:	fb02 120c 	mla	r2, r2, ip, r1
 802a4de:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a4e0:	fb00 2001 	mla	r0, r0, r1, r2
 802a4e4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802a4e6:	fb03 0302 	mla	r3, r3, r2, r0
 802a4ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a4ee:	b1d3      	cbz	r3, 802a526 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a4f0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a4f2:	4353      	muls	r3, r2
 802a4f4:	1c5a      	adds	r2, r3, #1
 802a4f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a4fa:	4a0f      	ldr	r2, [pc, #60]	@ (802a538 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 802a4fc:	121b      	asrs	r3, r3, #8
 802a4fe:	6812      	ldr	r2, [r2, #0]
 802a500:	2bff      	cmp	r3, #255	@ 0xff
 802a502:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802a506:	d12d      	bne.n	802a564 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 802a508:	0953      	lsrs	r3, r2, #5
 802a50a:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802a50e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a512:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a516:	f02c 0c07 	bic.w	ip, ip, #7
 802a51a:	ea43 0c0c 	orr.w	ip, r3, ip
 802a51e:	ea4c 0202 	orr.w	r2, ip, r2
 802a522:	f8a8 2000 	strh.w	r2, [r8]
 802a526:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802a528:	f108 0802 	add.w	r8, r8, #2
 802a52c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a530:	441c      	add	r4, r3
 802a532:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a534:	441e      	add	r6, r3
 802a536:	e6b9      	b.n	802a2ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802a538:	2400b8d4 	.word	0x2400b8d4
 802a53c:	2800      	cmp	r0, #0
 802a53e:	d0ba      	beq.n	802a4b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a540:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a542:	442b      	add	r3, r5
 802a544:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802a548:	07db      	lsls	r3, r3, #31
 802a54a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802a54e:	bf54      	ite	pl
 802a550:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a554:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a558:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a55c:	fa5f f38c 	uxtb.w	r3, ip
 802a560:	930c      	str	r3, [sp, #48]	@ 0x30
 802a562:	e7a8      	b.n	802a4b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802a564:	f8b8 e000 	ldrh.w	lr, [r8]
 802a568:	fa1f fa83 	uxth.w	sl, r3
 802a56c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802a570:	43db      	mvns	r3, r3
 802a572:	ea4f 202e 	mov.w	r0, lr, asr #8
 802a576:	fb11 f10a 	smulbb	r1, r1, sl
 802a57a:	b2db      	uxtb	r3, r3
 802a57c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802a580:	b2d2      	uxtb	r2, r2
 802a582:	fa5f fc8c 	uxtb.w	ip, ip
 802a586:	fb00 1003 	mla	r0, r0, r3, r1
 802a58a:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802a58e:	fb12 f20a 	smulbb	r2, r2, sl
 802a592:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802a596:	b280      	uxth	r0, r0
 802a598:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802a59c:	fb1c fc0a 	smulbb	ip, ip, sl
 802a5a0:	fa5f fe8e 	uxtb.w	lr, lr
 802a5a4:	fb0e 2203 	mla	r2, lr, r3, r2
 802a5a8:	fb01 cc03 	mla	ip, r1, r3, ip
 802a5ac:	1c43      	adds	r3, r0, #1
 802a5ae:	b292      	uxth	r2, r2
 802a5b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a5b4:	1c51      	adds	r1, r2, #1
 802a5b6:	fa1f fc8c 	uxth.w	ip, ip
 802a5ba:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802a5be:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802a5c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802a5c6:	4308      	orrs	r0, r1
 802a5c8:	f10c 0101 	add.w	r1, ip, #1
 802a5cc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a5d0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802a5d4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802a5d8:	ea40 000c 	orr.w	r0, r0, ip
 802a5dc:	f8a8 0000 	strh.w	r0, [r8]
 802a5e0:	e7a1      	b.n	802a526 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802a5e2:	b017      	add	sp, #92	@ 0x5c
 802a5e4:	ecbd 8b08 	vpop	{d8-d11}
 802a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a5f0:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	@ 0x28
 802a5f4:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a5f8:	2c00      	cmp	r4, #0
 802a5fa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a5fe:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 802a602:	fb04 ce03 	mla	lr, r4, r3, ip
 802a606:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 802a60a:	db60      	blt.n	802a6ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a60c:	45a1      	cmp	r9, r4
 802a60e:	dd5e      	ble.n	802a6ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 802a610:	f1bc 0f00 	cmp.w	ip, #0
 802a614:	db59      	blt.n	802a6ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a616:	45e0      	cmp	r8, ip
 802a618:	dd57      	ble.n	802a6ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 802a61a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 802a61e:	f01e 0f01 	tst.w	lr, #1
 802a622:	5c16      	ldrb	r6, [r2, r0]
 802a624:	bf0c      	ite	eq
 802a626:	f006 060f 	andeq.w	r6, r6, #15
 802a62a:	1136      	asrne	r6, r6, #4
 802a62c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a630:	b2f6      	uxtb	r6, r6
 802a632:	f11c 0001 	adds.w	r0, ip, #1
 802a636:	d44d      	bmi.n	802a6d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a638:	4580      	cmp	r8, r0
 802a63a:	dd4b      	ble.n	802a6d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 802a63c:	2d00      	cmp	r5, #0
 802a63e:	d04b      	beq.n	802a6d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 802a640:	f10e 0a01 	add.w	sl, lr, #1
 802a644:	ea4f 005a 	mov.w	r0, sl, lsr #1
 802a648:	f01a 0f01 	tst.w	sl, #1
 802a64c:	5c10      	ldrb	r0, [r2, r0]
 802a64e:	bf0c      	ite	eq
 802a650:	f000 000f 	andeq.w	r0, r0, #15
 802a654:	1100      	asrne	r0, r0, #4
 802a656:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a65a:	b2c0      	uxtb	r0, r0
 802a65c:	3401      	adds	r4, #1
 802a65e:	d43f      	bmi.n	802a6e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a660:	45a1      	cmp	r9, r4
 802a662:	dd3d      	ble.n	802a6e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802a664:	2f00      	cmp	r7, #0
 802a666:	f000 8093 	beq.w	802a790 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802a66a:	f1bc 0f00 	cmp.w	ip, #0
 802a66e:	db35      	blt.n	802a6dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a670:	45e0      	cmp	r8, ip
 802a672:	dd33      	ble.n	802a6dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802a674:	eb03 090e 	add.w	r9, r3, lr
 802a678:	ea4f 0459 	mov.w	r4, r9, lsr #1
 802a67c:	f019 0f01 	tst.w	r9, #1
 802a680:	5d14      	ldrb	r4, [r2, r4]
 802a682:	bf0c      	ite	eq
 802a684:	f004 040f 	andeq.w	r4, r4, #15
 802a688:	1124      	asrne	r4, r4, #4
 802a68a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a68e:	b2e4      	uxtb	r4, r4
 802a690:	f11c 0c01 	adds.w	ip, ip, #1
 802a694:	d427      	bmi.n	802a6e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a696:	45e0      	cmp	r8, ip
 802a698:	dd25      	ble.n	802a6e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 802a69a:	b335      	cbz	r5, 802a6ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 802a69c:	3301      	adds	r3, #1
 802a69e:	449e      	add	lr, r3
 802a6a0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a6a4:	f01e 0f01 	tst.w	lr, #1
 802a6a8:	5cd2      	ldrb	r2, [r2, r3]
 802a6aa:	bf0c      	ite	eq
 802a6ac:	f002 020f 	andeq.w	r2, r2, #15
 802a6b0:	1112      	asrne	r2, r2, #4
 802a6b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802a6b6:	b2d3      	uxtb	r3, r2
 802a6b8:	2d0f      	cmp	r5, #15
 802a6ba:	d917      	bls.n	802a6ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 802a6bc:	4b37      	ldr	r3, [pc, #220]	@ (802a79c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802a6be:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 802a6c2:	4a37      	ldr	r2, [pc, #220]	@ (802a7a0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 802a6c4:	4837      	ldr	r0, [pc, #220]	@ (802a7a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 802a6c6:	f000 fc4f 	bl	802af68 <__assert_func>
 802a6ca:	2600      	movs	r6, #0
 802a6cc:	e7b1      	b.n	802a632 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802a6ce:	2000      	movs	r0, #0
 802a6d0:	4606      	mov	r6, r0
 802a6d2:	e7c3      	b.n	802a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a6d4:	2000      	movs	r0, #0
 802a6d6:	e7c1      	b.n	802a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a6d8:	4628      	mov	r0, r5
 802a6da:	e7bf      	b.n	802a65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 802a6dc:	2400      	movs	r4, #0
 802a6de:	e7d7      	b.n	802a690 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802a6e0:	2300      	movs	r3, #0
 802a6e2:	461c      	mov	r4, r3
 802a6e4:	e7e8      	b.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a6e6:	2300      	movs	r3, #0
 802a6e8:	e7e6      	b.n	802a6b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 802a6ea:	462b      	mov	r3, r5
 802a6ec:	2f0f      	cmp	r7, #15
 802a6ee:	d8e5      	bhi.n	802a6bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a6f0:	b2ad      	uxth	r5, r5
 802a6f2:	b2bf      	uxth	r7, r7
 802a6f4:	fb05 fc07 	mul.w	ip, r5, r7
 802a6f8:	012d      	lsls	r5, r5, #4
 802a6fa:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 802a6fe:	f5c5 7280 	rsb	r2, r5, #256	@ 0x100
 802a702:	eba5 050c 	sub.w	r5, r5, ip
 802a706:	b2bf      	uxth	r7, r7
 802a708:	b2ad      	uxth	r5, r5
 802a70a:	1bd2      	subs	r2, r2, r7
 802a70c:	4368      	muls	r0, r5
 802a70e:	b292      	uxth	r2, r2
 802a710:	fb06 0002 	mla	r0, r6, r2, r0
 802a714:	fb07 0404 	mla	r4, r7, r4, r0
 802a718:	fb0c 4303 	mla	r3, ip, r3, r4
 802a71c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a720:	b3a3      	cbz	r3, 802a78c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802a722:	4a21      	ldr	r2, [pc, #132]	@ (802a7a8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 802a724:	880e      	ldrh	r6, [r1, #0]
 802a726:	6815      	ldr	r5, [r2, #0]
 802a728:	b29a      	uxth	r2, r3
 802a72a:	1234      	asrs	r4, r6, #8
 802a72c:	43db      	mvns	r3, r3
 802a72e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802a732:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802a736:	b2db      	uxtb	r3, r3
 802a738:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802a73c:	fb10 f002 	smulbb	r0, r0, r2
 802a740:	b2ed      	uxtb	r5, r5
 802a742:	fb17 f702 	smulbb	r7, r7, r2
 802a746:	fb04 0403 	mla	r4, r4, r3, r0
 802a74a:	10f0      	asrs	r0, r6, #3
 802a74c:	fb15 f202 	smulbb	r2, r5, r2
 802a750:	00f6      	lsls	r6, r6, #3
 802a752:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a756:	b2a4      	uxth	r4, r4
 802a758:	b2f6      	uxtb	r6, r6
 802a75a:	fb00 7003 	mla	r0, r0, r3, r7
 802a75e:	fb06 2303 	mla	r3, r6, r3, r2
 802a762:	b280      	uxth	r0, r0
 802a764:	b29a      	uxth	r2, r3
 802a766:	1c63      	adds	r3, r4, #1
 802a768:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802a76c:	1c53      	adds	r3, r2, #1
 802a76e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a772:	1c42      	adds	r2, r0, #1
 802a774:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802a778:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a77c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a780:	0940      	lsrs	r0, r0, #5
 802a782:	4323      	orrs	r3, r4
 802a784:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a788:	4303      	orrs	r3, r0
 802a78a:	800b      	strh	r3, [r1, #0]
 802a78c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a790:	2d0f      	cmp	r5, #15
 802a792:	d893      	bhi.n	802a6bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802a794:	463b      	mov	r3, r7
 802a796:	463c      	mov	r4, r7
 802a798:	e7aa      	b.n	802a6f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 802a79a:	bf00      	nop
 802a79c:	08030109 	.word	0x08030109
 802a7a0:	080306d6 	.word	0x080306d6
 802a7a4:	0803018d 	.word	0x0803018d
 802a7a8:	2400b8d4 	.word	0x2400b8d4

0802a7ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a7b0:	ed2d 8b08 	vpush	{d8-d11}
 802a7b4:	b093      	sub	sp, #76	@ 0x4c
 802a7b6:	461d      	mov	r5, r3
 802a7b8:	eeb0 aa40 	vmov.f32	s20, s0
 802a7bc:	920c      	str	r2, [sp, #48]	@ 0x30
 802a7be:	eef0 9a60 	vmov.f32	s19, s1
 802a7c2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a7c4:	eeb0 9a41 	vmov.f32	s18, s2
 802a7c8:	9011      	str	r0, [sp, #68]	@ 0x44
 802a7ca:	eeb0 8a62 	vmov.f32	s16, s5
 802a7ce:	6850      	ldr	r0, [r2, #4]
 802a7d0:	eef0 8a43 	vmov.f32	s17, s6
 802a7d4:	9107      	str	r1, [sp, #28]
 802a7d6:	eef0 ba44 	vmov.f32	s23, s8
 802a7da:	6812      	ldr	r2, [r2, #0]
 802a7dc:	eeb0 ba64 	vmov.f32	s22, s9
 802a7e0:	eef0 aa45 	vmov.f32	s21, s10
 802a7e4:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a7e8:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a7ec:	fb00 1303 	mla	r3, r0, r3, r1
 802a7f0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802a7f4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a7f6:	689b      	ldr	r3, [r3, #8]
 802a7f8:	3301      	adds	r3, #1
 802a7fa:	f023 0301 	bic.w	r3, r3, #1
 802a7fe:	9306      	str	r3, [sp, #24]
 802a800:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a802:	681f      	ldr	r7, [r3, #0]
 802a804:	9b07      	ldr	r3, [sp, #28]
 802a806:	2b00      	cmp	r3, #0
 802a808:	dc03      	bgt.n	802a812 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802a80a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802a80c:	2b00      	cmp	r3, #0
 802a80e:	f340 8267 	ble.w	802ace0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a812:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a814:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a818:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a81c:	1e48      	subs	r0, r1, #1
 802a81e:	f102 3cff 	add.w	ip, r2, #4294967295
 802a822:	2d00      	cmp	r5, #0
 802a824:	f340 80b7 	ble.w	802a996 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802a828:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a82c:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a830:	d406      	bmi.n	802a840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a832:	4586      	cmp	lr, r0
 802a834:	da04      	bge.n	802a840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a836:	2b00      	cmp	r3, #0
 802a838:	db02      	blt.n	802a840 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802a83a:	4563      	cmp	r3, ip
 802a83c:	f2c0 80ac 	blt.w	802a998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802a840:	f11e 0e01 	adds.w	lr, lr, #1
 802a844:	f100 809f 	bmi.w	802a986 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a848:	4571      	cmp	r1, lr
 802a84a:	f2c0 809c 	blt.w	802a986 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a84e:	3301      	adds	r3, #1
 802a850:	f100 8099 	bmi.w	802a986 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a854:	429a      	cmp	r2, r3
 802a856:	f2c0 8096 	blt.w	802a986 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 802a85a:	46c8      	mov	r8, r9
 802a85c:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802a860:	9509      	str	r5, [sp, #36]	@ 0x24
 802a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a864:	2b00      	cmp	r3, #0
 802a866:	f340 80b5 	ble.w	802a9d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802a86a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802a86e:	1430      	asrs	r0, r6, #16
 802a870:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802a874:	9308      	str	r3, [sp, #32]
 802a876:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a878:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802a87c:	1423      	asrs	r3, r4, #16
 802a87e:	f100 813f 	bmi.w	802ab00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a882:	f10c 3bff 	add.w	fp, ip, #4294967295
 802a886:	455b      	cmp	r3, fp
 802a888:	f280 813a 	bge.w	802ab00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a88c:	2800      	cmp	r0, #0
 802a88e:	f2c0 8137 	blt.w	802ab00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a892:	f10e 3bff 	add.w	fp, lr, #4294967295
 802a896:	4558      	cmp	r0, fp
 802a898:	f280 8132 	bge.w	802ab00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802a89c:	9a06      	ldr	r2, [sp, #24]
 802a89e:	fb00 3302 	mla	r3, r0, r2, r3
 802a8a2:	0858      	lsrs	r0, r3, #1
 802a8a4:	07da      	lsls	r2, r3, #31
 802a8a6:	9a08      	ldr	r2, [sp, #32]
 802a8a8:	f817 c000 	ldrb.w	ip, [r7, r0]
 802a8ac:	bf54      	ite	pl
 802a8ae:	f00c 0c0f 	andpl.w	ip, ip, #15
 802a8b2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802a8b6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802a8ba:	fa5f fc8c 	uxtb.w	ip, ip
 802a8be:	2a00      	cmp	r2, #0
 802a8c0:	f000 80cc 	beq.w	802aa5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802a8c4:	1c58      	adds	r0, r3, #1
 802a8c6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802a8ca:	07c0      	lsls	r0, r0, #31
 802a8cc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802a8d0:	bf54      	ite	pl
 802a8d2:	f00e 0e0f 	andpl.w	lr, lr, #15
 802a8d6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802a8da:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802a8de:	fa5f fe8e 	uxtb.w	lr, lr
 802a8e2:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802a8e6:	b1b9      	cbz	r1, 802a918 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802a8e8:	4453      	add	r3, sl
 802a8ea:	0858      	lsrs	r0, r3, #1
 802a8ec:	07da      	lsls	r2, r3, #31
 802a8ee:	5c38      	ldrb	r0, [r7, r0]
 802a8f0:	bf54      	ite	pl
 802a8f2:	f000 000f 	andpl.w	r0, r0, #15
 802a8f6:	1100      	asrmi	r0, r0, #4
 802a8f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a8fc:	b2c0      	uxtb	r0, r0
 802a8fe:	900a      	str	r0, [sp, #40]	@ 0x28
 802a900:	1c58      	adds	r0, r3, #1
 802a902:	0843      	lsrs	r3, r0, #1
 802a904:	07c2      	lsls	r2, r0, #31
 802a906:	5cfb      	ldrb	r3, [r7, r3]
 802a908:	bf54      	ite	pl
 802a90a:	f003 030f 	andpl.w	r3, r3, #15
 802a90e:	111b      	asrmi	r3, r3, #4
 802a910:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802a914:	b2db      	uxtb	r3, r3
 802a916:	930e      	str	r3, [sp, #56]	@ 0x38
 802a918:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802a91c:	b289      	uxth	r1, r1
 802a91e:	fb02 f301 	mul.w	r3, r2, r1
 802a922:	0112      	lsls	r2, r2, #4
 802a924:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802a928:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802a92c:	1ad2      	subs	r2, r2, r3
 802a92e:	b289      	uxth	r1, r1
 802a930:	b292      	uxth	r2, r2
 802a932:	1a40      	subs	r0, r0, r1
 802a934:	fa1f fe80 	uxth.w	lr, r0
 802a938:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802a93a:	4342      	muls	r2, r0
 802a93c:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802a940:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802a942:	fb01 c102 	mla	r1, r1, r2, ip
 802a946:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802a948:	fb03 1302 	mla	r3, r3, r2, r1
 802a94c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a950:	2bff      	cmp	r3, #255	@ 0xff
 802a952:	f040 8094 	bne.w	802aa7e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802a956:	4bbf      	ldr	r3, [pc, #764]	@ (802ac54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802a958:	681a      	ldr	r2, [r3, #0]
 802a95a:	4bbf      	ldr	r3, [pc, #764]	@ (802ac58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802a95c:	0951      	lsrs	r1, r2, #5
 802a95e:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802a962:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a966:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802a96a:	430b      	orrs	r3, r1
 802a96c:	4313      	orrs	r3, r2
 802a96e:	f8a8 3000 	strh.w	r3, [r8]
 802a972:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a974:	f108 0802 	add.w	r8, r8, #2
 802a978:	441c      	add	r4, r3
 802a97a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a97c:	441e      	add	r6, r3
 802a97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802a980:	3b01      	subs	r3, #1
 802a982:	9309      	str	r3, [sp, #36]	@ 0x24
 802a984:	e76d      	b.n	802a862 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802a986:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a988:	3d01      	subs	r5, #1
 802a98a:	f109 0902 	add.w	r9, r9, #2
 802a98e:	441c      	add	r4, r3
 802a990:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a992:	441e      	add	r6, r3
 802a994:	e745      	b.n	802a822 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a996:	d021      	beq.n	802a9dc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 802a998:	1e6b      	subs	r3, r5, #1
 802a99a:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a99c:	fb00 4003 	mla	r0, r0, r3, r4
 802a9a0:	1400      	asrs	r0, r0, #16
 802a9a2:	f53f af5a 	bmi.w	802a85a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a9a6:	3901      	subs	r1, #1
 802a9a8:	4288      	cmp	r0, r1
 802a9aa:	f6bf af56 	bge.w	802a85a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a9ae:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a9b0:	fb01 6303 	mla	r3, r1, r3, r6
 802a9b4:	141b      	asrs	r3, r3, #16
 802a9b6:	f53f af50 	bmi.w	802a85a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a9ba:	3a01      	subs	r2, #1
 802a9bc:	4293      	cmp	r3, r2
 802a9be:	f6bf af4c 	bge.w	802a85a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802a9c2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802a9c6:	46a8      	mov	r8, r5
 802a9c8:	46ce      	mov	lr, r9
 802a9ca:	9308      	str	r3, [sp, #32]
 802a9cc:	f1b8 0f00 	cmp.w	r8, #0
 802a9d0:	f300 80b6 	bgt.w	802ab40 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802a9d4:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a9d8:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802a9dc:	9b07      	ldr	r3, [sp, #28]
 802a9de:	2b00      	cmp	r3, #0
 802a9e0:	f340 817e 	ble.w	802ace0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 802a9e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a9e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a9ea:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802a9ee:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802a9f2:	eef0 6a48 	vmov.f32	s13, s16
 802a9f6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802a9fa:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802a9fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aa02:	ee16 4a90 	vmov	r4, s13
 802aa06:	eef0 6a68 	vmov.f32	s13, s17
 802aa0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802aa0e:	ee16 6a90 	vmov	r6, s13
 802aa12:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802aa16:	ee69 7a27 	vmul.f32	s15, s18, s15
 802aa1a:	ee37 8a48 	vsub.f32	s16, s14, s16
 802aa1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802aa22:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802aa26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802aa2a:	ee18 2a10 	vmov	r2, s16
 802aa2e:	eeb0 8a47 	vmov.f32	s16, s14
 802aa32:	fb92 f3f3 	sdiv	r3, r2, r3
 802aa36:	ee18 2a90 	vmov	r2, s17
 802aa3a:	9327      	str	r3, [sp, #156]	@ 0x9c
 802aa3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802aa3e:	eef0 8a67 	vmov.f32	s17, s15
 802aa42:	fb92 f3f3 	sdiv	r3, r2, r3
 802aa46:	9328      	str	r3, [sp, #160]	@ 0xa0
 802aa48:	9b07      	ldr	r3, [sp, #28]
 802aa4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802aa4c:	3b01      	subs	r3, #1
 802aa4e:	9307      	str	r3, [sp, #28]
 802aa50:	bf08      	it	eq
 802aa52:	4615      	moveq	r5, r2
 802aa54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802aa56:	bf18      	it	ne
 802aa58:	461d      	movne	r5, r3
 802aa5a:	e6d3      	b.n	802a804 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802aa5c:	2900      	cmp	r1, #0
 802aa5e:	f43f af5b 	beq.w	802a918 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802aa62:	eb0a 0003 	add.w	r0, sl, r3
 802aa66:	0843      	lsrs	r3, r0, #1
 802aa68:	07c0      	lsls	r0, r0, #31
 802aa6a:	5cfb      	ldrb	r3, [r7, r3]
 802aa6c:	bf54      	ite	pl
 802aa6e:	f003 030f 	andpl.w	r3, r3, #15
 802aa72:	111b      	asrmi	r3, r3, #4
 802aa74:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802aa78:	b2db      	uxtb	r3, r3
 802aa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 802aa7c:	e74c      	b.n	802a918 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802aa7e:	2b00      	cmp	r3, #0
 802aa80:	f43f af77 	beq.w	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802aa84:	4a73      	ldr	r2, [pc, #460]	@ (802ac54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802aa86:	fa1f fe83 	uxth.w	lr, r3
 802aa8a:	f8b8 c000 	ldrh.w	ip, [r8]
 802aa8e:	43db      	mvns	r3, r3
 802aa90:	6810      	ldr	r0, [r2, #0]
 802aa92:	ea4f 212c 	mov.w	r1, ip, asr #8
 802aa96:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802aa9a:	b2db      	uxtb	r3, r3
 802aa9c:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802aaa0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802aaa4:	fb12 f20e 	smulbb	r2, r2, lr
 802aaa8:	b2c0      	uxtb	r0, r0
 802aaaa:	fb1b fb0e 	smulbb	fp, fp, lr
 802aaae:	fb01 2103 	mla	r1, r1, r3, r2
 802aab2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802aab6:	fb10 fe0e 	smulbb	lr, r0, lr
 802aaba:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802aabe:	b289      	uxth	r1, r1
 802aac0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802aac4:	fa5f fc8c 	uxtb.w	ip, ip
 802aac8:	fb02 b203 	mla	r2, r2, r3, fp
 802aacc:	1c48      	adds	r0, r1, #1
 802aace:	fb0c e303 	mla	r3, ip, r3, lr
 802aad2:	b292      	uxth	r2, r2
 802aad4:	b29b      	uxth	r3, r3
 802aad6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802aada:	f102 0b01 	add.w	fp, r2, #1
 802aade:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802aae2:	1c59      	adds	r1, r3, #1
 802aae4:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802aae8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802aaec:	0952      	lsrs	r2, r2, #5
 802aaee:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802aaf2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802aaf6:	4301      	orrs	r1, r0
 802aaf8:	4311      	orrs	r1, r2
 802aafa:	f8a8 1000 	strh.w	r1, [r8]
 802aafe:	e738      	b.n	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab00:	f113 0b01 	adds.w	fp, r3, #1
 802ab04:	f53f af35 	bmi.w	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab08:	45dc      	cmp	ip, fp
 802ab0a:	f6ff af32 	blt.w	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab0e:	f110 0b01 	adds.w	fp, r0, #1
 802ab12:	f53f af2e 	bmi.w	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab16:	45de      	cmp	lr, fp
 802ab18:	f6ff af2b 	blt.w	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab1c:	9302      	str	r3, [sp, #8]
 802ab1e:	fa0f f38e 	sxth.w	r3, lr
 802ab22:	9a08      	ldr	r2, [sp, #32]
 802ab24:	9301      	str	r3, [sp, #4]
 802ab26:	fa0f f38c 	sxth.w	r3, ip
 802ab2a:	9105      	str	r1, [sp, #20]
 802ab2c:	4641      	mov	r1, r8
 802ab2e:	9300      	str	r3, [sp, #0]
 802ab30:	4653      	mov	r3, sl
 802ab32:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ab36:	463a      	mov	r2, r7
 802ab38:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802ab3a:	f7ff fd57 	bl	802a5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802ab3e:	e718      	b.n	802a972 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802ab40:	1422      	asrs	r2, r4, #16
 802ab42:	9906      	ldr	r1, [sp, #24]
 802ab44:	1433      	asrs	r3, r6, #16
 802ab46:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802ab4a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802ab4e:	fb01 2303 	mla	r3, r1, r3, r2
 802ab52:	085a      	lsrs	r2, r3, #1
 802ab54:	07d9      	lsls	r1, r3, #31
 802ab56:	5cba      	ldrb	r2, [r7, r2]
 802ab58:	bf54      	ite	pl
 802ab5a:	f002 020f 	andpl.w	r2, r2, #15
 802ab5e:	1112      	asrmi	r2, r2, #4
 802ab60:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ab64:	b2d2      	uxtb	r2, r2
 802ab66:	2800      	cmp	r0, #0
 802ab68:	d063      	beq.n	802ac32 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802ab6a:	f103 0a01 	add.w	sl, r3, #1
 802ab6e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802ab72:	f01a 0f01 	tst.w	sl, #1
 802ab76:	5c79      	ldrb	r1, [r7, r1]
 802ab78:	bf0c      	ite	eq
 802ab7a:	f001 010f 	andeq.w	r1, r1, #15
 802ab7e:	1109      	asrne	r1, r1, #4
 802ab80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ab84:	b2c9      	uxtb	r1, r1
 802ab86:	910f      	str	r1, [sp, #60]	@ 0x3c
 802ab88:	f1bc 0f00 	cmp.w	ip, #0
 802ab8c:	d01a      	beq.n	802abc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802ab8e:	9908      	ldr	r1, [sp, #32]
 802ab90:	440b      	add	r3, r1
 802ab92:	0859      	lsrs	r1, r3, #1
 802ab94:	f013 0f01 	tst.w	r3, #1
 802ab98:	f103 0301 	add.w	r3, r3, #1
 802ab9c:	5c79      	ldrb	r1, [r7, r1]
 802ab9e:	bf0c      	ite	eq
 802aba0:	f001 010f 	andeq.w	r1, r1, #15
 802aba4:	1109      	asrne	r1, r1, #4
 802aba6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802abaa:	b2c9      	uxtb	r1, r1
 802abac:	910b      	str	r1, [sp, #44]	@ 0x2c
 802abae:	0859      	lsrs	r1, r3, #1
 802abb0:	07db      	lsls	r3, r3, #31
 802abb2:	5c79      	ldrb	r1, [r7, r1]
 802abb4:	bf54      	ite	pl
 802abb6:	f001 010f 	andpl.w	r1, r1, #15
 802abba:	1109      	asrmi	r1, r1, #4
 802abbc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802abc0:	b2c9      	uxtb	r1, r1
 802abc2:	9110      	str	r1, [sp, #64]	@ 0x40
 802abc4:	b280      	uxth	r0, r0
 802abc6:	fa1f fc8c 	uxth.w	ip, ip
 802abca:	fb00 f30c 	mul.w	r3, r0, ip
 802abce:	0100      	lsls	r0, r0, #4
 802abd0:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802abd4:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802abd8:	1ac0      	subs	r0, r0, r3
 802abda:	fa1f fc8c 	uxth.w	ip, ip
 802abde:	b280      	uxth	r0, r0
 802abe0:	eba1 010c 	sub.w	r1, r1, ip
 802abe4:	fa1f fa81 	uxth.w	sl, r1
 802abe8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802abea:	4348      	muls	r0, r1
 802abec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802abee:	fb02 020a 	mla	r2, r2, sl, r0
 802abf2:	fb0c 2c01 	mla	ip, ip, r1, r2
 802abf6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802abf8:	fb03 c302 	mla	r3, r3, r2, ip
 802abfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ac00:	2bff      	cmp	r3, #255	@ 0xff
 802ac02:	d12b      	bne.n	802ac5c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ac04:	4b13      	ldr	r3, [pc, #76]	@ (802ac54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 802ac06:	681a      	ldr	r2, [r3, #0]
 802ac08:	4b13      	ldr	r3, [pc, #76]	@ (802ac58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802ac0a:	0951      	lsrs	r1, r2, #5
 802ac0c:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802ac10:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac14:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802ac18:	430b      	orrs	r3, r1
 802ac1a:	4313      	orrs	r3, r2
 802ac1c:	f8ae 3000 	strh.w	r3, [lr]
 802ac20:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802ac22:	f10e 0e02 	add.w	lr, lr, #2
 802ac26:	f108 38ff 	add.w	r8, r8, #4294967295
 802ac2a:	441c      	add	r4, r3
 802ac2c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ac2e:	441e      	add	r6, r3
 802ac30:	e6cc      	b.n	802a9cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802ac32:	f1bc 0f00 	cmp.w	ip, #0
 802ac36:	d0c5      	beq.n	802abc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802ac38:	9908      	ldr	r1, [sp, #32]
 802ac3a:	440b      	add	r3, r1
 802ac3c:	0859      	lsrs	r1, r3, #1
 802ac3e:	07db      	lsls	r3, r3, #31
 802ac40:	5c79      	ldrb	r1, [r7, r1]
 802ac42:	bf54      	ite	pl
 802ac44:	f001 010f 	andpl.w	r1, r1, #15
 802ac48:	1109      	asrmi	r1, r1, #4
 802ac4a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ac4e:	b2c9      	uxtb	r1, r1
 802ac50:	910b      	str	r1, [sp, #44]	@ 0x2c
 802ac52:	e7b7      	b.n	802abc4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 802ac54:	2400b8d4 	.word	0x2400b8d4
 802ac58:	fffff800 	.word	0xfffff800
 802ac5c:	2b00      	cmp	r3, #0
 802ac5e:	d0df      	beq.n	802ac20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802ac60:	4a22      	ldr	r2, [pc, #136]	@ (802acec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 802ac62:	fa1f fa83 	uxth.w	sl, r3
 802ac66:	f8be c000 	ldrh.w	ip, [lr]
 802ac6a:	43db      	mvns	r3, r3
 802ac6c:	6810      	ldr	r0, [r2, #0]
 802ac6e:	ea4f 212c 	mov.w	r1, ip, asr #8
 802ac72:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802ac76:	b2db      	uxtb	r3, r3
 802ac78:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802ac7c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802ac80:	fb12 f20a 	smulbb	r2, r2, sl
 802ac84:	b2c0      	uxtb	r0, r0
 802ac86:	fb1b fb0a 	smulbb	fp, fp, sl
 802ac8a:	fb01 2103 	mla	r1, r1, r3, r2
 802ac8e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802ac92:	fb10 f00a 	smulbb	r0, r0, sl
 802ac96:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ac9a:	b289      	uxth	r1, r1
 802ac9c:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802aca0:	fa5f fc8c 	uxtb.w	ip, ip
 802aca4:	fb02 b203 	mla	r2, r2, r3, fp
 802aca8:	fb0c 0003 	mla	r0, ip, r3, r0
 802acac:	1c4b      	adds	r3, r1, #1
 802acae:	b292      	uxth	r2, r2
 802acb0:	b280      	uxth	r0, r0
 802acb2:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802acb6:	f100 0b01 	add.w	fp, r0, #1
 802acba:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802acbe:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802acc2:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802acc6:	ea4b 0101 	orr.w	r1, fp, r1
 802acca:	f102 0b01 	add.w	fp, r2, #1
 802acce:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802acd2:	0952      	lsrs	r2, r2, #5
 802acd4:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802acd8:	4311      	orrs	r1, r2
 802acda:	f8ae 1000 	strh.w	r1, [lr]
 802acde:	e79f      	b.n	802ac20 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 802ace0:	b013      	add	sp, #76	@ 0x4c
 802ace2:	ecbd 8b08 	vpop	{d8-d11}
 802ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802acea:	bf00      	nop
 802acec:	2400b8d4 	.word	0x2400b8d4

0802acf0 <CRC_Lock>:
 802acf0:	4a20      	ldr	r2, [pc, #128]	@ (802ad74 <CRC_Lock+0x84>)
 802acf2:	b530      	push	{r4, r5, lr}
 802acf4:	6813      	ldr	r3, [r2, #0]
 802acf6:	f64f 74f0 	movw	r4, #65520	@ 0xfff0
 802acfa:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802acfe:	f023 0301 	bic.w	r3, r3, #1
 802ad02:	6013      	str	r3, [r2, #0]
 802ad04:	4b1c      	ldr	r3, [pc, #112]	@ (802ad78 <CRC_Lock+0x88>)
 802ad06:	681a      	ldr	r2, [r3, #0]
 802ad08:	4022      	ands	r2, r4
 802ad0a:	42aa      	cmp	r2, r5
 802ad0c:	d005      	beq.n	802ad1a <CRC_Lock+0x2a>
 802ad0e:	681b      	ldr	r3, [r3, #0]
 802ad10:	f24c 2270 	movw	r2, #49776	@ 0xc270
 802ad14:	4023      	ands	r3, r4
 802ad16:	4293      	cmp	r3, r2
 802ad18:	d124      	bne.n	802ad64 <CRC_Lock+0x74>
 802ad1a:	4b18      	ldr	r3, [pc, #96]	@ (802ad7c <CRC_Lock+0x8c>)
 802ad1c:	681b      	ldr	r3, [r3, #0]
 802ad1e:	bb0b      	cbnz	r3, 802ad64 <CRC_Lock+0x74>
 802ad20:	4b17      	ldr	r3, [pc, #92]	@ (802ad80 <CRC_Lock+0x90>)
 802ad22:	681a      	ldr	r2, [r3, #0]
 802ad24:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802ad28:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802ad2c:	d00d      	beq.n	802ad4a <CRC_Lock+0x5a>
 802ad2e:	681a      	ldr	r2, [r3, #0]
 802ad30:	f240 4483 	movw	r4, #1155	@ 0x483
 802ad34:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802ad38:	42a2      	cmp	r2, r4
 802ad3a:	d006      	beq.n	802ad4a <CRC_Lock+0x5a>
 802ad3c:	681b      	ldr	r3, [r3, #0]
 802ad3e:	f240 4285 	movw	r2, #1157	@ 0x485
 802ad42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802ad46:	4293      	cmp	r3, r2
 802ad48:	d10c      	bne.n	802ad64 <CRC_Lock+0x74>
 802ad4a:	4b0e      	ldr	r3, [pc, #56]	@ (802ad84 <CRC_Lock+0x94>)
 802ad4c:	2201      	movs	r2, #1
 802ad4e:	601a      	str	r2, [r3, #0]
 802ad50:	681a      	ldr	r2, [r3, #0]
 802ad52:	2a00      	cmp	r2, #0
 802ad54:	d1fc      	bne.n	802ad50 <CRC_Lock+0x60>
 802ad56:	4b0c      	ldr	r3, [pc, #48]	@ (802ad88 <CRC_Lock+0x98>)
 802ad58:	6018      	str	r0, [r3, #0]
 802ad5a:	6818      	ldr	r0, [r3, #0]
 802ad5c:	1a43      	subs	r3, r0, r1
 802ad5e:	4258      	negs	r0, r3
 802ad60:	4158      	adcs	r0, r3
 802ad62:	bd30      	pop	{r4, r5, pc}
 802ad64:	4b09      	ldr	r3, [pc, #36]	@ (802ad8c <CRC_Lock+0x9c>)
 802ad66:	2201      	movs	r2, #1
 802ad68:	601a      	str	r2, [r3, #0]
 802ad6a:	681a      	ldr	r2, [r3, #0]
 802ad6c:	2a00      	cmp	r2, #0
 802ad6e:	d1fc      	bne.n	802ad6a <CRC_Lock+0x7a>
 802ad70:	4b07      	ldr	r3, [pc, #28]	@ (802ad90 <CRC_Lock+0xa0>)
 802ad72:	e7f1      	b.n	802ad58 <CRC_Lock+0x68>
 802ad74:	e0002000 	.word	0xe0002000
 802ad78:	e000ed00 	.word	0xe000ed00
 802ad7c:	e0042000 	.word	0xe0042000
 802ad80:	5c001000 	.word	0x5c001000
 802ad84:	58024c08 	.word	0x58024c08
 802ad88:	58024c00 	.word	0x58024c00
 802ad8c:	40023008 	.word	0x40023008
 802ad90:	40023000 	.word	0x40023000

0802ad94 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802ad94:	6101      	str	r1, [r0, #16]
 802ad96:	4770      	bx	lr

0802ad98 <_ZN8touchgfx8Gestures4tickEv>:
 802ad98:	7b83      	ldrb	r3, [r0, #14]
 802ad9a:	b14b      	cbz	r3, 802adb0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802ad9c:	8903      	ldrh	r3, [r0, #8]
 802ad9e:	3301      	adds	r3, #1
 802ada0:	b29b      	uxth	r3, r3
 802ada2:	2b07      	cmp	r3, #7
 802ada4:	8103      	strh	r3, [r0, #8]
 802ada6:	bf81      	itttt	hi
 802ada8:	2300      	movhi	r3, #0
 802adaa:	8143      	strhhi	r3, [r0, #10]
 802adac:	8183      	strhhi	r3, [r0, #12]
 802adae:	7383      	strbhi	r3, [r0, #14]
 802adb0:	4770      	bx	lr
	...

0802adb4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802adb4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802adb8:	4604      	mov	r4, r0
 802adba:	4698      	mov	r8, r3
 802adbc:	8880      	ldrh	r0, [r0, #4]
 802adbe:	4617      	mov	r7, r2
 802adc0:	4b1d      	ldr	r3, [pc, #116]	@ (802ae38 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 802adc2:	460e      	mov	r6, r1
 802adc4:	f8ad 0006 	strh.w	r0, [sp, #6]
 802adc8:	eba8 0000 	sub.w	r0, r8, r0
 802adcc:	9300      	str	r3, [sp, #0]
 802adce:	2300      	movs	r3, #0
 802add0:	b280      	uxth	r0, r0
 802add2:	8aa2      	ldrh	r2, [r4, #20]
 802add4:	f88d 3004 	strb.w	r3, [sp, #4]
 802add8:	b203      	sxth	r3, r0
 802adda:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802adde:	88e1      	ldrh	r1, [r4, #6]
 802ade0:	2b00      	cmp	r3, #0
 802ade2:	f8ad 800a 	strh.w	r8, [sp, #10]
 802ade6:	f8ad 1008 	strh.w	r1, [sp, #8]
 802adea:	bfb8      	it	lt
 802adec:	4240      	neglt	r0, r0
 802adee:	f8ad 500c 	strh.w	r5, [sp, #12]
 802adf2:	bfb8      	it	lt
 802adf4:	b203      	sxthlt	r3, r0
 802adf6:	4293      	cmp	r3, r2
 802adf8:	dc08      	bgt.n	802ae0c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 802adfa:	1a69      	subs	r1, r5, r1
 802adfc:	b289      	uxth	r1, r1
 802adfe:	b20b      	sxth	r3, r1
 802ae00:	2b00      	cmp	r3, #0
 802ae02:	bfbc      	itt	lt
 802ae04:	4249      	neglt	r1, r1
 802ae06:	b20b      	sxthlt	r3, r1
 802ae08:	429a      	cmp	r2, r3
 802ae0a:	da13      	bge.n	802ae34 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 802ae0c:	6920      	ldr	r0, [r4, #16]
 802ae0e:	4669      	mov	r1, sp
 802ae10:	eba8 0606 	sub.w	r6, r8, r6
 802ae14:	1bef      	subs	r7, r5, r7
 802ae16:	6803      	ldr	r3, [r0, #0]
 802ae18:	685b      	ldr	r3, [r3, #4]
 802ae1a:	4798      	blx	r3
 802ae1c:	2300      	movs	r3, #0
 802ae1e:	2001      	movs	r0, #1
 802ae20:	8166      	strh	r6, [r4, #10]
 802ae22:	8123      	strh	r3, [r4, #8]
 802ae24:	81a7      	strh	r7, [r4, #12]
 802ae26:	f8a4 8004 	strh.w	r8, [r4, #4]
 802ae2a:	80e5      	strh	r5, [r4, #6]
 802ae2c:	73a0      	strb	r0, [r4, #14]
 802ae2e:	b004      	add	sp, #16
 802ae30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ae34:	2000      	movs	r0, #0
 802ae36:	e7fa      	b.n	802ae2e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 802ae38:	0802f598 	.word	0x0802f598

0802ae3c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802ae3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802ae3e:	461e      	mov	r6, r3
 802ae40:	1e4b      	subs	r3, r1, #1
 802ae42:	b085      	sub	sp, #20
 802ae44:	4604      	mov	r4, r0
 802ae46:	2b01      	cmp	r3, #1
 802ae48:	460d      	mov	r5, r1
 802ae4a:	4617      	mov	r7, r2
 802ae4c:	d84b      	bhi.n	802aee6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802ae4e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802ae52:	1cd3      	adds	r3, r2, #3
 802ae54:	b29b      	uxth	r3, r3
 802ae56:	2b06      	cmp	r3, #6
 802ae58:	d916      	bls.n	802ae88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802ae5a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802aefc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ae5e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ae62:	f8cd c004 	str.w	ip, [sp, #4]
 802ae66:	f04f 0c00 	mov.w	ip, #0
 802ae6a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802ae6e:	6900      	ldr	r0, [r0, #16]
 802ae70:	f8ad 100c 	strh.w	r1, [sp, #12]
 802ae74:	a901      	add	r1, sp, #4
 802ae76:	f88d c008 	strb.w	ip, [sp, #8]
 802ae7a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802ae7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ae82:	6803      	ldr	r3, [r0, #0]
 802ae84:	689b      	ldr	r3, [r3, #8]
 802ae86:	4798      	blx	r3
 802ae88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ae8c:	1cd3      	adds	r3, r2, #3
 802ae8e:	b29b      	uxth	r3, r3
 802ae90:	2b06      	cmp	r3, #6
 802ae92:	d916      	bls.n	802aec2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802ae94:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802aefc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802ae98:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802ae9c:	f8cd c004 	str.w	ip, [sp, #4]
 802aea0:	f04f 0c01 	mov.w	ip, #1
 802aea4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802aea8:	6920      	ldr	r0, [r4, #16]
 802aeaa:	f8ad 100c 	strh.w	r1, [sp, #12]
 802aeae:	a901      	add	r1, sp, #4
 802aeb0:	f88d c008 	strb.w	ip, [sp, #8]
 802aeb4:	f8ad 200a 	strh.w	r2, [sp, #10]
 802aeb8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802aebc:	6803      	ldr	r3, [r0, #0]
 802aebe:	689b      	ldr	r3, [r3, #8]
 802aec0:	4798      	blx	r3
 802aec2:	4b0d      	ldr	r3, [pc, #52]	@ (802aef8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802aec4:	a901      	add	r1, sp, #4
 802aec6:	6920      	ldr	r0, [r4, #16]
 802aec8:	9301      	str	r3, [sp, #4]
 802aeca:	2300      	movs	r3, #0
 802aecc:	f88d 5008 	strb.w	r5, [sp, #8]
 802aed0:	f8ad 700a 	strh.w	r7, [sp, #10]
 802aed4:	f8ad 600c 	strh.w	r6, [sp, #12]
 802aed8:	f8ad 300e 	strh.w	r3, [sp, #14]
 802aedc:	6803      	ldr	r3, [r0, #0]
 802aede:	681b      	ldr	r3, [r3, #0]
 802aee0:	4798      	blx	r3
 802aee2:	b005      	add	sp, #20
 802aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802aee6:	2900      	cmp	r1, #0
 802aee8:	d1eb      	bne.n	802aec2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802aeea:	80a2      	strh	r2, [r4, #4]
 802aeec:	80c6      	strh	r6, [r0, #6]
 802aeee:	60a1      	str	r1, [r4, #8]
 802aef0:	81a1      	strh	r1, [r4, #12]
 802aef2:	73a1      	strb	r1, [r4, #14]
 802aef4:	e7e5      	b.n	802aec2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802aef6:	bf00      	nop
 802aef8:	0802f584 	.word	0x0802f584
 802aefc:	0802f5ac 	.word	0x0802f5ac

0802af00 <__aeabi_atexit>:
 802af00:	460b      	mov	r3, r1
 802af02:	4601      	mov	r1, r0
 802af04:	4618      	mov	r0, r3
 802af06:	f000 b911 	b.w	802b12c <__cxa_atexit>

0802af0a <_ZdlPvj>:
 802af0a:	f000 b812 	b.w	802af32 <_ZdlPv>

0802af0e <__cxa_guard_acquire>:
 802af0e:	6802      	ldr	r2, [r0, #0]
 802af10:	07d2      	lsls	r2, r2, #31
 802af12:	4603      	mov	r3, r0
 802af14:	d405      	bmi.n	802af22 <__cxa_guard_acquire+0x14>
 802af16:	7842      	ldrb	r2, [r0, #1]
 802af18:	b102      	cbz	r2, 802af1c <__cxa_guard_acquire+0xe>
 802af1a:	deff      	udf	#255	@ 0xff
 802af1c:	2001      	movs	r0, #1
 802af1e:	7058      	strb	r0, [r3, #1]
 802af20:	4770      	bx	lr
 802af22:	2000      	movs	r0, #0
 802af24:	4770      	bx	lr

0802af26 <__cxa_guard_release>:
 802af26:	2301      	movs	r3, #1
 802af28:	6003      	str	r3, [r0, #0]
 802af2a:	4770      	bx	lr

0802af2c <__cxa_pure_virtual>:
 802af2c:	b508      	push	{r3, lr}
 802af2e:	f000 f80f 	bl	802af50 <_ZSt9terminatev>

0802af32 <_ZdlPv>:
 802af32:	f000 b845 	b.w	802afc0 <free>

0802af36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 802af36:	b508      	push	{r3, lr}
 802af38:	4780      	blx	r0
 802af3a:	f000 f80e 	bl	802af5a <abort>
	...

0802af40 <_ZSt13get_terminatev>:
 802af40:	4b02      	ldr	r3, [pc, #8]	@ (802af4c <_ZSt13get_terminatev+0xc>)
 802af42:	6818      	ldr	r0, [r3, #0]
 802af44:	f3bf 8f5b 	dmb	ish
 802af48:	4770      	bx	lr
 802af4a:	bf00      	nop
 802af4c:	240000c8 	.word	0x240000c8

0802af50 <_ZSt9terminatev>:
 802af50:	b508      	push	{r3, lr}
 802af52:	f7ff fff5 	bl	802af40 <_ZSt13get_terminatev>
 802af56:	f7ff ffee 	bl	802af36 <_ZN10__cxxabiv111__terminateEPFvvE>

0802af5a <abort>:
 802af5a:	b508      	push	{r3, lr}
 802af5c:	2006      	movs	r0, #6
 802af5e:	f000 fa3b 	bl	802b3d8 <raise>
 802af62:	2001      	movs	r0, #1
 802af64:	f7d6 fc3a 	bl	80017dc <_exit>

0802af68 <__assert_func>:
 802af68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802af6a:	4614      	mov	r4, r2
 802af6c:	461a      	mov	r2, r3
 802af6e:	4b09      	ldr	r3, [pc, #36]	@ (802af94 <__assert_func+0x2c>)
 802af70:	681b      	ldr	r3, [r3, #0]
 802af72:	4605      	mov	r5, r0
 802af74:	68d8      	ldr	r0, [r3, #12]
 802af76:	b954      	cbnz	r4, 802af8e <__assert_func+0x26>
 802af78:	4b07      	ldr	r3, [pc, #28]	@ (802af98 <__assert_func+0x30>)
 802af7a:	461c      	mov	r4, r3
 802af7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802af80:	9100      	str	r1, [sp, #0]
 802af82:	462b      	mov	r3, r5
 802af84:	4905      	ldr	r1, [pc, #20]	@ (802af9c <__assert_func+0x34>)
 802af86:	f000 f983 	bl	802b290 <fiprintf>
 802af8a:	f7ff ffe6 	bl	802af5a <abort>
 802af8e:	4b04      	ldr	r3, [pc, #16]	@ (802afa0 <__assert_func+0x38>)
 802af90:	e7f4      	b.n	802af7c <__assert_func+0x14>
 802af92:	bf00      	nop
 802af94:	240000d8 	.word	0x240000d8
 802af98:	0803094c 	.word	0x0803094c
 802af9c:	0803091e 	.word	0x0803091e
 802afa0:	08030911 	.word	0x08030911

0802afa4 <atexit>:
 802afa4:	2300      	movs	r3, #0
 802afa6:	4601      	mov	r1, r0
 802afa8:	461a      	mov	r2, r3
 802afaa:	4618      	mov	r0, r3
 802afac:	f000 bb18 	b.w	802b5e0 <__register_exitproc>

0802afb0 <malloc>:
 802afb0:	4b02      	ldr	r3, [pc, #8]	@ (802afbc <malloc+0xc>)
 802afb2:	4601      	mov	r1, r0
 802afb4:	6818      	ldr	r0, [r3, #0]
 802afb6:	f000 b82d 	b.w	802b014 <_malloc_r>
 802afba:	bf00      	nop
 802afbc:	240000d8 	.word	0x240000d8

0802afc0 <free>:
 802afc0:	4b02      	ldr	r3, [pc, #8]	@ (802afcc <free+0xc>)
 802afc2:	4601      	mov	r1, r0
 802afc4:	6818      	ldr	r0, [r3, #0]
 802afc6:	f000 bb67 	b.w	802b698 <_free_r>
 802afca:	bf00      	nop
 802afcc:	240000d8 	.word	0x240000d8

0802afd0 <sbrk_aligned>:
 802afd0:	b570      	push	{r4, r5, r6, lr}
 802afd2:	4e0f      	ldr	r6, [pc, #60]	@ (802b010 <sbrk_aligned+0x40>)
 802afd4:	460c      	mov	r4, r1
 802afd6:	6831      	ldr	r1, [r6, #0]
 802afd8:	4605      	mov	r5, r0
 802afda:	b911      	cbnz	r1, 802afe2 <sbrk_aligned+0x12>
 802afdc:	f000 faa2 	bl	802b524 <_sbrk_r>
 802afe0:	6030      	str	r0, [r6, #0]
 802afe2:	4621      	mov	r1, r4
 802afe4:	4628      	mov	r0, r5
 802afe6:	f000 fa9d 	bl	802b524 <_sbrk_r>
 802afea:	1c43      	adds	r3, r0, #1
 802afec:	d103      	bne.n	802aff6 <sbrk_aligned+0x26>
 802afee:	f04f 34ff 	mov.w	r4, #4294967295
 802aff2:	4620      	mov	r0, r4
 802aff4:	bd70      	pop	{r4, r5, r6, pc}
 802aff6:	1cc4      	adds	r4, r0, #3
 802aff8:	f024 0403 	bic.w	r4, r4, #3
 802affc:	42a0      	cmp	r0, r4
 802affe:	d0f8      	beq.n	802aff2 <sbrk_aligned+0x22>
 802b000:	1a21      	subs	r1, r4, r0
 802b002:	4628      	mov	r0, r5
 802b004:	f000 fa8e 	bl	802b524 <_sbrk_r>
 802b008:	3001      	adds	r0, #1
 802b00a:	d1f2      	bne.n	802aff2 <sbrk_aligned+0x22>
 802b00c:	e7ef      	b.n	802afee <sbrk_aligned+0x1e>
 802b00e:	bf00      	nop
 802b010:	2400b9c8 	.word	0x2400b9c8

0802b014 <_malloc_r>:
 802b014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b018:	1ccd      	adds	r5, r1, #3
 802b01a:	f025 0503 	bic.w	r5, r5, #3
 802b01e:	3508      	adds	r5, #8
 802b020:	2d0c      	cmp	r5, #12
 802b022:	bf38      	it	cc
 802b024:	250c      	movcc	r5, #12
 802b026:	2d00      	cmp	r5, #0
 802b028:	4606      	mov	r6, r0
 802b02a:	db01      	blt.n	802b030 <_malloc_r+0x1c>
 802b02c:	42a9      	cmp	r1, r5
 802b02e:	d904      	bls.n	802b03a <_malloc_r+0x26>
 802b030:	230c      	movs	r3, #12
 802b032:	6033      	str	r3, [r6, #0]
 802b034:	2000      	movs	r0, #0
 802b036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b03a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802b110 <_malloc_r+0xfc>
 802b03e:	f000 f869 	bl	802b114 <__malloc_lock>
 802b042:	f8d8 3000 	ldr.w	r3, [r8]
 802b046:	461c      	mov	r4, r3
 802b048:	bb44      	cbnz	r4, 802b09c <_malloc_r+0x88>
 802b04a:	4629      	mov	r1, r5
 802b04c:	4630      	mov	r0, r6
 802b04e:	f7ff ffbf 	bl	802afd0 <sbrk_aligned>
 802b052:	1c43      	adds	r3, r0, #1
 802b054:	4604      	mov	r4, r0
 802b056:	d158      	bne.n	802b10a <_malloc_r+0xf6>
 802b058:	f8d8 4000 	ldr.w	r4, [r8]
 802b05c:	4627      	mov	r7, r4
 802b05e:	2f00      	cmp	r7, #0
 802b060:	d143      	bne.n	802b0ea <_malloc_r+0xd6>
 802b062:	2c00      	cmp	r4, #0
 802b064:	d04b      	beq.n	802b0fe <_malloc_r+0xea>
 802b066:	6823      	ldr	r3, [r4, #0]
 802b068:	4639      	mov	r1, r7
 802b06a:	4630      	mov	r0, r6
 802b06c:	eb04 0903 	add.w	r9, r4, r3
 802b070:	f000 fa58 	bl	802b524 <_sbrk_r>
 802b074:	4581      	cmp	r9, r0
 802b076:	d142      	bne.n	802b0fe <_malloc_r+0xea>
 802b078:	6821      	ldr	r1, [r4, #0]
 802b07a:	1a6d      	subs	r5, r5, r1
 802b07c:	4629      	mov	r1, r5
 802b07e:	4630      	mov	r0, r6
 802b080:	f7ff ffa6 	bl	802afd0 <sbrk_aligned>
 802b084:	3001      	adds	r0, #1
 802b086:	d03a      	beq.n	802b0fe <_malloc_r+0xea>
 802b088:	6823      	ldr	r3, [r4, #0]
 802b08a:	442b      	add	r3, r5
 802b08c:	6023      	str	r3, [r4, #0]
 802b08e:	f8d8 3000 	ldr.w	r3, [r8]
 802b092:	685a      	ldr	r2, [r3, #4]
 802b094:	bb62      	cbnz	r2, 802b0f0 <_malloc_r+0xdc>
 802b096:	f8c8 7000 	str.w	r7, [r8]
 802b09a:	e00f      	b.n	802b0bc <_malloc_r+0xa8>
 802b09c:	6822      	ldr	r2, [r4, #0]
 802b09e:	1b52      	subs	r2, r2, r5
 802b0a0:	d420      	bmi.n	802b0e4 <_malloc_r+0xd0>
 802b0a2:	2a0b      	cmp	r2, #11
 802b0a4:	d917      	bls.n	802b0d6 <_malloc_r+0xc2>
 802b0a6:	1961      	adds	r1, r4, r5
 802b0a8:	42a3      	cmp	r3, r4
 802b0aa:	6025      	str	r5, [r4, #0]
 802b0ac:	bf18      	it	ne
 802b0ae:	6059      	strne	r1, [r3, #4]
 802b0b0:	6863      	ldr	r3, [r4, #4]
 802b0b2:	bf08      	it	eq
 802b0b4:	f8c8 1000 	streq.w	r1, [r8]
 802b0b8:	5162      	str	r2, [r4, r5]
 802b0ba:	604b      	str	r3, [r1, #4]
 802b0bc:	4630      	mov	r0, r6
 802b0be:	f000 f82f 	bl	802b120 <__malloc_unlock>
 802b0c2:	f104 000b 	add.w	r0, r4, #11
 802b0c6:	1d23      	adds	r3, r4, #4
 802b0c8:	f020 0007 	bic.w	r0, r0, #7
 802b0cc:	1ac2      	subs	r2, r0, r3
 802b0ce:	bf1c      	itt	ne
 802b0d0:	1a1b      	subne	r3, r3, r0
 802b0d2:	50a3      	strne	r3, [r4, r2]
 802b0d4:	e7af      	b.n	802b036 <_malloc_r+0x22>
 802b0d6:	6862      	ldr	r2, [r4, #4]
 802b0d8:	42a3      	cmp	r3, r4
 802b0da:	bf0c      	ite	eq
 802b0dc:	f8c8 2000 	streq.w	r2, [r8]
 802b0e0:	605a      	strne	r2, [r3, #4]
 802b0e2:	e7eb      	b.n	802b0bc <_malloc_r+0xa8>
 802b0e4:	4623      	mov	r3, r4
 802b0e6:	6864      	ldr	r4, [r4, #4]
 802b0e8:	e7ae      	b.n	802b048 <_malloc_r+0x34>
 802b0ea:	463c      	mov	r4, r7
 802b0ec:	687f      	ldr	r7, [r7, #4]
 802b0ee:	e7b6      	b.n	802b05e <_malloc_r+0x4a>
 802b0f0:	461a      	mov	r2, r3
 802b0f2:	685b      	ldr	r3, [r3, #4]
 802b0f4:	42a3      	cmp	r3, r4
 802b0f6:	d1fb      	bne.n	802b0f0 <_malloc_r+0xdc>
 802b0f8:	2300      	movs	r3, #0
 802b0fa:	6053      	str	r3, [r2, #4]
 802b0fc:	e7de      	b.n	802b0bc <_malloc_r+0xa8>
 802b0fe:	230c      	movs	r3, #12
 802b100:	6033      	str	r3, [r6, #0]
 802b102:	4630      	mov	r0, r6
 802b104:	f000 f80c 	bl	802b120 <__malloc_unlock>
 802b108:	e794      	b.n	802b034 <_malloc_r+0x20>
 802b10a:	6005      	str	r5, [r0, #0]
 802b10c:	e7d6      	b.n	802b0bc <_malloc_r+0xa8>
 802b10e:	bf00      	nop
 802b110:	2400b9cc 	.word	0x2400b9cc

0802b114 <__malloc_lock>:
 802b114:	4801      	ldr	r0, [pc, #4]	@ (802b11c <__malloc_lock+0x8>)
 802b116:	f000 ba52 	b.w	802b5be <__retarget_lock_acquire_recursive>
 802b11a:	bf00      	nop
 802b11c:	2400bb10 	.word	0x2400bb10

0802b120 <__malloc_unlock>:
 802b120:	4801      	ldr	r0, [pc, #4]	@ (802b128 <__malloc_unlock+0x8>)
 802b122:	f000 ba4d 	b.w	802b5c0 <__retarget_lock_release_recursive>
 802b126:	bf00      	nop
 802b128:	2400bb10 	.word	0x2400bb10

0802b12c <__cxa_atexit>:
 802b12c:	b510      	push	{r4, lr}
 802b12e:	4604      	mov	r4, r0
 802b130:	4804      	ldr	r0, [pc, #16]	@ (802b144 <__cxa_atexit+0x18>)
 802b132:	4613      	mov	r3, r2
 802b134:	b120      	cbz	r0, 802b140 <__cxa_atexit+0x14>
 802b136:	460a      	mov	r2, r1
 802b138:	2002      	movs	r0, #2
 802b13a:	4621      	mov	r1, r4
 802b13c:	f000 fa50 	bl	802b5e0 <__register_exitproc>
 802b140:	bd10      	pop	{r4, pc}
 802b142:	bf00      	nop
 802b144:	0802b5e1 	.word	0x0802b5e1

0802b148 <std>:
 802b148:	2300      	movs	r3, #0
 802b14a:	b510      	push	{r4, lr}
 802b14c:	4604      	mov	r4, r0
 802b14e:	e9c0 3300 	strd	r3, r3, [r0]
 802b152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802b156:	6083      	str	r3, [r0, #8]
 802b158:	8181      	strh	r1, [r0, #12]
 802b15a:	6643      	str	r3, [r0, #100]	@ 0x64
 802b15c:	81c2      	strh	r2, [r0, #14]
 802b15e:	6183      	str	r3, [r0, #24]
 802b160:	4619      	mov	r1, r3
 802b162:	2208      	movs	r2, #8
 802b164:	305c      	adds	r0, #92	@ 0x5c
 802b166:	f000 f906 	bl	802b376 <memset>
 802b16a:	4b0d      	ldr	r3, [pc, #52]	@ (802b1a0 <std+0x58>)
 802b16c:	6263      	str	r3, [r4, #36]	@ 0x24
 802b16e:	4b0d      	ldr	r3, [pc, #52]	@ (802b1a4 <std+0x5c>)
 802b170:	62a3      	str	r3, [r4, #40]	@ 0x28
 802b172:	4b0d      	ldr	r3, [pc, #52]	@ (802b1a8 <std+0x60>)
 802b174:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802b176:	4b0d      	ldr	r3, [pc, #52]	@ (802b1ac <std+0x64>)
 802b178:	6323      	str	r3, [r4, #48]	@ 0x30
 802b17a:	4b0d      	ldr	r3, [pc, #52]	@ (802b1b0 <std+0x68>)
 802b17c:	6224      	str	r4, [r4, #32]
 802b17e:	429c      	cmp	r4, r3
 802b180:	d006      	beq.n	802b190 <std+0x48>
 802b182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802b186:	4294      	cmp	r4, r2
 802b188:	d002      	beq.n	802b190 <std+0x48>
 802b18a:	33d0      	adds	r3, #208	@ 0xd0
 802b18c:	429c      	cmp	r4, r3
 802b18e:	d105      	bne.n	802b19c <std+0x54>
 802b190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b198:	f000 ba10 	b.w	802b5bc <__retarget_lock_init_recursive>
 802b19c:	bd10      	pop	{r4, pc}
 802b19e:	bf00      	nop
 802b1a0:	0802b2f1 	.word	0x0802b2f1
 802b1a4:	0802b313 	.word	0x0802b313
 802b1a8:	0802b34b 	.word	0x0802b34b
 802b1ac:	0802b36f 	.word	0x0802b36f
 802b1b0:	2400b9d0 	.word	0x2400b9d0

0802b1b4 <stdio_exit_handler>:
 802b1b4:	4a02      	ldr	r2, [pc, #8]	@ (802b1c0 <stdio_exit_handler+0xc>)
 802b1b6:	4903      	ldr	r1, [pc, #12]	@ (802b1c4 <stdio_exit_handler+0x10>)
 802b1b8:	4803      	ldr	r0, [pc, #12]	@ (802b1c8 <stdio_exit_handler+0x14>)
 802b1ba:	f000 b87b 	b.w	802b2b4 <_fwalk_sglue>
 802b1be:	bf00      	nop
 802b1c0:	240000cc 	.word	0x240000cc
 802b1c4:	0802bdd5 	.word	0x0802bdd5
 802b1c8:	240000dc 	.word	0x240000dc

0802b1cc <cleanup_stdio>:
 802b1cc:	6841      	ldr	r1, [r0, #4]
 802b1ce:	4b0c      	ldr	r3, [pc, #48]	@ (802b200 <cleanup_stdio+0x34>)
 802b1d0:	4299      	cmp	r1, r3
 802b1d2:	b510      	push	{r4, lr}
 802b1d4:	4604      	mov	r4, r0
 802b1d6:	d001      	beq.n	802b1dc <cleanup_stdio+0x10>
 802b1d8:	f000 fdfc 	bl	802bdd4 <_fflush_r>
 802b1dc:	68a1      	ldr	r1, [r4, #8]
 802b1de:	4b09      	ldr	r3, [pc, #36]	@ (802b204 <cleanup_stdio+0x38>)
 802b1e0:	4299      	cmp	r1, r3
 802b1e2:	d002      	beq.n	802b1ea <cleanup_stdio+0x1e>
 802b1e4:	4620      	mov	r0, r4
 802b1e6:	f000 fdf5 	bl	802bdd4 <_fflush_r>
 802b1ea:	68e1      	ldr	r1, [r4, #12]
 802b1ec:	4b06      	ldr	r3, [pc, #24]	@ (802b208 <cleanup_stdio+0x3c>)
 802b1ee:	4299      	cmp	r1, r3
 802b1f0:	d004      	beq.n	802b1fc <cleanup_stdio+0x30>
 802b1f2:	4620      	mov	r0, r4
 802b1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b1f8:	f000 bdec 	b.w	802bdd4 <_fflush_r>
 802b1fc:	bd10      	pop	{r4, pc}
 802b1fe:	bf00      	nop
 802b200:	2400b9d0 	.word	0x2400b9d0
 802b204:	2400ba38 	.word	0x2400ba38
 802b208:	2400baa0 	.word	0x2400baa0

0802b20c <global_stdio_init.part.0>:
 802b20c:	b510      	push	{r4, lr}
 802b20e:	4b0b      	ldr	r3, [pc, #44]	@ (802b23c <global_stdio_init.part.0+0x30>)
 802b210:	4c0b      	ldr	r4, [pc, #44]	@ (802b240 <global_stdio_init.part.0+0x34>)
 802b212:	4a0c      	ldr	r2, [pc, #48]	@ (802b244 <global_stdio_init.part.0+0x38>)
 802b214:	601a      	str	r2, [r3, #0]
 802b216:	4620      	mov	r0, r4
 802b218:	2200      	movs	r2, #0
 802b21a:	2104      	movs	r1, #4
 802b21c:	f7ff ff94 	bl	802b148 <std>
 802b220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802b224:	2201      	movs	r2, #1
 802b226:	2109      	movs	r1, #9
 802b228:	f7ff ff8e 	bl	802b148 <std>
 802b22c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802b230:	2202      	movs	r2, #2
 802b232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b236:	2112      	movs	r1, #18
 802b238:	f7ff bf86 	b.w	802b148 <std>
 802b23c:	2400bb08 	.word	0x2400bb08
 802b240:	2400b9d0 	.word	0x2400b9d0
 802b244:	0802b1b5 	.word	0x0802b1b5

0802b248 <__sfp_lock_acquire>:
 802b248:	4801      	ldr	r0, [pc, #4]	@ (802b250 <__sfp_lock_acquire+0x8>)
 802b24a:	f000 b9b8 	b.w	802b5be <__retarget_lock_acquire_recursive>
 802b24e:	bf00      	nop
 802b250:	2400bb12 	.word	0x2400bb12

0802b254 <__sfp_lock_release>:
 802b254:	4801      	ldr	r0, [pc, #4]	@ (802b25c <__sfp_lock_release+0x8>)
 802b256:	f000 b9b3 	b.w	802b5c0 <__retarget_lock_release_recursive>
 802b25a:	bf00      	nop
 802b25c:	2400bb12 	.word	0x2400bb12

0802b260 <__sinit>:
 802b260:	b510      	push	{r4, lr}
 802b262:	4604      	mov	r4, r0
 802b264:	f7ff fff0 	bl	802b248 <__sfp_lock_acquire>
 802b268:	6a23      	ldr	r3, [r4, #32]
 802b26a:	b11b      	cbz	r3, 802b274 <__sinit+0x14>
 802b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802b270:	f7ff bff0 	b.w	802b254 <__sfp_lock_release>
 802b274:	4b04      	ldr	r3, [pc, #16]	@ (802b288 <__sinit+0x28>)
 802b276:	6223      	str	r3, [r4, #32]
 802b278:	4b04      	ldr	r3, [pc, #16]	@ (802b28c <__sinit+0x2c>)
 802b27a:	681b      	ldr	r3, [r3, #0]
 802b27c:	2b00      	cmp	r3, #0
 802b27e:	d1f5      	bne.n	802b26c <__sinit+0xc>
 802b280:	f7ff ffc4 	bl	802b20c <global_stdio_init.part.0>
 802b284:	e7f2      	b.n	802b26c <__sinit+0xc>
 802b286:	bf00      	nop
 802b288:	0802b1cd 	.word	0x0802b1cd
 802b28c:	2400bb08 	.word	0x2400bb08

0802b290 <fiprintf>:
 802b290:	b40e      	push	{r1, r2, r3}
 802b292:	b503      	push	{r0, r1, lr}
 802b294:	4601      	mov	r1, r0
 802b296:	ab03      	add	r3, sp, #12
 802b298:	4805      	ldr	r0, [pc, #20]	@ (802b2b0 <fiprintf+0x20>)
 802b29a:	f853 2b04 	ldr.w	r2, [r3], #4
 802b29e:	6800      	ldr	r0, [r0, #0]
 802b2a0:	9301      	str	r3, [sp, #4]
 802b2a2:	f000 fa6d 	bl	802b780 <_vfiprintf_r>
 802b2a6:	b002      	add	sp, #8
 802b2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 802b2ac:	b003      	add	sp, #12
 802b2ae:	4770      	bx	lr
 802b2b0:	240000d8 	.word	0x240000d8

0802b2b4 <_fwalk_sglue>:
 802b2b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b2b8:	4607      	mov	r7, r0
 802b2ba:	4688      	mov	r8, r1
 802b2bc:	4614      	mov	r4, r2
 802b2be:	2600      	movs	r6, #0
 802b2c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b2c4:	f1b9 0901 	subs.w	r9, r9, #1
 802b2c8:	d505      	bpl.n	802b2d6 <_fwalk_sglue+0x22>
 802b2ca:	6824      	ldr	r4, [r4, #0]
 802b2cc:	2c00      	cmp	r4, #0
 802b2ce:	d1f7      	bne.n	802b2c0 <_fwalk_sglue+0xc>
 802b2d0:	4630      	mov	r0, r6
 802b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b2d6:	89ab      	ldrh	r3, [r5, #12]
 802b2d8:	2b01      	cmp	r3, #1
 802b2da:	d907      	bls.n	802b2ec <_fwalk_sglue+0x38>
 802b2dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b2e0:	3301      	adds	r3, #1
 802b2e2:	d003      	beq.n	802b2ec <_fwalk_sglue+0x38>
 802b2e4:	4629      	mov	r1, r5
 802b2e6:	4638      	mov	r0, r7
 802b2e8:	47c0      	blx	r8
 802b2ea:	4306      	orrs	r6, r0
 802b2ec:	3568      	adds	r5, #104	@ 0x68
 802b2ee:	e7e9      	b.n	802b2c4 <_fwalk_sglue+0x10>

0802b2f0 <__sread>:
 802b2f0:	b510      	push	{r4, lr}
 802b2f2:	460c      	mov	r4, r1
 802b2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b2f8:	f000 f8ee 	bl	802b4d8 <_read_r>
 802b2fc:	2800      	cmp	r0, #0
 802b2fe:	bfab      	itete	ge
 802b300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802b302:	89a3      	ldrhlt	r3, [r4, #12]
 802b304:	181b      	addge	r3, r3, r0
 802b306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802b30a:	bfac      	ite	ge
 802b30c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802b30e:	81a3      	strhlt	r3, [r4, #12]
 802b310:	bd10      	pop	{r4, pc}

0802b312 <__swrite>:
 802b312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b316:	461f      	mov	r7, r3
 802b318:	898b      	ldrh	r3, [r1, #12]
 802b31a:	05db      	lsls	r3, r3, #23
 802b31c:	4605      	mov	r5, r0
 802b31e:	460c      	mov	r4, r1
 802b320:	4616      	mov	r6, r2
 802b322:	d505      	bpl.n	802b330 <__swrite+0x1e>
 802b324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b328:	2302      	movs	r3, #2
 802b32a:	2200      	movs	r2, #0
 802b32c:	f000 f8c2 	bl	802b4b4 <_lseek_r>
 802b330:	89a3      	ldrh	r3, [r4, #12]
 802b332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802b33a:	81a3      	strh	r3, [r4, #12]
 802b33c:	4632      	mov	r2, r6
 802b33e:	463b      	mov	r3, r7
 802b340:	4628      	mov	r0, r5
 802b342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b346:	f000 b8fd 	b.w	802b544 <_write_r>

0802b34a <__sseek>:
 802b34a:	b510      	push	{r4, lr}
 802b34c:	460c      	mov	r4, r1
 802b34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b352:	f000 f8af 	bl	802b4b4 <_lseek_r>
 802b356:	1c43      	adds	r3, r0, #1
 802b358:	89a3      	ldrh	r3, [r4, #12]
 802b35a:	bf15      	itete	ne
 802b35c:	6560      	strne	r0, [r4, #84]	@ 0x54
 802b35e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802b362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802b366:	81a3      	strheq	r3, [r4, #12]
 802b368:	bf18      	it	ne
 802b36a:	81a3      	strhne	r3, [r4, #12]
 802b36c:	bd10      	pop	{r4, pc}

0802b36e <__sclose>:
 802b36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b372:	f000 b839 	b.w	802b3e8 <_close_r>

0802b376 <memset>:
 802b376:	4402      	add	r2, r0
 802b378:	4603      	mov	r3, r0
 802b37a:	4293      	cmp	r3, r2
 802b37c:	d100      	bne.n	802b380 <memset+0xa>
 802b37e:	4770      	bx	lr
 802b380:	f803 1b01 	strb.w	r1, [r3], #1
 802b384:	e7f9      	b.n	802b37a <memset+0x4>

0802b386 <_raise_r>:
 802b386:	291f      	cmp	r1, #31
 802b388:	b538      	push	{r3, r4, r5, lr}
 802b38a:	4605      	mov	r5, r0
 802b38c:	460c      	mov	r4, r1
 802b38e:	d904      	bls.n	802b39a <_raise_r+0x14>
 802b390:	2316      	movs	r3, #22
 802b392:	6003      	str	r3, [r0, #0]
 802b394:	f04f 30ff 	mov.w	r0, #4294967295
 802b398:	bd38      	pop	{r3, r4, r5, pc}
 802b39a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802b39c:	b112      	cbz	r2, 802b3a4 <_raise_r+0x1e>
 802b39e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802b3a2:	b94b      	cbnz	r3, 802b3b8 <_raise_r+0x32>
 802b3a4:	4628      	mov	r0, r5
 802b3a6:	f000 f8bb 	bl	802b520 <_getpid_r>
 802b3aa:	4622      	mov	r2, r4
 802b3ac:	4601      	mov	r1, r0
 802b3ae:	4628      	mov	r0, r5
 802b3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b3b4:	f000 b8a2 	b.w	802b4fc <_kill_r>
 802b3b8:	2b01      	cmp	r3, #1
 802b3ba:	d00a      	beq.n	802b3d2 <_raise_r+0x4c>
 802b3bc:	1c59      	adds	r1, r3, #1
 802b3be:	d103      	bne.n	802b3c8 <_raise_r+0x42>
 802b3c0:	2316      	movs	r3, #22
 802b3c2:	6003      	str	r3, [r0, #0]
 802b3c4:	2001      	movs	r0, #1
 802b3c6:	e7e7      	b.n	802b398 <_raise_r+0x12>
 802b3c8:	2100      	movs	r1, #0
 802b3ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802b3ce:	4620      	mov	r0, r4
 802b3d0:	4798      	blx	r3
 802b3d2:	2000      	movs	r0, #0
 802b3d4:	e7e0      	b.n	802b398 <_raise_r+0x12>
	...

0802b3d8 <raise>:
 802b3d8:	4b02      	ldr	r3, [pc, #8]	@ (802b3e4 <raise+0xc>)
 802b3da:	4601      	mov	r1, r0
 802b3dc:	6818      	ldr	r0, [r3, #0]
 802b3de:	f7ff bfd2 	b.w	802b386 <_raise_r>
 802b3e2:	bf00      	nop
 802b3e4:	240000d8 	.word	0x240000d8

0802b3e8 <_close_r>:
 802b3e8:	b538      	push	{r3, r4, r5, lr}
 802b3ea:	4d06      	ldr	r5, [pc, #24]	@ (802b404 <_close_r+0x1c>)
 802b3ec:	2300      	movs	r3, #0
 802b3ee:	4604      	mov	r4, r0
 802b3f0:	4608      	mov	r0, r1
 802b3f2:	602b      	str	r3, [r5, #0]
 802b3f4:	f7d6 fa1a 	bl	800182c <_close>
 802b3f8:	1c43      	adds	r3, r0, #1
 802b3fa:	d102      	bne.n	802b402 <_close_r+0x1a>
 802b3fc:	682b      	ldr	r3, [r5, #0]
 802b3fe:	b103      	cbz	r3, 802b402 <_close_r+0x1a>
 802b400:	6023      	str	r3, [r4, #0]
 802b402:	bd38      	pop	{r3, r4, r5, pc}
 802b404:	2400bb0c 	.word	0x2400bb0c

0802b408 <_reclaim_reent>:
 802b408:	4b29      	ldr	r3, [pc, #164]	@ (802b4b0 <_reclaim_reent+0xa8>)
 802b40a:	681b      	ldr	r3, [r3, #0]
 802b40c:	4283      	cmp	r3, r0
 802b40e:	b570      	push	{r4, r5, r6, lr}
 802b410:	4604      	mov	r4, r0
 802b412:	d04b      	beq.n	802b4ac <_reclaim_reent+0xa4>
 802b414:	69c3      	ldr	r3, [r0, #28]
 802b416:	b1ab      	cbz	r3, 802b444 <_reclaim_reent+0x3c>
 802b418:	68db      	ldr	r3, [r3, #12]
 802b41a:	b16b      	cbz	r3, 802b438 <_reclaim_reent+0x30>
 802b41c:	2500      	movs	r5, #0
 802b41e:	69e3      	ldr	r3, [r4, #28]
 802b420:	68db      	ldr	r3, [r3, #12]
 802b422:	5959      	ldr	r1, [r3, r5]
 802b424:	2900      	cmp	r1, #0
 802b426:	d13b      	bne.n	802b4a0 <_reclaim_reent+0x98>
 802b428:	3504      	adds	r5, #4
 802b42a:	2d80      	cmp	r5, #128	@ 0x80
 802b42c:	d1f7      	bne.n	802b41e <_reclaim_reent+0x16>
 802b42e:	69e3      	ldr	r3, [r4, #28]
 802b430:	4620      	mov	r0, r4
 802b432:	68d9      	ldr	r1, [r3, #12]
 802b434:	f000 f930 	bl	802b698 <_free_r>
 802b438:	69e3      	ldr	r3, [r4, #28]
 802b43a:	6819      	ldr	r1, [r3, #0]
 802b43c:	b111      	cbz	r1, 802b444 <_reclaim_reent+0x3c>
 802b43e:	4620      	mov	r0, r4
 802b440:	f000 f92a 	bl	802b698 <_free_r>
 802b444:	6961      	ldr	r1, [r4, #20]
 802b446:	b111      	cbz	r1, 802b44e <_reclaim_reent+0x46>
 802b448:	4620      	mov	r0, r4
 802b44a:	f000 f925 	bl	802b698 <_free_r>
 802b44e:	69e1      	ldr	r1, [r4, #28]
 802b450:	b111      	cbz	r1, 802b458 <_reclaim_reent+0x50>
 802b452:	4620      	mov	r0, r4
 802b454:	f000 f920 	bl	802b698 <_free_r>
 802b458:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802b45a:	b111      	cbz	r1, 802b462 <_reclaim_reent+0x5a>
 802b45c:	4620      	mov	r0, r4
 802b45e:	f000 f91b 	bl	802b698 <_free_r>
 802b462:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802b464:	b111      	cbz	r1, 802b46c <_reclaim_reent+0x64>
 802b466:	4620      	mov	r0, r4
 802b468:	f000 f916 	bl	802b698 <_free_r>
 802b46c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802b46e:	b111      	cbz	r1, 802b476 <_reclaim_reent+0x6e>
 802b470:	4620      	mov	r0, r4
 802b472:	f000 f911 	bl	802b698 <_free_r>
 802b476:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802b478:	b111      	cbz	r1, 802b480 <_reclaim_reent+0x78>
 802b47a:	4620      	mov	r0, r4
 802b47c:	f000 f90c 	bl	802b698 <_free_r>
 802b480:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802b482:	b111      	cbz	r1, 802b48a <_reclaim_reent+0x82>
 802b484:	4620      	mov	r0, r4
 802b486:	f000 f907 	bl	802b698 <_free_r>
 802b48a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802b48c:	b111      	cbz	r1, 802b494 <_reclaim_reent+0x8c>
 802b48e:	4620      	mov	r0, r4
 802b490:	f000 f902 	bl	802b698 <_free_r>
 802b494:	6a23      	ldr	r3, [r4, #32]
 802b496:	b14b      	cbz	r3, 802b4ac <_reclaim_reent+0xa4>
 802b498:	4620      	mov	r0, r4
 802b49a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802b49e:	4718      	bx	r3
 802b4a0:	680e      	ldr	r6, [r1, #0]
 802b4a2:	4620      	mov	r0, r4
 802b4a4:	f000 f8f8 	bl	802b698 <_free_r>
 802b4a8:	4631      	mov	r1, r6
 802b4aa:	e7bb      	b.n	802b424 <_reclaim_reent+0x1c>
 802b4ac:	bd70      	pop	{r4, r5, r6, pc}
 802b4ae:	bf00      	nop
 802b4b0:	240000d8 	.word	0x240000d8

0802b4b4 <_lseek_r>:
 802b4b4:	b538      	push	{r3, r4, r5, lr}
 802b4b6:	4d07      	ldr	r5, [pc, #28]	@ (802b4d4 <_lseek_r+0x20>)
 802b4b8:	4604      	mov	r4, r0
 802b4ba:	4608      	mov	r0, r1
 802b4bc:	4611      	mov	r1, r2
 802b4be:	2200      	movs	r2, #0
 802b4c0:	602a      	str	r2, [r5, #0]
 802b4c2:	461a      	mov	r2, r3
 802b4c4:	f7d6 f9d9 	bl	800187a <_lseek>
 802b4c8:	1c43      	adds	r3, r0, #1
 802b4ca:	d102      	bne.n	802b4d2 <_lseek_r+0x1e>
 802b4cc:	682b      	ldr	r3, [r5, #0]
 802b4ce:	b103      	cbz	r3, 802b4d2 <_lseek_r+0x1e>
 802b4d0:	6023      	str	r3, [r4, #0]
 802b4d2:	bd38      	pop	{r3, r4, r5, pc}
 802b4d4:	2400bb0c 	.word	0x2400bb0c

0802b4d8 <_read_r>:
 802b4d8:	b538      	push	{r3, r4, r5, lr}
 802b4da:	4d07      	ldr	r5, [pc, #28]	@ (802b4f8 <_read_r+0x20>)
 802b4dc:	4604      	mov	r4, r0
 802b4de:	4608      	mov	r0, r1
 802b4e0:	4611      	mov	r1, r2
 802b4e2:	2200      	movs	r2, #0
 802b4e4:	602a      	str	r2, [r5, #0]
 802b4e6:	461a      	mov	r2, r3
 802b4e8:	f7d6 f983 	bl	80017f2 <_read>
 802b4ec:	1c43      	adds	r3, r0, #1
 802b4ee:	d102      	bne.n	802b4f6 <_read_r+0x1e>
 802b4f0:	682b      	ldr	r3, [r5, #0]
 802b4f2:	b103      	cbz	r3, 802b4f6 <_read_r+0x1e>
 802b4f4:	6023      	str	r3, [r4, #0]
 802b4f6:	bd38      	pop	{r3, r4, r5, pc}
 802b4f8:	2400bb0c 	.word	0x2400bb0c

0802b4fc <_kill_r>:
 802b4fc:	b538      	push	{r3, r4, r5, lr}
 802b4fe:	4d07      	ldr	r5, [pc, #28]	@ (802b51c <_kill_r+0x20>)
 802b500:	2300      	movs	r3, #0
 802b502:	4604      	mov	r4, r0
 802b504:	4608      	mov	r0, r1
 802b506:	4611      	mov	r1, r2
 802b508:	602b      	str	r3, [r5, #0]
 802b50a:	f7d6 f957 	bl	80017bc <_kill>
 802b50e:	1c43      	adds	r3, r0, #1
 802b510:	d102      	bne.n	802b518 <_kill_r+0x1c>
 802b512:	682b      	ldr	r3, [r5, #0]
 802b514:	b103      	cbz	r3, 802b518 <_kill_r+0x1c>
 802b516:	6023      	str	r3, [r4, #0]
 802b518:	bd38      	pop	{r3, r4, r5, pc}
 802b51a:	bf00      	nop
 802b51c:	2400bb0c 	.word	0x2400bb0c

0802b520 <_getpid_r>:
 802b520:	f7d6 b944 	b.w	80017ac <_getpid>

0802b524 <_sbrk_r>:
 802b524:	b538      	push	{r3, r4, r5, lr}
 802b526:	4d06      	ldr	r5, [pc, #24]	@ (802b540 <_sbrk_r+0x1c>)
 802b528:	2300      	movs	r3, #0
 802b52a:	4604      	mov	r4, r0
 802b52c:	4608      	mov	r0, r1
 802b52e:	602b      	str	r3, [r5, #0]
 802b530:	f7d6 f9b0 	bl	8001894 <_sbrk>
 802b534:	1c43      	adds	r3, r0, #1
 802b536:	d102      	bne.n	802b53e <_sbrk_r+0x1a>
 802b538:	682b      	ldr	r3, [r5, #0]
 802b53a:	b103      	cbz	r3, 802b53e <_sbrk_r+0x1a>
 802b53c:	6023      	str	r3, [r4, #0]
 802b53e:	bd38      	pop	{r3, r4, r5, pc}
 802b540:	2400bb0c 	.word	0x2400bb0c

0802b544 <_write_r>:
 802b544:	b538      	push	{r3, r4, r5, lr}
 802b546:	4d07      	ldr	r5, [pc, #28]	@ (802b564 <_write_r+0x20>)
 802b548:	4604      	mov	r4, r0
 802b54a:	4608      	mov	r0, r1
 802b54c:	4611      	mov	r1, r2
 802b54e:	2200      	movs	r2, #0
 802b550:	602a      	str	r2, [r5, #0]
 802b552:	461a      	mov	r2, r3
 802b554:	f7d4 ff83 	bl	800045e <_write>
 802b558:	1c43      	adds	r3, r0, #1
 802b55a:	d102      	bne.n	802b562 <_write_r+0x1e>
 802b55c:	682b      	ldr	r3, [r5, #0]
 802b55e:	b103      	cbz	r3, 802b562 <_write_r+0x1e>
 802b560:	6023      	str	r3, [r4, #0]
 802b562:	bd38      	pop	{r3, r4, r5, pc}
 802b564:	2400bb0c 	.word	0x2400bb0c

0802b568 <__errno>:
 802b568:	4b01      	ldr	r3, [pc, #4]	@ (802b570 <__errno+0x8>)
 802b56a:	6818      	ldr	r0, [r3, #0]
 802b56c:	4770      	bx	lr
 802b56e:	bf00      	nop
 802b570:	240000d8 	.word	0x240000d8

0802b574 <__libc_init_array>:
 802b574:	b570      	push	{r4, r5, r6, lr}
 802b576:	4d0d      	ldr	r5, [pc, #52]	@ (802b5ac <__libc_init_array+0x38>)
 802b578:	4c0d      	ldr	r4, [pc, #52]	@ (802b5b0 <__libc_init_array+0x3c>)
 802b57a:	1b64      	subs	r4, r4, r5
 802b57c:	10a4      	asrs	r4, r4, #2
 802b57e:	2600      	movs	r6, #0
 802b580:	42a6      	cmp	r6, r4
 802b582:	d109      	bne.n	802b598 <__libc_init_array+0x24>
 802b584:	4d0b      	ldr	r5, [pc, #44]	@ (802b5b4 <__libc_init_array+0x40>)
 802b586:	4c0c      	ldr	r4, [pc, #48]	@ (802b5b8 <__libc_init_array+0x44>)
 802b588:	f000 fd64 	bl	802c054 <_init>
 802b58c:	1b64      	subs	r4, r4, r5
 802b58e:	10a4      	asrs	r4, r4, #2
 802b590:	2600      	movs	r6, #0
 802b592:	42a6      	cmp	r6, r4
 802b594:	d105      	bne.n	802b5a2 <__libc_init_array+0x2e>
 802b596:	bd70      	pop	{r4, r5, r6, pc}
 802b598:	f855 3b04 	ldr.w	r3, [r5], #4
 802b59c:	4798      	blx	r3
 802b59e:	3601      	adds	r6, #1
 802b5a0:	e7ee      	b.n	802b580 <__libc_init_array+0xc>
 802b5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 802b5a6:	4798      	blx	r3
 802b5a8:	3601      	adds	r6, #1
 802b5aa:	e7f2      	b.n	802b592 <__libc_init_array+0x1e>
 802b5ac:	080309b8 	.word	0x080309b8
 802b5b0:	080309b8 	.word	0x080309b8
 802b5b4:	080309b8 	.word	0x080309b8
 802b5b8:	080309cc 	.word	0x080309cc

0802b5bc <__retarget_lock_init_recursive>:
 802b5bc:	4770      	bx	lr

0802b5be <__retarget_lock_acquire_recursive>:
 802b5be:	4770      	bx	lr

0802b5c0 <__retarget_lock_release_recursive>:
 802b5c0:	4770      	bx	lr

0802b5c2 <memcpy>:
 802b5c2:	440a      	add	r2, r1
 802b5c4:	4291      	cmp	r1, r2
 802b5c6:	f100 33ff 	add.w	r3, r0, #4294967295
 802b5ca:	d100      	bne.n	802b5ce <memcpy+0xc>
 802b5cc:	4770      	bx	lr
 802b5ce:	b510      	push	{r4, lr}
 802b5d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 802b5d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 802b5d8:	4291      	cmp	r1, r2
 802b5da:	d1f9      	bne.n	802b5d0 <memcpy+0xe>
 802b5dc:	bd10      	pop	{r4, pc}
	...

0802b5e0 <__register_exitproc>:
 802b5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b5e4:	4d27      	ldr	r5, [pc, #156]	@ (802b684 <__register_exitproc+0xa4>)
 802b5e6:	4607      	mov	r7, r0
 802b5e8:	6828      	ldr	r0, [r5, #0]
 802b5ea:	4691      	mov	r9, r2
 802b5ec:	460e      	mov	r6, r1
 802b5ee:	4698      	mov	r8, r3
 802b5f0:	f7ff ffe5 	bl	802b5be <__retarget_lock_acquire_recursive>
 802b5f4:	4a24      	ldr	r2, [pc, #144]	@ (802b688 <__register_exitproc+0xa8>)
 802b5f6:	6814      	ldr	r4, [r2, #0]
 802b5f8:	b93c      	cbnz	r4, 802b60a <__register_exitproc+0x2a>
 802b5fa:	4b24      	ldr	r3, [pc, #144]	@ (802b68c <__register_exitproc+0xac>)
 802b5fc:	6013      	str	r3, [r2, #0]
 802b5fe:	4a24      	ldr	r2, [pc, #144]	@ (802b690 <__register_exitproc+0xb0>)
 802b600:	b112      	cbz	r2, 802b608 <__register_exitproc+0x28>
 802b602:	6812      	ldr	r2, [r2, #0]
 802b604:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802b608:	4c20      	ldr	r4, [pc, #128]	@ (802b68c <__register_exitproc+0xac>)
 802b60a:	6863      	ldr	r3, [r4, #4]
 802b60c:	2b1f      	cmp	r3, #31
 802b60e:	dd06      	ble.n	802b61e <__register_exitproc+0x3e>
 802b610:	6828      	ldr	r0, [r5, #0]
 802b612:	f7ff ffd5 	bl	802b5c0 <__retarget_lock_release_recursive>
 802b616:	f04f 30ff 	mov.w	r0, #4294967295
 802b61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b61e:	b32f      	cbz	r7, 802b66c <__register_exitproc+0x8c>
 802b620:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802b624:	b968      	cbnz	r0, 802b642 <__register_exitproc+0x62>
 802b626:	4b1b      	ldr	r3, [pc, #108]	@ (802b694 <__register_exitproc+0xb4>)
 802b628:	2b00      	cmp	r3, #0
 802b62a:	d0f1      	beq.n	802b610 <__register_exitproc+0x30>
 802b62c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802b630:	f7ff fcbe 	bl	802afb0 <malloc>
 802b634:	2800      	cmp	r0, #0
 802b636:	d0eb      	beq.n	802b610 <__register_exitproc+0x30>
 802b638:	2300      	movs	r3, #0
 802b63a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802b63e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802b642:	6863      	ldr	r3, [r4, #4]
 802b644:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802b648:	2201      	movs	r2, #1
 802b64a:	409a      	lsls	r2, r3
 802b64c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802b650:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802b654:	4313      	orrs	r3, r2
 802b656:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802b65a:	2f02      	cmp	r7, #2
 802b65c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802b660:	bf02      	ittt	eq
 802b662:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802b666:	4313      	orreq	r3, r2
 802b668:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802b66c:	6863      	ldr	r3, [r4, #4]
 802b66e:	6828      	ldr	r0, [r5, #0]
 802b670:	1c5a      	adds	r2, r3, #1
 802b672:	3302      	adds	r3, #2
 802b674:	6062      	str	r2, [r4, #4]
 802b676:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802b67a:	f7ff ffa1 	bl	802b5c0 <__retarget_lock_release_recursive>
 802b67e:	2000      	movs	r0, #0
 802b680:	e7cb      	b.n	802b61a <__register_exitproc+0x3a>
 802b682:	bf00      	nop
 802b684:	24000128 	.word	0x24000128
 802b688:	2400bba0 	.word	0x2400bba0
 802b68c:	2400bb14 	.word	0x2400bb14
 802b690:	08030950 	.word	0x08030950
 802b694:	0802afb1 	.word	0x0802afb1

0802b698 <_free_r>:
 802b698:	b538      	push	{r3, r4, r5, lr}
 802b69a:	4605      	mov	r5, r0
 802b69c:	2900      	cmp	r1, #0
 802b69e:	d041      	beq.n	802b724 <_free_r+0x8c>
 802b6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b6a4:	1f0c      	subs	r4, r1, #4
 802b6a6:	2b00      	cmp	r3, #0
 802b6a8:	bfb8      	it	lt
 802b6aa:	18e4      	addlt	r4, r4, r3
 802b6ac:	f7ff fd32 	bl	802b114 <__malloc_lock>
 802b6b0:	4a1d      	ldr	r2, [pc, #116]	@ (802b728 <_free_r+0x90>)
 802b6b2:	6813      	ldr	r3, [r2, #0]
 802b6b4:	b933      	cbnz	r3, 802b6c4 <_free_r+0x2c>
 802b6b6:	6063      	str	r3, [r4, #4]
 802b6b8:	6014      	str	r4, [r2, #0]
 802b6ba:	4628      	mov	r0, r5
 802b6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802b6c0:	f7ff bd2e 	b.w	802b120 <__malloc_unlock>
 802b6c4:	42a3      	cmp	r3, r4
 802b6c6:	d908      	bls.n	802b6da <_free_r+0x42>
 802b6c8:	6820      	ldr	r0, [r4, #0]
 802b6ca:	1821      	adds	r1, r4, r0
 802b6cc:	428b      	cmp	r3, r1
 802b6ce:	bf01      	itttt	eq
 802b6d0:	6819      	ldreq	r1, [r3, #0]
 802b6d2:	685b      	ldreq	r3, [r3, #4]
 802b6d4:	1809      	addeq	r1, r1, r0
 802b6d6:	6021      	streq	r1, [r4, #0]
 802b6d8:	e7ed      	b.n	802b6b6 <_free_r+0x1e>
 802b6da:	461a      	mov	r2, r3
 802b6dc:	685b      	ldr	r3, [r3, #4]
 802b6de:	b10b      	cbz	r3, 802b6e4 <_free_r+0x4c>
 802b6e0:	42a3      	cmp	r3, r4
 802b6e2:	d9fa      	bls.n	802b6da <_free_r+0x42>
 802b6e4:	6811      	ldr	r1, [r2, #0]
 802b6e6:	1850      	adds	r0, r2, r1
 802b6e8:	42a0      	cmp	r0, r4
 802b6ea:	d10b      	bne.n	802b704 <_free_r+0x6c>
 802b6ec:	6820      	ldr	r0, [r4, #0]
 802b6ee:	4401      	add	r1, r0
 802b6f0:	1850      	adds	r0, r2, r1
 802b6f2:	4283      	cmp	r3, r0
 802b6f4:	6011      	str	r1, [r2, #0]
 802b6f6:	d1e0      	bne.n	802b6ba <_free_r+0x22>
 802b6f8:	6818      	ldr	r0, [r3, #0]
 802b6fa:	685b      	ldr	r3, [r3, #4]
 802b6fc:	6053      	str	r3, [r2, #4]
 802b6fe:	4408      	add	r0, r1
 802b700:	6010      	str	r0, [r2, #0]
 802b702:	e7da      	b.n	802b6ba <_free_r+0x22>
 802b704:	d902      	bls.n	802b70c <_free_r+0x74>
 802b706:	230c      	movs	r3, #12
 802b708:	602b      	str	r3, [r5, #0]
 802b70a:	e7d6      	b.n	802b6ba <_free_r+0x22>
 802b70c:	6820      	ldr	r0, [r4, #0]
 802b70e:	1821      	adds	r1, r4, r0
 802b710:	428b      	cmp	r3, r1
 802b712:	bf04      	itt	eq
 802b714:	6819      	ldreq	r1, [r3, #0]
 802b716:	685b      	ldreq	r3, [r3, #4]
 802b718:	6063      	str	r3, [r4, #4]
 802b71a:	bf04      	itt	eq
 802b71c:	1809      	addeq	r1, r1, r0
 802b71e:	6021      	streq	r1, [r4, #0]
 802b720:	6054      	str	r4, [r2, #4]
 802b722:	e7ca      	b.n	802b6ba <_free_r+0x22>
 802b724:	bd38      	pop	{r3, r4, r5, pc}
 802b726:	bf00      	nop
 802b728:	2400b9cc 	.word	0x2400b9cc

0802b72c <__sfputc_r>:
 802b72c:	6893      	ldr	r3, [r2, #8]
 802b72e:	3b01      	subs	r3, #1
 802b730:	2b00      	cmp	r3, #0
 802b732:	b410      	push	{r4}
 802b734:	6093      	str	r3, [r2, #8]
 802b736:	da08      	bge.n	802b74a <__sfputc_r+0x1e>
 802b738:	6994      	ldr	r4, [r2, #24]
 802b73a:	42a3      	cmp	r3, r4
 802b73c:	db01      	blt.n	802b742 <__sfputc_r+0x16>
 802b73e:	290a      	cmp	r1, #10
 802b740:	d103      	bne.n	802b74a <__sfputc_r+0x1e>
 802b742:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b746:	f000 bb6d 	b.w	802be24 <__swbuf_r>
 802b74a:	6813      	ldr	r3, [r2, #0]
 802b74c:	1c58      	adds	r0, r3, #1
 802b74e:	6010      	str	r0, [r2, #0]
 802b750:	7019      	strb	r1, [r3, #0]
 802b752:	4608      	mov	r0, r1
 802b754:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b758:	4770      	bx	lr

0802b75a <__sfputs_r>:
 802b75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b75c:	4606      	mov	r6, r0
 802b75e:	460f      	mov	r7, r1
 802b760:	4614      	mov	r4, r2
 802b762:	18d5      	adds	r5, r2, r3
 802b764:	42ac      	cmp	r4, r5
 802b766:	d101      	bne.n	802b76c <__sfputs_r+0x12>
 802b768:	2000      	movs	r0, #0
 802b76a:	e007      	b.n	802b77c <__sfputs_r+0x22>
 802b76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b770:	463a      	mov	r2, r7
 802b772:	4630      	mov	r0, r6
 802b774:	f7ff ffda 	bl	802b72c <__sfputc_r>
 802b778:	1c43      	adds	r3, r0, #1
 802b77a:	d1f3      	bne.n	802b764 <__sfputs_r+0xa>
 802b77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b780 <_vfiprintf_r>:
 802b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b784:	460d      	mov	r5, r1
 802b786:	b09d      	sub	sp, #116	@ 0x74
 802b788:	4614      	mov	r4, r2
 802b78a:	4698      	mov	r8, r3
 802b78c:	4606      	mov	r6, r0
 802b78e:	b118      	cbz	r0, 802b798 <_vfiprintf_r+0x18>
 802b790:	6a03      	ldr	r3, [r0, #32]
 802b792:	b90b      	cbnz	r3, 802b798 <_vfiprintf_r+0x18>
 802b794:	f7ff fd64 	bl	802b260 <__sinit>
 802b798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b79a:	07d9      	lsls	r1, r3, #31
 802b79c:	d405      	bmi.n	802b7aa <_vfiprintf_r+0x2a>
 802b79e:	89ab      	ldrh	r3, [r5, #12]
 802b7a0:	059a      	lsls	r2, r3, #22
 802b7a2:	d402      	bmi.n	802b7aa <_vfiprintf_r+0x2a>
 802b7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b7a6:	f7ff ff0a 	bl	802b5be <__retarget_lock_acquire_recursive>
 802b7aa:	89ab      	ldrh	r3, [r5, #12]
 802b7ac:	071b      	lsls	r3, r3, #28
 802b7ae:	d501      	bpl.n	802b7b4 <_vfiprintf_r+0x34>
 802b7b0:	692b      	ldr	r3, [r5, #16]
 802b7b2:	b99b      	cbnz	r3, 802b7dc <_vfiprintf_r+0x5c>
 802b7b4:	4629      	mov	r1, r5
 802b7b6:	4630      	mov	r0, r6
 802b7b8:	f000 fb72 	bl	802bea0 <__swsetup_r>
 802b7bc:	b170      	cbz	r0, 802b7dc <_vfiprintf_r+0x5c>
 802b7be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b7c0:	07dc      	lsls	r4, r3, #31
 802b7c2:	d504      	bpl.n	802b7ce <_vfiprintf_r+0x4e>
 802b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 802b7c8:	b01d      	add	sp, #116	@ 0x74
 802b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7ce:	89ab      	ldrh	r3, [r5, #12]
 802b7d0:	0598      	lsls	r0, r3, #22
 802b7d2:	d4f7      	bmi.n	802b7c4 <_vfiprintf_r+0x44>
 802b7d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b7d6:	f7ff fef3 	bl	802b5c0 <__retarget_lock_release_recursive>
 802b7da:	e7f3      	b.n	802b7c4 <_vfiprintf_r+0x44>
 802b7dc:	2300      	movs	r3, #0
 802b7de:	9309      	str	r3, [sp, #36]	@ 0x24
 802b7e0:	2320      	movs	r3, #32
 802b7e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802b7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 802b7ea:	2330      	movs	r3, #48	@ 0x30
 802b7ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802b99c <_vfiprintf_r+0x21c>
 802b7f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802b7f4:	f04f 0901 	mov.w	r9, #1
 802b7f8:	4623      	mov	r3, r4
 802b7fa:	469a      	mov	sl, r3
 802b7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b800:	b10a      	cbz	r2, 802b806 <_vfiprintf_r+0x86>
 802b802:	2a25      	cmp	r2, #37	@ 0x25
 802b804:	d1f9      	bne.n	802b7fa <_vfiprintf_r+0x7a>
 802b806:	ebba 0b04 	subs.w	fp, sl, r4
 802b80a:	d00b      	beq.n	802b824 <_vfiprintf_r+0xa4>
 802b80c:	465b      	mov	r3, fp
 802b80e:	4622      	mov	r2, r4
 802b810:	4629      	mov	r1, r5
 802b812:	4630      	mov	r0, r6
 802b814:	f7ff ffa1 	bl	802b75a <__sfputs_r>
 802b818:	3001      	adds	r0, #1
 802b81a:	f000 80a7 	beq.w	802b96c <_vfiprintf_r+0x1ec>
 802b81e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b820:	445a      	add	r2, fp
 802b822:	9209      	str	r2, [sp, #36]	@ 0x24
 802b824:	f89a 3000 	ldrb.w	r3, [sl]
 802b828:	2b00      	cmp	r3, #0
 802b82a:	f000 809f 	beq.w	802b96c <_vfiprintf_r+0x1ec>
 802b82e:	2300      	movs	r3, #0
 802b830:	f04f 32ff 	mov.w	r2, #4294967295
 802b834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b838:	f10a 0a01 	add.w	sl, sl, #1
 802b83c:	9304      	str	r3, [sp, #16]
 802b83e:	9307      	str	r3, [sp, #28]
 802b840:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802b844:	931a      	str	r3, [sp, #104]	@ 0x68
 802b846:	4654      	mov	r4, sl
 802b848:	2205      	movs	r2, #5
 802b84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b84e:	4853      	ldr	r0, [pc, #332]	@ (802b99c <_vfiprintf_r+0x21c>)
 802b850:	f7d4 fd46 	bl	80002e0 <memchr>
 802b854:	9a04      	ldr	r2, [sp, #16]
 802b856:	b9d8      	cbnz	r0, 802b890 <_vfiprintf_r+0x110>
 802b858:	06d1      	lsls	r1, r2, #27
 802b85a:	bf44      	itt	mi
 802b85c:	2320      	movmi	r3, #32
 802b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b862:	0713      	lsls	r3, r2, #28
 802b864:	bf44      	itt	mi
 802b866:	232b      	movmi	r3, #43	@ 0x2b
 802b868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802b86c:	f89a 3000 	ldrb.w	r3, [sl]
 802b870:	2b2a      	cmp	r3, #42	@ 0x2a
 802b872:	d015      	beq.n	802b8a0 <_vfiprintf_r+0x120>
 802b874:	9a07      	ldr	r2, [sp, #28]
 802b876:	4654      	mov	r4, sl
 802b878:	2000      	movs	r0, #0
 802b87a:	f04f 0c0a 	mov.w	ip, #10
 802b87e:	4621      	mov	r1, r4
 802b880:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b884:	3b30      	subs	r3, #48	@ 0x30
 802b886:	2b09      	cmp	r3, #9
 802b888:	d94b      	bls.n	802b922 <_vfiprintf_r+0x1a2>
 802b88a:	b1b0      	cbz	r0, 802b8ba <_vfiprintf_r+0x13a>
 802b88c:	9207      	str	r2, [sp, #28]
 802b88e:	e014      	b.n	802b8ba <_vfiprintf_r+0x13a>
 802b890:	eba0 0308 	sub.w	r3, r0, r8
 802b894:	fa09 f303 	lsl.w	r3, r9, r3
 802b898:	4313      	orrs	r3, r2
 802b89a:	9304      	str	r3, [sp, #16]
 802b89c:	46a2      	mov	sl, r4
 802b89e:	e7d2      	b.n	802b846 <_vfiprintf_r+0xc6>
 802b8a0:	9b03      	ldr	r3, [sp, #12]
 802b8a2:	1d19      	adds	r1, r3, #4
 802b8a4:	681b      	ldr	r3, [r3, #0]
 802b8a6:	9103      	str	r1, [sp, #12]
 802b8a8:	2b00      	cmp	r3, #0
 802b8aa:	bfbb      	ittet	lt
 802b8ac:	425b      	neglt	r3, r3
 802b8ae:	f042 0202 	orrlt.w	r2, r2, #2
 802b8b2:	9307      	strge	r3, [sp, #28]
 802b8b4:	9307      	strlt	r3, [sp, #28]
 802b8b6:	bfb8      	it	lt
 802b8b8:	9204      	strlt	r2, [sp, #16]
 802b8ba:	7823      	ldrb	r3, [r4, #0]
 802b8bc:	2b2e      	cmp	r3, #46	@ 0x2e
 802b8be:	d10a      	bne.n	802b8d6 <_vfiprintf_r+0x156>
 802b8c0:	7863      	ldrb	r3, [r4, #1]
 802b8c2:	2b2a      	cmp	r3, #42	@ 0x2a
 802b8c4:	d132      	bne.n	802b92c <_vfiprintf_r+0x1ac>
 802b8c6:	9b03      	ldr	r3, [sp, #12]
 802b8c8:	1d1a      	adds	r2, r3, #4
 802b8ca:	681b      	ldr	r3, [r3, #0]
 802b8cc:	9203      	str	r2, [sp, #12]
 802b8ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802b8d2:	3402      	adds	r4, #2
 802b8d4:	9305      	str	r3, [sp, #20]
 802b8d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802b9ac <_vfiprintf_r+0x22c>
 802b8da:	7821      	ldrb	r1, [r4, #0]
 802b8dc:	2203      	movs	r2, #3
 802b8de:	4650      	mov	r0, sl
 802b8e0:	f7d4 fcfe 	bl	80002e0 <memchr>
 802b8e4:	b138      	cbz	r0, 802b8f6 <_vfiprintf_r+0x176>
 802b8e6:	9b04      	ldr	r3, [sp, #16]
 802b8e8:	eba0 000a 	sub.w	r0, r0, sl
 802b8ec:	2240      	movs	r2, #64	@ 0x40
 802b8ee:	4082      	lsls	r2, r0
 802b8f0:	4313      	orrs	r3, r2
 802b8f2:	3401      	adds	r4, #1
 802b8f4:	9304      	str	r3, [sp, #16]
 802b8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b8fa:	4829      	ldr	r0, [pc, #164]	@ (802b9a0 <_vfiprintf_r+0x220>)
 802b8fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802b900:	2206      	movs	r2, #6
 802b902:	f7d4 fced 	bl	80002e0 <memchr>
 802b906:	2800      	cmp	r0, #0
 802b908:	d03f      	beq.n	802b98a <_vfiprintf_r+0x20a>
 802b90a:	4b26      	ldr	r3, [pc, #152]	@ (802b9a4 <_vfiprintf_r+0x224>)
 802b90c:	bb1b      	cbnz	r3, 802b956 <_vfiprintf_r+0x1d6>
 802b90e:	9b03      	ldr	r3, [sp, #12]
 802b910:	3307      	adds	r3, #7
 802b912:	f023 0307 	bic.w	r3, r3, #7
 802b916:	3308      	adds	r3, #8
 802b918:	9303      	str	r3, [sp, #12]
 802b91a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b91c:	443b      	add	r3, r7
 802b91e:	9309      	str	r3, [sp, #36]	@ 0x24
 802b920:	e76a      	b.n	802b7f8 <_vfiprintf_r+0x78>
 802b922:	fb0c 3202 	mla	r2, ip, r2, r3
 802b926:	460c      	mov	r4, r1
 802b928:	2001      	movs	r0, #1
 802b92a:	e7a8      	b.n	802b87e <_vfiprintf_r+0xfe>
 802b92c:	2300      	movs	r3, #0
 802b92e:	3401      	adds	r4, #1
 802b930:	9305      	str	r3, [sp, #20]
 802b932:	4619      	mov	r1, r3
 802b934:	f04f 0c0a 	mov.w	ip, #10
 802b938:	4620      	mov	r0, r4
 802b93a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b93e:	3a30      	subs	r2, #48	@ 0x30
 802b940:	2a09      	cmp	r2, #9
 802b942:	d903      	bls.n	802b94c <_vfiprintf_r+0x1cc>
 802b944:	2b00      	cmp	r3, #0
 802b946:	d0c6      	beq.n	802b8d6 <_vfiprintf_r+0x156>
 802b948:	9105      	str	r1, [sp, #20]
 802b94a:	e7c4      	b.n	802b8d6 <_vfiprintf_r+0x156>
 802b94c:	fb0c 2101 	mla	r1, ip, r1, r2
 802b950:	4604      	mov	r4, r0
 802b952:	2301      	movs	r3, #1
 802b954:	e7f0      	b.n	802b938 <_vfiprintf_r+0x1b8>
 802b956:	ab03      	add	r3, sp, #12
 802b958:	9300      	str	r3, [sp, #0]
 802b95a:	462a      	mov	r2, r5
 802b95c:	4b12      	ldr	r3, [pc, #72]	@ (802b9a8 <_vfiprintf_r+0x228>)
 802b95e:	a904      	add	r1, sp, #16
 802b960:	4630      	mov	r0, r6
 802b962:	f3af 8000 	nop.w
 802b966:	4607      	mov	r7, r0
 802b968:	1c78      	adds	r0, r7, #1
 802b96a:	d1d6      	bne.n	802b91a <_vfiprintf_r+0x19a>
 802b96c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802b96e:	07d9      	lsls	r1, r3, #31
 802b970:	d405      	bmi.n	802b97e <_vfiprintf_r+0x1fe>
 802b972:	89ab      	ldrh	r3, [r5, #12]
 802b974:	059a      	lsls	r2, r3, #22
 802b976:	d402      	bmi.n	802b97e <_vfiprintf_r+0x1fe>
 802b978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802b97a:	f7ff fe21 	bl	802b5c0 <__retarget_lock_release_recursive>
 802b97e:	89ab      	ldrh	r3, [r5, #12]
 802b980:	065b      	lsls	r3, r3, #25
 802b982:	f53f af1f 	bmi.w	802b7c4 <_vfiprintf_r+0x44>
 802b986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802b988:	e71e      	b.n	802b7c8 <_vfiprintf_r+0x48>
 802b98a:	ab03      	add	r3, sp, #12
 802b98c:	9300      	str	r3, [sp, #0]
 802b98e:	462a      	mov	r2, r5
 802b990:	4b05      	ldr	r3, [pc, #20]	@ (802b9a8 <_vfiprintf_r+0x228>)
 802b992:	a904      	add	r1, sp, #16
 802b994:	4630      	mov	r0, r6
 802b996:	f000 f879 	bl	802ba8c <_printf_i>
 802b99a:	e7e4      	b.n	802b966 <_vfiprintf_r+0x1e6>
 802b99c:	08030954 	.word	0x08030954
 802b9a0:	0803095e 	.word	0x0803095e
 802b9a4:	00000000 	.word	0x00000000
 802b9a8:	0802b75b 	.word	0x0802b75b
 802b9ac:	0803095a 	.word	0x0803095a

0802b9b0 <_printf_common>:
 802b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b9b4:	4616      	mov	r6, r2
 802b9b6:	4698      	mov	r8, r3
 802b9b8:	688a      	ldr	r2, [r1, #8]
 802b9ba:	690b      	ldr	r3, [r1, #16]
 802b9bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802b9c0:	4293      	cmp	r3, r2
 802b9c2:	bfb8      	it	lt
 802b9c4:	4613      	movlt	r3, r2
 802b9c6:	6033      	str	r3, [r6, #0]
 802b9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802b9cc:	4607      	mov	r7, r0
 802b9ce:	460c      	mov	r4, r1
 802b9d0:	b10a      	cbz	r2, 802b9d6 <_printf_common+0x26>
 802b9d2:	3301      	adds	r3, #1
 802b9d4:	6033      	str	r3, [r6, #0]
 802b9d6:	6823      	ldr	r3, [r4, #0]
 802b9d8:	0699      	lsls	r1, r3, #26
 802b9da:	bf42      	ittt	mi
 802b9dc:	6833      	ldrmi	r3, [r6, #0]
 802b9de:	3302      	addmi	r3, #2
 802b9e0:	6033      	strmi	r3, [r6, #0]
 802b9e2:	6825      	ldr	r5, [r4, #0]
 802b9e4:	f015 0506 	ands.w	r5, r5, #6
 802b9e8:	d106      	bne.n	802b9f8 <_printf_common+0x48>
 802b9ea:	f104 0a19 	add.w	sl, r4, #25
 802b9ee:	68e3      	ldr	r3, [r4, #12]
 802b9f0:	6832      	ldr	r2, [r6, #0]
 802b9f2:	1a9b      	subs	r3, r3, r2
 802b9f4:	42ab      	cmp	r3, r5
 802b9f6:	dc26      	bgt.n	802ba46 <_printf_common+0x96>
 802b9f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802b9fc:	6822      	ldr	r2, [r4, #0]
 802b9fe:	3b00      	subs	r3, #0
 802ba00:	bf18      	it	ne
 802ba02:	2301      	movne	r3, #1
 802ba04:	0692      	lsls	r2, r2, #26
 802ba06:	d42b      	bmi.n	802ba60 <_printf_common+0xb0>
 802ba08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802ba0c:	4641      	mov	r1, r8
 802ba0e:	4638      	mov	r0, r7
 802ba10:	47c8      	blx	r9
 802ba12:	3001      	adds	r0, #1
 802ba14:	d01e      	beq.n	802ba54 <_printf_common+0xa4>
 802ba16:	6823      	ldr	r3, [r4, #0]
 802ba18:	6922      	ldr	r2, [r4, #16]
 802ba1a:	f003 0306 	and.w	r3, r3, #6
 802ba1e:	2b04      	cmp	r3, #4
 802ba20:	bf02      	ittt	eq
 802ba22:	68e5      	ldreq	r5, [r4, #12]
 802ba24:	6833      	ldreq	r3, [r6, #0]
 802ba26:	1aed      	subeq	r5, r5, r3
 802ba28:	68a3      	ldr	r3, [r4, #8]
 802ba2a:	bf0c      	ite	eq
 802ba2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ba30:	2500      	movne	r5, #0
 802ba32:	4293      	cmp	r3, r2
 802ba34:	bfc4      	itt	gt
 802ba36:	1a9b      	subgt	r3, r3, r2
 802ba38:	18ed      	addgt	r5, r5, r3
 802ba3a:	2600      	movs	r6, #0
 802ba3c:	341a      	adds	r4, #26
 802ba3e:	42b5      	cmp	r5, r6
 802ba40:	d11a      	bne.n	802ba78 <_printf_common+0xc8>
 802ba42:	2000      	movs	r0, #0
 802ba44:	e008      	b.n	802ba58 <_printf_common+0xa8>
 802ba46:	2301      	movs	r3, #1
 802ba48:	4652      	mov	r2, sl
 802ba4a:	4641      	mov	r1, r8
 802ba4c:	4638      	mov	r0, r7
 802ba4e:	47c8      	blx	r9
 802ba50:	3001      	adds	r0, #1
 802ba52:	d103      	bne.n	802ba5c <_printf_common+0xac>
 802ba54:	f04f 30ff 	mov.w	r0, #4294967295
 802ba58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ba5c:	3501      	adds	r5, #1
 802ba5e:	e7c6      	b.n	802b9ee <_printf_common+0x3e>
 802ba60:	18e1      	adds	r1, r4, r3
 802ba62:	1c5a      	adds	r2, r3, #1
 802ba64:	2030      	movs	r0, #48	@ 0x30
 802ba66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802ba6a:	4422      	add	r2, r4
 802ba6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802ba70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802ba74:	3302      	adds	r3, #2
 802ba76:	e7c7      	b.n	802ba08 <_printf_common+0x58>
 802ba78:	2301      	movs	r3, #1
 802ba7a:	4622      	mov	r2, r4
 802ba7c:	4641      	mov	r1, r8
 802ba7e:	4638      	mov	r0, r7
 802ba80:	47c8      	blx	r9
 802ba82:	3001      	adds	r0, #1
 802ba84:	d0e6      	beq.n	802ba54 <_printf_common+0xa4>
 802ba86:	3601      	adds	r6, #1
 802ba88:	e7d9      	b.n	802ba3e <_printf_common+0x8e>
	...

0802ba8c <_printf_i>:
 802ba8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802ba90:	7e0f      	ldrb	r7, [r1, #24]
 802ba92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802ba94:	2f78      	cmp	r7, #120	@ 0x78
 802ba96:	4691      	mov	r9, r2
 802ba98:	4680      	mov	r8, r0
 802ba9a:	460c      	mov	r4, r1
 802ba9c:	469a      	mov	sl, r3
 802ba9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802baa2:	d807      	bhi.n	802bab4 <_printf_i+0x28>
 802baa4:	2f62      	cmp	r7, #98	@ 0x62
 802baa6:	d80a      	bhi.n	802babe <_printf_i+0x32>
 802baa8:	2f00      	cmp	r7, #0
 802baaa:	f000 80d2 	beq.w	802bc52 <_printf_i+0x1c6>
 802baae:	2f58      	cmp	r7, #88	@ 0x58
 802bab0:	f000 80b9 	beq.w	802bc26 <_printf_i+0x19a>
 802bab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802babc:	e03a      	b.n	802bb34 <_printf_i+0xa8>
 802babe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802bac2:	2b15      	cmp	r3, #21
 802bac4:	d8f6      	bhi.n	802bab4 <_printf_i+0x28>
 802bac6:	a101      	add	r1, pc, #4	@ (adr r1, 802bacc <_printf_i+0x40>)
 802bac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802bacc:	0802bb25 	.word	0x0802bb25
 802bad0:	0802bb39 	.word	0x0802bb39
 802bad4:	0802bab5 	.word	0x0802bab5
 802bad8:	0802bab5 	.word	0x0802bab5
 802badc:	0802bab5 	.word	0x0802bab5
 802bae0:	0802bab5 	.word	0x0802bab5
 802bae4:	0802bb39 	.word	0x0802bb39
 802bae8:	0802bab5 	.word	0x0802bab5
 802baec:	0802bab5 	.word	0x0802bab5
 802baf0:	0802bab5 	.word	0x0802bab5
 802baf4:	0802bab5 	.word	0x0802bab5
 802baf8:	0802bc39 	.word	0x0802bc39
 802bafc:	0802bb63 	.word	0x0802bb63
 802bb00:	0802bbf3 	.word	0x0802bbf3
 802bb04:	0802bab5 	.word	0x0802bab5
 802bb08:	0802bab5 	.word	0x0802bab5
 802bb0c:	0802bc5b 	.word	0x0802bc5b
 802bb10:	0802bab5 	.word	0x0802bab5
 802bb14:	0802bb63 	.word	0x0802bb63
 802bb18:	0802bab5 	.word	0x0802bab5
 802bb1c:	0802bab5 	.word	0x0802bab5
 802bb20:	0802bbfb 	.word	0x0802bbfb
 802bb24:	6833      	ldr	r3, [r6, #0]
 802bb26:	1d1a      	adds	r2, r3, #4
 802bb28:	681b      	ldr	r3, [r3, #0]
 802bb2a:	6032      	str	r2, [r6, #0]
 802bb2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802bb30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802bb34:	2301      	movs	r3, #1
 802bb36:	e09d      	b.n	802bc74 <_printf_i+0x1e8>
 802bb38:	6833      	ldr	r3, [r6, #0]
 802bb3a:	6820      	ldr	r0, [r4, #0]
 802bb3c:	1d19      	adds	r1, r3, #4
 802bb3e:	6031      	str	r1, [r6, #0]
 802bb40:	0606      	lsls	r6, r0, #24
 802bb42:	d501      	bpl.n	802bb48 <_printf_i+0xbc>
 802bb44:	681d      	ldr	r5, [r3, #0]
 802bb46:	e003      	b.n	802bb50 <_printf_i+0xc4>
 802bb48:	0645      	lsls	r5, r0, #25
 802bb4a:	d5fb      	bpl.n	802bb44 <_printf_i+0xb8>
 802bb4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 802bb50:	2d00      	cmp	r5, #0
 802bb52:	da03      	bge.n	802bb5c <_printf_i+0xd0>
 802bb54:	232d      	movs	r3, #45	@ 0x2d
 802bb56:	426d      	negs	r5, r5
 802bb58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bb5c:	4859      	ldr	r0, [pc, #356]	@ (802bcc4 <_printf_i+0x238>)
 802bb5e:	230a      	movs	r3, #10
 802bb60:	e011      	b.n	802bb86 <_printf_i+0xfa>
 802bb62:	6821      	ldr	r1, [r4, #0]
 802bb64:	6833      	ldr	r3, [r6, #0]
 802bb66:	0608      	lsls	r0, r1, #24
 802bb68:	f853 5b04 	ldr.w	r5, [r3], #4
 802bb6c:	d402      	bmi.n	802bb74 <_printf_i+0xe8>
 802bb6e:	0649      	lsls	r1, r1, #25
 802bb70:	bf48      	it	mi
 802bb72:	b2ad      	uxthmi	r5, r5
 802bb74:	2f6f      	cmp	r7, #111	@ 0x6f
 802bb76:	4853      	ldr	r0, [pc, #332]	@ (802bcc4 <_printf_i+0x238>)
 802bb78:	6033      	str	r3, [r6, #0]
 802bb7a:	bf14      	ite	ne
 802bb7c:	230a      	movne	r3, #10
 802bb7e:	2308      	moveq	r3, #8
 802bb80:	2100      	movs	r1, #0
 802bb82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802bb86:	6866      	ldr	r6, [r4, #4]
 802bb88:	60a6      	str	r6, [r4, #8]
 802bb8a:	2e00      	cmp	r6, #0
 802bb8c:	bfa2      	ittt	ge
 802bb8e:	6821      	ldrge	r1, [r4, #0]
 802bb90:	f021 0104 	bicge.w	r1, r1, #4
 802bb94:	6021      	strge	r1, [r4, #0]
 802bb96:	b90d      	cbnz	r5, 802bb9c <_printf_i+0x110>
 802bb98:	2e00      	cmp	r6, #0
 802bb9a:	d04b      	beq.n	802bc34 <_printf_i+0x1a8>
 802bb9c:	4616      	mov	r6, r2
 802bb9e:	fbb5 f1f3 	udiv	r1, r5, r3
 802bba2:	fb03 5711 	mls	r7, r3, r1, r5
 802bba6:	5dc7      	ldrb	r7, [r0, r7]
 802bba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802bbac:	462f      	mov	r7, r5
 802bbae:	42bb      	cmp	r3, r7
 802bbb0:	460d      	mov	r5, r1
 802bbb2:	d9f4      	bls.n	802bb9e <_printf_i+0x112>
 802bbb4:	2b08      	cmp	r3, #8
 802bbb6:	d10b      	bne.n	802bbd0 <_printf_i+0x144>
 802bbb8:	6823      	ldr	r3, [r4, #0]
 802bbba:	07df      	lsls	r7, r3, #31
 802bbbc:	d508      	bpl.n	802bbd0 <_printf_i+0x144>
 802bbbe:	6923      	ldr	r3, [r4, #16]
 802bbc0:	6861      	ldr	r1, [r4, #4]
 802bbc2:	4299      	cmp	r1, r3
 802bbc4:	bfde      	ittt	le
 802bbc6:	2330      	movle	r3, #48	@ 0x30
 802bbc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802bbcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 802bbd0:	1b92      	subs	r2, r2, r6
 802bbd2:	6122      	str	r2, [r4, #16]
 802bbd4:	f8cd a000 	str.w	sl, [sp]
 802bbd8:	464b      	mov	r3, r9
 802bbda:	aa03      	add	r2, sp, #12
 802bbdc:	4621      	mov	r1, r4
 802bbde:	4640      	mov	r0, r8
 802bbe0:	f7ff fee6 	bl	802b9b0 <_printf_common>
 802bbe4:	3001      	adds	r0, #1
 802bbe6:	d14a      	bne.n	802bc7e <_printf_i+0x1f2>
 802bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 802bbec:	b004      	add	sp, #16
 802bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bbf2:	6823      	ldr	r3, [r4, #0]
 802bbf4:	f043 0320 	orr.w	r3, r3, #32
 802bbf8:	6023      	str	r3, [r4, #0]
 802bbfa:	4833      	ldr	r0, [pc, #204]	@ (802bcc8 <_printf_i+0x23c>)
 802bbfc:	2778      	movs	r7, #120	@ 0x78
 802bbfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802bc02:	6823      	ldr	r3, [r4, #0]
 802bc04:	6831      	ldr	r1, [r6, #0]
 802bc06:	061f      	lsls	r7, r3, #24
 802bc08:	f851 5b04 	ldr.w	r5, [r1], #4
 802bc0c:	d402      	bmi.n	802bc14 <_printf_i+0x188>
 802bc0e:	065f      	lsls	r7, r3, #25
 802bc10:	bf48      	it	mi
 802bc12:	b2ad      	uxthmi	r5, r5
 802bc14:	6031      	str	r1, [r6, #0]
 802bc16:	07d9      	lsls	r1, r3, #31
 802bc18:	bf44      	itt	mi
 802bc1a:	f043 0320 	orrmi.w	r3, r3, #32
 802bc1e:	6023      	strmi	r3, [r4, #0]
 802bc20:	b11d      	cbz	r5, 802bc2a <_printf_i+0x19e>
 802bc22:	2310      	movs	r3, #16
 802bc24:	e7ac      	b.n	802bb80 <_printf_i+0xf4>
 802bc26:	4827      	ldr	r0, [pc, #156]	@ (802bcc4 <_printf_i+0x238>)
 802bc28:	e7e9      	b.n	802bbfe <_printf_i+0x172>
 802bc2a:	6823      	ldr	r3, [r4, #0]
 802bc2c:	f023 0320 	bic.w	r3, r3, #32
 802bc30:	6023      	str	r3, [r4, #0]
 802bc32:	e7f6      	b.n	802bc22 <_printf_i+0x196>
 802bc34:	4616      	mov	r6, r2
 802bc36:	e7bd      	b.n	802bbb4 <_printf_i+0x128>
 802bc38:	6833      	ldr	r3, [r6, #0]
 802bc3a:	6825      	ldr	r5, [r4, #0]
 802bc3c:	6961      	ldr	r1, [r4, #20]
 802bc3e:	1d18      	adds	r0, r3, #4
 802bc40:	6030      	str	r0, [r6, #0]
 802bc42:	062e      	lsls	r6, r5, #24
 802bc44:	681b      	ldr	r3, [r3, #0]
 802bc46:	d501      	bpl.n	802bc4c <_printf_i+0x1c0>
 802bc48:	6019      	str	r1, [r3, #0]
 802bc4a:	e002      	b.n	802bc52 <_printf_i+0x1c6>
 802bc4c:	0668      	lsls	r0, r5, #25
 802bc4e:	d5fb      	bpl.n	802bc48 <_printf_i+0x1bc>
 802bc50:	8019      	strh	r1, [r3, #0]
 802bc52:	2300      	movs	r3, #0
 802bc54:	6123      	str	r3, [r4, #16]
 802bc56:	4616      	mov	r6, r2
 802bc58:	e7bc      	b.n	802bbd4 <_printf_i+0x148>
 802bc5a:	6833      	ldr	r3, [r6, #0]
 802bc5c:	1d1a      	adds	r2, r3, #4
 802bc5e:	6032      	str	r2, [r6, #0]
 802bc60:	681e      	ldr	r6, [r3, #0]
 802bc62:	6862      	ldr	r2, [r4, #4]
 802bc64:	2100      	movs	r1, #0
 802bc66:	4630      	mov	r0, r6
 802bc68:	f7d4 fb3a 	bl	80002e0 <memchr>
 802bc6c:	b108      	cbz	r0, 802bc72 <_printf_i+0x1e6>
 802bc6e:	1b80      	subs	r0, r0, r6
 802bc70:	6060      	str	r0, [r4, #4]
 802bc72:	6863      	ldr	r3, [r4, #4]
 802bc74:	6123      	str	r3, [r4, #16]
 802bc76:	2300      	movs	r3, #0
 802bc78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802bc7c:	e7aa      	b.n	802bbd4 <_printf_i+0x148>
 802bc7e:	6923      	ldr	r3, [r4, #16]
 802bc80:	4632      	mov	r2, r6
 802bc82:	4649      	mov	r1, r9
 802bc84:	4640      	mov	r0, r8
 802bc86:	47d0      	blx	sl
 802bc88:	3001      	adds	r0, #1
 802bc8a:	d0ad      	beq.n	802bbe8 <_printf_i+0x15c>
 802bc8c:	6823      	ldr	r3, [r4, #0]
 802bc8e:	079b      	lsls	r3, r3, #30
 802bc90:	d413      	bmi.n	802bcba <_printf_i+0x22e>
 802bc92:	68e0      	ldr	r0, [r4, #12]
 802bc94:	9b03      	ldr	r3, [sp, #12]
 802bc96:	4298      	cmp	r0, r3
 802bc98:	bfb8      	it	lt
 802bc9a:	4618      	movlt	r0, r3
 802bc9c:	e7a6      	b.n	802bbec <_printf_i+0x160>
 802bc9e:	2301      	movs	r3, #1
 802bca0:	4632      	mov	r2, r6
 802bca2:	4649      	mov	r1, r9
 802bca4:	4640      	mov	r0, r8
 802bca6:	47d0      	blx	sl
 802bca8:	3001      	adds	r0, #1
 802bcaa:	d09d      	beq.n	802bbe8 <_printf_i+0x15c>
 802bcac:	3501      	adds	r5, #1
 802bcae:	68e3      	ldr	r3, [r4, #12]
 802bcb0:	9903      	ldr	r1, [sp, #12]
 802bcb2:	1a5b      	subs	r3, r3, r1
 802bcb4:	42ab      	cmp	r3, r5
 802bcb6:	dcf2      	bgt.n	802bc9e <_printf_i+0x212>
 802bcb8:	e7eb      	b.n	802bc92 <_printf_i+0x206>
 802bcba:	2500      	movs	r5, #0
 802bcbc:	f104 0619 	add.w	r6, r4, #25
 802bcc0:	e7f5      	b.n	802bcae <_printf_i+0x222>
 802bcc2:	bf00      	nop
 802bcc4:	08030965 	.word	0x08030965
 802bcc8:	08030976 	.word	0x08030976

0802bccc <__sflush_r>:
 802bccc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802bcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bcd4:	0716      	lsls	r6, r2, #28
 802bcd6:	4605      	mov	r5, r0
 802bcd8:	460c      	mov	r4, r1
 802bcda:	d454      	bmi.n	802bd86 <__sflush_r+0xba>
 802bcdc:	684b      	ldr	r3, [r1, #4]
 802bcde:	2b00      	cmp	r3, #0
 802bce0:	dc02      	bgt.n	802bce8 <__sflush_r+0x1c>
 802bce2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802bce4:	2b00      	cmp	r3, #0
 802bce6:	dd48      	ble.n	802bd7a <__sflush_r+0xae>
 802bce8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802bcea:	2e00      	cmp	r6, #0
 802bcec:	d045      	beq.n	802bd7a <__sflush_r+0xae>
 802bcee:	2300      	movs	r3, #0
 802bcf0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802bcf4:	682f      	ldr	r7, [r5, #0]
 802bcf6:	6a21      	ldr	r1, [r4, #32]
 802bcf8:	602b      	str	r3, [r5, #0]
 802bcfa:	d030      	beq.n	802bd5e <__sflush_r+0x92>
 802bcfc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802bcfe:	89a3      	ldrh	r3, [r4, #12]
 802bd00:	0759      	lsls	r1, r3, #29
 802bd02:	d505      	bpl.n	802bd10 <__sflush_r+0x44>
 802bd04:	6863      	ldr	r3, [r4, #4]
 802bd06:	1ad2      	subs	r2, r2, r3
 802bd08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802bd0a:	b10b      	cbz	r3, 802bd10 <__sflush_r+0x44>
 802bd0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802bd0e:	1ad2      	subs	r2, r2, r3
 802bd10:	2300      	movs	r3, #0
 802bd12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802bd14:	6a21      	ldr	r1, [r4, #32]
 802bd16:	4628      	mov	r0, r5
 802bd18:	47b0      	blx	r6
 802bd1a:	1c43      	adds	r3, r0, #1
 802bd1c:	89a3      	ldrh	r3, [r4, #12]
 802bd1e:	d106      	bne.n	802bd2e <__sflush_r+0x62>
 802bd20:	6829      	ldr	r1, [r5, #0]
 802bd22:	291d      	cmp	r1, #29
 802bd24:	d82b      	bhi.n	802bd7e <__sflush_r+0xb2>
 802bd26:	4a2a      	ldr	r2, [pc, #168]	@ (802bdd0 <__sflush_r+0x104>)
 802bd28:	410a      	asrs	r2, r1
 802bd2a:	07d6      	lsls	r6, r2, #31
 802bd2c:	d427      	bmi.n	802bd7e <__sflush_r+0xb2>
 802bd2e:	2200      	movs	r2, #0
 802bd30:	6062      	str	r2, [r4, #4]
 802bd32:	04d9      	lsls	r1, r3, #19
 802bd34:	6922      	ldr	r2, [r4, #16]
 802bd36:	6022      	str	r2, [r4, #0]
 802bd38:	d504      	bpl.n	802bd44 <__sflush_r+0x78>
 802bd3a:	1c42      	adds	r2, r0, #1
 802bd3c:	d101      	bne.n	802bd42 <__sflush_r+0x76>
 802bd3e:	682b      	ldr	r3, [r5, #0]
 802bd40:	b903      	cbnz	r3, 802bd44 <__sflush_r+0x78>
 802bd42:	6560      	str	r0, [r4, #84]	@ 0x54
 802bd44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bd46:	602f      	str	r7, [r5, #0]
 802bd48:	b1b9      	cbz	r1, 802bd7a <__sflush_r+0xae>
 802bd4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bd4e:	4299      	cmp	r1, r3
 802bd50:	d002      	beq.n	802bd58 <__sflush_r+0x8c>
 802bd52:	4628      	mov	r0, r5
 802bd54:	f7ff fca0 	bl	802b698 <_free_r>
 802bd58:	2300      	movs	r3, #0
 802bd5a:	6363      	str	r3, [r4, #52]	@ 0x34
 802bd5c:	e00d      	b.n	802bd7a <__sflush_r+0xae>
 802bd5e:	2301      	movs	r3, #1
 802bd60:	4628      	mov	r0, r5
 802bd62:	47b0      	blx	r6
 802bd64:	4602      	mov	r2, r0
 802bd66:	1c50      	adds	r0, r2, #1
 802bd68:	d1c9      	bne.n	802bcfe <__sflush_r+0x32>
 802bd6a:	682b      	ldr	r3, [r5, #0]
 802bd6c:	2b00      	cmp	r3, #0
 802bd6e:	d0c6      	beq.n	802bcfe <__sflush_r+0x32>
 802bd70:	2b1d      	cmp	r3, #29
 802bd72:	d001      	beq.n	802bd78 <__sflush_r+0xac>
 802bd74:	2b16      	cmp	r3, #22
 802bd76:	d11e      	bne.n	802bdb6 <__sflush_r+0xea>
 802bd78:	602f      	str	r7, [r5, #0]
 802bd7a:	2000      	movs	r0, #0
 802bd7c:	e022      	b.n	802bdc4 <__sflush_r+0xf8>
 802bd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bd82:	b21b      	sxth	r3, r3
 802bd84:	e01b      	b.n	802bdbe <__sflush_r+0xf2>
 802bd86:	690f      	ldr	r7, [r1, #16]
 802bd88:	2f00      	cmp	r7, #0
 802bd8a:	d0f6      	beq.n	802bd7a <__sflush_r+0xae>
 802bd8c:	0793      	lsls	r3, r2, #30
 802bd8e:	680e      	ldr	r6, [r1, #0]
 802bd90:	bf08      	it	eq
 802bd92:	694b      	ldreq	r3, [r1, #20]
 802bd94:	600f      	str	r7, [r1, #0]
 802bd96:	bf18      	it	ne
 802bd98:	2300      	movne	r3, #0
 802bd9a:	eba6 0807 	sub.w	r8, r6, r7
 802bd9e:	608b      	str	r3, [r1, #8]
 802bda0:	f1b8 0f00 	cmp.w	r8, #0
 802bda4:	dde9      	ble.n	802bd7a <__sflush_r+0xae>
 802bda6:	6a21      	ldr	r1, [r4, #32]
 802bda8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802bdaa:	4643      	mov	r3, r8
 802bdac:	463a      	mov	r2, r7
 802bdae:	4628      	mov	r0, r5
 802bdb0:	47b0      	blx	r6
 802bdb2:	2800      	cmp	r0, #0
 802bdb4:	dc08      	bgt.n	802bdc8 <__sflush_r+0xfc>
 802bdb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bdbe:	81a3      	strh	r3, [r4, #12]
 802bdc0:	f04f 30ff 	mov.w	r0, #4294967295
 802bdc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdc8:	4407      	add	r7, r0
 802bdca:	eba8 0800 	sub.w	r8, r8, r0
 802bdce:	e7e7      	b.n	802bda0 <__sflush_r+0xd4>
 802bdd0:	dfbffffe 	.word	0xdfbffffe

0802bdd4 <_fflush_r>:
 802bdd4:	b538      	push	{r3, r4, r5, lr}
 802bdd6:	690b      	ldr	r3, [r1, #16]
 802bdd8:	4605      	mov	r5, r0
 802bdda:	460c      	mov	r4, r1
 802bddc:	b913      	cbnz	r3, 802bde4 <_fflush_r+0x10>
 802bdde:	2500      	movs	r5, #0
 802bde0:	4628      	mov	r0, r5
 802bde2:	bd38      	pop	{r3, r4, r5, pc}
 802bde4:	b118      	cbz	r0, 802bdee <_fflush_r+0x1a>
 802bde6:	6a03      	ldr	r3, [r0, #32]
 802bde8:	b90b      	cbnz	r3, 802bdee <_fflush_r+0x1a>
 802bdea:	f7ff fa39 	bl	802b260 <__sinit>
 802bdee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdf2:	2b00      	cmp	r3, #0
 802bdf4:	d0f3      	beq.n	802bdde <_fflush_r+0xa>
 802bdf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802bdf8:	07d0      	lsls	r0, r2, #31
 802bdfa:	d404      	bmi.n	802be06 <_fflush_r+0x32>
 802bdfc:	0599      	lsls	r1, r3, #22
 802bdfe:	d402      	bmi.n	802be06 <_fflush_r+0x32>
 802be00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802be02:	f7ff fbdc 	bl	802b5be <__retarget_lock_acquire_recursive>
 802be06:	4628      	mov	r0, r5
 802be08:	4621      	mov	r1, r4
 802be0a:	f7ff ff5f 	bl	802bccc <__sflush_r>
 802be0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802be10:	07da      	lsls	r2, r3, #31
 802be12:	4605      	mov	r5, r0
 802be14:	d4e4      	bmi.n	802bde0 <_fflush_r+0xc>
 802be16:	89a3      	ldrh	r3, [r4, #12]
 802be18:	059b      	lsls	r3, r3, #22
 802be1a:	d4e1      	bmi.n	802bde0 <_fflush_r+0xc>
 802be1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802be1e:	f7ff fbcf 	bl	802b5c0 <__retarget_lock_release_recursive>
 802be22:	e7dd      	b.n	802bde0 <_fflush_r+0xc>

0802be24 <__swbuf_r>:
 802be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802be26:	460e      	mov	r6, r1
 802be28:	4614      	mov	r4, r2
 802be2a:	4605      	mov	r5, r0
 802be2c:	b118      	cbz	r0, 802be36 <__swbuf_r+0x12>
 802be2e:	6a03      	ldr	r3, [r0, #32]
 802be30:	b90b      	cbnz	r3, 802be36 <__swbuf_r+0x12>
 802be32:	f7ff fa15 	bl	802b260 <__sinit>
 802be36:	69a3      	ldr	r3, [r4, #24]
 802be38:	60a3      	str	r3, [r4, #8]
 802be3a:	89a3      	ldrh	r3, [r4, #12]
 802be3c:	071a      	lsls	r2, r3, #28
 802be3e:	d501      	bpl.n	802be44 <__swbuf_r+0x20>
 802be40:	6923      	ldr	r3, [r4, #16]
 802be42:	b943      	cbnz	r3, 802be56 <__swbuf_r+0x32>
 802be44:	4621      	mov	r1, r4
 802be46:	4628      	mov	r0, r5
 802be48:	f000 f82a 	bl	802bea0 <__swsetup_r>
 802be4c:	b118      	cbz	r0, 802be56 <__swbuf_r+0x32>
 802be4e:	f04f 37ff 	mov.w	r7, #4294967295
 802be52:	4638      	mov	r0, r7
 802be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802be56:	6823      	ldr	r3, [r4, #0]
 802be58:	6922      	ldr	r2, [r4, #16]
 802be5a:	1a98      	subs	r0, r3, r2
 802be5c:	6963      	ldr	r3, [r4, #20]
 802be5e:	b2f6      	uxtb	r6, r6
 802be60:	4283      	cmp	r3, r0
 802be62:	4637      	mov	r7, r6
 802be64:	dc05      	bgt.n	802be72 <__swbuf_r+0x4e>
 802be66:	4621      	mov	r1, r4
 802be68:	4628      	mov	r0, r5
 802be6a:	f7ff ffb3 	bl	802bdd4 <_fflush_r>
 802be6e:	2800      	cmp	r0, #0
 802be70:	d1ed      	bne.n	802be4e <__swbuf_r+0x2a>
 802be72:	68a3      	ldr	r3, [r4, #8]
 802be74:	3b01      	subs	r3, #1
 802be76:	60a3      	str	r3, [r4, #8]
 802be78:	6823      	ldr	r3, [r4, #0]
 802be7a:	1c5a      	adds	r2, r3, #1
 802be7c:	6022      	str	r2, [r4, #0]
 802be7e:	701e      	strb	r6, [r3, #0]
 802be80:	6962      	ldr	r2, [r4, #20]
 802be82:	1c43      	adds	r3, r0, #1
 802be84:	429a      	cmp	r2, r3
 802be86:	d004      	beq.n	802be92 <__swbuf_r+0x6e>
 802be88:	89a3      	ldrh	r3, [r4, #12]
 802be8a:	07db      	lsls	r3, r3, #31
 802be8c:	d5e1      	bpl.n	802be52 <__swbuf_r+0x2e>
 802be8e:	2e0a      	cmp	r6, #10
 802be90:	d1df      	bne.n	802be52 <__swbuf_r+0x2e>
 802be92:	4621      	mov	r1, r4
 802be94:	4628      	mov	r0, r5
 802be96:	f7ff ff9d 	bl	802bdd4 <_fflush_r>
 802be9a:	2800      	cmp	r0, #0
 802be9c:	d0d9      	beq.n	802be52 <__swbuf_r+0x2e>
 802be9e:	e7d6      	b.n	802be4e <__swbuf_r+0x2a>

0802bea0 <__swsetup_r>:
 802bea0:	b538      	push	{r3, r4, r5, lr}
 802bea2:	4b29      	ldr	r3, [pc, #164]	@ (802bf48 <__swsetup_r+0xa8>)
 802bea4:	4605      	mov	r5, r0
 802bea6:	6818      	ldr	r0, [r3, #0]
 802bea8:	460c      	mov	r4, r1
 802beaa:	b118      	cbz	r0, 802beb4 <__swsetup_r+0x14>
 802beac:	6a03      	ldr	r3, [r0, #32]
 802beae:	b90b      	cbnz	r3, 802beb4 <__swsetup_r+0x14>
 802beb0:	f7ff f9d6 	bl	802b260 <__sinit>
 802beb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802beb8:	0719      	lsls	r1, r3, #28
 802beba:	d422      	bmi.n	802bf02 <__swsetup_r+0x62>
 802bebc:	06da      	lsls	r2, r3, #27
 802bebe:	d407      	bmi.n	802bed0 <__swsetup_r+0x30>
 802bec0:	2209      	movs	r2, #9
 802bec2:	602a      	str	r2, [r5, #0]
 802bec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802bec8:	81a3      	strh	r3, [r4, #12]
 802beca:	f04f 30ff 	mov.w	r0, #4294967295
 802bece:	e033      	b.n	802bf38 <__swsetup_r+0x98>
 802bed0:	0758      	lsls	r0, r3, #29
 802bed2:	d512      	bpl.n	802befa <__swsetup_r+0x5a>
 802bed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802bed6:	b141      	cbz	r1, 802beea <__swsetup_r+0x4a>
 802bed8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802bedc:	4299      	cmp	r1, r3
 802bede:	d002      	beq.n	802bee6 <__swsetup_r+0x46>
 802bee0:	4628      	mov	r0, r5
 802bee2:	f7ff fbd9 	bl	802b698 <_free_r>
 802bee6:	2300      	movs	r3, #0
 802bee8:	6363      	str	r3, [r4, #52]	@ 0x34
 802beea:	89a3      	ldrh	r3, [r4, #12]
 802beec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802bef0:	81a3      	strh	r3, [r4, #12]
 802bef2:	2300      	movs	r3, #0
 802bef4:	6063      	str	r3, [r4, #4]
 802bef6:	6923      	ldr	r3, [r4, #16]
 802bef8:	6023      	str	r3, [r4, #0]
 802befa:	89a3      	ldrh	r3, [r4, #12]
 802befc:	f043 0308 	orr.w	r3, r3, #8
 802bf00:	81a3      	strh	r3, [r4, #12]
 802bf02:	6923      	ldr	r3, [r4, #16]
 802bf04:	b94b      	cbnz	r3, 802bf1a <__swsetup_r+0x7a>
 802bf06:	89a3      	ldrh	r3, [r4, #12]
 802bf08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802bf0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802bf10:	d003      	beq.n	802bf1a <__swsetup_r+0x7a>
 802bf12:	4621      	mov	r1, r4
 802bf14:	4628      	mov	r0, r5
 802bf16:	f000 f83f 	bl	802bf98 <__smakebuf_r>
 802bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bf1e:	f013 0201 	ands.w	r2, r3, #1
 802bf22:	d00a      	beq.n	802bf3a <__swsetup_r+0x9a>
 802bf24:	2200      	movs	r2, #0
 802bf26:	60a2      	str	r2, [r4, #8]
 802bf28:	6962      	ldr	r2, [r4, #20]
 802bf2a:	4252      	negs	r2, r2
 802bf2c:	61a2      	str	r2, [r4, #24]
 802bf2e:	6922      	ldr	r2, [r4, #16]
 802bf30:	b942      	cbnz	r2, 802bf44 <__swsetup_r+0xa4>
 802bf32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802bf36:	d1c5      	bne.n	802bec4 <__swsetup_r+0x24>
 802bf38:	bd38      	pop	{r3, r4, r5, pc}
 802bf3a:	0799      	lsls	r1, r3, #30
 802bf3c:	bf58      	it	pl
 802bf3e:	6962      	ldrpl	r2, [r4, #20]
 802bf40:	60a2      	str	r2, [r4, #8]
 802bf42:	e7f4      	b.n	802bf2e <__swsetup_r+0x8e>
 802bf44:	2000      	movs	r0, #0
 802bf46:	e7f7      	b.n	802bf38 <__swsetup_r+0x98>
 802bf48:	240000d8 	.word	0x240000d8

0802bf4c <__swhatbuf_r>:
 802bf4c:	b570      	push	{r4, r5, r6, lr}
 802bf4e:	460c      	mov	r4, r1
 802bf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bf54:	2900      	cmp	r1, #0
 802bf56:	b096      	sub	sp, #88	@ 0x58
 802bf58:	4615      	mov	r5, r2
 802bf5a:	461e      	mov	r6, r3
 802bf5c:	da0d      	bge.n	802bf7a <__swhatbuf_r+0x2e>
 802bf5e:	89a3      	ldrh	r3, [r4, #12]
 802bf60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802bf64:	f04f 0100 	mov.w	r1, #0
 802bf68:	bf14      	ite	ne
 802bf6a:	2340      	movne	r3, #64	@ 0x40
 802bf6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802bf70:	2000      	movs	r0, #0
 802bf72:	6031      	str	r1, [r6, #0]
 802bf74:	602b      	str	r3, [r5, #0]
 802bf76:	b016      	add	sp, #88	@ 0x58
 802bf78:	bd70      	pop	{r4, r5, r6, pc}
 802bf7a:	466a      	mov	r2, sp
 802bf7c:	f000 f848 	bl	802c010 <_fstat_r>
 802bf80:	2800      	cmp	r0, #0
 802bf82:	dbec      	blt.n	802bf5e <__swhatbuf_r+0x12>
 802bf84:	9901      	ldr	r1, [sp, #4]
 802bf86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802bf8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802bf8e:	4259      	negs	r1, r3
 802bf90:	4159      	adcs	r1, r3
 802bf92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802bf96:	e7eb      	b.n	802bf70 <__swhatbuf_r+0x24>

0802bf98 <__smakebuf_r>:
 802bf98:	898b      	ldrh	r3, [r1, #12]
 802bf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802bf9c:	079d      	lsls	r5, r3, #30
 802bf9e:	4606      	mov	r6, r0
 802bfa0:	460c      	mov	r4, r1
 802bfa2:	d507      	bpl.n	802bfb4 <__smakebuf_r+0x1c>
 802bfa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802bfa8:	6023      	str	r3, [r4, #0]
 802bfaa:	6123      	str	r3, [r4, #16]
 802bfac:	2301      	movs	r3, #1
 802bfae:	6163      	str	r3, [r4, #20]
 802bfb0:	b003      	add	sp, #12
 802bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bfb4:	ab01      	add	r3, sp, #4
 802bfb6:	466a      	mov	r2, sp
 802bfb8:	f7ff ffc8 	bl	802bf4c <__swhatbuf_r>
 802bfbc:	9f00      	ldr	r7, [sp, #0]
 802bfbe:	4605      	mov	r5, r0
 802bfc0:	4639      	mov	r1, r7
 802bfc2:	4630      	mov	r0, r6
 802bfc4:	f7ff f826 	bl	802b014 <_malloc_r>
 802bfc8:	b948      	cbnz	r0, 802bfde <__smakebuf_r+0x46>
 802bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bfce:	059a      	lsls	r2, r3, #22
 802bfd0:	d4ee      	bmi.n	802bfb0 <__smakebuf_r+0x18>
 802bfd2:	f023 0303 	bic.w	r3, r3, #3
 802bfd6:	f043 0302 	orr.w	r3, r3, #2
 802bfda:	81a3      	strh	r3, [r4, #12]
 802bfdc:	e7e2      	b.n	802bfa4 <__smakebuf_r+0xc>
 802bfde:	89a3      	ldrh	r3, [r4, #12]
 802bfe0:	6020      	str	r0, [r4, #0]
 802bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802bfe6:	81a3      	strh	r3, [r4, #12]
 802bfe8:	9b01      	ldr	r3, [sp, #4]
 802bfea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802bfee:	b15b      	cbz	r3, 802c008 <__smakebuf_r+0x70>
 802bff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bff4:	4630      	mov	r0, r6
 802bff6:	f000 f81d 	bl	802c034 <_isatty_r>
 802bffa:	b128      	cbz	r0, 802c008 <__smakebuf_r+0x70>
 802bffc:	89a3      	ldrh	r3, [r4, #12]
 802bffe:	f023 0303 	bic.w	r3, r3, #3
 802c002:	f043 0301 	orr.w	r3, r3, #1
 802c006:	81a3      	strh	r3, [r4, #12]
 802c008:	89a3      	ldrh	r3, [r4, #12]
 802c00a:	431d      	orrs	r5, r3
 802c00c:	81a5      	strh	r5, [r4, #12]
 802c00e:	e7cf      	b.n	802bfb0 <__smakebuf_r+0x18>

0802c010 <_fstat_r>:
 802c010:	b538      	push	{r3, r4, r5, lr}
 802c012:	4d07      	ldr	r5, [pc, #28]	@ (802c030 <_fstat_r+0x20>)
 802c014:	2300      	movs	r3, #0
 802c016:	4604      	mov	r4, r0
 802c018:	4608      	mov	r0, r1
 802c01a:	4611      	mov	r1, r2
 802c01c:	602b      	str	r3, [r5, #0]
 802c01e:	f7d5 fc11 	bl	8001844 <_fstat>
 802c022:	1c43      	adds	r3, r0, #1
 802c024:	d102      	bne.n	802c02c <_fstat_r+0x1c>
 802c026:	682b      	ldr	r3, [r5, #0]
 802c028:	b103      	cbz	r3, 802c02c <_fstat_r+0x1c>
 802c02a:	6023      	str	r3, [r4, #0]
 802c02c:	bd38      	pop	{r3, r4, r5, pc}
 802c02e:	bf00      	nop
 802c030:	2400bb0c 	.word	0x2400bb0c

0802c034 <_isatty_r>:
 802c034:	b538      	push	{r3, r4, r5, lr}
 802c036:	4d06      	ldr	r5, [pc, #24]	@ (802c050 <_isatty_r+0x1c>)
 802c038:	2300      	movs	r3, #0
 802c03a:	4604      	mov	r4, r0
 802c03c:	4608      	mov	r0, r1
 802c03e:	602b      	str	r3, [r5, #0]
 802c040:	f7d5 fc10 	bl	8001864 <_isatty>
 802c044:	1c43      	adds	r3, r0, #1
 802c046:	d102      	bne.n	802c04e <_isatty_r+0x1a>
 802c048:	682b      	ldr	r3, [r5, #0]
 802c04a:	b103      	cbz	r3, 802c04e <_isatty_r+0x1a>
 802c04c:	6023      	str	r3, [r4, #0]
 802c04e:	bd38      	pop	{r3, r4, r5, pc}
 802c050:	2400bb0c 	.word	0x2400bb0c

0802c054 <_init>:
 802c054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c056:	bf00      	nop
 802c058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c05a:	bc08      	pop	{r3}
 802c05c:	469e      	mov	lr, r3
 802c05e:	4770      	bx	lr

0802c060 <_fini>:
 802c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c062:	bf00      	nop
 802c064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802c066:	bc08      	pop	{r3}
 802c068:	469e      	mov	lr, r3
 802c06a:	4770      	bx	lr
