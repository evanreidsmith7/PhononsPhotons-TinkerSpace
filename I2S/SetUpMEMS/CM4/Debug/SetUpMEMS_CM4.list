
SetUpMEMS_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0c4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0810c364  0810c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810c440  0810c440  0001c440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810c448  0810c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810c44c  0810c44c  0001c44c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  10000000  0810c450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  1000006c  0810c4bc  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  100000cc  0810c51c  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d84  1000012c  0810c57c  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10000eb0  0810c57c  00020eb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000270fc  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f13  00000000  00000000  0004729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c48  00000000  00000000  0004c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015bc  00000000  00000000  0004ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004125d  00000000  00000000  0004f3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029dd9  00000000  00000000  00090611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00196f88  00000000  00000000  000ba3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fd4  00000000  00000000  00251374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00259348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000012c 	.word	0x1000012c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810c34c 	.word	0x0810c34c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000130 	.word	0x10000130
 81002dc:	0810c34c 	.word	0x0810c34c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b970 	b.w	8100678 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9e08      	ldr	r6, [sp, #32]
 81003b6:	460d      	mov	r5, r1
 81003b8:	4604      	mov	r4, r0
 81003ba:	460f      	mov	r7, r1
 81003bc:	2b00      	cmp	r3, #0
 81003be:	d14a      	bne.n	8100456 <__udivmoddi4+0xa6>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4694      	mov	ip, r2
 81003c4:	d965      	bls.n	8100492 <__udivmoddi4+0xe2>
 81003c6:	fab2 f382 	clz	r3, r2
 81003ca:	b143      	cbz	r3, 81003de <__udivmoddi4+0x2e>
 81003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 81003d0:	f1c3 0220 	rsb	r2, r3, #32
 81003d4:	409f      	lsls	r7, r3
 81003d6:	fa20 f202 	lsr.w	r2, r0, r2
 81003da:	4317      	orrs	r7, r2
 81003dc:	409c      	lsls	r4, r3
 81003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 81003e2:	fa1f f58c 	uxth.w	r5, ip
 81003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 81003ea:	0c22      	lsrs	r2, r4, #16
 81003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 81003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 81003f4:	fb01 f005 	mul.w	r0, r1, r5
 81003f8:	4290      	cmp	r0, r2
 81003fa:	d90a      	bls.n	8100412 <__udivmoddi4+0x62>
 81003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8100400:	f101 37ff 	add.w	r7, r1, #4294967295
 8100404:	f080 811c 	bcs.w	8100640 <__udivmoddi4+0x290>
 8100408:	4290      	cmp	r0, r2
 810040a:	f240 8119 	bls.w	8100640 <__udivmoddi4+0x290>
 810040e:	3902      	subs	r1, #2
 8100410:	4462      	add	r2, ip
 8100412:	1a12      	subs	r2, r2, r0
 8100414:	b2a4      	uxth	r4, r4
 8100416:	fbb2 f0fe 	udiv	r0, r2, lr
 810041a:	fb0e 2210 	mls	r2, lr, r0, r2
 810041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100422:	fb00 f505 	mul.w	r5, r0, r5
 8100426:	42a5      	cmp	r5, r4
 8100428:	d90a      	bls.n	8100440 <__udivmoddi4+0x90>
 810042a:	eb1c 0404 	adds.w	r4, ip, r4
 810042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8100432:	f080 8107 	bcs.w	8100644 <__udivmoddi4+0x294>
 8100436:	42a5      	cmp	r5, r4
 8100438:	f240 8104 	bls.w	8100644 <__udivmoddi4+0x294>
 810043c:	4464      	add	r4, ip
 810043e:	3802      	subs	r0, #2
 8100440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100444:	1b64      	subs	r4, r4, r5
 8100446:	2100      	movs	r1, #0
 8100448:	b11e      	cbz	r6, 8100452 <__udivmoddi4+0xa2>
 810044a:	40dc      	lsrs	r4, r3
 810044c:	2300      	movs	r3, #0
 810044e:	e9c6 4300 	strd	r4, r3, [r6]
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	428b      	cmp	r3, r1
 8100458:	d908      	bls.n	810046c <__udivmoddi4+0xbc>
 810045a:	2e00      	cmp	r6, #0
 810045c:	f000 80ed 	beq.w	810063a <__udivmoddi4+0x28a>
 8100460:	2100      	movs	r1, #0
 8100462:	e9c6 0500 	strd	r0, r5, [r6]
 8100466:	4608      	mov	r0, r1
 8100468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046c:	fab3 f183 	clz	r1, r3
 8100470:	2900      	cmp	r1, #0
 8100472:	d149      	bne.n	8100508 <__udivmoddi4+0x158>
 8100474:	42ab      	cmp	r3, r5
 8100476:	d302      	bcc.n	810047e <__udivmoddi4+0xce>
 8100478:	4282      	cmp	r2, r0
 810047a:	f200 80f8 	bhi.w	810066e <__udivmoddi4+0x2be>
 810047e:	1a84      	subs	r4, r0, r2
 8100480:	eb65 0203 	sbc.w	r2, r5, r3
 8100484:	2001      	movs	r0, #1
 8100486:	4617      	mov	r7, r2
 8100488:	2e00      	cmp	r6, #0
 810048a:	d0e2      	beq.n	8100452 <__udivmoddi4+0xa2>
 810048c:	e9c6 4700 	strd	r4, r7, [r6]
 8100490:	e7df      	b.n	8100452 <__udivmoddi4+0xa2>
 8100492:	b902      	cbnz	r2, 8100496 <__udivmoddi4+0xe6>
 8100494:	deff      	udf	#255	; 0xff
 8100496:	fab2 f382 	clz	r3, r2
 810049a:	2b00      	cmp	r3, #0
 810049c:	f040 8090 	bne.w	81005c0 <__udivmoddi4+0x210>
 81004a0:	1a8a      	subs	r2, r1, r2
 81004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004a6:	fa1f fe8c 	uxth.w	lr, ip
 81004aa:	2101      	movs	r1, #1
 81004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 81004b0:	fb07 2015 	mls	r0, r7, r5, r2
 81004b4:	0c22      	lsrs	r2, r4, #16
 81004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 81004ba:	fb0e f005 	mul.w	r0, lr, r5
 81004be:	4290      	cmp	r0, r2
 81004c0:	d908      	bls.n	81004d4 <__udivmoddi4+0x124>
 81004c2:	eb1c 0202 	adds.w	r2, ip, r2
 81004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 81004ca:	d202      	bcs.n	81004d2 <__udivmoddi4+0x122>
 81004cc:	4290      	cmp	r0, r2
 81004ce:	f200 80cb 	bhi.w	8100668 <__udivmoddi4+0x2b8>
 81004d2:	4645      	mov	r5, r8
 81004d4:	1a12      	subs	r2, r2, r0
 81004d6:	b2a4      	uxth	r4, r4
 81004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 81004dc:	fb07 2210 	mls	r2, r7, r0, r2
 81004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 81004e4:	fb0e fe00 	mul.w	lr, lr, r0
 81004e8:	45a6      	cmp	lr, r4
 81004ea:	d908      	bls.n	81004fe <__udivmoddi4+0x14e>
 81004ec:	eb1c 0404 	adds.w	r4, ip, r4
 81004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 81004f4:	d202      	bcs.n	81004fc <__udivmoddi4+0x14c>
 81004f6:	45a6      	cmp	lr, r4
 81004f8:	f200 80bb 	bhi.w	8100672 <__udivmoddi4+0x2c2>
 81004fc:	4610      	mov	r0, r2
 81004fe:	eba4 040e 	sub.w	r4, r4, lr
 8100502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100506:	e79f      	b.n	8100448 <__udivmoddi4+0x98>
 8100508:	f1c1 0720 	rsb	r7, r1, #32
 810050c:	408b      	lsls	r3, r1
 810050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100512:	ea4c 0c03 	orr.w	ip, ip, r3
 8100516:	fa05 f401 	lsl.w	r4, r5, r1
 810051a:	fa20 f307 	lsr.w	r3, r0, r7
 810051e:	40fd      	lsrs	r5, r7
 8100520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100524:	4323      	orrs	r3, r4
 8100526:	fbb5 f8f9 	udiv	r8, r5, r9
 810052a:	fa1f fe8c 	uxth.w	lr, ip
 810052e:	fb09 5518 	mls	r5, r9, r8, r5
 8100532:	0c1c      	lsrs	r4, r3, #16
 8100534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100538:	fb08 f50e 	mul.w	r5, r8, lr
 810053c:	42a5      	cmp	r5, r4
 810053e:	fa02 f201 	lsl.w	r2, r2, r1
 8100542:	fa00 f001 	lsl.w	r0, r0, r1
 8100546:	d90b      	bls.n	8100560 <__udivmoddi4+0x1b0>
 8100548:	eb1c 0404 	adds.w	r4, ip, r4
 810054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100550:	f080 8088 	bcs.w	8100664 <__udivmoddi4+0x2b4>
 8100554:	42a5      	cmp	r5, r4
 8100556:	f240 8085 	bls.w	8100664 <__udivmoddi4+0x2b4>
 810055a:	f1a8 0802 	sub.w	r8, r8, #2
 810055e:	4464      	add	r4, ip
 8100560:	1b64      	subs	r4, r4, r5
 8100562:	b29d      	uxth	r5, r3
 8100564:	fbb4 f3f9 	udiv	r3, r4, r9
 8100568:	fb09 4413 	mls	r4, r9, r3, r4
 810056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100570:	fb03 fe0e 	mul.w	lr, r3, lr
 8100574:	45a6      	cmp	lr, r4
 8100576:	d908      	bls.n	810058a <__udivmoddi4+0x1da>
 8100578:	eb1c 0404 	adds.w	r4, ip, r4
 810057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8100580:	d26c      	bcs.n	810065c <__udivmoddi4+0x2ac>
 8100582:	45a6      	cmp	lr, r4
 8100584:	d96a      	bls.n	810065c <__udivmoddi4+0x2ac>
 8100586:	3b02      	subs	r3, #2
 8100588:	4464      	add	r4, ip
 810058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810058e:	fba3 9502 	umull	r9, r5, r3, r2
 8100592:	eba4 040e 	sub.w	r4, r4, lr
 8100596:	42ac      	cmp	r4, r5
 8100598:	46c8      	mov	r8, r9
 810059a:	46ae      	mov	lr, r5
 810059c:	d356      	bcc.n	810064c <__udivmoddi4+0x29c>
 810059e:	d053      	beq.n	8100648 <__udivmoddi4+0x298>
 81005a0:	b156      	cbz	r6, 81005b8 <__udivmoddi4+0x208>
 81005a2:	ebb0 0208 	subs.w	r2, r0, r8
 81005a6:	eb64 040e 	sbc.w	r4, r4, lr
 81005aa:	fa04 f707 	lsl.w	r7, r4, r7
 81005ae:	40ca      	lsrs	r2, r1
 81005b0:	40cc      	lsrs	r4, r1
 81005b2:	4317      	orrs	r7, r2
 81005b4:	e9c6 7400 	strd	r7, r4, [r6]
 81005b8:	4618      	mov	r0, r3
 81005ba:	2100      	movs	r1, #0
 81005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005c0:	f1c3 0120 	rsb	r1, r3, #32
 81005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 81005c8:	fa20 f201 	lsr.w	r2, r0, r1
 81005cc:	fa25 f101 	lsr.w	r1, r5, r1
 81005d0:	409d      	lsls	r5, r3
 81005d2:	432a      	orrs	r2, r5
 81005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005d8:	fa1f fe8c 	uxth.w	lr, ip
 81005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 81005e0:	fb07 1510 	mls	r5, r7, r0, r1
 81005e4:	0c11      	lsrs	r1, r2, #16
 81005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 81005ea:	fb00 f50e 	mul.w	r5, r0, lr
 81005ee:	428d      	cmp	r5, r1
 81005f0:	fa04 f403 	lsl.w	r4, r4, r3
 81005f4:	d908      	bls.n	8100608 <__udivmoddi4+0x258>
 81005f6:	eb1c 0101 	adds.w	r1, ip, r1
 81005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 81005fe:	d22f      	bcs.n	8100660 <__udivmoddi4+0x2b0>
 8100600:	428d      	cmp	r5, r1
 8100602:	d92d      	bls.n	8100660 <__udivmoddi4+0x2b0>
 8100604:	3802      	subs	r0, #2
 8100606:	4461      	add	r1, ip
 8100608:	1b49      	subs	r1, r1, r5
 810060a:	b292      	uxth	r2, r2
 810060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8100610:	fb07 1115 	mls	r1, r7, r5, r1
 8100614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100618:	fb05 f10e 	mul.w	r1, r5, lr
 810061c:	4291      	cmp	r1, r2
 810061e:	d908      	bls.n	8100632 <__udivmoddi4+0x282>
 8100620:	eb1c 0202 	adds.w	r2, ip, r2
 8100624:	f105 38ff 	add.w	r8, r5, #4294967295
 8100628:	d216      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 810062a:	4291      	cmp	r1, r2
 810062c:	d914      	bls.n	8100658 <__udivmoddi4+0x2a8>
 810062e:	3d02      	subs	r5, #2
 8100630:	4462      	add	r2, ip
 8100632:	1a52      	subs	r2, r2, r1
 8100634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8100638:	e738      	b.n	81004ac <__udivmoddi4+0xfc>
 810063a:	4631      	mov	r1, r6
 810063c:	4630      	mov	r0, r6
 810063e:	e708      	b.n	8100452 <__udivmoddi4+0xa2>
 8100640:	4639      	mov	r1, r7
 8100642:	e6e6      	b.n	8100412 <__udivmoddi4+0x62>
 8100644:	4610      	mov	r0, r2
 8100646:	e6fb      	b.n	8100440 <__udivmoddi4+0x90>
 8100648:	4548      	cmp	r0, r9
 810064a:	d2a9      	bcs.n	81005a0 <__udivmoddi4+0x1f0>
 810064c:	ebb9 0802 	subs.w	r8, r9, r2
 8100650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8100654:	3b01      	subs	r3, #1
 8100656:	e7a3      	b.n	81005a0 <__udivmoddi4+0x1f0>
 8100658:	4645      	mov	r5, r8
 810065a:	e7ea      	b.n	8100632 <__udivmoddi4+0x282>
 810065c:	462b      	mov	r3, r5
 810065e:	e794      	b.n	810058a <__udivmoddi4+0x1da>
 8100660:	4640      	mov	r0, r8
 8100662:	e7d1      	b.n	8100608 <__udivmoddi4+0x258>
 8100664:	46d0      	mov	r8, sl
 8100666:	e77b      	b.n	8100560 <__udivmoddi4+0x1b0>
 8100668:	3d02      	subs	r5, #2
 810066a:	4462      	add	r2, ip
 810066c:	e732      	b.n	81004d4 <__udivmoddi4+0x124>
 810066e:	4608      	mov	r0, r1
 8100670:	e70a      	b.n	8100488 <__udivmoddi4+0xd8>
 8100672:	4464      	add	r4, ip
 8100674:	3802      	subs	r0, #2
 8100676:	e742      	b.n	81004fe <__udivmoddi4+0x14e>

08100678 <__aeabi_idiv0>:
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop

0810067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810067c:	b480      	push	{r7}
 810067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100680:	4b09      	ldr	r3, [pc, #36]	; (81006a8 <SystemInit+0x2c>)
 8100682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100686:	4a08      	ldr	r2, [pc, #32]	; (81006a8 <SystemInit+0x2c>)
 8100688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100690:	4b05      	ldr	r3, [pc, #20]	; (81006a8 <SystemInit+0x2c>)
 8100692:	691b      	ldr	r3, [r3, #16]
 8100694:	4a04      	ldr	r2, [pc, #16]	; (81006a8 <SystemInit+0x2c>)
 8100696:	f043 0310 	orr.w	r3, r3, #16
 810069a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810069c:	bf00      	nop
 810069e:	46bd      	mov	sp, r7
 81006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a4:	4770      	bx	lr
 81006a6:	bf00      	nop
 81006a8:	e000ed00 	.word	0xe000ed00

081006ac <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 81006ac:	b580      	push	{r7, lr}
 81006ae:	b082      	sub	sp, #8
 81006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 81006b2:	4b0d      	ldr	r3, [pc, #52]	; (81006e8 <MX_BDMA_Init+0x3c>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b8:	4a0b      	ldr	r2, [pc, #44]	; (81006e8 <MX_BDMA_Init+0x3c>)
 81006ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006c2:	4b09      	ldr	r3, [pc, #36]	; (81006e8 <MX_BDMA_Init+0x3c>)
 81006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81006cc:	607b      	str	r3, [r7, #4]
 81006ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 81006d0:	2200      	movs	r2, #0
 81006d2:	2100      	movs	r1, #0
 81006d4:	2081      	movs	r0, #129	; 0x81
 81006d6:	f001 fee6 	bl	81024a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 81006da:	2081      	movs	r0, #129	; 0x81
 81006dc:	f001 fefd 	bl	81024da <HAL_NVIC_EnableIRQ>

}
 81006e0:	bf00      	nop
 81006e2:	3708      	adds	r7, #8
 81006e4:	46bd      	mov	sp, r7
 81006e6:	bd80      	pop	{r7, pc}
 81006e8:	58024400 	.word	0x58024400

081006ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 81006ec:	b580      	push	{r7, lr}
 81006ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81006f0:	4b1e      	ldr	r3, [pc, #120]	; (810076c <MX_ETH_Init+0x80>)
 81006f2:	4a1f      	ldr	r2, [pc, #124]	; (8100770 <MX_ETH_Init+0x84>)
 81006f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81006f6:	4b1f      	ldr	r3, [pc, #124]	; (8100774 <MX_ETH_Init+0x88>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81006fc:	4b1d      	ldr	r3, [pc, #116]	; (8100774 <MX_ETH_Init+0x88>)
 81006fe:	2280      	movs	r2, #128	; 0x80
 8100700:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100702:	4b1c      	ldr	r3, [pc, #112]	; (8100774 <MX_ETH_Init+0x88>)
 8100704:	22e1      	movs	r2, #225	; 0xe1
 8100706:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100708:	4b1a      	ldr	r3, [pc, #104]	; (8100774 <MX_ETH_Init+0x88>)
 810070a:	2200      	movs	r2, #0
 810070c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 810070e:	4b19      	ldr	r3, [pc, #100]	; (8100774 <MX_ETH_Init+0x88>)
 8100710:	2200      	movs	r2, #0
 8100712:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100714:	4b17      	ldr	r3, [pc, #92]	; (8100774 <MX_ETH_Init+0x88>)
 8100716:	2200      	movs	r2, #0
 8100718:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 810071a:	4b14      	ldr	r3, [pc, #80]	; (810076c <MX_ETH_Init+0x80>)
 810071c:	4a15      	ldr	r2, [pc, #84]	; (8100774 <MX_ETH_Init+0x88>)
 810071e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8100720:	4b12      	ldr	r3, [pc, #72]	; (810076c <MX_ETH_Init+0x80>)
 8100722:	2200      	movs	r2, #0
 8100724:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100726:	4b11      	ldr	r3, [pc, #68]	; (810076c <MX_ETH_Init+0x80>)
 8100728:	4a13      	ldr	r2, [pc, #76]	; (8100778 <MX_ETH_Init+0x8c>)
 810072a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 810072c:	4b0f      	ldr	r3, [pc, #60]	; (810076c <MX_ETH_Init+0x80>)
 810072e:	4a13      	ldr	r2, [pc, #76]	; (810077c <MX_ETH_Init+0x90>)
 8100730:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100732:	4b0e      	ldr	r3, [pc, #56]	; (810076c <MX_ETH_Init+0x80>)
 8100734:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8100738:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810073a:	480c      	ldr	r0, [pc, #48]	; (810076c <MX_ETH_Init+0x80>)
 810073c:	f003 ffde 	bl	81046fc <HAL_ETH_Init>
 8100740:	4603      	mov	r3, r0
 8100742:	2b00      	cmp	r3, #0
 8100744:	d001      	beq.n	810074a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100746:	f000 ff1b 	bl	8101580 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810074a:	2238      	movs	r2, #56	; 0x38
 810074c:	2100      	movs	r1, #0
 810074e:	480c      	ldr	r0, [pc, #48]	; (8100780 <MX_ETH_Init+0x94>)
 8100750:	f00b f864 	bl	810b81c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100754:	4b0a      	ldr	r3, [pc, #40]	; (8100780 <MX_ETH_Init+0x94>)
 8100756:	2221      	movs	r2, #33	; 0x21
 8100758:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810075a:	4b09      	ldr	r3, [pc, #36]	; (8100780 <MX_ETH_Init+0x94>)
 810075c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100760:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100762:	4b07      	ldr	r3, [pc, #28]	; (8100780 <MX_ETH_Init+0x94>)
 8100764:	2200      	movs	r2, #0
 8100766:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100768:	bf00      	nop
 810076a:	bd80      	pop	{r7, pc}
 810076c:	10000180 	.word	0x10000180
 8100770:	40028000 	.word	0x40028000
 8100774:	10000230 	.word	0x10000230
 8100778:	100000cc 	.word	0x100000cc
 810077c:	1000006c 	.word	0x1000006c
 8100780:	10000148 	.word	0x10000148

08100784 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8100784:	b580      	push	{r7, lr}
 8100786:	b092      	sub	sp, #72	; 0x48
 8100788:	af00      	add	r7, sp, #0
 810078a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810078c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100790:	2200      	movs	r2, #0
 8100792:	601a      	str	r2, [r3, #0]
 8100794:	605a      	str	r2, [r3, #4]
 8100796:	609a      	str	r2, [r3, #8]
 8100798:	60da      	str	r2, [r3, #12]
 810079a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 810079c:	687b      	ldr	r3, [r7, #4]
 810079e:	681b      	ldr	r3, [r3, #0]
 81007a0:	4a87      	ldr	r2, [pc, #540]	; (81009c0 <HAL_ETH_MspInit+0x23c>)
 81007a2:	4293      	cmp	r3, r2
 81007a4:	f040 8108 	bne.w	81009b8 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 81007a8:	4b86      	ldr	r3, [pc, #536]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007ae:	4a85      	ldr	r2, [pc, #532]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81007b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007b8:	4b82      	ldr	r3, [pc, #520]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81007c2:	633b      	str	r3, [r7, #48]	; 0x30
 81007c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 81007c6:	4b7f      	ldr	r3, [pc, #508]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007cc:	4a7d      	ldr	r2, [pc, #500]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81007d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007d6:	4b7b      	ldr	r3, [pc, #492]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 81007e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 81007e4:	4b77      	ldr	r3, [pc, #476]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007ea:	4a76      	ldr	r2, [pc, #472]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81007f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81007f4:	4b73      	ldr	r3, [pc, #460]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81007f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81007fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81007fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8100800:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8100802:	4b70      	ldr	r3, [pc, #448]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100808:	4a6e      	ldr	r2, [pc, #440]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810080e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100812:	4b6c      	ldr	r3, [pc, #432]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810081c:	627b      	str	r3, [r7, #36]	; 0x24
 810081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100820:	4b68      	ldr	r3, [pc, #416]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100826:	4a67      	ldr	r2, [pc, #412]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100828:	f043 0310 	orr.w	r3, r3, #16
 810082c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100830:	4b64      	ldr	r3, [pc, #400]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100836:	f003 0310 	and.w	r3, r3, #16
 810083a:	623b      	str	r3, [r7, #32]
 810083c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810083e:	4b61      	ldr	r3, [pc, #388]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100844:	4a5f      	ldr	r2, [pc, #380]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810084a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810084e:	4b5d      	ldr	r3, [pc, #372]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100858:	61fb      	str	r3, [r7, #28]
 810085a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810085c:	4b59      	ldr	r3, [pc, #356]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100862:	4a58      	ldr	r2, [pc, #352]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100864:	f043 0304 	orr.w	r3, r3, #4
 8100868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810086c:	4b55      	ldr	r3, [pc, #340]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810086e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100872:	f003 0304 	and.w	r3, r3, #4
 8100876:	61bb      	str	r3, [r7, #24]
 8100878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810087a:	4b52      	ldr	r3, [pc, #328]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100880:	4a50      	ldr	r2, [pc, #320]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 8100882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810088a:	4b4e      	ldr	r3, [pc, #312]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100894:	617b      	str	r3, [r7, #20]
 8100896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100898:	4b4a      	ldr	r3, [pc, #296]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 810089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810089e:	4a49      	ldr	r2, [pc, #292]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81008a0:	f043 0301 	orr.w	r3, r3, #1
 81008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008a8:	4b46      	ldr	r3, [pc, #280]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ae:	f003 0301 	and.w	r3, r3, #1
 81008b2:	613b      	str	r3, [r7, #16]
 81008b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008b6:	4b43      	ldr	r3, [pc, #268]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008bc:	4a41      	ldr	r2, [pc, #260]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81008be:	f043 0302 	orr.w	r3, r3, #2
 81008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008c6:	4b3f      	ldr	r3, [pc, #252]	; (81009c4 <HAL_ETH_MspInit+0x240>)
 81008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008cc:	f003 0302 	and.w	r3, r3, #2
 81008d0:	60fb      	str	r3, [r7, #12]
 81008d2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 81008d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81008d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008da:	2302      	movs	r3, #2
 81008dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008de:	2300      	movs	r3, #0
 81008e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008e2:	2300      	movs	r3, #0
 81008e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81008e6:	230b      	movs	r3, #11
 81008e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81008ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81008ee:	4619      	mov	r1, r3
 81008f0:	4835      	ldr	r0, [pc, #212]	; (81009c8 <HAL_ETH_MspInit+0x244>)
 81008f2:	f004 fe95 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 81008f6:	2304      	movs	r3, #4
 81008f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008fa:	2302      	movs	r3, #2
 81008fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008fe:	2300      	movs	r3, #0
 8100900:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100902:	2300      	movs	r3, #0
 8100904:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100906:	230b      	movs	r3, #11
 8100908:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 810090a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 810090e:	4619      	mov	r1, r3
 8100910:	482e      	ldr	r0, [pc, #184]	; (81009cc <HAL_ETH_MspInit+0x248>)
 8100912:	f004 fe85 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8100916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810091a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810091c:	2302      	movs	r3, #2
 810091e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100920:	2300      	movs	r3, #0
 8100922:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100924:	2300      	movs	r3, #0
 8100926:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100928:	230b      	movs	r3, #11
 810092a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 810092c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100930:	4619      	mov	r1, r3
 8100932:	4827      	ldr	r0, [pc, #156]	; (81009d0 <HAL_ETH_MspInit+0x24c>)
 8100934:	f004 fe74 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8100938:	233e      	movs	r3, #62	; 0x3e
 810093a:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810093c:	2302      	movs	r3, #2
 810093e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100940:	2300      	movs	r3, #0
 8100942:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100944:	2300      	movs	r3, #0
 8100946:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100948:	230b      	movs	r3, #11
 810094a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810094c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100950:	4619      	mov	r1, r3
 8100952:	4820      	ldr	r0, [pc, #128]	; (81009d4 <HAL_ETH_MspInit+0x250>)
 8100954:	f004 fe64 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8100958:	230c      	movs	r3, #12
 810095a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810095c:	2302      	movs	r3, #2
 810095e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100960:	2300      	movs	r3, #0
 8100962:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100964:	2300      	movs	r3, #0
 8100966:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100968:	230b      	movs	r3, #11
 810096a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810096c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100970:	4619      	mov	r1, r3
 8100972:	4819      	ldr	r0, [pc, #100]	; (81009d8 <HAL_ETH_MspInit+0x254>)
 8100974:	f004 fe54 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8100978:	2386      	movs	r3, #134	; 0x86
 810097a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810097c:	2302      	movs	r3, #2
 810097e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100980:	2300      	movs	r3, #0
 8100982:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100984:	2300      	movs	r3, #0
 8100986:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8100988:	230b      	movs	r3, #11
 810098a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810098c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8100990:	4619      	mov	r1, r3
 8100992:	4812      	ldr	r0, [pc, #72]	; (81009dc <HAL_ETH_MspInit+0x258>)
 8100994:	f004 fe44 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8100998:	2303      	movs	r3, #3
 810099a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810099c:	2302      	movs	r3, #2
 810099e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81009a0:	2300      	movs	r3, #0
 81009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81009a4:	2300      	movs	r3, #0
 81009a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81009a8:	230b      	movs	r3, #11
 81009aa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81009ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81009b0:	4619      	mov	r1, r3
 81009b2:	480b      	ldr	r0, [pc, #44]	; (81009e0 <HAL_ETH_MspInit+0x25c>)
 81009b4:	f004 fe34 	bl	8105620 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 81009b8:	bf00      	nop
 81009ba:	3748      	adds	r7, #72	; 0x48
 81009bc:	46bd      	mov	sp, r7
 81009be:	bd80      	pop	{r7, pc}
 81009c0:	40028000 	.word	0x40028000
 81009c4:	58024400 	.word	0x58024400
 81009c8:	58021800 	.word	0x58021800
 81009cc:	58021000 	.word	0x58021000
 81009d0:	58022000 	.word	0x58022000
 81009d4:	58020800 	.word	0x58020800
 81009d8:	58021c00 	.word	0x58021c00
 81009dc:	58020000 	.word	0x58020000
 81009e0:	58020400 	.word	0x58020400

081009e4 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 81009e4:	b580      	push	{r7, lr}
 81009e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 81009e8:	4b2e      	ldr	r3, [pc, #184]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 81009ea:	4a2f      	ldr	r2, [pc, #188]	; (8100aa8 <MX_FDCAN1_Init+0xc4>)
 81009ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 81009ee:	4b2d      	ldr	r3, [pc, #180]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 81009f0:	2200      	movs	r2, #0
 81009f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 81009f4:	4b2b      	ldr	r3, [pc, #172]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 81009f6:	2200      	movs	r2, #0
 81009f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 81009fa:	4b2a      	ldr	r3, [pc, #168]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 81009fc:	2200      	movs	r2, #0
 81009fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100a00:	4b28      	ldr	r3, [pc, #160]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a02:	2200      	movs	r2, #0
 8100a04:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8100a06:	4b27      	ldr	r3, [pc, #156]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a08:	2200      	movs	r2, #0
 8100a0a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8100a0c:	4b25      	ldr	r3, [pc, #148]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a0e:	2210      	movs	r2, #16
 8100a10:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8100a12:	4b24      	ldr	r3, [pc, #144]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a14:	2201      	movs	r2, #1
 8100a16:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8100a18:	4b22      	ldr	r3, [pc, #136]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a1a:	2202      	movs	r2, #2
 8100a1c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8100a1e:	4b21      	ldr	r3, [pc, #132]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a20:	2202      	movs	r2, #2
 8100a22:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8100a24:	4b1f      	ldr	r3, [pc, #124]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a26:	2201      	movs	r2, #1
 8100a28:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8100a2a:	4b1e      	ldr	r3, [pc, #120]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a2c:	2201      	movs	r2, #1
 8100a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8100a30:	4b1c      	ldr	r3, [pc, #112]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a32:	2201      	movs	r2, #1
 8100a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8100a36:	4b1b      	ldr	r3, [pc, #108]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a38:	2201      	movs	r2, #1
 8100a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8100a3c:	4b19      	ldr	r3, [pc, #100]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a3e:	2200      	movs	r2, #0
 8100a40:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8100a42:	4b18      	ldr	r3, [pc, #96]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a44:	2200      	movs	r2, #0
 8100a46:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8100a48:	4b16      	ldr	r3, [pc, #88]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a4a:	2200      	movs	r2, #0
 8100a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8100a4e:	4b15      	ldr	r3, [pc, #84]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a50:	2200      	movs	r2, #0
 8100a52:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100a54:	4b13      	ldr	r3, [pc, #76]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a56:	2204      	movs	r2, #4
 8100a58:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8100a5a:	4b12      	ldr	r3, [pc, #72]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a5c:	2200      	movs	r2, #0
 8100a5e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100a60:	4b10      	ldr	r3, [pc, #64]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a62:	2204      	movs	r2, #4
 8100a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8100a66:	4b0f      	ldr	r3, [pc, #60]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a68:	2200      	movs	r2, #0
 8100a6a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100a6c:	4b0d      	ldr	r3, [pc, #52]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a6e:	2204      	movs	r2, #4
 8100a70:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8100a72:	4b0c      	ldr	r3, [pc, #48]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a74:	2200      	movs	r2, #0
 8100a76:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8100a78:	4b0a      	ldr	r3, [pc, #40]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a7a:	2200      	movs	r2, #0
 8100a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8100a7e:	4b09      	ldr	r3, [pc, #36]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a80:	2200      	movs	r2, #0
 8100a82:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100a84:	4b07      	ldr	r3, [pc, #28]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a86:	2200      	movs	r2, #0
 8100a88:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100a8a:	4b06      	ldr	r3, [pc, #24]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a8c:	2204      	movs	r2, #4
 8100a8e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100a90:	4804      	ldr	r0, [pc, #16]	; (8100aa4 <MX_FDCAN1_Init+0xc0>)
 8100a92:	f004 fa57 	bl	8104f44 <HAL_FDCAN_Init>
 8100a96:	4603      	mov	r3, r0
 8100a98:	2b00      	cmp	r3, #0
 8100a9a:	d001      	beq.n	8100aa0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8100a9c:	f000 fd70 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8100aa0:	bf00      	nop
 8100aa2:	bd80      	pop	{r7, pc}
 8100aa4:	10000238 	.word	0x10000238
 8100aa8:	4000a000 	.word	0x4000a000

08100aac <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8100aac:	b580      	push	{r7, lr}
 8100aae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8100ab0:	4b2e      	ldr	r3, [pc, #184]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ab2:	4a2f      	ldr	r2, [pc, #188]	; (8100b70 <MX_FDCAN2_Init+0xc4>)
 8100ab4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8100ab6:	4b2d      	ldr	r3, [pc, #180]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ab8:	2200      	movs	r2, #0
 8100aba:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8100abc:	4b2b      	ldr	r3, [pc, #172]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100abe:	2200      	movs	r2, #0
 8100ac0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8100ac2:	4b2a      	ldr	r3, [pc, #168]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ac4:	2200      	movs	r2, #0
 8100ac6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8100ac8:	4b28      	ldr	r3, [pc, #160]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100aca:	2200      	movs	r2, #0
 8100acc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8100ace:	4b27      	ldr	r3, [pc, #156]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ad0:	2200      	movs	r2, #0
 8100ad2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8100ad4:	4b25      	ldr	r3, [pc, #148]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ad6:	2210      	movs	r2, #16
 8100ad8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8100ada:	4b24      	ldr	r3, [pc, #144]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100adc:	2201      	movs	r2, #1
 8100ade:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8100ae0:	4b22      	ldr	r3, [pc, #136]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ae2:	2202      	movs	r2, #2
 8100ae4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8100ae6:	4b21      	ldr	r3, [pc, #132]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100ae8:	2202      	movs	r2, #2
 8100aea:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8100aec:	4b1f      	ldr	r3, [pc, #124]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100aee:	2201      	movs	r2, #1
 8100af0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8100af2:	4b1e      	ldr	r3, [pc, #120]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100af4:	2201      	movs	r2, #1
 8100af6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8100af8:	4b1c      	ldr	r3, [pc, #112]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100afa:	2201      	movs	r2, #1
 8100afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8100afe:	4b1b      	ldr	r3, [pc, #108]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b00:	2201      	movs	r2, #1
 8100b02:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8100b04:	4b19      	ldr	r3, [pc, #100]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8100b0a:	4b18      	ldr	r3, [pc, #96]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b0c:	2200      	movs	r2, #0
 8100b0e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8100b10:	4b16      	ldr	r3, [pc, #88]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b12:	2200      	movs	r2, #0
 8100b14:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8100b16:	4b15      	ldr	r3, [pc, #84]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b18:	2200      	movs	r2, #0
 8100b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8100b1c:	4b13      	ldr	r3, [pc, #76]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b1e:	2204      	movs	r2, #4
 8100b20:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8100b22:	4b12      	ldr	r3, [pc, #72]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b24:	2200      	movs	r2, #0
 8100b26:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8100b28:	4b10      	ldr	r3, [pc, #64]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b2a:	2204      	movs	r2, #4
 8100b2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8100b2e:	4b0f      	ldr	r3, [pc, #60]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b30:	2200      	movs	r2, #0
 8100b32:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8100b34:	4b0d      	ldr	r3, [pc, #52]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b36:	2204      	movs	r2, #4
 8100b38:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8100b3a:	4b0c      	ldr	r3, [pc, #48]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b3c:	2200      	movs	r2, #0
 8100b3e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8100b40:	4b0a      	ldr	r3, [pc, #40]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b42:	2200      	movs	r2, #0
 8100b44:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8100b46:	4b09      	ldr	r3, [pc, #36]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b48:	2200      	movs	r2, #0
 8100b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100b4c:	4b07      	ldr	r3, [pc, #28]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b4e:	2200      	movs	r2, #0
 8100b50:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8100b52:	4b06      	ldr	r3, [pc, #24]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b54:	2204      	movs	r2, #4
 8100b56:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8100b58:	4804      	ldr	r0, [pc, #16]	; (8100b6c <MX_FDCAN2_Init+0xc0>)
 8100b5a:	f004 f9f3 	bl	8104f44 <HAL_FDCAN_Init>
 8100b5e:	4603      	mov	r3, r0
 8100b60:	2b00      	cmp	r3, #0
 8100b62:	d001      	beq.n	8100b68 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8100b64:	f000 fd0c 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8100b68:	bf00      	nop
 8100b6a:	bd80      	pop	{r7, pc}
 8100b6c:	100002d8 	.word	0x100002d8
 8100b70:	4000a400 	.word	0x4000a400

08100b74 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8100b74:	b580      	push	{r7, lr}
 8100b76:	b0bc      	sub	sp, #240	; 0xf0
 8100b78:	af00      	add	r7, sp, #0
 8100b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100b80:	2200      	movs	r2, #0
 8100b82:	601a      	str	r2, [r3, #0]
 8100b84:	605a      	str	r2, [r3, #4]
 8100b86:	609a      	str	r2, [r3, #8]
 8100b88:	60da      	str	r2, [r3, #12]
 8100b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100b8c:	f107 0318 	add.w	r3, r7, #24
 8100b90:	22c0      	movs	r2, #192	; 0xc0
 8100b92:	2100      	movs	r1, #0
 8100b94:	4618      	mov	r0, r3
 8100b96:	f00a fe41 	bl	810b81c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8100b9a:	687b      	ldr	r3, [r7, #4]
 8100b9c:	681b      	ldr	r3, [r3, #0]
 8100b9e:	4a57      	ldr	r2, [pc, #348]	; (8100cfc <HAL_FDCAN_MspInit+0x188>)
 8100ba0:	4293      	cmp	r3, r2
 8100ba2:	d151      	bne.n	8100c48 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8100ba4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100ba8:	f04f 0300 	mov.w	r3, #0
 8100bac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8100bb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8100bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100bb8:	f107 0318 	add.w	r3, r7, #24
 8100bbc:	4618      	mov	r0, r3
 8100bbe:	f005 fe09 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8100bc2:	4603      	mov	r3, r0
 8100bc4:	2b00      	cmp	r3, #0
 8100bc6:	d001      	beq.n	8100bcc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8100bc8:	f000 fcda 	bl	8101580 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100bcc:	4b4c      	ldr	r3, [pc, #304]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100bce:	681b      	ldr	r3, [r3, #0]
 8100bd0:	3301      	adds	r3, #1
 8100bd2:	4a4b      	ldr	r2, [pc, #300]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100bd4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100bd6:	4b4a      	ldr	r3, [pc, #296]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100bd8:	681b      	ldr	r3, [r3, #0]
 8100bda:	2b01      	cmp	r3, #1
 8100bdc:	d10e      	bne.n	8100bfc <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100bde:	4b49      	ldr	r3, [pc, #292]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100be0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100be4:	4a47      	ldr	r2, [pc, #284]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100bea:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8100bee:	4b45      	ldr	r3, [pc, #276]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100bf0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100bf8:	617b      	str	r3, [r7, #20]
 8100bfa:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8100bfc:	4b41      	ldr	r3, [pc, #260]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c02:	4a40      	ldr	r2, [pc, #256]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c0c:	4b3d      	ldr	r3, [pc, #244]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100c16:	613b      	str	r3, [r7, #16]
 8100c18:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN2_RXH14_Pin|FDCAN1_TX_Pin;
 8100c1a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8100c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c22:	2302      	movs	r3, #2
 8100c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c28:	2300      	movs	r3, #0
 8100c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c2e:	2300      	movs	r3, #0
 8100c30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8100c34:	2309      	movs	r3, #9
 8100c36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100c3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100c3e:	4619      	mov	r1, r3
 8100c40:	4831      	ldr	r0, [pc, #196]	; (8100d08 <HAL_FDCAN_MspInit+0x194>)
 8100c42:	f004 fced 	bl	8105620 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8100c46:	e055      	b.n	8100cf4 <HAL_FDCAN_MspInit+0x180>
  else if(fdcanHandle->Instance==FDCAN2)
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	681b      	ldr	r3, [r3, #0]
 8100c4c:	4a2f      	ldr	r2, [pc, #188]	; (8100d0c <HAL_FDCAN_MspInit+0x198>)
 8100c4e:	4293      	cmp	r3, r2
 8100c50:	d150      	bne.n	8100cf4 <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8100c52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8100c56:	f04f 0300 	mov.w	r3, #0
 8100c5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8100c5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8100c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100c66:	f107 0318 	add.w	r3, r7, #24
 8100c6a:	4618      	mov	r0, r3
 8100c6c:	f005 fdb2 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8100c70:	4603      	mov	r3, r0
 8100c72:	2b00      	cmp	r3, #0
 8100c74:	d001      	beq.n	8100c7a <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8100c76:	f000 fc83 	bl	8101580 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8100c7a:	4b21      	ldr	r3, [pc, #132]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100c7c:	681b      	ldr	r3, [r3, #0]
 8100c7e:	3301      	adds	r3, #1
 8100c80:	4a1f      	ldr	r2, [pc, #124]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8100c84:	4b1e      	ldr	r3, [pc, #120]	; (8100d00 <HAL_FDCAN_MspInit+0x18c>)
 8100c86:	681b      	ldr	r3, [r3, #0]
 8100c88:	2b01      	cmp	r3, #1
 8100c8a:	d10e      	bne.n	8100caa <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8100c8c:	4b1d      	ldr	r3, [pc, #116]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100c8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100c92:	4a1c      	ldr	r2, [pc, #112]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100c98:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8100c9c:	4b19      	ldr	r3, [pc, #100]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8100ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100ca6:	60fb      	str	r3, [r7, #12]
 8100ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100caa:	4b16      	ldr	r3, [pc, #88]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cb0:	4a14      	ldr	r2, [pc, #80]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100cb2:	f043 0302 	orr.w	r3, r3, #2
 8100cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cba:	4b12      	ldr	r3, [pc, #72]	; (8100d04 <HAL_FDCAN_MspInit+0x190>)
 8100cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc0:	f003 0302 	and.w	r3, r3, #2
 8100cc4:	60bb      	str	r3, [r7, #8]
 8100cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8100cc8:	f242 0320 	movw	r3, #8224	; 0x2020
 8100ccc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100cd0:	2302      	movs	r3, #2
 8100cd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cd6:	2300      	movs	r3, #0
 8100cd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100cdc:	2300      	movs	r3, #0
 8100cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8100ce2:	2309      	movs	r3, #9
 8100ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100ce8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100cec:	4619      	mov	r1, r3
 8100cee:	4808      	ldr	r0, [pc, #32]	; (8100d10 <HAL_FDCAN_MspInit+0x19c>)
 8100cf0:	f004 fc96 	bl	8105620 <HAL_GPIO_Init>
}
 8100cf4:	bf00      	nop
 8100cf6:	37f0      	adds	r7, #240	; 0xf0
 8100cf8:	46bd      	mov	sp, r7
 8100cfa:	bd80      	pop	{r7, pc}
 8100cfc:	4000a000 	.word	0x4000a000
 8100d00:	10000378 	.word	0x10000378
 8100d04:	58024400 	.word	0x58024400
 8100d08:	58021c00 	.word	0x58021c00
 8100d0c:	4000a400 	.word	0x4000a400
 8100d10:	58020400 	.word	0x58020400

08100d14 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b088      	sub	sp, #32
 8100d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8100d1a:	1d3b      	adds	r3, r7, #4
 8100d1c:	2200      	movs	r2, #0
 8100d1e:	601a      	str	r2, [r3, #0]
 8100d20:	605a      	str	r2, [r3, #4]
 8100d22:	609a      	str	r2, [r3, #8]
 8100d24:	60da      	str	r2, [r3, #12]
 8100d26:	611a      	str	r2, [r3, #16]
 8100d28:	615a      	str	r2, [r3, #20]
 8100d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8100d2c:	4b1e      	ldr	r3, [pc, #120]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d2e:	4a1f      	ldr	r2, [pc, #124]	; (8100dac <MX_FMC_Init+0x98>)
 8100d30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8100d32:	4b1d      	ldr	r3, [pc, #116]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d34:	2201      	movs	r2, #1
 8100d36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8100d38:	4b1b      	ldr	r3, [pc, #108]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d3a:	2200      	movs	r2, #0
 8100d3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8100d3e:	4b1a      	ldr	r3, [pc, #104]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d40:	2204      	movs	r2, #4
 8100d42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8100d44:	4b18      	ldr	r3, [pc, #96]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d46:	2210      	movs	r2, #16
 8100d48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8100d4a:	4b17      	ldr	r3, [pc, #92]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d4c:	2240      	movs	r2, #64	; 0x40
 8100d4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8100d50:	4b15      	ldr	r3, [pc, #84]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d52:	2280      	movs	r2, #128	; 0x80
 8100d54:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8100d56:	4b14      	ldr	r3, [pc, #80]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d58:	2200      	movs	r2, #0
 8100d5a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8100d5c:	4b12      	ldr	r3, [pc, #72]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d5e:	2200      	movs	r2, #0
 8100d60:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8100d62:	4b11      	ldr	r3, [pc, #68]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d64:	2200      	movs	r2, #0
 8100d66:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8100d68:	4b0f      	ldr	r3, [pc, #60]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8100d6e:	2310      	movs	r3, #16
 8100d70:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8100d72:	2310      	movs	r3, #16
 8100d74:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8100d76:	2310      	movs	r3, #16
 8100d78:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8100d7a:	2310      	movs	r3, #16
 8100d7c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8100d7e:	2310      	movs	r3, #16
 8100d80:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8100d82:	2310      	movs	r3, #16
 8100d84:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8100d86:	2310      	movs	r3, #16
 8100d88:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8100d8a:	1d3b      	adds	r3, r7, #4
 8100d8c:	4619      	mov	r1, r3
 8100d8e:	4806      	ldr	r0, [pc, #24]	; (8100da8 <MX_FMC_Init+0x94>)
 8100d90:	f008 fe5c 	bl	8109a4c <HAL_SDRAM_Init>
 8100d94:	4603      	mov	r3, r0
 8100d96:	2b00      	cmp	r3, #0
 8100d98:	d001      	beq.n	8100d9e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8100d9a:	f000 fbf1 	bl	8101580 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8100d9e:	bf00      	nop
 8100da0:	3720      	adds	r7, #32
 8100da2:	46bd      	mov	sp, r7
 8100da4:	bd80      	pop	{r7, pc}
 8100da6:	bf00      	nop
 8100da8:	1000037c 	.word	0x1000037c
 8100dac:	52004140 	.word	0x52004140

08100db0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8100db0:	b580      	push	{r7, lr}
 8100db2:	b0b8      	sub	sp, #224	; 0xe0
 8100db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100db6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100dba:	2200      	movs	r2, #0
 8100dbc:	601a      	str	r2, [r3, #0]
 8100dbe:	605a      	str	r2, [r3, #4]
 8100dc0:	609a      	str	r2, [r3, #8]
 8100dc2:	60da      	str	r2, [r3, #12]
 8100dc4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8100dc6:	4b51      	ldr	r3, [pc, #324]	; (8100f0c <HAL_FMC_MspInit+0x15c>)
 8100dc8:	681b      	ldr	r3, [r3, #0]
 8100dca:	2b00      	cmp	r3, #0
 8100dcc:	f040 8099 	bne.w	8100f02 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8100dd0:	4b4e      	ldr	r3, [pc, #312]	; (8100f0c <HAL_FMC_MspInit+0x15c>)
 8100dd2:	2201      	movs	r2, #1
 8100dd4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dd6:	f107 0308 	add.w	r3, r7, #8
 8100dda:	22c0      	movs	r2, #192	; 0xc0
 8100ddc:	2100      	movs	r1, #0
 8100dde:	4618      	mov	r0, r3
 8100de0:	f00a fd1c 	bl	810b81c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8100de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8100de8:	f04f 0300 	mov.w	r3, #0
 8100dec:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8100df0:	2300      	movs	r3, #0
 8100df2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100df4:	f107 0308 	add.w	r3, r7, #8
 8100df8:	4618      	mov	r0, r3
 8100dfa:	f005 fceb 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8100dfe:	4603      	mov	r3, r0
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d001      	beq.n	8100e08 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8100e04:	f000 fbbc 	bl	8101580 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8100e08:	4b41      	ldr	r3, [pc, #260]	; (8100f10 <HAL_FMC_MspInit+0x160>)
 8100e0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100e0e:	4a40      	ldr	r2, [pc, #256]	; (8100f10 <HAL_FMC_MspInit+0x160>)
 8100e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8100e14:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100e18:	4b3d      	ldr	r3, [pc, #244]	; (8100f10 <HAL_FMC_MspInit+0x160>)
 8100e1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8100e22:	607b      	str	r3, [r7, #4]
 8100e24:	687b      	ldr	r3, [r7, #4]
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8100e26:	f64f 7383 	movw	r3, #65411	; 0xff83
 8100e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e2e:	2302      	movs	r3, #2
 8100e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e34:	2300      	movs	r3, #0
 8100e36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e3a:	2303      	movs	r3, #3
 8100e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e40:	230c      	movs	r3, #12
 8100e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100e46:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e4a:	4619      	mov	r1, r3
 8100e4c:	4831      	ldr	r0, [pc, #196]	; (8100f14 <HAL_FMC_MspInit+0x164>)
 8100e4e:	f004 fbe7 	bl	8105620 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8100e52:	f248 1333 	movw	r3, #33075	; 0x8133
 8100e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e5a:	2302      	movs	r3, #2
 8100e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e60:	2300      	movs	r3, #0
 8100e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e66:	2303      	movs	r3, #3
 8100e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e6c:	230c      	movs	r3, #12
 8100e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100e72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e76:	4619      	mov	r1, r3
 8100e78:	4827      	ldr	r0, [pc, #156]	; (8100f18 <HAL_FMC_MspInit+0x168>)
 8100e7a:	f004 fbd1 	bl	8105620 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8100e7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8100e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e86:	2302      	movs	r3, #2
 8100e88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e8c:	2300      	movs	r3, #0
 8100e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100e92:	2303      	movs	r3, #3
 8100e94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100e98:	230c      	movs	r3, #12
 8100e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100e9e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ea2:	4619      	mov	r1, r3
 8100ea4:	481d      	ldr	r0, [pc, #116]	; (8100f1c <HAL_FMC_MspInit+0x16c>)
 8100ea6:	f004 fbbb 	bl	8105620 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8100eaa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8100eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100eb2:	2302      	movs	r3, #2
 8100eb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100eb8:	2300      	movs	r3, #0
 8100eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ebe:	2303      	movs	r3, #3
 8100ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100ec4:	230c      	movs	r3, #12
 8100ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100eca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ece:	4619      	mov	r1, r3
 8100ed0:	4813      	ldr	r0, [pc, #76]	; (8100f20 <HAL_FMC_MspInit+0x170>)
 8100ed2:	f004 fba5 	bl	8105620 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8100ed6:	23e0      	movs	r3, #224	; 0xe0
 8100ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100edc:	2302      	movs	r3, #2
 8100ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ee2:	2300      	movs	r3, #0
 8100ee4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8100ee8:	2303      	movs	r3, #3
 8100eea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8100eee:	230c      	movs	r3, #12
 8100ef0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8100ef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100ef8:	4619      	mov	r1, r3
 8100efa:	480a      	ldr	r0, [pc, #40]	; (8100f24 <HAL_FMC_MspInit+0x174>)
 8100efc:	f004 fb90 	bl	8105620 <HAL_GPIO_Init>
 8100f00:	e000      	b.n	8100f04 <HAL_FMC_MspInit+0x154>
    return;
 8100f02:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8100f04:	37e0      	adds	r7, #224	; 0xe0
 8100f06:	46bd      	mov	sp, r7
 8100f08:	bd80      	pop	{r7, pc}
 8100f0a:	bf00      	nop
 8100f0c:	100003b0 	.word	0x100003b0
 8100f10:	58024400 	.word	0x58024400
 8100f14:	58021000 	.word	0x58021000
 8100f18:	58021800 	.word	0x58021800
 8100f1c:	58020c00 	.word	0x58020c00
 8100f20:	58021400 	.word	0x58021400
 8100f24:	58021c00 	.word	0x58021c00

08100f28 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8100f28:	b580      	push	{r7, lr}
 8100f2a:	b082      	sub	sp, #8
 8100f2c:	af00      	add	r7, sp, #0
 8100f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8100f30:	f7ff ff3e 	bl	8100db0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8100f34:	bf00      	nop
 8100f36:	3708      	adds	r7, #8
 8100f38:	46bd      	mov	sp, r7
 8100f3a:	bd80      	pop	{r7, pc}

08100f3c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8100f3c:	b480      	push	{r7}
 8100f3e:	b08d      	sub	sp, #52	; 0x34
 8100f40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8100f42:	4b55      	ldr	r3, [pc, #340]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f48:	4a53      	ldr	r2, [pc, #332]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8100f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f52:	4b51      	ldr	r3, [pc, #324]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8100f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8100f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f60:	4b4d      	ldr	r3, [pc, #308]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f66:	4a4c      	ldr	r2, [pc, #304]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f68:	f043 0302 	orr.w	r3, r3, #2
 8100f6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f70:	4b49      	ldr	r3, [pc, #292]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f76:	f003 0302 	and.w	r3, r3, #2
 8100f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8100f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100f7e:	4b46      	ldr	r3, [pc, #280]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f84:	4a44      	ldr	r2, [pc, #272]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f8e:	4b42      	ldr	r3, [pc, #264]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8100f98:	627b      	str	r3, [r7, #36]	; 0x24
 8100f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100f9c:	4b3e      	ldr	r3, [pc, #248]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fa2:	4a3d      	ldr	r2, [pc, #244]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fac:	4b3a      	ldr	r3, [pc, #232]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100fb6:	623b      	str	r3, [r7, #32]
 8100fb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100fba:	4b37      	ldr	r3, [pc, #220]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fc0:	4a35      	ldr	r2, [pc, #212]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fc2:	f043 0310 	orr.w	r3, r3, #16
 8100fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fca:	4b33      	ldr	r3, [pc, #204]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fd0:	f003 0310 	and.w	r3, r3, #16
 8100fd4:	61fb      	str	r3, [r7, #28]
 8100fd6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100fd8:	4b2f      	ldr	r3, [pc, #188]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fde:	4a2e      	ldr	r2, [pc, #184]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fe8:	4b2b      	ldr	r3, [pc, #172]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100ff2:	61bb      	str	r3, [r7, #24]
 8100ff4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ff6:	4b28      	ldr	r3, [pc, #160]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ffc:	4a26      	ldr	r2, [pc, #152]	; (8101098 <MX_GPIO_Init+0x15c>)
 8100ffe:	f043 0308 	orr.w	r3, r3, #8
 8101002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101006:	4b24      	ldr	r3, [pc, #144]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810100c:	f003 0308 	and.w	r3, r3, #8
 8101010:	617b      	str	r3, [r7, #20]
 8101012:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8101014:	4b20      	ldr	r3, [pc, #128]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810101a:	4a1f      	ldr	r2, [pc, #124]	; (8101098 <MX_GPIO_Init+0x15c>)
 810101c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101024:	4b1c      	ldr	r3, [pc, #112]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810102e:	613b      	str	r3, [r7, #16]
 8101030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101032:	4b19      	ldr	r3, [pc, #100]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101038:	4a17      	ldr	r2, [pc, #92]	; (8101098 <MX_GPIO_Init+0x15c>)
 810103a:	f043 0301 	orr.w	r3, r3, #1
 810103e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101042:	4b15      	ldr	r3, [pc, #84]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101048:	f003 0301 	and.w	r3, r3, #1
 810104c:	60fb      	str	r3, [r7, #12]
 810104e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8101050:	4b11      	ldr	r3, [pc, #68]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101056:	4a10      	ldr	r2, [pc, #64]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101058:	f043 0320 	orr.w	r3, r3, #32
 810105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101060:	4b0d      	ldr	r3, [pc, #52]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101066:	f003 0320 	and.w	r3, r3, #32
 810106a:	60bb      	str	r3, [r7, #8]
 810106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810106e:	4b0a      	ldr	r3, [pc, #40]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101074:	4a08      	ldr	r2, [pc, #32]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101076:	f043 0304 	orr.w	r3, r3, #4
 810107a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810107e:	4b06      	ldr	r3, [pc, #24]	; (8101098 <MX_GPIO_Init+0x15c>)
 8101080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101084:	f003 0304 	and.w	r3, r3, #4
 8101088:	607b      	str	r3, [r7, #4]
 810108a:	687b      	ldr	r3, [r7, #4]

}
 810108c:	bf00      	nop
 810108e:	3734      	adds	r7, #52	; 0x34
 8101090:	46bd      	mov	sp, r7
 8101092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101096:	4770      	bx	lr
 8101098:	58024400 	.word	0x58024400

0810109c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 810109c:	b580      	push	{r7, lr}
 810109e:	b09a      	sub	sp, #104	; 0x68
 81010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 81010a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 81010a6:	2234      	movs	r2, #52	; 0x34
 81010a8:	2100      	movs	r1, #0
 81010aa:	4618      	mov	r0, r3
 81010ac:	f00a fbb6 	bl	810b81c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 81010b0:	463b      	mov	r3, r7
 81010b2:	2234      	movs	r2, #52	; 0x34
 81010b4:	2100      	movs	r1, #0
 81010b6:	4618      	mov	r0, r3
 81010b8:	f00a fbb0 	bl	810b81c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 81010bc:	4b4e      	ldr	r3, [pc, #312]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010be:	4a4f      	ldr	r2, [pc, #316]	; (81011fc <MX_LTDC_Init+0x160>)
 81010c0:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 81010c2:	4b4d      	ldr	r3, [pc, #308]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010c4:	2200      	movs	r2, #0
 81010c6:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 81010c8:	4b4b      	ldr	r3, [pc, #300]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010ca:	2200      	movs	r2, #0
 81010cc:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 81010ce:	4b4a      	ldr	r3, [pc, #296]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010d0:	2200      	movs	r2, #0
 81010d2:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 81010d4:	4b48      	ldr	r3, [pc, #288]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010d6:	2200      	movs	r2, #0
 81010d8:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 81010da:	4b47      	ldr	r3, [pc, #284]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010dc:	2207      	movs	r2, #7
 81010de:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 81010e0:	4b45      	ldr	r3, [pc, #276]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010e2:	2203      	movs	r2, #3
 81010e4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 81010e6:	4b44      	ldr	r3, [pc, #272]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010e8:	220e      	movs	r2, #14
 81010ea:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 81010ec:	4b42      	ldr	r3, [pc, #264]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010ee:	2205      	movs	r2, #5
 81010f0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 81010f2:	4b41      	ldr	r3, [pc, #260]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010f4:	f240 228e 	movw	r2, #654	; 0x28e
 81010f8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 81010fa:	4b3f      	ldr	r3, [pc, #252]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81010fc:	f240 12e5 	movw	r2, #485	; 0x1e5
 8101100:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8101102:	4b3d      	ldr	r3, [pc, #244]	; (81011f8 <MX_LTDC_Init+0x15c>)
 8101104:	f44f 7225 	mov.w	r2, #660	; 0x294
 8101108:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 810110a:	4b3b      	ldr	r3, [pc, #236]	; (81011f8 <MX_LTDC_Init+0x15c>)
 810110c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8101110:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8101112:	4b39      	ldr	r3, [pc, #228]	; (81011f8 <MX_LTDC_Init+0x15c>)
 8101114:	2200      	movs	r2, #0
 8101116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 810111a:	4b37      	ldr	r3, [pc, #220]	; (81011f8 <MX_LTDC_Init+0x15c>)
 810111c:	2200      	movs	r2, #0
 810111e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8101122:	4b35      	ldr	r3, [pc, #212]	; (81011f8 <MX_LTDC_Init+0x15c>)
 8101124:	2200      	movs	r2, #0
 8101126:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 810112a:	4833      	ldr	r0, [pc, #204]	; (81011f8 <MX_LTDC_Init+0x15c>)
 810112c:	f004 fc3a 	bl	81059a4 <HAL_LTDC_Init>
 8101130:	4603      	mov	r3, r0
 8101132:	2b00      	cmp	r3, #0
 8101134:	d001      	beq.n	810113a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8101136:	f000 fa23 	bl	8101580 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 810113a:	2300      	movs	r3, #0
 810113c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 810113e:	2300      	movs	r3, #0
 8101140:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8101142:	2300      	movs	r3, #0
 8101144:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8101146:	2300      	movs	r3, #0
 8101148:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 810114a:	2300      	movs	r3, #0
 810114c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 810114e:	2300      	movs	r3, #0
 8101150:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8101152:	2300      	movs	r3, #0
 8101154:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8101156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810115a:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 810115c:	2305      	movs	r3, #5
 810115e:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8101160:	2300      	movs	r3, #0
 8101162:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8101164:	2300      	movs	r3, #0
 8101166:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8101168:	2300      	movs	r3, #0
 810116a:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 810116c:	2300      	movs	r3, #0
 810116e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8101172:	2300      	movs	r3, #0
 8101174:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8101178:	2300      	movs	r3, #0
 810117a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 810117e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8101182:	2200      	movs	r2, #0
 8101184:	4619      	mov	r1, r3
 8101186:	481c      	ldr	r0, [pc, #112]	; (81011f8 <MX_LTDC_Init+0x15c>)
 8101188:	f004 fcdc 	bl	8105b44 <HAL_LTDC_ConfigLayer>
 810118c:	4603      	mov	r3, r0
 810118e:	2b00      	cmp	r3, #0
 8101190:	d001      	beq.n	8101196 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8101192:	f000 f9f5 	bl	8101580 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8101196:	2300      	movs	r3, #0
 8101198:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 810119a:	2300      	movs	r3, #0
 810119c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 810119e:	2300      	movs	r3, #0
 81011a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 81011a2:	2300      	movs	r3, #0
 81011a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 81011a6:	2300      	movs	r3, #0
 81011a8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 81011aa:	2300      	movs	r3, #0
 81011ac:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 81011ae:	2300      	movs	r3, #0
 81011b0:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 81011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81011b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 81011b8:	2305      	movs	r3, #5
 81011ba:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 81011bc:	2300      	movs	r3, #0
 81011be:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 81011c0:	2300      	movs	r3, #0
 81011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 81011c4:	2300      	movs	r3, #0
 81011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 81011c8:	2300      	movs	r3, #0
 81011ca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 81011ce:	2300      	movs	r3, #0
 81011d0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 81011d4:	2300      	movs	r3, #0
 81011d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 81011da:	463b      	mov	r3, r7
 81011dc:	2201      	movs	r2, #1
 81011de:	4619      	mov	r1, r3
 81011e0:	4805      	ldr	r0, [pc, #20]	; (81011f8 <MX_LTDC_Init+0x15c>)
 81011e2:	f004 fcaf 	bl	8105b44 <HAL_LTDC_ConfigLayer>
 81011e6:	4603      	mov	r3, r0
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d001      	beq.n	81011f0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 81011ec:	f000 f9c8 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 81011f0:	bf00      	nop
 81011f2:	3768      	adds	r7, #104	; 0x68
 81011f4:	46bd      	mov	sp, r7
 81011f6:	bd80      	pop	{r7, pc}
 81011f8:	100003b4 	.word	0x100003b4
 81011fc:	50001000 	.word	0x50001000

08101200 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8101200:	b580      	push	{r7, lr}
 8101202:	b0be      	sub	sp, #248	; 0xf8
 8101204:	af00      	add	r7, sp, #0
 8101206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101208:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810120c:	2200      	movs	r2, #0
 810120e:	601a      	str	r2, [r3, #0]
 8101210:	605a      	str	r2, [r3, #4]
 8101212:	609a      	str	r2, [r3, #8]
 8101214:	60da      	str	r2, [r3, #12]
 8101216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101218:	f107 0320 	add.w	r3, r7, #32
 810121c:	22c0      	movs	r2, #192	; 0xc0
 810121e:	2100      	movs	r1, #0
 8101220:	4618      	mov	r0, r3
 8101222:	f00a fafb 	bl	810b81c <memset>
  if(ltdcHandle->Instance==LTDC)
 8101226:	687b      	ldr	r3, [r7, #4]
 8101228:	681b      	ldr	r3, [r3, #0]
 810122a:	4a66      	ldr	r2, [pc, #408]	; (81013c4 <HAL_LTDC_MspInit+0x1c4>)
 810122c:	4293      	cmp	r3, r2
 810122e:	f040 80c4 	bne.w	81013ba <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8101232:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101236:	f04f 0300 	mov.w	r3, #0
 810123a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 810123e:	2320      	movs	r3, #32
 8101240:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8101242:	23c0      	movs	r3, #192	; 0xc0
 8101244:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8101246:	2302      	movs	r3, #2
 8101248:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 810124a:	2302      	movs	r3, #2
 810124c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 810124e:	2302      	movs	r3, #2
 8101250:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8101252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101256:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8101258:	f44f 7300 	mov.w	r3, #512	; 0x200
 810125c:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 810125e:	2300      	movs	r3, #0
 8101260:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101262:	f107 0320 	add.w	r3, r7, #32
 8101266:	4618      	mov	r0, r3
 8101268:	f005 fab4 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 810126c:	4603      	mov	r3, r0
 810126e:	2b00      	cmp	r3, #0
 8101270:	d001      	beq.n	8101276 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8101272:	f000 f985 	bl	8101580 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8101276:	4b54      	ldr	r3, [pc, #336]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 8101278:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 810127c:	4a52      	ldr	r2, [pc, #328]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 810127e:	f043 0308 	orr.w	r3, r3, #8
 8101282:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8101286:	4b50      	ldr	r3, [pc, #320]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 8101288:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 810128c:	f003 0308 	and.w	r3, r3, #8
 8101290:	61fb      	str	r3, [r7, #28]
 8101292:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101294:	4b4c      	ldr	r3, [pc, #304]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 8101296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810129a:	4a4b      	ldr	r2, [pc, #300]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 810129c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 81012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012a4:	4b48      	ldr	r3, [pc, #288]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81012ae:	61bb      	str	r3, [r7, #24]
 81012b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 81012b2:	4b45      	ldr	r3, [pc, #276]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b8:	4a43      	ldr	r2, [pc, #268]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012c2:	4b41      	ldr	r3, [pc, #260]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81012cc:	617b      	str	r3, [r7, #20]
 81012ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81012d0:	4b3d      	ldr	r3, [pc, #244]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d6:	4a3c      	ldr	r2, [pc, #240]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012e0:	4b39      	ldr	r3, [pc, #228]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81012ea:	613b      	str	r3, [r7, #16]
 81012ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81012ee:	4b36      	ldr	r3, [pc, #216]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012f4:	4a34      	ldr	r2, [pc, #208]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 81012f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012fe:	4b32      	ldr	r3, [pc, #200]	; (81013c8 <HAL_LTDC_MspInit+0x1c8>)
 8101300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101308:	60fb      	str	r3, [r7, #12]
 810130a:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 810130c:	23fc      	movs	r3, #252	; 0xfc
 810130e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101312:	2302      	movs	r3, #2
 8101314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101318:	2300      	movs	r3, #0
 810131a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810131e:	2300      	movs	r3, #0
 8101320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101324:	230e      	movs	r3, #14
 8101326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810132a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810132e:	4619      	mov	r1, r3
 8101330:	4826      	ldr	r0, [pc, #152]	; (81013cc <HAL_LTDC_MspInit+0x1cc>)
 8101332:	f004 f975 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8101336:	f24d 2303 	movw	r3, #53763	; 0xd203
 810133a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810133e:	2302      	movs	r3, #2
 8101340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101344:	2300      	movs	r3, #0
 8101346:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810134a:	2300      	movs	r3, #0
 810134c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8101350:	230e      	movs	r3, #14
 8101352:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101356:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 810135a:	4619      	mov	r1, r3
 810135c:	481c      	ldr	r0, [pc, #112]	; (81013d0 <HAL_LTDC_MspInit+0x1d0>)
 810135e:	f004 f95f 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8101362:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8101366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810136a:	2302      	movs	r3, #2
 810136c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101370:	2300      	movs	r3, #0
 8101372:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101376:	2300      	movs	r3, #0
 8101378:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 810137c:	230e      	movs	r3, #14
 810137e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101382:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101386:	4619      	mov	r1, r3
 8101388:	4812      	ldr	r0, [pc, #72]	; (81013d4 <HAL_LTDC_MspInit+0x1d4>)
 810138a:	f004 f949 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 810138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101396:	2302      	movs	r3, #2
 8101398:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810139c:	2300      	movs	r3, #0
 810139e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013a2:	2300      	movs	r3, #0
 81013a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 81013a8:	230e      	movs	r3, #14
 81013aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81013ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 81013b2:	4619      	mov	r1, r3
 81013b4:	4808      	ldr	r0, [pc, #32]	; (81013d8 <HAL_LTDC_MspInit+0x1d8>)
 81013b6:	f004 f933 	bl	8105620 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 81013ba:	bf00      	nop
 81013bc:	37f8      	adds	r7, #248	; 0xf8
 81013be:	46bd      	mov	sp, r7
 81013c0:	bd80      	pop	{r7, pc}
 81013c2:	bf00      	nop
 81013c4:	50001000 	.word	0x50001000
 81013c8:	58024400 	.word	0x58024400
 81013cc:	58022800 	.word	0x58022800
 81013d0:	58022000 	.word	0x58022000
 81013d4:	58022400 	.word	0x58022400
 81013d8:	58021c00 	.word	0x58021c00

081013dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 81013dc:	b480      	push	{r7}
 81013de:	b083      	sub	sp, #12
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 81013e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81013e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 81013ec:	f003 0301 	and.w	r3, r3, #1
 81013f0:	2b00      	cmp	r3, #0
 81013f2:	d013      	beq.n	810141c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 81013f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 81013f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 81013fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8101400:	2b00      	cmp	r3, #0
 8101402:	d00b      	beq.n	810141c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8101404:	e000      	b.n	8101408 <ITM_SendChar+0x2c>
    {
      __NOP();
 8101406:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8101408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 810140c:	681b      	ldr	r3, [r3, #0]
 810140e:	2b00      	cmp	r3, #0
 8101410:	d0f9      	beq.n	8101406 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8101412:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8101416:	687a      	ldr	r2, [r7, #4]
 8101418:	b2d2      	uxtb	r2, r2
 810141a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 810141c:	687b      	ldr	r3, [r7, #4]
}
 810141e:	4618      	mov	r0, r3
 8101420:	370c      	adds	r7, #12
 8101422:	46bd      	mov	sp, r7
 8101424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101428:	4770      	bx	lr
	...

0810142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810142c:	b580      	push	{r7, lr}
 810142e:	b082      	sub	sp, #8
 8101430:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101432:	4b35      	ldr	r3, [pc, #212]	; (8101508 <main+0xdc>)
 8101434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101438:	4a33      	ldr	r2, [pc, #204]	; (8101508 <main+0xdc>)
 810143a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101442:	4b31      	ldr	r3, [pc, #196]	; (8101508 <main+0xdc>)
 8101444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810144c:	603b      	str	r3, [r7, #0]
 810144e:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101450:	2001      	movs	r0, #1
 8101452:	f004 fa95 	bl	8105980 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101456:	f004 ff0d 	bl	8106274 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810145a:	2201      	movs	r2, #1
 810145c:	2102      	movs	r1, #2
 810145e:	2000      	movs	r0, #0
 8101460:	f004 fe8e 	bl	8106180 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101464:	4b29      	ldr	r3, [pc, #164]	; (810150c <main+0xe0>)
 8101466:	681b      	ldr	r3, [r3, #0]
 8101468:	091b      	lsrs	r3, r3, #4
 810146a:	f003 030f 	and.w	r3, r3, #15
 810146e:	2b07      	cmp	r3, #7
 8101470:	d108      	bne.n	8101484 <main+0x58>
 8101472:	4b27      	ldr	r3, [pc, #156]	; (8101510 <main+0xe4>)
 8101474:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101478:	4a25      	ldr	r2, [pc, #148]	; (8101510 <main+0xe4>)
 810147a:	f043 0301 	orr.w	r3, r3, #1
 810147e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101482:	e007      	b.n	8101494 <main+0x68>
 8101484:	4b22      	ldr	r3, [pc, #136]	; (8101510 <main+0xe4>)
 8101486:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810148a:	4a21      	ldr	r2, [pc, #132]	; (8101510 <main+0xe4>)
 810148c:	f043 0301 	orr.w	r3, r3, #1
 8101490:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101494:	f000 fe34 	bl	8102100 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101498:	f7ff fd50 	bl	8100f3c <MX_GPIO_Init>
  MX_BDMA_Init();
 810149c:	f7ff f906 	bl	81006ac <MX_BDMA_Init>
  MX_FDCAN1_Init();
 81014a0:	f7ff faa0 	bl	81009e4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 81014a4:	f7ff fb02 	bl	8100aac <MX_FDCAN2_Init>
  MX_FMC_Init();
 81014a8:	f7ff fc34 	bl	8100d14 <MX_FMC_Init>
  MX_LTDC_Init();
 81014ac:	f7ff fdf6 	bl	810109c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 81014b0:	f000 f86c 	bl	810158c <MX_QUADSPI_Init>
  MX_SAI2_Init();
 81014b4:	f000 f962 	bl	810177c <MX_SAI2_Init>
  MX_ETH_Init();
 81014b8:	f7ff f918 	bl	81006ec <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 81014bc:	f000 fd48 	bl	8101f50 <MX_USB_OTG_FS_PCD_Init>
  MX_SAI4_Init();
 81014c0:	f000 fa1a 	bl	81018f8 <MX_SAI4_Init>
  MX_USART3_UART_Init();
 81014c4:	f000 fc8e 	bl	8101de4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 81014c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81014cc:	f000 fecc 	bl	8102268 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockA4, (uint8_t*)data_sai, sizeof(data_sai)/2);
 81014d0:	2264      	movs	r2, #100	; 0x64
 81014d2:	4910      	ldr	r1, [pc, #64]	; (8101514 <main+0xe8>)
 81014d4:	4810      	ldr	r0, [pc, #64]	; (8101518 <main+0xec>)
 81014d6:	f008 f925 	bl	8109724 <HAL_SAI_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 81014da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81014de:	f000 fec3 	bl	8102268 <HAL_Delay>
  while (1)
  {
	  if (HAL_SAI_GetError(&hsai_BlockA4) != HAL_SAI_ERROR_NONE)
 81014e2:	480d      	ldr	r0, [pc, #52]	; (8101518 <main+0xec>)
 81014e4:	f008 f9c6 	bl	8109874 <HAL_SAI_GetError>
 81014e8:	4603      	mov	r3, r0
 81014ea:	2b00      	cmp	r3, #0
 81014ec:	d008      	beq.n	8101500 <main+0xd4>
	  {
		  // Handle SAI errors here
		  unsigned int sair_error = HAL_SAI_GetError(&hsai_BlockA4);
 81014ee:	480a      	ldr	r0, [pc, #40]	; (8101518 <main+0xec>)
 81014f0:	f008 f9c0 	bl	8109874 <HAL_SAI_GetError>
 81014f4:	6078      	str	r0, [r7, #4]
		  // You can use the error code to identify the specific error condition
		  // or print it for debugging purposes.
		  printf("SAI Error: 0x%08X\n", sair_error);
 81014f6:	6879      	ldr	r1, [r7, #4]
 81014f8:	4808      	ldr	r0, [pc, #32]	; (810151c <main+0xf0>)
 81014fa:	f00a f849 	bl	810b590 <iprintf>
 81014fe:	e7f0      	b.n	81014e2 <main+0xb6>
		  // Clear the error flags if needed
		  //HAL_SAI_ClearError(&hsai_BlockA4);
	  }
	  else
	  {
		  printf("none\n");
 8101500:	4807      	ldr	r0, [pc, #28]	; (8101520 <main+0xf4>)
 8101502:	f00a f8ab 	bl	810b65c <puts>
	  if (HAL_SAI_GetError(&hsai_BlockA4) != HAL_SAI_ERROR_NONE)
 8101506:	e7ec      	b.n	81014e2 <main+0xb6>
 8101508:	58024400 	.word	0x58024400
 810150c:	e000ed00 	.word	0xe000ed00
 8101510:	58026400 	.word	0x58026400
 8101514:	1000045c 	.word	0x1000045c
 8101518:	100006a4 	.word	0x100006a4
 810151c:	0810c364 	.word	0x0810c364
 8101520:	0810c378 	.word	0x0810c378

08101524 <_write>:
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	b086      	sub	sp, #24
 8101528:	af00      	add	r7, sp, #0
 810152a:	60f8      	str	r0, [r7, #12]
 810152c:	60b9      	str	r1, [r7, #8]
 810152e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101530:	2300      	movs	r3, #0
 8101532:	617b      	str	r3, [r7, #20]
 8101534:	e009      	b.n	810154a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8101536:	68bb      	ldr	r3, [r7, #8]
 8101538:	1c5a      	adds	r2, r3, #1
 810153a:	60ba      	str	r2, [r7, #8]
 810153c:	781b      	ldrb	r3, [r3, #0]
 810153e:	4618      	mov	r0, r3
 8101540:	f7ff ff4c 	bl	81013dc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101544:	697b      	ldr	r3, [r7, #20]
 8101546:	3301      	adds	r3, #1
 8101548:	617b      	str	r3, [r7, #20]
 810154a:	697a      	ldr	r2, [r7, #20]
 810154c:	687b      	ldr	r3, [r7, #4]
 810154e:	429a      	cmp	r2, r3
 8101550:	dbf1      	blt.n	8101536 <_write+0x12>
	}
	return len;
 8101552:	687b      	ldr	r3, [r7, #4]
}
 8101554:	4618      	mov	r0, r3
 8101556:	3718      	adds	r7, #24
 8101558:	46bd      	mov	sp, r7
 810155a:	bd80      	pop	{r7, pc}

0810155c <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai_BlockA4)
{
 810155c:	b480      	push	{r7}
 810155e:	b083      	sub	sp, #12
 8101560:	af00      	add	r7, sp, #0
 8101562:	6078      	str	r0, [r7, #4]
	sample_sai = data_sai[0];
 8101564:	4b04      	ldr	r3, [pc, #16]	; (8101578 <HAL_SAI_RxCpltCallback+0x1c>)
 8101566:	881a      	ldrh	r2, [r3, #0]
 8101568:	4b04      	ldr	r3, [pc, #16]	; (810157c <HAL_SAI_RxCpltCallback+0x20>)
 810156a:	801a      	strh	r2, [r3, #0]
}
 810156c:	bf00      	nop
 810156e:	370c      	adds	r7, #12
 8101570:	46bd      	mov	sp, r7
 8101572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101576:	4770      	bx	lr
 8101578:	1000045c 	.word	0x1000045c
 810157c:	10000524 	.word	0x10000524

08101580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101580:	b480      	push	{r7}
 8101582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101584:	b672      	cpsid	i
}
 8101586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101588:	e7fe      	b.n	8101588 <Error_Handler+0x8>
	...

0810158c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 810158c:	b580      	push	{r7, lr}
 810158e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8101590:	4b12      	ldr	r3, [pc, #72]	; (81015dc <MX_QUADSPI_Init+0x50>)
 8101592:	4a13      	ldr	r2, [pc, #76]	; (81015e0 <MX_QUADSPI_Init+0x54>)
 8101594:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8101596:	4b11      	ldr	r3, [pc, #68]	; (81015dc <MX_QUADSPI_Init+0x50>)
 8101598:	22ff      	movs	r2, #255	; 0xff
 810159a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 810159c:	4b0f      	ldr	r3, [pc, #60]	; (81015dc <MX_QUADSPI_Init+0x50>)
 810159e:	2201      	movs	r2, #1
 81015a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81015a2:	4b0e      	ldr	r3, [pc, #56]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015a4:	2200      	movs	r2, #0
 81015a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 81015a8:	4b0c      	ldr	r3, [pc, #48]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015aa:	2201      	movs	r2, #1
 81015ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 81015ae:	4b0b      	ldr	r3, [pc, #44]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015b0:	2200      	movs	r2, #0
 81015b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 81015b4:	4b09      	ldr	r3, [pc, #36]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015b6:	2200      	movs	r2, #0
 81015b8:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 81015ba:	4b08      	ldr	r3, [pc, #32]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015bc:	2200      	movs	r2, #0
 81015be:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 81015c0:	4b06      	ldr	r3, [pc, #24]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015c2:	2200      	movs	r2, #0
 81015c4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 81015c6:	4805      	ldr	r0, [pc, #20]	; (81015dc <MX_QUADSPI_Init+0x50>)
 81015c8:	f004 fe72 	bl	81062b0 <HAL_QSPI_Init>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2b00      	cmp	r3, #0
 81015d0:	d001      	beq.n	81015d6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 81015d2:	f7ff ffd5 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 81015d6:	bf00      	nop
 81015d8:	bd80      	pop	{r7, pc}
 81015da:	bf00      	nop
 81015dc:	10000528 	.word	0x10000528
 81015e0:	52005000 	.word	0x52005000

081015e4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 81015e4:	b580      	push	{r7, lr}
 81015e6:	b0bc      	sub	sp, #240	; 0xf0
 81015e8:	af00      	add	r7, sp, #0
 81015ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81015ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81015f0:	2200      	movs	r2, #0
 81015f2:	601a      	str	r2, [r3, #0]
 81015f4:	605a      	str	r2, [r3, #4]
 81015f6:	609a      	str	r2, [r3, #8]
 81015f8:	60da      	str	r2, [r3, #12]
 81015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81015fc:	f107 0318 	add.w	r3, r7, #24
 8101600:	22c0      	movs	r2, #192	; 0xc0
 8101602:	2100      	movs	r1, #0
 8101604:	4618      	mov	r0, r3
 8101606:	f00a f909 	bl	810b81c <memset>
  if(qspiHandle->Instance==QUADSPI)
 810160a:	687b      	ldr	r3, [r7, #4]
 810160c:	681b      	ldr	r3, [r3, #0]
 810160e:	4a56      	ldr	r2, [pc, #344]	; (8101768 <HAL_QSPI_MspInit+0x184>)
 8101610:	4293      	cmp	r3, r2
 8101612:	f040 80a5 	bne.w	8101760 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8101616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810161a:	f04f 0300 	mov.w	r3, #0
 810161e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101622:	2300      	movs	r3, #0
 8101624:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101626:	f107 0318 	add.w	r3, r7, #24
 810162a:	4618      	mov	r0, r3
 810162c:	f005 f8d2 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8101630:	4603      	mov	r3, r0
 8101632:	2b00      	cmp	r3, #0
 8101634:	d001      	beq.n	810163a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8101636:	f7ff ffa3 	bl	8101580 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 810163a:	4b4c      	ldr	r3, [pc, #304]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810163c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101640:	4a4a      	ldr	r2, [pc, #296]	; (810176c <HAL_QSPI_MspInit+0x188>)
 8101642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101646:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 810164a:	4b48      	ldr	r3, [pc, #288]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810164c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101654:	617b      	str	r3, [r7, #20]
 8101656:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101658:	4b44      	ldr	r3, [pc, #272]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810165e:	4a43      	ldr	r2, [pc, #268]	; (810176c <HAL_QSPI_MspInit+0x188>)
 8101660:	f043 0302 	orr.w	r3, r3, #2
 8101664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101668:	4b40      	ldr	r3, [pc, #256]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810166e:	f003 0302 	and.w	r3, r3, #2
 8101672:	613b      	str	r3, [r7, #16]
 8101674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101676:	4b3d      	ldr	r3, [pc, #244]	; (810176c <HAL_QSPI_MspInit+0x188>)
 8101678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810167c:	4a3b      	ldr	r2, [pc, #236]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810167e:	f043 0320 	orr.w	r3, r3, #32
 8101682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101686:	4b39      	ldr	r3, [pc, #228]	; (810176c <HAL_QSPI_MspInit+0x188>)
 8101688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810168c:	f003 0320 	and.w	r3, r3, #32
 8101690:	60fb      	str	r3, [r7, #12]
 8101692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101694:	4b35      	ldr	r3, [pc, #212]	; (810176c <HAL_QSPI_MspInit+0x188>)
 8101696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810169a:	4a34      	ldr	r2, [pc, #208]	; (810176c <HAL_QSPI_MspInit+0x188>)
 810169c:	f043 0308 	orr.w	r3, r3, #8
 81016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016a4:	4b31      	ldr	r3, [pc, #196]	; (810176c <HAL_QSPI_MspInit+0x188>)
 81016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016aa:	f003 0308 	and.w	r3, r3, #8
 81016ae:	60bb      	str	r3, [r7, #8]
 81016b0:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81016b2:	2340      	movs	r3, #64	; 0x40
 81016b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016b8:	2302      	movs	r3, #2
 81016ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016be:	2300      	movs	r3, #0
 81016c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016c4:	2300      	movs	r3, #0
 81016c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81016ca:	230a      	movs	r3, #10
 81016cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81016d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81016d4:	4619      	mov	r1, r3
 81016d6:	4826      	ldr	r0, [pc, #152]	; (8101770 <HAL_QSPI_MspInit+0x18c>)
 81016d8:	f003 ffa2 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 81016dc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 81016e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016e4:	2302      	movs	r3, #2
 81016e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016ea:	2300      	movs	r3, #0
 81016ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f0:	2300      	movs	r3, #0
 81016f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81016f6:	2309      	movs	r3, #9
 81016f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81016fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101700:	4619      	mov	r1, r3
 8101702:	481c      	ldr	r0, [pc, #112]	; (8101774 <HAL_QSPI_MspInit+0x190>)
 8101704:	f003 ff8c 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8101708:	f44f 7300 	mov.w	r3, #512	; 0x200
 810170c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101710:	2302      	movs	r3, #2
 8101712:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101716:	2300      	movs	r3, #0
 8101718:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810171c:	2300      	movs	r3, #0
 810171e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101722:	230a      	movs	r3, #10
 8101724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101728:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810172c:	4619      	mov	r1, r3
 810172e:	4811      	ldr	r0, [pc, #68]	; (8101774 <HAL_QSPI_MspInit+0x190>)
 8101730:	f003 ff76 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810173c:	2302      	movs	r3, #2
 810173e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101742:	2300      	movs	r3, #0
 8101744:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101748:	2300      	movs	r3, #0
 810174a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810174e:	2309      	movs	r3, #9
 8101750:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101758:	4619      	mov	r1, r3
 810175a:	4807      	ldr	r0, [pc, #28]	; (8101778 <HAL_QSPI_MspInit+0x194>)
 810175c:	f003 ff60 	bl	8105620 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8101760:	bf00      	nop
 8101762:	37f0      	adds	r7, #240	; 0xf0
 8101764:	46bd      	mov	sp, r7
 8101766:	bd80      	pop	{r7, pc}
 8101768:	52005000 	.word	0x52005000
 810176c:	58024400 	.word	0x58024400
 8101770:	58020400 	.word	0x58020400
 8101774:	58021400 	.word	0x58021400
 8101778:	58020c00 	.word	0x58020c00

0810177c <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockA4;
DMA_HandleTypeDef hdma_sai4_a;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 810177c:	b580      	push	{r7, lr}
 810177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8101780:	4b58      	ldr	r3, [pc, #352]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101782:	4a59      	ldr	r2, [pc, #356]	; (81018e8 <MX_SAI2_Init+0x16c>)
 8101784:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8101786:	4b57      	ldr	r3, [pc, #348]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101788:	2200      	movs	r2, #0
 810178a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 810178c:	4b55      	ldr	r3, [pc, #340]	; (81018e4 <MX_SAI2_Init+0x168>)
 810178e:	2200      	movs	r2, #0
 8101790:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8101792:	4b54      	ldr	r3, [pc, #336]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101794:	2240      	movs	r2, #64	; 0x40
 8101796:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8101798:	4b52      	ldr	r3, [pc, #328]	; (81018e4 <MX_SAI2_Init+0x168>)
 810179a:	2200      	movs	r2, #0
 810179c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 810179e:	4b51      	ldr	r3, [pc, #324]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017a0:	2200      	movs	r2, #0
 81017a2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 81017a4:	4b4f      	ldr	r3, [pc, #316]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017a6:	2200      	movs	r2, #0
 81017a8:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81017aa:	4b4e      	ldr	r3, [pc, #312]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017ac:	2200      	movs	r2, #0
 81017ae:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 81017b0:	4b4c      	ldr	r3, [pc, #304]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017b2:	2200      	movs	r2, #0
 81017b4:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81017b6:	4b4b      	ldr	r3, [pc, #300]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017b8:	2200      	movs	r2, #0
 81017ba:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81017bc:	4b49      	ldr	r3, [pc, #292]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017be:	4a4b      	ldr	r2, [pc, #300]	; (81018ec <MX_SAI2_Init+0x170>)
 81017c0:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81017c2:	4b48      	ldr	r3, [pc, #288]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017c4:	2200      	movs	r2, #0
 81017c6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 81017c8:	4b46      	ldr	r3, [pc, #280]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017ca:	2200      	movs	r2, #0
 81017cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 81017ce:	4b45      	ldr	r3, [pc, #276]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017d0:	2200      	movs	r2, #0
 81017d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81017d4:	4b43      	ldr	r3, [pc, #268]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017d6:	2200      	movs	r2, #0
 81017d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 81017da:	4b42      	ldr	r3, [pc, #264]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017dc:	2200      	movs	r2, #0
 81017de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 81017e2:	4b40      	ldr	r3, [pc, #256]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017e4:	2201      	movs	r2, #1
 81017e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81017e8:	4b3e      	ldr	r3, [pc, #248]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 81017ee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 81017f0:	4b3c      	ldr	r3, [pc, #240]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017f2:	2208      	movs	r2, #8
 81017f4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 81017f6:	4b3b      	ldr	r3, [pc, #236]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017f8:	2201      	movs	r2, #1
 81017fa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81017fc:	4b39      	ldr	r3, [pc, #228]	; (81018e4 <MX_SAI2_Init+0x168>)
 81017fe:	2200      	movs	r2, #0
 8101800:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8101802:	4b38      	ldr	r3, [pc, #224]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101804:	2200      	movs	r2, #0
 8101806:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8101808:	4b36      	ldr	r3, [pc, #216]	; (81018e4 <MX_SAI2_Init+0x168>)
 810180a:	2200      	movs	r2, #0
 810180c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 810180e:	4b35      	ldr	r3, [pc, #212]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101810:	2200      	movs	r2, #0
 8101812:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8101814:	4b33      	ldr	r3, [pc, #204]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101816:	2200      	movs	r2, #0
 8101818:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 810181a:	4b32      	ldr	r3, [pc, #200]	; (81018e4 <MX_SAI2_Init+0x168>)
 810181c:	2201      	movs	r2, #1
 810181e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8101820:	4b30      	ldr	r3, [pc, #192]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101822:	2200      	movs	r2, #0
 8101824:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8101826:	482f      	ldr	r0, [pc, #188]	; (81018e4 <MX_SAI2_Init+0x168>)
 8101828:	f007 fcd2 	bl	81091d0 <HAL_SAI_Init>
 810182c:	4603      	mov	r3, r0
 810182e:	2b00      	cmp	r3, #0
 8101830:	d001      	beq.n	8101836 <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 8101832:	f7ff fea5 	bl	8101580 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8101836:	4b2e      	ldr	r3, [pc, #184]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101838:	4a2e      	ldr	r2, [pc, #184]	; (81018f4 <MX_SAI2_Init+0x178>)
 810183a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 810183c:	4b2c      	ldr	r3, [pc, #176]	; (81018f0 <MX_SAI2_Init+0x174>)
 810183e:	2200      	movs	r2, #0
 8101840:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8101842:	4b2b      	ldr	r3, [pc, #172]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101844:	2203      	movs	r2, #3
 8101846:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8101848:	4b29      	ldr	r3, [pc, #164]	; (81018f0 <MX_SAI2_Init+0x174>)
 810184a:	2240      	movs	r2, #64	; 0x40
 810184c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 810184e:	4b28      	ldr	r3, [pc, #160]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101850:	2200      	movs	r2, #0
 8101852:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8101854:	4b26      	ldr	r3, [pc, #152]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101856:	2200      	movs	r2, #0
 8101858:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 810185a:	4b25      	ldr	r3, [pc, #148]	; (81018f0 <MX_SAI2_Init+0x174>)
 810185c:	2201      	movs	r2, #1
 810185e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8101860:	4b23      	ldr	r3, [pc, #140]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101862:	2200      	movs	r2, #0
 8101864:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8101866:	4b22      	ldr	r3, [pc, #136]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101868:	2200      	movs	r2, #0
 810186a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 810186c:	4b20      	ldr	r3, [pc, #128]	; (81018f0 <MX_SAI2_Init+0x174>)
 810186e:	2200      	movs	r2, #0
 8101870:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8101872:	4b1f      	ldr	r3, [pc, #124]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101874:	2200      	movs	r2, #0
 8101876:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8101878:	4b1d      	ldr	r3, [pc, #116]	; (81018f0 <MX_SAI2_Init+0x174>)
 810187a:	2200      	movs	r2, #0
 810187c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 810187e:	4b1c      	ldr	r3, [pc, #112]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101880:	2200      	movs	r2, #0
 8101882:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 8101884:	4b1a      	ldr	r3, [pc, #104]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101886:	2200      	movs	r2, #0
 8101888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 810188c:	4b18      	ldr	r3, [pc, #96]	; (81018f0 <MX_SAI2_Init+0x174>)
 810188e:	2201      	movs	r2, #1
 8101890:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8101892:	4b17      	ldr	r3, [pc, #92]	; (81018f0 <MX_SAI2_Init+0x174>)
 8101894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101898:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 810189a:	4b15      	ldr	r3, [pc, #84]	; (81018f0 <MX_SAI2_Init+0x174>)
 810189c:	2208      	movs	r2, #8
 810189e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 81018a0:	4b13      	ldr	r3, [pc, #76]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018a2:	2201      	movs	r2, #1
 81018a4:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 81018a6:	4b12      	ldr	r3, [pc, #72]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018a8:	2200      	movs	r2, #0
 81018aa:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 81018ac:	4b10      	ldr	r3, [pc, #64]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018ae:	2200      	movs	r2, #0
 81018b0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 81018b2:	4b0f      	ldr	r3, [pc, #60]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018b4:	2200      	movs	r2, #0
 81018b6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 81018b8:	4b0d      	ldr	r3, [pc, #52]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018ba:	2200      	movs	r2, #0
 81018bc:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 81018be:	4b0c      	ldr	r3, [pc, #48]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018c0:	2200      	movs	r2, #0
 81018c2:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 81018c4:	4b0a      	ldr	r3, [pc, #40]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018c6:	2201      	movs	r2, #1
 81018c8:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 81018ca:	4b09      	ldr	r3, [pc, #36]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 81018d0:	4807      	ldr	r0, [pc, #28]	; (81018f0 <MX_SAI2_Init+0x174>)
 81018d2:	f007 fc7d 	bl	81091d0 <HAL_SAI_Init>
 81018d6:	4603      	mov	r3, r0
 81018d8:	2b00      	cmp	r3, #0
 81018da:	d001      	beq.n	81018e0 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 81018dc:	f7ff fe50 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 81018e0:	bf00      	nop
 81018e2:	bd80      	pop	{r7, pc}
 81018e4:	10000574 	.word	0x10000574
 81018e8:	40015c04 	.word	0x40015c04
 81018ec:	0002ee00 	.word	0x0002ee00
 81018f0:	1000060c 	.word	0x1000060c
 81018f4:	40015c24 	.word	0x40015c24

081018f8 <MX_SAI4_Init>:
/* SAI4 init function */
void MX_SAI4_Init(void)
{
 81018f8:	b580      	push	{r7, lr}
 81018fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */

  hsai_BlockA4.Instance = SAI4_Block_A;
 81018fc:	4b2b      	ldr	r3, [pc, #172]	; (81019ac <MX_SAI4_Init+0xb4>)
 81018fe:	4a2c      	ldr	r2, [pc, #176]	; (81019b0 <MX_SAI4_Init+0xb8>)
 8101900:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8101902:	4b2a      	ldr	r3, [pc, #168]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101904:	2200      	movs	r2, #0
 8101906:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8101908:	4b28      	ldr	r3, [pc, #160]	; (81019ac <MX_SAI4_Init+0xb4>)
 810190a:	2201      	movs	r2, #1
 810190c:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_8;
 810190e:	4b27      	ldr	r3, [pc, #156]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101910:	2240      	movs	r2, #64	; 0x40
 8101912:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8101914:	4b25      	ldr	r3, [pc, #148]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101916:	2200      	movs	r2, #0
 8101918:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 810191a:	4b24      	ldr	r3, [pc, #144]	; (81019ac <MX_SAI4_Init+0xb4>)
 810191c:	2200      	movs	r2, #0
 810191e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8101920:	4b22      	ldr	r3, [pc, #136]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101922:	2200      	movs	r2, #0
 8101924:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8101926:	4b21      	ldr	r3, [pc, #132]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101928:	2200      	movs	r2, #0
 810192a:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 810192c:	4b1f      	ldr	r3, [pc, #124]	; (81019ac <MX_SAI4_Init+0xb4>)
 810192e:	2200      	movs	r2, #0
 8101930:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8101932:	4b1e      	ldr	r3, [pc, #120]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101934:	2200      	movs	r2, #0
 8101936:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 8101938:	4b1c      	ldr	r3, [pc, #112]	; (81019ac <MX_SAI4_Init+0xb4>)
 810193a:	f245 6222 	movw	r2, #22050	; 0x5622
 810193e:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8101940:	4b1a      	ldr	r3, [pc, #104]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101942:	2200      	movs	r2, #0
 8101944:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8101946:	4b19      	ldr	r3, [pc, #100]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101948:	2200      	movs	r2, #0
 810194a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 810194c:	4b17      	ldr	r3, [pc, #92]	; (81019ac <MX_SAI4_Init+0xb4>)
 810194e:	2201      	movs	r2, #1
 8101950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8101954:	4b15      	ldr	r3, [pc, #84]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101956:	2201      	movs	r2, #1
 8101958:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 810195a:	4b14      	ldr	r3, [pc, #80]	; (81019ac <MX_SAI4_Init+0xb4>)
 810195c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101960:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA4.FrameInit.FrameLength = 8;
 8101962:	4b12      	ldr	r3, [pc, #72]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101964:	2208      	movs	r2, #8
 8101966:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8101968:	4b10      	ldr	r3, [pc, #64]	; (81019ac <MX_SAI4_Init+0xb4>)
 810196a:	2201      	movs	r2, #1
 810196c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 810196e:	4b0f      	ldr	r3, [pc, #60]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101970:	2200      	movs	r2, #0
 8101972:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8101974:	4b0d      	ldr	r3, [pc, #52]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101976:	2200      	movs	r2, #0
 8101978:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 810197a:	4b0c      	ldr	r3, [pc, #48]	; (81019ac <MX_SAI4_Init+0xb4>)
 810197c:	2200      	movs	r2, #0
 810197e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8101980:	4b0a      	ldr	r3, [pc, #40]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101982:	2200      	movs	r2, #0
 8101984:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8101986:	4b09      	ldr	r3, [pc, #36]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101988:	2200      	movs	r2, #0
 810198a:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 810198c:	4b07      	ldr	r3, [pc, #28]	; (81019ac <MX_SAI4_Init+0xb4>)
 810198e:	2201      	movs	r2, #1
 8101990:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x00000000;
 8101992:	4b06      	ldr	r3, [pc, #24]	; (81019ac <MX_SAI4_Init+0xb4>)
 8101994:	2200      	movs	r2, #0
 8101996:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8101998:	4804      	ldr	r0, [pc, #16]	; (81019ac <MX_SAI4_Init+0xb4>)
 810199a:	f007 fc19 	bl	81091d0 <HAL_SAI_Init>
 810199e:	4603      	mov	r3, r0
 81019a0:	2b00      	cmp	r3, #0
 81019a2:	d001      	beq.n	81019a8 <MX_SAI4_Init+0xb0>
  {
    Error_Handler();
 81019a4:	f7ff fdec 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 81019a8:	bf00      	nop
 81019aa:	bd80      	pop	{r7, pc}
 81019ac:	100006a4 	.word	0x100006a4
 81019b0:	58005404 	.word	0x58005404

081019b4 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;
static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 81019b4:	b580      	push	{r7, lr}
 81019b6:	b0bc      	sub	sp, #240	; 0xf0
 81019b8:	af00      	add	r7, sp, #0
 81019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019bc:	f107 0318 	add.w	r3, r7, #24
 81019c0:	22c0      	movs	r2, #192	; 0xc0
 81019c2:	2100      	movs	r1, #0
 81019c4:	4618      	mov	r0, r3
 81019c6:	f009 ff29 	bl	810b81c <memset>
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	681b      	ldr	r3, [r3, #0]
 81019ce:	4a8e      	ldr	r2, [pc, #568]	; (8101c08 <HAL_SAI_MspInit+0x254>)
 81019d0:	4293      	cmp	r3, r2
 81019d2:	d13e      	bne.n	8101a52 <HAL_SAI_MspInit+0x9e>
    {
    /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 81019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 81019d8:	f04f 0300 	mov.w	r3, #0
 81019dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 81019e0:	2300      	movs	r3, #0
 81019e2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019e4:	f107 0318 	add.w	r3, r7, #24
 81019e8:	4618      	mov	r0, r3
 81019ea:	f004 fef3 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 81019ee:	4603      	mov	r3, r0
 81019f0:	2b00      	cmp	r3, #0
 81019f2:	d001      	beq.n	81019f8 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 81019f4:	f7ff fdc4 	bl	8101580 <Error_Handler>
    }

    if (SAI2_client == 0)
 81019f8:	4b84      	ldr	r3, [pc, #528]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	2b00      	cmp	r3, #0
 81019fe:	d10e      	bne.n	8101a1e <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101a00:	4b83      	ldr	r3, [pc, #524]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a06:	4a82      	ldr	r2, [pc, #520]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101a0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a10:	4b7f      	ldr	r3, [pc, #508]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101a1a:	617b      	str	r3, [r7, #20]
 8101a1c:	697b      	ldr	r3, [r7, #20]
    }
    SAI2_client ++;
 8101a1e:	4b7b      	ldr	r3, [pc, #492]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 8101a20:	681b      	ldr	r3, [r3, #0]
 8101a22:	3301      	adds	r3, #1
 8101a24:	4a79      	ldr	r2, [pc, #484]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 8101a26:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8101a28:	23f0      	movs	r3, #240	; 0xf0
 8101a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a2e:	2302      	movs	r3, #2
 8101a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a34:	2300      	movs	r3, #0
 8101a36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a3a:	2300      	movs	r3, #0
 8101a3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101a40:	230a      	movs	r3, #10
 8101a42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8101a46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101a4a:	4619      	mov	r1, r3
 8101a4c:	4871      	ldr	r0, [pc, #452]	; (8101c14 <HAL_SAI_MspInit+0x260>)
 8101a4e:	f003 fde7 	bl	8105620 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI2_Block_B)
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4a70      	ldr	r2, [pc, #448]	; (8101c18 <HAL_SAI_MspInit+0x264>)
 8101a58:	4293      	cmp	r3, r2
 8101a5a:	d13f      	bne.n	8101adc <HAL_SAI_MspInit+0x128>
    {
      /* SAI2 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8101a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101a60:	f04f 0300 	mov.w	r3, #0
 8101a64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 8101a68:	2300      	movs	r3, #0
 8101a6a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a6c:	f107 0318 	add.w	r3, r7, #24
 8101a70:	4618      	mov	r0, r3
 8101a72:	f004 feaf 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8101a76:	4603      	mov	r3, r0
 8101a78:	2b00      	cmp	r3, #0
 8101a7a:	d001      	beq.n	8101a80 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8101a7c:	f7ff fd80 	bl	8101580 <Error_Handler>
    }

      if (SAI2_client == 0)
 8101a80:	4b62      	ldr	r3, [pc, #392]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 8101a82:	681b      	ldr	r3, [r3, #0]
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d10e      	bne.n	8101aa6 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8101a88:	4b61      	ldr	r3, [pc, #388]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a8e:	4a60      	ldr	r2, [pc, #384]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101a94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101a98:	4b5d      	ldr	r3, [pc, #372]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101aa2:	613b      	str	r3, [r7, #16]
 8101aa4:	693b      	ldr	r3, [r7, #16]
      }
    SAI2_client ++;
 8101aa6:	4b59      	ldr	r3, [pc, #356]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	3301      	adds	r3, #1
 8101aac:	4a57      	ldr	r2, [pc, #348]	; (8101c0c <HAL_SAI_MspInit+0x258>)
 8101aae:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8101ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8101ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ab8:	2302      	movs	r3, #2
 8101aba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101abe:	2300      	movs	r3, #0
 8101ac0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ac4:	2300      	movs	r3, #0
 8101ac6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8101aca:	230a      	movs	r3, #10
 8101acc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101ad0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	4851      	ldr	r0, [pc, #324]	; (8101c1c <HAL_SAI_MspInit+0x268>)
 8101ad8:	f003 fda2 	bl	8105620 <HAL_GPIO_Init>

    }
/* SAI4 */
    if(saiHandle->Instance==SAI4_Block_A)
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	4a4f      	ldr	r2, [pc, #316]	; (8101c20 <HAL_SAI_MspInit+0x26c>)
 8101ae2:	4293      	cmp	r3, r2
 8101ae4:	f040 808b 	bne.w	8101bfe <HAL_SAI_MspInit+0x24a>
    {
    /* SAI4 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8101ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101aec:	f04f 0300 	mov.w	r3, #0
 8101af0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL;
 8101af4:	2300      	movs	r3, #0
 8101af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101afa:	f107 0318 	add.w	r3, r7, #24
 8101afe:	4618      	mov	r0, r3
 8101b00:	f004 fe68 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8101b04:	4603      	mov	r3, r0
 8101b06:	2b00      	cmp	r3, #0
 8101b08:	d001      	beq.n	8101b0e <HAL_SAI_MspInit+0x15a>
    {
      Error_Handler();
 8101b0a:	f7ff fd39 	bl	8101580 <Error_Handler>
    }

    if (SAI4_client == 0)
 8101b0e:	4b45      	ldr	r3, [pc, #276]	; (8101c24 <HAL_SAI_MspInit+0x270>)
 8101b10:	681b      	ldr	r3, [r3, #0]
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d10e      	bne.n	8101b34 <HAL_SAI_MspInit+0x180>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8101b16:	4b3e      	ldr	r3, [pc, #248]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b1c:	4a3c      	ldr	r2, [pc, #240]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101b22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101b26:	4b3a      	ldr	r3, [pc, #232]	; (8101c10 <HAL_SAI_MspInit+0x25c>)
 8101b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101b30:	60fb      	str	r3, [r7, #12]
 8101b32:	68fb      	ldr	r3, [r7, #12]
    }
    SAI4_client ++;
 8101b34:	4b3b      	ldr	r3, [pc, #236]	; (8101c24 <HAL_SAI_MspInit+0x270>)
 8101b36:	681b      	ldr	r3, [r3, #0]
 8101b38:	3301      	adds	r3, #1
 8101b3a:	4a3a      	ldr	r2, [pc, #232]	; (8101c24 <HAL_SAI_MspInit+0x270>)
 8101b3c:	6013      	str	r3, [r2, #0]
    /**SAI4_A_Block_A GPIO Configuration
    PD6     ------> SAI4_D1
    PE5     ------> SAI4_CK2
    PE4     ------> SAI4_D2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101b3e:	2340      	movs	r3, #64	; 0x40
 8101b40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b44:	2302      	movs	r3, #2
 8101b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b4a:	2300      	movs	r3, #0
 8101b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b50:	2300      	movs	r3, #0
 8101b52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8101b56:	230a      	movs	r3, #10
 8101b58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101b5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101b60:	4619      	mov	r1, r3
 8101b62:	4831      	ldr	r0, [pc, #196]	; (8101c28 <HAL_SAI_MspInit+0x274>)
 8101b64:	f003 fd5c 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8101b68:	2330      	movs	r3, #48	; 0x30
 8101b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6e:	2302      	movs	r3, #2
 8101b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b74:	2300      	movs	r3, #0
 8101b76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8101b80:	230a      	movs	r3, #10
 8101b82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101b86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4827      	ldr	r0, [pc, #156]	; (8101c2c <HAL_SAI_MspInit+0x278>)
 8101b8e:	f003 fd47 	bl	8105620 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8101b92:	4b27      	ldr	r3, [pc, #156]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101b94:	4a27      	ldr	r2, [pc, #156]	; (8101c34 <HAL_SAI_MspInit+0x280>)
 8101b96:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8101b98:	4b25      	ldr	r3, [pc, #148]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101b9a:	220f      	movs	r2, #15
 8101b9c:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101b9e:	4b24      	ldr	r3, [pc, #144]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101ba0:	2200      	movs	r2, #0
 8101ba2:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8101ba4:	4b22      	ldr	r3, [pc, #136]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101ba6:	2200      	movs	r2, #0
 8101ba8:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8101baa:	4b21      	ldr	r3, [pc, #132]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101bb0:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8101bb2:	4b1f      	ldr	r3, [pc, #124]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101bb8:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8101bba:	4b1d      	ldr	r3, [pc, #116]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101bc0:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8101bc2:	4b1b      	ldr	r3, [pc, #108]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101bc8:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8101bca:	4b19      	ldr	r3, [pc, #100]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101bd0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8101bd2:	4817      	ldr	r0, [pc, #92]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bd4:	f000 fcb0 	bl	8102538 <HAL_DMA_Init>
 8101bd8:	4603      	mov	r3, r0
 8101bda:	2b00      	cmp	r3, #0
 8101bdc:	d001      	beq.n	8101be2 <HAL_SAI_MspInit+0x22e>
    {
      Error_Handler();
 8101bde:	f7ff fccf 	bl	8101580 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai4_a);
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	4a12      	ldr	r2, [pc, #72]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8101bea:	4a11      	ldr	r2, [pc, #68]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai4_a);
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	4a0f      	ldr	r2, [pc, #60]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8101bf8:	4a0d      	ldr	r2, [pc, #52]	; (8101c30 <HAL_SAI_MspInit+0x27c>)
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8101bfe:	bf00      	nop
 8101c00:	37f0      	adds	r7, #240	; 0xf0
 8101c02:	46bd      	mov	sp, r7
 8101c04:	bd80      	pop	{r7, pc}
 8101c06:	bf00      	nop
 8101c08:	40015c04 	.word	0x40015c04
 8101c0c:	100007b4 	.word	0x100007b4
 8101c10:	58024400 	.word	0x58024400
 8101c14:	58022000 	.word	0x58022000
 8101c18:	40015c24 	.word	0x40015c24
 8101c1c:	58021800 	.word	0x58021800
 8101c20:	58005404 	.word	0x58005404
 8101c24:	100007b8 	.word	0x100007b8
 8101c28:	58020c00 	.word	0x58020c00
 8101c2c:	58021000 	.word	0x58021000
 8101c30:	1000073c 	.word	0x1000073c
 8101c34:	58025408 	.word	0x58025408

08101c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101c38:	b480      	push	{r7}
 8101c3a:	b083      	sub	sp, #12
 8101c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c3e:	4b0a      	ldr	r3, [pc, #40]	; (8101c68 <HAL_MspInit+0x30>)
 8101c40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c44:	4a08      	ldr	r2, [pc, #32]	; (8101c68 <HAL_MspInit+0x30>)
 8101c46:	f043 0302 	orr.w	r3, r3, #2
 8101c4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c4e:	4b06      	ldr	r3, [pc, #24]	; (8101c68 <HAL_MspInit+0x30>)
 8101c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c54:	f003 0302 	and.w	r3, r3, #2
 8101c58:	607b      	str	r3, [r7, #4]
 8101c5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c5c:	bf00      	nop
 8101c5e:	370c      	adds	r7, #12
 8101c60:	46bd      	mov	sp, r7
 8101c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c66:	4770      	bx	lr
 8101c68:	58024400 	.word	0x58024400

08101c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101c6c:	b480      	push	{r7}
 8101c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101c70:	e7fe      	b.n	8101c70 <NMI_Handler+0x4>

08101c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101c72:	b480      	push	{r7}
 8101c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101c76:	e7fe      	b.n	8101c76 <HardFault_Handler+0x4>

08101c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101c78:	b480      	push	{r7}
 8101c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101c7c:	e7fe      	b.n	8101c7c <MemManage_Handler+0x4>

08101c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101c7e:	b480      	push	{r7}
 8101c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101c82:	e7fe      	b.n	8101c82 <BusFault_Handler+0x4>

08101c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101c84:	b480      	push	{r7}
 8101c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101c88:	e7fe      	b.n	8101c88 <UsageFault_Handler+0x4>

08101c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101c8a:	b480      	push	{r7}
 8101c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101c8e:	bf00      	nop
 8101c90:	46bd      	mov	sp, r7
 8101c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c96:	4770      	bx	lr

08101c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101c98:	b480      	push	{r7}
 8101c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101c9c:	bf00      	nop
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca4:	4770      	bx	lr

08101ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101ca6:	b480      	push	{r7}
 8101ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101caa:	bf00      	nop
 8101cac:	46bd      	mov	sp, r7
 8101cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cb2:	4770      	bx	lr

08101cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101cb4:	b580      	push	{r7, lr}
 8101cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101cb8:	f000 fab6 	bl	8102228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101cbc:	bf00      	nop
 8101cbe:	bd80      	pop	{r7, pc}

08101cc0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8101cc0:	b580      	push	{r7, lr}
 8101cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 8101cc4:	4802      	ldr	r0, [pc, #8]	; (8101cd0 <BDMA_Channel0_IRQHandler+0x10>)
 8101cc6:	f001 f9fb 	bl	81030c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8101cca:	bf00      	nop
 8101ccc:	bd80      	pop	{r7, pc}
 8101cce:	bf00      	nop
 8101cd0:	1000073c 	.word	0x1000073c

08101cd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101cd4:	b580      	push	{r7, lr}
 8101cd6:	b086      	sub	sp, #24
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	60f8      	str	r0, [r7, #12]
 8101cdc:	60b9      	str	r1, [r7, #8]
 8101cde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ce0:	2300      	movs	r3, #0
 8101ce2:	617b      	str	r3, [r7, #20]
 8101ce4:	e00a      	b.n	8101cfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101ce6:	f3af 8000 	nop.w
 8101cea:	4601      	mov	r1, r0
 8101cec:	68bb      	ldr	r3, [r7, #8]
 8101cee:	1c5a      	adds	r2, r3, #1
 8101cf0:	60ba      	str	r2, [r7, #8]
 8101cf2:	b2ca      	uxtb	r2, r1
 8101cf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101cf6:	697b      	ldr	r3, [r7, #20]
 8101cf8:	3301      	adds	r3, #1
 8101cfa:	617b      	str	r3, [r7, #20]
 8101cfc:	697a      	ldr	r2, [r7, #20]
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	429a      	cmp	r2, r3
 8101d02:	dbf0      	blt.n	8101ce6 <_read+0x12>
  }

  return len;
 8101d04:	687b      	ldr	r3, [r7, #4]
}
 8101d06:	4618      	mov	r0, r3
 8101d08:	3718      	adds	r7, #24
 8101d0a:	46bd      	mov	sp, r7
 8101d0c:	bd80      	pop	{r7, pc}

08101d0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8101d0e:	b480      	push	{r7}
 8101d10:	b083      	sub	sp, #12
 8101d12:	af00      	add	r7, sp, #0
 8101d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101d1a:	4618      	mov	r0, r3
 8101d1c:	370c      	adds	r7, #12
 8101d1e:	46bd      	mov	sp, r7
 8101d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d24:	4770      	bx	lr

08101d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101d26:	b480      	push	{r7}
 8101d28:	b083      	sub	sp, #12
 8101d2a:	af00      	add	r7, sp, #0
 8101d2c:	6078      	str	r0, [r7, #4]
 8101d2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101d30:	683b      	ldr	r3, [r7, #0]
 8101d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101d36:	605a      	str	r2, [r3, #4]
  return 0;
 8101d38:	2300      	movs	r3, #0
}
 8101d3a:	4618      	mov	r0, r3
 8101d3c:	370c      	adds	r7, #12
 8101d3e:	46bd      	mov	sp, r7
 8101d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d44:	4770      	bx	lr

08101d46 <_isatty>:

int _isatty(int file)
{
 8101d46:	b480      	push	{r7}
 8101d48:	b083      	sub	sp, #12
 8101d4a:	af00      	add	r7, sp, #0
 8101d4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101d4e:	2301      	movs	r3, #1
}
 8101d50:	4618      	mov	r0, r3
 8101d52:	370c      	adds	r7, #12
 8101d54:	46bd      	mov	sp, r7
 8101d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d5a:	4770      	bx	lr

08101d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101d5c:	b480      	push	{r7}
 8101d5e:	b085      	sub	sp, #20
 8101d60:	af00      	add	r7, sp, #0
 8101d62:	60f8      	str	r0, [r7, #12]
 8101d64:	60b9      	str	r1, [r7, #8]
 8101d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101d68:	2300      	movs	r3, #0
}
 8101d6a:	4618      	mov	r0, r3
 8101d6c:	3714      	adds	r7, #20
 8101d6e:	46bd      	mov	sp, r7
 8101d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d74:	4770      	bx	lr
	...

08101d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	b086      	sub	sp, #24
 8101d7c:	af00      	add	r7, sp, #0
 8101d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101d80:	4a14      	ldr	r2, [pc, #80]	; (8101dd4 <_sbrk+0x5c>)
 8101d82:	4b15      	ldr	r3, [pc, #84]	; (8101dd8 <_sbrk+0x60>)
 8101d84:	1ad3      	subs	r3, r2, r3
 8101d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101d88:	697b      	ldr	r3, [r7, #20]
 8101d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101d8c:	4b13      	ldr	r3, [pc, #76]	; (8101ddc <_sbrk+0x64>)
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	2b00      	cmp	r3, #0
 8101d92:	d102      	bne.n	8101d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101d94:	4b11      	ldr	r3, [pc, #68]	; (8101ddc <_sbrk+0x64>)
 8101d96:	4a12      	ldr	r2, [pc, #72]	; (8101de0 <_sbrk+0x68>)
 8101d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101d9a:	4b10      	ldr	r3, [pc, #64]	; (8101ddc <_sbrk+0x64>)
 8101d9c:	681a      	ldr	r2, [r3, #0]
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	4413      	add	r3, r2
 8101da2:	693a      	ldr	r2, [r7, #16]
 8101da4:	429a      	cmp	r2, r3
 8101da6:	d207      	bcs.n	8101db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101da8:	f009 fd86 	bl	810b8b8 <__errno>
 8101dac:	4603      	mov	r3, r0
 8101dae:	220c      	movs	r2, #12
 8101db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101db2:	f04f 33ff 	mov.w	r3, #4294967295
 8101db6:	e009      	b.n	8101dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101db8:	4b08      	ldr	r3, [pc, #32]	; (8101ddc <_sbrk+0x64>)
 8101dba:	681b      	ldr	r3, [r3, #0]
 8101dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101dbe:	4b07      	ldr	r3, [pc, #28]	; (8101ddc <_sbrk+0x64>)
 8101dc0:	681a      	ldr	r2, [r3, #0]
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	4413      	add	r3, r2
 8101dc6:	4a05      	ldr	r2, [pc, #20]	; (8101ddc <_sbrk+0x64>)
 8101dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101dca:	68fb      	ldr	r3, [r7, #12]
}
 8101dcc:	4618      	mov	r0, r3
 8101dce:	3718      	adds	r7, #24
 8101dd0:	46bd      	mov	sp, r7
 8101dd2:	bd80      	pop	{r7, pc}
 8101dd4:	10048000 	.word	0x10048000
 8101dd8:	00000400 	.word	0x00000400
 8101ddc:	100007bc 	.word	0x100007bc
 8101de0:	10000eb0 	.word	0x10000eb0

08101de4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101de4:	b580      	push	{r7, lr}
 8101de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101de8:	4b22      	ldr	r3, [pc, #136]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101dea:	4a23      	ldr	r2, [pc, #140]	; (8101e78 <MX_USART3_UART_Init+0x94>)
 8101dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101dee:	4b21      	ldr	r3, [pc, #132]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101df6:	4b1f      	ldr	r3, [pc, #124]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101df8:	2200      	movs	r2, #0
 8101dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101dfc:	4b1d      	ldr	r3, [pc, #116]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101dfe:	2200      	movs	r2, #0
 8101e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101e02:	4b1c      	ldr	r3, [pc, #112]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e04:	2200      	movs	r2, #0
 8101e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101e08:	4b1a      	ldr	r3, [pc, #104]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e0a:	220c      	movs	r2, #12
 8101e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101e0e:	4b19      	ldr	r3, [pc, #100]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e10:	2200      	movs	r2, #0
 8101e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101e14:	4b17      	ldr	r3, [pc, #92]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e16:	2200      	movs	r2, #0
 8101e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101e1a:	4b16      	ldr	r3, [pc, #88]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e1c:	2200      	movs	r2, #0
 8101e1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101e20:	4b14      	ldr	r3, [pc, #80]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e22:	2200      	movs	r2, #0
 8101e24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101e26:	4b13      	ldr	r3, [pc, #76]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e28:	2200      	movs	r2, #0
 8101e2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101e2c:	4811      	ldr	r0, [pc, #68]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e2e:	f007 fe49 	bl	8109ac4 <HAL_UART_Init>
 8101e32:	4603      	mov	r3, r0
 8101e34:	2b00      	cmp	r3, #0
 8101e36:	d001      	beq.n	8101e3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101e38:	f7ff fba2 	bl	8101580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101e3c:	2100      	movs	r1, #0
 8101e3e:	480d      	ldr	r0, [pc, #52]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e40:	f008 fe4a 	bl	810aad8 <HAL_UARTEx_SetTxFifoThreshold>
 8101e44:	4603      	mov	r3, r0
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d001      	beq.n	8101e4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101e4a:	f7ff fb99 	bl	8101580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101e4e:	2100      	movs	r1, #0
 8101e50:	4808      	ldr	r0, [pc, #32]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e52:	f008 fe7f 	bl	810ab54 <HAL_UARTEx_SetRxFifoThreshold>
 8101e56:	4603      	mov	r3, r0
 8101e58:	2b00      	cmp	r3, #0
 8101e5a:	d001      	beq.n	8101e60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101e5c:	f7ff fb90 	bl	8101580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101e60:	4804      	ldr	r0, [pc, #16]	; (8101e74 <MX_USART3_UART_Init+0x90>)
 8101e62:	f008 fe00 	bl	810aa66 <HAL_UARTEx_DisableFifoMode>
 8101e66:	4603      	mov	r3, r0
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d001      	beq.n	8101e70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101e6c:	f7ff fb88 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101e70:	bf00      	nop
 8101e72:	bd80      	pop	{r7, pc}
 8101e74:	100007c0 	.word	0x100007c0
 8101e78:	40004800 	.word	0x40004800

08101e7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	b0ba      	sub	sp, #232	; 0xe8
 8101e80:	af00      	add	r7, sp, #0
 8101e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101e88:	2200      	movs	r2, #0
 8101e8a:	601a      	str	r2, [r3, #0]
 8101e8c:	605a      	str	r2, [r3, #4]
 8101e8e:	609a      	str	r2, [r3, #8]
 8101e90:	60da      	str	r2, [r3, #12]
 8101e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e94:	f107 0310 	add.w	r3, r7, #16
 8101e98:	22c0      	movs	r2, #192	; 0xc0
 8101e9a:	2100      	movs	r1, #0
 8101e9c:	4618      	mov	r0, r3
 8101e9e:	f009 fcbd 	bl	810b81c <memset>
  if(uartHandle->Instance==USART3)
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	4a27      	ldr	r2, [pc, #156]	; (8101f44 <HAL_UART_MspInit+0xc8>)
 8101ea8:	4293      	cmp	r3, r2
 8101eaa:	d146      	bne.n	8101f3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101eac:	f04f 0202 	mov.w	r2, #2
 8101eb0:	f04f 0300 	mov.w	r3, #0
 8101eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101eb8:	2300      	movs	r3, #0
 8101eba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ebe:	f107 0310 	add.w	r3, r7, #16
 8101ec2:	4618      	mov	r0, r3
 8101ec4:	f004 fc86 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8101ec8:	4603      	mov	r3, r0
 8101eca:	2b00      	cmp	r3, #0
 8101ecc:	d001      	beq.n	8101ed2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101ece:	f7ff fb57 	bl	8101580 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101ed2:	4b1d      	ldr	r3, [pc, #116]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ed8:	4a1b      	ldr	r2, [pc, #108]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101ee2:	4b19      	ldr	r3, [pc, #100]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101ee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101eec:	60fb      	str	r3, [r7, #12]
 8101eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101ef0:	4b15      	ldr	r3, [pc, #84]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ef6:	4a14      	ldr	r2, [pc, #80]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101ef8:	f043 0302 	orr.w	r3, r3, #2
 8101efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f00:	4b11      	ldr	r3, [pc, #68]	; (8101f48 <HAL_UART_MspInit+0xcc>)
 8101f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f06:	f003 0302 	and.w	r3, r3, #2
 8101f0a:	60bb      	str	r3, [r7, #8]
 8101f0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8101f0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f16:	2302      	movs	r3, #2
 8101f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f1c:	2300      	movs	r3, #0
 8101f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f22:	2300      	movs	r3, #0
 8101f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101f28:	2307      	movs	r3, #7
 8101f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101f2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101f32:	4619      	mov	r1, r3
 8101f34:	4805      	ldr	r0, [pc, #20]	; (8101f4c <HAL_UART_MspInit+0xd0>)
 8101f36:	f003 fb73 	bl	8105620 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101f3a:	bf00      	nop
 8101f3c:	37e8      	adds	r7, #232	; 0xe8
 8101f3e:	46bd      	mov	sp, r7
 8101f40:	bd80      	pop	{r7, pc}
 8101f42:	bf00      	nop
 8101f44:	40004800 	.word	0x40004800
 8101f48:	58024400 	.word	0x58024400
 8101f4c:	58020400 	.word	0x58020400

08101f50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8101f50:	b580      	push	{r7, lr}
 8101f52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8101f54:	4b15      	ldr	r3, [pc, #84]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f56:	4a16      	ldr	r2, [pc, #88]	; (8101fb0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8101f58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8101f5a:	4b14      	ldr	r3, [pc, #80]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f5c:	2209      	movs	r2, #9
 8101f5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8101f60:	4b12      	ldr	r3, [pc, #72]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f62:	2202      	movs	r2, #2
 8101f64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8101f66:	4b11      	ldr	r3, [pc, #68]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f68:	2200      	movs	r2, #0
 8101f6a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8101f6c:	4b0f      	ldr	r3, [pc, #60]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f6e:	2202      	movs	r2, #2
 8101f70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8101f72:	4b0e      	ldr	r3, [pc, #56]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f74:	2200      	movs	r2, #0
 8101f76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8101f78:	4b0c      	ldr	r3, [pc, #48]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f7a:	2200      	movs	r2, #0
 8101f7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8101f7e:	4b0b      	ldr	r3, [pc, #44]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f80:	2200      	movs	r2, #0
 8101f82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8101f84:	4b09      	ldr	r3, [pc, #36]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f86:	2201      	movs	r2, #1
 8101f88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8101f8a:	4b08      	ldr	r3, [pc, #32]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f8c:	2201      	movs	r2, #1
 8101f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8101f90:	4b06      	ldr	r3, [pc, #24]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f92:	2200      	movs	r2, #0
 8101f94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8101f96:	4805      	ldr	r0, [pc, #20]	; (8101fac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8101f98:	f003 ffa9 	bl	8105eee <HAL_PCD_Init>
 8101f9c:	4603      	mov	r3, r0
 8101f9e:	2b00      	cmp	r3, #0
 8101fa0:	d001      	beq.n	8101fa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8101fa2:	f7ff faed 	bl	8101580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8101fa6:	bf00      	nop
 8101fa8:	bd80      	pop	{r7, pc}
 8101faa:	bf00      	nop
 8101fac:	10000854 	.word	0x10000854
 8101fb0:	40080000 	.word	0x40080000

08101fb4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8101fb4:	b580      	push	{r7, lr}
 8101fb6:	b0ba      	sub	sp, #232	; 0xe8
 8101fb8:	af00      	add	r7, sp, #0
 8101fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101fbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101fc0:	2200      	movs	r2, #0
 8101fc2:	601a      	str	r2, [r3, #0]
 8101fc4:	605a      	str	r2, [r3, #4]
 8101fc6:	609a      	str	r2, [r3, #8]
 8101fc8:	60da      	str	r2, [r3, #12]
 8101fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101fcc:	f107 0310 	add.w	r3, r7, #16
 8101fd0:	22c0      	movs	r2, #192	; 0xc0
 8101fd2:	2100      	movs	r1, #0
 8101fd4:	4618      	mov	r0, r3
 8101fd6:	f009 fc21 	bl	810b81c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	4a30      	ldr	r2, [pc, #192]	; (81020a0 <HAL_PCD_MspInit+0xec>)
 8101fe0:	4293      	cmp	r3, r2
 8101fe2:	d159      	bne.n	8102098 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8101fe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8101fe8:	f04f 0300 	mov.w	r3, #0
 8101fec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8101ff0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8101ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101ff8:	f107 0310 	add.w	r3, r7, #16
 8101ffc:	4618      	mov	r0, r3
 8101ffe:	f004 fbe9 	bl	81067d4 <HAL_RCCEx_PeriphCLKConfig>
 8102002:	4603      	mov	r3, r0
 8102004:	2b00      	cmp	r3, #0
 8102006:	d001      	beq.n	810200c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8102008:	f7ff faba 	bl	8101580 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810200c:	f004 f940 	bl	8106290 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102010:	4b24      	ldr	r3, [pc, #144]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 8102012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102016:	4a23      	ldr	r2, [pc, #140]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 8102018:	f043 0301 	orr.w	r3, r3, #1
 810201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102020:	4b20      	ldr	r3, [pc, #128]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 8102022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102026:	f003 0301 	and.w	r3, r3, #1
 810202a:	60fb      	str	r3, [r7, #12]
 810202c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 810202e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8102036:	2300      	movs	r3, #0
 8102038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810203c:	2300      	movs	r3, #0
 810203e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8102042:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102046:	4619      	mov	r1, r3
 8102048:	4817      	ldr	r0, [pc, #92]	; (81020a8 <HAL_PCD_MspInit+0xf4>)
 810204a:	f003 fae9 	bl	8105620 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 810204e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8102052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102056:	2302      	movs	r3, #2
 8102058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810205c:	2300      	movs	r3, #0
 810205e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102062:	2300      	movs	r3, #0
 8102064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8102068:	230a      	movs	r3, #10
 810206a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810206e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102072:	4619      	mov	r1, r3
 8102074:	480c      	ldr	r0, [pc, #48]	; (81020a8 <HAL_PCD_MspInit+0xf4>)
 8102076:	f003 fad3 	bl	8105620 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810207a:	4b0a      	ldr	r3, [pc, #40]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 810207c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102080:	4a08      	ldr	r2, [pc, #32]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 8102082:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8102086:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810208a:	4b06      	ldr	r3, [pc, #24]	; (81020a4 <HAL_PCD_MspInit+0xf0>)
 810208c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102094:	60bb      	str	r3, [r7, #8]
 8102096:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8102098:	bf00      	nop
 810209a:	37e8      	adds	r7, #232	; 0xe8
 810209c:	46bd      	mov	sp, r7
 810209e:	bd80      	pop	{r7, pc}
 81020a0:	40080000 	.word	0x40080000
 81020a4:	58024400 	.word	0x58024400
 81020a8:	58020000 	.word	0x58020000

081020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 81020e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81020b0:	f7fe fae4 	bl	810067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81020b4:	480c      	ldr	r0, [pc, #48]	; (81020e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81020b6:	490d      	ldr	r1, [pc, #52]	; (81020ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81020b8:	4a0d      	ldr	r2, [pc, #52]	; (81020f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81020ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81020bc:	e002      	b.n	81020c4 <LoopCopyDataInit>

081020be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81020be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81020c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81020c2:	3304      	adds	r3, #4

081020c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81020c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81020c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81020c8:	d3f9      	bcc.n	81020be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81020ca:	4a0a      	ldr	r2, [pc, #40]	; (81020f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81020cc:	4c0a      	ldr	r4, [pc, #40]	; (81020f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81020ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 81020d0:	e001      	b.n	81020d6 <LoopFillZerobss>

081020d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81020d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81020d4:	3204      	adds	r2, #4

081020d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81020d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81020d8:	d3fb      	bcc.n	81020d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81020da:	f009 fbf3 	bl	810b8c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81020de:	f7ff f9a5 	bl	810142c <main>
  bx  lr
 81020e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81020e4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81020e8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81020ec:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 81020f0:	0810c450 	.word	0x0810c450
  ldr r2, =_sbss
 81020f4:	1000012c 	.word	0x1000012c
  ldr r4, =_ebss
 81020f8:	10000eb0 	.word	0x10000eb0

081020fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81020fc:	e7fe      	b.n	81020fc <ADC3_IRQHandler>
	...

08102100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102100:	b580      	push	{r7, lr}
 8102102:	b082      	sub	sp, #8
 8102104:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102106:	4b28      	ldr	r3, [pc, #160]	; (81021a8 <HAL_Init+0xa8>)
 8102108:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810210c:	4a26      	ldr	r2, [pc, #152]	; (81021a8 <HAL_Init+0xa8>)
 810210e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102112:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102116:	4b24      	ldr	r3, [pc, #144]	; (81021a8 <HAL_Init+0xa8>)
 8102118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810211c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102120:	603b      	str	r3, [r7, #0]
 8102122:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102124:	4b21      	ldr	r3, [pc, #132]	; (81021ac <HAL_Init+0xac>)
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810212c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102130:	4a1e      	ldr	r2, [pc, #120]	; (81021ac <HAL_Init+0xac>)
 8102132:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102136:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102138:	4b1c      	ldr	r3, [pc, #112]	; (81021ac <HAL_Init+0xac>)
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	4a1b      	ldr	r2, [pc, #108]	; (81021ac <HAL_Init+0xac>)
 810213e:	f043 0301 	orr.w	r3, r3, #1
 8102142:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102144:	2003      	movs	r0, #3
 8102146:	f000 f9a3 	bl	8102490 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810214a:	f004 f96b 	bl	8106424 <HAL_RCC_GetSysClockFreq>
 810214e:	4602      	mov	r2, r0
 8102150:	4b15      	ldr	r3, [pc, #84]	; (81021a8 <HAL_Init+0xa8>)
 8102152:	699b      	ldr	r3, [r3, #24]
 8102154:	0a1b      	lsrs	r3, r3, #8
 8102156:	f003 030f 	and.w	r3, r3, #15
 810215a:	4915      	ldr	r1, [pc, #84]	; (81021b0 <HAL_Init+0xb0>)
 810215c:	5ccb      	ldrb	r3, [r1, r3]
 810215e:	f003 031f 	and.w	r3, r3, #31
 8102162:	fa22 f303 	lsr.w	r3, r2, r3
 8102166:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102168:	4b0f      	ldr	r3, [pc, #60]	; (81021a8 <HAL_Init+0xa8>)
 810216a:	699b      	ldr	r3, [r3, #24]
 810216c:	f003 030f 	and.w	r3, r3, #15
 8102170:	4a0f      	ldr	r2, [pc, #60]	; (81021b0 <HAL_Init+0xb0>)
 8102172:	5cd3      	ldrb	r3, [r2, r3]
 8102174:	f003 031f 	and.w	r3, r3, #31
 8102178:	687a      	ldr	r2, [r7, #4]
 810217a:	fa22 f303 	lsr.w	r3, r2, r3
 810217e:	4a0d      	ldr	r2, [pc, #52]	; (81021b4 <HAL_Init+0xb4>)
 8102180:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102182:	4b0c      	ldr	r3, [pc, #48]	; (81021b4 <HAL_Init+0xb4>)
 8102184:	681b      	ldr	r3, [r3, #0]
 8102186:	4a0c      	ldr	r2, [pc, #48]	; (81021b8 <HAL_Init+0xb8>)
 8102188:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810218a:	2000      	movs	r0, #0
 810218c:	f000 f816 	bl	81021bc <HAL_InitTick>
 8102190:	4603      	mov	r3, r0
 8102192:	2b00      	cmp	r3, #0
 8102194:	d001      	beq.n	810219a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102196:	2301      	movs	r3, #1
 8102198:	e002      	b.n	81021a0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810219a:	f7ff fd4d 	bl	8101c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810219e:	2300      	movs	r3, #0
}
 81021a0:	4618      	mov	r0, r3
 81021a2:	3708      	adds	r7, #8
 81021a4:	46bd      	mov	sp, r7
 81021a6:	bd80      	pop	{r7, pc}
 81021a8:	58024400 	.word	0x58024400
 81021ac:	40024400 	.word	0x40024400
 81021b0:	0810c3cc 	.word	0x0810c3cc
 81021b4:	10000004 	.word	0x10000004
 81021b8:	10000000 	.word	0x10000000

081021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81021bc:	b580      	push	{r7, lr}
 81021be:	b082      	sub	sp, #8
 81021c0:	af00      	add	r7, sp, #0
 81021c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81021c4:	4b15      	ldr	r3, [pc, #84]	; (810221c <HAL_InitTick+0x60>)
 81021c6:	781b      	ldrb	r3, [r3, #0]
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d101      	bne.n	81021d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81021cc:	2301      	movs	r3, #1
 81021ce:	e021      	b.n	8102214 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81021d0:	4b13      	ldr	r3, [pc, #76]	; (8102220 <HAL_InitTick+0x64>)
 81021d2:	681a      	ldr	r2, [r3, #0]
 81021d4:	4b11      	ldr	r3, [pc, #68]	; (810221c <HAL_InitTick+0x60>)
 81021d6:	781b      	ldrb	r3, [r3, #0]
 81021d8:	4619      	mov	r1, r3
 81021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81021de:	fbb3 f3f1 	udiv	r3, r3, r1
 81021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 81021e6:	4618      	mov	r0, r3
 81021e8:	f000 f985 	bl	81024f6 <HAL_SYSTICK_Config>
 81021ec:	4603      	mov	r3, r0
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d001      	beq.n	81021f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81021f2:	2301      	movs	r3, #1
 81021f4:	e00e      	b.n	8102214 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	2b0f      	cmp	r3, #15
 81021fa:	d80a      	bhi.n	8102212 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81021fc:	2200      	movs	r2, #0
 81021fe:	6879      	ldr	r1, [r7, #4]
 8102200:	f04f 30ff 	mov.w	r0, #4294967295
 8102204:	f000 f94f 	bl	81024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102208:	4a06      	ldr	r2, [pc, #24]	; (8102224 <HAL_InitTick+0x68>)
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810220e:	2300      	movs	r3, #0
 8102210:	e000      	b.n	8102214 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102212:	2301      	movs	r3, #1
}
 8102214:	4618      	mov	r0, r3
 8102216:	3708      	adds	r7, #8
 8102218:	46bd      	mov	sp, r7
 810221a:	bd80      	pop	{r7, pc}
 810221c:	1000000c 	.word	0x1000000c
 8102220:	10000000 	.word	0x10000000
 8102224:	10000008 	.word	0x10000008

08102228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102228:	b480      	push	{r7}
 810222a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810222c:	4b06      	ldr	r3, [pc, #24]	; (8102248 <HAL_IncTick+0x20>)
 810222e:	781b      	ldrb	r3, [r3, #0]
 8102230:	461a      	mov	r2, r3
 8102232:	4b06      	ldr	r3, [pc, #24]	; (810224c <HAL_IncTick+0x24>)
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	4413      	add	r3, r2
 8102238:	4a04      	ldr	r2, [pc, #16]	; (810224c <HAL_IncTick+0x24>)
 810223a:	6013      	str	r3, [r2, #0]
}
 810223c:	bf00      	nop
 810223e:	46bd      	mov	sp, r7
 8102240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102244:	4770      	bx	lr
 8102246:	bf00      	nop
 8102248:	1000000c 	.word	0x1000000c
 810224c:	10000d60 	.word	0x10000d60

08102250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102250:	b480      	push	{r7}
 8102252:	af00      	add	r7, sp, #0
  return uwTick;
 8102254:	4b03      	ldr	r3, [pc, #12]	; (8102264 <HAL_GetTick+0x14>)
 8102256:	681b      	ldr	r3, [r3, #0]
}
 8102258:	4618      	mov	r0, r3
 810225a:	46bd      	mov	sp, r7
 810225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102260:	4770      	bx	lr
 8102262:	bf00      	nop
 8102264:	10000d60 	.word	0x10000d60

08102268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102268:	b580      	push	{r7, lr}
 810226a:	b084      	sub	sp, #16
 810226c:	af00      	add	r7, sp, #0
 810226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102270:	f7ff ffee 	bl	8102250 <HAL_GetTick>
 8102274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810227a:	68fb      	ldr	r3, [r7, #12]
 810227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102280:	d005      	beq.n	810228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102282:	4b0a      	ldr	r3, [pc, #40]	; (81022ac <HAL_Delay+0x44>)
 8102284:	781b      	ldrb	r3, [r3, #0]
 8102286:	461a      	mov	r2, r3
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	4413      	add	r3, r2
 810228c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810228e:	bf00      	nop
 8102290:	f7ff ffde 	bl	8102250 <HAL_GetTick>
 8102294:	4602      	mov	r2, r0
 8102296:	68bb      	ldr	r3, [r7, #8]
 8102298:	1ad3      	subs	r3, r2, r3
 810229a:	68fa      	ldr	r2, [r7, #12]
 810229c:	429a      	cmp	r2, r3
 810229e:	d8f7      	bhi.n	8102290 <HAL_Delay+0x28>
  {
  }
}
 81022a0:	bf00      	nop
 81022a2:	bf00      	nop
 81022a4:	3710      	adds	r7, #16
 81022a6:	46bd      	mov	sp, r7
 81022a8:	bd80      	pop	{r7, pc}
 81022aa:	bf00      	nop
 81022ac:	1000000c 	.word	0x1000000c

081022b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81022b0:	b480      	push	{r7}
 81022b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81022b4:	4b03      	ldr	r3, [pc, #12]	; (81022c4 <HAL_GetREVID+0x14>)
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	0c1b      	lsrs	r3, r3, #16
}
 81022ba:	4618      	mov	r0, r3
 81022bc:	46bd      	mov	sp, r7
 81022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c2:	4770      	bx	lr
 81022c4:	5c001000 	.word	0x5c001000

081022c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 81022c8:	b480      	push	{r7}
 81022ca:	b083      	sub	sp, #12
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 81022d0:	4b06      	ldr	r3, [pc, #24]	; (81022ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81022d2:	685b      	ldr	r3, [r3, #4]
 81022d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81022d8:	4904      	ldr	r1, [pc, #16]	; (81022ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81022da:	687b      	ldr	r3, [r7, #4]
 81022dc:	4313      	orrs	r3, r2
 81022de:	604b      	str	r3, [r1, #4]
}
 81022e0:	bf00      	nop
 81022e2:	370c      	adds	r7, #12
 81022e4:	46bd      	mov	sp, r7
 81022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ea:	4770      	bx	lr
 81022ec:	58000400 	.word	0x58000400

081022f0 <__NVIC_SetPriorityGrouping>:
{
 81022f0:	b480      	push	{r7}
 81022f2:	b085      	sub	sp, #20
 81022f4:	af00      	add	r7, sp, #0
 81022f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	f003 0307 	and.w	r3, r3, #7
 81022fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102300:	4b0c      	ldr	r3, [pc, #48]	; (8102334 <__NVIC_SetPriorityGrouping+0x44>)
 8102302:	68db      	ldr	r3, [r3, #12]
 8102304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102306:	68ba      	ldr	r2, [r7, #8]
 8102308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810230c:	4013      	ands	r3, r2
 810230e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102310:	68fb      	ldr	r3, [r7, #12]
 8102312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102314:	68bb      	ldr	r3, [r7, #8]
 8102316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810231c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102322:	4a04      	ldr	r2, [pc, #16]	; (8102334 <__NVIC_SetPriorityGrouping+0x44>)
 8102324:	68bb      	ldr	r3, [r7, #8]
 8102326:	60d3      	str	r3, [r2, #12]
}
 8102328:	bf00      	nop
 810232a:	3714      	adds	r7, #20
 810232c:	46bd      	mov	sp, r7
 810232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102332:	4770      	bx	lr
 8102334:	e000ed00 	.word	0xe000ed00

08102338 <__NVIC_GetPriorityGrouping>:
{
 8102338:	b480      	push	{r7}
 810233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810233c:	4b04      	ldr	r3, [pc, #16]	; (8102350 <__NVIC_GetPriorityGrouping+0x18>)
 810233e:	68db      	ldr	r3, [r3, #12]
 8102340:	0a1b      	lsrs	r3, r3, #8
 8102342:	f003 0307 	and.w	r3, r3, #7
}
 8102346:	4618      	mov	r0, r3
 8102348:	46bd      	mov	sp, r7
 810234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810234e:	4770      	bx	lr
 8102350:	e000ed00 	.word	0xe000ed00

08102354 <__NVIC_EnableIRQ>:
{
 8102354:	b480      	push	{r7}
 8102356:	b083      	sub	sp, #12
 8102358:	af00      	add	r7, sp, #0
 810235a:	4603      	mov	r3, r0
 810235c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810235e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102362:	2b00      	cmp	r3, #0
 8102364:	db0b      	blt.n	810237e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102366:	88fb      	ldrh	r3, [r7, #6]
 8102368:	f003 021f 	and.w	r2, r3, #31
 810236c:	4907      	ldr	r1, [pc, #28]	; (810238c <__NVIC_EnableIRQ+0x38>)
 810236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102372:	095b      	lsrs	r3, r3, #5
 8102374:	2001      	movs	r0, #1
 8102376:	fa00 f202 	lsl.w	r2, r0, r2
 810237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810237e:	bf00      	nop
 8102380:	370c      	adds	r7, #12
 8102382:	46bd      	mov	sp, r7
 8102384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102388:	4770      	bx	lr
 810238a:	bf00      	nop
 810238c:	e000e100 	.word	0xe000e100

08102390 <__NVIC_SetPriority>:
{
 8102390:	b480      	push	{r7}
 8102392:	b083      	sub	sp, #12
 8102394:	af00      	add	r7, sp, #0
 8102396:	4603      	mov	r3, r0
 8102398:	6039      	str	r1, [r7, #0]
 810239a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810239c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	db0a      	blt.n	81023ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023a4:	683b      	ldr	r3, [r7, #0]
 81023a6:	b2da      	uxtb	r2, r3
 81023a8:	490c      	ldr	r1, [pc, #48]	; (81023dc <__NVIC_SetPriority+0x4c>)
 81023aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023ae:	0112      	lsls	r2, r2, #4
 81023b0:	b2d2      	uxtb	r2, r2
 81023b2:	440b      	add	r3, r1
 81023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81023b8:	e00a      	b.n	81023d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81023ba:	683b      	ldr	r3, [r7, #0]
 81023bc:	b2da      	uxtb	r2, r3
 81023be:	4908      	ldr	r1, [pc, #32]	; (81023e0 <__NVIC_SetPriority+0x50>)
 81023c0:	88fb      	ldrh	r3, [r7, #6]
 81023c2:	f003 030f 	and.w	r3, r3, #15
 81023c6:	3b04      	subs	r3, #4
 81023c8:	0112      	lsls	r2, r2, #4
 81023ca:	b2d2      	uxtb	r2, r2
 81023cc:	440b      	add	r3, r1
 81023ce:	761a      	strb	r2, [r3, #24]
}
 81023d0:	bf00      	nop
 81023d2:	370c      	adds	r7, #12
 81023d4:	46bd      	mov	sp, r7
 81023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023da:	4770      	bx	lr
 81023dc:	e000e100 	.word	0xe000e100
 81023e0:	e000ed00 	.word	0xe000ed00

081023e4 <NVIC_EncodePriority>:
{
 81023e4:	b480      	push	{r7}
 81023e6:	b089      	sub	sp, #36	; 0x24
 81023e8:	af00      	add	r7, sp, #0
 81023ea:	60f8      	str	r0, [r7, #12]
 81023ec:	60b9      	str	r1, [r7, #8]
 81023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	f003 0307 	and.w	r3, r3, #7
 81023f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81023f8:	69fb      	ldr	r3, [r7, #28]
 81023fa:	f1c3 0307 	rsb	r3, r3, #7
 81023fe:	2b04      	cmp	r3, #4
 8102400:	bf28      	it	cs
 8102402:	2304      	movcs	r3, #4
 8102404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102406:	69fb      	ldr	r3, [r7, #28]
 8102408:	3304      	adds	r3, #4
 810240a:	2b06      	cmp	r3, #6
 810240c:	d902      	bls.n	8102414 <NVIC_EncodePriority+0x30>
 810240e:	69fb      	ldr	r3, [r7, #28]
 8102410:	3b03      	subs	r3, #3
 8102412:	e000      	b.n	8102416 <NVIC_EncodePriority+0x32>
 8102414:	2300      	movs	r3, #0
 8102416:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102418:	f04f 32ff 	mov.w	r2, #4294967295
 810241c:	69bb      	ldr	r3, [r7, #24]
 810241e:	fa02 f303 	lsl.w	r3, r2, r3
 8102422:	43da      	mvns	r2, r3
 8102424:	68bb      	ldr	r3, [r7, #8]
 8102426:	401a      	ands	r2, r3
 8102428:	697b      	ldr	r3, [r7, #20]
 810242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810242c:	f04f 31ff 	mov.w	r1, #4294967295
 8102430:	697b      	ldr	r3, [r7, #20]
 8102432:	fa01 f303 	lsl.w	r3, r1, r3
 8102436:	43d9      	mvns	r1, r3
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810243c:	4313      	orrs	r3, r2
}
 810243e:	4618      	mov	r0, r3
 8102440:	3724      	adds	r7, #36	; 0x24
 8102442:	46bd      	mov	sp, r7
 8102444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102448:	4770      	bx	lr
	...

0810244c <SysTick_Config>:
{
 810244c:	b580      	push	{r7, lr}
 810244e:	b082      	sub	sp, #8
 8102450:	af00      	add	r7, sp, #0
 8102452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	3b01      	subs	r3, #1
 8102458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810245c:	d301      	bcc.n	8102462 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 810245e:	2301      	movs	r3, #1
 8102460:	e00f      	b.n	8102482 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102462:	4a0a      	ldr	r2, [pc, #40]	; (810248c <SysTick_Config+0x40>)
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	3b01      	subs	r3, #1
 8102468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810246a:	210f      	movs	r1, #15
 810246c:	f04f 30ff 	mov.w	r0, #4294967295
 8102470:	f7ff ff8e 	bl	8102390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102474:	4b05      	ldr	r3, [pc, #20]	; (810248c <SysTick_Config+0x40>)
 8102476:	2200      	movs	r2, #0
 8102478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810247a:	4b04      	ldr	r3, [pc, #16]	; (810248c <SysTick_Config+0x40>)
 810247c:	2207      	movs	r2, #7
 810247e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8102480:	2300      	movs	r3, #0
}
 8102482:	4618      	mov	r0, r3
 8102484:	3708      	adds	r7, #8
 8102486:	46bd      	mov	sp, r7
 8102488:	bd80      	pop	{r7, pc}
 810248a:	bf00      	nop
 810248c:	e000e010 	.word	0xe000e010

08102490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102490:	b580      	push	{r7, lr}
 8102492:	b082      	sub	sp, #8
 8102494:	af00      	add	r7, sp, #0
 8102496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102498:	6878      	ldr	r0, [r7, #4]
 810249a:	f7ff ff29 	bl	81022f0 <__NVIC_SetPriorityGrouping>
}
 810249e:	bf00      	nop
 81024a0:	3708      	adds	r7, #8
 81024a2:	46bd      	mov	sp, r7
 81024a4:	bd80      	pop	{r7, pc}

081024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81024a6:	b580      	push	{r7, lr}
 81024a8:	b086      	sub	sp, #24
 81024aa:	af00      	add	r7, sp, #0
 81024ac:	4603      	mov	r3, r0
 81024ae:	60b9      	str	r1, [r7, #8]
 81024b0:	607a      	str	r2, [r7, #4]
 81024b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81024b4:	f7ff ff40 	bl	8102338 <__NVIC_GetPriorityGrouping>
 81024b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81024ba:	687a      	ldr	r2, [r7, #4]
 81024bc:	68b9      	ldr	r1, [r7, #8]
 81024be:	6978      	ldr	r0, [r7, #20]
 81024c0:	f7ff ff90 	bl	81023e4 <NVIC_EncodePriority>
 81024c4:	4602      	mov	r2, r0
 81024c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81024ca:	4611      	mov	r1, r2
 81024cc:	4618      	mov	r0, r3
 81024ce:	f7ff ff5f 	bl	8102390 <__NVIC_SetPriority>
}
 81024d2:	bf00      	nop
 81024d4:	3718      	adds	r7, #24
 81024d6:	46bd      	mov	sp, r7
 81024d8:	bd80      	pop	{r7, pc}

081024da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81024da:	b580      	push	{r7, lr}
 81024dc:	b082      	sub	sp, #8
 81024de:	af00      	add	r7, sp, #0
 81024e0:	4603      	mov	r3, r0
 81024e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81024e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81024e8:	4618      	mov	r0, r3
 81024ea:	f7ff ff33 	bl	8102354 <__NVIC_EnableIRQ>
}
 81024ee:	bf00      	nop
 81024f0:	3708      	adds	r7, #8
 81024f2:	46bd      	mov	sp, r7
 81024f4:	bd80      	pop	{r7, pc}

081024f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81024f6:	b580      	push	{r7, lr}
 81024f8:	b082      	sub	sp, #8
 81024fa:	af00      	add	r7, sp, #0
 81024fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81024fe:	6878      	ldr	r0, [r7, #4]
 8102500:	f7ff ffa4 	bl	810244c <SysTick_Config>
 8102504:	4603      	mov	r3, r0
}
 8102506:	4618      	mov	r0, r3
 8102508:	3708      	adds	r7, #8
 810250a:	46bd      	mov	sp, r7
 810250c:	bd80      	pop	{r7, pc}
	...

08102510 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102510:	b480      	push	{r7}
 8102512:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102514:	4b07      	ldr	r3, [pc, #28]	; (8102534 <HAL_GetCurrentCPUID+0x24>)
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	091b      	lsrs	r3, r3, #4
 810251a:	f003 030f 	and.w	r3, r3, #15
 810251e:	2b07      	cmp	r3, #7
 8102520:	d101      	bne.n	8102526 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102522:	2303      	movs	r3, #3
 8102524:	e000      	b.n	8102528 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102526:	2301      	movs	r3, #1
  }
}
 8102528:	4618      	mov	r0, r3
 810252a:	46bd      	mov	sp, r7
 810252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102530:	4770      	bx	lr
 8102532:	bf00      	nop
 8102534:	e000ed00 	.word	0xe000ed00

08102538 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102538:	b580      	push	{r7, lr}
 810253a:	b086      	sub	sp, #24
 810253c:	af00      	add	r7, sp, #0
 810253e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102540:	f7ff fe86 	bl	8102250 <HAL_GetTick>
 8102544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102546:	687b      	ldr	r3, [r7, #4]
 8102548:	2b00      	cmp	r3, #0
 810254a:	d101      	bne.n	8102550 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810254c:	2301      	movs	r3, #1
 810254e:	e314      	b.n	8102b7a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	4a66      	ldr	r2, [pc, #408]	; (81026f0 <HAL_DMA_Init+0x1b8>)
 8102556:	4293      	cmp	r3, r2
 8102558:	d04a      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 810255a:	687b      	ldr	r3, [r7, #4]
 810255c:	681b      	ldr	r3, [r3, #0]
 810255e:	4a65      	ldr	r2, [pc, #404]	; (81026f4 <HAL_DMA_Init+0x1bc>)
 8102560:	4293      	cmp	r3, r2
 8102562:	d045      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	4a63      	ldr	r2, [pc, #396]	; (81026f8 <HAL_DMA_Init+0x1c0>)
 810256a:	4293      	cmp	r3, r2
 810256c:	d040      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	681b      	ldr	r3, [r3, #0]
 8102572:	4a62      	ldr	r2, [pc, #392]	; (81026fc <HAL_DMA_Init+0x1c4>)
 8102574:	4293      	cmp	r3, r2
 8102576:	d03b      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	681b      	ldr	r3, [r3, #0]
 810257c:	4a60      	ldr	r2, [pc, #384]	; (8102700 <HAL_DMA_Init+0x1c8>)
 810257e:	4293      	cmp	r3, r2
 8102580:	d036      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	4a5f      	ldr	r2, [pc, #380]	; (8102704 <HAL_DMA_Init+0x1cc>)
 8102588:	4293      	cmp	r3, r2
 810258a:	d031      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	681b      	ldr	r3, [r3, #0]
 8102590:	4a5d      	ldr	r2, [pc, #372]	; (8102708 <HAL_DMA_Init+0x1d0>)
 8102592:	4293      	cmp	r3, r2
 8102594:	d02c      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	4a5c      	ldr	r2, [pc, #368]	; (810270c <HAL_DMA_Init+0x1d4>)
 810259c:	4293      	cmp	r3, r2
 810259e:	d027      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025a0:	687b      	ldr	r3, [r7, #4]
 81025a2:	681b      	ldr	r3, [r3, #0]
 81025a4:	4a5a      	ldr	r2, [pc, #360]	; (8102710 <HAL_DMA_Init+0x1d8>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d022      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	4a59      	ldr	r2, [pc, #356]	; (8102714 <HAL_DMA_Init+0x1dc>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d01d      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	4a57      	ldr	r2, [pc, #348]	; (8102718 <HAL_DMA_Init+0x1e0>)
 81025ba:	4293      	cmp	r3, r2
 81025bc:	d018      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	681b      	ldr	r3, [r3, #0]
 81025c2:	4a56      	ldr	r2, [pc, #344]	; (810271c <HAL_DMA_Init+0x1e4>)
 81025c4:	4293      	cmp	r3, r2
 81025c6:	d013      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	4a54      	ldr	r2, [pc, #336]	; (8102720 <HAL_DMA_Init+0x1e8>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d00e      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	4a53      	ldr	r2, [pc, #332]	; (8102724 <HAL_DMA_Init+0x1ec>)
 81025d8:	4293      	cmp	r3, r2
 81025da:	d009      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025dc:	687b      	ldr	r3, [r7, #4]
 81025de:	681b      	ldr	r3, [r3, #0]
 81025e0:	4a51      	ldr	r2, [pc, #324]	; (8102728 <HAL_DMA_Init+0x1f0>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d004      	beq.n	81025f0 <HAL_DMA_Init+0xb8>
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	4a50      	ldr	r2, [pc, #320]	; (810272c <HAL_DMA_Init+0x1f4>)
 81025ec:	4293      	cmp	r3, r2
 81025ee:	d101      	bne.n	81025f4 <HAL_DMA_Init+0xbc>
 81025f0:	2301      	movs	r3, #1
 81025f2:	e000      	b.n	81025f6 <HAL_DMA_Init+0xbe>
 81025f4:	2300      	movs	r3, #0
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	f000 813b 	beq.w	8102872 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81025fc:	687b      	ldr	r3, [r7, #4]
 81025fe:	2202      	movs	r2, #2
 8102600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102604:	687b      	ldr	r3, [r7, #4]
 8102606:	2200      	movs	r2, #0
 8102608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	681b      	ldr	r3, [r3, #0]
 8102610:	4a37      	ldr	r2, [pc, #220]	; (81026f0 <HAL_DMA_Init+0x1b8>)
 8102612:	4293      	cmp	r3, r2
 8102614:	d04a      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	4a36      	ldr	r2, [pc, #216]	; (81026f4 <HAL_DMA_Init+0x1bc>)
 810261c:	4293      	cmp	r3, r2
 810261e:	d045      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102620:	687b      	ldr	r3, [r7, #4]
 8102622:	681b      	ldr	r3, [r3, #0]
 8102624:	4a34      	ldr	r2, [pc, #208]	; (81026f8 <HAL_DMA_Init+0x1c0>)
 8102626:	4293      	cmp	r3, r2
 8102628:	d040      	beq.n	81026ac <HAL_DMA_Init+0x174>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	4a33      	ldr	r2, [pc, #204]	; (81026fc <HAL_DMA_Init+0x1c4>)
 8102630:	4293      	cmp	r3, r2
 8102632:	d03b      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	681b      	ldr	r3, [r3, #0]
 8102638:	4a31      	ldr	r2, [pc, #196]	; (8102700 <HAL_DMA_Init+0x1c8>)
 810263a:	4293      	cmp	r3, r2
 810263c:	d036      	beq.n	81026ac <HAL_DMA_Init+0x174>
 810263e:	687b      	ldr	r3, [r7, #4]
 8102640:	681b      	ldr	r3, [r3, #0]
 8102642:	4a30      	ldr	r2, [pc, #192]	; (8102704 <HAL_DMA_Init+0x1cc>)
 8102644:	4293      	cmp	r3, r2
 8102646:	d031      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	4a2e      	ldr	r2, [pc, #184]	; (8102708 <HAL_DMA_Init+0x1d0>)
 810264e:	4293      	cmp	r3, r2
 8102650:	d02c      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	4a2d      	ldr	r2, [pc, #180]	; (810270c <HAL_DMA_Init+0x1d4>)
 8102658:	4293      	cmp	r3, r2
 810265a:	d027      	beq.n	81026ac <HAL_DMA_Init+0x174>
 810265c:	687b      	ldr	r3, [r7, #4]
 810265e:	681b      	ldr	r3, [r3, #0]
 8102660:	4a2b      	ldr	r2, [pc, #172]	; (8102710 <HAL_DMA_Init+0x1d8>)
 8102662:	4293      	cmp	r3, r2
 8102664:	d022      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102666:	687b      	ldr	r3, [r7, #4]
 8102668:	681b      	ldr	r3, [r3, #0]
 810266a:	4a2a      	ldr	r2, [pc, #168]	; (8102714 <HAL_DMA_Init+0x1dc>)
 810266c:	4293      	cmp	r3, r2
 810266e:	d01d      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	4a28      	ldr	r2, [pc, #160]	; (8102718 <HAL_DMA_Init+0x1e0>)
 8102676:	4293      	cmp	r3, r2
 8102678:	d018      	beq.n	81026ac <HAL_DMA_Init+0x174>
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	681b      	ldr	r3, [r3, #0]
 810267e:	4a27      	ldr	r2, [pc, #156]	; (810271c <HAL_DMA_Init+0x1e4>)
 8102680:	4293      	cmp	r3, r2
 8102682:	d013      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	4a25      	ldr	r2, [pc, #148]	; (8102720 <HAL_DMA_Init+0x1e8>)
 810268a:	4293      	cmp	r3, r2
 810268c:	d00e      	beq.n	81026ac <HAL_DMA_Init+0x174>
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	4a24      	ldr	r2, [pc, #144]	; (8102724 <HAL_DMA_Init+0x1ec>)
 8102694:	4293      	cmp	r3, r2
 8102696:	d009      	beq.n	81026ac <HAL_DMA_Init+0x174>
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	681b      	ldr	r3, [r3, #0]
 810269c:	4a22      	ldr	r2, [pc, #136]	; (8102728 <HAL_DMA_Init+0x1f0>)
 810269e:	4293      	cmp	r3, r2
 81026a0:	d004      	beq.n	81026ac <HAL_DMA_Init+0x174>
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	681b      	ldr	r3, [r3, #0]
 81026a6:	4a21      	ldr	r2, [pc, #132]	; (810272c <HAL_DMA_Init+0x1f4>)
 81026a8:	4293      	cmp	r3, r2
 81026aa:	d108      	bne.n	81026be <HAL_DMA_Init+0x186>
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	681a      	ldr	r2, [r3, #0]
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	f022 0201 	bic.w	r2, r2, #1
 81026ba:	601a      	str	r2, [r3, #0]
 81026bc:	e007      	b.n	81026ce <HAL_DMA_Init+0x196>
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	681b      	ldr	r3, [r3, #0]
 81026c2:	681a      	ldr	r2, [r3, #0]
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	681b      	ldr	r3, [r3, #0]
 81026c8:	f022 0201 	bic.w	r2, r2, #1
 81026cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81026ce:	e02f      	b.n	8102730 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 81026d0:	f7ff fdbe 	bl	8102250 <HAL_GetTick>
 81026d4:	4602      	mov	r2, r0
 81026d6:	693b      	ldr	r3, [r7, #16]
 81026d8:	1ad3      	subs	r3, r2, r3
 81026da:	2b05      	cmp	r3, #5
 81026dc:	d928      	bls.n	8102730 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	2220      	movs	r2, #32
 81026e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	2203      	movs	r2, #3
 81026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 81026ec:	2301      	movs	r3, #1
 81026ee:	e244      	b.n	8102b7a <HAL_DMA_Init+0x642>
 81026f0:	40020010 	.word	0x40020010
 81026f4:	40020028 	.word	0x40020028
 81026f8:	40020040 	.word	0x40020040
 81026fc:	40020058 	.word	0x40020058
 8102700:	40020070 	.word	0x40020070
 8102704:	40020088 	.word	0x40020088
 8102708:	400200a0 	.word	0x400200a0
 810270c:	400200b8 	.word	0x400200b8
 8102710:	40020410 	.word	0x40020410
 8102714:	40020428 	.word	0x40020428
 8102718:	40020440 	.word	0x40020440
 810271c:	40020458 	.word	0x40020458
 8102720:	40020470 	.word	0x40020470
 8102724:	40020488 	.word	0x40020488
 8102728:	400204a0 	.word	0x400204a0
 810272c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	f003 0301 	and.w	r3, r3, #1
 810273a:	2b00      	cmp	r3, #0
 810273c:	d1c8      	bne.n	81026d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	681b      	ldr	r3, [r3, #0]
 8102744:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102746:	697a      	ldr	r2, [r7, #20]
 8102748:	4b84      	ldr	r3, [pc, #528]	; (810295c <HAL_DMA_Init+0x424>)
 810274a:	4013      	ands	r3, r2
 810274c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102756:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102758:	687b      	ldr	r3, [r7, #4]
 810275a:	691b      	ldr	r3, [r3, #16]
 810275c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102762:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102764:	687b      	ldr	r3, [r7, #4]
 8102766:	699b      	ldr	r3, [r3, #24]
 8102768:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 810276a:	687b      	ldr	r3, [r7, #4]
 810276c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 810276e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	6a1b      	ldr	r3, [r3, #32]
 8102774:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102776:	697a      	ldr	r2, [r7, #20]
 8102778:	4313      	orrs	r3, r2
 810277a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102780:	2b04      	cmp	r3, #4
 8102782:	d107      	bne.n	8102794 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810278c:	4313      	orrs	r3, r2
 810278e:	697a      	ldr	r2, [r7, #20]
 8102790:	4313      	orrs	r3, r2
 8102792:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102794:	4b72      	ldr	r3, [pc, #456]	; (8102960 <HAL_DMA_Init+0x428>)
 8102796:	681b      	ldr	r3, [r3, #0]
 8102798:	0c1b      	lsrs	r3, r3, #16
 810279a:	041b      	lsls	r3, r3, #16
 810279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027a0:	d328      	bcc.n	81027f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	685b      	ldr	r3, [r3, #4]
 81027a6:	2b28      	cmp	r3, #40	; 0x28
 81027a8:	d903      	bls.n	81027b2 <HAL_DMA_Init+0x27a>
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	685b      	ldr	r3, [r3, #4]
 81027ae:	2b2e      	cmp	r3, #46	; 0x2e
 81027b0:	d917      	bls.n	81027e2 <HAL_DMA_Init+0x2aa>
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	685b      	ldr	r3, [r3, #4]
 81027b6:	2b3e      	cmp	r3, #62	; 0x3e
 81027b8:	d903      	bls.n	81027c2 <HAL_DMA_Init+0x28a>
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	685b      	ldr	r3, [r3, #4]
 81027be:	2b42      	cmp	r3, #66	; 0x42
 81027c0:	d90f      	bls.n	81027e2 <HAL_DMA_Init+0x2aa>
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	685b      	ldr	r3, [r3, #4]
 81027c6:	2b46      	cmp	r3, #70	; 0x46
 81027c8:	d903      	bls.n	81027d2 <HAL_DMA_Init+0x29a>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	685b      	ldr	r3, [r3, #4]
 81027ce:	2b48      	cmp	r3, #72	; 0x48
 81027d0:	d907      	bls.n	81027e2 <HAL_DMA_Init+0x2aa>
 81027d2:	687b      	ldr	r3, [r7, #4]
 81027d4:	685b      	ldr	r3, [r3, #4]
 81027d6:	2b4e      	cmp	r3, #78	; 0x4e
 81027d8:	d905      	bls.n	81027e6 <HAL_DMA_Init+0x2ae>
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	685b      	ldr	r3, [r3, #4]
 81027de:	2b52      	cmp	r3, #82	; 0x52
 81027e0:	d801      	bhi.n	81027e6 <HAL_DMA_Init+0x2ae>
 81027e2:	2301      	movs	r3, #1
 81027e4:	e000      	b.n	81027e8 <HAL_DMA_Init+0x2b0>
 81027e6:	2300      	movs	r3, #0
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	d003      	beq.n	81027f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 81027ec:	697b      	ldr	r3, [r7, #20]
 81027ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81027f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 81027f4:	687b      	ldr	r3, [r7, #4]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	697a      	ldr	r2, [r7, #20]
 81027fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 81027fc:	687b      	ldr	r3, [r7, #4]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	695b      	ldr	r3, [r3, #20]
 8102802:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102804:	697b      	ldr	r3, [r7, #20]
 8102806:	f023 0307 	bic.w	r3, r3, #7
 810280a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102810:	697a      	ldr	r2, [r7, #20]
 8102812:	4313      	orrs	r3, r2
 8102814:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810281a:	2b04      	cmp	r3, #4
 810281c:	d117      	bne.n	810284e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102822:	697a      	ldr	r2, [r7, #20]
 8102824:	4313      	orrs	r3, r2
 8102826:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810282c:	2b00      	cmp	r3, #0
 810282e:	d00e      	beq.n	810284e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102830:	6878      	ldr	r0, [r7, #4]
 8102832:	f001 fdd9 	bl	81043e8 <DMA_CheckFifoParam>
 8102836:	4603      	mov	r3, r0
 8102838:	2b00      	cmp	r3, #0
 810283a:	d008      	beq.n	810284e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	2240      	movs	r2, #64	; 0x40
 8102840:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	2201      	movs	r2, #1
 8102846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810284a:	2301      	movs	r3, #1
 810284c:	e195      	b.n	8102b7a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	697a      	ldr	r2, [r7, #20]
 8102854:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102856:	6878      	ldr	r0, [r7, #4]
 8102858:	f001 fd14 	bl	8104284 <DMA_CalcBaseAndBitshift>
 810285c:	4603      	mov	r3, r0
 810285e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102860:	687b      	ldr	r3, [r7, #4]
 8102862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102864:	f003 031f 	and.w	r3, r3, #31
 8102868:	223f      	movs	r2, #63	; 0x3f
 810286a:	409a      	lsls	r2, r3
 810286c:	68bb      	ldr	r3, [r7, #8]
 810286e:	609a      	str	r2, [r3, #8]
 8102870:	e0cb      	b.n	8102a0a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	4a3b      	ldr	r2, [pc, #236]	; (8102964 <HAL_DMA_Init+0x42c>)
 8102878:	4293      	cmp	r3, r2
 810287a:	d022      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 810287c:	687b      	ldr	r3, [r7, #4]
 810287e:	681b      	ldr	r3, [r3, #0]
 8102880:	4a39      	ldr	r2, [pc, #228]	; (8102968 <HAL_DMA_Init+0x430>)
 8102882:	4293      	cmp	r3, r2
 8102884:	d01d      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	681b      	ldr	r3, [r3, #0]
 810288a:	4a38      	ldr	r2, [pc, #224]	; (810296c <HAL_DMA_Init+0x434>)
 810288c:	4293      	cmp	r3, r2
 810288e:	d018      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	4a36      	ldr	r2, [pc, #216]	; (8102970 <HAL_DMA_Init+0x438>)
 8102896:	4293      	cmp	r3, r2
 8102898:	d013      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 810289a:	687b      	ldr	r3, [r7, #4]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	4a35      	ldr	r2, [pc, #212]	; (8102974 <HAL_DMA_Init+0x43c>)
 81028a0:	4293      	cmp	r3, r2
 81028a2:	d00e      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 81028a4:	687b      	ldr	r3, [r7, #4]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	4a33      	ldr	r2, [pc, #204]	; (8102978 <HAL_DMA_Init+0x440>)
 81028aa:	4293      	cmp	r3, r2
 81028ac:	d009      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 81028ae:	687b      	ldr	r3, [r7, #4]
 81028b0:	681b      	ldr	r3, [r3, #0]
 81028b2:	4a32      	ldr	r2, [pc, #200]	; (810297c <HAL_DMA_Init+0x444>)
 81028b4:	4293      	cmp	r3, r2
 81028b6:	d004      	beq.n	81028c2 <HAL_DMA_Init+0x38a>
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	4a30      	ldr	r2, [pc, #192]	; (8102980 <HAL_DMA_Init+0x448>)
 81028be:	4293      	cmp	r3, r2
 81028c0:	d101      	bne.n	81028c6 <HAL_DMA_Init+0x38e>
 81028c2:	2301      	movs	r3, #1
 81028c4:	e000      	b.n	81028c8 <HAL_DMA_Init+0x390>
 81028c6:	2300      	movs	r3, #0
 81028c8:	2b00      	cmp	r3, #0
 81028ca:	f000 8095 	beq.w	81029f8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	681b      	ldr	r3, [r3, #0]
 81028d2:	4a24      	ldr	r2, [pc, #144]	; (8102964 <HAL_DMA_Init+0x42c>)
 81028d4:	4293      	cmp	r3, r2
 81028d6:	d021      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	4a22      	ldr	r2, [pc, #136]	; (8102968 <HAL_DMA_Init+0x430>)
 81028de:	4293      	cmp	r3, r2
 81028e0:	d01c      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 81028e2:	687b      	ldr	r3, [r7, #4]
 81028e4:	681b      	ldr	r3, [r3, #0]
 81028e6:	4a21      	ldr	r2, [pc, #132]	; (810296c <HAL_DMA_Init+0x434>)
 81028e8:	4293      	cmp	r3, r2
 81028ea:	d017      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	681b      	ldr	r3, [r3, #0]
 81028f0:	4a1f      	ldr	r2, [pc, #124]	; (8102970 <HAL_DMA_Init+0x438>)
 81028f2:	4293      	cmp	r3, r2
 81028f4:	d012      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 81028f6:	687b      	ldr	r3, [r7, #4]
 81028f8:	681b      	ldr	r3, [r3, #0]
 81028fa:	4a1e      	ldr	r2, [pc, #120]	; (8102974 <HAL_DMA_Init+0x43c>)
 81028fc:	4293      	cmp	r3, r2
 81028fe:	d00d      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	4a1c      	ldr	r2, [pc, #112]	; (8102978 <HAL_DMA_Init+0x440>)
 8102906:	4293      	cmp	r3, r2
 8102908:	d008      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	4a1b      	ldr	r2, [pc, #108]	; (810297c <HAL_DMA_Init+0x444>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d003      	beq.n	810291c <HAL_DMA_Init+0x3e4>
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	4a19      	ldr	r2, [pc, #100]	; (8102980 <HAL_DMA_Init+0x448>)
 810291a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810291c:	687b      	ldr	r3, [r7, #4]
 810291e:	2202      	movs	r2, #2
 8102920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	2200      	movs	r2, #0
 8102928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	681b      	ldr	r3, [r3, #0]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102934:	697b      	ldr	r3, [r7, #20]
 8102936:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 810293a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 810293e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	689b      	ldr	r3, [r3, #8]
 8102944:	2b40      	cmp	r3, #64	; 0x40
 8102946:	d01d      	beq.n	8102984 <HAL_DMA_Init+0x44c>
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	689b      	ldr	r3, [r3, #8]
 810294c:	2b80      	cmp	r3, #128	; 0x80
 810294e:	d102      	bne.n	8102956 <HAL_DMA_Init+0x41e>
 8102950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102954:	e017      	b.n	8102986 <HAL_DMA_Init+0x44e>
 8102956:	2300      	movs	r3, #0
 8102958:	e015      	b.n	8102986 <HAL_DMA_Init+0x44e>
 810295a:	bf00      	nop
 810295c:	fe10803f 	.word	0xfe10803f
 8102960:	5c001000 	.word	0x5c001000
 8102964:	58025408 	.word	0x58025408
 8102968:	5802541c 	.word	0x5802541c
 810296c:	58025430 	.word	0x58025430
 8102970:	58025444 	.word	0x58025444
 8102974:	58025458 	.word	0x58025458
 8102978:	5802546c 	.word	0x5802546c
 810297c:	58025480 	.word	0x58025480
 8102980:	58025494 	.word	0x58025494
 8102984:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102986:	687a      	ldr	r2, [r7, #4]
 8102988:	68d2      	ldr	r2, [r2, #12]
 810298a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810298c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	691b      	ldr	r3, [r3, #16]
 8102992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	695b      	ldr	r3, [r3, #20]
 810299a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 810299c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 810299e:	687b      	ldr	r3, [r7, #4]
 81029a0:	699b      	ldr	r3, [r3, #24]
 81029a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81029a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	69db      	ldr	r3, [r3, #28]
 81029aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81029ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	6a1b      	ldr	r3, [r3, #32]
 81029b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81029b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81029b6:	697a      	ldr	r2, [r7, #20]
 81029b8:	4313      	orrs	r3, r2
 81029ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	681b      	ldr	r3, [r3, #0]
 81029c0:	697a      	ldr	r2, [r7, #20]
 81029c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	681b      	ldr	r3, [r3, #0]
 81029c8:	461a      	mov	r2, r3
 81029ca:	4b6e      	ldr	r3, [pc, #440]	; (8102b84 <HAL_DMA_Init+0x64c>)
 81029cc:	4413      	add	r3, r2
 81029ce:	4a6e      	ldr	r2, [pc, #440]	; (8102b88 <HAL_DMA_Init+0x650>)
 81029d0:	fba2 2303 	umull	r2, r3, r2, r3
 81029d4:	091b      	lsrs	r3, r3, #4
 81029d6:	009a      	lsls	r2, r3, #2
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81029dc:	6878      	ldr	r0, [r7, #4]
 81029de:	f001 fc51 	bl	8104284 <DMA_CalcBaseAndBitshift>
 81029e2:	4603      	mov	r3, r0
 81029e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81029ea:	f003 031f 	and.w	r3, r3, #31
 81029ee:	2201      	movs	r2, #1
 81029f0:	409a      	lsls	r2, r3
 81029f2:	68fb      	ldr	r3, [r7, #12]
 81029f4:	605a      	str	r2, [r3, #4]
 81029f6:	e008      	b.n	8102a0a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 81029f8:	687b      	ldr	r3, [r7, #4]
 81029fa:	2240      	movs	r2, #64	; 0x40
 81029fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 81029fe:	687b      	ldr	r3, [r7, #4]
 8102a00:	2203      	movs	r2, #3
 8102a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102a06:	2301      	movs	r3, #1
 8102a08:	e0b7      	b.n	8102b7a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	681b      	ldr	r3, [r3, #0]
 8102a0e:	4a5f      	ldr	r2, [pc, #380]	; (8102b8c <HAL_DMA_Init+0x654>)
 8102a10:	4293      	cmp	r3, r2
 8102a12:	d072      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	4a5d      	ldr	r2, [pc, #372]	; (8102b90 <HAL_DMA_Init+0x658>)
 8102a1a:	4293      	cmp	r3, r2
 8102a1c:	d06d      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	4a5c      	ldr	r2, [pc, #368]	; (8102b94 <HAL_DMA_Init+0x65c>)
 8102a24:	4293      	cmp	r3, r2
 8102a26:	d068      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	4a5a      	ldr	r2, [pc, #360]	; (8102b98 <HAL_DMA_Init+0x660>)
 8102a2e:	4293      	cmp	r3, r2
 8102a30:	d063      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	681b      	ldr	r3, [r3, #0]
 8102a36:	4a59      	ldr	r2, [pc, #356]	; (8102b9c <HAL_DMA_Init+0x664>)
 8102a38:	4293      	cmp	r3, r2
 8102a3a:	d05e      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	681b      	ldr	r3, [r3, #0]
 8102a40:	4a57      	ldr	r2, [pc, #348]	; (8102ba0 <HAL_DMA_Init+0x668>)
 8102a42:	4293      	cmp	r3, r2
 8102a44:	d059      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	4a56      	ldr	r2, [pc, #344]	; (8102ba4 <HAL_DMA_Init+0x66c>)
 8102a4c:	4293      	cmp	r3, r2
 8102a4e:	d054      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	681b      	ldr	r3, [r3, #0]
 8102a54:	4a54      	ldr	r2, [pc, #336]	; (8102ba8 <HAL_DMA_Init+0x670>)
 8102a56:	4293      	cmp	r3, r2
 8102a58:	d04f      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	4a53      	ldr	r2, [pc, #332]	; (8102bac <HAL_DMA_Init+0x674>)
 8102a60:	4293      	cmp	r3, r2
 8102a62:	d04a      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	681b      	ldr	r3, [r3, #0]
 8102a68:	4a51      	ldr	r2, [pc, #324]	; (8102bb0 <HAL_DMA_Init+0x678>)
 8102a6a:	4293      	cmp	r3, r2
 8102a6c:	d045      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a6e:	687b      	ldr	r3, [r7, #4]
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	4a50      	ldr	r2, [pc, #320]	; (8102bb4 <HAL_DMA_Init+0x67c>)
 8102a74:	4293      	cmp	r3, r2
 8102a76:	d040      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	4a4e      	ldr	r2, [pc, #312]	; (8102bb8 <HAL_DMA_Init+0x680>)
 8102a7e:	4293      	cmp	r3, r2
 8102a80:	d03b      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	4a4d      	ldr	r2, [pc, #308]	; (8102bbc <HAL_DMA_Init+0x684>)
 8102a88:	4293      	cmp	r3, r2
 8102a8a:	d036      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	4a4b      	ldr	r2, [pc, #300]	; (8102bc0 <HAL_DMA_Init+0x688>)
 8102a92:	4293      	cmp	r3, r2
 8102a94:	d031      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	4a4a      	ldr	r2, [pc, #296]	; (8102bc4 <HAL_DMA_Init+0x68c>)
 8102a9c:	4293      	cmp	r3, r2
 8102a9e:	d02c      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	4a48      	ldr	r2, [pc, #288]	; (8102bc8 <HAL_DMA_Init+0x690>)
 8102aa6:	4293      	cmp	r3, r2
 8102aa8:	d027      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	4a47      	ldr	r2, [pc, #284]	; (8102bcc <HAL_DMA_Init+0x694>)
 8102ab0:	4293      	cmp	r3, r2
 8102ab2:	d022      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	4a45      	ldr	r2, [pc, #276]	; (8102bd0 <HAL_DMA_Init+0x698>)
 8102aba:	4293      	cmp	r3, r2
 8102abc:	d01d      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102abe:	687b      	ldr	r3, [r7, #4]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	4a44      	ldr	r2, [pc, #272]	; (8102bd4 <HAL_DMA_Init+0x69c>)
 8102ac4:	4293      	cmp	r3, r2
 8102ac6:	d018      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	4a42      	ldr	r2, [pc, #264]	; (8102bd8 <HAL_DMA_Init+0x6a0>)
 8102ace:	4293      	cmp	r3, r2
 8102ad0:	d013      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	4a41      	ldr	r2, [pc, #260]	; (8102bdc <HAL_DMA_Init+0x6a4>)
 8102ad8:	4293      	cmp	r3, r2
 8102ada:	d00e      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	4a3f      	ldr	r2, [pc, #252]	; (8102be0 <HAL_DMA_Init+0x6a8>)
 8102ae2:	4293      	cmp	r3, r2
 8102ae4:	d009      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a3e      	ldr	r2, [pc, #248]	; (8102be4 <HAL_DMA_Init+0x6ac>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	d004      	beq.n	8102afa <HAL_DMA_Init+0x5c2>
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	4a3c      	ldr	r2, [pc, #240]	; (8102be8 <HAL_DMA_Init+0x6b0>)
 8102af6:	4293      	cmp	r3, r2
 8102af8:	d101      	bne.n	8102afe <HAL_DMA_Init+0x5c6>
 8102afa:	2301      	movs	r3, #1
 8102afc:	e000      	b.n	8102b00 <HAL_DMA_Init+0x5c8>
 8102afe:	2300      	movs	r3, #0
 8102b00:	2b00      	cmp	r3, #0
 8102b02:	d032      	beq.n	8102b6a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102b04:	6878      	ldr	r0, [r7, #4]
 8102b06:	f001 fceb 	bl	81044e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102b0a:	687b      	ldr	r3, [r7, #4]
 8102b0c:	689b      	ldr	r3, [r3, #8]
 8102b0e:	2b80      	cmp	r3, #128	; 0x80
 8102b10:	d102      	bne.n	8102b18 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	2200      	movs	r2, #0
 8102b16:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	685a      	ldr	r2, [r3, #4]
 8102b1c:	687b      	ldr	r3, [r7, #4]
 8102b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b20:	b2d2      	uxtb	r2, r2
 8102b22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102b28:	687a      	ldr	r2, [r7, #4]
 8102b2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102b2c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	685b      	ldr	r3, [r3, #4]
 8102b32:	2b00      	cmp	r3, #0
 8102b34:	d010      	beq.n	8102b58 <HAL_DMA_Init+0x620>
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	685b      	ldr	r3, [r3, #4]
 8102b3a:	2b08      	cmp	r3, #8
 8102b3c:	d80c      	bhi.n	8102b58 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102b3e:	6878      	ldr	r0, [r7, #4]
 8102b40:	f001 fd68 	bl	8104614 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102b48:	2200      	movs	r2, #0
 8102b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102b50:	687a      	ldr	r2, [r7, #4]
 8102b52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102b54:	605a      	str	r2, [r3, #4]
 8102b56:	e008      	b.n	8102b6a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	2200      	movs	r2, #0
 8102b5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102b5e:	687b      	ldr	r3, [r7, #4]
 8102b60:	2200      	movs	r2, #0
 8102b62:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	2200      	movs	r2, #0
 8102b68:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	2200      	movs	r2, #0
 8102b6e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	2201      	movs	r2, #1
 8102b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102b78:	2300      	movs	r3, #0
}
 8102b7a:	4618      	mov	r0, r3
 8102b7c:	3718      	adds	r7, #24
 8102b7e:	46bd      	mov	sp, r7
 8102b80:	bd80      	pop	{r7, pc}
 8102b82:	bf00      	nop
 8102b84:	a7fdabf8 	.word	0xa7fdabf8
 8102b88:	cccccccd 	.word	0xcccccccd
 8102b8c:	40020010 	.word	0x40020010
 8102b90:	40020028 	.word	0x40020028
 8102b94:	40020040 	.word	0x40020040
 8102b98:	40020058 	.word	0x40020058
 8102b9c:	40020070 	.word	0x40020070
 8102ba0:	40020088 	.word	0x40020088
 8102ba4:	400200a0 	.word	0x400200a0
 8102ba8:	400200b8 	.word	0x400200b8
 8102bac:	40020410 	.word	0x40020410
 8102bb0:	40020428 	.word	0x40020428
 8102bb4:	40020440 	.word	0x40020440
 8102bb8:	40020458 	.word	0x40020458
 8102bbc:	40020470 	.word	0x40020470
 8102bc0:	40020488 	.word	0x40020488
 8102bc4:	400204a0 	.word	0x400204a0
 8102bc8:	400204b8 	.word	0x400204b8
 8102bcc:	58025408 	.word	0x58025408
 8102bd0:	5802541c 	.word	0x5802541c
 8102bd4:	58025430 	.word	0x58025430
 8102bd8:	58025444 	.word	0x58025444
 8102bdc:	58025458 	.word	0x58025458
 8102be0:	5802546c 	.word	0x5802546c
 8102be4:	58025480 	.word	0x58025480
 8102be8:	58025494 	.word	0x58025494

08102bec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102bec:	b580      	push	{r7, lr}
 8102bee:	b086      	sub	sp, #24
 8102bf0:	af00      	add	r7, sp, #0
 8102bf2:	60f8      	str	r0, [r7, #12]
 8102bf4:	60b9      	str	r1, [r7, #8]
 8102bf6:	607a      	str	r2, [r7, #4]
 8102bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102bfa:	2300      	movs	r3, #0
 8102bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102bfe:	68fb      	ldr	r3, [r7, #12]
 8102c00:	2b00      	cmp	r3, #0
 8102c02:	d101      	bne.n	8102c08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102c04:	2301      	movs	r3, #1
 8102c06:	e226      	b.n	8103056 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102c08:	68fb      	ldr	r3, [r7, #12]
 8102c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102c0e:	2b01      	cmp	r3, #1
 8102c10:	d101      	bne.n	8102c16 <HAL_DMA_Start_IT+0x2a>
 8102c12:	2302      	movs	r3, #2
 8102c14:	e21f      	b.n	8103056 <HAL_DMA_Start_IT+0x46a>
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	2201      	movs	r2, #1
 8102c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102c1e:	68fb      	ldr	r3, [r7, #12]
 8102c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102c24:	b2db      	uxtb	r3, r3
 8102c26:	2b01      	cmp	r3, #1
 8102c28:	f040 820a 	bne.w	8103040 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102c2c:	68fb      	ldr	r3, [r7, #12]
 8102c2e:	2202      	movs	r2, #2
 8102c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	2200      	movs	r2, #0
 8102c38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102c3a:	68fb      	ldr	r3, [r7, #12]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	4a68      	ldr	r2, [pc, #416]	; (8102de0 <HAL_DMA_Start_IT+0x1f4>)
 8102c40:	4293      	cmp	r3, r2
 8102c42:	d04a      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c44:	68fb      	ldr	r3, [r7, #12]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	4a66      	ldr	r2, [pc, #408]	; (8102de4 <HAL_DMA_Start_IT+0x1f8>)
 8102c4a:	4293      	cmp	r3, r2
 8102c4c:	d045      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c4e:	68fb      	ldr	r3, [r7, #12]
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	4a65      	ldr	r2, [pc, #404]	; (8102de8 <HAL_DMA_Start_IT+0x1fc>)
 8102c54:	4293      	cmp	r3, r2
 8102c56:	d040      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	4a63      	ldr	r2, [pc, #396]	; (8102dec <HAL_DMA_Start_IT+0x200>)
 8102c5e:	4293      	cmp	r3, r2
 8102c60:	d03b      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c62:	68fb      	ldr	r3, [r7, #12]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	4a62      	ldr	r2, [pc, #392]	; (8102df0 <HAL_DMA_Start_IT+0x204>)
 8102c68:	4293      	cmp	r3, r2
 8102c6a:	d036      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	4a60      	ldr	r2, [pc, #384]	; (8102df4 <HAL_DMA_Start_IT+0x208>)
 8102c72:	4293      	cmp	r3, r2
 8102c74:	d031      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	4a5f      	ldr	r2, [pc, #380]	; (8102df8 <HAL_DMA_Start_IT+0x20c>)
 8102c7c:	4293      	cmp	r3, r2
 8102c7e:	d02c      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c80:	68fb      	ldr	r3, [r7, #12]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	4a5d      	ldr	r2, [pc, #372]	; (8102dfc <HAL_DMA_Start_IT+0x210>)
 8102c86:	4293      	cmp	r3, r2
 8102c88:	d027      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	681b      	ldr	r3, [r3, #0]
 8102c8e:	4a5c      	ldr	r2, [pc, #368]	; (8102e00 <HAL_DMA_Start_IT+0x214>)
 8102c90:	4293      	cmp	r3, r2
 8102c92:	d022      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	4a5a      	ldr	r2, [pc, #360]	; (8102e04 <HAL_DMA_Start_IT+0x218>)
 8102c9a:	4293      	cmp	r3, r2
 8102c9c:	d01d      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	4a59      	ldr	r2, [pc, #356]	; (8102e08 <HAL_DMA_Start_IT+0x21c>)
 8102ca4:	4293      	cmp	r3, r2
 8102ca6:	d018      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	4a57      	ldr	r2, [pc, #348]	; (8102e0c <HAL_DMA_Start_IT+0x220>)
 8102cae:	4293      	cmp	r3, r2
 8102cb0:	d013      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102cb2:	68fb      	ldr	r3, [r7, #12]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4a56      	ldr	r2, [pc, #344]	; (8102e10 <HAL_DMA_Start_IT+0x224>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d00e      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102cbc:	68fb      	ldr	r3, [r7, #12]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	4a54      	ldr	r2, [pc, #336]	; (8102e14 <HAL_DMA_Start_IT+0x228>)
 8102cc2:	4293      	cmp	r3, r2
 8102cc4:	d009      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a53      	ldr	r2, [pc, #332]	; (8102e18 <HAL_DMA_Start_IT+0x22c>)
 8102ccc:	4293      	cmp	r3, r2
 8102cce:	d004      	beq.n	8102cda <HAL_DMA_Start_IT+0xee>
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	4a51      	ldr	r2, [pc, #324]	; (8102e1c <HAL_DMA_Start_IT+0x230>)
 8102cd6:	4293      	cmp	r3, r2
 8102cd8:	d108      	bne.n	8102cec <HAL_DMA_Start_IT+0x100>
 8102cda:	68fb      	ldr	r3, [r7, #12]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	681a      	ldr	r2, [r3, #0]
 8102ce0:	68fb      	ldr	r3, [r7, #12]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	f022 0201 	bic.w	r2, r2, #1
 8102ce8:	601a      	str	r2, [r3, #0]
 8102cea:	e007      	b.n	8102cfc <HAL_DMA_Start_IT+0x110>
 8102cec:	68fb      	ldr	r3, [r7, #12]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	681a      	ldr	r2, [r3, #0]
 8102cf2:	68fb      	ldr	r3, [r7, #12]
 8102cf4:	681b      	ldr	r3, [r3, #0]
 8102cf6:	f022 0201 	bic.w	r2, r2, #1
 8102cfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102cfc:	683b      	ldr	r3, [r7, #0]
 8102cfe:	687a      	ldr	r2, [r7, #4]
 8102d00:	68b9      	ldr	r1, [r7, #8]
 8102d02:	68f8      	ldr	r0, [r7, #12]
 8102d04:	f001 f912 	bl	8103f2c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d08:	68fb      	ldr	r3, [r7, #12]
 8102d0a:	681b      	ldr	r3, [r3, #0]
 8102d0c:	4a34      	ldr	r2, [pc, #208]	; (8102de0 <HAL_DMA_Start_IT+0x1f4>)
 8102d0e:	4293      	cmp	r3, r2
 8102d10:	d04a      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a33      	ldr	r2, [pc, #204]	; (8102de4 <HAL_DMA_Start_IT+0x1f8>)
 8102d18:	4293      	cmp	r3, r2
 8102d1a:	d045      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	4a31      	ldr	r2, [pc, #196]	; (8102de8 <HAL_DMA_Start_IT+0x1fc>)
 8102d22:	4293      	cmp	r3, r2
 8102d24:	d040      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	4a30      	ldr	r2, [pc, #192]	; (8102dec <HAL_DMA_Start_IT+0x200>)
 8102d2c:	4293      	cmp	r3, r2
 8102d2e:	d03b      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d30:	68fb      	ldr	r3, [r7, #12]
 8102d32:	681b      	ldr	r3, [r3, #0]
 8102d34:	4a2e      	ldr	r2, [pc, #184]	; (8102df0 <HAL_DMA_Start_IT+0x204>)
 8102d36:	4293      	cmp	r3, r2
 8102d38:	d036      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d3a:	68fb      	ldr	r3, [r7, #12]
 8102d3c:	681b      	ldr	r3, [r3, #0]
 8102d3e:	4a2d      	ldr	r2, [pc, #180]	; (8102df4 <HAL_DMA_Start_IT+0x208>)
 8102d40:	4293      	cmp	r3, r2
 8102d42:	d031      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d44:	68fb      	ldr	r3, [r7, #12]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	4a2b      	ldr	r2, [pc, #172]	; (8102df8 <HAL_DMA_Start_IT+0x20c>)
 8102d4a:	4293      	cmp	r3, r2
 8102d4c:	d02c      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d4e:	68fb      	ldr	r3, [r7, #12]
 8102d50:	681b      	ldr	r3, [r3, #0]
 8102d52:	4a2a      	ldr	r2, [pc, #168]	; (8102dfc <HAL_DMA_Start_IT+0x210>)
 8102d54:	4293      	cmp	r3, r2
 8102d56:	d027      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d58:	68fb      	ldr	r3, [r7, #12]
 8102d5a:	681b      	ldr	r3, [r3, #0]
 8102d5c:	4a28      	ldr	r2, [pc, #160]	; (8102e00 <HAL_DMA_Start_IT+0x214>)
 8102d5e:	4293      	cmp	r3, r2
 8102d60:	d022      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	4a27      	ldr	r2, [pc, #156]	; (8102e04 <HAL_DMA_Start_IT+0x218>)
 8102d68:	4293      	cmp	r3, r2
 8102d6a:	d01d      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d6c:	68fb      	ldr	r3, [r7, #12]
 8102d6e:	681b      	ldr	r3, [r3, #0]
 8102d70:	4a25      	ldr	r2, [pc, #148]	; (8102e08 <HAL_DMA_Start_IT+0x21c>)
 8102d72:	4293      	cmp	r3, r2
 8102d74:	d018      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	4a24      	ldr	r2, [pc, #144]	; (8102e0c <HAL_DMA_Start_IT+0x220>)
 8102d7c:	4293      	cmp	r3, r2
 8102d7e:	d013      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d80:	68fb      	ldr	r3, [r7, #12]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	4a22      	ldr	r2, [pc, #136]	; (8102e10 <HAL_DMA_Start_IT+0x224>)
 8102d86:	4293      	cmp	r3, r2
 8102d88:	d00e      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d8a:	68fb      	ldr	r3, [r7, #12]
 8102d8c:	681b      	ldr	r3, [r3, #0]
 8102d8e:	4a21      	ldr	r2, [pc, #132]	; (8102e14 <HAL_DMA_Start_IT+0x228>)
 8102d90:	4293      	cmp	r3, r2
 8102d92:	d009      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d94:	68fb      	ldr	r3, [r7, #12]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	4a1f      	ldr	r2, [pc, #124]	; (8102e18 <HAL_DMA_Start_IT+0x22c>)
 8102d9a:	4293      	cmp	r3, r2
 8102d9c:	d004      	beq.n	8102da8 <HAL_DMA_Start_IT+0x1bc>
 8102d9e:	68fb      	ldr	r3, [r7, #12]
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	4a1e      	ldr	r2, [pc, #120]	; (8102e1c <HAL_DMA_Start_IT+0x230>)
 8102da4:	4293      	cmp	r3, r2
 8102da6:	d101      	bne.n	8102dac <HAL_DMA_Start_IT+0x1c0>
 8102da8:	2301      	movs	r3, #1
 8102daa:	e000      	b.n	8102dae <HAL_DMA_Start_IT+0x1c2>
 8102dac:	2300      	movs	r3, #0
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d036      	beq.n	8102e20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102db2:	68fb      	ldr	r3, [r7, #12]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	f023 021e 	bic.w	r2, r3, #30
 8102dbc:	68fb      	ldr	r3, [r7, #12]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	f042 0216 	orr.w	r2, r2, #22
 8102dc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102dc6:	68fb      	ldr	r3, [r7, #12]
 8102dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102dca:	2b00      	cmp	r3, #0
 8102dcc:	d03e      	beq.n	8102e4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	681a      	ldr	r2, [r3, #0]
 8102dd4:	68fb      	ldr	r3, [r7, #12]
 8102dd6:	681b      	ldr	r3, [r3, #0]
 8102dd8:	f042 0208 	orr.w	r2, r2, #8
 8102ddc:	601a      	str	r2, [r3, #0]
 8102dde:	e035      	b.n	8102e4c <HAL_DMA_Start_IT+0x260>
 8102de0:	40020010 	.word	0x40020010
 8102de4:	40020028 	.word	0x40020028
 8102de8:	40020040 	.word	0x40020040
 8102dec:	40020058 	.word	0x40020058
 8102df0:	40020070 	.word	0x40020070
 8102df4:	40020088 	.word	0x40020088
 8102df8:	400200a0 	.word	0x400200a0
 8102dfc:	400200b8 	.word	0x400200b8
 8102e00:	40020410 	.word	0x40020410
 8102e04:	40020428 	.word	0x40020428
 8102e08:	40020440 	.word	0x40020440
 8102e0c:	40020458 	.word	0x40020458
 8102e10:	40020470 	.word	0x40020470
 8102e14:	40020488 	.word	0x40020488
 8102e18:	400204a0 	.word	0x400204a0
 8102e1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102e20:	68fb      	ldr	r3, [r7, #12]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	681b      	ldr	r3, [r3, #0]
 8102e26:	f023 020e 	bic.w	r2, r3, #14
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	f042 020a 	orr.w	r2, r2, #10
 8102e32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e38:	2b00      	cmp	r3, #0
 8102e3a:	d007      	beq.n	8102e4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	681a      	ldr	r2, [r3, #0]
 8102e42:	68fb      	ldr	r3, [r7, #12]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	f042 0204 	orr.w	r2, r2, #4
 8102e4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	4a83      	ldr	r2, [pc, #524]	; (8103060 <HAL_DMA_Start_IT+0x474>)
 8102e52:	4293      	cmp	r3, r2
 8102e54:	d072      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e56:	68fb      	ldr	r3, [r7, #12]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	4a82      	ldr	r2, [pc, #520]	; (8103064 <HAL_DMA_Start_IT+0x478>)
 8102e5c:	4293      	cmp	r3, r2
 8102e5e:	d06d      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	681b      	ldr	r3, [r3, #0]
 8102e64:	4a80      	ldr	r2, [pc, #512]	; (8103068 <HAL_DMA_Start_IT+0x47c>)
 8102e66:	4293      	cmp	r3, r2
 8102e68:	d068      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e6a:	68fb      	ldr	r3, [r7, #12]
 8102e6c:	681b      	ldr	r3, [r3, #0]
 8102e6e:	4a7f      	ldr	r2, [pc, #508]	; (810306c <HAL_DMA_Start_IT+0x480>)
 8102e70:	4293      	cmp	r3, r2
 8102e72:	d063      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e74:	68fb      	ldr	r3, [r7, #12]
 8102e76:	681b      	ldr	r3, [r3, #0]
 8102e78:	4a7d      	ldr	r2, [pc, #500]	; (8103070 <HAL_DMA_Start_IT+0x484>)
 8102e7a:	4293      	cmp	r3, r2
 8102e7c:	d05e      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e7e:	68fb      	ldr	r3, [r7, #12]
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	4a7c      	ldr	r2, [pc, #496]	; (8103074 <HAL_DMA_Start_IT+0x488>)
 8102e84:	4293      	cmp	r3, r2
 8102e86:	d059      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e88:	68fb      	ldr	r3, [r7, #12]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	4a7a      	ldr	r2, [pc, #488]	; (8103078 <HAL_DMA_Start_IT+0x48c>)
 8102e8e:	4293      	cmp	r3, r2
 8102e90:	d054      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e92:	68fb      	ldr	r3, [r7, #12]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	4a79      	ldr	r2, [pc, #484]	; (810307c <HAL_DMA_Start_IT+0x490>)
 8102e98:	4293      	cmp	r3, r2
 8102e9a:	d04f      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102e9c:	68fb      	ldr	r3, [r7, #12]
 8102e9e:	681b      	ldr	r3, [r3, #0]
 8102ea0:	4a77      	ldr	r2, [pc, #476]	; (8103080 <HAL_DMA_Start_IT+0x494>)
 8102ea2:	4293      	cmp	r3, r2
 8102ea4:	d04a      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ea6:	68fb      	ldr	r3, [r7, #12]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	4a76      	ldr	r2, [pc, #472]	; (8103084 <HAL_DMA_Start_IT+0x498>)
 8102eac:	4293      	cmp	r3, r2
 8102eae:	d045      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102eb0:	68fb      	ldr	r3, [r7, #12]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	4a74      	ldr	r2, [pc, #464]	; (8103088 <HAL_DMA_Start_IT+0x49c>)
 8102eb6:	4293      	cmp	r3, r2
 8102eb8:	d040      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	681b      	ldr	r3, [r3, #0]
 8102ebe:	4a73      	ldr	r2, [pc, #460]	; (810308c <HAL_DMA_Start_IT+0x4a0>)
 8102ec0:	4293      	cmp	r3, r2
 8102ec2:	d03b      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ec4:	68fb      	ldr	r3, [r7, #12]
 8102ec6:	681b      	ldr	r3, [r3, #0]
 8102ec8:	4a71      	ldr	r2, [pc, #452]	; (8103090 <HAL_DMA_Start_IT+0x4a4>)
 8102eca:	4293      	cmp	r3, r2
 8102ecc:	d036      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	681b      	ldr	r3, [r3, #0]
 8102ed2:	4a70      	ldr	r2, [pc, #448]	; (8103094 <HAL_DMA_Start_IT+0x4a8>)
 8102ed4:	4293      	cmp	r3, r2
 8102ed6:	d031      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ed8:	68fb      	ldr	r3, [r7, #12]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	4a6e      	ldr	r2, [pc, #440]	; (8103098 <HAL_DMA_Start_IT+0x4ac>)
 8102ede:	4293      	cmp	r3, r2
 8102ee0:	d02c      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ee2:	68fb      	ldr	r3, [r7, #12]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	4a6d      	ldr	r2, [pc, #436]	; (810309c <HAL_DMA_Start_IT+0x4b0>)
 8102ee8:	4293      	cmp	r3, r2
 8102eea:	d027      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	4a6b      	ldr	r2, [pc, #428]	; (81030a0 <HAL_DMA_Start_IT+0x4b4>)
 8102ef2:	4293      	cmp	r3, r2
 8102ef4:	d022      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102ef6:	68fb      	ldr	r3, [r7, #12]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	4a6a      	ldr	r2, [pc, #424]	; (81030a4 <HAL_DMA_Start_IT+0x4b8>)
 8102efc:	4293      	cmp	r3, r2
 8102efe:	d01d      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	4a68      	ldr	r2, [pc, #416]	; (81030a8 <HAL_DMA_Start_IT+0x4bc>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d018      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f0a:	68fb      	ldr	r3, [r7, #12]
 8102f0c:	681b      	ldr	r3, [r3, #0]
 8102f0e:	4a67      	ldr	r2, [pc, #412]	; (81030ac <HAL_DMA_Start_IT+0x4c0>)
 8102f10:	4293      	cmp	r3, r2
 8102f12:	d013      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f14:	68fb      	ldr	r3, [r7, #12]
 8102f16:	681b      	ldr	r3, [r3, #0]
 8102f18:	4a65      	ldr	r2, [pc, #404]	; (81030b0 <HAL_DMA_Start_IT+0x4c4>)
 8102f1a:	4293      	cmp	r3, r2
 8102f1c:	d00e      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f1e:	68fb      	ldr	r3, [r7, #12]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	4a64      	ldr	r2, [pc, #400]	; (81030b4 <HAL_DMA_Start_IT+0x4c8>)
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d009      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f28:	68fb      	ldr	r3, [r7, #12]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	4a62      	ldr	r2, [pc, #392]	; (81030b8 <HAL_DMA_Start_IT+0x4cc>)
 8102f2e:	4293      	cmp	r3, r2
 8102f30:	d004      	beq.n	8102f3c <HAL_DMA_Start_IT+0x350>
 8102f32:	68fb      	ldr	r3, [r7, #12]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4a61      	ldr	r2, [pc, #388]	; (81030bc <HAL_DMA_Start_IT+0x4d0>)
 8102f38:	4293      	cmp	r3, r2
 8102f3a:	d101      	bne.n	8102f40 <HAL_DMA_Start_IT+0x354>
 8102f3c:	2301      	movs	r3, #1
 8102f3e:	e000      	b.n	8102f42 <HAL_DMA_Start_IT+0x356>
 8102f40:	2300      	movs	r3, #0
 8102f42:	2b00      	cmp	r3, #0
 8102f44:	d01a      	beq.n	8102f7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102f46:	68fb      	ldr	r3, [r7, #12]
 8102f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	d007      	beq.n	8102f64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102f54:	68fb      	ldr	r3, [r7, #12]
 8102f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f58:	681a      	ldr	r2, [r3, #0]
 8102f5a:	68fb      	ldr	r3, [r7, #12]
 8102f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102f64:	68fb      	ldr	r3, [r7, #12]
 8102f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d007      	beq.n	8102f7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f70:	681a      	ldr	r2, [r3, #0]
 8102f72:	68fb      	ldr	r3, [r7, #12]
 8102f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102f7c:	68fb      	ldr	r3, [r7, #12]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	4a37      	ldr	r2, [pc, #220]	; (8103060 <HAL_DMA_Start_IT+0x474>)
 8102f82:	4293      	cmp	r3, r2
 8102f84:	d04a      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102f86:	68fb      	ldr	r3, [r7, #12]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	4a36      	ldr	r2, [pc, #216]	; (8103064 <HAL_DMA_Start_IT+0x478>)
 8102f8c:	4293      	cmp	r3, r2
 8102f8e:	d045      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102f90:	68fb      	ldr	r3, [r7, #12]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4a34      	ldr	r2, [pc, #208]	; (8103068 <HAL_DMA_Start_IT+0x47c>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d040      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102f9a:	68fb      	ldr	r3, [r7, #12]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	4a33      	ldr	r2, [pc, #204]	; (810306c <HAL_DMA_Start_IT+0x480>)
 8102fa0:	4293      	cmp	r3, r2
 8102fa2:	d03b      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	4a31      	ldr	r2, [pc, #196]	; (8103070 <HAL_DMA_Start_IT+0x484>)
 8102faa:	4293      	cmp	r3, r2
 8102fac:	d036      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fae:	68fb      	ldr	r3, [r7, #12]
 8102fb0:	681b      	ldr	r3, [r3, #0]
 8102fb2:	4a30      	ldr	r2, [pc, #192]	; (8103074 <HAL_DMA_Start_IT+0x488>)
 8102fb4:	4293      	cmp	r3, r2
 8102fb6:	d031      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fb8:	68fb      	ldr	r3, [r7, #12]
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	4a2e      	ldr	r2, [pc, #184]	; (8103078 <HAL_DMA_Start_IT+0x48c>)
 8102fbe:	4293      	cmp	r3, r2
 8102fc0:	d02c      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fc2:	68fb      	ldr	r3, [r7, #12]
 8102fc4:	681b      	ldr	r3, [r3, #0]
 8102fc6:	4a2d      	ldr	r2, [pc, #180]	; (810307c <HAL_DMA_Start_IT+0x490>)
 8102fc8:	4293      	cmp	r3, r2
 8102fca:	d027      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fcc:	68fb      	ldr	r3, [r7, #12]
 8102fce:	681b      	ldr	r3, [r3, #0]
 8102fd0:	4a2b      	ldr	r2, [pc, #172]	; (8103080 <HAL_DMA_Start_IT+0x494>)
 8102fd2:	4293      	cmp	r3, r2
 8102fd4:	d022      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fd6:	68fb      	ldr	r3, [r7, #12]
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	4a2a      	ldr	r2, [pc, #168]	; (8103084 <HAL_DMA_Start_IT+0x498>)
 8102fdc:	4293      	cmp	r3, r2
 8102fde:	d01d      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fe0:	68fb      	ldr	r3, [r7, #12]
 8102fe2:	681b      	ldr	r3, [r3, #0]
 8102fe4:	4a28      	ldr	r2, [pc, #160]	; (8103088 <HAL_DMA_Start_IT+0x49c>)
 8102fe6:	4293      	cmp	r3, r2
 8102fe8:	d018      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102fea:	68fb      	ldr	r3, [r7, #12]
 8102fec:	681b      	ldr	r3, [r3, #0]
 8102fee:	4a27      	ldr	r2, [pc, #156]	; (810308c <HAL_DMA_Start_IT+0x4a0>)
 8102ff0:	4293      	cmp	r3, r2
 8102ff2:	d013      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102ff4:	68fb      	ldr	r3, [r7, #12]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	4a25      	ldr	r2, [pc, #148]	; (8103090 <HAL_DMA_Start_IT+0x4a4>)
 8102ffa:	4293      	cmp	r3, r2
 8102ffc:	d00e      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8102ffe:	68fb      	ldr	r3, [r7, #12]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	4a24      	ldr	r2, [pc, #144]	; (8103094 <HAL_DMA_Start_IT+0x4a8>)
 8103004:	4293      	cmp	r3, r2
 8103006:	d009      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8103008:	68fb      	ldr	r3, [r7, #12]
 810300a:	681b      	ldr	r3, [r3, #0]
 810300c:	4a22      	ldr	r2, [pc, #136]	; (8103098 <HAL_DMA_Start_IT+0x4ac>)
 810300e:	4293      	cmp	r3, r2
 8103010:	d004      	beq.n	810301c <HAL_DMA_Start_IT+0x430>
 8103012:	68fb      	ldr	r3, [r7, #12]
 8103014:	681b      	ldr	r3, [r3, #0]
 8103016:	4a21      	ldr	r2, [pc, #132]	; (810309c <HAL_DMA_Start_IT+0x4b0>)
 8103018:	4293      	cmp	r3, r2
 810301a:	d108      	bne.n	810302e <HAL_DMA_Start_IT+0x442>
 810301c:	68fb      	ldr	r3, [r7, #12]
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	681a      	ldr	r2, [r3, #0]
 8103022:	68fb      	ldr	r3, [r7, #12]
 8103024:	681b      	ldr	r3, [r3, #0]
 8103026:	f042 0201 	orr.w	r2, r2, #1
 810302a:	601a      	str	r2, [r3, #0]
 810302c:	e012      	b.n	8103054 <HAL_DMA_Start_IT+0x468>
 810302e:	68fb      	ldr	r3, [r7, #12]
 8103030:	681b      	ldr	r3, [r3, #0]
 8103032:	681a      	ldr	r2, [r3, #0]
 8103034:	68fb      	ldr	r3, [r7, #12]
 8103036:	681b      	ldr	r3, [r3, #0]
 8103038:	f042 0201 	orr.w	r2, r2, #1
 810303c:	601a      	str	r2, [r3, #0]
 810303e:	e009      	b.n	8103054 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	2200      	movs	r2, #0
 810304c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8103050:	2301      	movs	r3, #1
 8103052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8103054:	7dfb      	ldrb	r3, [r7, #23]
}
 8103056:	4618      	mov	r0, r3
 8103058:	3718      	adds	r7, #24
 810305a:	46bd      	mov	sp, r7
 810305c:	bd80      	pop	{r7, pc}
 810305e:	bf00      	nop
 8103060:	40020010 	.word	0x40020010
 8103064:	40020028 	.word	0x40020028
 8103068:	40020040 	.word	0x40020040
 810306c:	40020058 	.word	0x40020058
 8103070:	40020070 	.word	0x40020070
 8103074:	40020088 	.word	0x40020088
 8103078:	400200a0 	.word	0x400200a0
 810307c:	400200b8 	.word	0x400200b8
 8103080:	40020410 	.word	0x40020410
 8103084:	40020428 	.word	0x40020428
 8103088:	40020440 	.word	0x40020440
 810308c:	40020458 	.word	0x40020458
 8103090:	40020470 	.word	0x40020470
 8103094:	40020488 	.word	0x40020488
 8103098:	400204a0 	.word	0x400204a0
 810309c:	400204b8 	.word	0x400204b8
 81030a0:	58025408 	.word	0x58025408
 81030a4:	5802541c 	.word	0x5802541c
 81030a8:	58025430 	.word	0x58025430
 81030ac:	58025444 	.word	0x58025444
 81030b0:	58025458 	.word	0x58025458
 81030b4:	5802546c 	.word	0x5802546c
 81030b8:	58025480 	.word	0x58025480
 81030bc:	58025494 	.word	0x58025494

081030c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 81030c0:	b580      	push	{r7, lr}
 81030c2:	b08a      	sub	sp, #40	; 0x28
 81030c4:	af00      	add	r7, sp, #0
 81030c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81030c8:	2300      	movs	r3, #0
 81030ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81030cc:	4b67      	ldr	r3, [pc, #412]	; (810326c <HAL_DMA_IRQHandler+0x1ac>)
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	4a67      	ldr	r2, [pc, #412]	; (8103270 <HAL_DMA_IRQHandler+0x1b0>)
 81030d2:	fba2 2303 	umull	r2, r3, r2, r3
 81030d6:	0a9b      	lsrs	r3, r3, #10
 81030d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81030e6:	6a3b      	ldr	r3, [r7, #32]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81030ec:	69fb      	ldr	r3, [r7, #28]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	681b      	ldr	r3, [r3, #0]
 81030f6:	4a5f      	ldr	r2, [pc, #380]	; (8103274 <HAL_DMA_IRQHandler+0x1b4>)
 81030f8:	4293      	cmp	r3, r2
 81030fa:	d04a      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	4a5d      	ldr	r2, [pc, #372]	; (8103278 <HAL_DMA_IRQHandler+0x1b8>)
 8103102:	4293      	cmp	r3, r2
 8103104:	d045      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	4a5c      	ldr	r2, [pc, #368]	; (810327c <HAL_DMA_IRQHandler+0x1bc>)
 810310c:	4293      	cmp	r3, r2
 810310e:	d040      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	681b      	ldr	r3, [r3, #0]
 8103114:	4a5a      	ldr	r2, [pc, #360]	; (8103280 <HAL_DMA_IRQHandler+0x1c0>)
 8103116:	4293      	cmp	r3, r2
 8103118:	d03b      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	4a59      	ldr	r2, [pc, #356]	; (8103284 <HAL_DMA_IRQHandler+0x1c4>)
 8103120:	4293      	cmp	r3, r2
 8103122:	d036      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4a57      	ldr	r2, [pc, #348]	; (8103288 <HAL_DMA_IRQHandler+0x1c8>)
 810312a:	4293      	cmp	r3, r2
 810312c:	d031      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	4a56      	ldr	r2, [pc, #344]	; (810328c <HAL_DMA_IRQHandler+0x1cc>)
 8103134:	4293      	cmp	r3, r2
 8103136:	d02c      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103138:	687b      	ldr	r3, [r7, #4]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	4a54      	ldr	r2, [pc, #336]	; (8103290 <HAL_DMA_IRQHandler+0x1d0>)
 810313e:	4293      	cmp	r3, r2
 8103140:	d027      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	681b      	ldr	r3, [r3, #0]
 8103146:	4a53      	ldr	r2, [pc, #332]	; (8103294 <HAL_DMA_IRQHandler+0x1d4>)
 8103148:	4293      	cmp	r3, r2
 810314a:	d022      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	681b      	ldr	r3, [r3, #0]
 8103150:	4a51      	ldr	r2, [pc, #324]	; (8103298 <HAL_DMA_IRQHandler+0x1d8>)
 8103152:	4293      	cmp	r3, r2
 8103154:	d01d      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	4a50      	ldr	r2, [pc, #320]	; (810329c <HAL_DMA_IRQHandler+0x1dc>)
 810315c:	4293      	cmp	r3, r2
 810315e:	d018      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	4a4e      	ldr	r2, [pc, #312]	; (81032a0 <HAL_DMA_IRQHandler+0x1e0>)
 8103166:	4293      	cmp	r3, r2
 8103168:	d013      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	4a4d      	ldr	r2, [pc, #308]	; (81032a4 <HAL_DMA_IRQHandler+0x1e4>)
 8103170:	4293      	cmp	r3, r2
 8103172:	d00e      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	4a4b      	ldr	r2, [pc, #300]	; (81032a8 <HAL_DMA_IRQHandler+0x1e8>)
 810317a:	4293      	cmp	r3, r2
 810317c:	d009      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	4a4a      	ldr	r2, [pc, #296]	; (81032ac <HAL_DMA_IRQHandler+0x1ec>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d004      	beq.n	8103192 <HAL_DMA_IRQHandler+0xd2>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	4a48      	ldr	r2, [pc, #288]	; (81032b0 <HAL_DMA_IRQHandler+0x1f0>)
 810318e:	4293      	cmp	r3, r2
 8103190:	d101      	bne.n	8103196 <HAL_DMA_IRQHandler+0xd6>
 8103192:	2301      	movs	r3, #1
 8103194:	e000      	b.n	8103198 <HAL_DMA_IRQHandler+0xd8>
 8103196:	2300      	movs	r3, #0
 8103198:	2b00      	cmp	r3, #0
 810319a:	f000 842b 	beq.w	81039f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810319e:	687b      	ldr	r3, [r7, #4]
 81031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81031a2:	f003 031f 	and.w	r3, r3, #31
 81031a6:	2208      	movs	r2, #8
 81031a8:	409a      	lsls	r2, r3
 81031aa:	69bb      	ldr	r3, [r7, #24]
 81031ac:	4013      	ands	r3, r2
 81031ae:	2b00      	cmp	r3, #0
 81031b0:	f000 80a2 	beq.w	81032f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	681b      	ldr	r3, [r3, #0]
 81031b8:	4a2e      	ldr	r2, [pc, #184]	; (8103274 <HAL_DMA_IRQHandler+0x1b4>)
 81031ba:	4293      	cmp	r3, r2
 81031bc:	d04a      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	681b      	ldr	r3, [r3, #0]
 81031c2:	4a2d      	ldr	r2, [pc, #180]	; (8103278 <HAL_DMA_IRQHandler+0x1b8>)
 81031c4:	4293      	cmp	r3, r2
 81031c6:	d045      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031c8:	687b      	ldr	r3, [r7, #4]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	4a2b      	ldr	r2, [pc, #172]	; (810327c <HAL_DMA_IRQHandler+0x1bc>)
 81031ce:	4293      	cmp	r3, r2
 81031d0:	d040      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	4a2a      	ldr	r2, [pc, #168]	; (8103280 <HAL_DMA_IRQHandler+0x1c0>)
 81031d8:	4293      	cmp	r3, r2
 81031da:	d03b      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	4a28      	ldr	r2, [pc, #160]	; (8103284 <HAL_DMA_IRQHandler+0x1c4>)
 81031e2:	4293      	cmp	r3, r2
 81031e4:	d036      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	681b      	ldr	r3, [r3, #0]
 81031ea:	4a27      	ldr	r2, [pc, #156]	; (8103288 <HAL_DMA_IRQHandler+0x1c8>)
 81031ec:	4293      	cmp	r3, r2
 81031ee:	d031      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	4a25      	ldr	r2, [pc, #148]	; (810328c <HAL_DMA_IRQHandler+0x1cc>)
 81031f6:	4293      	cmp	r3, r2
 81031f8:	d02c      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4a24      	ldr	r2, [pc, #144]	; (8103290 <HAL_DMA_IRQHandler+0x1d0>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d027      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	4a22      	ldr	r2, [pc, #136]	; (8103294 <HAL_DMA_IRQHandler+0x1d4>)
 810320a:	4293      	cmp	r3, r2
 810320c:	d022      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	4a21      	ldr	r2, [pc, #132]	; (8103298 <HAL_DMA_IRQHandler+0x1d8>)
 8103214:	4293      	cmp	r3, r2
 8103216:	d01d      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	681b      	ldr	r3, [r3, #0]
 810321c:	4a1f      	ldr	r2, [pc, #124]	; (810329c <HAL_DMA_IRQHandler+0x1dc>)
 810321e:	4293      	cmp	r3, r2
 8103220:	d018      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	4a1e      	ldr	r2, [pc, #120]	; (81032a0 <HAL_DMA_IRQHandler+0x1e0>)
 8103228:	4293      	cmp	r3, r2
 810322a:	d013      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	4a1c      	ldr	r2, [pc, #112]	; (81032a4 <HAL_DMA_IRQHandler+0x1e4>)
 8103232:	4293      	cmp	r3, r2
 8103234:	d00e      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	4a1b      	ldr	r2, [pc, #108]	; (81032a8 <HAL_DMA_IRQHandler+0x1e8>)
 810323c:	4293      	cmp	r3, r2
 810323e:	d009      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	681b      	ldr	r3, [r3, #0]
 8103244:	4a19      	ldr	r2, [pc, #100]	; (81032ac <HAL_DMA_IRQHandler+0x1ec>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d004      	beq.n	8103254 <HAL_DMA_IRQHandler+0x194>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	4a18      	ldr	r2, [pc, #96]	; (81032b0 <HAL_DMA_IRQHandler+0x1f0>)
 8103250:	4293      	cmp	r3, r2
 8103252:	d12f      	bne.n	81032b4 <HAL_DMA_IRQHandler+0x1f4>
 8103254:	687b      	ldr	r3, [r7, #4]
 8103256:	681b      	ldr	r3, [r3, #0]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f003 0304 	and.w	r3, r3, #4
 810325e:	2b00      	cmp	r3, #0
 8103260:	bf14      	ite	ne
 8103262:	2301      	movne	r3, #1
 8103264:	2300      	moveq	r3, #0
 8103266:	b2db      	uxtb	r3, r3
 8103268:	e02e      	b.n	81032c8 <HAL_DMA_IRQHandler+0x208>
 810326a:	bf00      	nop
 810326c:	10000000 	.word	0x10000000
 8103270:	1b4e81b5 	.word	0x1b4e81b5
 8103274:	40020010 	.word	0x40020010
 8103278:	40020028 	.word	0x40020028
 810327c:	40020040 	.word	0x40020040
 8103280:	40020058 	.word	0x40020058
 8103284:	40020070 	.word	0x40020070
 8103288:	40020088 	.word	0x40020088
 810328c:	400200a0 	.word	0x400200a0
 8103290:	400200b8 	.word	0x400200b8
 8103294:	40020410 	.word	0x40020410
 8103298:	40020428 	.word	0x40020428
 810329c:	40020440 	.word	0x40020440
 81032a0:	40020458 	.word	0x40020458
 81032a4:	40020470 	.word	0x40020470
 81032a8:	40020488 	.word	0x40020488
 81032ac:	400204a0 	.word	0x400204a0
 81032b0:	400204b8 	.word	0x400204b8
 81032b4:	687b      	ldr	r3, [r7, #4]
 81032b6:	681b      	ldr	r3, [r3, #0]
 81032b8:	681b      	ldr	r3, [r3, #0]
 81032ba:	f003 0308 	and.w	r3, r3, #8
 81032be:	2b00      	cmp	r3, #0
 81032c0:	bf14      	ite	ne
 81032c2:	2301      	movne	r3, #1
 81032c4:	2300      	moveq	r3, #0
 81032c6:	b2db      	uxtb	r3, r3
 81032c8:	2b00      	cmp	r3, #0
 81032ca:	d015      	beq.n	81032f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	681a      	ldr	r2, [r3, #0]
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	f022 0204 	bic.w	r2, r2, #4
 81032da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032e0:	f003 031f 	and.w	r3, r3, #31
 81032e4:	2208      	movs	r2, #8
 81032e6:	409a      	lsls	r2, r3
 81032e8:	6a3b      	ldr	r3, [r7, #32]
 81032ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81032f0:	f043 0201 	orr.w	r2, r3, #1
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032fc:	f003 031f 	and.w	r3, r3, #31
 8103300:	69ba      	ldr	r2, [r7, #24]
 8103302:	fa22 f303 	lsr.w	r3, r2, r3
 8103306:	f003 0301 	and.w	r3, r3, #1
 810330a:	2b00      	cmp	r3, #0
 810330c:	d06e      	beq.n	81033ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a69      	ldr	r2, [pc, #420]	; (81034b8 <HAL_DMA_IRQHandler+0x3f8>)
 8103314:	4293      	cmp	r3, r2
 8103316:	d04a      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	4a67      	ldr	r2, [pc, #412]	; (81034bc <HAL_DMA_IRQHandler+0x3fc>)
 810331e:	4293      	cmp	r3, r2
 8103320:	d045      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103322:	687b      	ldr	r3, [r7, #4]
 8103324:	681b      	ldr	r3, [r3, #0]
 8103326:	4a66      	ldr	r2, [pc, #408]	; (81034c0 <HAL_DMA_IRQHandler+0x400>)
 8103328:	4293      	cmp	r3, r2
 810332a:	d040      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 810332c:	687b      	ldr	r3, [r7, #4]
 810332e:	681b      	ldr	r3, [r3, #0]
 8103330:	4a64      	ldr	r2, [pc, #400]	; (81034c4 <HAL_DMA_IRQHandler+0x404>)
 8103332:	4293      	cmp	r3, r2
 8103334:	d03b      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	4a63      	ldr	r2, [pc, #396]	; (81034c8 <HAL_DMA_IRQHandler+0x408>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d036      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	4a61      	ldr	r2, [pc, #388]	; (81034cc <HAL_DMA_IRQHandler+0x40c>)
 8103346:	4293      	cmp	r3, r2
 8103348:	d031      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 810334a:	687b      	ldr	r3, [r7, #4]
 810334c:	681b      	ldr	r3, [r3, #0]
 810334e:	4a60      	ldr	r2, [pc, #384]	; (81034d0 <HAL_DMA_IRQHandler+0x410>)
 8103350:	4293      	cmp	r3, r2
 8103352:	d02c      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	681b      	ldr	r3, [r3, #0]
 8103358:	4a5e      	ldr	r2, [pc, #376]	; (81034d4 <HAL_DMA_IRQHandler+0x414>)
 810335a:	4293      	cmp	r3, r2
 810335c:	d027      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	681b      	ldr	r3, [r3, #0]
 8103362:	4a5d      	ldr	r2, [pc, #372]	; (81034d8 <HAL_DMA_IRQHandler+0x418>)
 8103364:	4293      	cmp	r3, r2
 8103366:	d022      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a5b      	ldr	r2, [pc, #364]	; (81034dc <HAL_DMA_IRQHandler+0x41c>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d01d      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a5a      	ldr	r2, [pc, #360]	; (81034e0 <HAL_DMA_IRQHandler+0x420>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d018      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a58      	ldr	r2, [pc, #352]	; (81034e4 <HAL_DMA_IRQHandler+0x424>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d013      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	681b      	ldr	r3, [r3, #0]
 810338a:	4a57      	ldr	r2, [pc, #348]	; (81034e8 <HAL_DMA_IRQHandler+0x428>)
 810338c:	4293      	cmp	r3, r2
 810338e:	d00e      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	4a55      	ldr	r2, [pc, #340]	; (81034ec <HAL_DMA_IRQHandler+0x42c>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d009      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a54      	ldr	r2, [pc, #336]	; (81034f0 <HAL_DMA_IRQHandler+0x430>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d004      	beq.n	81033ae <HAL_DMA_IRQHandler+0x2ee>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a52      	ldr	r2, [pc, #328]	; (81034f4 <HAL_DMA_IRQHandler+0x434>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d10a      	bne.n	81033c4 <HAL_DMA_IRQHandler+0x304>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	695b      	ldr	r3, [r3, #20]
 81033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81033b8:	2b00      	cmp	r3, #0
 81033ba:	bf14      	ite	ne
 81033bc:	2301      	movne	r3, #1
 81033be:	2300      	moveq	r3, #0
 81033c0:	b2db      	uxtb	r3, r3
 81033c2:	e003      	b.n	81033cc <HAL_DMA_IRQHandler+0x30c>
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	681b      	ldr	r3, [r3, #0]
 81033ca:	2300      	movs	r3, #0
 81033cc:	2b00      	cmp	r3, #0
 81033ce:	d00d      	beq.n	81033ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033d4:	f003 031f 	and.w	r3, r3, #31
 81033d8:	2201      	movs	r2, #1
 81033da:	409a      	lsls	r2, r3
 81033dc:	6a3b      	ldr	r3, [r7, #32]
 81033de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033e4:	f043 0202 	orr.w	r2, r3, #2
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033f0:	f003 031f 	and.w	r3, r3, #31
 81033f4:	2204      	movs	r2, #4
 81033f6:	409a      	lsls	r2, r3
 81033f8:	69bb      	ldr	r3, [r7, #24]
 81033fa:	4013      	ands	r3, r2
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	f000 808f 	beq.w	8103520 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103402:	687b      	ldr	r3, [r7, #4]
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	4a2c      	ldr	r2, [pc, #176]	; (81034b8 <HAL_DMA_IRQHandler+0x3f8>)
 8103408:	4293      	cmp	r3, r2
 810340a:	d04a      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a2a      	ldr	r2, [pc, #168]	; (81034bc <HAL_DMA_IRQHandler+0x3fc>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d045      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4a29      	ldr	r2, [pc, #164]	; (81034c0 <HAL_DMA_IRQHandler+0x400>)
 810341c:	4293      	cmp	r3, r2
 810341e:	d040      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103420:	687b      	ldr	r3, [r7, #4]
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	4a27      	ldr	r2, [pc, #156]	; (81034c4 <HAL_DMA_IRQHandler+0x404>)
 8103426:	4293      	cmp	r3, r2
 8103428:	d03b      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	4a26      	ldr	r2, [pc, #152]	; (81034c8 <HAL_DMA_IRQHandler+0x408>)
 8103430:	4293      	cmp	r3, r2
 8103432:	d036      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	4a24      	ldr	r2, [pc, #144]	; (81034cc <HAL_DMA_IRQHandler+0x40c>)
 810343a:	4293      	cmp	r3, r2
 810343c:	d031      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	4a23      	ldr	r2, [pc, #140]	; (81034d0 <HAL_DMA_IRQHandler+0x410>)
 8103444:	4293      	cmp	r3, r2
 8103446:	d02c      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	4a21      	ldr	r2, [pc, #132]	; (81034d4 <HAL_DMA_IRQHandler+0x414>)
 810344e:	4293      	cmp	r3, r2
 8103450:	d027      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	4a20      	ldr	r2, [pc, #128]	; (81034d8 <HAL_DMA_IRQHandler+0x418>)
 8103458:	4293      	cmp	r3, r2
 810345a:	d022      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	681b      	ldr	r3, [r3, #0]
 8103460:	4a1e      	ldr	r2, [pc, #120]	; (81034dc <HAL_DMA_IRQHandler+0x41c>)
 8103462:	4293      	cmp	r3, r2
 8103464:	d01d      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	681b      	ldr	r3, [r3, #0]
 810346a:	4a1d      	ldr	r2, [pc, #116]	; (81034e0 <HAL_DMA_IRQHandler+0x420>)
 810346c:	4293      	cmp	r3, r2
 810346e:	d018      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	681b      	ldr	r3, [r3, #0]
 8103474:	4a1b      	ldr	r2, [pc, #108]	; (81034e4 <HAL_DMA_IRQHandler+0x424>)
 8103476:	4293      	cmp	r3, r2
 8103478:	d013      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	681b      	ldr	r3, [r3, #0]
 810347e:	4a1a      	ldr	r2, [pc, #104]	; (81034e8 <HAL_DMA_IRQHandler+0x428>)
 8103480:	4293      	cmp	r3, r2
 8103482:	d00e      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	4a18      	ldr	r2, [pc, #96]	; (81034ec <HAL_DMA_IRQHandler+0x42c>)
 810348a:	4293      	cmp	r3, r2
 810348c:	d009      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	681b      	ldr	r3, [r3, #0]
 8103492:	4a17      	ldr	r2, [pc, #92]	; (81034f0 <HAL_DMA_IRQHandler+0x430>)
 8103494:	4293      	cmp	r3, r2
 8103496:	d004      	beq.n	81034a2 <HAL_DMA_IRQHandler+0x3e2>
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	681b      	ldr	r3, [r3, #0]
 810349c:	4a15      	ldr	r2, [pc, #84]	; (81034f4 <HAL_DMA_IRQHandler+0x434>)
 810349e:	4293      	cmp	r3, r2
 81034a0:	d12a      	bne.n	81034f8 <HAL_DMA_IRQHandler+0x438>
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	681b      	ldr	r3, [r3, #0]
 81034a8:	f003 0302 	and.w	r3, r3, #2
 81034ac:	2b00      	cmp	r3, #0
 81034ae:	bf14      	ite	ne
 81034b0:	2301      	movne	r3, #1
 81034b2:	2300      	moveq	r3, #0
 81034b4:	b2db      	uxtb	r3, r3
 81034b6:	e023      	b.n	8103500 <HAL_DMA_IRQHandler+0x440>
 81034b8:	40020010 	.word	0x40020010
 81034bc:	40020028 	.word	0x40020028
 81034c0:	40020040 	.word	0x40020040
 81034c4:	40020058 	.word	0x40020058
 81034c8:	40020070 	.word	0x40020070
 81034cc:	40020088 	.word	0x40020088
 81034d0:	400200a0 	.word	0x400200a0
 81034d4:	400200b8 	.word	0x400200b8
 81034d8:	40020410 	.word	0x40020410
 81034dc:	40020428 	.word	0x40020428
 81034e0:	40020440 	.word	0x40020440
 81034e4:	40020458 	.word	0x40020458
 81034e8:	40020470 	.word	0x40020470
 81034ec:	40020488 	.word	0x40020488
 81034f0:	400204a0 	.word	0x400204a0
 81034f4:	400204b8 	.word	0x400204b8
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	681b      	ldr	r3, [r3, #0]
 81034fe:	2300      	movs	r3, #0
 8103500:	2b00      	cmp	r3, #0
 8103502:	d00d      	beq.n	8103520 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103508:	f003 031f 	and.w	r3, r3, #31
 810350c:	2204      	movs	r2, #4
 810350e:	409a      	lsls	r2, r3
 8103510:	6a3b      	ldr	r3, [r7, #32]
 8103512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103518:	f043 0204 	orr.w	r2, r3, #4
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103524:	f003 031f 	and.w	r3, r3, #31
 8103528:	2210      	movs	r2, #16
 810352a:	409a      	lsls	r2, r3
 810352c:	69bb      	ldr	r3, [r7, #24]
 810352e:	4013      	ands	r3, r2
 8103530:	2b00      	cmp	r3, #0
 8103532:	f000 80a6 	beq.w	8103682 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	681b      	ldr	r3, [r3, #0]
 810353a:	4a85      	ldr	r2, [pc, #532]	; (8103750 <HAL_DMA_IRQHandler+0x690>)
 810353c:	4293      	cmp	r3, r2
 810353e:	d04a      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	681b      	ldr	r3, [r3, #0]
 8103544:	4a83      	ldr	r2, [pc, #524]	; (8103754 <HAL_DMA_IRQHandler+0x694>)
 8103546:	4293      	cmp	r3, r2
 8103548:	d045      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	4a82      	ldr	r2, [pc, #520]	; (8103758 <HAL_DMA_IRQHandler+0x698>)
 8103550:	4293      	cmp	r3, r2
 8103552:	d040      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103554:	687b      	ldr	r3, [r7, #4]
 8103556:	681b      	ldr	r3, [r3, #0]
 8103558:	4a80      	ldr	r2, [pc, #512]	; (810375c <HAL_DMA_IRQHandler+0x69c>)
 810355a:	4293      	cmp	r3, r2
 810355c:	d03b      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4a7f      	ldr	r2, [pc, #508]	; (8103760 <HAL_DMA_IRQHandler+0x6a0>)
 8103564:	4293      	cmp	r3, r2
 8103566:	d036      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103568:	687b      	ldr	r3, [r7, #4]
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	4a7d      	ldr	r2, [pc, #500]	; (8103764 <HAL_DMA_IRQHandler+0x6a4>)
 810356e:	4293      	cmp	r3, r2
 8103570:	d031      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103572:	687b      	ldr	r3, [r7, #4]
 8103574:	681b      	ldr	r3, [r3, #0]
 8103576:	4a7c      	ldr	r2, [pc, #496]	; (8103768 <HAL_DMA_IRQHandler+0x6a8>)
 8103578:	4293      	cmp	r3, r2
 810357a:	d02c      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	4a7a      	ldr	r2, [pc, #488]	; (810376c <HAL_DMA_IRQHandler+0x6ac>)
 8103582:	4293      	cmp	r3, r2
 8103584:	d027      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	4a79      	ldr	r2, [pc, #484]	; (8103770 <HAL_DMA_IRQHandler+0x6b0>)
 810358c:	4293      	cmp	r3, r2
 810358e:	d022      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 8103590:	687b      	ldr	r3, [r7, #4]
 8103592:	681b      	ldr	r3, [r3, #0]
 8103594:	4a77      	ldr	r2, [pc, #476]	; (8103774 <HAL_DMA_IRQHandler+0x6b4>)
 8103596:	4293      	cmp	r3, r2
 8103598:	d01d      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	4a76      	ldr	r2, [pc, #472]	; (8103778 <HAL_DMA_IRQHandler+0x6b8>)
 81035a0:	4293      	cmp	r3, r2
 81035a2:	d018      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 81035a4:	687b      	ldr	r3, [r7, #4]
 81035a6:	681b      	ldr	r3, [r3, #0]
 81035a8:	4a74      	ldr	r2, [pc, #464]	; (810377c <HAL_DMA_IRQHandler+0x6bc>)
 81035aa:	4293      	cmp	r3, r2
 81035ac:	d013      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	681b      	ldr	r3, [r3, #0]
 81035b2:	4a73      	ldr	r2, [pc, #460]	; (8103780 <HAL_DMA_IRQHandler+0x6c0>)
 81035b4:	4293      	cmp	r3, r2
 81035b6:	d00e      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	4a71      	ldr	r2, [pc, #452]	; (8103784 <HAL_DMA_IRQHandler+0x6c4>)
 81035be:	4293      	cmp	r3, r2
 81035c0:	d009      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	4a70      	ldr	r2, [pc, #448]	; (8103788 <HAL_DMA_IRQHandler+0x6c8>)
 81035c8:	4293      	cmp	r3, r2
 81035ca:	d004      	beq.n	81035d6 <HAL_DMA_IRQHandler+0x516>
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	4a6e      	ldr	r2, [pc, #440]	; (810378c <HAL_DMA_IRQHandler+0x6cc>)
 81035d2:	4293      	cmp	r3, r2
 81035d4:	d10a      	bne.n	81035ec <HAL_DMA_IRQHandler+0x52c>
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	f003 0308 	and.w	r3, r3, #8
 81035e0:	2b00      	cmp	r3, #0
 81035e2:	bf14      	ite	ne
 81035e4:	2301      	movne	r3, #1
 81035e6:	2300      	moveq	r3, #0
 81035e8:	b2db      	uxtb	r3, r3
 81035ea:	e009      	b.n	8103600 <HAL_DMA_IRQHandler+0x540>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	681b      	ldr	r3, [r3, #0]
 81035f2:	f003 0304 	and.w	r3, r3, #4
 81035f6:	2b00      	cmp	r3, #0
 81035f8:	bf14      	ite	ne
 81035fa:	2301      	movne	r3, #1
 81035fc:	2300      	moveq	r3, #0
 81035fe:	b2db      	uxtb	r3, r3
 8103600:	2b00      	cmp	r3, #0
 8103602:	d03e      	beq.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103608:	f003 031f 	and.w	r3, r3, #31
 810360c:	2210      	movs	r2, #16
 810360e:	409a      	lsls	r2, r3
 8103610:	6a3b      	ldr	r3, [r7, #32]
 8103612:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810361e:	2b00      	cmp	r3, #0
 8103620:	d018      	beq.n	8103654 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810362c:	2b00      	cmp	r3, #0
 810362e:	d108      	bne.n	8103642 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103634:	2b00      	cmp	r3, #0
 8103636:	d024      	beq.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810363c:	6878      	ldr	r0, [r7, #4]
 810363e:	4798      	blx	r3
 8103640:	e01f      	b.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103646:	2b00      	cmp	r3, #0
 8103648:	d01b      	beq.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810364e:	6878      	ldr	r0, [r7, #4]
 8103650:	4798      	blx	r3
 8103652:	e016      	b.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103654:	687b      	ldr	r3, [r7, #4]
 8103656:	681b      	ldr	r3, [r3, #0]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810365e:	2b00      	cmp	r3, #0
 8103660:	d107      	bne.n	8103672 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	681a      	ldr	r2, [r3, #0]
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	681b      	ldr	r3, [r3, #0]
 810366c:	f022 0208 	bic.w	r2, r2, #8
 8103670:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103676:	2b00      	cmp	r3, #0
 8103678:	d003      	beq.n	8103682 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810367e:	6878      	ldr	r0, [r7, #4]
 8103680:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103686:	f003 031f 	and.w	r3, r3, #31
 810368a:	2220      	movs	r2, #32
 810368c:	409a      	lsls	r2, r3
 810368e:	69bb      	ldr	r3, [r7, #24]
 8103690:	4013      	ands	r3, r2
 8103692:	2b00      	cmp	r3, #0
 8103694:	f000 8110 	beq.w	81038b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a2c      	ldr	r2, [pc, #176]	; (8103750 <HAL_DMA_IRQHandler+0x690>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d04a      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a2b      	ldr	r2, [pc, #172]	; (8103754 <HAL_DMA_IRQHandler+0x694>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d045      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a29      	ldr	r2, [pc, #164]	; (8103758 <HAL_DMA_IRQHandler+0x698>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d040      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a28      	ldr	r2, [pc, #160]	; (810375c <HAL_DMA_IRQHandler+0x69c>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d03b      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a26      	ldr	r2, [pc, #152]	; (8103760 <HAL_DMA_IRQHandler+0x6a0>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d036      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a25      	ldr	r2, [pc, #148]	; (8103764 <HAL_DMA_IRQHandler+0x6a4>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d031      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a23      	ldr	r2, [pc, #140]	; (8103768 <HAL_DMA_IRQHandler+0x6a8>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d02c      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	4a22      	ldr	r2, [pc, #136]	; (810376c <HAL_DMA_IRQHandler+0x6ac>)
 81036e4:	4293      	cmp	r3, r2
 81036e6:	d027      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	4a20      	ldr	r2, [pc, #128]	; (8103770 <HAL_DMA_IRQHandler+0x6b0>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d022      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a1f      	ldr	r2, [pc, #124]	; (8103774 <HAL_DMA_IRQHandler+0x6b4>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d01d      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 81036fc:	687b      	ldr	r3, [r7, #4]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	4a1d      	ldr	r2, [pc, #116]	; (8103778 <HAL_DMA_IRQHandler+0x6b8>)
 8103702:	4293      	cmp	r3, r2
 8103704:	d018      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a1c      	ldr	r2, [pc, #112]	; (810377c <HAL_DMA_IRQHandler+0x6bc>)
 810370c:	4293      	cmp	r3, r2
 810370e:	d013      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	4a1a      	ldr	r2, [pc, #104]	; (8103780 <HAL_DMA_IRQHandler+0x6c0>)
 8103716:	4293      	cmp	r3, r2
 8103718:	d00e      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	4a19      	ldr	r2, [pc, #100]	; (8103784 <HAL_DMA_IRQHandler+0x6c4>)
 8103720:	4293      	cmp	r3, r2
 8103722:	d009      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4a17      	ldr	r2, [pc, #92]	; (8103788 <HAL_DMA_IRQHandler+0x6c8>)
 810372a:	4293      	cmp	r3, r2
 810372c:	d004      	beq.n	8103738 <HAL_DMA_IRQHandler+0x678>
 810372e:	687b      	ldr	r3, [r7, #4]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4a16      	ldr	r2, [pc, #88]	; (810378c <HAL_DMA_IRQHandler+0x6cc>)
 8103734:	4293      	cmp	r3, r2
 8103736:	d12b      	bne.n	8103790 <HAL_DMA_IRQHandler+0x6d0>
 8103738:	687b      	ldr	r3, [r7, #4]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	681b      	ldr	r3, [r3, #0]
 810373e:	f003 0310 	and.w	r3, r3, #16
 8103742:	2b00      	cmp	r3, #0
 8103744:	bf14      	ite	ne
 8103746:	2301      	movne	r3, #1
 8103748:	2300      	moveq	r3, #0
 810374a:	b2db      	uxtb	r3, r3
 810374c:	e02a      	b.n	81037a4 <HAL_DMA_IRQHandler+0x6e4>
 810374e:	bf00      	nop
 8103750:	40020010 	.word	0x40020010
 8103754:	40020028 	.word	0x40020028
 8103758:	40020040 	.word	0x40020040
 810375c:	40020058 	.word	0x40020058
 8103760:	40020070 	.word	0x40020070
 8103764:	40020088 	.word	0x40020088
 8103768:	400200a0 	.word	0x400200a0
 810376c:	400200b8 	.word	0x400200b8
 8103770:	40020410 	.word	0x40020410
 8103774:	40020428 	.word	0x40020428
 8103778:	40020440 	.word	0x40020440
 810377c:	40020458 	.word	0x40020458
 8103780:	40020470 	.word	0x40020470
 8103784:	40020488 	.word	0x40020488
 8103788:	400204a0 	.word	0x400204a0
 810378c:	400204b8 	.word	0x400204b8
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	f003 0302 	and.w	r3, r3, #2
 810379a:	2b00      	cmp	r3, #0
 810379c:	bf14      	ite	ne
 810379e:	2301      	movne	r3, #1
 81037a0:	2300      	moveq	r3, #0
 81037a2:	b2db      	uxtb	r3, r3
 81037a4:	2b00      	cmp	r3, #0
 81037a6:	f000 8087 	beq.w	81038b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037ae:	f003 031f 	and.w	r3, r3, #31
 81037b2:	2220      	movs	r2, #32
 81037b4:	409a      	lsls	r2, r3
 81037b6:	6a3b      	ldr	r3, [r7, #32]
 81037b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81037c0:	b2db      	uxtb	r3, r3
 81037c2:	2b04      	cmp	r3, #4
 81037c4:	d139      	bne.n	810383a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	681a      	ldr	r2, [r3, #0]
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	f022 0216 	bic.w	r2, r2, #22
 81037d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	695a      	ldr	r2, [r3, #20]
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81037e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d103      	bne.n	81037f6 <HAL_DMA_IRQHandler+0x736>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d007      	beq.n	8103806 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	681a      	ldr	r2, [r3, #0]
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	f022 0208 	bic.w	r2, r2, #8
 8103804:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103806:	687b      	ldr	r3, [r7, #4]
 8103808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810380a:	f003 031f 	and.w	r3, r3, #31
 810380e:	223f      	movs	r2, #63	; 0x3f
 8103810:	409a      	lsls	r2, r3
 8103812:	6a3b      	ldr	r3, [r7, #32]
 8103814:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	2201      	movs	r2, #1
 810381a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810381e:	687b      	ldr	r3, [r7, #4]
 8103820:	2200      	movs	r2, #0
 8103822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810382a:	2b00      	cmp	r3, #0
 810382c:	f000 834a 	beq.w	8103ec4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103834:	6878      	ldr	r0, [r7, #4]
 8103836:	4798      	blx	r3
          }
          return;
 8103838:	e344      	b.n	8103ec4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	681b      	ldr	r3, [r3, #0]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103844:	2b00      	cmp	r3, #0
 8103846:	d018      	beq.n	810387a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103852:	2b00      	cmp	r3, #0
 8103854:	d108      	bne.n	8103868 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810385a:	2b00      	cmp	r3, #0
 810385c:	d02c      	beq.n	81038b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103862:	6878      	ldr	r0, [r7, #4]
 8103864:	4798      	blx	r3
 8103866:	e027      	b.n	81038b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810386c:	2b00      	cmp	r3, #0
 810386e:	d023      	beq.n	81038b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103874:	6878      	ldr	r0, [r7, #4]
 8103876:	4798      	blx	r3
 8103878:	e01e      	b.n	81038b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	681b      	ldr	r3, [r3, #0]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103884:	2b00      	cmp	r3, #0
 8103886:	d10f      	bne.n	81038a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	681a      	ldr	r2, [r3, #0]
 810388e:	687b      	ldr	r3, [r7, #4]
 8103890:	681b      	ldr	r3, [r3, #0]
 8103892:	f022 0210 	bic.w	r2, r2, #16
 8103896:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	2201      	movs	r2, #1
 810389c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81038a0:	687b      	ldr	r3, [r7, #4]
 81038a2:	2200      	movs	r2, #0
 81038a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d003      	beq.n	81038b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81038b4:	6878      	ldr	r0, [r7, #4]
 81038b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038bc:	2b00      	cmp	r3, #0
 81038be:	f000 8306 	beq.w	8103ece <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038c6:	f003 0301 	and.w	r3, r3, #1
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	f000 8088 	beq.w	81039e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	2204      	movs	r2, #4
 81038d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	4a7a      	ldr	r2, [pc, #488]	; (8103ac8 <HAL_DMA_IRQHandler+0xa08>)
 81038de:	4293      	cmp	r3, r2
 81038e0:	d04a      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	4a79      	ldr	r2, [pc, #484]	; (8103acc <HAL_DMA_IRQHandler+0xa0c>)
 81038e8:	4293      	cmp	r3, r2
 81038ea:	d045      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	681b      	ldr	r3, [r3, #0]
 81038f0:	4a77      	ldr	r2, [pc, #476]	; (8103ad0 <HAL_DMA_IRQHandler+0xa10>)
 81038f2:	4293      	cmp	r3, r2
 81038f4:	d040      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 81038f6:	687b      	ldr	r3, [r7, #4]
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	4a76      	ldr	r2, [pc, #472]	; (8103ad4 <HAL_DMA_IRQHandler+0xa14>)
 81038fc:	4293      	cmp	r3, r2
 81038fe:	d03b      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	4a74      	ldr	r2, [pc, #464]	; (8103ad8 <HAL_DMA_IRQHandler+0xa18>)
 8103906:	4293      	cmp	r3, r2
 8103908:	d036      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	681b      	ldr	r3, [r3, #0]
 810390e:	4a73      	ldr	r2, [pc, #460]	; (8103adc <HAL_DMA_IRQHandler+0xa1c>)
 8103910:	4293      	cmp	r3, r2
 8103912:	d031      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	4a71      	ldr	r2, [pc, #452]	; (8103ae0 <HAL_DMA_IRQHandler+0xa20>)
 810391a:	4293      	cmp	r3, r2
 810391c:	d02c      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	681b      	ldr	r3, [r3, #0]
 8103922:	4a70      	ldr	r2, [pc, #448]	; (8103ae4 <HAL_DMA_IRQHandler+0xa24>)
 8103924:	4293      	cmp	r3, r2
 8103926:	d027      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	681b      	ldr	r3, [r3, #0]
 810392c:	4a6e      	ldr	r2, [pc, #440]	; (8103ae8 <HAL_DMA_IRQHandler+0xa28>)
 810392e:	4293      	cmp	r3, r2
 8103930:	d022      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	681b      	ldr	r3, [r3, #0]
 8103936:	4a6d      	ldr	r2, [pc, #436]	; (8103aec <HAL_DMA_IRQHandler+0xa2c>)
 8103938:	4293      	cmp	r3, r2
 810393a:	d01d      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	681b      	ldr	r3, [r3, #0]
 8103940:	4a6b      	ldr	r2, [pc, #428]	; (8103af0 <HAL_DMA_IRQHandler+0xa30>)
 8103942:	4293      	cmp	r3, r2
 8103944:	d018      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	681b      	ldr	r3, [r3, #0]
 810394a:	4a6a      	ldr	r2, [pc, #424]	; (8103af4 <HAL_DMA_IRQHandler+0xa34>)
 810394c:	4293      	cmp	r3, r2
 810394e:	d013      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	681b      	ldr	r3, [r3, #0]
 8103954:	4a68      	ldr	r2, [pc, #416]	; (8103af8 <HAL_DMA_IRQHandler+0xa38>)
 8103956:	4293      	cmp	r3, r2
 8103958:	d00e      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	4a67      	ldr	r2, [pc, #412]	; (8103afc <HAL_DMA_IRQHandler+0xa3c>)
 8103960:	4293      	cmp	r3, r2
 8103962:	d009      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	4a65      	ldr	r2, [pc, #404]	; (8103b00 <HAL_DMA_IRQHandler+0xa40>)
 810396a:	4293      	cmp	r3, r2
 810396c:	d004      	beq.n	8103978 <HAL_DMA_IRQHandler+0x8b8>
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	4a64      	ldr	r2, [pc, #400]	; (8103b04 <HAL_DMA_IRQHandler+0xa44>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d108      	bne.n	810398a <HAL_DMA_IRQHandler+0x8ca>
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	681a      	ldr	r2, [r3, #0]
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	f022 0201 	bic.w	r2, r2, #1
 8103986:	601a      	str	r2, [r3, #0]
 8103988:	e007      	b.n	810399a <HAL_DMA_IRQHandler+0x8da>
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	681b      	ldr	r3, [r3, #0]
 810398e:	681a      	ldr	r2, [r3, #0]
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	f022 0201 	bic.w	r2, r2, #1
 8103998:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 810399a:	68fb      	ldr	r3, [r7, #12]
 810399c:	3301      	adds	r3, #1
 810399e:	60fb      	str	r3, [r7, #12]
 81039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039a2:	429a      	cmp	r2, r3
 81039a4:	d307      	bcc.n	81039b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	f003 0301 	and.w	r3, r3, #1
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d1f2      	bne.n	810399a <HAL_DMA_IRQHandler+0x8da>
 81039b4:	e000      	b.n	81039b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 81039b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	681b      	ldr	r3, [r3, #0]
 81039be:	f003 0301 	and.w	r3, r3, #1
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d004      	beq.n	81039d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	2203      	movs	r2, #3
 81039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 81039ce:	e003      	b.n	81039d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	2201      	movs	r2, #1
 81039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	2200      	movs	r2, #0
 81039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039e4:	2b00      	cmp	r3, #0
 81039e6:	f000 8272 	beq.w	8103ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039ee:	6878      	ldr	r0, [r7, #4]
 81039f0:	4798      	blx	r3
 81039f2:	e26c      	b.n	8103ece <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	4a43      	ldr	r2, [pc, #268]	; (8103b08 <HAL_DMA_IRQHandler+0xa48>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d022      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	4a42      	ldr	r2, [pc, #264]	; (8103b0c <HAL_DMA_IRQHandler+0xa4c>)
 8103a04:	4293      	cmp	r3, r2
 8103a06:	d01d      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	681b      	ldr	r3, [r3, #0]
 8103a0c:	4a40      	ldr	r2, [pc, #256]	; (8103b10 <HAL_DMA_IRQHandler+0xa50>)
 8103a0e:	4293      	cmp	r3, r2
 8103a10:	d018      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	681b      	ldr	r3, [r3, #0]
 8103a16:	4a3f      	ldr	r2, [pc, #252]	; (8103b14 <HAL_DMA_IRQHandler+0xa54>)
 8103a18:	4293      	cmp	r3, r2
 8103a1a:	d013      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a3d      	ldr	r2, [pc, #244]	; (8103b18 <HAL_DMA_IRQHandler+0xa58>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d00e      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	4a3c      	ldr	r2, [pc, #240]	; (8103b1c <HAL_DMA_IRQHandler+0xa5c>)
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d009      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	4a3a      	ldr	r2, [pc, #232]	; (8103b20 <HAL_DMA_IRQHandler+0xa60>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d004      	beq.n	8103a44 <HAL_DMA_IRQHandler+0x984>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	4a39      	ldr	r2, [pc, #228]	; (8103b24 <HAL_DMA_IRQHandler+0xa64>)
 8103a40:	4293      	cmp	r3, r2
 8103a42:	d101      	bne.n	8103a48 <HAL_DMA_IRQHandler+0x988>
 8103a44:	2301      	movs	r3, #1
 8103a46:	e000      	b.n	8103a4a <HAL_DMA_IRQHandler+0x98a>
 8103a48:	2300      	movs	r3, #0
 8103a4a:	2b00      	cmp	r3, #0
 8103a4c:	f000 823f 	beq.w	8103ece <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a5c:	f003 031f 	and.w	r3, r3, #31
 8103a60:	2204      	movs	r2, #4
 8103a62:	409a      	lsls	r2, r3
 8103a64:	697b      	ldr	r3, [r7, #20]
 8103a66:	4013      	ands	r3, r2
 8103a68:	2b00      	cmp	r3, #0
 8103a6a:	f000 80cd 	beq.w	8103c08 <HAL_DMA_IRQHandler+0xb48>
 8103a6e:	693b      	ldr	r3, [r7, #16]
 8103a70:	f003 0304 	and.w	r3, r3, #4
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	f000 80c7 	beq.w	8103c08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103a7e:	f003 031f 	and.w	r3, r3, #31
 8103a82:	2204      	movs	r2, #4
 8103a84:	409a      	lsls	r2, r3
 8103a86:	69fb      	ldr	r3, [r7, #28]
 8103a88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103a8a:	693b      	ldr	r3, [r7, #16]
 8103a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103a90:	2b00      	cmp	r3, #0
 8103a92:	d049      	beq.n	8103b28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103a94:	693b      	ldr	r3, [r7, #16]
 8103a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103a9a:	2b00      	cmp	r3, #0
 8103a9c:	d109      	bne.n	8103ab2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103aa2:	2b00      	cmp	r3, #0
 8103aa4:	f000 8210 	beq.w	8103ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103aac:	6878      	ldr	r0, [r7, #4]
 8103aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ab0:	e20a      	b.n	8103ec8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	f000 8206 	beq.w	8103ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ac0:	6878      	ldr	r0, [r7, #4]
 8103ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ac4:	e200      	b.n	8103ec8 <HAL_DMA_IRQHandler+0xe08>
 8103ac6:	bf00      	nop
 8103ac8:	40020010 	.word	0x40020010
 8103acc:	40020028 	.word	0x40020028
 8103ad0:	40020040 	.word	0x40020040
 8103ad4:	40020058 	.word	0x40020058
 8103ad8:	40020070 	.word	0x40020070
 8103adc:	40020088 	.word	0x40020088
 8103ae0:	400200a0 	.word	0x400200a0
 8103ae4:	400200b8 	.word	0x400200b8
 8103ae8:	40020410 	.word	0x40020410
 8103aec:	40020428 	.word	0x40020428
 8103af0:	40020440 	.word	0x40020440
 8103af4:	40020458 	.word	0x40020458
 8103af8:	40020470 	.word	0x40020470
 8103afc:	40020488 	.word	0x40020488
 8103b00:	400204a0 	.word	0x400204a0
 8103b04:	400204b8 	.word	0x400204b8
 8103b08:	58025408 	.word	0x58025408
 8103b0c:	5802541c 	.word	0x5802541c
 8103b10:	58025430 	.word	0x58025430
 8103b14:	58025444 	.word	0x58025444
 8103b18:	58025458 	.word	0x58025458
 8103b1c:	5802546c 	.word	0x5802546c
 8103b20:	58025480 	.word	0x58025480
 8103b24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103b28:	693b      	ldr	r3, [r7, #16]
 8103b2a:	f003 0320 	and.w	r3, r3, #32
 8103b2e:	2b00      	cmp	r3, #0
 8103b30:	d160      	bne.n	8103bf4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	4a7f      	ldr	r2, [pc, #508]	; (8103d34 <HAL_DMA_IRQHandler+0xc74>)
 8103b38:	4293      	cmp	r3, r2
 8103b3a:	d04a      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	4a7d      	ldr	r2, [pc, #500]	; (8103d38 <HAL_DMA_IRQHandler+0xc78>)
 8103b42:	4293      	cmp	r3, r2
 8103b44:	d045      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b46:	687b      	ldr	r3, [r7, #4]
 8103b48:	681b      	ldr	r3, [r3, #0]
 8103b4a:	4a7c      	ldr	r2, [pc, #496]	; (8103d3c <HAL_DMA_IRQHandler+0xc7c>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d040      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	4a7a      	ldr	r2, [pc, #488]	; (8103d40 <HAL_DMA_IRQHandler+0xc80>)
 8103b56:	4293      	cmp	r3, r2
 8103b58:	d03b      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	4a79      	ldr	r2, [pc, #484]	; (8103d44 <HAL_DMA_IRQHandler+0xc84>)
 8103b60:	4293      	cmp	r3, r2
 8103b62:	d036      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	681b      	ldr	r3, [r3, #0]
 8103b68:	4a77      	ldr	r2, [pc, #476]	; (8103d48 <HAL_DMA_IRQHandler+0xc88>)
 8103b6a:	4293      	cmp	r3, r2
 8103b6c:	d031      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b6e:	687b      	ldr	r3, [r7, #4]
 8103b70:	681b      	ldr	r3, [r3, #0]
 8103b72:	4a76      	ldr	r2, [pc, #472]	; (8103d4c <HAL_DMA_IRQHandler+0xc8c>)
 8103b74:	4293      	cmp	r3, r2
 8103b76:	d02c      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	681b      	ldr	r3, [r3, #0]
 8103b7c:	4a74      	ldr	r2, [pc, #464]	; (8103d50 <HAL_DMA_IRQHandler+0xc90>)
 8103b7e:	4293      	cmp	r3, r2
 8103b80:	d027      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	681b      	ldr	r3, [r3, #0]
 8103b86:	4a73      	ldr	r2, [pc, #460]	; (8103d54 <HAL_DMA_IRQHandler+0xc94>)
 8103b88:	4293      	cmp	r3, r2
 8103b8a:	d022      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b8c:	687b      	ldr	r3, [r7, #4]
 8103b8e:	681b      	ldr	r3, [r3, #0]
 8103b90:	4a71      	ldr	r2, [pc, #452]	; (8103d58 <HAL_DMA_IRQHandler+0xc98>)
 8103b92:	4293      	cmp	r3, r2
 8103b94:	d01d      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	681b      	ldr	r3, [r3, #0]
 8103b9a:	4a70      	ldr	r2, [pc, #448]	; (8103d5c <HAL_DMA_IRQHandler+0xc9c>)
 8103b9c:	4293      	cmp	r3, r2
 8103b9e:	d018      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	681b      	ldr	r3, [r3, #0]
 8103ba4:	4a6e      	ldr	r2, [pc, #440]	; (8103d60 <HAL_DMA_IRQHandler+0xca0>)
 8103ba6:	4293      	cmp	r3, r2
 8103ba8:	d013      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103baa:	687b      	ldr	r3, [r7, #4]
 8103bac:	681b      	ldr	r3, [r3, #0]
 8103bae:	4a6d      	ldr	r2, [pc, #436]	; (8103d64 <HAL_DMA_IRQHandler+0xca4>)
 8103bb0:	4293      	cmp	r3, r2
 8103bb2:	d00e      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	4a6b      	ldr	r2, [pc, #428]	; (8103d68 <HAL_DMA_IRQHandler+0xca8>)
 8103bba:	4293      	cmp	r3, r2
 8103bbc:	d009      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	4a6a      	ldr	r2, [pc, #424]	; (8103d6c <HAL_DMA_IRQHandler+0xcac>)
 8103bc4:	4293      	cmp	r3, r2
 8103bc6:	d004      	beq.n	8103bd2 <HAL_DMA_IRQHandler+0xb12>
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	4a68      	ldr	r2, [pc, #416]	; (8103d70 <HAL_DMA_IRQHandler+0xcb0>)
 8103bce:	4293      	cmp	r3, r2
 8103bd0:	d108      	bne.n	8103be4 <HAL_DMA_IRQHandler+0xb24>
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	681a      	ldr	r2, [r3, #0]
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	681b      	ldr	r3, [r3, #0]
 8103bdc:	f022 0208 	bic.w	r2, r2, #8
 8103be0:	601a      	str	r2, [r3, #0]
 8103be2:	e007      	b.n	8103bf4 <HAL_DMA_IRQHandler+0xb34>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	681a      	ldr	r2, [r3, #0]
 8103bea:	687b      	ldr	r3, [r7, #4]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	f022 0204 	bic.w	r2, r2, #4
 8103bf2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	f000 8165 	beq.w	8103ec8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103c02:	6878      	ldr	r0, [r7, #4]
 8103c04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c06:	e15f      	b.n	8103ec8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c0c:	f003 031f 	and.w	r3, r3, #31
 8103c10:	2202      	movs	r2, #2
 8103c12:	409a      	lsls	r2, r3
 8103c14:	697b      	ldr	r3, [r7, #20]
 8103c16:	4013      	ands	r3, r2
 8103c18:	2b00      	cmp	r3, #0
 8103c1a:	f000 80c5 	beq.w	8103da8 <HAL_DMA_IRQHandler+0xce8>
 8103c1e:	693b      	ldr	r3, [r7, #16]
 8103c20:	f003 0302 	and.w	r3, r3, #2
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	f000 80bf 	beq.w	8103da8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103c2a:	687b      	ldr	r3, [r7, #4]
 8103c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c2e:	f003 031f 	and.w	r3, r3, #31
 8103c32:	2202      	movs	r2, #2
 8103c34:	409a      	lsls	r2, r3
 8103c36:	69fb      	ldr	r3, [r7, #28]
 8103c38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c3a:	693b      	ldr	r3, [r7, #16]
 8103c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d018      	beq.n	8103c76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103c44:	693b      	ldr	r3, [r7, #16]
 8103c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103c4a:	2b00      	cmp	r3, #0
 8103c4c:	d109      	bne.n	8103c62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103c4e:	687b      	ldr	r3, [r7, #4]
 8103c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c52:	2b00      	cmp	r3, #0
 8103c54:	f000 813a 	beq.w	8103ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103c5c:	6878      	ldr	r0, [r7, #4]
 8103c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c60:	e134      	b.n	8103ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c66:	2b00      	cmp	r3, #0
 8103c68:	f000 8130 	beq.w	8103ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c70:	6878      	ldr	r0, [r7, #4]
 8103c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103c74:	e12a      	b.n	8103ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103c76:	693b      	ldr	r3, [r7, #16]
 8103c78:	f003 0320 	and.w	r3, r3, #32
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	f040 8089 	bne.w	8103d94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a2b      	ldr	r2, [pc, #172]	; (8103d34 <HAL_DMA_IRQHandler+0xc74>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d04a      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a29      	ldr	r2, [pc, #164]	; (8103d38 <HAL_DMA_IRQHandler+0xc78>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d045      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	4a28      	ldr	r2, [pc, #160]	; (8103d3c <HAL_DMA_IRQHandler+0xc7c>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d040      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	4a26      	ldr	r2, [pc, #152]	; (8103d40 <HAL_DMA_IRQHandler+0xc80>)
 8103ca6:	4293      	cmp	r3, r2
 8103ca8:	d03b      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	4a25      	ldr	r2, [pc, #148]	; (8103d44 <HAL_DMA_IRQHandler+0xc84>)
 8103cb0:	4293      	cmp	r3, r2
 8103cb2:	d036      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a23      	ldr	r2, [pc, #140]	; (8103d48 <HAL_DMA_IRQHandler+0xc88>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d031      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a22      	ldr	r2, [pc, #136]	; (8103d4c <HAL_DMA_IRQHandler+0xc8c>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d02c      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a20      	ldr	r2, [pc, #128]	; (8103d50 <HAL_DMA_IRQHandler+0xc90>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d027      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a1f      	ldr	r2, [pc, #124]	; (8103d54 <HAL_DMA_IRQHandler+0xc94>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d022      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a1d      	ldr	r2, [pc, #116]	; (8103d58 <HAL_DMA_IRQHandler+0xc98>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d01d      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a1c      	ldr	r2, [pc, #112]	; (8103d5c <HAL_DMA_IRQHandler+0xc9c>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d018      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a1a      	ldr	r2, [pc, #104]	; (8103d60 <HAL_DMA_IRQHandler+0xca0>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d013      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	4a19      	ldr	r2, [pc, #100]	; (8103d64 <HAL_DMA_IRQHandler+0xca4>)
 8103d00:	4293      	cmp	r3, r2
 8103d02:	d00e      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	681b      	ldr	r3, [r3, #0]
 8103d08:	4a17      	ldr	r2, [pc, #92]	; (8103d68 <HAL_DMA_IRQHandler+0xca8>)
 8103d0a:	4293      	cmp	r3, r2
 8103d0c:	d009      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	4a16      	ldr	r2, [pc, #88]	; (8103d6c <HAL_DMA_IRQHandler+0xcac>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d004      	beq.n	8103d22 <HAL_DMA_IRQHandler+0xc62>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	4a14      	ldr	r2, [pc, #80]	; (8103d70 <HAL_DMA_IRQHandler+0xcb0>)
 8103d1e:	4293      	cmp	r3, r2
 8103d20:	d128      	bne.n	8103d74 <HAL_DMA_IRQHandler+0xcb4>
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	681b      	ldr	r3, [r3, #0]
 8103d26:	681a      	ldr	r2, [r3, #0]
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	f022 0214 	bic.w	r2, r2, #20
 8103d30:	601a      	str	r2, [r3, #0]
 8103d32:	e027      	b.n	8103d84 <HAL_DMA_IRQHandler+0xcc4>
 8103d34:	40020010 	.word	0x40020010
 8103d38:	40020028 	.word	0x40020028
 8103d3c:	40020040 	.word	0x40020040
 8103d40:	40020058 	.word	0x40020058
 8103d44:	40020070 	.word	0x40020070
 8103d48:	40020088 	.word	0x40020088
 8103d4c:	400200a0 	.word	0x400200a0
 8103d50:	400200b8 	.word	0x400200b8
 8103d54:	40020410 	.word	0x40020410
 8103d58:	40020428 	.word	0x40020428
 8103d5c:	40020440 	.word	0x40020440
 8103d60:	40020458 	.word	0x40020458
 8103d64:	40020470 	.word	0x40020470
 8103d68:	40020488 	.word	0x40020488
 8103d6c:	400204a0 	.word	0x400204a0
 8103d70:	400204b8 	.word	0x400204b8
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	681b      	ldr	r3, [r3, #0]
 8103d78:	681a      	ldr	r2, [r3, #0]
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	f022 020a 	bic.w	r2, r2, #10
 8103d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	2201      	movs	r2, #1
 8103d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	2200      	movs	r2, #0
 8103d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	f000 8097 	beq.w	8103ecc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103da2:	6878      	ldr	r0, [r7, #4]
 8103da4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103da6:	e091      	b.n	8103ecc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dac:	f003 031f 	and.w	r3, r3, #31
 8103db0:	2208      	movs	r2, #8
 8103db2:	409a      	lsls	r2, r3
 8103db4:	697b      	ldr	r3, [r7, #20]
 8103db6:	4013      	ands	r3, r2
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	f000 8088 	beq.w	8103ece <HAL_DMA_IRQHandler+0xe0e>
 8103dbe:	693b      	ldr	r3, [r7, #16]
 8103dc0:	f003 0308 	and.w	r3, r3, #8
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	f000 8082 	beq.w	8103ece <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	4a41      	ldr	r2, [pc, #260]	; (8103ed4 <HAL_DMA_IRQHandler+0xe14>)
 8103dd0:	4293      	cmp	r3, r2
 8103dd2:	d04a      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	4a3f      	ldr	r2, [pc, #252]	; (8103ed8 <HAL_DMA_IRQHandler+0xe18>)
 8103dda:	4293      	cmp	r3, r2
 8103ddc:	d045      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	4a3e      	ldr	r2, [pc, #248]	; (8103edc <HAL_DMA_IRQHandler+0xe1c>)
 8103de4:	4293      	cmp	r3, r2
 8103de6:	d040      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	4a3c      	ldr	r2, [pc, #240]	; (8103ee0 <HAL_DMA_IRQHandler+0xe20>)
 8103dee:	4293      	cmp	r3, r2
 8103df0:	d03b      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4a3b      	ldr	r2, [pc, #236]	; (8103ee4 <HAL_DMA_IRQHandler+0xe24>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d036      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	4a39      	ldr	r2, [pc, #228]	; (8103ee8 <HAL_DMA_IRQHandler+0xe28>)
 8103e02:	4293      	cmp	r3, r2
 8103e04:	d031      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	681b      	ldr	r3, [r3, #0]
 8103e0a:	4a38      	ldr	r2, [pc, #224]	; (8103eec <HAL_DMA_IRQHandler+0xe2c>)
 8103e0c:	4293      	cmp	r3, r2
 8103e0e:	d02c      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a36      	ldr	r2, [pc, #216]	; (8103ef0 <HAL_DMA_IRQHandler+0xe30>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d027      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a35      	ldr	r2, [pc, #212]	; (8103ef4 <HAL_DMA_IRQHandler+0xe34>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d022      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a33      	ldr	r2, [pc, #204]	; (8103ef8 <HAL_DMA_IRQHandler+0xe38>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d01d      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	4a32      	ldr	r2, [pc, #200]	; (8103efc <HAL_DMA_IRQHandler+0xe3c>)
 8103e34:	4293      	cmp	r3, r2
 8103e36:	d018      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	4a30      	ldr	r2, [pc, #192]	; (8103f00 <HAL_DMA_IRQHandler+0xe40>)
 8103e3e:	4293      	cmp	r3, r2
 8103e40:	d013      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	4a2f      	ldr	r2, [pc, #188]	; (8103f04 <HAL_DMA_IRQHandler+0xe44>)
 8103e48:	4293      	cmp	r3, r2
 8103e4a:	d00e      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e4c:	687b      	ldr	r3, [r7, #4]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	4a2d      	ldr	r2, [pc, #180]	; (8103f08 <HAL_DMA_IRQHandler+0xe48>)
 8103e52:	4293      	cmp	r3, r2
 8103e54:	d009      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	4a2c      	ldr	r2, [pc, #176]	; (8103f0c <HAL_DMA_IRQHandler+0xe4c>)
 8103e5c:	4293      	cmp	r3, r2
 8103e5e:	d004      	beq.n	8103e6a <HAL_DMA_IRQHandler+0xdaa>
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	4a2a      	ldr	r2, [pc, #168]	; (8103f10 <HAL_DMA_IRQHandler+0xe50>)
 8103e66:	4293      	cmp	r3, r2
 8103e68:	d108      	bne.n	8103e7c <HAL_DMA_IRQHandler+0xdbc>
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	681a      	ldr	r2, [r3, #0]
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f022 021c 	bic.w	r2, r2, #28
 8103e78:	601a      	str	r2, [r3, #0]
 8103e7a:	e007      	b.n	8103e8c <HAL_DMA_IRQHandler+0xdcc>
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	681a      	ldr	r2, [r3, #0]
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	681b      	ldr	r3, [r3, #0]
 8103e86:	f022 020e 	bic.w	r2, r2, #14
 8103e8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e90:	f003 031f 	and.w	r3, r3, #31
 8103e94:	2201      	movs	r2, #1
 8103e96:	409a      	lsls	r2, r3
 8103e98:	69fb      	ldr	r3, [r7, #28]
 8103e9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	2201      	movs	r2, #1
 8103ea0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	2201      	movs	r2, #1
 8103ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	2200      	movs	r2, #0
 8103eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d009      	beq.n	8103ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ebe:	6878      	ldr	r0, [r7, #4]
 8103ec0:	4798      	blx	r3
 8103ec2:	e004      	b.n	8103ece <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103ec4:	bf00      	nop
 8103ec6:	e002      	b.n	8103ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ec8:	bf00      	nop
 8103eca:	e000      	b.n	8103ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ecc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103ece:	3728      	adds	r7, #40	; 0x28
 8103ed0:	46bd      	mov	sp, r7
 8103ed2:	bd80      	pop	{r7, pc}
 8103ed4:	40020010 	.word	0x40020010
 8103ed8:	40020028 	.word	0x40020028
 8103edc:	40020040 	.word	0x40020040
 8103ee0:	40020058 	.word	0x40020058
 8103ee4:	40020070 	.word	0x40020070
 8103ee8:	40020088 	.word	0x40020088
 8103eec:	400200a0 	.word	0x400200a0
 8103ef0:	400200b8 	.word	0x400200b8
 8103ef4:	40020410 	.word	0x40020410
 8103ef8:	40020428 	.word	0x40020428
 8103efc:	40020440 	.word	0x40020440
 8103f00:	40020458 	.word	0x40020458
 8103f04:	40020470 	.word	0x40020470
 8103f08:	40020488 	.word	0x40020488
 8103f0c:	400204a0 	.word	0x400204a0
 8103f10:	400204b8 	.word	0x400204b8

08103f14 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8103f14:	b480      	push	{r7}
 8103f16:	b083      	sub	sp, #12
 8103f18:	af00      	add	r7, sp, #0
 8103f1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8103f20:	4618      	mov	r0, r3
 8103f22:	370c      	adds	r7, #12
 8103f24:	46bd      	mov	sp, r7
 8103f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f2a:	4770      	bx	lr

08103f2c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103f2c:	b480      	push	{r7}
 8103f2e:	b087      	sub	sp, #28
 8103f30:	af00      	add	r7, sp, #0
 8103f32:	60f8      	str	r0, [r7, #12]
 8103f34:	60b9      	str	r1, [r7, #8]
 8103f36:	607a      	str	r2, [r7, #4]
 8103f38:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f3e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f44:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	4a7f      	ldr	r2, [pc, #508]	; (8104148 <DMA_SetConfig+0x21c>)
 8103f4c:	4293      	cmp	r3, r2
 8103f4e:	d072      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	4a7d      	ldr	r2, [pc, #500]	; (810414c <DMA_SetConfig+0x220>)
 8103f56:	4293      	cmp	r3, r2
 8103f58:	d06d      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	4a7c      	ldr	r2, [pc, #496]	; (8104150 <DMA_SetConfig+0x224>)
 8103f60:	4293      	cmp	r3, r2
 8103f62:	d068      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f64:	68fb      	ldr	r3, [r7, #12]
 8103f66:	681b      	ldr	r3, [r3, #0]
 8103f68:	4a7a      	ldr	r2, [pc, #488]	; (8104154 <DMA_SetConfig+0x228>)
 8103f6a:	4293      	cmp	r3, r2
 8103f6c:	d063      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f6e:	68fb      	ldr	r3, [r7, #12]
 8103f70:	681b      	ldr	r3, [r3, #0]
 8103f72:	4a79      	ldr	r2, [pc, #484]	; (8104158 <DMA_SetConfig+0x22c>)
 8103f74:	4293      	cmp	r3, r2
 8103f76:	d05e      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	681b      	ldr	r3, [r3, #0]
 8103f7c:	4a77      	ldr	r2, [pc, #476]	; (810415c <DMA_SetConfig+0x230>)
 8103f7e:	4293      	cmp	r3, r2
 8103f80:	d059      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f82:	68fb      	ldr	r3, [r7, #12]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	4a76      	ldr	r2, [pc, #472]	; (8104160 <DMA_SetConfig+0x234>)
 8103f88:	4293      	cmp	r3, r2
 8103f8a:	d054      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f8c:	68fb      	ldr	r3, [r7, #12]
 8103f8e:	681b      	ldr	r3, [r3, #0]
 8103f90:	4a74      	ldr	r2, [pc, #464]	; (8104164 <DMA_SetConfig+0x238>)
 8103f92:	4293      	cmp	r3, r2
 8103f94:	d04f      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a73      	ldr	r2, [pc, #460]	; (8104168 <DMA_SetConfig+0x23c>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d04a      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	4a71      	ldr	r2, [pc, #452]	; (810416c <DMA_SetConfig+0x240>)
 8103fa6:	4293      	cmp	r3, r2
 8103fa8:	d045      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	4a70      	ldr	r2, [pc, #448]	; (8104170 <DMA_SetConfig+0x244>)
 8103fb0:	4293      	cmp	r3, r2
 8103fb2:	d040      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	4a6e      	ldr	r2, [pc, #440]	; (8104174 <DMA_SetConfig+0x248>)
 8103fba:	4293      	cmp	r3, r2
 8103fbc:	d03b      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	4a6d      	ldr	r2, [pc, #436]	; (8104178 <DMA_SetConfig+0x24c>)
 8103fc4:	4293      	cmp	r3, r2
 8103fc6:	d036      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	4a6b      	ldr	r2, [pc, #428]	; (810417c <DMA_SetConfig+0x250>)
 8103fce:	4293      	cmp	r3, r2
 8103fd0:	d031      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	4a6a      	ldr	r2, [pc, #424]	; (8104180 <DMA_SetConfig+0x254>)
 8103fd8:	4293      	cmp	r3, r2
 8103fda:	d02c      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fdc:	68fb      	ldr	r3, [r7, #12]
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	4a68      	ldr	r2, [pc, #416]	; (8104184 <DMA_SetConfig+0x258>)
 8103fe2:	4293      	cmp	r3, r2
 8103fe4:	d027      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	4a67      	ldr	r2, [pc, #412]	; (8104188 <DMA_SetConfig+0x25c>)
 8103fec:	4293      	cmp	r3, r2
 8103fee:	d022      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	681b      	ldr	r3, [r3, #0]
 8103ff4:	4a65      	ldr	r2, [pc, #404]	; (810418c <DMA_SetConfig+0x260>)
 8103ff6:	4293      	cmp	r3, r2
 8103ff8:	d01d      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	4a64      	ldr	r2, [pc, #400]	; (8104190 <DMA_SetConfig+0x264>)
 8104000:	4293      	cmp	r3, r2
 8104002:	d018      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	4a62      	ldr	r2, [pc, #392]	; (8104194 <DMA_SetConfig+0x268>)
 810400a:	4293      	cmp	r3, r2
 810400c:	d013      	beq.n	8104036 <DMA_SetConfig+0x10a>
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	4a61      	ldr	r2, [pc, #388]	; (8104198 <DMA_SetConfig+0x26c>)
 8104014:	4293      	cmp	r3, r2
 8104016:	d00e      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	4a5f      	ldr	r2, [pc, #380]	; (810419c <DMA_SetConfig+0x270>)
 810401e:	4293      	cmp	r3, r2
 8104020:	d009      	beq.n	8104036 <DMA_SetConfig+0x10a>
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	4a5e      	ldr	r2, [pc, #376]	; (81041a0 <DMA_SetConfig+0x274>)
 8104028:	4293      	cmp	r3, r2
 810402a:	d004      	beq.n	8104036 <DMA_SetConfig+0x10a>
 810402c:	68fb      	ldr	r3, [r7, #12]
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	4a5c      	ldr	r2, [pc, #368]	; (81041a4 <DMA_SetConfig+0x278>)
 8104032:	4293      	cmp	r3, r2
 8104034:	d101      	bne.n	810403a <DMA_SetConfig+0x10e>
 8104036:	2301      	movs	r3, #1
 8104038:	e000      	b.n	810403c <DMA_SetConfig+0x110>
 810403a:	2300      	movs	r3, #0
 810403c:	2b00      	cmp	r3, #0
 810403e:	d00d      	beq.n	810405c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104044:	68fa      	ldr	r2, [r7, #12]
 8104046:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104048:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810404e:	2b00      	cmp	r3, #0
 8104050:	d004      	beq.n	810405c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104056:	68fa      	ldr	r2, [r7, #12]
 8104058:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810405a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810405c:	68fb      	ldr	r3, [r7, #12]
 810405e:	681b      	ldr	r3, [r3, #0]
 8104060:	4a39      	ldr	r2, [pc, #228]	; (8104148 <DMA_SetConfig+0x21c>)
 8104062:	4293      	cmp	r3, r2
 8104064:	d04a      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	4a38      	ldr	r2, [pc, #224]	; (810414c <DMA_SetConfig+0x220>)
 810406c:	4293      	cmp	r3, r2
 810406e:	d045      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	4a36      	ldr	r2, [pc, #216]	; (8104150 <DMA_SetConfig+0x224>)
 8104076:	4293      	cmp	r3, r2
 8104078:	d040      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	4a35      	ldr	r2, [pc, #212]	; (8104154 <DMA_SetConfig+0x228>)
 8104080:	4293      	cmp	r3, r2
 8104082:	d03b      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 8104084:	68fb      	ldr	r3, [r7, #12]
 8104086:	681b      	ldr	r3, [r3, #0]
 8104088:	4a33      	ldr	r2, [pc, #204]	; (8104158 <DMA_SetConfig+0x22c>)
 810408a:	4293      	cmp	r3, r2
 810408c:	d036      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	4a32      	ldr	r2, [pc, #200]	; (810415c <DMA_SetConfig+0x230>)
 8104094:	4293      	cmp	r3, r2
 8104096:	d031      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	4a30      	ldr	r2, [pc, #192]	; (8104160 <DMA_SetConfig+0x234>)
 810409e:	4293      	cmp	r3, r2
 81040a0:	d02c      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040a2:	68fb      	ldr	r3, [r7, #12]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	4a2f      	ldr	r2, [pc, #188]	; (8104164 <DMA_SetConfig+0x238>)
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d027      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040ac:	68fb      	ldr	r3, [r7, #12]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	4a2d      	ldr	r2, [pc, #180]	; (8104168 <DMA_SetConfig+0x23c>)
 81040b2:	4293      	cmp	r3, r2
 81040b4:	d022      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040b6:	68fb      	ldr	r3, [r7, #12]
 81040b8:	681b      	ldr	r3, [r3, #0]
 81040ba:	4a2c      	ldr	r2, [pc, #176]	; (810416c <DMA_SetConfig+0x240>)
 81040bc:	4293      	cmp	r3, r2
 81040be:	d01d      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	4a2a      	ldr	r2, [pc, #168]	; (8104170 <DMA_SetConfig+0x244>)
 81040c6:	4293      	cmp	r3, r2
 81040c8:	d018      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040ca:	68fb      	ldr	r3, [r7, #12]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	4a29      	ldr	r2, [pc, #164]	; (8104174 <DMA_SetConfig+0x248>)
 81040d0:	4293      	cmp	r3, r2
 81040d2:	d013      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	4a27      	ldr	r2, [pc, #156]	; (8104178 <DMA_SetConfig+0x24c>)
 81040da:	4293      	cmp	r3, r2
 81040dc:	d00e      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040de:	68fb      	ldr	r3, [r7, #12]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4a26      	ldr	r2, [pc, #152]	; (810417c <DMA_SetConfig+0x250>)
 81040e4:	4293      	cmp	r3, r2
 81040e6:	d009      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040e8:	68fb      	ldr	r3, [r7, #12]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	4a24      	ldr	r2, [pc, #144]	; (8104180 <DMA_SetConfig+0x254>)
 81040ee:	4293      	cmp	r3, r2
 81040f0:	d004      	beq.n	81040fc <DMA_SetConfig+0x1d0>
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	681b      	ldr	r3, [r3, #0]
 81040f6:	4a23      	ldr	r2, [pc, #140]	; (8104184 <DMA_SetConfig+0x258>)
 81040f8:	4293      	cmp	r3, r2
 81040fa:	d101      	bne.n	8104100 <DMA_SetConfig+0x1d4>
 81040fc:	2301      	movs	r3, #1
 81040fe:	e000      	b.n	8104102 <DMA_SetConfig+0x1d6>
 8104100:	2300      	movs	r3, #0
 8104102:	2b00      	cmp	r3, #0
 8104104:	d059      	beq.n	81041ba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810410a:	f003 031f 	and.w	r3, r3, #31
 810410e:	223f      	movs	r2, #63	; 0x3f
 8104110:	409a      	lsls	r2, r3
 8104112:	697b      	ldr	r3, [r7, #20]
 8104114:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104116:	68fb      	ldr	r3, [r7, #12]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	681a      	ldr	r2, [r3, #0]
 810411c:	68fb      	ldr	r3, [r7, #12]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104124:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	683a      	ldr	r2, [r7, #0]
 810412c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810412e:	68fb      	ldr	r3, [r7, #12]
 8104130:	689b      	ldr	r3, [r3, #8]
 8104132:	2b40      	cmp	r3, #64	; 0x40
 8104134:	d138      	bne.n	81041a8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104136:	68fb      	ldr	r3, [r7, #12]
 8104138:	681b      	ldr	r3, [r3, #0]
 810413a:	687a      	ldr	r2, [r7, #4]
 810413c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810413e:	68fb      	ldr	r3, [r7, #12]
 8104140:	681b      	ldr	r3, [r3, #0]
 8104142:	68ba      	ldr	r2, [r7, #8]
 8104144:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104146:	e086      	b.n	8104256 <DMA_SetConfig+0x32a>
 8104148:	40020010 	.word	0x40020010
 810414c:	40020028 	.word	0x40020028
 8104150:	40020040 	.word	0x40020040
 8104154:	40020058 	.word	0x40020058
 8104158:	40020070 	.word	0x40020070
 810415c:	40020088 	.word	0x40020088
 8104160:	400200a0 	.word	0x400200a0
 8104164:	400200b8 	.word	0x400200b8
 8104168:	40020410 	.word	0x40020410
 810416c:	40020428 	.word	0x40020428
 8104170:	40020440 	.word	0x40020440
 8104174:	40020458 	.word	0x40020458
 8104178:	40020470 	.word	0x40020470
 810417c:	40020488 	.word	0x40020488
 8104180:	400204a0 	.word	0x400204a0
 8104184:	400204b8 	.word	0x400204b8
 8104188:	58025408 	.word	0x58025408
 810418c:	5802541c 	.word	0x5802541c
 8104190:	58025430 	.word	0x58025430
 8104194:	58025444 	.word	0x58025444
 8104198:	58025458 	.word	0x58025458
 810419c:	5802546c 	.word	0x5802546c
 81041a0:	58025480 	.word	0x58025480
 81041a4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	68ba      	ldr	r2, [r7, #8]
 81041ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	687a      	ldr	r2, [r7, #4]
 81041b6:	60da      	str	r2, [r3, #12]
}
 81041b8:	e04d      	b.n	8104256 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	4a29      	ldr	r2, [pc, #164]	; (8104264 <DMA_SetConfig+0x338>)
 81041c0:	4293      	cmp	r3, r2
 81041c2:	d022      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	4a27      	ldr	r2, [pc, #156]	; (8104268 <DMA_SetConfig+0x33c>)
 81041ca:	4293      	cmp	r3, r2
 81041cc:	d01d      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	4a26      	ldr	r2, [pc, #152]	; (810426c <DMA_SetConfig+0x340>)
 81041d4:	4293      	cmp	r3, r2
 81041d6:	d018      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041d8:	68fb      	ldr	r3, [r7, #12]
 81041da:	681b      	ldr	r3, [r3, #0]
 81041dc:	4a24      	ldr	r2, [pc, #144]	; (8104270 <DMA_SetConfig+0x344>)
 81041de:	4293      	cmp	r3, r2
 81041e0:	d013      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041e2:	68fb      	ldr	r3, [r7, #12]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	4a23      	ldr	r2, [pc, #140]	; (8104274 <DMA_SetConfig+0x348>)
 81041e8:	4293      	cmp	r3, r2
 81041ea:	d00e      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041ec:	68fb      	ldr	r3, [r7, #12]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	4a21      	ldr	r2, [pc, #132]	; (8104278 <DMA_SetConfig+0x34c>)
 81041f2:	4293      	cmp	r3, r2
 81041f4:	d009      	beq.n	810420a <DMA_SetConfig+0x2de>
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	4a20      	ldr	r2, [pc, #128]	; (810427c <DMA_SetConfig+0x350>)
 81041fc:	4293      	cmp	r3, r2
 81041fe:	d004      	beq.n	810420a <DMA_SetConfig+0x2de>
 8104200:	68fb      	ldr	r3, [r7, #12]
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	4a1e      	ldr	r2, [pc, #120]	; (8104280 <DMA_SetConfig+0x354>)
 8104206:	4293      	cmp	r3, r2
 8104208:	d101      	bne.n	810420e <DMA_SetConfig+0x2e2>
 810420a:	2301      	movs	r3, #1
 810420c:	e000      	b.n	8104210 <DMA_SetConfig+0x2e4>
 810420e:	2300      	movs	r3, #0
 8104210:	2b00      	cmp	r3, #0
 8104212:	d020      	beq.n	8104256 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104218:	f003 031f 	and.w	r3, r3, #31
 810421c:	2201      	movs	r2, #1
 810421e:	409a      	lsls	r2, r3
 8104220:	693b      	ldr	r3, [r7, #16]
 8104222:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	681b      	ldr	r3, [r3, #0]
 8104228:	683a      	ldr	r2, [r7, #0]
 810422a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	689b      	ldr	r3, [r3, #8]
 8104230:	2b40      	cmp	r3, #64	; 0x40
 8104232:	d108      	bne.n	8104246 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	687a      	ldr	r2, [r7, #4]
 810423a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810423c:	68fb      	ldr	r3, [r7, #12]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	68ba      	ldr	r2, [r7, #8]
 8104242:	60da      	str	r2, [r3, #12]
}
 8104244:	e007      	b.n	8104256 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104246:	68fb      	ldr	r3, [r7, #12]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	68ba      	ldr	r2, [r7, #8]
 810424c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	687a      	ldr	r2, [r7, #4]
 8104254:	60da      	str	r2, [r3, #12]
}
 8104256:	bf00      	nop
 8104258:	371c      	adds	r7, #28
 810425a:	46bd      	mov	sp, r7
 810425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104260:	4770      	bx	lr
 8104262:	bf00      	nop
 8104264:	58025408 	.word	0x58025408
 8104268:	5802541c 	.word	0x5802541c
 810426c:	58025430 	.word	0x58025430
 8104270:	58025444 	.word	0x58025444
 8104274:	58025458 	.word	0x58025458
 8104278:	5802546c 	.word	0x5802546c
 810427c:	58025480 	.word	0x58025480
 8104280:	58025494 	.word	0x58025494

08104284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104284:	b480      	push	{r7}
 8104286:	b085      	sub	sp, #20
 8104288:	af00      	add	r7, sp, #0
 810428a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	4a43      	ldr	r2, [pc, #268]	; (81043a0 <DMA_CalcBaseAndBitshift+0x11c>)
 8104292:	4293      	cmp	r3, r2
 8104294:	d04a      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	681b      	ldr	r3, [r3, #0]
 810429a:	4a42      	ldr	r2, [pc, #264]	; (81043a4 <DMA_CalcBaseAndBitshift+0x120>)
 810429c:	4293      	cmp	r3, r2
 810429e:	d045      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	4a40      	ldr	r2, [pc, #256]	; (81043a8 <DMA_CalcBaseAndBitshift+0x124>)
 81042a6:	4293      	cmp	r3, r2
 81042a8:	d040      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	4a3f      	ldr	r2, [pc, #252]	; (81043ac <DMA_CalcBaseAndBitshift+0x128>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d03b      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	4a3d      	ldr	r2, [pc, #244]	; (81043b0 <DMA_CalcBaseAndBitshift+0x12c>)
 81042ba:	4293      	cmp	r3, r2
 81042bc:	d036      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042be:	687b      	ldr	r3, [r7, #4]
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a3c      	ldr	r2, [pc, #240]	; (81043b4 <DMA_CalcBaseAndBitshift+0x130>)
 81042c4:	4293      	cmp	r3, r2
 81042c6:	d031      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	4a3a      	ldr	r2, [pc, #232]	; (81043b8 <DMA_CalcBaseAndBitshift+0x134>)
 81042ce:	4293      	cmp	r3, r2
 81042d0:	d02c      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	681b      	ldr	r3, [r3, #0]
 81042d6:	4a39      	ldr	r2, [pc, #228]	; (81043bc <DMA_CalcBaseAndBitshift+0x138>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d027      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	4a37      	ldr	r2, [pc, #220]	; (81043c0 <DMA_CalcBaseAndBitshift+0x13c>)
 81042e2:	4293      	cmp	r3, r2
 81042e4:	d022      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	4a36      	ldr	r2, [pc, #216]	; (81043c4 <DMA_CalcBaseAndBitshift+0x140>)
 81042ec:	4293      	cmp	r3, r2
 81042ee:	d01d      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	681b      	ldr	r3, [r3, #0]
 81042f4:	4a34      	ldr	r2, [pc, #208]	; (81043c8 <DMA_CalcBaseAndBitshift+0x144>)
 81042f6:	4293      	cmp	r3, r2
 81042f8:	d018      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	4a33      	ldr	r2, [pc, #204]	; (81043cc <DMA_CalcBaseAndBitshift+0x148>)
 8104300:	4293      	cmp	r3, r2
 8104302:	d013      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	681b      	ldr	r3, [r3, #0]
 8104308:	4a31      	ldr	r2, [pc, #196]	; (81043d0 <DMA_CalcBaseAndBitshift+0x14c>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d00e      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	681b      	ldr	r3, [r3, #0]
 8104312:	4a30      	ldr	r2, [pc, #192]	; (81043d4 <DMA_CalcBaseAndBitshift+0x150>)
 8104314:	4293      	cmp	r3, r2
 8104316:	d009      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	4a2e      	ldr	r2, [pc, #184]	; (81043d8 <DMA_CalcBaseAndBitshift+0x154>)
 810431e:	4293      	cmp	r3, r2
 8104320:	d004      	beq.n	810432c <DMA_CalcBaseAndBitshift+0xa8>
 8104322:	687b      	ldr	r3, [r7, #4]
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4a2d      	ldr	r2, [pc, #180]	; (81043dc <DMA_CalcBaseAndBitshift+0x158>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d101      	bne.n	8104330 <DMA_CalcBaseAndBitshift+0xac>
 810432c:	2301      	movs	r3, #1
 810432e:	e000      	b.n	8104332 <DMA_CalcBaseAndBitshift+0xae>
 8104330:	2300      	movs	r3, #0
 8104332:	2b00      	cmp	r3, #0
 8104334:	d026      	beq.n	8104384 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104336:	687b      	ldr	r3, [r7, #4]
 8104338:	681b      	ldr	r3, [r3, #0]
 810433a:	b2db      	uxtb	r3, r3
 810433c:	3b10      	subs	r3, #16
 810433e:	4a28      	ldr	r2, [pc, #160]	; (81043e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8104340:	fba2 2303 	umull	r2, r3, r2, r3
 8104344:	091b      	lsrs	r3, r3, #4
 8104346:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f003 0307 	and.w	r3, r3, #7
 810434e:	4a25      	ldr	r2, [pc, #148]	; (81043e4 <DMA_CalcBaseAndBitshift+0x160>)
 8104350:	5cd3      	ldrb	r3, [r2, r3]
 8104352:	461a      	mov	r2, r3
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	2b03      	cmp	r3, #3
 810435c:	d909      	bls.n	8104372 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104366:	f023 0303 	bic.w	r3, r3, #3
 810436a:	1d1a      	adds	r2, r3, #4
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	659a      	str	r2, [r3, #88]	; 0x58
 8104370:	e00e      	b.n	8104390 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810437a:	f023 0303 	bic.w	r3, r3, #3
 810437e:	687a      	ldr	r2, [r7, #4]
 8104380:	6593      	str	r3, [r2, #88]	; 0x58
 8104382:	e005      	b.n	8104390 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104394:	4618      	mov	r0, r3
 8104396:	3714      	adds	r7, #20
 8104398:	46bd      	mov	sp, r7
 810439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810439e:	4770      	bx	lr
 81043a0:	40020010 	.word	0x40020010
 81043a4:	40020028 	.word	0x40020028
 81043a8:	40020040 	.word	0x40020040
 81043ac:	40020058 	.word	0x40020058
 81043b0:	40020070 	.word	0x40020070
 81043b4:	40020088 	.word	0x40020088
 81043b8:	400200a0 	.word	0x400200a0
 81043bc:	400200b8 	.word	0x400200b8
 81043c0:	40020410 	.word	0x40020410
 81043c4:	40020428 	.word	0x40020428
 81043c8:	40020440 	.word	0x40020440
 81043cc:	40020458 	.word	0x40020458
 81043d0:	40020470 	.word	0x40020470
 81043d4:	40020488 	.word	0x40020488
 81043d8:	400204a0 	.word	0x400204a0
 81043dc:	400204b8 	.word	0x400204b8
 81043e0:	aaaaaaab 	.word	0xaaaaaaab
 81043e4:	0810c3dc 	.word	0x0810c3dc

081043e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81043e8:	b480      	push	{r7}
 81043ea:	b085      	sub	sp, #20
 81043ec:	af00      	add	r7, sp, #0
 81043ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81043f0:	2300      	movs	r3, #0
 81043f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	699b      	ldr	r3, [r3, #24]
 81043f8:	2b00      	cmp	r3, #0
 81043fa:	d120      	bne.n	810443e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104400:	2b03      	cmp	r3, #3
 8104402:	d858      	bhi.n	81044b6 <DMA_CheckFifoParam+0xce>
 8104404:	a201      	add	r2, pc, #4	; (adr r2, 810440c <DMA_CheckFifoParam+0x24>)
 8104406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810440a:	bf00      	nop
 810440c:	0810441d 	.word	0x0810441d
 8104410:	0810442f 	.word	0x0810442f
 8104414:	0810441d 	.word	0x0810441d
 8104418:	081044b7 	.word	0x081044b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104424:	2b00      	cmp	r3, #0
 8104426:	d048      	beq.n	81044ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104428:	2301      	movs	r3, #1
 810442a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810442c:	e045      	b.n	81044ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104436:	d142      	bne.n	81044be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104438:	2301      	movs	r3, #1
 810443a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810443c:	e03f      	b.n	81044be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810443e:	687b      	ldr	r3, [r7, #4]
 8104440:	699b      	ldr	r3, [r3, #24]
 8104442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104446:	d123      	bne.n	8104490 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810444c:	2b03      	cmp	r3, #3
 810444e:	d838      	bhi.n	81044c2 <DMA_CheckFifoParam+0xda>
 8104450:	a201      	add	r2, pc, #4	; (adr r2, 8104458 <DMA_CheckFifoParam+0x70>)
 8104452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104456:	bf00      	nop
 8104458:	08104469 	.word	0x08104469
 810445c:	0810446f 	.word	0x0810446f
 8104460:	08104469 	.word	0x08104469
 8104464:	08104481 	.word	0x08104481
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104468:	2301      	movs	r3, #1
 810446a:	73fb      	strb	r3, [r7, #15]
        break;
 810446c:	e030      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810446e:	687b      	ldr	r3, [r7, #4]
 8104470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104476:	2b00      	cmp	r3, #0
 8104478:	d025      	beq.n	81044c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810447a:	2301      	movs	r3, #1
 810447c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810447e:	e022      	b.n	81044c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104484:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104488:	d11f      	bne.n	81044ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810448a:	2301      	movs	r3, #1
 810448c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810448e:	e01c      	b.n	81044ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104494:	2b02      	cmp	r3, #2
 8104496:	d902      	bls.n	810449e <DMA_CheckFifoParam+0xb6>
 8104498:	2b03      	cmp	r3, #3
 810449a:	d003      	beq.n	81044a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 810449c:	e018      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810449e:	2301      	movs	r3, #1
 81044a0:	73fb      	strb	r3, [r7, #15]
        break;
 81044a2:	e015      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81044ac:	2b00      	cmp	r3, #0
 81044ae:	d00e      	beq.n	81044ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 81044b0:	2301      	movs	r3, #1
 81044b2:	73fb      	strb	r3, [r7, #15]
    break;
 81044b4:	e00b      	b.n	81044ce <DMA_CheckFifoParam+0xe6>
        break;
 81044b6:	bf00      	nop
 81044b8:	e00a      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        break;
 81044ba:	bf00      	nop
 81044bc:	e008      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        break;
 81044be:	bf00      	nop
 81044c0:	e006      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        break;
 81044c2:	bf00      	nop
 81044c4:	e004      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        break;
 81044c6:	bf00      	nop
 81044c8:	e002      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
        break;
 81044ca:	bf00      	nop
 81044cc:	e000      	b.n	81044d0 <DMA_CheckFifoParam+0xe8>
    break;
 81044ce:	bf00      	nop
    }
  }

  return status;
 81044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 81044d2:	4618      	mov	r0, r3
 81044d4:	3714      	adds	r7, #20
 81044d6:	46bd      	mov	sp, r7
 81044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044dc:	4770      	bx	lr
 81044de:	bf00      	nop

081044e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81044e0:	b480      	push	{r7}
 81044e2:	b085      	sub	sp, #20
 81044e4:	af00      	add	r7, sp, #0
 81044e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	4a3a      	ldr	r2, [pc, #232]	; (81045dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81044f4:	4293      	cmp	r3, r2
 81044f6:	d022      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	681b      	ldr	r3, [r3, #0]
 81044fc:	4a38      	ldr	r2, [pc, #224]	; (81045e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81044fe:	4293      	cmp	r3, r2
 8104500:	d01d      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	681b      	ldr	r3, [r3, #0]
 8104506:	4a37      	ldr	r2, [pc, #220]	; (81045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d018      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	4a35      	ldr	r2, [pc, #212]	; (81045e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104512:	4293      	cmp	r3, r2
 8104514:	d013      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	4a34      	ldr	r2, [pc, #208]	; (81045ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 810451c:	4293      	cmp	r3, r2
 810451e:	d00e      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	681b      	ldr	r3, [r3, #0]
 8104524:	4a32      	ldr	r2, [pc, #200]	; (81045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104526:	4293      	cmp	r3, r2
 8104528:	d009      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	4a31      	ldr	r2, [pc, #196]	; (81045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104530:	4293      	cmp	r3, r2
 8104532:	d004      	beq.n	810453e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	4a2f      	ldr	r2, [pc, #188]	; (81045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 810453a:	4293      	cmp	r3, r2
 810453c:	d101      	bne.n	8104542 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810453e:	2301      	movs	r3, #1
 8104540:	e000      	b.n	8104544 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104542:	2300      	movs	r3, #0
 8104544:	2b00      	cmp	r3, #0
 8104546:	d01c      	beq.n	8104582 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	b2db      	uxtb	r3, r3
 810454e:	3b08      	subs	r3, #8
 8104550:	4a2a      	ldr	r2, [pc, #168]	; (81045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104552:	fba2 2303 	umull	r2, r3, r2, r3
 8104556:	091b      	lsrs	r3, r3, #4
 8104558:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810455a:	68fb      	ldr	r3, [r7, #12]
 810455c:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104560:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104564:	009b      	lsls	r3, r3, #2
 8104566:	461a      	mov	r2, r3
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	4a24      	ldr	r2, [pc, #144]	; (8104600 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104570:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	f003 031f 	and.w	r3, r3, #31
 8104578:	2201      	movs	r2, #1
 810457a:	409a      	lsls	r2, r3
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104580:	e026      	b.n	81045d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104582:	687b      	ldr	r3, [r7, #4]
 8104584:	681b      	ldr	r3, [r3, #0]
 8104586:	b2db      	uxtb	r3, r3
 8104588:	3b10      	subs	r3, #16
 810458a:	4a1e      	ldr	r2, [pc, #120]	; (8104604 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 810458c:	fba2 2303 	umull	r2, r3, r2, r3
 8104590:	091b      	lsrs	r3, r3, #4
 8104592:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104594:	68bb      	ldr	r3, [r7, #8]
 8104596:	4a1c      	ldr	r2, [pc, #112]	; (8104608 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104598:	4293      	cmp	r3, r2
 810459a:	d806      	bhi.n	81045aa <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 810459c:	68bb      	ldr	r3, [r7, #8]
 810459e:	4a1b      	ldr	r2, [pc, #108]	; (810460c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 81045a0:	4293      	cmp	r3, r2
 81045a2:	d902      	bls.n	81045aa <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	3308      	adds	r3, #8
 81045a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 81045b0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 81045b4:	009b      	lsls	r3, r3, #2
 81045b6:	461a      	mov	r2, r3
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	4a14      	ldr	r2, [pc, #80]	; (8104610 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 81045c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 81045c2:	68fb      	ldr	r3, [r7, #12]
 81045c4:	f003 031f 	and.w	r3, r3, #31
 81045c8:	2201      	movs	r2, #1
 81045ca:	409a      	lsls	r2, r3
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 81045d0:	bf00      	nop
 81045d2:	3714      	adds	r7, #20
 81045d4:	46bd      	mov	sp, r7
 81045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045da:	4770      	bx	lr
 81045dc:	58025408 	.word	0x58025408
 81045e0:	5802541c 	.word	0x5802541c
 81045e4:	58025430 	.word	0x58025430
 81045e8:	58025444 	.word	0x58025444
 81045ec:	58025458 	.word	0x58025458
 81045f0:	5802546c 	.word	0x5802546c
 81045f4:	58025480 	.word	0x58025480
 81045f8:	58025494 	.word	0x58025494
 81045fc:	cccccccd 	.word	0xcccccccd
 8104600:	58025880 	.word	0x58025880
 8104604:	aaaaaaab 	.word	0xaaaaaaab
 8104608:	400204b8 	.word	0x400204b8
 810460c:	4002040f 	.word	0x4002040f
 8104610:	40020880 	.word	0x40020880

08104614 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104614:	b480      	push	{r7}
 8104616:	b085      	sub	sp, #20
 8104618:	af00      	add	r7, sp, #0
 810461a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 810461c:	687b      	ldr	r3, [r7, #4]
 810461e:	685b      	ldr	r3, [r3, #4]
 8104620:	b2db      	uxtb	r3, r3
 8104622:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	2b00      	cmp	r3, #0
 8104628:	d04a      	beq.n	81046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 810462a:	68fb      	ldr	r3, [r7, #12]
 810462c:	2b08      	cmp	r3, #8
 810462e:	d847      	bhi.n	81046c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	4a25      	ldr	r2, [pc, #148]	; (81046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104636:	4293      	cmp	r3, r2
 8104638:	d022      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810463a:	687b      	ldr	r3, [r7, #4]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	4a24      	ldr	r2, [pc, #144]	; (81046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104640:	4293      	cmp	r3, r2
 8104642:	d01d      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104644:	687b      	ldr	r3, [r7, #4]
 8104646:	681b      	ldr	r3, [r3, #0]
 8104648:	4a22      	ldr	r2, [pc, #136]	; (81046d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810464a:	4293      	cmp	r3, r2
 810464c:	d018      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810464e:	687b      	ldr	r3, [r7, #4]
 8104650:	681b      	ldr	r3, [r3, #0]
 8104652:	4a21      	ldr	r2, [pc, #132]	; (81046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104654:	4293      	cmp	r3, r2
 8104656:	d013      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	681b      	ldr	r3, [r3, #0]
 810465c:	4a1f      	ldr	r2, [pc, #124]	; (81046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d00e      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	681b      	ldr	r3, [r3, #0]
 8104666:	4a1e      	ldr	r2, [pc, #120]	; (81046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d009      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	4a1c      	ldr	r2, [pc, #112]	; (81046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104672:	4293      	cmp	r3, r2
 8104674:	d004      	beq.n	8104680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	681b      	ldr	r3, [r3, #0]
 810467a:	4a1b      	ldr	r2, [pc, #108]	; (81046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 810467c:	4293      	cmp	r3, r2
 810467e:	d101      	bne.n	8104684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104680:	2301      	movs	r3, #1
 8104682:	e000      	b.n	8104686 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104684:	2300      	movs	r3, #0
 8104686:	2b00      	cmp	r3, #0
 8104688:	d00a      	beq.n	81046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810468a:	68fa      	ldr	r2, [r7, #12]
 810468c:	4b17      	ldr	r3, [pc, #92]	; (81046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810468e:	4413      	add	r3, r2
 8104690:	009b      	lsls	r3, r3, #2
 8104692:	461a      	mov	r2, r3
 8104694:	687b      	ldr	r3, [r7, #4]
 8104696:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	4a15      	ldr	r2, [pc, #84]	; (81046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 810469c:	671a      	str	r2, [r3, #112]	; 0x70
 810469e:	e009      	b.n	81046b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 81046a0:	68fa      	ldr	r2, [r7, #12]
 81046a2:	4b14      	ldr	r3, [pc, #80]	; (81046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 81046a4:	4413      	add	r3, r2
 81046a6:	009b      	lsls	r3, r3, #2
 81046a8:	461a      	mov	r2, r3
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	4a11      	ldr	r2, [pc, #68]	; (81046f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 81046b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 81046b4:	68fb      	ldr	r3, [r7, #12]
 81046b6:	3b01      	subs	r3, #1
 81046b8:	2201      	movs	r2, #1
 81046ba:	409a      	lsls	r2, r3
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 81046c0:	bf00      	nop
 81046c2:	3714      	adds	r7, #20
 81046c4:	46bd      	mov	sp, r7
 81046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ca:	4770      	bx	lr
 81046cc:	58025408 	.word	0x58025408
 81046d0:	5802541c 	.word	0x5802541c
 81046d4:	58025430 	.word	0x58025430
 81046d8:	58025444 	.word	0x58025444
 81046dc:	58025458 	.word	0x58025458
 81046e0:	5802546c 	.word	0x5802546c
 81046e4:	58025480 	.word	0x58025480
 81046e8:	58025494 	.word	0x58025494
 81046ec:	1600963f 	.word	0x1600963f
 81046f0:	58025940 	.word	0x58025940
 81046f4:	1000823f 	.word	0x1000823f
 81046f8:	40020940 	.word	0x40020940

081046fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 81046fc:	b580      	push	{r7, lr}
 81046fe:	b084      	sub	sp, #16
 8104700:	af00      	add	r7, sp, #0
 8104702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104704:	687b      	ldr	r3, [r7, #4]
 8104706:	2b00      	cmp	r3, #0
 8104708:	d101      	bne.n	810470e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810470a:	2301      	movs	r3, #1
 810470c:	e0d1      	b.n	81048b2 <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 810470e:	687b      	ldr	r3, [r7, #4]
 8104710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104714:	2b00      	cmp	r3, #0
 8104716:	d106      	bne.n	8104726 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	2223      	movs	r2, #35	; 0x23
 810471c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104720:	6878      	ldr	r0, [r7, #4]
 8104722:	f7fc f82f 	bl	8100784 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104726:	4b65      	ldr	r3, [pc, #404]	; (81048bc <HAL_ETH_Init+0x1c0>)
 8104728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810472c:	4a63      	ldr	r2, [pc, #396]	; (81048bc <HAL_ETH_Init+0x1c0>)
 810472e:	f043 0302 	orr.w	r3, r3, #2
 8104732:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104736:	4b61      	ldr	r3, [pc, #388]	; (81048bc <HAL_ETH_Init+0x1c0>)
 8104738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810473c:	f003 0302 	and.w	r3, r3, #2
 8104740:	60bb      	str	r3, [r7, #8]
 8104742:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	7a1b      	ldrb	r3, [r3, #8]
 8104748:	2b00      	cmp	r3, #0
 810474a:	d103      	bne.n	8104754 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 810474c:	2000      	movs	r0, #0
 810474e:	f7fd fdbb 	bl	81022c8 <HAL_SYSCFG_ETHInterfaceSelect>
 8104752:	e003      	b.n	810475c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8104754:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8104758:	f7fd fdb6 	bl	81022c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 810475c:	4b58      	ldr	r3, [pc, #352]	; (81048c0 <HAL_ETH_Init+0x1c4>)
 810475e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104760:	687b      	ldr	r3, [r7, #4]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104768:	681b      	ldr	r3, [r3, #0]
 810476a:	687a      	ldr	r2, [r7, #4]
 810476c:	6812      	ldr	r2, [r2, #0]
 810476e:	f043 0301 	orr.w	r3, r3, #1
 8104772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104776:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104778:	f7fd fd6a 	bl	8102250 <HAL_GetTick>
 810477c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 810477e:	e011      	b.n	81047a4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8104780:	f7fd fd66 	bl	8102250 <HAL_GetTick>
 8104784:	4602      	mov	r2, r0
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	1ad3      	subs	r3, r2, r3
 810478a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 810478e:	d909      	bls.n	81047a4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	2204      	movs	r2, #4
 8104794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	22e0      	movs	r2, #224	; 0xe0
 810479c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 81047a0:	2301      	movs	r3, #1
 81047a2:	e086      	b.n	81048b2 <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81047ac:	681b      	ldr	r3, [r3, #0]
 81047ae:	f003 0301 	and.w	r3, r3, #1
 81047b2:	2b00      	cmp	r3, #0
 81047b4:	d1e4      	bne.n	8104780 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81047b6:	6878      	ldr	r0, [r7, #4]
 81047b8:	f000 f886 	bl	81048c8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81047bc:	f001 ffac 	bl	8106718 <HAL_RCC_GetHCLKFreq>
 81047c0:	4603      	mov	r3, r0
 81047c2:	4a40      	ldr	r2, [pc, #256]	; (81048c4 <HAL_ETH_Init+0x1c8>)
 81047c4:	fba2 2303 	umull	r2, r3, r2, r3
 81047c8:	0c9a      	lsrs	r2, r3, #18
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	681b      	ldr	r3, [r3, #0]
 81047ce:	3a01      	subs	r2, #1
 81047d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81047d4:	6878      	ldr	r0, [r7, #4]
 81047d6:	f000 fa71 	bl	8104cbc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	681b      	ldr	r3, [r3, #0]
 81047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81047e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 81047e6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 81047ea:	687a      	ldr	r2, [r7, #4]
 81047ec:	6812      	ldr	r2, [r2, #0]
 81047ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81047f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81047f6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	695b      	ldr	r3, [r3, #20]
 81047fe:	f003 0303 	and.w	r3, r3, #3
 8104802:	2b00      	cmp	r3, #0
 8104804:	d009      	beq.n	810481a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8104806:	687b      	ldr	r3, [r7, #4]
 8104808:	2201      	movs	r2, #1
 810480a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	22e0      	movs	r2, #224	; 0xe0
 8104812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8104816:	2301      	movs	r3, #1
 8104818:	e04b      	b.n	81048b2 <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104822:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8104826:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810482a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 810482e:	687a      	ldr	r2, [r7, #4]
 8104830:	6952      	ldr	r2, [r2, #20]
 8104832:	0051      	lsls	r1, r2, #1
 8104834:	687a      	ldr	r2, [r7, #4]
 8104836:	6812      	ldr	r2, [r2, #0]
 8104838:	430b      	orrs	r3, r1
 810483a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 810483e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8104842:	6878      	ldr	r0, [r7, #4]
 8104844:	f000 fad7 	bl	8104df6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8104848:	6878      	ldr	r0, [r7, #4]
 810484a:	f000 fb1d 	bl	8104e88 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	685b      	ldr	r3, [r3, #4]
 8104852:	3305      	adds	r3, #5
 8104854:	781b      	ldrb	r3, [r3, #0]
 8104856:	021a      	lsls	r2, r3, #8
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	685b      	ldr	r3, [r3, #4]
 810485c:	3304      	adds	r3, #4
 810485e:	781b      	ldrb	r3, [r3, #0]
 8104860:	4619      	mov	r1, r3
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	430a      	orrs	r2, r1
 8104868:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	685b      	ldr	r3, [r3, #4]
 8104870:	3303      	adds	r3, #3
 8104872:	781b      	ldrb	r3, [r3, #0]
 8104874:	061a      	lsls	r2, r3, #24
 8104876:	687b      	ldr	r3, [r7, #4]
 8104878:	685b      	ldr	r3, [r3, #4]
 810487a:	3302      	adds	r3, #2
 810487c:	781b      	ldrb	r3, [r3, #0]
 810487e:	041b      	lsls	r3, r3, #16
 8104880:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	685b      	ldr	r3, [r3, #4]
 8104886:	3301      	adds	r3, #1
 8104888:	781b      	ldrb	r3, [r3, #0]
 810488a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810488c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	685b      	ldr	r3, [r3, #4]
 8104892:	781b      	ldrb	r3, [r3, #0]
 8104894:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 810489a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 810489c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	2200      	movs	r2, #0
 81048a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81048a8:	687b      	ldr	r3, [r7, #4]
 81048aa:	2210      	movs	r2, #16
 81048ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81048b0:	2300      	movs	r3, #0
}
 81048b2:	4618      	mov	r0, r3
 81048b4:	3710      	adds	r7, #16
 81048b6:	46bd      	mov	sp, r7
 81048b8:	bd80      	pop	{r7, pc}
 81048ba:	bf00      	nop
 81048bc:	58024400 	.word	0x58024400
 81048c0:	58000400 	.word	0x58000400
 81048c4:	431bde83 	.word	0x431bde83

081048c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 81048c8:	b580      	push	{r7, lr}
 81048ca:	b084      	sub	sp, #16
 81048cc:	af00      	add	r7, sp, #0
 81048ce:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 81048d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 81048da:	68fb      	ldr	r3, [r7, #12]
 81048dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81048e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 81048e2:	f001 ff19 	bl	8106718 <HAL_RCC_GetHCLKFreq>
 81048e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 81048e8:	68bb      	ldr	r3, [r7, #8]
 81048ea:	4a1e      	ldr	r2, [pc, #120]	; (8104964 <HAL_ETH_SetMDIOClockRange+0x9c>)
 81048ec:	4293      	cmp	r3, r2
 81048ee:	d908      	bls.n	8104902 <HAL_ETH_SetMDIOClockRange+0x3a>
 81048f0:	68bb      	ldr	r3, [r7, #8]
 81048f2:	4a1d      	ldr	r2, [pc, #116]	; (8104968 <HAL_ETH_SetMDIOClockRange+0xa0>)
 81048f4:	4293      	cmp	r3, r2
 81048f6:	d804      	bhi.n	8104902 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 81048f8:	68fb      	ldr	r3, [r7, #12]
 81048fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81048fe:	60fb      	str	r3, [r7, #12]
 8104900:	e027      	b.n	8104952 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8104902:	68bb      	ldr	r3, [r7, #8]
 8104904:	4a18      	ldr	r2, [pc, #96]	; (8104968 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8104906:	4293      	cmp	r3, r2
 8104908:	d908      	bls.n	810491c <HAL_ETH_SetMDIOClockRange+0x54>
 810490a:	68bb      	ldr	r3, [r7, #8]
 810490c:	4a17      	ldr	r2, [pc, #92]	; (810496c <HAL_ETH_SetMDIOClockRange+0xa4>)
 810490e:	4293      	cmp	r3, r2
 8104910:	d204      	bcs.n	810491c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104912:	68fb      	ldr	r3, [r7, #12]
 8104914:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8104918:	60fb      	str	r3, [r7, #12]
 810491a:	e01a      	b.n	8104952 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 810491c:	68bb      	ldr	r3, [r7, #8]
 810491e:	4a13      	ldr	r2, [pc, #76]	; (810496c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8104920:	4293      	cmp	r3, r2
 8104922:	d303      	bcc.n	810492c <HAL_ETH_SetMDIOClockRange+0x64>
 8104924:	68bb      	ldr	r3, [r7, #8]
 8104926:	4a12      	ldr	r2, [pc, #72]	; (8104970 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8104928:	4293      	cmp	r3, r2
 810492a:	d911      	bls.n	8104950 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 810492c:	68bb      	ldr	r3, [r7, #8]
 810492e:	4a10      	ldr	r2, [pc, #64]	; (8104970 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8104930:	4293      	cmp	r3, r2
 8104932:	d908      	bls.n	8104946 <HAL_ETH_SetMDIOClockRange+0x7e>
 8104934:	68bb      	ldr	r3, [r7, #8]
 8104936:	4a0f      	ldr	r2, [pc, #60]	; (8104974 <HAL_ETH_SetMDIOClockRange+0xac>)
 8104938:	4293      	cmp	r3, r2
 810493a:	d804      	bhi.n	8104946 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 810493c:	68fb      	ldr	r3, [r7, #12]
 810493e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104942:	60fb      	str	r3, [r7, #12]
 8104944:	e005      	b.n	8104952 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 810494c:	60fb      	str	r3, [r7, #12]
 810494e:	e000      	b.n	8104952 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8104950:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	681b      	ldr	r3, [r3, #0]
 8104956:	68fa      	ldr	r2, [r7, #12]
 8104958:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 810495c:	bf00      	nop
 810495e:	3710      	adds	r7, #16
 8104960:	46bd      	mov	sp, r7
 8104962:	bd80      	pop	{r7, pc}
 8104964:	01312cff 	.word	0x01312cff
 8104968:	02160ebf 	.word	0x02160ebf
 810496c:	03938700 	.word	0x03938700
 8104970:	05f5e0ff 	.word	0x05f5e0ff
 8104974:	08f0d17f 	.word	0x08f0d17f

08104978 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8104978:	b480      	push	{r7}
 810497a:	b085      	sub	sp, #20
 810497c:	af00      	add	r7, sp, #0
 810497e:	6078      	str	r0, [r7, #4]
 8104980:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8104982:	683b      	ldr	r3, [r7, #0]
 8104984:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8104986:	683b      	ldr	r3, [r7, #0]
 8104988:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 810498a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810498c:	683b      	ldr	r3, [r7, #0]
 810498e:	791b      	ldrb	r3, [r3, #4]
 8104990:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8104992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8104994:	683b      	ldr	r3, [r7, #0]
 8104996:	7b1b      	ldrb	r3, [r3, #12]
 8104998:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 810499a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 810499c:	683b      	ldr	r3, [r7, #0]
 810499e:	7b5b      	ldrb	r3, [r3, #13]
 81049a0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81049a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81049a4:	683b      	ldr	r3, [r7, #0]
 81049a6:	7b9b      	ldrb	r3, [r3, #14]
 81049a8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81049aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81049ac:	683b      	ldr	r3, [r7, #0]
 81049ae:	7bdb      	ldrb	r3, [r3, #15]
 81049b0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81049b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81049b4:	683a      	ldr	r2, [r7, #0]
 81049b6:	7c12      	ldrb	r2, [r2, #16]
 81049b8:	2a00      	cmp	r2, #0
 81049ba:	d102      	bne.n	81049c2 <ETH_SetMACConfig+0x4a>
 81049bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 81049c0:	e000      	b.n	81049c4 <ETH_SetMACConfig+0x4c>
 81049c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81049c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81049c6:	683a      	ldr	r2, [r7, #0]
 81049c8:	7c52      	ldrb	r2, [r2, #17]
 81049ca:	2a00      	cmp	r2, #0
 81049cc:	d102      	bne.n	81049d4 <ETH_SetMACConfig+0x5c>
 81049ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81049d2:	e000      	b.n	81049d6 <ETH_SetMACConfig+0x5e>
 81049d4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81049d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 81049d8:	683b      	ldr	r3, [r7, #0]
 81049da:	7c9b      	ldrb	r3, [r3, #18]
 81049dc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 81049de:	431a      	orrs	r2, r3
               macconf->Speed |
 81049e0:	683b      	ldr	r3, [r7, #0]
 81049e2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 81049e4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 81049e6:	683b      	ldr	r3, [r7, #0]
 81049e8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 81049ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 81049ec:	683b      	ldr	r3, [r7, #0]
 81049ee:	7f1b      	ldrb	r3, [r3, #28]
 81049f0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 81049f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 81049f4:	683b      	ldr	r3, [r7, #0]
 81049f6:	7f5b      	ldrb	r3, [r3, #29]
 81049f8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 81049fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 81049fc:	683a      	ldr	r2, [r7, #0]
 81049fe:	7f92      	ldrb	r2, [r2, #30]
 8104a00:	2a00      	cmp	r2, #0
 8104a02:	d102      	bne.n	8104a0a <ETH_SetMACConfig+0x92>
 8104a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104a08:	e000      	b.n	8104a0c <ETH_SetMACConfig+0x94>
 8104a0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104a0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104a0e:	683b      	ldr	r3, [r7, #0]
 8104a10:	7fdb      	ldrb	r3, [r3, #31]
 8104a12:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104a14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8104a16:	683a      	ldr	r2, [r7, #0]
 8104a18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8104a1c:	2a00      	cmp	r2, #0
 8104a1e:	d102      	bne.n	8104a26 <ETH_SetMACConfig+0xae>
 8104a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8104a24:	e000      	b.n	8104a28 <ETH_SetMACConfig+0xb0>
 8104a26:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104a28:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8104a2a:	683b      	ldr	r3, [r7, #0]
 8104a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8104a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8104a30:	683b      	ldr	r3, [r7, #0]
 8104a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8104a36:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8104a38:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8104a3a:	683b      	ldr	r3, [r7, #0]
 8104a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8104a3e:	4313      	orrs	r3, r2
 8104a40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8104a42:	687b      	ldr	r3, [r7, #4]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	681a      	ldr	r2, [r3, #0]
 8104a48:	4b57      	ldr	r3, [pc, #348]	; (8104ba8 <ETH_SetMACConfig+0x230>)
 8104a4a:	4013      	ands	r3, r2
 8104a4c:	687a      	ldr	r2, [r7, #4]
 8104a4e:	6812      	ldr	r2, [r2, #0]
 8104a50:	68f9      	ldr	r1, [r7, #12]
 8104a52:	430b      	orrs	r3, r1
 8104a54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8104a56:	683b      	ldr	r3, [r7, #0]
 8104a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104a5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8104a5c:	683b      	ldr	r3, [r7, #0]
 8104a5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8104a62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8104a64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8104a66:	683b      	ldr	r3, [r7, #0]
 8104a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8104a6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8104a6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8104a70:	683b      	ldr	r3, [r7, #0]
 8104a72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8104a76:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8104a78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8104a7a:	683a      	ldr	r2, [r7, #0]
 8104a7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8104a80:	2a00      	cmp	r2, #0
 8104a82:	d102      	bne.n	8104a8a <ETH_SetMACConfig+0x112>
 8104a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8104a88:	e000      	b.n	8104a8c <ETH_SetMACConfig+0x114>
 8104a8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8104a8c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8104a8e:	683b      	ldr	r3, [r7, #0]
 8104a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8104a92:	4313      	orrs	r3, r2
 8104a94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	685a      	ldr	r2, [r3, #4]
 8104a9c:	4b43      	ldr	r3, [pc, #268]	; (8104bac <ETH_SetMACConfig+0x234>)
 8104a9e:	4013      	ands	r3, r2
 8104aa0:	687a      	ldr	r2, [r7, #4]
 8104aa2:	6812      	ldr	r2, [r2, #0]
 8104aa4:	68f9      	ldr	r1, [r7, #12]
 8104aa6:	430b      	orrs	r3, r1
 8104aa8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8104aaa:	683b      	ldr	r3, [r7, #0]
 8104aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104ab0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8104ab2:	683b      	ldr	r3, [r7, #0]
 8104ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8104ab6:	4313      	orrs	r3, r2
 8104ab8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8104aba:	687b      	ldr	r3, [r7, #4]
 8104abc:	681b      	ldr	r3, [r3, #0]
 8104abe:	68db      	ldr	r3, [r3, #12]
 8104ac0:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8104ac4:	f023 0301 	bic.w	r3, r3, #1
 8104ac8:	687a      	ldr	r2, [r7, #4]
 8104aca:	6812      	ldr	r2, [r2, #0]
 8104acc:	68f9      	ldr	r1, [r7, #12]
 8104ace:	430b      	orrs	r3, r1
 8104ad0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104ad2:	683b      	ldr	r3, [r7, #0]
 8104ad4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8104ad8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8104ada:	683b      	ldr	r3, [r7, #0]
 8104adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104ade:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8104ae0:	683a      	ldr	r2, [r7, #0]
 8104ae2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8104ae6:	2a00      	cmp	r2, #0
 8104ae8:	d101      	bne.n	8104aee <ETH_SetMACConfig+0x176>
 8104aea:	2280      	movs	r2, #128	; 0x80
 8104aec:	e000      	b.n	8104af0 <ETH_SetMACConfig+0x178>
 8104aee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8104af0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8104af2:	683b      	ldr	r3, [r7, #0]
 8104af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104af6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104af8:	4313      	orrs	r3, r2
 8104afa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8104afc:	687b      	ldr	r3, [r7, #4]
 8104afe:	681b      	ldr	r3, [r3, #0]
 8104b00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104b02:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8104b06:	4013      	ands	r3, r2
 8104b08:	687a      	ldr	r2, [r7, #4]
 8104b0a:	6812      	ldr	r2, [r2, #0]
 8104b0c:	68f9      	ldr	r1, [r7, #12]
 8104b0e:	430b      	orrs	r3, r1
 8104b10:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8104b12:	683b      	ldr	r3, [r7, #0]
 8104b14:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8104b18:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8104b1a:	683b      	ldr	r3, [r7, #0]
 8104b1c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8104b20:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8104b22:	4313      	orrs	r3, r2
 8104b24:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104b2e:	f023 0103 	bic.w	r1, r3, #3
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	68fa      	ldr	r2, [r7, #12]
 8104b38:	430a      	orrs	r2, r1
 8104b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	681b      	ldr	r3, [r3, #0]
 8104b42:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8104b46:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8104b4a:	683b      	ldr	r3, [r7, #0]
 8104b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	430a      	orrs	r2, r1
 8104b54:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8104b58:	683b      	ldr	r3, [r7, #0]
 8104b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8104b5c:	683a      	ldr	r2, [r7, #0]
 8104b5e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8104b62:	2a00      	cmp	r2, #0
 8104b64:	d101      	bne.n	8104b6a <ETH_SetMACConfig+0x1f2>
 8104b66:	2240      	movs	r2, #64	; 0x40
 8104b68:	e000      	b.n	8104b6c <ETH_SetMACConfig+0x1f4>
 8104b6a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8104b6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8104b6e:	683b      	ldr	r3, [r7, #0]
 8104b70:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8104b74:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8104b76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8104b78:	683b      	ldr	r3, [r7, #0]
 8104b7a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8104b7e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8104b80:	4313      	orrs	r3, r2
 8104b82:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8104b8c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	68fa      	ldr	r2, [r7, #12]
 8104b96:	430a      	orrs	r2, r1
 8104b98:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8104b9c:	bf00      	nop
 8104b9e:	3714      	adds	r7, #20
 8104ba0:	46bd      	mov	sp, r7
 8104ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba6:	4770      	bx	lr
 8104ba8:	00048083 	.word	0x00048083
 8104bac:	c0f88000 	.word	0xc0f88000

08104bb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8104bb0:	b480      	push	{r7}
 8104bb2:	b085      	sub	sp, #20
 8104bb4:	af00      	add	r7, sp, #0
 8104bb6:	6078      	str	r0, [r7, #4]
 8104bb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8104bba:	687b      	ldr	r3, [r7, #4]
 8104bbc:	681b      	ldr	r3, [r3, #0]
 8104bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8104bc8:	f023 0302 	bic.w	r3, r3, #2
 8104bcc:	683a      	ldr	r2, [r7, #0]
 8104bce:	6811      	ldr	r1, [r2, #0]
 8104bd0:	687a      	ldr	r2, [r7, #4]
 8104bd2:	6812      	ldr	r2, [r2, #0]
 8104bd4:	430b      	orrs	r3, r1
 8104bd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104bda:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104bdc:	683b      	ldr	r3, [r7, #0]
 8104bde:	791b      	ldrb	r3, [r3, #4]
 8104be0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8104be2:	683b      	ldr	r3, [r7, #0]
 8104be4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104be6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8104be8:	683b      	ldr	r3, [r7, #0]
 8104bea:	7b1b      	ldrb	r3, [r3, #12]
 8104bec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104bee:	4313      	orrs	r3, r2
 8104bf0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8104bf2:	687b      	ldr	r3, [r7, #4]
 8104bf4:	681b      	ldr	r3, [r3, #0]
 8104bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104bfa:	685b      	ldr	r3, [r3, #4]
 8104bfc:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8104c00:	f023 0301 	bic.w	r3, r3, #1
 8104c04:	687a      	ldr	r2, [r7, #4]
 8104c06:	6812      	ldr	r2, [r2, #0]
 8104c08:	68f9      	ldr	r1, [r7, #12]
 8104c0a:	430b      	orrs	r3, r1
 8104c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104c10:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104c12:	683b      	ldr	r3, [r7, #0]
 8104c14:	7b5b      	ldrb	r3, [r3, #13]
 8104c16:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8104c18:	683b      	ldr	r3, [r7, #0]
 8104c1a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104c1c:	4313      	orrs	r3, r2
 8104c1e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8104c20:	687b      	ldr	r3, [r7, #4]
 8104c22:	681b      	ldr	r3, [r3, #0]
 8104c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104c28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8104c2c:	4b21      	ldr	r3, [pc, #132]	; (8104cb4 <ETH_SetDMAConfig+0x104>)
 8104c2e:	4013      	ands	r3, r2
 8104c30:	687a      	ldr	r2, [r7, #4]
 8104c32:	6812      	ldr	r2, [r2, #0]
 8104c34:	68f9      	ldr	r1, [r7, #12]
 8104c36:	430b      	orrs	r3, r1
 8104c38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104c3c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8104c40:	683b      	ldr	r3, [r7, #0]
 8104c42:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8104c44:	683b      	ldr	r3, [r7, #0]
 8104c46:	7d1b      	ldrb	r3, [r3, #20]
 8104c48:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8104c4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8104c4c:	683b      	ldr	r3, [r7, #0]
 8104c4e:	7f5b      	ldrb	r3, [r3, #29]
 8104c50:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8104c52:	4313      	orrs	r3, r2
 8104c54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104c5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8104c62:	4b15      	ldr	r3, [pc, #84]	; (8104cb8 <ETH_SetDMAConfig+0x108>)
 8104c64:	4013      	ands	r3, r2
 8104c66:	687a      	ldr	r2, [r7, #4]
 8104c68:	6812      	ldr	r2, [r2, #0]
 8104c6a:	68f9      	ldr	r1, [r7, #12]
 8104c6c:	430b      	orrs	r3, r1
 8104c6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104c72:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104c76:	683b      	ldr	r3, [r7, #0]
 8104c78:	7f1b      	ldrb	r3, [r3, #28]
 8104c7a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8104c7c:	683b      	ldr	r3, [r7, #0]
 8104c7e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104c80:	4313      	orrs	r3, r2
 8104c82:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	681b      	ldr	r3, [r3, #0]
 8104c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104c8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8104c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8104c94:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8104c98:	687a      	ldr	r2, [r7, #4]
 8104c9a:	6812      	ldr	r2, [r2, #0]
 8104c9c:	68f9      	ldr	r1, [r7, #12]
 8104c9e:	430b      	orrs	r3, r1
 8104ca0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8104ca4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8104ca8:	bf00      	nop
 8104caa:	3714      	adds	r7, #20
 8104cac:	46bd      	mov	sp, r7
 8104cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cb2:	4770      	bx	lr
 8104cb4:	fffec000 	.word	0xfffec000
 8104cb8:	ffc0efef 	.word	0xffc0efef

08104cbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8104cbc:	b580      	push	{r7, lr}
 8104cbe:	b0a4      	sub	sp, #144	; 0x90
 8104cc0:	af00      	add	r7, sp, #0
 8104cc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8104cc4:	2301      	movs	r3, #1
 8104cc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8104cca:	2300      	movs	r3, #0
 8104ccc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104cce:	2300      	movs	r3, #0
 8104cd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8104cd4:	2300      	movs	r3, #0
 8104cd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8104cda:	2301      	movs	r3, #1
 8104cdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104ce0:	2301      	movs	r3, #1
 8104ce2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8104ce6:	2301      	movs	r3, #1
 8104ce8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104cec:	2300      	movs	r3, #0
 8104cee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8104cf2:	2301      	movs	r3, #1
 8104cf4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8104cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8104cfc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104cfe:	2300      	movs	r3, #0
 8104d00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8104d04:	2300      	movs	r3, #0
 8104d06:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8104d08:	2300      	movs	r3, #0
 8104d0a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8104d0e:	2300      	movs	r3, #0
 8104d10:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8104d14:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8104d18:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8104d1a:	2300      	movs	r3, #0
 8104d1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8104d20:	2300      	movs	r3, #0
 8104d22:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8104d24:	2301      	movs	r3, #1
 8104d26:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8104d2a:	2300      	movs	r3, #0
 8104d2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8104d30:	2300      	movs	r3, #0
 8104d32:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8104d36:	2300      	movs	r3, #0
 8104d38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8104d3a:	2300      	movs	r3, #0
 8104d3c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8104d3e:	2300      	movs	r3, #0
 8104d40:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8104d42:	2300      	movs	r3, #0
 8104d44:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8104d48:	2300      	movs	r3, #0
 8104d4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8104d4e:	2301      	movs	r3, #1
 8104d50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8104d54:	2320      	movs	r3, #32
 8104d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8104d5a:	2301      	movs	r3, #1
 8104d5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8104d60:	2300      	movs	r3, #0
 8104d62:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8104d66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8104d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8104d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8104d70:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8104d72:	2300      	movs	r3, #0
 8104d74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8104d78:	2302      	movs	r3, #2
 8104d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8104d7e:	2300      	movs	r3, #0
 8104d80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8104d84:	2300      	movs	r3, #0
 8104d86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8104d8a:	2300      	movs	r3, #0
 8104d8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8104d90:	2301      	movs	r3, #1
 8104d92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8104d96:	2300      	movs	r3, #0
 8104d98:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8104d9a:	2301      	movs	r3, #1
 8104d9c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8104da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8104da4:	4619      	mov	r1, r3
 8104da6:	6878      	ldr	r0, [r7, #4]
 8104da8:	f7ff fde6 	bl	8104978 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8104dac:	2301      	movs	r3, #1
 8104dae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8104db0:	2301      	movs	r3, #1
 8104db2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8104db4:	2300      	movs	r3, #0
 8104db6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8104db8:	2300      	movs	r3, #0
 8104dba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8104dbe:	2300      	movs	r3, #0
 8104dc0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8104dc2:	2300      	movs	r3, #0
 8104dc4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8104dc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8104dca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104dcc:	2300      	movs	r3, #0
 8104dce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104dd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8104dd4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8104dd6:	2300      	movs	r3, #0
 8104dd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8104ddc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8104de0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8104de2:	f107 0308 	add.w	r3, r7, #8
 8104de6:	4619      	mov	r1, r3
 8104de8:	6878      	ldr	r0, [r7, #4]
 8104dea:	f7ff fee1 	bl	8104bb0 <ETH_SetDMAConfig>
}
 8104dee:	bf00      	nop
 8104df0:	3790      	adds	r7, #144	; 0x90
 8104df2:	46bd      	mov	sp, r7
 8104df4:	bd80      	pop	{r7, pc}

08104df6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8104df6:	b480      	push	{r7}
 8104df8:	b085      	sub	sp, #20
 8104dfa:	af00      	add	r7, sp, #0
 8104dfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104dfe:	2300      	movs	r3, #0
 8104e00:	60fb      	str	r3, [r7, #12]
 8104e02:	e01d      	b.n	8104e40 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8104e04:	687b      	ldr	r3, [r7, #4]
 8104e06:	68d9      	ldr	r1, [r3, #12]
 8104e08:	68fa      	ldr	r2, [r7, #12]
 8104e0a:	4613      	mov	r3, r2
 8104e0c:	005b      	lsls	r3, r3, #1
 8104e0e:	4413      	add	r3, r2
 8104e10:	00db      	lsls	r3, r3, #3
 8104e12:	440b      	add	r3, r1
 8104e14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8104e16:	68bb      	ldr	r3, [r7, #8]
 8104e18:	2200      	movs	r2, #0
 8104e1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8104e1c:	68bb      	ldr	r3, [r7, #8]
 8104e1e:	2200      	movs	r2, #0
 8104e20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8104e22:	68bb      	ldr	r3, [r7, #8]
 8104e24:	2200      	movs	r2, #0
 8104e26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8104e28:	68bb      	ldr	r3, [r7, #8]
 8104e2a:	2200      	movs	r2, #0
 8104e2c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104e2e:	68b9      	ldr	r1, [r7, #8]
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	68fa      	ldr	r2, [r7, #12]
 8104e34:	3206      	adds	r2, #6
 8104e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104e3a:	68fb      	ldr	r3, [r7, #12]
 8104e3c:	3301      	adds	r3, #1
 8104e3e:	60fb      	str	r3, [r7, #12]
 8104e40:	68fb      	ldr	r3, [r7, #12]
 8104e42:	2b03      	cmp	r3, #3
 8104e44:	d9de      	bls.n	8104e04 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	2200      	movs	r2, #0
 8104e4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104e54:	461a      	mov	r2, r3
 8104e56:	2303      	movs	r3, #3
 8104e58:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	68da      	ldr	r2, [r3, #12]
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	681b      	ldr	r3, [r3, #0]
 8104e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104e68:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	68da      	ldr	r2, [r3, #12]
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104e78:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8104e7c:	bf00      	nop
 8104e7e:	3714      	adds	r7, #20
 8104e80:	46bd      	mov	sp, r7
 8104e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e86:	4770      	bx	lr

08104e88 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8104e88:	b480      	push	{r7}
 8104e8a:	b085      	sub	sp, #20
 8104e8c:	af00      	add	r7, sp, #0
 8104e8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104e90:	2300      	movs	r3, #0
 8104e92:	60fb      	str	r3, [r7, #12]
 8104e94:	e023      	b.n	8104ede <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	6919      	ldr	r1, [r3, #16]
 8104e9a:	68fa      	ldr	r2, [r7, #12]
 8104e9c:	4613      	mov	r3, r2
 8104e9e:	005b      	lsls	r3, r3, #1
 8104ea0:	4413      	add	r3, r2
 8104ea2:	00db      	lsls	r3, r3, #3
 8104ea4:	440b      	add	r3, r1
 8104ea6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8104ea8:	68bb      	ldr	r3, [r7, #8]
 8104eaa:	2200      	movs	r2, #0
 8104eac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8104eae:	68bb      	ldr	r3, [r7, #8]
 8104eb0:	2200      	movs	r2, #0
 8104eb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8104eb4:	68bb      	ldr	r3, [r7, #8]
 8104eb6:	2200      	movs	r2, #0
 8104eb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8104eba:	68bb      	ldr	r3, [r7, #8]
 8104ebc:	2200      	movs	r2, #0
 8104ebe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8104ec0:	68bb      	ldr	r3, [r7, #8]
 8104ec2:	2200      	movs	r2, #0
 8104ec4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8104ec6:	68bb      	ldr	r3, [r7, #8]
 8104ec8:	2200      	movs	r2, #0
 8104eca:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104ecc:	68b9      	ldr	r1, [r7, #8]
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	68fa      	ldr	r2, [r7, #12]
 8104ed2:	3212      	adds	r2, #18
 8104ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104ed8:	68fb      	ldr	r3, [r7, #12]
 8104eda:	3301      	adds	r3, #1
 8104edc:	60fb      	str	r3, [r7, #12]
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	2b03      	cmp	r3, #3
 8104ee2:	d9d8      	bls.n	8104e96 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8104ee4:	687b      	ldr	r3, [r7, #4]
 8104ee6:	2200      	movs	r2, #0
 8104ee8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	2200      	movs	r2, #0
 8104eee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	2200      	movs	r2, #0
 8104ef4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	2200      	movs	r2, #0
 8104efa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	2200      	movs	r2, #0
 8104f00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8104f02:	687b      	ldr	r3, [r7, #4]
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104f0a:	461a      	mov	r2, r3
 8104f0c:	2303      	movs	r3, #3
 8104f0e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8104f12:	687b      	ldr	r3, [r7, #4]
 8104f14:	691a      	ldr	r2, [r3, #16]
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	681b      	ldr	r3, [r3, #0]
 8104f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104f1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	691b      	ldr	r3, [r3, #16]
 8104f26:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8104f2a:	687b      	ldr	r3, [r7, #4]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8104f32:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8104f36:	bf00      	nop
 8104f38:	3714      	adds	r7, #20
 8104f3a:	46bd      	mov	sp, r7
 8104f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f40:	4770      	bx	lr
	...

08104f44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8104f44:	b580      	push	{r7, lr}
 8104f46:	b098      	sub	sp, #96	; 0x60
 8104f48:	af00      	add	r7, sp, #0
 8104f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8104f4c:	4a84      	ldr	r2, [pc, #528]	; (8105160 <HAL_FDCAN_Init+0x21c>)
 8104f4e:	f107 030c 	add.w	r3, r7, #12
 8104f52:	4611      	mov	r1, r2
 8104f54:	224c      	movs	r2, #76	; 0x4c
 8104f56:	4618      	mov	r0, r3
 8104f58:	f006 fcdb 	bl	810b912 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8104f5c:	687b      	ldr	r3, [r7, #4]
 8104f5e:	2b00      	cmp	r3, #0
 8104f60:	d101      	bne.n	8104f66 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8104f62:	2301      	movs	r3, #1
 8104f64:	e1c6      	b.n	81052f4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8104f66:	687b      	ldr	r3, [r7, #4]
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	4a7e      	ldr	r2, [pc, #504]	; (8105164 <HAL_FDCAN_Init+0x220>)
 8104f6c:	4293      	cmp	r3, r2
 8104f6e:	d106      	bne.n	8104f7e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8104f70:	687b      	ldr	r3, [r7, #4]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8104f78:	461a      	mov	r2, r3
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8104f7e:	687b      	ldr	r3, [r7, #4]
 8104f80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8104f84:	b2db      	uxtb	r3, r3
 8104f86:	2b00      	cmp	r3, #0
 8104f88:	d106      	bne.n	8104f98 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	2200      	movs	r2, #0
 8104f8e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8104f92:	6878      	ldr	r0, [r7, #4]
 8104f94:	f7fb fdee 	bl	8100b74 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8104f98:	687b      	ldr	r3, [r7, #4]
 8104f9a:	681b      	ldr	r3, [r3, #0]
 8104f9c:	699a      	ldr	r2, [r3, #24]
 8104f9e:	687b      	ldr	r3, [r7, #4]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	f022 0210 	bic.w	r2, r2, #16
 8104fa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104fa8:	f7fd f952 	bl	8102250 <HAL_GetTick>
 8104fac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104fae:	e014      	b.n	8104fda <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8104fb0:	f7fd f94e 	bl	8102250 <HAL_GetTick>
 8104fb4:	4602      	mov	r2, r0
 8104fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104fb8:	1ad3      	subs	r3, r2, r3
 8104fba:	2b0a      	cmp	r3, #10
 8104fbc:	d90d      	bls.n	8104fda <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8104fbe:	687b      	ldr	r3, [r7, #4]
 8104fc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104fc4:	f043 0201 	orr.w	r2, r3, #1
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8104fce:	687b      	ldr	r3, [r7, #4]
 8104fd0:	2203      	movs	r2, #3
 8104fd2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8104fd6:	2301      	movs	r3, #1
 8104fd8:	e18c      	b.n	81052f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	699b      	ldr	r3, [r3, #24]
 8104fe0:	f003 0308 	and.w	r3, r3, #8
 8104fe4:	2b08      	cmp	r3, #8
 8104fe6:	d0e3      	beq.n	8104fb0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	681b      	ldr	r3, [r3, #0]
 8104fec:	699a      	ldr	r2, [r3, #24]
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	f042 0201 	orr.w	r2, r2, #1
 8104ff6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8104ff8:	f7fd f92a 	bl	8102250 <HAL_GetTick>
 8104ffc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8104ffe:	e014      	b.n	810502a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8105000:	f7fd f926 	bl	8102250 <HAL_GetTick>
 8105004:	4602      	mov	r2, r0
 8105006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8105008:	1ad3      	subs	r3, r2, r3
 810500a:	2b0a      	cmp	r3, #10
 810500c:	d90d      	bls.n	810502a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 810500e:	687b      	ldr	r3, [r7, #4]
 8105010:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105014:	f043 0201 	orr.w	r2, r3, #1
 8105018:	687b      	ldr	r3, [r7, #4]
 810501a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 810501e:	687b      	ldr	r3, [r7, #4]
 8105020:	2203      	movs	r2, #3
 8105022:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8105026:	2301      	movs	r3, #1
 8105028:	e164      	b.n	81052f4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 810502a:	687b      	ldr	r3, [r7, #4]
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	699b      	ldr	r3, [r3, #24]
 8105030:	f003 0301 	and.w	r3, r3, #1
 8105034:	2b00      	cmp	r3, #0
 8105036:	d0e3      	beq.n	8105000 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	681b      	ldr	r3, [r3, #0]
 810503c:	699a      	ldr	r2, [r3, #24]
 810503e:	687b      	ldr	r3, [r7, #4]
 8105040:	681b      	ldr	r3, [r3, #0]
 8105042:	f042 0202 	orr.w	r2, r2, #2
 8105046:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	7c1b      	ldrb	r3, [r3, #16]
 810504c:	2b01      	cmp	r3, #1
 810504e:	d108      	bne.n	8105062 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	699a      	ldr	r2, [r3, #24]
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810505e:	619a      	str	r2, [r3, #24]
 8105060:	e007      	b.n	8105072 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8105062:	687b      	ldr	r3, [r7, #4]
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	699a      	ldr	r2, [r3, #24]
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105070:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	7c5b      	ldrb	r3, [r3, #17]
 8105076:	2b01      	cmp	r3, #1
 8105078:	d108      	bne.n	810508c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	681b      	ldr	r3, [r3, #0]
 810507e:	699a      	ldr	r2, [r3, #24]
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8105088:	619a      	str	r2, [r3, #24]
 810508a:	e007      	b.n	810509c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	699a      	ldr	r2, [r3, #24]
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	681b      	ldr	r3, [r3, #0]
 8105096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 810509a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	7c9b      	ldrb	r3, [r3, #18]
 81050a0:	2b01      	cmp	r3, #1
 81050a2:	d108      	bne.n	81050b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81050a4:	687b      	ldr	r3, [r7, #4]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	699a      	ldr	r2, [r3, #24]
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 81050b2:	619a      	str	r2, [r3, #24]
 81050b4:	e007      	b.n	81050c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 81050b6:	687b      	ldr	r3, [r7, #4]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	699a      	ldr	r2, [r3, #24]
 81050bc:	687b      	ldr	r3, [r7, #4]
 81050be:	681b      	ldr	r3, [r3, #0]
 81050c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81050c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	699b      	ldr	r3, [r3, #24]
 81050cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	689a      	ldr	r2, [r3, #8]
 81050d4:	687b      	ldr	r3, [r7, #4]
 81050d6:	681b      	ldr	r3, [r3, #0]
 81050d8:	430a      	orrs	r2, r1
 81050da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	699a      	ldr	r2, [r3, #24]
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 81050ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	691a      	ldr	r2, [r3, #16]
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	f022 0210 	bic.w	r2, r2, #16
 81050fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	68db      	ldr	r3, [r3, #12]
 8105100:	2b01      	cmp	r3, #1
 8105102:	d108      	bne.n	8105116 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8105104:	687b      	ldr	r3, [r7, #4]
 8105106:	681b      	ldr	r3, [r3, #0]
 8105108:	699a      	ldr	r2, [r3, #24]
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	681b      	ldr	r3, [r3, #0]
 810510e:	f042 0204 	orr.w	r2, r2, #4
 8105112:	619a      	str	r2, [r3, #24]
 8105114:	e030      	b.n	8105178 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	68db      	ldr	r3, [r3, #12]
 810511a:	2b00      	cmp	r3, #0
 810511c:	d02c      	beq.n	8105178 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	68db      	ldr	r3, [r3, #12]
 8105122:	2b02      	cmp	r3, #2
 8105124:	d020      	beq.n	8105168 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	681b      	ldr	r3, [r3, #0]
 810512a:	699a      	ldr	r2, [r3, #24]
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	681b      	ldr	r3, [r3, #0]
 8105130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8105134:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	691a      	ldr	r2, [r3, #16]
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	681b      	ldr	r3, [r3, #0]
 8105140:	f042 0210 	orr.w	r2, r2, #16
 8105144:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8105146:	687b      	ldr	r3, [r7, #4]
 8105148:	68db      	ldr	r3, [r3, #12]
 810514a:	2b03      	cmp	r3, #3
 810514c:	d114      	bne.n	8105178 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	681b      	ldr	r3, [r3, #0]
 8105152:	699a      	ldr	r2, [r3, #24]
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	681b      	ldr	r3, [r3, #0]
 8105158:	f042 0220 	orr.w	r2, r2, #32
 810515c:	619a      	str	r2, [r3, #24]
 810515e:	e00b      	b.n	8105178 <HAL_FDCAN_Init+0x234>
 8105160:	0810c380 	.word	0x0810c380
 8105164:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	699a      	ldr	r2, [r3, #24]
 810516e:	687b      	ldr	r3, [r7, #4]
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	f042 0220 	orr.w	r2, r2, #32
 8105176:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	699b      	ldr	r3, [r3, #24]
 810517c:	3b01      	subs	r3, #1
 810517e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	69db      	ldr	r3, [r3, #28]
 8105184:	3b01      	subs	r3, #1
 8105186:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8105188:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	6a1b      	ldr	r3, [r3, #32]
 810518e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8105190:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	695b      	ldr	r3, [r3, #20]
 8105198:	3b01      	subs	r3, #1
 810519a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 81051a0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 81051a2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	689b      	ldr	r3, [r3, #8]
 81051a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81051ac:	d115      	bne.n	81051da <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051b2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051b8:	3b01      	subs	r3, #1
 81051ba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81051bc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81051be:	687b      	ldr	r3, [r7, #4]
 81051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81051c2:	3b01      	subs	r3, #1
 81051c4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 81051c6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051ce:	3b01      	subs	r3, #1
 81051d0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 81051d6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 81051d8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81051de:	2b00      	cmp	r3, #0
 81051e0:	d00a      	beq.n	81051f8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 81051e2:	687b      	ldr	r3, [r7, #4]
 81051e4:	681b      	ldr	r3, [r3, #0]
 81051e6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	430a      	orrs	r2, r1
 81051f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8105200:	4413      	add	r3, r2
 8105202:	2b00      	cmp	r3, #0
 8105204:	d011      	beq.n	810522a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 810520e:	f023 0107 	bic.w	r1, r3, #7
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8105216:	009b      	lsls	r3, r3, #2
 8105218:	3360      	adds	r3, #96	; 0x60
 810521a:	443b      	add	r3, r7
 810521c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	681b      	ldr	r3, [r3, #0]
 8105224:	430a      	orrs	r2, r1
 8105226:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810522e:	2b00      	cmp	r3, #0
 8105230:	d011      	beq.n	8105256 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	681b      	ldr	r3, [r3, #0]
 8105236:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810523a:	f023 0107 	bic.w	r1, r3, #7
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105242:	009b      	lsls	r3, r3, #2
 8105244:	3360      	adds	r3, #96	; 0x60
 8105246:	443b      	add	r3, r7
 8105248:	f853 2c54 	ldr.w	r2, [r3, #-84]
 810524c:	687b      	ldr	r3, [r7, #4]
 810524e:	681b      	ldr	r3, [r3, #0]
 8105250:	430a      	orrs	r2, r1
 8105252:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810525a:	2b00      	cmp	r3, #0
 810525c:	d012      	beq.n	8105284 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105266:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810526e:	009b      	lsls	r3, r3, #2
 8105270:	3360      	adds	r3, #96	; 0x60
 8105272:	443b      	add	r3, r7
 8105274:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8105278:	011a      	lsls	r2, r3, #4
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	681b      	ldr	r3, [r3, #0]
 810527e:	430a      	orrs	r2, r1
 8105280:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105288:	2b00      	cmp	r3, #0
 810528a:	d012      	beq.n	81052b2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	681b      	ldr	r3, [r3, #0]
 8105290:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105294:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810529c:	009b      	lsls	r3, r3, #2
 810529e:	3360      	adds	r3, #96	; 0x60
 81052a0:	443b      	add	r3, r7
 81052a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 81052a6:	021a      	lsls	r2, r3, #8
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	430a      	orrs	r2, r1
 81052ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 81052b2:	687b      	ldr	r3, [r7, #4]
 81052b4:	681b      	ldr	r3, [r3, #0]
 81052b6:	4a11      	ldr	r2, [pc, #68]	; (81052fc <HAL_FDCAN_Init+0x3b8>)
 81052b8:	4293      	cmp	r3, r2
 81052ba:	d107      	bne.n	81052cc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	685b      	ldr	r3, [r3, #4]
 81052c0:	689a      	ldr	r2, [r3, #8]
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	685b      	ldr	r3, [r3, #4]
 81052c6:	f022 0203 	bic.w	r2, r2, #3
 81052ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	2200      	movs	r2, #0
 81052d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 81052d4:	687b      	ldr	r3, [r7, #4]
 81052d6:	2200      	movs	r2, #0
 81052d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 81052dc:	687b      	ldr	r3, [r7, #4]
 81052de:	2201      	movs	r2, #1
 81052e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 81052e4:	6878      	ldr	r0, [r7, #4]
 81052e6:	f000 f80b 	bl	8105300 <FDCAN_CalcultateRamBlockAddresses>
 81052ea:	4603      	mov	r3, r0
 81052ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 81052f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 81052f4:	4618      	mov	r0, r3
 81052f6:	3760      	adds	r7, #96	; 0x60
 81052f8:	46bd      	mov	sp, r7
 81052fa:	bd80      	pop	{r7, pc}
 81052fc:	4000a000 	.word	0x4000a000

08105300 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8105300:	b480      	push	{r7}
 8105302:	b085      	sub	sp, #20
 8105304:	af00      	add	r7, sp, #0
 8105306:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810530c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810531a:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 810531e:	68ba      	ldr	r2, [r7, #8]
 8105320:	0091      	lsls	r1, r2, #2
 8105322:	687a      	ldr	r2, [r7, #4]
 8105324:	6812      	ldr	r2, [r2, #0]
 8105326:	430b      	orrs	r3, r1
 8105328:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	681b      	ldr	r3, [r3, #0]
 8105330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105334:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810533c:	041a      	lsls	r2, r3, #16
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	430a      	orrs	r2, r1
 8105344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8105348:	687b      	ldr	r3, [r7, #4]
 810534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810534c:	68ba      	ldr	r2, [r7, #8]
 810534e:	4413      	add	r3, r2
 8105350:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8105352:	687b      	ldr	r3, [r7, #4]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810535e:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105362:	68ba      	ldr	r2, [r7, #8]
 8105364:	0091      	lsls	r1, r2, #2
 8105366:	687a      	ldr	r2, [r7, #4]
 8105368:	6812      	ldr	r2, [r2, #0]
 810536a:	430b      	orrs	r3, r1
 810536c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105378:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105380:	041a      	lsls	r2, r3, #16
 8105382:	687b      	ldr	r3, [r7, #4]
 8105384:	681b      	ldr	r3, [r3, #0]
 8105386:	430a      	orrs	r2, r1
 8105388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105390:	005b      	lsls	r3, r3, #1
 8105392:	68ba      	ldr	r2, [r7, #8]
 8105394:	4413      	add	r3, r2
 8105396:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8105398:	687b      	ldr	r3, [r7, #4]
 810539a:	681b      	ldr	r3, [r3, #0]
 810539c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81053a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81053a4:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81053a8:	68ba      	ldr	r2, [r7, #8]
 81053aa:	0091      	lsls	r1, r2, #2
 81053ac:	687a      	ldr	r2, [r7, #4]
 81053ae:	6812      	ldr	r2, [r2, #0]
 81053b0:	430b      	orrs	r3, r1
 81053b2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81053be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 81053c2:	687b      	ldr	r3, [r7, #4]
 81053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81053c6:	041a      	lsls	r2, r3, #16
 81053c8:	687b      	ldr	r3, [r7, #4]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	430a      	orrs	r2, r1
 81053ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81053d6:	687a      	ldr	r2, [r7, #4]
 81053d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 81053da:	fb02 f303 	mul.w	r3, r2, r3
 81053de:	68ba      	ldr	r2, [r7, #8]
 81053e0:	4413      	add	r3, r2
 81053e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 81053e4:	687b      	ldr	r3, [r7, #4]
 81053e6:	681b      	ldr	r3, [r3, #0]
 81053e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81053ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81053f0:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81053f4:	68ba      	ldr	r2, [r7, #8]
 81053f6:	0091      	lsls	r1, r2, #2
 81053f8:	687a      	ldr	r2, [r7, #4]
 81053fa:	6812      	ldr	r2, [r2, #0]
 81053fc:	430b      	orrs	r3, r1
 81053fe:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	681b      	ldr	r3, [r3, #0]
 8105406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810540a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105412:	041a      	lsls	r2, r3, #16
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	430a      	orrs	r2, r1
 810541a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105422:	687a      	ldr	r2, [r7, #4]
 8105424:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8105426:	fb02 f303 	mul.w	r3, r2, r3
 810542a:	68ba      	ldr	r2, [r7, #8]
 810542c:	4413      	add	r3, r2
 810542e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810543c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105440:	68ba      	ldr	r2, [r7, #8]
 8105442:	0091      	lsls	r1, r2, #2
 8105444:	687a      	ldr	r2, [r7, #4]
 8105446:	6812      	ldr	r2, [r2, #0]
 8105448:	430b      	orrs	r3, r1
 810544a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105452:	687a      	ldr	r2, [r7, #4]
 8105454:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8105456:	fb02 f303 	mul.w	r3, r2, r3
 810545a:	68ba      	ldr	r2, [r7, #8]
 810545c:	4413      	add	r3, r2
 810545e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8105468:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810546c:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8105470:	68ba      	ldr	r2, [r7, #8]
 8105472:	0091      	lsls	r1, r2, #2
 8105474:	687a      	ldr	r2, [r7, #4]
 8105476:	6812      	ldr	r2, [r2, #0]
 8105478:	430b      	orrs	r3, r1
 810547a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	681b      	ldr	r3, [r3, #0]
 8105482:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8105486:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810548e:	041a      	lsls	r2, r3, #16
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	681b      	ldr	r3, [r3, #0]
 8105494:	430a      	orrs	r2, r1
 8105496:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 810549a:	687b      	ldr	r3, [r7, #4]
 810549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810549e:	005b      	lsls	r3, r3, #1
 81054a0:	68ba      	ldr	r2, [r7, #8]
 81054a2:	4413      	add	r3, r2
 81054a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 81054a6:	687b      	ldr	r3, [r7, #4]
 81054a8:	681b      	ldr	r3, [r3, #0]
 81054aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81054ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81054b2:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 81054b6:	68ba      	ldr	r2, [r7, #8]
 81054b8:	0091      	lsls	r1, r2, #2
 81054ba:	687a      	ldr	r2, [r7, #4]
 81054bc:	6812      	ldr	r2, [r2, #0]
 81054be:	430b      	orrs	r3, r1
 81054c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 81054c4:	687b      	ldr	r3, [r7, #4]
 81054c6:	681b      	ldr	r3, [r3, #0]
 81054c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81054cc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054d4:	041a      	lsls	r2, r3, #16
 81054d6:	687b      	ldr	r3, [r7, #4]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	430a      	orrs	r2, r1
 81054dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	681b      	ldr	r3, [r3, #0]
 81054e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81054e8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81054f0:	061a      	lsls	r2, r3, #24
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	430a      	orrs	r2, r1
 81054f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105500:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8105504:	f503 532c 	add.w	r3, r3, #11008	; 0x2b00
 8105508:	009a      	lsls	r2, r3, #2
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105516:	009b      	lsls	r3, r3, #2
 8105518:	441a      	add	r2, r3
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105526:	00db      	lsls	r3, r3, #3
 8105528:	441a      	add	r2, r3
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105536:	6879      	ldr	r1, [r7, #4]
 8105538:	6c49      	ldr	r1, [r1, #68]	; 0x44
 810553a:	fb01 f303 	mul.w	r3, r1, r3
 810553e:	009b      	lsls	r3, r3, #2
 8105540:	441a      	add	r2, r3
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8105546:	687b      	ldr	r3, [r7, #4]
 8105548:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810554e:	6879      	ldr	r1, [r7, #4]
 8105550:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8105552:	fb01 f303 	mul.w	r3, r1, r3
 8105556:	009b      	lsls	r3, r3, #2
 8105558:	441a      	add	r2, r3
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8105562:	687b      	ldr	r3, [r7, #4]
 8105564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105566:	6879      	ldr	r1, [r7, #4]
 8105568:	6d49      	ldr	r1, [r1, #84]	; 0x54
 810556a:	fb01 f303 	mul.w	r3, r1, r3
 810556e:	009b      	lsls	r3, r3, #2
 8105570:	441a      	add	r2, r3
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105582:	00db      	lsls	r3, r3, #3
 8105584:	441a      	add	r2, r3
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105596:	6879      	ldr	r1, [r7, #4]
 8105598:	6e89      	ldr	r1, [r1, #104]	; 0x68
 810559a:	fb01 f303 	mul.w	r3, r1, r3
 810559e:	009b      	lsls	r3, r3, #2
 81055a0:	441a      	add	r2, r3
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81055b2:	6879      	ldr	r1, [r7, #4]
 81055b4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 81055b6:	fb01 f303 	mul.w	r3, r1, r3
 81055ba:	009b      	lsls	r3, r3, #2
 81055bc:	441a      	add	r2, r3
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 81055c4:	687b      	ldr	r3, [r7, #4]
 81055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81055ca:	4a14      	ldr	r2, [pc, #80]	; (810561c <FDCAN_CalcultateRamBlockAddresses+0x31c>)
 81055cc:	4293      	cmp	r3, r2
 81055ce:	d90d      	bls.n	81055ec <FDCAN_CalcultateRamBlockAddresses+0x2ec>
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81055d6:	f043 0220 	orr.w	r2, r3, #32
 81055da:	687b      	ldr	r3, [r7, #4]
 81055dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	2203      	movs	r2, #3
 81055e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 81055e8:	2301      	movs	r3, #1
 81055ea:	e010      	b.n	810560e <FDCAN_CalcultateRamBlockAddresses+0x30e>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81055f0:	60fb      	str	r3, [r7, #12]
 81055f2:	e005      	b.n	8105600 <FDCAN_CalcultateRamBlockAddresses+0x300>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 81055f4:	68fb      	ldr	r3, [r7, #12]
 81055f6:	2200      	movs	r2, #0
 81055f8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	3304      	adds	r3, #4
 81055fe:	60fb      	str	r3, [r7, #12]
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105606:	68fa      	ldr	r2, [r7, #12]
 8105608:	429a      	cmp	r2, r3
 810560a:	d3f3      	bcc.n	81055f4 <FDCAN_CalcultateRamBlockAddresses+0x2f4>
    }
  }

  /* Return function status */
  return HAL_OK;
 810560c:	2300      	movs	r3, #0
}
 810560e:	4618      	mov	r0, r3
 8105610:	3714      	adds	r7, #20
 8105612:	46bd      	mov	sp, r7
 8105614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105618:	4770      	bx	lr
 810561a:	bf00      	nop
 810561c:	4000d3fc 	.word	0x4000d3fc

08105620 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105620:	b480      	push	{r7}
 8105622:	b089      	sub	sp, #36	; 0x24
 8105624:	af00      	add	r7, sp, #0
 8105626:	6078      	str	r0, [r7, #4]
 8105628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810562a:	2300      	movs	r3, #0
 810562c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810562e:	4b89      	ldr	r3, [pc, #548]	; (8105854 <HAL_GPIO_Init+0x234>)
 8105630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105632:	e194      	b.n	810595e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105634:	683b      	ldr	r3, [r7, #0]
 8105636:	681a      	ldr	r2, [r3, #0]
 8105638:	2101      	movs	r1, #1
 810563a:	69fb      	ldr	r3, [r7, #28]
 810563c:	fa01 f303 	lsl.w	r3, r1, r3
 8105640:	4013      	ands	r3, r2
 8105642:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105644:	693b      	ldr	r3, [r7, #16]
 8105646:	2b00      	cmp	r3, #0
 8105648:	f000 8186 	beq.w	8105958 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810564c:	683b      	ldr	r3, [r7, #0]
 810564e:	685b      	ldr	r3, [r3, #4]
 8105650:	f003 0303 	and.w	r3, r3, #3
 8105654:	2b01      	cmp	r3, #1
 8105656:	d005      	beq.n	8105664 <HAL_GPIO_Init+0x44>
 8105658:	683b      	ldr	r3, [r7, #0]
 810565a:	685b      	ldr	r3, [r3, #4]
 810565c:	f003 0303 	and.w	r3, r3, #3
 8105660:	2b02      	cmp	r3, #2
 8105662:	d130      	bne.n	81056c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105664:	687b      	ldr	r3, [r7, #4]
 8105666:	689b      	ldr	r3, [r3, #8]
 8105668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810566a:	69fb      	ldr	r3, [r7, #28]
 810566c:	005b      	lsls	r3, r3, #1
 810566e:	2203      	movs	r2, #3
 8105670:	fa02 f303 	lsl.w	r3, r2, r3
 8105674:	43db      	mvns	r3, r3
 8105676:	69ba      	ldr	r2, [r7, #24]
 8105678:	4013      	ands	r3, r2
 810567a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810567c:	683b      	ldr	r3, [r7, #0]
 810567e:	68da      	ldr	r2, [r3, #12]
 8105680:	69fb      	ldr	r3, [r7, #28]
 8105682:	005b      	lsls	r3, r3, #1
 8105684:	fa02 f303 	lsl.w	r3, r2, r3
 8105688:	69ba      	ldr	r2, [r7, #24]
 810568a:	4313      	orrs	r3, r2
 810568c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810568e:	687b      	ldr	r3, [r7, #4]
 8105690:	69ba      	ldr	r2, [r7, #24]
 8105692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	685b      	ldr	r3, [r3, #4]
 8105698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810569a:	2201      	movs	r2, #1
 810569c:	69fb      	ldr	r3, [r7, #28]
 810569e:	fa02 f303 	lsl.w	r3, r2, r3
 81056a2:	43db      	mvns	r3, r3
 81056a4:	69ba      	ldr	r2, [r7, #24]
 81056a6:	4013      	ands	r3, r2
 81056a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81056aa:	683b      	ldr	r3, [r7, #0]
 81056ac:	685b      	ldr	r3, [r3, #4]
 81056ae:	091b      	lsrs	r3, r3, #4
 81056b0:	f003 0201 	and.w	r2, r3, #1
 81056b4:	69fb      	ldr	r3, [r7, #28]
 81056b6:	fa02 f303 	lsl.w	r3, r2, r3
 81056ba:	69ba      	ldr	r2, [r7, #24]
 81056bc:	4313      	orrs	r3, r2
 81056be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	69ba      	ldr	r2, [r7, #24]
 81056c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81056c6:	683b      	ldr	r3, [r7, #0]
 81056c8:	685b      	ldr	r3, [r3, #4]
 81056ca:	f003 0303 	and.w	r3, r3, #3
 81056ce:	2b03      	cmp	r3, #3
 81056d0:	d017      	beq.n	8105702 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	68db      	ldr	r3, [r3, #12]
 81056d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81056d8:	69fb      	ldr	r3, [r7, #28]
 81056da:	005b      	lsls	r3, r3, #1
 81056dc:	2203      	movs	r2, #3
 81056de:	fa02 f303 	lsl.w	r3, r2, r3
 81056e2:	43db      	mvns	r3, r3
 81056e4:	69ba      	ldr	r2, [r7, #24]
 81056e6:	4013      	ands	r3, r2
 81056e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81056ea:	683b      	ldr	r3, [r7, #0]
 81056ec:	689a      	ldr	r2, [r3, #8]
 81056ee:	69fb      	ldr	r3, [r7, #28]
 81056f0:	005b      	lsls	r3, r3, #1
 81056f2:	fa02 f303 	lsl.w	r3, r2, r3
 81056f6:	69ba      	ldr	r2, [r7, #24]
 81056f8:	4313      	orrs	r3, r2
 81056fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	69ba      	ldr	r2, [r7, #24]
 8105700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8105702:	683b      	ldr	r3, [r7, #0]
 8105704:	685b      	ldr	r3, [r3, #4]
 8105706:	f003 0303 	and.w	r3, r3, #3
 810570a:	2b02      	cmp	r3, #2
 810570c:	d123      	bne.n	8105756 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810570e:	69fb      	ldr	r3, [r7, #28]
 8105710:	08da      	lsrs	r2, r3, #3
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	3208      	adds	r2, #8
 8105716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810571a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810571c:	69fb      	ldr	r3, [r7, #28]
 810571e:	f003 0307 	and.w	r3, r3, #7
 8105722:	009b      	lsls	r3, r3, #2
 8105724:	220f      	movs	r2, #15
 8105726:	fa02 f303 	lsl.w	r3, r2, r3
 810572a:	43db      	mvns	r3, r3
 810572c:	69ba      	ldr	r2, [r7, #24]
 810572e:	4013      	ands	r3, r2
 8105730:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105732:	683b      	ldr	r3, [r7, #0]
 8105734:	691a      	ldr	r2, [r3, #16]
 8105736:	69fb      	ldr	r3, [r7, #28]
 8105738:	f003 0307 	and.w	r3, r3, #7
 810573c:	009b      	lsls	r3, r3, #2
 810573e:	fa02 f303 	lsl.w	r3, r2, r3
 8105742:	69ba      	ldr	r2, [r7, #24]
 8105744:	4313      	orrs	r3, r2
 8105746:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105748:	69fb      	ldr	r3, [r7, #28]
 810574a:	08da      	lsrs	r2, r3, #3
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	3208      	adds	r2, #8
 8105750:	69b9      	ldr	r1, [r7, #24]
 8105752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810575c:	69fb      	ldr	r3, [r7, #28]
 810575e:	005b      	lsls	r3, r3, #1
 8105760:	2203      	movs	r2, #3
 8105762:	fa02 f303 	lsl.w	r3, r2, r3
 8105766:	43db      	mvns	r3, r3
 8105768:	69ba      	ldr	r2, [r7, #24]
 810576a:	4013      	ands	r3, r2
 810576c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810576e:	683b      	ldr	r3, [r7, #0]
 8105770:	685b      	ldr	r3, [r3, #4]
 8105772:	f003 0203 	and.w	r2, r3, #3
 8105776:	69fb      	ldr	r3, [r7, #28]
 8105778:	005b      	lsls	r3, r3, #1
 810577a:	fa02 f303 	lsl.w	r3, r2, r3
 810577e:	69ba      	ldr	r2, [r7, #24]
 8105780:	4313      	orrs	r3, r2
 8105782:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	69ba      	ldr	r2, [r7, #24]
 8105788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810578a:	683b      	ldr	r3, [r7, #0]
 810578c:	685b      	ldr	r3, [r3, #4]
 810578e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8105792:	2b00      	cmp	r3, #0
 8105794:	f000 80e0 	beq.w	8105958 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105798:	4b2f      	ldr	r3, [pc, #188]	; (8105858 <HAL_GPIO_Init+0x238>)
 810579a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810579e:	4a2e      	ldr	r2, [pc, #184]	; (8105858 <HAL_GPIO_Init+0x238>)
 81057a0:	f043 0302 	orr.w	r3, r3, #2
 81057a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81057a8:	4b2b      	ldr	r3, [pc, #172]	; (8105858 <HAL_GPIO_Init+0x238>)
 81057aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81057ae:	f003 0302 	and.w	r3, r3, #2
 81057b2:	60fb      	str	r3, [r7, #12]
 81057b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81057b6:	4a29      	ldr	r2, [pc, #164]	; (810585c <HAL_GPIO_Init+0x23c>)
 81057b8:	69fb      	ldr	r3, [r7, #28]
 81057ba:	089b      	lsrs	r3, r3, #2
 81057bc:	3302      	adds	r3, #2
 81057be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81057c4:	69fb      	ldr	r3, [r7, #28]
 81057c6:	f003 0303 	and.w	r3, r3, #3
 81057ca:	009b      	lsls	r3, r3, #2
 81057cc:	220f      	movs	r2, #15
 81057ce:	fa02 f303 	lsl.w	r3, r2, r3
 81057d2:	43db      	mvns	r3, r3
 81057d4:	69ba      	ldr	r2, [r7, #24]
 81057d6:	4013      	ands	r3, r2
 81057d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	4a20      	ldr	r2, [pc, #128]	; (8105860 <HAL_GPIO_Init+0x240>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d052      	beq.n	8105888 <HAL_GPIO_Init+0x268>
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	4a1f      	ldr	r2, [pc, #124]	; (8105864 <HAL_GPIO_Init+0x244>)
 81057e6:	4293      	cmp	r3, r2
 81057e8:	d031      	beq.n	810584e <HAL_GPIO_Init+0x22e>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	4a1e      	ldr	r2, [pc, #120]	; (8105868 <HAL_GPIO_Init+0x248>)
 81057ee:	4293      	cmp	r3, r2
 81057f0:	d02b      	beq.n	810584a <HAL_GPIO_Init+0x22a>
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	4a1d      	ldr	r2, [pc, #116]	; (810586c <HAL_GPIO_Init+0x24c>)
 81057f6:	4293      	cmp	r3, r2
 81057f8:	d025      	beq.n	8105846 <HAL_GPIO_Init+0x226>
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	4a1c      	ldr	r2, [pc, #112]	; (8105870 <HAL_GPIO_Init+0x250>)
 81057fe:	4293      	cmp	r3, r2
 8105800:	d01f      	beq.n	8105842 <HAL_GPIO_Init+0x222>
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	4a1b      	ldr	r2, [pc, #108]	; (8105874 <HAL_GPIO_Init+0x254>)
 8105806:	4293      	cmp	r3, r2
 8105808:	d019      	beq.n	810583e <HAL_GPIO_Init+0x21e>
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	4a1a      	ldr	r2, [pc, #104]	; (8105878 <HAL_GPIO_Init+0x258>)
 810580e:	4293      	cmp	r3, r2
 8105810:	d013      	beq.n	810583a <HAL_GPIO_Init+0x21a>
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	4a19      	ldr	r2, [pc, #100]	; (810587c <HAL_GPIO_Init+0x25c>)
 8105816:	4293      	cmp	r3, r2
 8105818:	d00d      	beq.n	8105836 <HAL_GPIO_Init+0x216>
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	4a18      	ldr	r2, [pc, #96]	; (8105880 <HAL_GPIO_Init+0x260>)
 810581e:	4293      	cmp	r3, r2
 8105820:	d007      	beq.n	8105832 <HAL_GPIO_Init+0x212>
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	4a17      	ldr	r2, [pc, #92]	; (8105884 <HAL_GPIO_Init+0x264>)
 8105826:	4293      	cmp	r3, r2
 8105828:	d101      	bne.n	810582e <HAL_GPIO_Init+0x20e>
 810582a:	2309      	movs	r3, #9
 810582c:	e02d      	b.n	810588a <HAL_GPIO_Init+0x26a>
 810582e:	230a      	movs	r3, #10
 8105830:	e02b      	b.n	810588a <HAL_GPIO_Init+0x26a>
 8105832:	2308      	movs	r3, #8
 8105834:	e029      	b.n	810588a <HAL_GPIO_Init+0x26a>
 8105836:	2307      	movs	r3, #7
 8105838:	e027      	b.n	810588a <HAL_GPIO_Init+0x26a>
 810583a:	2306      	movs	r3, #6
 810583c:	e025      	b.n	810588a <HAL_GPIO_Init+0x26a>
 810583e:	2305      	movs	r3, #5
 8105840:	e023      	b.n	810588a <HAL_GPIO_Init+0x26a>
 8105842:	2304      	movs	r3, #4
 8105844:	e021      	b.n	810588a <HAL_GPIO_Init+0x26a>
 8105846:	2303      	movs	r3, #3
 8105848:	e01f      	b.n	810588a <HAL_GPIO_Init+0x26a>
 810584a:	2302      	movs	r3, #2
 810584c:	e01d      	b.n	810588a <HAL_GPIO_Init+0x26a>
 810584e:	2301      	movs	r3, #1
 8105850:	e01b      	b.n	810588a <HAL_GPIO_Init+0x26a>
 8105852:	bf00      	nop
 8105854:	580000c0 	.word	0x580000c0
 8105858:	58024400 	.word	0x58024400
 810585c:	58000400 	.word	0x58000400
 8105860:	58020000 	.word	0x58020000
 8105864:	58020400 	.word	0x58020400
 8105868:	58020800 	.word	0x58020800
 810586c:	58020c00 	.word	0x58020c00
 8105870:	58021000 	.word	0x58021000
 8105874:	58021400 	.word	0x58021400
 8105878:	58021800 	.word	0x58021800
 810587c:	58021c00 	.word	0x58021c00
 8105880:	58022000 	.word	0x58022000
 8105884:	58022400 	.word	0x58022400
 8105888:	2300      	movs	r3, #0
 810588a:	69fa      	ldr	r2, [r7, #28]
 810588c:	f002 0203 	and.w	r2, r2, #3
 8105890:	0092      	lsls	r2, r2, #2
 8105892:	4093      	lsls	r3, r2
 8105894:	69ba      	ldr	r2, [r7, #24]
 8105896:	4313      	orrs	r3, r2
 8105898:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810589a:	4938      	ldr	r1, [pc, #224]	; (810597c <HAL_GPIO_Init+0x35c>)
 810589c:	69fb      	ldr	r3, [r7, #28]
 810589e:	089b      	lsrs	r3, r3, #2
 81058a0:	3302      	adds	r3, #2
 81058a2:	69ba      	ldr	r2, [r7, #24]
 81058a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058b0:	693b      	ldr	r3, [r7, #16]
 81058b2:	43db      	mvns	r3, r3
 81058b4:	69ba      	ldr	r2, [r7, #24]
 81058b6:	4013      	ands	r3, r2
 81058b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81058ba:	683b      	ldr	r3, [r7, #0]
 81058bc:	685b      	ldr	r3, [r3, #4]
 81058be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81058c2:	2b00      	cmp	r3, #0
 81058c4:	d003      	beq.n	81058ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81058c6:	69ba      	ldr	r2, [r7, #24]
 81058c8:	693b      	ldr	r3, [r7, #16]
 81058ca:	4313      	orrs	r3, r2
 81058cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81058ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81058d2:	69bb      	ldr	r3, [r7, #24]
 81058d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81058d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81058da:	685b      	ldr	r3, [r3, #4]
 81058dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058de:	693b      	ldr	r3, [r7, #16]
 81058e0:	43db      	mvns	r3, r3
 81058e2:	69ba      	ldr	r2, [r7, #24]
 81058e4:	4013      	ands	r3, r2
 81058e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81058e8:	683b      	ldr	r3, [r7, #0]
 81058ea:	685b      	ldr	r3, [r3, #4]
 81058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d003      	beq.n	81058fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81058f4:	69ba      	ldr	r2, [r7, #24]
 81058f6:	693b      	ldr	r3, [r7, #16]
 81058f8:	4313      	orrs	r3, r2
 81058fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81058fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105900:	69bb      	ldr	r3, [r7, #24]
 8105902:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8105904:	697b      	ldr	r3, [r7, #20]
 8105906:	685b      	ldr	r3, [r3, #4]
 8105908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810590a:	693b      	ldr	r3, [r7, #16]
 810590c:	43db      	mvns	r3, r3
 810590e:	69ba      	ldr	r2, [r7, #24]
 8105910:	4013      	ands	r3, r2
 8105912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8105914:	683b      	ldr	r3, [r7, #0]
 8105916:	685b      	ldr	r3, [r3, #4]
 8105918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810591c:	2b00      	cmp	r3, #0
 810591e:	d003      	beq.n	8105928 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105920:	69ba      	ldr	r2, [r7, #24]
 8105922:	693b      	ldr	r3, [r7, #16]
 8105924:	4313      	orrs	r3, r2
 8105926:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105928:	697b      	ldr	r3, [r7, #20]
 810592a:	69ba      	ldr	r2, [r7, #24]
 810592c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810592e:	697b      	ldr	r3, [r7, #20]
 8105930:	681b      	ldr	r3, [r3, #0]
 8105932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105934:	693b      	ldr	r3, [r7, #16]
 8105936:	43db      	mvns	r3, r3
 8105938:	69ba      	ldr	r2, [r7, #24]
 810593a:	4013      	ands	r3, r2
 810593c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810593e:	683b      	ldr	r3, [r7, #0]
 8105940:	685b      	ldr	r3, [r3, #4]
 8105942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105946:	2b00      	cmp	r3, #0
 8105948:	d003      	beq.n	8105952 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810594a:	69ba      	ldr	r2, [r7, #24]
 810594c:	693b      	ldr	r3, [r7, #16]
 810594e:	4313      	orrs	r3, r2
 8105950:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105952:	697b      	ldr	r3, [r7, #20]
 8105954:	69ba      	ldr	r2, [r7, #24]
 8105956:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105958:	69fb      	ldr	r3, [r7, #28]
 810595a:	3301      	adds	r3, #1
 810595c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810595e:	683b      	ldr	r3, [r7, #0]
 8105960:	681a      	ldr	r2, [r3, #0]
 8105962:	69fb      	ldr	r3, [r7, #28]
 8105964:	fa22 f303 	lsr.w	r3, r2, r3
 8105968:	2b00      	cmp	r3, #0
 810596a:	f47f ae63 	bne.w	8105634 <HAL_GPIO_Init+0x14>
  }
}
 810596e:	bf00      	nop
 8105970:	bf00      	nop
 8105972:	3724      	adds	r7, #36	; 0x24
 8105974:	46bd      	mov	sp, r7
 8105976:	f85d 7b04 	ldr.w	r7, [sp], #4
 810597a:	4770      	bx	lr
 810597c:	58000400 	.word	0x58000400

08105980 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105980:	b480      	push	{r7}
 8105982:	b083      	sub	sp, #12
 8105984:	af00      	add	r7, sp, #0
 8105986:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105988:	4b05      	ldr	r3, [pc, #20]	; (81059a0 <HAL_HSEM_ActivateNotification+0x20>)
 810598a:	681a      	ldr	r2, [r3, #0]
 810598c:	4904      	ldr	r1, [pc, #16]	; (81059a0 <HAL_HSEM_ActivateNotification+0x20>)
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	4313      	orrs	r3, r2
 8105992:	600b      	str	r3, [r1, #0]
#endif
}
 8105994:	bf00      	nop
 8105996:	370c      	adds	r7, #12
 8105998:	46bd      	mov	sp, r7
 810599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810599e:	4770      	bx	lr
 81059a0:	58026510 	.word	0x58026510

081059a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 81059a4:	b580      	push	{r7, lr}
 81059a6:	b084      	sub	sp, #16
 81059a8:	af00      	add	r7, sp, #0
 81059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d101      	bne.n	81059b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 81059b2:	2301      	movs	r3, #1
 81059b4:	e0bf      	b.n	8105b36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 81059bc:	b2db      	uxtb	r3, r3
 81059be:	2b00      	cmp	r3, #0
 81059c0:	d106      	bne.n	81059d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	2200      	movs	r2, #0
 81059c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 81059ca:	6878      	ldr	r0, [r7, #4]
 81059cc:	f7fb fc18 	bl	8101200 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 81059d0:	687b      	ldr	r3, [r7, #4]
 81059d2:	2202      	movs	r2, #2
 81059d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 81059d8:	687b      	ldr	r3, [r7, #4]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	699a      	ldr	r2, [r3, #24]
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	681b      	ldr	r3, [r3, #0]
 81059e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 81059e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	6999      	ldr	r1, [r3, #24]
 81059ee:	687b      	ldr	r3, [r7, #4]
 81059f0:	685a      	ldr	r2, [r3, #4]
 81059f2:	687b      	ldr	r3, [r7, #4]
 81059f4:	689b      	ldr	r3, [r3, #8]
 81059f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 81059fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	691b      	ldr	r3, [r3, #16]
 8105a02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	430a      	orrs	r2, r1
 8105a0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	681b      	ldr	r3, [r3, #0]
 8105a10:	6899      	ldr	r1, [r3, #8]
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681a      	ldr	r2, [r3, #0]
 8105a16:	4b4a      	ldr	r3, [pc, #296]	; (8105b40 <HAL_LTDC_Init+0x19c>)
 8105a18:	400b      	ands	r3, r1
 8105a1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	695b      	ldr	r3, [r3, #20]
 8105a20:	041b      	lsls	r3, r3, #16
 8105a22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	6899      	ldr	r1, [r3, #8]
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	699a      	ldr	r2, [r3, #24]
 8105a2e:	68fb      	ldr	r3, [r7, #12]
 8105a30:	431a      	orrs	r2, r3
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	430a      	orrs	r2, r1
 8105a38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	68d9      	ldr	r1, [r3, #12]
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	681a      	ldr	r2, [r3, #0]
 8105a44:	4b3e      	ldr	r3, [pc, #248]	; (8105b40 <HAL_LTDC_Init+0x19c>)
 8105a46:	400b      	ands	r3, r1
 8105a48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	69db      	ldr	r3, [r3, #28]
 8105a4e:	041b      	lsls	r3, r3, #16
 8105a50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	68d9      	ldr	r1, [r3, #12]
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	6a1a      	ldr	r2, [r3, #32]
 8105a5c:	68fb      	ldr	r3, [r7, #12]
 8105a5e:	431a      	orrs	r2, r3
 8105a60:	687b      	ldr	r3, [r7, #4]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	430a      	orrs	r2, r1
 8105a66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	6919      	ldr	r1, [r3, #16]
 8105a6e:	687b      	ldr	r3, [r7, #4]
 8105a70:	681a      	ldr	r2, [r3, #0]
 8105a72:	4b33      	ldr	r3, [pc, #204]	; (8105b40 <HAL_LTDC_Init+0x19c>)
 8105a74:	400b      	ands	r3, r1
 8105a76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105a7c:	041b      	lsls	r3, r3, #16
 8105a7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	6919      	ldr	r1, [r3, #16]
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8105a8a:	68fb      	ldr	r3, [r7, #12]
 8105a8c:	431a      	orrs	r2, r3
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	681b      	ldr	r3, [r3, #0]
 8105a92:	430a      	orrs	r2, r1
 8105a94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	6959      	ldr	r1, [r3, #20]
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	681a      	ldr	r2, [r3, #0]
 8105aa0:	4b27      	ldr	r3, [pc, #156]	; (8105b40 <HAL_LTDC_Init+0x19c>)
 8105aa2:	400b      	ands	r3, r1
 8105aa4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105aaa:	041b      	lsls	r3, r3, #16
 8105aac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	6959      	ldr	r1, [r3, #20]
 8105ab4:	687b      	ldr	r3, [r7, #4]
 8105ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105ab8:	68fb      	ldr	r3, [r7, #12]
 8105aba:	431a      	orrs	r2, r3
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	681b      	ldr	r3, [r3, #0]
 8105ac0:	430a      	orrs	r2, r1
 8105ac2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8105ac4:	687b      	ldr	r3, [r7, #4]
 8105ac6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8105aca:	021b      	lsls	r3, r3, #8
 8105acc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8105ad4:	041b      	lsls	r3, r3, #16
 8105ad6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105ade:	687b      	ldr	r3, [r7, #4]
 8105ae0:	681b      	ldr	r3, [r3, #0]
 8105ae2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8105ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8105aee:	68ba      	ldr	r2, [r7, #8]
 8105af0:	68fb      	ldr	r3, [r7, #12]
 8105af2:	4313      	orrs	r3, r2
 8105af4:	687a      	ldr	r2, [r7, #4]
 8105af6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8105afa:	431a      	orrs	r2, r3
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	430a      	orrs	r2, r1
 8105b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	f042 0206 	orr.w	r2, r2, #6
 8105b12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	699a      	ldr	r2, [r3, #24]
 8105b1a:	687b      	ldr	r3, [r7, #4]
 8105b1c:	681b      	ldr	r3, [r3, #0]
 8105b1e:	f042 0201 	orr.w	r2, r2, #1
 8105b22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	2200      	movs	r2, #0
 8105b28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	2201      	movs	r2, #1
 8105b30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8105b34:	2300      	movs	r3, #0
}
 8105b36:	4618      	mov	r0, r3
 8105b38:	3710      	adds	r7, #16
 8105b3a:	46bd      	mov	sp, r7
 8105b3c:	bd80      	pop	{r7, pc}
 8105b3e:	bf00      	nop
 8105b40:	f000f800 	.word	0xf000f800

08105b44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8105b44:	b5b0      	push	{r4, r5, r7, lr}
 8105b46:	b084      	sub	sp, #16
 8105b48:	af00      	add	r7, sp, #0
 8105b4a:	60f8      	str	r0, [r7, #12]
 8105b4c:	60b9      	str	r1, [r7, #8]
 8105b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8105b50:	68fb      	ldr	r3, [r7, #12]
 8105b52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8105b56:	2b01      	cmp	r3, #1
 8105b58:	d101      	bne.n	8105b5e <HAL_LTDC_ConfigLayer+0x1a>
 8105b5a:	2302      	movs	r3, #2
 8105b5c:	e02c      	b.n	8105bb8 <HAL_LTDC_ConfigLayer+0x74>
 8105b5e:	68fb      	ldr	r3, [r7, #12]
 8105b60:	2201      	movs	r2, #1
 8105b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8105b66:	68fb      	ldr	r3, [r7, #12]
 8105b68:	2202      	movs	r2, #2
 8105b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8105b6e:	68fa      	ldr	r2, [r7, #12]
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	2134      	movs	r1, #52	; 0x34
 8105b74:	fb01 f303 	mul.w	r3, r1, r3
 8105b78:	4413      	add	r3, r2
 8105b7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8105b7e:	68bb      	ldr	r3, [r7, #8]
 8105b80:	4614      	mov	r4, r2
 8105b82:	461d      	mov	r5, r3
 8105b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8105b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8105b90:	682b      	ldr	r3, [r5, #0]
 8105b92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8105b94:	687a      	ldr	r2, [r7, #4]
 8105b96:	68b9      	ldr	r1, [r7, #8]
 8105b98:	68f8      	ldr	r0, [r7, #12]
 8105b9a:	f000 f811 	bl	8105bc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8105b9e:	68fb      	ldr	r3, [r7, #12]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	2201      	movs	r2, #1
 8105ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8105ba6:	68fb      	ldr	r3, [r7, #12]
 8105ba8:	2201      	movs	r2, #1
 8105baa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8105bae:	68fb      	ldr	r3, [r7, #12]
 8105bb0:	2200      	movs	r2, #0
 8105bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8105bb6:	2300      	movs	r3, #0
}
 8105bb8:	4618      	mov	r0, r3
 8105bba:	3710      	adds	r7, #16
 8105bbc:	46bd      	mov	sp, r7
 8105bbe:	bdb0      	pop	{r4, r5, r7, pc}

08105bc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8105bc0:	b480      	push	{r7}
 8105bc2:	b089      	sub	sp, #36	; 0x24
 8105bc4:	af00      	add	r7, sp, #0
 8105bc6:	60f8      	str	r0, [r7, #12]
 8105bc8:	60b9      	str	r1, [r7, #8]
 8105bca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8105bcc:	68bb      	ldr	r3, [r7, #8]
 8105bce:	685a      	ldr	r2, [r3, #4]
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	681b      	ldr	r3, [r3, #0]
 8105bd4:	68db      	ldr	r3, [r3, #12]
 8105bd6:	0c1b      	lsrs	r3, r3, #16
 8105bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8105bdc:	4413      	add	r3, r2
 8105bde:	041b      	lsls	r3, r3, #16
 8105be0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8105be2:	68fb      	ldr	r3, [r7, #12]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	461a      	mov	r2, r3
 8105be8:	687b      	ldr	r3, [r7, #4]
 8105bea:	01db      	lsls	r3, r3, #7
 8105bec:	4413      	add	r3, r2
 8105bee:	3384      	adds	r3, #132	; 0x84
 8105bf0:	685b      	ldr	r3, [r3, #4]
 8105bf2:	68fa      	ldr	r2, [r7, #12]
 8105bf4:	6812      	ldr	r2, [r2, #0]
 8105bf6:	4611      	mov	r1, r2
 8105bf8:	687a      	ldr	r2, [r7, #4]
 8105bfa:	01d2      	lsls	r2, r2, #7
 8105bfc:	440a      	add	r2, r1
 8105bfe:	3284      	adds	r2, #132	; 0x84
 8105c00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8105c04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105c06:	68bb      	ldr	r3, [r7, #8]
 8105c08:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8105c0a:	68fb      	ldr	r3, [r7, #12]
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	68db      	ldr	r3, [r3, #12]
 8105c10:	0c1b      	lsrs	r3, r3, #16
 8105c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105c16:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8105c18:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105c1a:	68fb      	ldr	r3, [r7, #12]
 8105c1c:	681b      	ldr	r3, [r3, #0]
 8105c1e:	4619      	mov	r1, r3
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	01db      	lsls	r3, r3, #7
 8105c24:	440b      	add	r3, r1
 8105c26:	3384      	adds	r3, #132	; 0x84
 8105c28:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8105c2a:	69fb      	ldr	r3, [r7, #28]
 8105c2c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8105c2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8105c30:	68bb      	ldr	r3, [r7, #8]
 8105c32:	68da      	ldr	r2, [r3, #12]
 8105c34:	68fb      	ldr	r3, [r7, #12]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	68db      	ldr	r3, [r3, #12]
 8105c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8105c3e:	4413      	add	r3, r2
 8105c40:	041b      	lsls	r3, r3, #16
 8105c42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8105c44:	68fb      	ldr	r3, [r7, #12]
 8105c46:	681b      	ldr	r3, [r3, #0]
 8105c48:	461a      	mov	r2, r3
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	01db      	lsls	r3, r3, #7
 8105c4e:	4413      	add	r3, r2
 8105c50:	3384      	adds	r3, #132	; 0x84
 8105c52:	689b      	ldr	r3, [r3, #8]
 8105c54:	68fa      	ldr	r2, [r7, #12]
 8105c56:	6812      	ldr	r2, [r2, #0]
 8105c58:	4611      	mov	r1, r2
 8105c5a:	687a      	ldr	r2, [r7, #4]
 8105c5c:	01d2      	lsls	r2, r2, #7
 8105c5e:	440a      	add	r2, r1
 8105c60:	3284      	adds	r2, #132	; 0x84
 8105c62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8105c66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8105c68:	68bb      	ldr	r3, [r7, #8]
 8105c6a:	689a      	ldr	r2, [r3, #8]
 8105c6c:	68fb      	ldr	r3, [r7, #12]
 8105c6e:	681b      	ldr	r3, [r3, #0]
 8105c70:	68db      	ldr	r3, [r3, #12]
 8105c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8105c76:	4413      	add	r3, r2
 8105c78:	1c5a      	adds	r2, r3, #1
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	4619      	mov	r1, r3
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	01db      	lsls	r3, r3, #7
 8105c84:	440b      	add	r3, r1
 8105c86:	3384      	adds	r3, #132	; 0x84
 8105c88:	4619      	mov	r1, r3
 8105c8a:	69fb      	ldr	r3, [r7, #28]
 8105c8c:	4313      	orrs	r3, r2
 8105c8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8105c90:	68fb      	ldr	r3, [r7, #12]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	461a      	mov	r2, r3
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	01db      	lsls	r3, r3, #7
 8105c9a:	4413      	add	r3, r2
 8105c9c:	3384      	adds	r3, #132	; 0x84
 8105c9e:	691b      	ldr	r3, [r3, #16]
 8105ca0:	68fa      	ldr	r2, [r7, #12]
 8105ca2:	6812      	ldr	r2, [r2, #0]
 8105ca4:	4611      	mov	r1, r2
 8105ca6:	687a      	ldr	r2, [r7, #4]
 8105ca8:	01d2      	lsls	r2, r2, #7
 8105caa:	440a      	add	r2, r1
 8105cac:	3284      	adds	r2, #132	; 0x84
 8105cae:	f023 0307 	bic.w	r3, r3, #7
 8105cb2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8105cb4:	68fb      	ldr	r3, [r7, #12]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	461a      	mov	r2, r3
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	01db      	lsls	r3, r3, #7
 8105cbe:	4413      	add	r3, r2
 8105cc0:	3384      	adds	r3, #132	; 0x84
 8105cc2:	461a      	mov	r2, r3
 8105cc4:	68bb      	ldr	r3, [r7, #8]
 8105cc6:	691b      	ldr	r3, [r3, #16]
 8105cc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8105cca:	68bb      	ldr	r3, [r7, #8]
 8105ccc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8105cd0:	021b      	lsls	r3, r3, #8
 8105cd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8105cd4:	68bb      	ldr	r3, [r7, #8]
 8105cd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8105cda:	041b      	lsls	r3, r3, #16
 8105cdc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8105cde:	68bb      	ldr	r3, [r7, #8]
 8105ce0:	699b      	ldr	r3, [r3, #24]
 8105ce2:	061b      	lsls	r3, r3, #24
 8105ce4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8105ce6:	68fb      	ldr	r3, [r7, #12]
 8105ce8:	681b      	ldr	r3, [r3, #0]
 8105cea:	461a      	mov	r2, r3
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	01db      	lsls	r3, r3, #7
 8105cf0:	4413      	add	r3, r2
 8105cf2:	3384      	adds	r3, #132	; 0x84
 8105cf4:	699b      	ldr	r3, [r3, #24]
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	461a      	mov	r2, r3
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	01db      	lsls	r3, r3, #7
 8105d00:	4413      	add	r3, r2
 8105d02:	3384      	adds	r3, #132	; 0x84
 8105d04:	461a      	mov	r2, r3
 8105d06:	2300      	movs	r3, #0
 8105d08:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8105d0a:	68bb      	ldr	r3, [r7, #8]
 8105d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8105d10:	461a      	mov	r2, r3
 8105d12:	69fb      	ldr	r3, [r7, #28]
 8105d14:	431a      	orrs	r2, r3
 8105d16:	69bb      	ldr	r3, [r7, #24]
 8105d18:	431a      	orrs	r2, r3
 8105d1a:	68fb      	ldr	r3, [r7, #12]
 8105d1c:	681b      	ldr	r3, [r3, #0]
 8105d1e:	4619      	mov	r1, r3
 8105d20:	687b      	ldr	r3, [r7, #4]
 8105d22:	01db      	lsls	r3, r3, #7
 8105d24:	440b      	add	r3, r1
 8105d26:	3384      	adds	r3, #132	; 0x84
 8105d28:	4619      	mov	r1, r3
 8105d2a:	697b      	ldr	r3, [r7, #20]
 8105d2c:	4313      	orrs	r3, r2
 8105d2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8105d30:	68fb      	ldr	r3, [r7, #12]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	461a      	mov	r2, r3
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	01db      	lsls	r3, r3, #7
 8105d3a:	4413      	add	r3, r2
 8105d3c:	3384      	adds	r3, #132	; 0x84
 8105d3e:	695b      	ldr	r3, [r3, #20]
 8105d40:	68fa      	ldr	r2, [r7, #12]
 8105d42:	6812      	ldr	r2, [r2, #0]
 8105d44:	4611      	mov	r1, r2
 8105d46:	687a      	ldr	r2, [r7, #4]
 8105d48:	01d2      	lsls	r2, r2, #7
 8105d4a:	440a      	add	r2, r1
 8105d4c:	3284      	adds	r2, #132	; 0x84
 8105d4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8105d52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	461a      	mov	r2, r3
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	01db      	lsls	r3, r3, #7
 8105d5e:	4413      	add	r3, r2
 8105d60:	3384      	adds	r3, #132	; 0x84
 8105d62:	461a      	mov	r2, r3
 8105d64:	68bb      	ldr	r3, [r7, #8]
 8105d66:	695b      	ldr	r3, [r3, #20]
 8105d68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	461a      	mov	r2, r3
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	01db      	lsls	r3, r3, #7
 8105d74:	4413      	add	r3, r2
 8105d76:	3384      	adds	r3, #132	; 0x84
 8105d78:	69db      	ldr	r3, [r3, #28]
 8105d7a:	68fa      	ldr	r2, [r7, #12]
 8105d7c:	6812      	ldr	r2, [r2, #0]
 8105d7e:	4611      	mov	r1, r2
 8105d80:	687a      	ldr	r2, [r7, #4]
 8105d82:	01d2      	lsls	r2, r2, #7
 8105d84:	440a      	add	r2, r1
 8105d86:	3284      	adds	r2, #132	; 0x84
 8105d88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8105d8c:	f023 0307 	bic.w	r3, r3, #7
 8105d90:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8105d92:	68bb      	ldr	r3, [r7, #8]
 8105d94:	69da      	ldr	r2, [r3, #28]
 8105d96:	68bb      	ldr	r3, [r7, #8]
 8105d98:	6a1b      	ldr	r3, [r3, #32]
 8105d9a:	68f9      	ldr	r1, [r7, #12]
 8105d9c:	6809      	ldr	r1, [r1, #0]
 8105d9e:	4608      	mov	r0, r1
 8105da0:	6879      	ldr	r1, [r7, #4]
 8105da2:	01c9      	lsls	r1, r1, #7
 8105da4:	4401      	add	r1, r0
 8105da6:	3184      	adds	r1, #132	; 0x84
 8105da8:	4313      	orrs	r3, r2
 8105daa:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8105dac:	68fb      	ldr	r3, [r7, #12]
 8105dae:	681b      	ldr	r3, [r3, #0]
 8105db0:	461a      	mov	r2, r3
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	01db      	lsls	r3, r3, #7
 8105db6:	4413      	add	r3, r2
 8105db8:	3384      	adds	r3, #132	; 0x84
 8105dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	681b      	ldr	r3, [r3, #0]
 8105dc0:	461a      	mov	r2, r3
 8105dc2:	687b      	ldr	r3, [r7, #4]
 8105dc4:	01db      	lsls	r3, r3, #7
 8105dc6:	4413      	add	r3, r2
 8105dc8:	3384      	adds	r3, #132	; 0x84
 8105dca:	461a      	mov	r2, r3
 8105dcc:	2300      	movs	r3, #0
 8105dce:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	681b      	ldr	r3, [r3, #0]
 8105dd4:	461a      	mov	r2, r3
 8105dd6:	687b      	ldr	r3, [r7, #4]
 8105dd8:	01db      	lsls	r3, r3, #7
 8105dda:	4413      	add	r3, r2
 8105ddc:	3384      	adds	r3, #132	; 0x84
 8105dde:	461a      	mov	r2, r3
 8105de0:	68bb      	ldr	r3, [r7, #8]
 8105de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105de4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8105de6:	68bb      	ldr	r3, [r7, #8]
 8105de8:	691b      	ldr	r3, [r3, #16]
 8105dea:	2b00      	cmp	r3, #0
 8105dec:	d102      	bne.n	8105df4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8105dee:	2304      	movs	r3, #4
 8105df0:	61fb      	str	r3, [r7, #28]
 8105df2:	e01b      	b.n	8105e2c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8105df4:	68bb      	ldr	r3, [r7, #8]
 8105df6:	691b      	ldr	r3, [r3, #16]
 8105df8:	2b01      	cmp	r3, #1
 8105dfa:	d102      	bne.n	8105e02 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8105dfc:	2303      	movs	r3, #3
 8105dfe:	61fb      	str	r3, [r7, #28]
 8105e00:	e014      	b.n	8105e2c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8105e02:	68bb      	ldr	r3, [r7, #8]
 8105e04:	691b      	ldr	r3, [r3, #16]
 8105e06:	2b04      	cmp	r3, #4
 8105e08:	d00b      	beq.n	8105e22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8105e0a:	68bb      	ldr	r3, [r7, #8]
 8105e0c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8105e0e:	2b02      	cmp	r3, #2
 8105e10:	d007      	beq.n	8105e22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8105e12:	68bb      	ldr	r3, [r7, #8]
 8105e14:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8105e16:	2b03      	cmp	r3, #3
 8105e18:	d003      	beq.n	8105e22 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8105e1a:	68bb      	ldr	r3, [r7, #8]
 8105e1c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8105e1e:	2b07      	cmp	r3, #7
 8105e20:	d102      	bne.n	8105e28 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8105e22:	2302      	movs	r3, #2
 8105e24:	61fb      	str	r3, [r7, #28]
 8105e26:	e001      	b.n	8105e2c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8105e28:	2301      	movs	r3, #1
 8105e2a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8105e2c:	68fb      	ldr	r3, [r7, #12]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	461a      	mov	r2, r3
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	01db      	lsls	r3, r3, #7
 8105e36:	4413      	add	r3, r2
 8105e38:	3384      	adds	r3, #132	; 0x84
 8105e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e3c:	68fa      	ldr	r2, [r7, #12]
 8105e3e:	6812      	ldr	r2, [r2, #0]
 8105e40:	4611      	mov	r1, r2
 8105e42:	687a      	ldr	r2, [r7, #4]
 8105e44:	01d2      	lsls	r2, r2, #7
 8105e46:	440a      	add	r2, r1
 8105e48:	3284      	adds	r2, #132	; 0x84
 8105e4a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8105e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8105e50:	68bb      	ldr	r3, [r7, #8]
 8105e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e54:	69fa      	ldr	r2, [r7, #28]
 8105e56:	fb02 f303 	mul.w	r3, r2, r3
 8105e5a:	041a      	lsls	r2, r3, #16
 8105e5c:	68bb      	ldr	r3, [r7, #8]
 8105e5e:	6859      	ldr	r1, [r3, #4]
 8105e60:	68bb      	ldr	r3, [r7, #8]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	1acb      	subs	r3, r1, r3
 8105e66:	69f9      	ldr	r1, [r7, #28]
 8105e68:	fb01 f303 	mul.w	r3, r1, r3
 8105e6c:	3307      	adds	r3, #7
 8105e6e:	68f9      	ldr	r1, [r7, #12]
 8105e70:	6809      	ldr	r1, [r1, #0]
 8105e72:	4608      	mov	r0, r1
 8105e74:	6879      	ldr	r1, [r7, #4]
 8105e76:	01c9      	lsls	r1, r1, #7
 8105e78:	4401      	add	r1, r0
 8105e7a:	3184      	adds	r1, #132	; 0x84
 8105e7c:	4313      	orrs	r3, r2
 8105e7e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	461a      	mov	r2, r3
 8105e86:	687b      	ldr	r3, [r7, #4]
 8105e88:	01db      	lsls	r3, r3, #7
 8105e8a:	4413      	add	r3, r2
 8105e8c:	3384      	adds	r3, #132	; 0x84
 8105e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105e90:	68fa      	ldr	r2, [r7, #12]
 8105e92:	6812      	ldr	r2, [r2, #0]
 8105e94:	4611      	mov	r1, r2
 8105e96:	687a      	ldr	r2, [r7, #4]
 8105e98:	01d2      	lsls	r2, r2, #7
 8105e9a:	440a      	add	r2, r1
 8105e9c:	3284      	adds	r2, #132	; 0x84
 8105e9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8105ea2:	f023 0307 	bic.w	r3, r3, #7
 8105ea6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8105ea8:	68fb      	ldr	r3, [r7, #12]
 8105eaa:	681b      	ldr	r3, [r3, #0]
 8105eac:	461a      	mov	r2, r3
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	01db      	lsls	r3, r3, #7
 8105eb2:	4413      	add	r3, r2
 8105eb4:	3384      	adds	r3, #132	; 0x84
 8105eb6:	461a      	mov	r2, r3
 8105eb8:	68bb      	ldr	r3, [r7, #8]
 8105eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ebc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8105ebe:	68fb      	ldr	r3, [r7, #12]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	461a      	mov	r2, r3
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	01db      	lsls	r3, r3, #7
 8105ec8:	4413      	add	r3, r2
 8105eca:	3384      	adds	r3, #132	; 0x84
 8105ecc:	681b      	ldr	r3, [r3, #0]
 8105ece:	68fa      	ldr	r2, [r7, #12]
 8105ed0:	6812      	ldr	r2, [r2, #0]
 8105ed2:	4611      	mov	r1, r2
 8105ed4:	687a      	ldr	r2, [r7, #4]
 8105ed6:	01d2      	lsls	r2, r2, #7
 8105ed8:	440a      	add	r2, r1
 8105eda:	3284      	adds	r2, #132	; 0x84
 8105edc:	f043 0301 	orr.w	r3, r3, #1
 8105ee0:	6013      	str	r3, [r2, #0]
}
 8105ee2:	bf00      	nop
 8105ee4:	3724      	adds	r7, #36	; 0x24
 8105ee6:	46bd      	mov	sp, r7
 8105ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eec:	4770      	bx	lr

08105eee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8105eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8105ef0:	b08f      	sub	sp, #60	; 0x3c
 8105ef2:	af0a      	add	r7, sp, #40	; 0x28
 8105ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8105ef6:	687b      	ldr	r3, [r7, #4]
 8105ef8:	2b00      	cmp	r3, #0
 8105efa:	d101      	bne.n	8105f00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8105efc:	2301      	movs	r3, #1
 8105efe:	e116      	b.n	810612e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8105f00:	687b      	ldr	r3, [r7, #4]
 8105f02:	681b      	ldr	r3, [r3, #0]
 8105f04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8105f06:	687b      	ldr	r3, [r7, #4]
 8105f08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8105f0c:	b2db      	uxtb	r3, r3
 8105f0e:	2b00      	cmp	r3, #0
 8105f10:	d106      	bne.n	8105f20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8105f12:	687b      	ldr	r3, [r7, #4]
 8105f14:	2200      	movs	r2, #0
 8105f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8105f1a:	6878      	ldr	r0, [r7, #4]
 8105f1c:	f7fc f84a 	bl	8101fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	2203      	movs	r2, #3
 8105f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8105f28:	68bb      	ldr	r3, [r7, #8]
 8105f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	d102      	bne.n	8105f3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	2200      	movs	r2, #0
 8105f38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	4618      	mov	r0, r3
 8105f40:	f004 ffc8 	bl	810aed4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8105f44:	687b      	ldr	r3, [r7, #4]
 8105f46:	681b      	ldr	r3, [r3, #0]
 8105f48:	603b      	str	r3, [r7, #0]
 8105f4a:	687e      	ldr	r6, [r7, #4]
 8105f4c:	466d      	mov	r5, sp
 8105f4e:	f106 0410 	add.w	r4, r6, #16
 8105f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8105f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8105f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8105f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8105f62:	1d33      	adds	r3, r6, #4
 8105f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8105f66:	6838      	ldr	r0, [r7, #0]
 8105f68:	f004 ff46 	bl	810adf8 <USB_CoreInit>
 8105f6c:	4603      	mov	r3, r0
 8105f6e:	2b00      	cmp	r3, #0
 8105f70:	d005      	beq.n	8105f7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	2202      	movs	r2, #2
 8105f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8105f7a:	2301      	movs	r3, #1
 8105f7c:	e0d7      	b.n	810612e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8105f7e:	687b      	ldr	r3, [r7, #4]
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	2100      	movs	r1, #0
 8105f84:	4618      	mov	r0, r3
 8105f86:	f004 ffb6 	bl	810aef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105f8a:	2300      	movs	r3, #0
 8105f8c:	73fb      	strb	r3, [r7, #15]
 8105f8e:	e04a      	b.n	8106026 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8105f90:	7bfa      	ldrb	r2, [r7, #15]
 8105f92:	6879      	ldr	r1, [r7, #4]
 8105f94:	4613      	mov	r3, r2
 8105f96:	00db      	lsls	r3, r3, #3
 8105f98:	4413      	add	r3, r2
 8105f9a:	009b      	lsls	r3, r3, #2
 8105f9c:	440b      	add	r3, r1
 8105f9e:	333d      	adds	r3, #61	; 0x3d
 8105fa0:	2201      	movs	r2, #1
 8105fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8105fa4:	7bfa      	ldrb	r2, [r7, #15]
 8105fa6:	6879      	ldr	r1, [r7, #4]
 8105fa8:	4613      	mov	r3, r2
 8105faa:	00db      	lsls	r3, r3, #3
 8105fac:	4413      	add	r3, r2
 8105fae:	009b      	lsls	r3, r3, #2
 8105fb0:	440b      	add	r3, r1
 8105fb2:	333c      	adds	r3, #60	; 0x3c
 8105fb4:	7bfa      	ldrb	r2, [r7, #15]
 8105fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8105fb8:	7bfa      	ldrb	r2, [r7, #15]
 8105fba:	7bfb      	ldrb	r3, [r7, #15]
 8105fbc:	b298      	uxth	r0, r3
 8105fbe:	6879      	ldr	r1, [r7, #4]
 8105fc0:	4613      	mov	r3, r2
 8105fc2:	00db      	lsls	r3, r3, #3
 8105fc4:	4413      	add	r3, r2
 8105fc6:	009b      	lsls	r3, r3, #2
 8105fc8:	440b      	add	r3, r1
 8105fca:	3356      	adds	r3, #86	; 0x56
 8105fcc:	4602      	mov	r2, r0
 8105fce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8105fd0:	7bfa      	ldrb	r2, [r7, #15]
 8105fd2:	6879      	ldr	r1, [r7, #4]
 8105fd4:	4613      	mov	r3, r2
 8105fd6:	00db      	lsls	r3, r3, #3
 8105fd8:	4413      	add	r3, r2
 8105fda:	009b      	lsls	r3, r3, #2
 8105fdc:	440b      	add	r3, r1
 8105fde:	3340      	adds	r3, #64	; 0x40
 8105fe0:	2200      	movs	r2, #0
 8105fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8105fe4:	7bfa      	ldrb	r2, [r7, #15]
 8105fe6:	6879      	ldr	r1, [r7, #4]
 8105fe8:	4613      	mov	r3, r2
 8105fea:	00db      	lsls	r3, r3, #3
 8105fec:	4413      	add	r3, r2
 8105fee:	009b      	lsls	r3, r3, #2
 8105ff0:	440b      	add	r3, r1
 8105ff2:	3344      	adds	r3, #68	; 0x44
 8105ff4:	2200      	movs	r2, #0
 8105ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8105ff8:	7bfa      	ldrb	r2, [r7, #15]
 8105ffa:	6879      	ldr	r1, [r7, #4]
 8105ffc:	4613      	mov	r3, r2
 8105ffe:	00db      	lsls	r3, r3, #3
 8106000:	4413      	add	r3, r2
 8106002:	009b      	lsls	r3, r3, #2
 8106004:	440b      	add	r3, r1
 8106006:	3348      	adds	r3, #72	; 0x48
 8106008:	2200      	movs	r2, #0
 810600a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 810600c:	7bfa      	ldrb	r2, [r7, #15]
 810600e:	6879      	ldr	r1, [r7, #4]
 8106010:	4613      	mov	r3, r2
 8106012:	00db      	lsls	r3, r3, #3
 8106014:	4413      	add	r3, r2
 8106016:	009b      	lsls	r3, r3, #2
 8106018:	440b      	add	r3, r1
 810601a:	334c      	adds	r3, #76	; 0x4c
 810601c:	2200      	movs	r2, #0
 810601e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8106020:	7bfb      	ldrb	r3, [r7, #15]
 8106022:	3301      	adds	r3, #1
 8106024:	73fb      	strb	r3, [r7, #15]
 8106026:	7bfa      	ldrb	r2, [r7, #15]
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	685b      	ldr	r3, [r3, #4]
 810602c:	429a      	cmp	r2, r3
 810602e:	d3af      	bcc.n	8105f90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8106030:	2300      	movs	r3, #0
 8106032:	73fb      	strb	r3, [r7, #15]
 8106034:	e044      	b.n	81060c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8106036:	7bfa      	ldrb	r2, [r7, #15]
 8106038:	6879      	ldr	r1, [r7, #4]
 810603a:	4613      	mov	r3, r2
 810603c:	00db      	lsls	r3, r3, #3
 810603e:	4413      	add	r3, r2
 8106040:	009b      	lsls	r3, r3, #2
 8106042:	440b      	add	r3, r1
 8106044:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8106048:	2200      	movs	r2, #0
 810604a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 810604c:	7bfa      	ldrb	r2, [r7, #15]
 810604e:	6879      	ldr	r1, [r7, #4]
 8106050:	4613      	mov	r3, r2
 8106052:	00db      	lsls	r3, r3, #3
 8106054:	4413      	add	r3, r2
 8106056:	009b      	lsls	r3, r3, #2
 8106058:	440b      	add	r3, r1
 810605a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 810605e:	7bfa      	ldrb	r2, [r7, #15]
 8106060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8106062:	7bfa      	ldrb	r2, [r7, #15]
 8106064:	6879      	ldr	r1, [r7, #4]
 8106066:	4613      	mov	r3, r2
 8106068:	00db      	lsls	r3, r3, #3
 810606a:	4413      	add	r3, r2
 810606c:	009b      	lsls	r3, r3, #2
 810606e:	440b      	add	r3, r1
 8106070:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8106074:	2200      	movs	r2, #0
 8106076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8106078:	7bfa      	ldrb	r2, [r7, #15]
 810607a:	6879      	ldr	r1, [r7, #4]
 810607c:	4613      	mov	r3, r2
 810607e:	00db      	lsls	r3, r3, #3
 8106080:	4413      	add	r3, r2
 8106082:	009b      	lsls	r3, r3, #2
 8106084:	440b      	add	r3, r1
 8106086:	f503 7321 	add.w	r3, r3, #644	; 0x284
 810608a:	2200      	movs	r2, #0
 810608c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 810608e:	7bfa      	ldrb	r2, [r7, #15]
 8106090:	6879      	ldr	r1, [r7, #4]
 8106092:	4613      	mov	r3, r2
 8106094:	00db      	lsls	r3, r3, #3
 8106096:	4413      	add	r3, r2
 8106098:	009b      	lsls	r3, r3, #2
 810609a:	440b      	add	r3, r1
 810609c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 81060a0:	2200      	movs	r2, #0
 81060a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81060a4:	7bfa      	ldrb	r2, [r7, #15]
 81060a6:	6879      	ldr	r1, [r7, #4]
 81060a8:	4613      	mov	r3, r2
 81060aa:	00db      	lsls	r3, r3, #3
 81060ac:	4413      	add	r3, r2
 81060ae:	009b      	lsls	r3, r3, #2
 81060b0:	440b      	add	r3, r1
 81060b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 81060b6:	2200      	movs	r2, #0
 81060b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81060ba:	7bfb      	ldrb	r3, [r7, #15]
 81060bc:	3301      	adds	r3, #1
 81060be:	73fb      	strb	r3, [r7, #15]
 81060c0:	7bfa      	ldrb	r2, [r7, #15]
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	685b      	ldr	r3, [r3, #4]
 81060c6:	429a      	cmp	r2, r3
 81060c8:	d3b5      	bcc.n	8106036 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	603b      	str	r3, [r7, #0]
 81060d0:	687e      	ldr	r6, [r7, #4]
 81060d2:	466d      	mov	r5, sp
 81060d4:	f106 0410 	add.w	r4, r6, #16
 81060d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81060da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81060dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 81060de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 81060e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 81060e4:	e885 0003 	stmia.w	r5, {r0, r1}
 81060e8:	1d33      	adds	r3, r6, #4
 81060ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 81060ec:	6838      	ldr	r0, [r7, #0]
 81060ee:	f004 ff4f 	bl	810af90 <USB_DevInit>
 81060f2:	4603      	mov	r3, r0
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d005      	beq.n	8106104 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	2202      	movs	r2, #2
 81060fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8106100:	2301      	movs	r3, #1
 8106102:	e014      	b.n	810612e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	2200      	movs	r2, #0
 8106108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 810610c:	687b      	ldr	r3, [r7, #4]
 810610e:	2201      	movs	r2, #1
 8106110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106118:	2b01      	cmp	r3, #1
 810611a:	d102      	bne.n	8106122 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810611c:	6878      	ldr	r0, [r7, #4]
 810611e:	f000 f80a 	bl	8106136 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	681b      	ldr	r3, [r3, #0]
 8106126:	4618      	mov	r0, r3
 8106128:	f005 f90d 	bl	810b346 <USB_DevDisconnect>

  return HAL_OK;
 810612c:	2300      	movs	r3, #0
}
 810612e:	4618      	mov	r0, r3
 8106130:	3714      	adds	r7, #20
 8106132:	46bd      	mov	sp, r7
 8106134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08106136 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8106136:	b480      	push	{r7}
 8106138:	b085      	sub	sp, #20
 810613a:	af00      	add	r7, sp, #0
 810613c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	2201      	movs	r2, #1
 8106148:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 810614c:	687b      	ldr	r3, [r7, #4]
 810614e:	2200      	movs	r2, #0
 8106150:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8106154:	68fb      	ldr	r3, [r7, #12]
 8106156:	699b      	ldr	r3, [r3, #24]
 8106158:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8106160:	68fb      	ldr	r3, [r7, #12]
 8106162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106168:	f043 0303 	orr.w	r3, r3, #3
 810616c:	68fa      	ldr	r2, [r7, #12]
 810616e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8106170:	2300      	movs	r3, #0
}
 8106172:	4618      	mov	r0, r3
 8106174:	3714      	adds	r7, #20
 8106176:	46bd      	mov	sp, r7
 8106178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810617c:	4770      	bx	lr
	...

08106180 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8106180:	b580      	push	{r7, lr}
 8106182:	b084      	sub	sp, #16
 8106184:	af00      	add	r7, sp, #0
 8106186:	60f8      	str	r0, [r7, #12]
 8106188:	460b      	mov	r3, r1
 810618a:	607a      	str	r2, [r7, #4]
 810618c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810618e:	4b37      	ldr	r3, [pc, #220]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106190:	681b      	ldr	r3, [r3, #0]
 8106192:	f023 0201 	bic.w	r2, r3, #1
 8106196:	4935      	ldr	r1, [pc, #212]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106198:	68fb      	ldr	r3, [r7, #12]
 810619a:	4313      	orrs	r3, r2
 810619c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	2b00      	cmp	r3, #0
 81061a2:	d123      	bne.n	81061ec <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81061a4:	f7fc f9b4 	bl	8102510 <HAL_GetCurrentCPUID>
 81061a8:	4603      	mov	r3, r0
 81061aa:	2b03      	cmp	r3, #3
 81061ac:	d158      	bne.n	8106260 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81061ae:	4b2f      	ldr	r3, [pc, #188]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061b0:	691b      	ldr	r3, [r3, #16]
 81061b2:	4a2e      	ldr	r2, [pc, #184]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061b4:	f023 0301 	bic.w	r3, r3, #1
 81061b8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061ba:	4b2d      	ldr	r3, [pc, #180]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061bc:	691b      	ldr	r3, [r3, #16]
 81061be:	4a2c      	ldr	r2, [pc, #176]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061c0:	f043 0304 	orr.w	r3, r3, #4
 81061c4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81061c6:	f3bf 8f4f 	dsb	sy
}
 81061ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81061cc:	f3bf 8f6f 	isb	sy
}
 81061d0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81061d2:	7afb      	ldrb	r3, [r7, #11]
 81061d4:	2b01      	cmp	r3, #1
 81061d6:	d101      	bne.n	81061dc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81061d8:	bf30      	wfi
 81061da:	e000      	b.n	81061de <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81061dc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81061de:	4b24      	ldr	r3, [pc, #144]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061e0:	691b      	ldr	r3, [r3, #16]
 81061e2:	4a23      	ldr	r2, [pc, #140]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81061e4:	f023 0304 	bic.w	r3, r3, #4
 81061e8:	6113      	str	r3, [r2, #16]
 81061ea:	e03c      	b.n	8106266 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81061ec:	687b      	ldr	r3, [r7, #4]
 81061ee:	2b01      	cmp	r3, #1
 81061f0:	d123      	bne.n	810623a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81061f2:	f7fc f98d 	bl	8102510 <HAL_GetCurrentCPUID>
 81061f6:	4603      	mov	r3, r0
 81061f8:	2b01      	cmp	r3, #1
 81061fa:	d133      	bne.n	8106264 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81061fc:	4b1b      	ldr	r3, [pc, #108]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 81061fe:	695b      	ldr	r3, [r3, #20]
 8106200:	4a1a      	ldr	r2, [pc, #104]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106202:	f023 0302 	bic.w	r3, r3, #2
 8106206:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8106208:	4b19      	ldr	r3, [pc, #100]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810620a:	691b      	ldr	r3, [r3, #16]
 810620c:	4a18      	ldr	r2, [pc, #96]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810620e:	f043 0304 	orr.w	r3, r3, #4
 8106212:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8106214:	f3bf 8f4f 	dsb	sy
}
 8106218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810621a:	f3bf 8f6f 	isb	sy
}
 810621e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8106220:	7afb      	ldrb	r3, [r7, #11]
 8106222:	2b01      	cmp	r3, #1
 8106224:	d101      	bne.n	810622a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8106226:	bf30      	wfi
 8106228:	e000      	b.n	810622c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810622a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810622c:	4b10      	ldr	r3, [pc, #64]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810622e:	691b      	ldr	r3, [r3, #16]
 8106230:	4a0f      	ldr	r2, [pc, #60]	; (8106270 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8106232:	f023 0304 	bic.w	r3, r3, #4
 8106236:	6113      	str	r3, [r2, #16]
 8106238:	e015      	b.n	8106266 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810623a:	f7fc f969 	bl	8102510 <HAL_GetCurrentCPUID>
 810623e:	4603      	mov	r3, r0
 8106240:	2b03      	cmp	r3, #3
 8106242:	d106      	bne.n	8106252 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8106244:	4b09      	ldr	r3, [pc, #36]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106246:	691b      	ldr	r3, [r3, #16]
 8106248:	4a08      	ldr	r2, [pc, #32]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 810624a:	f023 0304 	bic.w	r3, r3, #4
 810624e:	6113      	str	r3, [r2, #16]
 8106250:	e009      	b.n	8106266 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8106252:	4b06      	ldr	r3, [pc, #24]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106254:	695b      	ldr	r3, [r3, #20]
 8106256:	4a05      	ldr	r2, [pc, #20]	; (810626c <HAL_PWREx_EnterSTOPMode+0xec>)
 8106258:	f023 0304 	bic.w	r3, r3, #4
 810625c:	6153      	str	r3, [r2, #20]
 810625e:	e002      	b.n	8106266 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106260:	bf00      	nop
 8106262:	e000      	b.n	8106266 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8106264:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8106266:	3710      	adds	r7, #16
 8106268:	46bd      	mov	sp, r7
 810626a:	bd80      	pop	{r7, pc}
 810626c:	58024800 	.word	0x58024800
 8106270:	e000ed00 	.word	0xe000ed00

08106274 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8106274:	b580      	push	{r7, lr}
 8106276:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8106278:	f7fc f94a 	bl	8102510 <HAL_GetCurrentCPUID>
 810627c:	4603      	mov	r3, r0
 810627e:	2b03      	cmp	r3, #3
 8106280:	d101      	bne.n	8106286 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8106282:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8106284:	e001      	b.n	810628a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8106286:	bf40      	sev
    __WFE ();
 8106288:	bf20      	wfe
}
 810628a:	bf00      	nop
 810628c:	bd80      	pop	{r7, pc}
	...

08106290 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8106290:	b480      	push	{r7}
 8106292:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8106294:	4b05      	ldr	r3, [pc, #20]	; (81062ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8106296:	68db      	ldr	r3, [r3, #12]
 8106298:	4a04      	ldr	r2, [pc, #16]	; (81062ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 810629a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810629e:	60d3      	str	r3, [r2, #12]
}
 81062a0:	bf00      	nop
 81062a2:	46bd      	mov	sp, r7
 81062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062a8:	4770      	bx	lr
 81062aa:	bf00      	nop
 81062ac:	58024800 	.word	0x58024800

081062b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 81062b0:	b580      	push	{r7, lr}
 81062b2:	b086      	sub	sp, #24
 81062b4:	af02      	add	r7, sp, #8
 81062b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 81062b8:	f7fb ffca 	bl	8102250 <HAL_GetTick>
 81062bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	2b00      	cmp	r3, #0
 81062c2:	d101      	bne.n	81062c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 81062c4:	2301      	movs	r3, #1
 81062c6:	e061      	b.n	810638c <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81062ce:	b2db      	uxtb	r3, r3
 81062d0:	2b00      	cmp	r3, #0
 81062d2:	d107      	bne.n	81062e4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 81062d4:	6878      	ldr	r0, [r7, #4]
 81062d6:	f7fb f985 	bl	81015e4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 81062da:	f241 3188 	movw	r1, #5000	; 0x1388
 81062de:	6878      	ldr	r0, [r7, #4]
 81062e0:	f000 f85a 	bl	8106398 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 81062e4:	687b      	ldr	r3, [r7, #4]
 81062e6:	681b      	ldr	r3, [r3, #0]
 81062e8:	681b      	ldr	r3, [r3, #0]
 81062ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 81062ee:	687b      	ldr	r3, [r7, #4]
 81062f0:	689b      	ldr	r3, [r3, #8]
 81062f2:	3b01      	subs	r3, #1
 81062f4:	021a      	lsls	r2, r3, #8
 81062f6:	687b      	ldr	r3, [r7, #4]
 81062f8:	681b      	ldr	r3, [r3, #0]
 81062fa:	430a      	orrs	r2, r1
 81062fc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81062fe:	687b      	ldr	r3, [r7, #4]
 8106300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106302:	9300      	str	r3, [sp, #0]
 8106304:	68fb      	ldr	r3, [r7, #12]
 8106306:	2200      	movs	r2, #0
 8106308:	2120      	movs	r1, #32
 810630a:	6878      	ldr	r0, [r7, #4]
 810630c:	f000 f852 	bl	81063b4 <QSPI_WaitFlagStateUntilTimeout>
 8106310:	4603      	mov	r3, r0
 8106312:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8106314:	7afb      	ldrb	r3, [r7, #11]
 8106316:	2b00      	cmp	r3, #0
 8106318:	d137      	bne.n	810638a <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	681b      	ldr	r3, [r3, #0]
 8106320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8106324:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8106328:	687a      	ldr	r2, [r7, #4]
 810632a:	6852      	ldr	r2, [r2, #4]
 810632c:	0611      	lsls	r1, r2, #24
 810632e:	687a      	ldr	r2, [r7, #4]
 8106330:	68d2      	ldr	r2, [r2, #12]
 8106332:	4311      	orrs	r1, r2
 8106334:	687a      	ldr	r2, [r7, #4]
 8106336:	69d2      	ldr	r2, [r2, #28]
 8106338:	4311      	orrs	r1, r2
 810633a:	687a      	ldr	r2, [r7, #4]
 810633c:	6a12      	ldr	r2, [r2, #32]
 810633e:	4311      	orrs	r1, r2
 8106340:	687a      	ldr	r2, [r7, #4]
 8106342:	6812      	ldr	r2, [r2, #0]
 8106344:	430b      	orrs	r3, r1
 8106346:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	681b      	ldr	r3, [r3, #0]
 810634c:	685a      	ldr	r2, [r3, #4]
 810634e:	4b11      	ldr	r3, [pc, #68]	; (8106394 <HAL_QSPI_Init+0xe4>)
 8106350:	4013      	ands	r3, r2
 8106352:	687a      	ldr	r2, [r7, #4]
 8106354:	6912      	ldr	r2, [r2, #16]
 8106356:	0411      	lsls	r1, r2, #16
 8106358:	687a      	ldr	r2, [r7, #4]
 810635a:	6952      	ldr	r2, [r2, #20]
 810635c:	4311      	orrs	r1, r2
 810635e:	687a      	ldr	r2, [r7, #4]
 8106360:	6992      	ldr	r2, [r2, #24]
 8106362:	4311      	orrs	r1, r2
 8106364:	687a      	ldr	r2, [r7, #4]
 8106366:	6812      	ldr	r2, [r2, #0]
 8106368:	430b      	orrs	r3, r1
 810636a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	681b      	ldr	r3, [r3, #0]
 8106370:	681a      	ldr	r2, [r3, #0]
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	f042 0201 	orr.w	r2, r2, #1
 810637a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	2200      	movs	r2, #0
 8106380:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8106382:	687b      	ldr	r3, [r7, #4]
 8106384:	2201      	movs	r2, #1
 8106386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 810638a:	7afb      	ldrb	r3, [r7, #11]
}
 810638c:	4618      	mov	r0, r3
 810638e:	3710      	adds	r7, #16
 8106390:	46bd      	mov	sp, r7
 8106392:	bd80      	pop	{r7, pc}
 8106394:	ffe0f8fe 	.word	0xffe0f8fe

08106398 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8106398:	b480      	push	{r7}
 810639a:	b083      	sub	sp, #12
 810639c:	af00      	add	r7, sp, #0
 810639e:	6078      	str	r0, [r7, #4]
 81063a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	683a      	ldr	r2, [r7, #0]
 81063a6:	649a      	str	r2, [r3, #72]	; 0x48
}
 81063a8:	bf00      	nop
 81063aa:	370c      	adds	r7, #12
 81063ac:	46bd      	mov	sp, r7
 81063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b2:	4770      	bx	lr

081063b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 81063b4:	b580      	push	{r7, lr}
 81063b6:	b084      	sub	sp, #16
 81063b8:	af00      	add	r7, sp, #0
 81063ba:	60f8      	str	r0, [r7, #12]
 81063bc:	60b9      	str	r1, [r7, #8]
 81063be:	603b      	str	r3, [r7, #0]
 81063c0:	4613      	mov	r3, r2
 81063c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81063c4:	e01a      	b.n	81063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81063c6:	69bb      	ldr	r3, [r7, #24]
 81063c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81063cc:	d016      	beq.n	81063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81063ce:	f7fb ff3f 	bl	8102250 <HAL_GetTick>
 81063d2:	4602      	mov	r2, r0
 81063d4:	683b      	ldr	r3, [r7, #0]
 81063d6:	1ad3      	subs	r3, r2, r3
 81063d8:	69ba      	ldr	r2, [r7, #24]
 81063da:	429a      	cmp	r2, r3
 81063dc:	d302      	bcc.n	81063e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 81063de:	69bb      	ldr	r3, [r7, #24]
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d10b      	bne.n	81063fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 81063e4:	68fb      	ldr	r3, [r7, #12]
 81063e6:	2204      	movs	r2, #4
 81063e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81063ec:	68fb      	ldr	r3, [r7, #12]
 81063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063f0:	f043 0201 	orr.w	r2, r3, #1
 81063f4:	68fb      	ldr	r3, [r7, #12]
 81063f6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 81063f8:	2301      	movs	r3, #1
 81063fa:	e00e      	b.n	810641a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81063fc:	68fb      	ldr	r3, [r7, #12]
 81063fe:	681b      	ldr	r3, [r3, #0]
 8106400:	689a      	ldr	r2, [r3, #8]
 8106402:	68bb      	ldr	r3, [r7, #8]
 8106404:	4013      	ands	r3, r2
 8106406:	2b00      	cmp	r3, #0
 8106408:	bf14      	ite	ne
 810640a:	2301      	movne	r3, #1
 810640c:	2300      	moveq	r3, #0
 810640e:	b2db      	uxtb	r3, r3
 8106410:	461a      	mov	r2, r3
 8106412:	79fb      	ldrb	r3, [r7, #7]
 8106414:	429a      	cmp	r2, r3
 8106416:	d1d6      	bne.n	81063c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8106418:	2300      	movs	r3, #0
}
 810641a:	4618      	mov	r0, r3
 810641c:	3710      	adds	r7, #16
 810641e:	46bd      	mov	sp, r7
 8106420:	bd80      	pop	{r7, pc}
	...

08106424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8106424:	b480      	push	{r7}
 8106426:	b089      	sub	sp, #36	; 0x24
 8106428:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810642a:	4bb3      	ldr	r3, [pc, #716]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810642c:	691b      	ldr	r3, [r3, #16]
 810642e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106432:	2b18      	cmp	r3, #24
 8106434:	f200 8155 	bhi.w	81066e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8106438:	a201      	add	r2, pc, #4	; (adr r2, 8106440 <HAL_RCC_GetSysClockFreq+0x1c>)
 810643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810643e:	bf00      	nop
 8106440:	081064a5 	.word	0x081064a5
 8106444:	081066e3 	.word	0x081066e3
 8106448:	081066e3 	.word	0x081066e3
 810644c:	081066e3 	.word	0x081066e3
 8106450:	081066e3 	.word	0x081066e3
 8106454:	081066e3 	.word	0x081066e3
 8106458:	081066e3 	.word	0x081066e3
 810645c:	081066e3 	.word	0x081066e3
 8106460:	081064cb 	.word	0x081064cb
 8106464:	081066e3 	.word	0x081066e3
 8106468:	081066e3 	.word	0x081066e3
 810646c:	081066e3 	.word	0x081066e3
 8106470:	081066e3 	.word	0x081066e3
 8106474:	081066e3 	.word	0x081066e3
 8106478:	081066e3 	.word	0x081066e3
 810647c:	081066e3 	.word	0x081066e3
 8106480:	081064d1 	.word	0x081064d1
 8106484:	081066e3 	.word	0x081066e3
 8106488:	081066e3 	.word	0x081066e3
 810648c:	081066e3 	.word	0x081066e3
 8106490:	081066e3 	.word	0x081066e3
 8106494:	081066e3 	.word	0x081066e3
 8106498:	081066e3 	.word	0x081066e3
 810649c:	081066e3 	.word	0x081066e3
 81064a0:	081064d7 	.word	0x081064d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81064a4:	4b94      	ldr	r3, [pc, #592]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064a6:	681b      	ldr	r3, [r3, #0]
 81064a8:	f003 0320 	and.w	r3, r3, #32
 81064ac:	2b00      	cmp	r3, #0
 81064ae:	d009      	beq.n	81064c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81064b0:	4b91      	ldr	r3, [pc, #580]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064b2:	681b      	ldr	r3, [r3, #0]
 81064b4:	08db      	lsrs	r3, r3, #3
 81064b6:	f003 0303 	and.w	r3, r3, #3
 81064ba:	4a90      	ldr	r2, [pc, #576]	; (81066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81064bc:	fa22 f303 	lsr.w	r3, r2, r3
 81064c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81064c2:	e111      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81064c4:	4b8d      	ldr	r3, [pc, #564]	; (81066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 81064c6:	61bb      	str	r3, [r7, #24]
      break;
 81064c8:	e10e      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81064ca:	4b8d      	ldr	r3, [pc, #564]	; (8106700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81064cc:	61bb      	str	r3, [r7, #24]
      break;
 81064ce:	e10b      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81064d0:	4b8c      	ldr	r3, [pc, #560]	; (8106704 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81064d2:	61bb      	str	r3, [r7, #24]
      break;
 81064d4:	e108      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81064d6:	4b88      	ldr	r3, [pc, #544]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064da:	f003 0303 	and.w	r3, r3, #3
 81064de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81064e0:	4b85      	ldr	r3, [pc, #532]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81064e4:	091b      	lsrs	r3, r3, #4
 81064e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81064ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81064ec:	4b82      	ldr	r3, [pc, #520]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064f0:	f003 0301 	and.w	r3, r3, #1
 81064f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81064f6:	4b80      	ldr	r3, [pc, #512]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81064f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81064fa:	08db      	lsrs	r3, r3, #3
 81064fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106500:	68fa      	ldr	r2, [r7, #12]
 8106502:	fb02 f303 	mul.w	r3, r2, r3
 8106506:	ee07 3a90 	vmov	s15, r3
 810650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810650e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8106512:	693b      	ldr	r3, [r7, #16]
 8106514:	2b00      	cmp	r3, #0
 8106516:	f000 80e1 	beq.w	81066dc <HAL_RCC_GetSysClockFreq+0x2b8>
 810651a:	697b      	ldr	r3, [r7, #20]
 810651c:	2b02      	cmp	r3, #2
 810651e:	f000 8083 	beq.w	8106628 <HAL_RCC_GetSysClockFreq+0x204>
 8106522:	697b      	ldr	r3, [r7, #20]
 8106524:	2b02      	cmp	r3, #2
 8106526:	f200 80a1 	bhi.w	810666c <HAL_RCC_GetSysClockFreq+0x248>
 810652a:	697b      	ldr	r3, [r7, #20]
 810652c:	2b00      	cmp	r3, #0
 810652e:	d003      	beq.n	8106538 <HAL_RCC_GetSysClockFreq+0x114>
 8106530:	697b      	ldr	r3, [r7, #20]
 8106532:	2b01      	cmp	r3, #1
 8106534:	d056      	beq.n	81065e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8106536:	e099      	b.n	810666c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106538:	4b6f      	ldr	r3, [pc, #444]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	f003 0320 	and.w	r3, r3, #32
 8106540:	2b00      	cmp	r3, #0
 8106542:	d02d      	beq.n	81065a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106544:	4b6c      	ldr	r3, [pc, #432]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106546:	681b      	ldr	r3, [r3, #0]
 8106548:	08db      	lsrs	r3, r3, #3
 810654a:	f003 0303 	and.w	r3, r3, #3
 810654e:	4a6b      	ldr	r2, [pc, #428]	; (81066fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106550:	fa22 f303 	lsr.w	r3, r2, r3
 8106554:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106556:	687b      	ldr	r3, [r7, #4]
 8106558:	ee07 3a90 	vmov	s15, r3
 810655c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106560:	693b      	ldr	r3, [r7, #16]
 8106562:	ee07 3a90 	vmov	s15, r3
 8106566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810656a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810656e:	4b62      	ldr	r3, [pc, #392]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106576:	ee07 3a90 	vmov	s15, r3
 810657a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810657e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106582:	eddf 5a61 	vldr	s11, [pc, #388]	; 8106708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810658a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810658e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106596:	ee67 7a27 	vmul.f32	s15, s14, s15
 810659a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810659e:	e087      	b.n	81066b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81065a0:	693b      	ldr	r3, [r7, #16]
 81065a2:	ee07 3a90 	vmov	s15, r3
 81065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 810670c <HAL_RCC_GetSysClockFreq+0x2e8>
 81065ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065b2:	4b51      	ldr	r3, [pc, #324]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81065b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81065b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065ba:	ee07 3a90 	vmov	s15, r3
 81065be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81065c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81065c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8106708 <HAL_RCC_GetSysClockFreq+0x2e4>
 81065ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81065ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81065d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81065e2:	e065      	b.n	81066b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81065e4:	693b      	ldr	r3, [r7, #16]
 81065e6:	ee07 3a90 	vmov	s15, r3
 81065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8106710 <HAL_RCC_GetSysClockFreq+0x2ec>
 81065f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81065f6:	4b40      	ldr	r3, [pc, #256]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81065fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81065fe:	ee07 3a90 	vmov	s15, r3
 8106602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106606:	ed97 6a02 	vldr	s12, [r7, #8]
 810660a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8106708 <HAL_RCC_GetSysClockFreq+0x2e4>
 810660e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810661a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810661e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8106626:	e043      	b.n	81066b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106628:	693b      	ldr	r3, [r7, #16]
 810662a:	ee07 3a90 	vmov	s15, r3
 810662e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106632:	eddf 6a38 	vldr	s13, [pc, #224]	; 8106714 <HAL_RCC_GetSysClockFreq+0x2f0>
 8106636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810663a:	4b2f      	ldr	r3, [pc, #188]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810663e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106642:	ee07 3a90 	vmov	s15, r3
 8106646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810664a:	ed97 6a02 	vldr	s12, [r7, #8]
 810664e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8106708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810665a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810665e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810666a:	e021      	b.n	81066b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810666c:	693b      	ldr	r3, [r7, #16]
 810666e:	ee07 3a90 	vmov	s15, r3
 8106672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106676:	eddf 6a26 	vldr	s13, [pc, #152]	; 8106710 <HAL_RCC_GetSysClockFreq+0x2ec>
 810667a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810667e:	4b1e      	ldr	r3, [pc, #120]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106686:	ee07 3a90 	vmov	s15, r3
 810668a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810668e:	ed97 6a02 	vldr	s12, [r7, #8]
 8106692:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8106708 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810669a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810669e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81066ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81066b0:	4b11      	ldr	r3, [pc, #68]	; (81066f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81066b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81066b4:	0a5b      	lsrs	r3, r3, #9
 81066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81066ba:	3301      	adds	r3, #1
 81066bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81066be:	683b      	ldr	r3, [r7, #0]
 81066c0:	ee07 3a90 	vmov	s15, r3
 81066c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81066c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81066cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81066d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81066d4:	ee17 3a90 	vmov	r3, s15
 81066d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81066da:	e005      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81066dc:	2300      	movs	r3, #0
 81066de:	61bb      	str	r3, [r7, #24]
      break;
 81066e0:	e002      	b.n	81066e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81066e2:	4b07      	ldr	r3, [pc, #28]	; (8106700 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81066e4:	61bb      	str	r3, [r7, #24]
      break;
 81066e6:	bf00      	nop
  }

  return sysclockfreq;
 81066e8:	69bb      	ldr	r3, [r7, #24]
}
 81066ea:	4618      	mov	r0, r3
 81066ec:	3724      	adds	r7, #36	; 0x24
 81066ee:	46bd      	mov	sp, r7
 81066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066f4:	4770      	bx	lr
 81066f6:	bf00      	nop
 81066f8:	58024400 	.word	0x58024400
 81066fc:	03d09000 	.word	0x03d09000
 8106700:	003d0900 	.word	0x003d0900
 8106704:	017d7840 	.word	0x017d7840
 8106708:	46000000 	.word	0x46000000
 810670c:	4c742400 	.word	0x4c742400
 8106710:	4a742400 	.word	0x4a742400
 8106714:	4bbebc20 	.word	0x4bbebc20

08106718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8106718:	b580      	push	{r7, lr}
 810671a:	b082      	sub	sp, #8
 810671c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810671e:	f7ff fe81 	bl	8106424 <HAL_RCC_GetSysClockFreq>
 8106722:	4602      	mov	r2, r0
 8106724:	4b11      	ldr	r3, [pc, #68]	; (810676c <HAL_RCC_GetHCLKFreq+0x54>)
 8106726:	699b      	ldr	r3, [r3, #24]
 8106728:	0a1b      	lsrs	r3, r3, #8
 810672a:	f003 030f 	and.w	r3, r3, #15
 810672e:	4910      	ldr	r1, [pc, #64]	; (8106770 <HAL_RCC_GetHCLKFreq+0x58>)
 8106730:	5ccb      	ldrb	r3, [r1, r3]
 8106732:	f003 031f 	and.w	r3, r3, #31
 8106736:	fa22 f303 	lsr.w	r3, r2, r3
 810673a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810673c:	4b0b      	ldr	r3, [pc, #44]	; (810676c <HAL_RCC_GetHCLKFreq+0x54>)
 810673e:	699b      	ldr	r3, [r3, #24]
 8106740:	f003 030f 	and.w	r3, r3, #15
 8106744:	4a0a      	ldr	r2, [pc, #40]	; (8106770 <HAL_RCC_GetHCLKFreq+0x58>)
 8106746:	5cd3      	ldrb	r3, [r2, r3]
 8106748:	f003 031f 	and.w	r3, r3, #31
 810674c:	687a      	ldr	r2, [r7, #4]
 810674e:	fa22 f303 	lsr.w	r3, r2, r3
 8106752:	4a08      	ldr	r2, [pc, #32]	; (8106774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106754:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8106756:	4b07      	ldr	r3, [pc, #28]	; (8106774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106758:	681b      	ldr	r3, [r3, #0]
 810675a:	4a07      	ldr	r2, [pc, #28]	; (8106778 <HAL_RCC_GetHCLKFreq+0x60>)
 810675c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810675e:	4b05      	ldr	r3, [pc, #20]	; (8106774 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106760:	681b      	ldr	r3, [r3, #0]
}
 8106762:	4618      	mov	r0, r3
 8106764:	3708      	adds	r7, #8
 8106766:	46bd      	mov	sp, r7
 8106768:	bd80      	pop	{r7, pc}
 810676a:	bf00      	nop
 810676c:	58024400 	.word	0x58024400
 8106770:	0810c3cc 	.word	0x0810c3cc
 8106774:	10000004 	.word	0x10000004
 8106778:	10000000 	.word	0x10000000

0810677c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810677c:	b580      	push	{r7, lr}
 810677e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106780:	f7ff ffca 	bl	8106718 <HAL_RCC_GetHCLKFreq>
 8106784:	4602      	mov	r2, r0
 8106786:	4b06      	ldr	r3, [pc, #24]	; (81067a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106788:	69db      	ldr	r3, [r3, #28]
 810678a:	091b      	lsrs	r3, r3, #4
 810678c:	f003 0307 	and.w	r3, r3, #7
 8106790:	4904      	ldr	r1, [pc, #16]	; (81067a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106792:	5ccb      	ldrb	r3, [r1, r3]
 8106794:	f003 031f 	and.w	r3, r3, #31
 8106798:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810679c:	4618      	mov	r0, r3
 810679e:	bd80      	pop	{r7, pc}
 81067a0:	58024400 	.word	0x58024400
 81067a4:	0810c3cc 	.word	0x0810c3cc

081067a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81067a8:	b580      	push	{r7, lr}
 81067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81067ac:	f7ff ffb4 	bl	8106718 <HAL_RCC_GetHCLKFreq>
 81067b0:	4602      	mov	r2, r0
 81067b2:	4b06      	ldr	r3, [pc, #24]	; (81067cc <HAL_RCC_GetPCLK2Freq+0x24>)
 81067b4:	69db      	ldr	r3, [r3, #28]
 81067b6:	0a1b      	lsrs	r3, r3, #8
 81067b8:	f003 0307 	and.w	r3, r3, #7
 81067bc:	4904      	ldr	r1, [pc, #16]	; (81067d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81067be:	5ccb      	ldrb	r3, [r1, r3]
 81067c0:	f003 031f 	and.w	r3, r3, #31
 81067c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81067c8:	4618      	mov	r0, r3
 81067ca:	bd80      	pop	{r7, pc}
 81067cc:	58024400 	.word	0x58024400
 81067d0:	0810c3cc 	.word	0x0810c3cc

081067d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81067d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81067d8:	b0ca      	sub	sp, #296	; 0x128
 81067da:	af00      	add	r7, sp, #0
 81067dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81067e0:	2300      	movs	r3, #0
 81067e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81067e6:	2300      	movs	r3, #0
 81067e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81067ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 81067f8:	2500      	movs	r5, #0
 81067fa:	ea54 0305 	orrs.w	r3, r4, r5
 81067fe:	d049      	beq.n	8106894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8106800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106806:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810680a:	d02f      	beq.n	810686c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810680c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8106810:	d828      	bhi.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8106812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106816:	d01a      	beq.n	810684e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8106818:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810681c:	d822      	bhi.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810681e:	2b00      	cmp	r3, #0
 8106820:	d003      	beq.n	810682a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8106822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106826:	d007      	beq.n	8106838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8106828:	e01c      	b.n	8106864 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810682a:	4bb8      	ldr	r3, [pc, #736]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810682e:	4ab7      	ldr	r2, [pc, #732]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106834:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106836:	e01a      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810683c:	3308      	adds	r3, #8
 810683e:	2102      	movs	r1, #2
 8106840:	4618      	mov	r0, r3
 8106842:	f002 fb61 	bl	8108f08 <RCCEx_PLL2_Config>
 8106846:	4603      	mov	r3, r0
 8106848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810684c:	e00f      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106852:	3328      	adds	r3, #40	; 0x28
 8106854:	2102      	movs	r1, #2
 8106856:	4618      	mov	r0, r3
 8106858:	f002 fc08 	bl	810906c <RCCEx_PLL3_Config>
 810685c:	4603      	mov	r3, r0
 810685e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8106862:	e004      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106864:	2301      	movs	r3, #1
 8106866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810686a:	e000      	b.n	810686e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810686c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810686e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106872:	2b00      	cmp	r3, #0
 8106874:	d10a      	bne.n	810688c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8106876:	4ba5      	ldr	r3, [pc, #660]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810687a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8106884:	4aa1      	ldr	r2, [pc, #644]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106886:	430b      	orrs	r3, r1
 8106888:	6513      	str	r3, [r2, #80]	; 0x50
 810688a:	e003      	b.n	8106894 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810688c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106890:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8106894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106898:	e9d3 2300 	ldrd	r2, r3, [r3]
 810689c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81068a0:	f04f 0900 	mov.w	r9, #0
 81068a4:	ea58 0309 	orrs.w	r3, r8, r9
 81068a8:	d047      	beq.n	810693a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81068b0:	2b04      	cmp	r3, #4
 81068b2:	d82a      	bhi.n	810690a <HAL_RCCEx_PeriphCLKConfig+0x136>
 81068b4:	a201      	add	r2, pc, #4	; (adr r2, 81068bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81068b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068ba:	bf00      	nop
 81068bc:	081068d1 	.word	0x081068d1
 81068c0:	081068df 	.word	0x081068df
 81068c4:	081068f5 	.word	0x081068f5
 81068c8:	08106913 	.word	0x08106913
 81068cc:	08106913 	.word	0x08106913
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81068d0:	4b8e      	ldr	r3, [pc, #568]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068d4:	4a8d      	ldr	r2, [pc, #564]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81068d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81068da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068dc:	e01a      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068e2:	3308      	adds	r3, #8
 81068e4:	2100      	movs	r1, #0
 81068e6:	4618      	mov	r0, r3
 81068e8:	f002 fb0e 	bl	8108f08 <RCCEx_PLL2_Config>
 81068ec:	4603      	mov	r3, r0
 81068ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81068f2:	e00f      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81068f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81068f8:	3328      	adds	r3, #40	; 0x28
 81068fa:	2100      	movs	r1, #0
 81068fc:	4618      	mov	r0, r3
 81068fe:	f002 fbb5 	bl	810906c <RCCEx_PLL3_Config>
 8106902:	4603      	mov	r3, r0
 8106904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106908:	e004      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810690a:	2301      	movs	r3, #1
 810690c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106910:	e000      	b.n	8106914 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8106912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106918:	2b00      	cmp	r3, #0
 810691a:	d10a      	bne.n	8106932 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810691c:	4b7b      	ldr	r3, [pc, #492]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106920:	f023 0107 	bic.w	r1, r3, #7
 8106924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810692a:	4a78      	ldr	r2, [pc, #480]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810692c:	430b      	orrs	r3, r1
 810692e:	6513      	str	r3, [r2, #80]	; 0x50
 8106930:	e003      	b.n	810693a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810693a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106942:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8106946:	f04f 0b00 	mov.w	fp, #0
 810694a:	ea5a 030b 	orrs.w	r3, sl, fp
 810694e:	d04c      	beq.n	81069ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8106950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8106956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810695a:	d030      	beq.n	81069be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810695c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106960:	d829      	bhi.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106962:	2bc0      	cmp	r3, #192	; 0xc0
 8106964:	d02d      	beq.n	81069c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106966:	2bc0      	cmp	r3, #192	; 0xc0
 8106968:	d825      	bhi.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810696a:	2b80      	cmp	r3, #128	; 0x80
 810696c:	d018      	beq.n	81069a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810696e:	2b80      	cmp	r3, #128	; 0x80
 8106970:	d821      	bhi.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106972:	2b00      	cmp	r3, #0
 8106974:	d002      	beq.n	810697c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106976:	2b40      	cmp	r3, #64	; 0x40
 8106978:	d007      	beq.n	810698a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810697a:	e01c      	b.n	81069b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810697c:	4b63      	ldr	r3, [pc, #396]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106980:	4a62      	ldr	r2, [pc, #392]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106988:	e01c      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810698e:	3308      	adds	r3, #8
 8106990:	2100      	movs	r1, #0
 8106992:	4618      	mov	r0, r3
 8106994:	f002 fab8 	bl	8108f08 <RCCEx_PLL2_Config>
 8106998:	4603      	mov	r3, r0
 810699a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810699e:	e011      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81069a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069a4:	3328      	adds	r3, #40	; 0x28
 81069a6:	2100      	movs	r1, #0
 81069a8:	4618      	mov	r0, r3
 81069aa:	f002 fb5f 	bl	810906c <RCCEx_PLL3_Config>
 81069ae:	4603      	mov	r3, r0
 81069b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81069b4:	e006      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81069b6:	2301      	movs	r3, #1
 81069b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81069bc:	e002      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81069be:	bf00      	nop
 81069c0:	e000      	b.n	81069c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81069c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069c8:	2b00      	cmp	r3, #0
 81069ca:	d10a      	bne.n	81069e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81069cc:	4b4f      	ldr	r3, [pc, #316]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81069ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81069d0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81069da:	4a4c      	ldr	r2, [pc, #304]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81069dc:	430b      	orrs	r3, r1
 81069de:	6513      	str	r3, [r2, #80]	; 0x50
 81069e0:	e003      	b.n	81069ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81069e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069f2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 81069f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81069fa:	2300      	movs	r3, #0
 81069fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8106a00:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8106a04:	460b      	mov	r3, r1
 8106a06:	4313      	orrs	r3, r2
 8106a08:	d053      	beq.n	8106ab2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8106a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106a16:	d035      	beq.n	8106a84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8106a18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8106a1c:	d82e      	bhi.n	8106a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106a1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106a22:	d031      	beq.n	8106a88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8106a24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8106a28:	d828      	bhi.n	8106a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106a2e:	d01a      	beq.n	8106a66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8106a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8106a34:	d822      	bhi.n	8106a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106a36:	2b00      	cmp	r3, #0
 8106a38:	d003      	beq.n	8106a42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8106a3e:	d007      	beq.n	8106a50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8106a40:	e01c      	b.n	8106a7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a42:	4b32      	ldr	r3, [pc, #200]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a46:	4a31      	ldr	r2, [pc, #196]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106a4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106a4e:	e01c      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a54:	3308      	adds	r3, #8
 8106a56:	2100      	movs	r1, #0
 8106a58:	4618      	mov	r0, r3
 8106a5a:	f002 fa55 	bl	8108f08 <RCCEx_PLL2_Config>
 8106a5e:	4603      	mov	r3, r0
 8106a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106a64:	e011      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a6a:	3328      	adds	r3, #40	; 0x28
 8106a6c:	2100      	movs	r1, #0
 8106a6e:	4618      	mov	r0, r3
 8106a70:	f002 fafc 	bl	810906c <RCCEx_PLL3_Config>
 8106a74:	4603      	mov	r3, r0
 8106a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106a7a:	e006      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106a7c:	2301      	movs	r3, #1
 8106a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106a82:	e002      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106a84:	bf00      	nop
 8106a86:	e000      	b.n	8106a8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106a8e:	2b00      	cmp	r3, #0
 8106a90:	d10b      	bne.n	8106aaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106a92:	4b1e      	ldr	r3, [pc, #120]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106a96:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8106a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106a9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8106aa2:	4a1a      	ldr	r2, [pc, #104]	; (8106b0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106aa4:	430b      	orrs	r3, r1
 8106aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8106aa8:	e003      	b.n	8106ab2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106aae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106aba:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8106abe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8106ac2:	2300      	movs	r3, #0
 8106ac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8106ac8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8106acc:	460b      	mov	r3, r1
 8106ace:	4313      	orrs	r3, r2
 8106ad0:	d056      	beq.n	8106b80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8106ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106ade:	d038      	beq.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106ae0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106ae4:	d831      	bhi.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106ae6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106aea:	d034      	beq.n	8106b56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8106aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8106af0:	d82b      	bhi.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106af2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106af6:	d01d      	beq.n	8106b34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8106afc:	d825      	bhi.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d006      	beq.n	8106b10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8106b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8106b06:	d00a      	beq.n	8106b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106b08:	e01f      	b.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106b0a:	bf00      	nop
 8106b0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b10:	4ba2      	ldr	r3, [pc, #648]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106b14:	4aa1      	ldr	r2, [pc, #644]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106b1c:	e01c      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b22:	3308      	adds	r3, #8
 8106b24:	2100      	movs	r1, #0
 8106b26:	4618      	mov	r0, r3
 8106b28:	f002 f9ee 	bl	8108f08 <RCCEx_PLL2_Config>
 8106b2c:	4603      	mov	r3, r0
 8106b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106b32:	e011      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b38:	3328      	adds	r3, #40	; 0x28
 8106b3a:	2100      	movs	r1, #0
 8106b3c:	4618      	mov	r0, r3
 8106b3e:	f002 fa95 	bl	810906c <RCCEx_PLL3_Config>
 8106b42:	4603      	mov	r3, r0
 8106b44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106b48:	e006      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106b4a:	2301      	movs	r3, #1
 8106b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106b50:	e002      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106b52:	bf00      	nop
 8106b54:	e000      	b.n	8106b58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b5c:	2b00      	cmp	r3, #0
 8106b5e:	d10b      	bne.n	8106b78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8106b60:	4b8e      	ldr	r3, [pc, #568]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106b64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8106b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8106b70:	4a8a      	ldr	r2, [pc, #552]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106b72:	430b      	orrs	r3, r1
 8106b74:	6593      	str	r3, [r2, #88]	; 0x58
 8106b76:	e003      	b.n	8106b80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106b7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b88:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8106b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8106b90:	2300      	movs	r3, #0
 8106b92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8106b96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8106b9a:	460b      	mov	r3, r1
 8106b9c:	4313      	orrs	r3, r2
 8106b9e:	d03a      	beq.n	8106c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106ba6:	2b30      	cmp	r3, #48	; 0x30
 8106ba8:	d01f      	beq.n	8106bea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106baa:	2b30      	cmp	r3, #48	; 0x30
 8106bac:	d819      	bhi.n	8106be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106bae:	2b20      	cmp	r3, #32
 8106bb0:	d00c      	beq.n	8106bcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106bb2:	2b20      	cmp	r3, #32
 8106bb4:	d815      	bhi.n	8106be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106bb6:	2b00      	cmp	r3, #0
 8106bb8:	d019      	beq.n	8106bee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106bba:	2b10      	cmp	r3, #16
 8106bbc:	d111      	bne.n	8106be2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106bbe:	4b77      	ldr	r3, [pc, #476]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106bc2:	4a76      	ldr	r2, [pc, #472]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106bca:	e011      	b.n	8106bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106bd0:	3308      	adds	r3, #8
 8106bd2:	2102      	movs	r1, #2
 8106bd4:	4618      	mov	r0, r3
 8106bd6:	f002 f997 	bl	8108f08 <RCCEx_PLL2_Config>
 8106bda:	4603      	mov	r3, r0
 8106bdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106be0:	e006      	b.n	8106bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106be2:	2301      	movs	r3, #1
 8106be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106be8:	e002      	b.n	8106bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106bea:	bf00      	nop
 8106bec:	e000      	b.n	8106bf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8106bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106bf4:	2b00      	cmp	r3, #0
 8106bf6:	d10a      	bne.n	8106c0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106bf8:	4b68      	ldr	r3, [pc, #416]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106bfc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8106c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106c06:	4a65      	ldr	r2, [pc, #404]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c08:	430b      	orrs	r3, r1
 8106c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106c0c:	e003      	b.n	8106c16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8106c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c1e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8106c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8106c26:	2300      	movs	r3, #0
 8106c28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8106c2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8106c30:	460b      	mov	r3, r1
 8106c32:	4313      	orrs	r3, r2
 8106c34:	d051      	beq.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106c40:	d035      	beq.n	8106cae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8106c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8106c46:	d82e      	bhi.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106c48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106c4c:	d031      	beq.n	8106cb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8106c4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8106c52:	d828      	bhi.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c58:	d01a      	beq.n	8106c90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106c5e:	d822      	bhi.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106c60:	2b00      	cmp	r3, #0
 8106c62:	d003      	beq.n	8106c6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106c68:	d007      	beq.n	8106c7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106c6a:	e01c      	b.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106c6c:	4b4b      	ldr	r3, [pc, #300]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c70:	4a4a      	ldr	r2, [pc, #296]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106c78:	e01c      	b.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c7e:	3308      	adds	r3, #8
 8106c80:	2100      	movs	r1, #0
 8106c82:	4618      	mov	r0, r3
 8106c84:	f002 f940 	bl	8108f08 <RCCEx_PLL2_Config>
 8106c88:	4603      	mov	r3, r0
 8106c8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106c8e:	e011      	b.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106c94:	3328      	adds	r3, #40	; 0x28
 8106c96:	2100      	movs	r1, #0
 8106c98:	4618      	mov	r0, r3
 8106c9a:	f002 f9e7 	bl	810906c <RCCEx_PLL3_Config>
 8106c9e:	4603      	mov	r3, r0
 8106ca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106ca4:	e006      	b.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ca6:	2301      	movs	r3, #1
 8106ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106cac:	e002      	b.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106cae:	bf00      	nop
 8106cb0:	e000      	b.n	8106cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cb8:	2b00      	cmp	r3, #0
 8106cba:	d10a      	bne.n	8106cd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106cbc:	4b37      	ldr	r3, [pc, #220]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106cc0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8106cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8106cca:	4a34      	ldr	r2, [pc, #208]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106ccc:	430b      	orrs	r3, r1
 8106cce:	6513      	str	r3, [r2, #80]	; 0x50
 8106cd0:	e003      	b.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106cd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8106cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ce2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8106ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8106cea:	2300      	movs	r3, #0
 8106cec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8106cf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8106cf4:	460b      	mov	r3, r1
 8106cf6:	4313      	orrs	r3, r2
 8106cf8:	d056      	beq.n	8106da8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8106cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106d04:	d033      	beq.n	8106d6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8106d0a:	d82c      	bhi.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106d0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106d10:	d02f      	beq.n	8106d72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8106d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8106d16:	d826      	bhi.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106d1c:	d02b      	beq.n	8106d76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8106d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8106d22:	d820      	bhi.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d28:	d012      	beq.n	8106d50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8106d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8106d2e:	d81a      	bhi.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8106d30:	2b00      	cmp	r3, #0
 8106d32:	d022      	beq.n	8106d7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106d38:	d115      	bne.n	8106d66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d3e:	3308      	adds	r3, #8
 8106d40:	2101      	movs	r1, #1
 8106d42:	4618      	mov	r0, r3
 8106d44:	f002 f8e0 	bl	8108f08 <RCCEx_PLL2_Config>
 8106d48:	4603      	mov	r3, r0
 8106d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106d4e:	e015      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d54:	3328      	adds	r3, #40	; 0x28
 8106d56:	2101      	movs	r1, #1
 8106d58:	4618      	mov	r0, r3
 8106d5a:	f002 f987 	bl	810906c <RCCEx_PLL3_Config>
 8106d5e:	4603      	mov	r3, r0
 8106d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106d64:	e00a      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d66:	2301      	movs	r3, #1
 8106d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106d6c:	e006      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106d6e:	bf00      	nop
 8106d70:	e004      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106d72:	bf00      	nop
 8106d74:	e002      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106d76:	bf00      	nop
 8106d78:	e000      	b.n	8106d7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106d80:	2b00      	cmp	r3, #0
 8106d82:	d10d      	bne.n	8106da0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106d84:	4b05      	ldr	r3, [pc, #20]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106d88:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8106d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106d92:	4a02      	ldr	r2, [pc, #8]	; (8106d9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106d94:	430b      	orrs	r3, r1
 8106d96:	6513      	str	r3, [r2, #80]	; 0x50
 8106d98:	e006      	b.n	8106da8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106d9a:	bf00      	nop
 8106d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106da0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106da4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106db0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8106db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8106db8:	2300      	movs	r3, #0
 8106dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8106dbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8106dc2:	460b      	mov	r3, r1
 8106dc4:	4313      	orrs	r3, r2
 8106dc6:	d055      	beq.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106dd4:	d033      	beq.n	8106e3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8106dda:	d82c      	bhi.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106de0:	d02f      	beq.n	8106e42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106de6:	d826      	bhi.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106dec:	d02b      	beq.n	8106e46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8106dee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8106df2:	d820      	bhi.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106df8:	d012      	beq.n	8106e20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8106dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106dfe:	d81a      	bhi.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106e00:	2b00      	cmp	r3, #0
 8106e02:	d022      	beq.n	8106e4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106e08:	d115      	bne.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e0e:	3308      	adds	r3, #8
 8106e10:	2101      	movs	r1, #1
 8106e12:	4618      	mov	r0, r3
 8106e14:	f002 f878 	bl	8108f08 <RCCEx_PLL2_Config>
 8106e18:	4603      	mov	r3, r0
 8106e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106e1e:	e015      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e24:	3328      	adds	r3, #40	; 0x28
 8106e26:	2101      	movs	r1, #1
 8106e28:	4618      	mov	r0, r3
 8106e2a:	f002 f91f 	bl	810906c <RCCEx_PLL3_Config>
 8106e2e:	4603      	mov	r3, r0
 8106e30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106e34:	e00a      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106e36:	2301      	movs	r3, #1
 8106e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106e3c:	e006      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106e3e:	bf00      	nop
 8106e40:	e004      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106e42:	bf00      	nop
 8106e44:	e002      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106e46:	bf00      	nop
 8106e48:	e000      	b.n	8106e4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e50:	2b00      	cmp	r3, #0
 8106e52:	d10b      	bne.n	8106e6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106e54:	4ba4      	ldr	r3, [pc, #656]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106e58:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8106e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8106e64:	4aa0      	ldr	r2, [pc, #640]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106e66:	430b      	orrs	r3, r1
 8106e68:	6593      	str	r3, [r2, #88]	; 0x58
 8106e6a:	e003      	b.n	8106e74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106e70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e7c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8106e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8106e84:	2300      	movs	r3, #0
 8106e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8106e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8106e8e:	460b      	mov	r3, r1
 8106e90:	4313      	orrs	r3, r2
 8106e92:	d037      	beq.n	8106f04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106e9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106e9e:	d00e      	beq.n	8106ebe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8106ea4:	d816      	bhi.n	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	d018      	beq.n	8106edc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8106eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8106eae:	d111      	bne.n	8106ed4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106eb0:	4b8d      	ldr	r3, [pc, #564]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106eb4:	4a8c      	ldr	r2, [pc, #560]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106ebc:	e00f      	b.n	8106ede <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ec2:	3308      	adds	r3, #8
 8106ec4:	2101      	movs	r1, #1
 8106ec6:	4618      	mov	r0, r3
 8106ec8:	f002 f81e 	bl	8108f08 <RCCEx_PLL2_Config>
 8106ecc:	4603      	mov	r3, r0
 8106ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106ed2:	e004      	b.n	8106ede <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106ed4:	2301      	movs	r3, #1
 8106ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106eda:	e000      	b.n	8106ede <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8106edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ee2:	2b00      	cmp	r3, #0
 8106ee4:	d10a      	bne.n	8106efc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106ee6:	4b80      	ldr	r3, [pc, #512]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106eea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8106eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106ef4:	4a7c      	ldr	r2, [pc, #496]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ef6:	430b      	orrs	r3, r1
 8106ef8:	6513      	str	r3, [r2, #80]	; 0x50
 8106efa:	e003      	b.n	8106f04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106f00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f0c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8106f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8106f14:	2300      	movs	r3, #0
 8106f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8106f1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8106f1e:	460b      	mov	r3, r1
 8106f20:	4313      	orrs	r3, r2
 8106f22:	d039      	beq.n	8106f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106f2a:	2b03      	cmp	r3, #3
 8106f2c:	d81c      	bhi.n	8106f68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8106f2e:	a201      	add	r2, pc, #4	; (adr r2, 8106f34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8106f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106f34:	08106f71 	.word	0x08106f71
 8106f38:	08106f45 	.word	0x08106f45
 8106f3c:	08106f53 	.word	0x08106f53
 8106f40:	08106f71 	.word	0x08106f71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f44:	4b68      	ldr	r3, [pc, #416]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106f48:	4a67      	ldr	r2, [pc, #412]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106f50:	e00f      	b.n	8106f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f56:	3308      	adds	r3, #8
 8106f58:	2102      	movs	r1, #2
 8106f5a:	4618      	mov	r0, r3
 8106f5c:	f001 ffd4 	bl	8108f08 <RCCEx_PLL2_Config>
 8106f60:	4603      	mov	r3, r0
 8106f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106f66:	e004      	b.n	8106f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106f68:	2301      	movs	r3, #1
 8106f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106f6e:	e000      	b.n	8106f72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106f76:	2b00      	cmp	r3, #0
 8106f78:	d10a      	bne.n	8106f90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8106f7a:	4b5b      	ldr	r3, [pc, #364]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106f7e:	f023 0103 	bic.w	r1, r3, #3
 8106f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8106f88:	4a57      	ldr	r2, [pc, #348]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106f8a:	430b      	orrs	r3, r1
 8106f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8106f8e:	e003      	b.n	8106f98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106f94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8106f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fa0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8106fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8106fa8:	2300      	movs	r3, #0
 8106faa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8106fae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8106fb2:	460b      	mov	r3, r1
 8106fb4:	4313      	orrs	r3, r2
 8106fb6:	f000 809f 	beq.w	81070f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8106fba:	4b4c      	ldr	r3, [pc, #304]	; (81070ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106fbc:	681b      	ldr	r3, [r3, #0]
 8106fbe:	4a4b      	ldr	r2, [pc, #300]	; (81070ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8106fc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106fc6:	f7fb f943 	bl	8102250 <HAL_GetTick>
 8106fca:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106fce:	e00b      	b.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106fd0:	f7fb f93e 	bl	8102250 <HAL_GetTick>
 8106fd4:	4602      	mov	r2, r0
 8106fd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8106fda:	1ad3      	subs	r3, r2, r3
 8106fdc:	2b64      	cmp	r3, #100	; 0x64
 8106fde:	d903      	bls.n	8106fe8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106fe0:	2303      	movs	r3, #3
 8106fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8106fe6:	e005      	b.n	8106ff4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106fe8:	4b40      	ldr	r3, [pc, #256]	; (81070ec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106ff0:	2b00      	cmp	r3, #0
 8106ff2:	d0ed      	beq.n	8106fd0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106ff8:	2b00      	cmp	r3, #0
 8106ffa:	d179      	bne.n	81070f0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106ffc:	4b3a      	ldr	r3, [pc, #232]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106ffe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8107000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8107008:	4053      	eors	r3, r2
 810700a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810700e:	2b00      	cmp	r3, #0
 8107010:	d015      	beq.n	810703e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8107012:	4b35      	ldr	r3, [pc, #212]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810701a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810701e:	4b32      	ldr	r3, [pc, #200]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107022:	4a31      	ldr	r2, [pc, #196]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8107028:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810702a:	4b2f      	ldr	r3, [pc, #188]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810702e:	4a2e      	ldr	r2, [pc, #184]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107034:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8107036:	4a2c      	ldr	r2, [pc, #176]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107038:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810703c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810703e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107042:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8107046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810704a:	d118      	bne.n	810707e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810704c:	f7fb f900 	bl	8102250 <HAL_GetTick>
 8107050:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107054:	e00d      	b.n	8107072 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8107056:	f7fb f8fb 	bl	8102250 <HAL_GetTick>
 810705a:	4602      	mov	r2, r0
 810705c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8107060:	1ad2      	subs	r2, r2, r3
 8107062:	f241 3388 	movw	r3, #5000	; 0x1388
 8107066:	429a      	cmp	r2, r3
 8107068:	d903      	bls.n	8107072 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810706a:	2303      	movs	r3, #3
 810706c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8107070:	e005      	b.n	810707e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8107072:	4b1d      	ldr	r3, [pc, #116]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8107074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107076:	f003 0302 	and.w	r3, r3, #2
 810707a:	2b00      	cmp	r3, #0
 810707c:	d0eb      	beq.n	8107056 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810707e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107082:	2b00      	cmp	r3, #0
 8107084:	d12b      	bne.n	81070de <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8107086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810708a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810708e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107096:	d110      	bne.n	81070ba <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8107098:	4b13      	ldr	r3, [pc, #76]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810709a:	691b      	ldr	r3, [r3, #16]
 810709c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81070a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81070a8:	091b      	lsrs	r3, r3, #4
 81070aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81070ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81070b2:	4a0d      	ldr	r2, [pc, #52]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81070b4:	430b      	orrs	r3, r1
 81070b6:	6113      	str	r3, [r2, #16]
 81070b8:	e005      	b.n	81070c6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81070ba:	4b0b      	ldr	r3, [pc, #44]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81070bc:	691b      	ldr	r3, [r3, #16]
 81070be:	4a0a      	ldr	r2, [pc, #40]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81070c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81070c4:	6113      	str	r3, [r2, #16]
 81070c6:	4b08      	ldr	r3, [pc, #32]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81070c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81070ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81070d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81070d6:	4a04      	ldr	r2, [pc, #16]	; (81070e8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81070d8:	430b      	orrs	r3, r1
 81070da:	6713      	str	r3, [r2, #112]	; 0x70
 81070dc:	e00c      	b.n	81070f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81070de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81070e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81070e6:	e007      	b.n	81070f8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81070e8:	58024400 	.word	0x58024400
 81070ec:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81070f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81070f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107100:	f002 0301 	and.w	r3, r2, #1
 8107104:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8107108:	2300      	movs	r3, #0
 810710a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 810710e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8107112:	460b      	mov	r3, r1
 8107114:	4313      	orrs	r3, r2
 8107116:	f000 8089 	beq.w	810722c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810711e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8107120:	2b28      	cmp	r3, #40	; 0x28
 8107122:	d86b      	bhi.n	81071fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8107124:	a201      	add	r2, pc, #4	; (adr r2, 810712c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8107126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810712a:	bf00      	nop
 810712c:	08107205 	.word	0x08107205
 8107130:	081071fd 	.word	0x081071fd
 8107134:	081071fd 	.word	0x081071fd
 8107138:	081071fd 	.word	0x081071fd
 810713c:	081071fd 	.word	0x081071fd
 8107140:	081071fd 	.word	0x081071fd
 8107144:	081071fd 	.word	0x081071fd
 8107148:	081071fd 	.word	0x081071fd
 810714c:	081071d1 	.word	0x081071d1
 8107150:	081071fd 	.word	0x081071fd
 8107154:	081071fd 	.word	0x081071fd
 8107158:	081071fd 	.word	0x081071fd
 810715c:	081071fd 	.word	0x081071fd
 8107160:	081071fd 	.word	0x081071fd
 8107164:	081071fd 	.word	0x081071fd
 8107168:	081071fd 	.word	0x081071fd
 810716c:	081071e7 	.word	0x081071e7
 8107170:	081071fd 	.word	0x081071fd
 8107174:	081071fd 	.word	0x081071fd
 8107178:	081071fd 	.word	0x081071fd
 810717c:	081071fd 	.word	0x081071fd
 8107180:	081071fd 	.word	0x081071fd
 8107184:	081071fd 	.word	0x081071fd
 8107188:	081071fd 	.word	0x081071fd
 810718c:	08107205 	.word	0x08107205
 8107190:	081071fd 	.word	0x081071fd
 8107194:	081071fd 	.word	0x081071fd
 8107198:	081071fd 	.word	0x081071fd
 810719c:	081071fd 	.word	0x081071fd
 81071a0:	081071fd 	.word	0x081071fd
 81071a4:	081071fd 	.word	0x081071fd
 81071a8:	081071fd 	.word	0x081071fd
 81071ac:	08107205 	.word	0x08107205
 81071b0:	081071fd 	.word	0x081071fd
 81071b4:	081071fd 	.word	0x081071fd
 81071b8:	081071fd 	.word	0x081071fd
 81071bc:	081071fd 	.word	0x081071fd
 81071c0:	081071fd 	.word	0x081071fd
 81071c4:	081071fd 	.word	0x081071fd
 81071c8:	081071fd 	.word	0x081071fd
 81071cc:	08107205 	.word	0x08107205
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071d4:	3308      	adds	r3, #8
 81071d6:	2101      	movs	r1, #1
 81071d8:	4618      	mov	r0, r3
 81071da:	f001 fe95 	bl	8108f08 <RCCEx_PLL2_Config>
 81071de:	4603      	mov	r3, r0
 81071e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81071e4:	e00f      	b.n	8107206 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81071e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81071ea:	3328      	adds	r3, #40	; 0x28
 81071ec:	2101      	movs	r1, #1
 81071ee:	4618      	mov	r0, r3
 81071f0:	f001 ff3c 	bl	810906c <RCCEx_PLL3_Config>
 81071f4:	4603      	mov	r3, r0
 81071f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81071fa:	e004      	b.n	8107206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81071fc:	2301      	movs	r3, #1
 81071fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107202:	e000      	b.n	8107206 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8107204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810720a:	2b00      	cmp	r3, #0
 810720c:	d10a      	bne.n	8107224 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810720e:	4bbf      	ldr	r3, [pc, #764]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107212:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8107216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810721a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810721c:	4abb      	ldr	r2, [pc, #748]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810721e:	430b      	orrs	r3, r1
 8107220:	6553      	str	r3, [r2, #84]	; 0x54
 8107222:	e003      	b.n	810722c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107228:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107234:	f002 0302 	and.w	r3, r2, #2
 8107238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810723c:	2300      	movs	r3, #0
 810723e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8107242:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8107246:	460b      	mov	r3, r1
 8107248:	4313      	orrs	r3, r2
 810724a:	d041      	beq.n	81072d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107252:	2b05      	cmp	r3, #5
 8107254:	d824      	bhi.n	81072a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8107256:	a201      	add	r2, pc, #4	; (adr r2, 810725c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8107258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810725c:	081072a9 	.word	0x081072a9
 8107260:	08107275 	.word	0x08107275
 8107264:	0810728b 	.word	0x0810728b
 8107268:	081072a9 	.word	0x081072a9
 810726c:	081072a9 	.word	0x081072a9
 8107270:	081072a9 	.word	0x081072a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107278:	3308      	adds	r3, #8
 810727a:	2101      	movs	r1, #1
 810727c:	4618      	mov	r0, r3
 810727e:	f001 fe43 	bl	8108f08 <RCCEx_PLL2_Config>
 8107282:	4603      	mov	r3, r0
 8107284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8107288:	e00f      	b.n	81072aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810728e:	3328      	adds	r3, #40	; 0x28
 8107290:	2101      	movs	r1, #1
 8107292:	4618      	mov	r0, r3
 8107294:	f001 feea 	bl	810906c <RCCEx_PLL3_Config>
 8107298:	4603      	mov	r3, r0
 810729a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810729e:	e004      	b.n	81072aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81072a0:	2301      	movs	r3, #1
 81072a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81072a6:	e000      	b.n	81072aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81072a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81072ae:	2b00      	cmp	r3, #0
 81072b0:	d10a      	bne.n	81072c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81072b2:	4b96      	ldr	r3, [pc, #600]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81072b6:	f023 0107 	bic.w	r1, r3, #7
 81072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81072c0:	4a92      	ldr	r2, [pc, #584]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81072c2:	430b      	orrs	r3, r1
 81072c4:	6553      	str	r3, [r2, #84]	; 0x54
 81072c6:	e003      	b.n	81072d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81072cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072d8:	f002 0304 	and.w	r3, r2, #4
 81072dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81072e0:	2300      	movs	r3, #0
 81072e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81072e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81072ea:	460b      	mov	r3, r1
 81072ec:	4313      	orrs	r3, r2
 81072ee:	d044      	beq.n	810737a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81072f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81072f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81072f8:	2b05      	cmp	r3, #5
 81072fa:	d825      	bhi.n	8107348 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 81072fc:	a201      	add	r2, pc, #4	; (adr r2, 8107304 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 81072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107302:	bf00      	nop
 8107304:	08107351 	.word	0x08107351
 8107308:	0810731d 	.word	0x0810731d
 810730c:	08107333 	.word	0x08107333
 8107310:	08107351 	.word	0x08107351
 8107314:	08107351 	.word	0x08107351
 8107318:	08107351 	.word	0x08107351
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107320:	3308      	adds	r3, #8
 8107322:	2101      	movs	r1, #1
 8107324:	4618      	mov	r0, r3
 8107326:	f001 fdef 	bl	8108f08 <RCCEx_PLL2_Config>
 810732a:	4603      	mov	r3, r0
 810732c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107330:	e00f      	b.n	8107352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107336:	3328      	adds	r3, #40	; 0x28
 8107338:	2101      	movs	r1, #1
 810733a:	4618      	mov	r0, r3
 810733c:	f001 fe96 	bl	810906c <RCCEx_PLL3_Config>
 8107340:	4603      	mov	r3, r0
 8107342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8107346:	e004      	b.n	8107352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107348:	2301      	movs	r3, #1
 810734a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810734e:	e000      	b.n	8107352 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8107350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107356:	2b00      	cmp	r3, #0
 8107358:	d10b      	bne.n	8107372 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810735a:	4b6c      	ldr	r3, [pc, #432]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810735c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810735e:	f023 0107 	bic.w	r1, r3, #7
 8107362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810736a:	4a68      	ldr	r2, [pc, #416]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810736c:	430b      	orrs	r3, r1
 810736e:	6593      	str	r3, [r2, #88]	; 0x58
 8107370:	e003      	b.n	810737a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107382:	f002 0320 	and.w	r3, r2, #32
 8107386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810738a:	2300      	movs	r3, #0
 810738c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8107390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8107394:	460b      	mov	r3, r1
 8107396:	4313      	orrs	r3, r2
 8107398:	d055      	beq.n	8107446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810739e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81073a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81073a6:	d033      	beq.n	8107410 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81073a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81073ac:	d82c      	bhi.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073b2:	d02f      	beq.n	8107414 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81073b8:	d826      	bhi.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81073ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81073be:	d02b      	beq.n	8107418 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81073c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81073c4:	d820      	bhi.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81073c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073ca:	d012      	beq.n	81073f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81073cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81073d0:	d81a      	bhi.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81073d2:	2b00      	cmp	r3, #0
 81073d4:	d022      	beq.n	810741c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81073d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81073da:	d115      	bne.n	8107408 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81073dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073e0:	3308      	adds	r3, #8
 81073e2:	2100      	movs	r1, #0
 81073e4:	4618      	mov	r0, r3
 81073e6:	f001 fd8f 	bl	8108f08 <RCCEx_PLL2_Config>
 81073ea:	4603      	mov	r3, r0
 81073ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81073f0:	e015      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81073f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81073f6:	3328      	adds	r3, #40	; 0x28
 81073f8:	2102      	movs	r1, #2
 81073fa:	4618      	mov	r0, r3
 81073fc:	f001 fe36 	bl	810906c <RCCEx_PLL3_Config>
 8107400:	4603      	mov	r3, r0
 8107402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8107406:	e00a      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8107408:	2301      	movs	r3, #1
 810740a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810740e:	e006      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107410:	bf00      	nop
 8107412:	e004      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107414:	bf00      	nop
 8107416:	e002      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8107418:	bf00      	nop
 810741a:	e000      	b.n	810741e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810741c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810741e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107422:	2b00      	cmp	r3, #0
 8107424:	d10b      	bne.n	810743e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8107426:	4b39      	ldr	r3, [pc, #228]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810742a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8107436:	4a35      	ldr	r2, [pc, #212]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107438:	430b      	orrs	r3, r1
 810743a:	6553      	str	r3, [r2, #84]	; 0x54
 810743c:	e003      	b.n	8107446 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810743e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8107446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810744a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810744e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8107452:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8107456:	2300      	movs	r3, #0
 8107458:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 810745c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8107460:	460b      	mov	r3, r1
 8107462:	4313      	orrs	r3, r2
 8107464:	d058      	beq.n	8107518 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8107466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810746a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810746e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8107472:	d033      	beq.n	81074dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8107474:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8107478:	d82c      	bhi.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810747a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810747e:	d02f      	beq.n	81074e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8107480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107484:	d826      	bhi.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810748a:	d02b      	beq.n	81074e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810748c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8107490:	d820      	bhi.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8107492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107496:	d012      	beq.n	81074be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8107498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810749c:	d81a      	bhi.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810749e:	2b00      	cmp	r3, #0
 81074a0:	d022      	beq.n	81074e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81074a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81074a6:	d115      	bne.n	81074d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074ac:	3308      	adds	r3, #8
 81074ae:	2100      	movs	r1, #0
 81074b0:	4618      	mov	r0, r3
 81074b2:	f001 fd29 	bl	8108f08 <RCCEx_PLL2_Config>
 81074b6:	4603      	mov	r3, r0
 81074b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81074bc:	e015      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074c2:	3328      	adds	r3, #40	; 0x28
 81074c4:	2102      	movs	r1, #2
 81074c6:	4618      	mov	r0, r3
 81074c8:	f001 fdd0 	bl	810906c <RCCEx_PLL3_Config>
 81074cc:	4603      	mov	r3, r0
 81074ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81074d2:	e00a      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81074d4:	2301      	movs	r3, #1
 81074d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81074da:	e006      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81074dc:	bf00      	nop
 81074de:	e004      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81074e0:	bf00      	nop
 81074e2:	e002      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81074e4:	bf00      	nop
 81074e6:	e000      	b.n	81074ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81074e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81074ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81074ee:	2b00      	cmp	r3, #0
 81074f0:	d10e      	bne.n	8107510 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81074f2:	4b06      	ldr	r3, [pc, #24]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81074f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81074f6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 81074fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81074fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8107502:	4a02      	ldr	r2, [pc, #8]	; (810750c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8107504:	430b      	orrs	r3, r1
 8107506:	6593      	str	r3, [r2, #88]	; 0x58
 8107508:	e006      	b.n	8107518 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810750a:	bf00      	nop
 810750c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107510:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107514:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8107518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810751c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107520:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8107524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8107528:	2300      	movs	r3, #0
 810752a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810752e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8107532:	460b      	mov	r3, r1
 8107534:	4313      	orrs	r3, r2
 8107536:	d055      	beq.n	81075e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8107538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810753c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8107540:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8107544:	d033      	beq.n	81075ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8107546:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810754a:	d82c      	bhi.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810754c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107550:	d02f      	beq.n	81075b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8107552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107556:	d826      	bhi.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107558:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810755c:	d02b      	beq.n	81075b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810755e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8107562:	d820      	bhi.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8107568:	d012      	beq.n	8107590 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810756a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810756e:	d81a      	bhi.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8107570:	2b00      	cmp	r3, #0
 8107572:	d022      	beq.n	81075ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8107574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107578:	d115      	bne.n	81075a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810757a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810757e:	3308      	adds	r3, #8
 8107580:	2100      	movs	r1, #0
 8107582:	4618      	mov	r0, r3
 8107584:	f001 fcc0 	bl	8108f08 <RCCEx_PLL2_Config>
 8107588:	4603      	mov	r3, r0
 810758a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810758e:	e015      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107594:	3328      	adds	r3, #40	; 0x28
 8107596:	2102      	movs	r1, #2
 8107598:	4618      	mov	r0, r3
 810759a:	f001 fd67 	bl	810906c <RCCEx_PLL3_Config>
 810759e:	4603      	mov	r3, r0
 81075a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81075a4:	e00a      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81075a6:	2301      	movs	r3, #1
 81075a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81075ac:	e006      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81075ae:	bf00      	nop
 81075b0:	e004      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81075b2:	bf00      	nop
 81075b4:	e002      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81075b6:	bf00      	nop
 81075b8:	e000      	b.n	81075bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81075ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81075bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81075c0:	2b00      	cmp	r3, #0
 81075c2:	d10b      	bne.n	81075dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81075c4:	4ba1      	ldr	r3, [pc, #644]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81075c8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 81075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81075d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81075d4:	4a9d      	ldr	r2, [pc, #628]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81075d6:	430b      	orrs	r3, r1
 81075d8:	6593      	str	r3, [r2, #88]	; 0x58
 81075da:	e003      	b.n	81075e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81075dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81075e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075ec:	f002 0308 	and.w	r3, r2, #8
 81075f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81075f4:	2300      	movs	r3, #0
 81075f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81075fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81075fe:	460b      	mov	r3, r1
 8107600:	4313      	orrs	r3, r2
 8107602:	d01e      	beq.n	8107642 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8107604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810760c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107610:	d10c      	bne.n	810762c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107616:	3328      	adds	r3, #40	; 0x28
 8107618:	2102      	movs	r1, #2
 810761a:	4618      	mov	r0, r3
 810761c:	f001 fd26 	bl	810906c <RCCEx_PLL3_Config>
 8107620:	4603      	mov	r3, r0
 8107622:	2b00      	cmp	r3, #0
 8107624:	d002      	beq.n	810762c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8107626:	2301      	movs	r3, #1
 8107628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810762c:	4b87      	ldr	r3, [pc, #540]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810762e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107630:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8107634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810763c:	4a83      	ldr	r2, [pc, #524]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810763e:	430b      	orrs	r3, r1
 8107640:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8107642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107646:	e9d3 2300 	ldrd	r2, r3, [r3]
 810764a:	f002 0310 	and.w	r3, r2, #16
 810764e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8107652:	2300      	movs	r3, #0
 8107654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8107658:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 810765c:	460b      	mov	r3, r1
 810765e:	4313      	orrs	r3, r2
 8107660:	d01e      	beq.n	81076a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8107662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810766a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810766e:	d10c      	bne.n	810768a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107674:	3328      	adds	r3, #40	; 0x28
 8107676:	2102      	movs	r1, #2
 8107678:	4618      	mov	r0, r3
 810767a:	f001 fcf7 	bl	810906c <RCCEx_PLL3_Config>
 810767e:	4603      	mov	r3, r0
 8107680:	2b00      	cmp	r3, #0
 8107682:	d002      	beq.n	810768a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8107684:	2301      	movs	r3, #1
 8107686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810768a:	4b70      	ldr	r3, [pc, #448]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810768c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810768e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8107692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810769a:	4a6c      	ldr	r2, [pc, #432]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810769c:	430b      	orrs	r3, r1
 810769e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81076a8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81076ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81076b0:	2300      	movs	r3, #0
 81076b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81076b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 81076ba:	460b      	mov	r3, r1
 81076bc:	4313      	orrs	r3, r2
 81076be:	d03e      	beq.n	810773e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81076c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81076cc:	d022      	beq.n	8107714 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 81076ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81076d2:	d81b      	bhi.n	810770c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d003      	beq.n	81076e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 81076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81076dc:	d00b      	beq.n	81076f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 81076de:	e015      	b.n	810770c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076e4:	3308      	adds	r3, #8
 81076e6:	2100      	movs	r1, #0
 81076e8:	4618      	mov	r0, r3
 81076ea:	f001 fc0d 	bl	8108f08 <RCCEx_PLL2_Config>
 81076ee:	4603      	mov	r3, r0
 81076f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 81076f4:	e00f      	b.n	8107716 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81076f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81076fa:	3328      	adds	r3, #40	; 0x28
 81076fc:	2102      	movs	r1, #2
 81076fe:	4618      	mov	r0, r3
 8107700:	f001 fcb4 	bl	810906c <RCCEx_PLL3_Config>
 8107704:	4603      	mov	r3, r0
 8107706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810770a:	e004      	b.n	8107716 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810770c:	2301      	movs	r3, #1
 810770e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8107712:	e000      	b.n	8107716 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8107714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8107716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810771a:	2b00      	cmp	r3, #0
 810771c:	d10b      	bne.n	8107736 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810771e:	4b4b      	ldr	r3, [pc, #300]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107722:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8107726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810772a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810772e:	4a47      	ldr	r2, [pc, #284]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107730:	430b      	orrs	r3, r1
 8107732:	6593      	str	r3, [r2, #88]	; 0x58
 8107734:	e003      	b.n	810773e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810773a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810773e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107746:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 810774a:	67bb      	str	r3, [r7, #120]	; 0x78
 810774c:	2300      	movs	r3, #0
 810774e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8107750:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8107754:	460b      	mov	r3, r1
 8107756:	4313      	orrs	r3, r2
 8107758:	d03b      	beq.n	81077d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8107766:	d01f      	beq.n	81077a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8107768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810776c:	d818      	bhi.n	81077a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 810776e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107772:	d003      	beq.n	810777c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8107774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107778:	d007      	beq.n	810778a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810777a:	e011      	b.n	81077a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810777c:	4b33      	ldr	r3, [pc, #204]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107780:	4a32      	ldr	r2, [pc, #200]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8107786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8107788:	e00f      	b.n	81077aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810778e:	3328      	adds	r3, #40	; 0x28
 8107790:	2101      	movs	r1, #1
 8107792:	4618      	mov	r0, r3
 8107794:	f001 fc6a 	bl	810906c <RCCEx_PLL3_Config>
 8107798:	4603      	mov	r3, r0
 810779a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810779e:	e004      	b.n	81077aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81077a0:	2301      	movs	r3, #1
 81077a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81077a6:	e000      	b.n	81077aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81077a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81077ae:	2b00      	cmp	r3, #0
 81077b0:	d10b      	bne.n	81077ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81077b2:	4b26      	ldr	r3, [pc, #152]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81077b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077b6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81077c2:	4a22      	ldr	r2, [pc, #136]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81077c4:	430b      	orrs	r3, r1
 81077c6:	6553      	str	r3, [r2, #84]	; 0x54
 81077c8:	e003      	b.n	81077d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81077ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81077ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81077d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81077da:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 81077de:	673b      	str	r3, [r7, #112]	; 0x70
 81077e0:	2300      	movs	r3, #0
 81077e2:	677b      	str	r3, [r7, #116]	; 0x74
 81077e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 81077e8:	460b      	mov	r3, r1
 81077ea:	4313      	orrs	r3, r2
 81077ec:	d034      	beq.n	8107858 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81077ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81077f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81077f4:	2b00      	cmp	r3, #0
 81077f6:	d003      	beq.n	8107800 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 81077f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81077fc:	d007      	beq.n	810780e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 81077fe:	e011      	b.n	8107824 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8107800:	4b12      	ldr	r3, [pc, #72]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107804:	4a11      	ldr	r2, [pc, #68]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810780a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810780c:	e00e      	b.n	810782c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810780e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107812:	3308      	adds	r3, #8
 8107814:	2102      	movs	r1, #2
 8107816:	4618      	mov	r0, r3
 8107818:	f001 fb76 	bl	8108f08 <RCCEx_PLL2_Config>
 810781c:	4603      	mov	r3, r0
 810781e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8107822:	e003      	b.n	810782c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8107824:	2301      	movs	r3, #1
 8107826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810782a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810782c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107830:	2b00      	cmp	r3, #0
 8107832:	d10d      	bne.n	8107850 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8107834:	4b05      	ldr	r3, [pc, #20]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107842:	4a02      	ldr	r2, [pc, #8]	; (810784c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8107844:	430b      	orrs	r3, r1
 8107846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8107848:	e006      	b.n	8107858 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810784a:	bf00      	nop
 810784c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8107858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107860:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8107864:	66bb      	str	r3, [r7, #104]	; 0x68
 8107866:	2300      	movs	r3, #0
 8107868:	66fb      	str	r3, [r7, #108]	; 0x6c
 810786a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810786e:	460b      	mov	r3, r1
 8107870:	4313      	orrs	r3, r2
 8107872:	d00c      	beq.n	810788e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8107874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107878:	3328      	adds	r3, #40	; 0x28
 810787a:	2102      	movs	r1, #2
 810787c:	4618      	mov	r0, r3
 810787e:	f001 fbf5 	bl	810906c <RCCEx_PLL3_Config>
 8107882:	4603      	mov	r3, r0
 8107884:	2b00      	cmp	r3, #0
 8107886:	d002      	beq.n	810788e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8107888:	2301      	movs	r3, #1
 810788a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810788e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107896:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810789a:	663b      	str	r3, [r7, #96]	; 0x60
 810789c:	2300      	movs	r3, #0
 810789e:	667b      	str	r3, [r7, #100]	; 0x64
 81078a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81078a4:	460b      	mov	r3, r1
 81078a6:	4313      	orrs	r3, r2
 81078a8:	d038      	beq.n	810791c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81078b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81078b6:	d018      	beq.n	81078ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81078b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81078bc:	d811      	bhi.n	81078e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81078be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81078c2:	d014      	beq.n	81078ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81078c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81078c8:	d80b      	bhi.n	81078e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81078ca:	2b00      	cmp	r3, #0
 81078cc:	d011      	beq.n	81078f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 81078ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81078d2:	d106      	bne.n	81078e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81078d4:	4bc3      	ldr	r3, [pc, #780]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81078d8:	4ac2      	ldr	r2, [pc, #776]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81078de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81078e0:	e008      	b.n	81078f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81078e2:	2301      	movs	r3, #1
 81078e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81078e8:	e004      	b.n	81078f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81078ea:	bf00      	nop
 81078ec:	e002      	b.n	81078f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81078ee:	bf00      	nop
 81078f0:	e000      	b.n	81078f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 81078f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81078f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81078f8:	2b00      	cmp	r3, #0
 81078fa:	d10b      	bne.n	8107914 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81078fc:	4bb9      	ldr	r3, [pc, #740]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107900:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8107904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810790c:	4ab5      	ldr	r2, [pc, #724]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810790e:	430b      	orrs	r3, r1
 8107910:	6553      	str	r3, [r2, #84]	; 0x54
 8107912:	e003      	b.n	810791c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107918:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810791c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107924:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8107928:	65bb      	str	r3, [r7, #88]	; 0x58
 810792a:	2300      	movs	r3, #0
 810792c:	65fb      	str	r3, [r7, #92]	; 0x5c
 810792e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8107932:	460b      	mov	r3, r1
 8107934:	4313      	orrs	r3, r2
 8107936:	d009      	beq.n	810794c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107938:	4baa      	ldr	r3, [pc, #680]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810793a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810793c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8107940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107946:	4aa7      	ldr	r2, [pc, #668]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107948:	430b      	orrs	r3, r1
 810794a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107954:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8107958:	653b      	str	r3, [r7, #80]	; 0x50
 810795a:	2300      	movs	r3, #0
 810795c:	657b      	str	r3, [r7, #84]	; 0x54
 810795e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8107962:	460b      	mov	r3, r1
 8107964:	4313      	orrs	r3, r2
 8107966:	d00a      	beq.n	810797e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8107968:	4b9e      	ldr	r3, [pc, #632]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810796a:	691b      	ldr	r3, [r3, #16]
 810796c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8107970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107974:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8107978:	4a9a      	ldr	r2, [pc, #616]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810797a:	430b      	orrs	r3, r1
 810797c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810797e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107986:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810798a:	64bb      	str	r3, [r7, #72]	; 0x48
 810798c:	2300      	movs	r3, #0
 810798e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8107990:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8107994:	460b      	mov	r3, r1
 8107996:	4313      	orrs	r3, r2
 8107998:	d009      	beq.n	81079ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810799a:	4b92      	ldr	r3, [pc, #584]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810799c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810799e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81079a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81079a8:	4a8e      	ldr	r2, [pc, #568]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81079aa:	430b      	orrs	r3, r1
 81079ac:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079b6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 81079ba:	643b      	str	r3, [r7, #64]	; 0x40
 81079bc:	2300      	movs	r3, #0
 81079be:	647b      	str	r3, [r7, #68]	; 0x44
 81079c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 81079c4:	460b      	mov	r3, r1
 81079c6:	4313      	orrs	r3, r2
 81079c8:	d00e      	beq.n	81079e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81079ca:	4b86      	ldr	r3, [pc, #536]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81079cc:	691b      	ldr	r3, [r3, #16]
 81079ce:	4a85      	ldr	r2, [pc, #532]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81079d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81079d4:	6113      	str	r3, [r2, #16]
 81079d6:	4b83      	ldr	r3, [pc, #524]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81079d8:	6919      	ldr	r1, [r3, #16]
 81079da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81079de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 81079e2:	4a80      	ldr	r2, [pc, #512]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81079e4:	430b      	orrs	r3, r1
 81079e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81079e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81079f0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 81079f4:	63bb      	str	r3, [r7, #56]	; 0x38
 81079f6:	2300      	movs	r3, #0
 81079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81079fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 81079fe:	460b      	mov	r3, r1
 8107a00:	4313      	orrs	r3, r2
 8107a02:	d009      	beq.n	8107a18 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107a04:	4b77      	ldr	r3, [pc, #476]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107a08:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8107a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a12:	4a74      	ldr	r2, [pc, #464]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107a14:	430b      	orrs	r3, r1
 8107a16:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a20:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8107a24:	633b      	str	r3, [r7, #48]	; 0x30
 8107a26:	2300      	movs	r3, #0
 8107a28:	637b      	str	r3, [r7, #52]	; 0x34
 8107a2a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8107a2e:	460b      	mov	r3, r1
 8107a30:	4313      	orrs	r3, r2
 8107a32:	d00a      	beq.n	8107a4a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107a34:	4b6b      	ldr	r3, [pc, #428]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a38:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8107a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8107a44:	4a67      	ldr	r2, [pc, #412]	; (8107be4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8107a46:	430b      	orrs	r3, r1
 8107a48:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a52:	2100      	movs	r1, #0
 8107a54:	62b9      	str	r1, [r7, #40]	; 0x28
 8107a56:	f003 0301 	and.w	r3, r3, #1
 8107a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8107a5c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8107a60:	460b      	mov	r3, r1
 8107a62:	4313      	orrs	r3, r2
 8107a64:	d011      	beq.n	8107a8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8107a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a6a:	3308      	adds	r3, #8
 8107a6c:	2100      	movs	r1, #0
 8107a6e:	4618      	mov	r0, r3
 8107a70:	f001 fa4a 	bl	8108f08 <RCCEx_PLL2_Config>
 8107a74:	4603      	mov	r3, r0
 8107a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	d003      	beq.n	8107a8a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107a86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8107a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107a92:	2100      	movs	r1, #0
 8107a94:	6239      	str	r1, [r7, #32]
 8107a96:	f003 0302 	and.w	r3, r3, #2
 8107a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8107a9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107aa0:	460b      	mov	r3, r1
 8107aa2:	4313      	orrs	r3, r2
 8107aa4:	d011      	beq.n	8107aca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107aaa:	3308      	adds	r3, #8
 8107aac:	2101      	movs	r1, #1
 8107aae:	4618      	mov	r0, r3
 8107ab0:	f001 fa2a 	bl	8108f08 <RCCEx_PLL2_Config>
 8107ab4:	4603      	mov	r3, r0
 8107ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107aba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107abe:	2b00      	cmp	r3, #0
 8107ac0:	d003      	beq.n	8107aca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107ac6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ad2:	2100      	movs	r1, #0
 8107ad4:	61b9      	str	r1, [r7, #24]
 8107ad6:	f003 0304 	and.w	r3, r3, #4
 8107ada:	61fb      	str	r3, [r7, #28]
 8107adc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8107ae0:	460b      	mov	r3, r1
 8107ae2:	4313      	orrs	r3, r2
 8107ae4:	d011      	beq.n	8107b0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107aea:	3308      	adds	r3, #8
 8107aec:	2102      	movs	r1, #2
 8107aee:	4618      	mov	r0, r3
 8107af0:	f001 fa0a 	bl	8108f08 <RCCEx_PLL2_Config>
 8107af4:	4603      	mov	r3, r0
 8107af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107afe:	2b00      	cmp	r3, #0
 8107b00:	d003      	beq.n	8107b0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b12:	2100      	movs	r1, #0
 8107b14:	6139      	str	r1, [r7, #16]
 8107b16:	f003 0308 	and.w	r3, r3, #8
 8107b1a:	617b      	str	r3, [r7, #20]
 8107b1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8107b20:	460b      	mov	r3, r1
 8107b22:	4313      	orrs	r3, r2
 8107b24:	d011      	beq.n	8107b4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b2a:	3328      	adds	r3, #40	; 0x28
 8107b2c:	2100      	movs	r1, #0
 8107b2e:	4618      	mov	r0, r3
 8107b30:	f001 fa9c 	bl	810906c <RCCEx_PLL3_Config>
 8107b34:	4603      	mov	r3, r0
 8107b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8107b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b3e:	2b00      	cmp	r3, #0
 8107b40:	d003      	beq.n	8107b4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b52:	2100      	movs	r1, #0
 8107b54:	60b9      	str	r1, [r7, #8]
 8107b56:	f003 0310 	and.w	r3, r3, #16
 8107b5a:	60fb      	str	r3, [r7, #12]
 8107b5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8107b60:	460b      	mov	r3, r1
 8107b62:	4313      	orrs	r3, r2
 8107b64:	d011      	beq.n	8107b8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8107b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b6a:	3328      	adds	r3, #40	; 0x28
 8107b6c:	2101      	movs	r1, #1
 8107b6e:	4618      	mov	r0, r3
 8107b70:	f001 fa7c 	bl	810906c <RCCEx_PLL3_Config>
 8107b74:	4603      	mov	r3, r0
 8107b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b7e:	2b00      	cmp	r3, #0
 8107b80:	d003      	beq.n	8107b8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8107b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b92:	2100      	movs	r1, #0
 8107b94:	6039      	str	r1, [r7, #0]
 8107b96:	f003 0320 	and.w	r3, r3, #32
 8107b9a:	607b      	str	r3, [r7, #4]
 8107b9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107ba0:	460b      	mov	r3, r1
 8107ba2:	4313      	orrs	r3, r2
 8107ba4:	d011      	beq.n	8107bca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8107baa:	3328      	adds	r3, #40	; 0x28
 8107bac:	2102      	movs	r1, #2
 8107bae:	4618      	mov	r0, r3
 8107bb0:	f001 fa5c 	bl	810906c <RCCEx_PLL3_Config>
 8107bb4:	4603      	mov	r3, r0
 8107bb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8107bba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107bbe:	2b00      	cmp	r3, #0
 8107bc0:	d003      	beq.n	8107bca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8107bc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8107bca:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8107bce:	2b00      	cmp	r3, #0
 8107bd0:	d101      	bne.n	8107bd6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8107bd2:	2300      	movs	r3, #0
 8107bd4:	e000      	b.n	8107bd8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107bd6:	2301      	movs	r3, #1
}
 8107bd8:	4618      	mov	r0, r3
 8107bda:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8107bde:	46bd      	mov	sp, r7
 8107be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107be4:	58024400 	.word	0x58024400

08107be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107be8:	b580      	push	{r7, lr}
 8107bea:	b090      	sub	sp, #64	; 0x40
 8107bec:	af00      	add	r7, sp, #0
 8107bee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107bf6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8107bfa:	430b      	orrs	r3, r1
 8107bfc:	f040 8094 	bne.w	8107d28 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107c00:	4b9e      	ldr	r3, [pc, #632]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107c04:	f003 0307 	and.w	r3, r3, #7
 8107c08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107c0c:	2b04      	cmp	r3, #4
 8107c0e:	f200 8087 	bhi.w	8107d20 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8107c12:	a201      	add	r2, pc, #4	; (adr r2, 8107c18 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8107c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c18:	08107c2d 	.word	0x08107c2d
 8107c1c:	08107c55 	.word	0x08107c55
 8107c20:	08107c7d 	.word	0x08107c7d
 8107c24:	08107d19 	.word	0x08107d19
 8107c28:	08107ca5 	.word	0x08107ca5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c2c:	4b93      	ldr	r3, [pc, #588]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c2e:	681b      	ldr	r3, [r3, #0]
 8107c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107c38:	d108      	bne.n	8107c4c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107c3e:	4618      	mov	r0, r3
 8107c40:	f001 f810 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c48:	f000 bd45 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c4c:	2300      	movs	r3, #0
 8107c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107c50:	f000 bd41 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c54:	4b89      	ldr	r3, [pc, #548]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c56:	681b      	ldr	r3, [r3, #0]
 8107c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107c60:	d108      	bne.n	8107c74 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c62:	f107 0318 	add.w	r3, r7, #24
 8107c66:	4618      	mov	r0, r3
 8107c68:	f000 fd54 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107c6c:	69bb      	ldr	r3, [r7, #24]
 8107c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c70:	f000 bd31 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c74:	2300      	movs	r3, #0
 8107c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107c78:	f000 bd2d 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107c7c:	4b7f      	ldr	r3, [pc, #508]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107c88:	d108      	bne.n	8107c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107c8a:	f107 030c 	add.w	r3, r7, #12
 8107c8e:	4618      	mov	r0, r3
 8107c90:	f000 fe94 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107c94:	68fb      	ldr	r3, [r7, #12]
 8107c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c98:	f000 bd1d 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c9c:	2300      	movs	r3, #0
 8107c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107ca0:	f000 bd19 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107ca4:	4b75      	ldr	r3, [pc, #468]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107ca8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107cac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107cae:	4b73      	ldr	r3, [pc, #460]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	f003 0304 	and.w	r3, r3, #4
 8107cb6:	2b04      	cmp	r3, #4
 8107cb8:	d10c      	bne.n	8107cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8107cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107cbc:	2b00      	cmp	r3, #0
 8107cbe:	d109      	bne.n	8107cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107cc0:	4b6e      	ldr	r3, [pc, #440]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cc2:	681b      	ldr	r3, [r3, #0]
 8107cc4:	08db      	lsrs	r3, r3, #3
 8107cc6:	f003 0303 	and.w	r3, r3, #3
 8107cca:	4a6d      	ldr	r2, [pc, #436]	; (8107e80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8107cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107cd2:	e01f      	b.n	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107cd4:	4b69      	ldr	r3, [pc, #420]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107ce0:	d106      	bne.n	8107cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107ce8:	d102      	bne.n	8107cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107cea:	4b66      	ldr	r3, [pc, #408]	; (8107e84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107cee:	e011      	b.n	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107cf0:	4b62      	ldr	r3, [pc, #392]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107cf2:	681b      	ldr	r3, [r3, #0]
 8107cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107cfc:	d106      	bne.n	8107d0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8107cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107d04:	d102      	bne.n	8107d0c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107d06:	4b60      	ldr	r3, [pc, #384]	; (8107e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107d08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107d0a:	e003      	b.n	8107d14 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107d0c:	2300      	movs	r3, #0
 8107d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107d10:	f000 bce1 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107d14:	f000 bcdf 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107d18:	4b5c      	ldr	r3, [pc, #368]	; (8107e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d1c:	f000 bcdb 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107d20:	2300      	movs	r3, #0
 8107d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107d24:	f000 bcd7 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8107d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107d2c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8107d30:	430b      	orrs	r3, r1
 8107d32:	f040 80ad 	bne.w	8107e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8107d36:	4b51      	ldr	r3, [pc, #324]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107d3a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8107d3e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107d46:	d056      	beq.n	8107df6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8107d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107d4e:	f200 8090 	bhi.w	8107e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d54:	2bc0      	cmp	r3, #192	; 0xc0
 8107d56:	f000 8088 	beq.w	8107e6a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8107d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8107d5e:	f200 8088 	bhi.w	8107e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d64:	2b80      	cmp	r3, #128	; 0x80
 8107d66:	d032      	beq.n	8107dce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8107d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d6a:	2b80      	cmp	r3, #128	; 0x80
 8107d6c:	f200 8081 	bhi.w	8107e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d72:	2b00      	cmp	r3, #0
 8107d74:	d003      	beq.n	8107d7e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107d78:	2b40      	cmp	r3, #64	; 0x40
 8107d7a:	d014      	beq.n	8107da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8107d7c:	e079      	b.n	8107e72 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107d7e:	4b3f      	ldr	r3, [pc, #252]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107d86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107d8a:	d108      	bne.n	8107d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107d90:	4618      	mov	r0, r3
 8107d92:	f000 ff67 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107d9a:	f000 bc9c 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107d9e:	2300      	movs	r3, #0
 8107da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107da2:	f000 bc98 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107da6:	4b35      	ldr	r3, [pc, #212]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107db2:	d108      	bne.n	8107dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107db4:	f107 0318 	add.w	r3, r7, #24
 8107db8:	4618      	mov	r0, r3
 8107dba:	f000 fcab 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107dbe:	69bb      	ldr	r3, [r7, #24]
 8107dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107dc2:	f000 bc88 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dc6:	2300      	movs	r3, #0
 8107dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107dca:	f000 bc84 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107dce:	4b2b      	ldr	r3, [pc, #172]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107dd0:	681b      	ldr	r3, [r3, #0]
 8107dd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107dda:	d108      	bne.n	8107dee <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107ddc:	f107 030c 	add.w	r3, r7, #12
 8107de0:	4618      	mov	r0, r3
 8107de2:	f000 fdeb 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107de6:	68fb      	ldr	r3, [r7, #12]
 8107de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107dea:	f000 bc74 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107dee:	2300      	movs	r3, #0
 8107df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107df2:	f000 bc70 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107df6:	4b21      	ldr	r3, [pc, #132]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107dfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107dfe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107e00:	4b1e      	ldr	r3, [pc, #120]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	f003 0304 	and.w	r3, r3, #4
 8107e08:	2b04      	cmp	r3, #4
 8107e0a:	d10c      	bne.n	8107e26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e0e:	2b00      	cmp	r3, #0
 8107e10:	d109      	bne.n	8107e26 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107e12:	4b1a      	ldr	r3, [pc, #104]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	08db      	lsrs	r3, r3, #3
 8107e18:	f003 0303 	and.w	r3, r3, #3
 8107e1c:	4a18      	ldr	r2, [pc, #96]	; (8107e80 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8107e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8107e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e24:	e01f      	b.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107e26:	4b15      	ldr	r3, [pc, #84]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107e32:	d106      	bne.n	8107e42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8107e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e3a:	d102      	bne.n	8107e42 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107e3c:	4b11      	ldr	r3, [pc, #68]	; (8107e84 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8107e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e40:	e011      	b.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107e42:	4b0e      	ldr	r3, [pc, #56]	; (8107e7c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107e44:	681b      	ldr	r3, [r3, #0]
 8107e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107e4e:	d106      	bne.n	8107e5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8107e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107e56:	d102      	bne.n	8107e5e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107e58:	4b0b      	ldr	r3, [pc, #44]	; (8107e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107e5c:	e003      	b.n	8107e66 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107e5e:	2300      	movs	r3, #0
 8107e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107e62:	f000 bc38 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107e66:	f000 bc36 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107e6a:	4b08      	ldr	r3, [pc, #32]	; (8107e8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8107e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e6e:	f000 bc32 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107e72:	2300      	movs	r3, #0
 8107e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107e76:	f000 bc2e 	b.w	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107e7a:	bf00      	nop
 8107e7c:	58024400 	.word	0x58024400
 8107e80:	03d09000 	.word	0x03d09000
 8107e84:	003d0900 	.word	0x003d0900
 8107e88:	017d7840 	.word	0x017d7840
 8107e8c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107e94:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8107e98:	430b      	orrs	r3, r1
 8107e9a:	f040 809c 	bne.w	8107fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8107e9e:	4b9e      	ldr	r3, [pc, #632]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107ea2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8107ea6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107eae:	d054      	beq.n	8107f5a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8107eb6:	f200 808b 	bhi.w	8107fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ebc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107ec0:	f000 8083 	beq.w	8107fca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ec6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8107eca:	f200 8081 	bhi.w	8107fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107ed4:	d02f      	beq.n	8107f36 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8107edc:	d878      	bhi.n	8107fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ee0:	2b00      	cmp	r3, #0
 8107ee2:	d004      	beq.n	8107eee <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8107eea:	d012      	beq.n	8107f12 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107eec:	e070      	b.n	8107fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107eee:	4b8a      	ldr	r3, [pc, #552]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8107ef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8107efa:	d107      	bne.n	8107f0c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8107f00:	4618      	mov	r0, r3
 8107f02:	f000 feaf 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f0a:	e3e4      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f0c:	2300      	movs	r3, #0
 8107f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107f10:	e3e1      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107f12:	4b81      	ldr	r3, [pc, #516]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f14:	681b      	ldr	r3, [r3, #0]
 8107f16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8107f1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8107f1e:	d107      	bne.n	8107f30 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107f20:	f107 0318 	add.w	r3, r7, #24
 8107f24:	4618      	mov	r0, r3
 8107f26:	f000 fbf5 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107f2a:	69bb      	ldr	r3, [r7, #24]
 8107f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f2e:	e3d2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f30:	2300      	movs	r3, #0
 8107f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107f34:	e3cf      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107f36:	4b78      	ldr	r3, [pc, #480]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f38:	681b      	ldr	r3, [r3, #0]
 8107f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107f42:	d107      	bne.n	8107f54 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107f44:	f107 030c 	add.w	r3, r7, #12
 8107f48:	4618      	mov	r0, r3
 8107f4a:	f000 fd37 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107f4e:	68fb      	ldr	r3, [r7, #12]
 8107f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107f52:	e3c0      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107f54:	2300      	movs	r3, #0
 8107f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107f58:	e3bd      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107f5a:	4b6f      	ldr	r3, [pc, #444]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107f5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8107f62:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107f64:	4b6c      	ldr	r3, [pc, #432]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f66:	681b      	ldr	r3, [r3, #0]
 8107f68:	f003 0304 	and.w	r3, r3, #4
 8107f6c:	2b04      	cmp	r3, #4
 8107f6e:	d10c      	bne.n	8107f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107f72:	2b00      	cmp	r3, #0
 8107f74:	d109      	bne.n	8107f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f76:	4b68      	ldr	r3, [pc, #416]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	08db      	lsrs	r3, r3, #3
 8107f7c:	f003 0303 	and.w	r3, r3, #3
 8107f80:	4a66      	ldr	r2, [pc, #408]	; (810811c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107f82:	fa22 f303 	lsr.w	r3, r2, r3
 8107f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107f88:	e01e      	b.n	8107fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107f8a:	4b63      	ldr	r3, [pc, #396]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107f8c:	681b      	ldr	r3, [r3, #0]
 8107f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8107f96:	d106      	bne.n	8107fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107f9e:	d102      	bne.n	8107fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107fa0:	4b5f      	ldr	r3, [pc, #380]	; (8108120 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107fa4:	e010      	b.n	8107fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107fa6:	4b5c      	ldr	r3, [pc, #368]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fa8:	681b      	ldr	r3, [r3, #0]
 8107faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8107fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8107fb2:	d106      	bne.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107fba:	d102      	bne.n	8107fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107fbc:	4b59      	ldr	r3, [pc, #356]	; (8108124 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8107fc0:	e002      	b.n	8107fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107fc2:	2300      	movs	r3, #0
 8107fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8107fc6:	e386      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107fc8:	e385      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107fca:	4b57      	ldr	r3, [pc, #348]	; (8108128 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107fce:	e382      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107fd0:	2300      	movs	r3, #0
 8107fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8107fd4:	e37f      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107fd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107fda:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8107fde:	430b      	orrs	r3, r1
 8107fe0:	f040 80a7 	bne.w	8108132 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107fe4:	4b4c      	ldr	r3, [pc, #304]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107fe8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8107fec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8107fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107ff4:	d055      	beq.n	81080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8107ffc:	f200 8096 	bhi.w	810812c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108002:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108006:	f000 8084 	beq.w	8108112 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810800c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8108010:	f200 808c 	bhi.w	810812c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810801a:	d030      	beq.n	810807e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810801e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108022:	f200 8083 	bhi.w	810812c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8108026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108028:	2b00      	cmp	r3, #0
 810802a:	d004      	beq.n	8108036 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810802e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108032:	d012      	beq.n	810805a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8108034:	e07a      	b.n	810812c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108036:	4b38      	ldr	r3, [pc, #224]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108038:	681b      	ldr	r3, [r3, #0]
 810803a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810803e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108042:	d107      	bne.n	8108054 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108048:	4618      	mov	r0, r3
 810804a:	f000 fe0b 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108050:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108052:	e340      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108054:	2300      	movs	r3, #0
 8108056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108058:	e33d      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810805a:	4b2f      	ldr	r3, [pc, #188]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810805c:	681b      	ldr	r3, [r3, #0]
 810805e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108066:	d107      	bne.n	8108078 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108068:	f107 0318 	add.w	r3, r7, #24
 810806c:	4618      	mov	r0, r3
 810806e:	f000 fb51 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8108072:	69bb      	ldr	r3, [r7, #24]
 8108074:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108076:	e32e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108078:	2300      	movs	r3, #0
 810807a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810807c:	e32b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810807e:	4b26      	ldr	r3, [pc, #152]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810808a:	d107      	bne.n	810809c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810808c:	f107 030c 	add.w	r3, r7, #12
 8108090:	4618      	mov	r0, r3
 8108092:	f000 fc93 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8108096:	68fb      	ldr	r3, [r7, #12]
 8108098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810809a:	e31c      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810809c:	2300      	movs	r3, #0
 810809e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81080a0:	e319      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81080a2:	4b1d      	ldr	r3, [pc, #116]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81080a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81080aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81080ac:	4b1a      	ldr	r3, [pc, #104]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81080ae:	681b      	ldr	r3, [r3, #0]
 81080b0:	f003 0304 	and.w	r3, r3, #4
 81080b4:	2b04      	cmp	r3, #4
 81080b6:	d10c      	bne.n	81080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 81080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080ba:	2b00      	cmp	r3, #0
 81080bc:	d109      	bne.n	81080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81080be:	4b16      	ldr	r3, [pc, #88]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81080c0:	681b      	ldr	r3, [r3, #0]
 81080c2:	08db      	lsrs	r3, r3, #3
 81080c4:	f003 0303 	and.w	r3, r3, #3
 81080c8:	4a14      	ldr	r2, [pc, #80]	; (810811c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81080ca:	fa22 f303 	lsr.w	r3, r2, r3
 81080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 81080d0:	e01e      	b.n	8108110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81080d2:	4b11      	ldr	r3, [pc, #68]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81080da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81080de:	d106      	bne.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 81080e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81080e6:	d102      	bne.n	81080ee <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81080e8:	4b0d      	ldr	r3, [pc, #52]	; (8108120 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 81080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 81080ec:	e010      	b.n	8108110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81080ee:	4b0a      	ldr	r3, [pc, #40]	; (8108118 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81080f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81080fa:	d106      	bne.n	810810a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 81080fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108102:	d102      	bne.n	810810a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108104:	4b07      	ldr	r3, [pc, #28]	; (8108124 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8108106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108108:	e002      	b.n	8108110 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810810a:	2300      	movs	r3, #0
 810810c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810810e:	e2e2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108110:	e2e1      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8108112:	4b05      	ldr	r3, [pc, #20]	; (8108128 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8108114:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108116:	e2de      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108118:	58024400 	.word	0x58024400
 810811c:	03d09000 	.word	0x03d09000
 8108120:	003d0900 	.word	0x003d0900
 8108124:	017d7840 	.word	0x017d7840
 8108128:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810812c:	2300      	movs	r3, #0
 810812e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108130:	e2d1      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8108132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108136:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 810813a:	430b      	orrs	r3, r1
 810813c:	f040 809c 	bne.w	8108278 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8108140:	4b93      	ldr	r3, [pc, #588]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108144:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8108148:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810814c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108150:	d054      	beq.n	81081fc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8108152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8108158:	f200 808b 	bhi.w	8108272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810815e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8108162:	f000 8083 	beq.w	810826c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8108166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108168:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810816c:	f200 8081 	bhi.w	8108272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8108176:	d02f      	beq.n	81081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8108178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810817a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810817e:	d878      	bhi.n	8108272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8108180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108182:	2b00      	cmp	r3, #0
 8108184:	d004      	beq.n	8108190 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8108186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810818c:	d012      	beq.n	81081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810818e:	e070      	b.n	8108272 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108190:	4b7f      	ldr	r3, [pc, #508]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108198:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810819c:	d107      	bne.n	81081ae <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810819e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81081a2:	4618      	mov	r0, r3
 81081a4:	f000 fd5e 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081ac:	e293      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081ae:	2300      	movs	r3, #0
 81081b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081b2:	e290      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81081b4:	4b76      	ldr	r3, [pc, #472]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081b6:	681b      	ldr	r3, [r3, #0]
 81081b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81081bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81081c0:	d107      	bne.n	81081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81081c2:	f107 0318 	add.w	r3, r7, #24
 81081c6:	4618      	mov	r0, r3
 81081c8:	f000 faa4 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81081cc:	69bb      	ldr	r3, [r7, #24]
 81081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081d0:	e281      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081d2:	2300      	movs	r3, #0
 81081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081d6:	e27e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81081d8:	4b6d      	ldr	r3, [pc, #436]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081da:	681b      	ldr	r3, [r3, #0]
 81081dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81081e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81081e4:	d107      	bne.n	81081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81081e6:	f107 030c 	add.w	r3, r7, #12
 81081ea:	4618      	mov	r0, r3
 81081ec:	f000 fbe6 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81081f0:	68fb      	ldr	r3, [r7, #12]
 81081f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81081f4:	e26f      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81081f6:	2300      	movs	r3, #0
 81081f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81081fa:	e26c      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81081fc:	4b64      	ldr	r3, [pc, #400]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81081fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108204:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8108206:	4b62      	ldr	r3, [pc, #392]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	f003 0304 	and.w	r3, r3, #4
 810820e:	2b04      	cmp	r3, #4
 8108210:	d10c      	bne.n	810822c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8108212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108214:	2b00      	cmp	r3, #0
 8108216:	d109      	bne.n	810822c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108218:	4b5d      	ldr	r3, [pc, #372]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810821a:	681b      	ldr	r3, [r3, #0]
 810821c:	08db      	lsrs	r3, r3, #3
 810821e:	f003 0303 	and.w	r3, r3, #3
 8108222:	4a5c      	ldr	r2, [pc, #368]	; (8108394 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108224:	fa22 f303 	lsr.w	r3, r2, r3
 8108228:	63fb      	str	r3, [r7, #60]	; 0x3c
 810822a:	e01e      	b.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810822c:	4b58      	ldr	r3, [pc, #352]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810822e:	681b      	ldr	r3, [r3, #0]
 8108230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108238:	d106      	bne.n	8108248 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810823a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810823c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108240:	d102      	bne.n	8108248 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108242:	4b55      	ldr	r3, [pc, #340]	; (8108398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108246:	e010      	b.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8108248:	4b51      	ldr	r3, [pc, #324]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810824a:	681b      	ldr	r3, [r3, #0]
 810824c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108254:	d106      	bne.n	8108264 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8108256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810825c:	d102      	bne.n	8108264 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810825e:	4b4f      	ldr	r3, [pc, #316]	; (810839c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108262:	e002      	b.n	810826a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8108264:	2300      	movs	r3, #0
 8108266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8108268:	e235      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810826a:	e234      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810826c:	4b4c      	ldr	r3, [pc, #304]	; (81083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810826e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108270:	e231      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8108272:	2300      	movs	r3, #0
 8108274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108276:	e22e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8108278:	e9d7 2300 	ldrd	r2, r3, [r7]
 810827c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8108280:	430b      	orrs	r3, r1
 8108282:	f040 808f 	bne.w	81083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8108286:	4b42      	ldr	r3, [pc, #264]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810828a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 810828e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8108290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8108296:	d06b      	beq.n	8108370 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8108298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810829a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810829e:	d874      	bhi.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81082a6:	d056      	beq.n	8108356 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 81082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81082ae:	d86c      	bhi.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81082b6:	d03b      	beq.n	8108330 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 81082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81082be:	d864      	bhi.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81082c6:	d021      	beq.n	810830c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 81082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81082ce:	d85c      	bhi.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082d2:	2b00      	cmp	r3, #0
 81082d4:	d004      	beq.n	81082e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81082dc:	d004      	beq.n	81082e8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81082de:	e054      	b.n	810838a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81082e0:	f7fe fa4c 	bl	810677c <HAL_RCC_GetPCLK1Freq>
 81082e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81082e6:	e1f6      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81082e8:	4b29      	ldr	r3, [pc, #164]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81082ea:	681b      	ldr	r3, [r3, #0]
 81082ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81082f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81082f4:	d107      	bne.n	8108306 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81082f6:	f107 0318 	add.w	r3, r7, #24
 81082fa:	4618      	mov	r0, r3
 81082fc:	f000 fa0a 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108300:	69fb      	ldr	r3, [r7, #28]
 8108302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108304:	e1e7      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108306:	2300      	movs	r3, #0
 8108308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810830a:	e1e4      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810830c:	4b20      	ldr	r3, [pc, #128]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108318:	d107      	bne.n	810832a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810831a:	f107 030c 	add.w	r3, r7, #12
 810831e:	4618      	mov	r0, r3
 8108320:	f000 fb4c 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8108324:	693b      	ldr	r3, [r7, #16]
 8108326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108328:	e1d5      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810832a:	2300      	movs	r3, #0
 810832c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810832e:	e1d2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8108330:	4b17      	ldr	r3, [pc, #92]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108332:	681b      	ldr	r3, [r3, #0]
 8108334:	f003 0304 	and.w	r3, r3, #4
 8108338:	2b04      	cmp	r3, #4
 810833a:	d109      	bne.n	8108350 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810833c:	4b14      	ldr	r3, [pc, #80]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810833e:	681b      	ldr	r3, [r3, #0]
 8108340:	08db      	lsrs	r3, r3, #3
 8108342:	f003 0303 	and.w	r3, r3, #3
 8108346:	4a13      	ldr	r2, [pc, #76]	; (8108394 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8108348:	fa22 f303 	lsr.w	r3, r2, r3
 810834c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810834e:	e1c2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108350:	2300      	movs	r3, #0
 8108352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108354:	e1bf      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8108356:	4b0e      	ldr	r3, [pc, #56]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108358:	681b      	ldr	r3, [r3, #0]
 810835a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810835e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108362:	d102      	bne.n	810836a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8108364:	4b0c      	ldr	r3, [pc, #48]	; (8108398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8108366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108368:	e1b5      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810836a:	2300      	movs	r3, #0
 810836c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810836e:	e1b2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108370:	4b07      	ldr	r3, [pc, #28]	; (8108390 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810837c:	d102      	bne.n	8108384 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810837e:	4b07      	ldr	r3, [pc, #28]	; (810839c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8108380:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108382:	e1a8      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108384:	2300      	movs	r3, #0
 8108386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108388:	e1a5      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810838a:	2300      	movs	r3, #0
 810838c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810838e:	e1a2      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108390:	58024400 	.word	0x58024400
 8108394:	03d09000 	.word	0x03d09000
 8108398:	003d0900 	.word	0x003d0900
 810839c:	017d7840 	.word	0x017d7840
 81083a0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81083a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81083a8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 81083ac:	430b      	orrs	r3, r1
 81083ae:	d173      	bne.n	8108498 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 81083b0:	4b9c      	ldr	r3, [pc, #624]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81083b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81083b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81083c0:	d02f      	beq.n	8108422 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 81083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81083c8:	d863      	bhi.n	8108492 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 81083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083cc:	2b00      	cmp	r3, #0
 81083ce:	d004      	beq.n	81083da <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81083d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81083d6:	d012      	beq.n	81083fe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81083d8:	e05b      	b.n	8108492 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81083da:	4b92      	ldr	r3, [pc, #584]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81083dc:	681b      	ldr	r3, [r3, #0]
 81083de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81083e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81083e6:	d107      	bne.n	81083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81083e8:	f107 0318 	add.w	r3, r7, #24
 81083ec:	4618      	mov	r0, r3
 81083ee:	f000 f991 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81083f2:	69bb      	ldr	r3, [r7, #24]
 81083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81083f6:	e16e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81083f8:	2300      	movs	r3, #0
 81083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81083fc:	e16b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81083fe:	4b89      	ldr	r3, [pc, #548]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108400:	681b      	ldr	r3, [r3, #0]
 8108402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8108406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810840a:	d107      	bne.n	810841c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810840c:	f107 030c 	add.w	r3, r7, #12
 8108410:	4618      	mov	r0, r3
 8108412:	f000 fad3 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8108416:	697b      	ldr	r3, [r7, #20]
 8108418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810841a:	e15c      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810841c:	2300      	movs	r3, #0
 810841e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108420:	e159      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8108422:	4b80      	ldr	r3, [pc, #512]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810842a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810842c:	4b7d      	ldr	r3, [pc, #500]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810842e:	681b      	ldr	r3, [r3, #0]
 8108430:	f003 0304 	and.w	r3, r3, #4
 8108434:	2b04      	cmp	r3, #4
 8108436:	d10c      	bne.n	8108452 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8108438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810843a:	2b00      	cmp	r3, #0
 810843c:	d109      	bne.n	8108452 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810843e:	4b79      	ldr	r3, [pc, #484]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	08db      	lsrs	r3, r3, #3
 8108444:	f003 0303 	and.w	r3, r3, #3
 8108448:	4a77      	ldr	r2, [pc, #476]	; (8108628 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810844a:	fa22 f303 	lsr.w	r3, r2, r3
 810844e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108450:	e01e      	b.n	8108490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8108452:	4b74      	ldr	r3, [pc, #464]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108454:	681b      	ldr	r3, [r3, #0]
 8108456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810845a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810845e:	d106      	bne.n	810846e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8108460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108466:	d102      	bne.n	810846e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8108468:	4b70      	ldr	r3, [pc, #448]	; (810862c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810846a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810846c:	e010      	b.n	8108490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810846e:	4b6d      	ldr	r3, [pc, #436]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108470:	681b      	ldr	r3, [r3, #0]
 8108472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810847a:	d106      	bne.n	810848a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810847e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108482:	d102      	bne.n	810848a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8108484:	4b6a      	ldr	r3, [pc, #424]	; (8108630 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108486:	63fb      	str	r3, [r7, #60]	; 0x3c
 8108488:	e002      	b.n	8108490 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810848a:	2300      	movs	r3, #0
 810848c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810848e:	e122      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108490:	e121      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108492:	2300      	movs	r3, #0
 8108494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108496:	e11e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8108498:	e9d7 2300 	ldrd	r2, r3, [r7]
 810849c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 81084a0:	430b      	orrs	r3, r1
 81084a2:	d133      	bne.n	810850c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 81084a4:	4b5f      	ldr	r3, [pc, #380]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81084a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81084ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81084b0:	2b00      	cmp	r3, #0
 81084b2:	d004      	beq.n	81084be <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 81084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81084b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81084ba:	d012      	beq.n	81084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 81084bc:	e023      	b.n	8108506 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81084be:	4b59      	ldr	r3, [pc, #356]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084c0:	681b      	ldr	r3, [r3, #0]
 81084c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81084c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81084ca:	d107      	bne.n	81084dc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81084cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81084d0:	4618      	mov	r0, r3
 81084d2:	f000 fbc7 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084da:	e0fc      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81084dc:	2300      	movs	r3, #0
 81084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81084e0:	e0f9      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81084e2:	4b50      	ldr	r3, [pc, #320]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81084e4:	681b      	ldr	r3, [r3, #0]
 81084e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81084ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81084ee:	d107      	bne.n	8108500 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81084f0:	f107 0318 	add.w	r3, r7, #24
 81084f4:	4618      	mov	r0, r3
 81084f6:	f000 f90d 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81084fa:	6a3b      	ldr	r3, [r7, #32]
 81084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81084fe:	e0ea      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108500:	2300      	movs	r3, #0
 8108502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108504:	e0e7      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8108506:	2300      	movs	r3, #0
 8108508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810850a:	e0e4      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810850c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108510:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8108514:	430b      	orrs	r3, r1
 8108516:	f040 808d 	bne.w	8108634 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810851a:	4b42      	ldr	r3, [pc, #264]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810851c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810851e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8108522:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8108524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810852a:	d06b      	beq.n	8108604 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810852e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8108532:	d874      	bhi.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810853a:	d056      	beq.n	81085ea <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810853c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810853e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8108542:	d86c      	bhi.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810854a:	d03b      	beq.n	81085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810854e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8108552:	d864      	bhi.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810855a:	d021      	beq.n	81085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810855e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108562:	d85c      	bhi.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8108564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108566:	2b00      	cmp	r3, #0
 8108568:	d004      	beq.n	8108574 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810856c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108570:	d004      	beq.n	810857c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8108572:	e054      	b.n	810861e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8108574:	f000 f8b8 	bl	81086e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8108578:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810857a:	e0ac      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810857c:	4b29      	ldr	r3, [pc, #164]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8108588:	d107      	bne.n	810859a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810858a:	f107 0318 	add.w	r3, r7, #24
 810858e:	4618      	mov	r0, r3
 8108590:	f000 f8c0 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8108594:	69fb      	ldr	r3, [r7, #28]
 8108596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108598:	e09d      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810859a:	2300      	movs	r3, #0
 810859c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810859e:	e09a      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81085a0:	4b20      	ldr	r3, [pc, #128]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81085a2:	681b      	ldr	r3, [r3, #0]
 81085a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81085a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81085ac:	d107      	bne.n	81085be <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81085ae:	f107 030c 	add.w	r3, r7, #12
 81085b2:	4618      	mov	r0, r3
 81085b4:	f000 fa02 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81085b8:	693b      	ldr	r3, [r7, #16]
 81085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085bc:	e08b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085be:	2300      	movs	r3, #0
 81085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085c2:	e088      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81085c4:	4b17      	ldr	r3, [pc, #92]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	f003 0304 	and.w	r3, r3, #4
 81085cc:	2b04      	cmp	r3, #4
 81085ce:	d109      	bne.n	81085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81085d0:	4b14      	ldr	r3, [pc, #80]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	08db      	lsrs	r3, r3, #3
 81085d6:	f003 0303 	and.w	r3, r3, #3
 81085da:	4a13      	ldr	r2, [pc, #76]	; (8108628 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81085dc:	fa22 f303 	lsr.w	r3, r2, r3
 81085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085e2:	e078      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085e4:	2300      	movs	r3, #0
 81085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81085e8:	e075      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81085ea:	4b0e      	ldr	r3, [pc, #56]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81085ec:	681b      	ldr	r3, [r3, #0]
 81085ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81085f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81085f6:	d102      	bne.n	81085fe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81085f8:	4b0c      	ldr	r3, [pc, #48]	; (810862c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81085fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81085fc:	e06b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81085fe:	2300      	movs	r3, #0
 8108600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108602:	e068      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8108604:	4b07      	ldr	r3, [pc, #28]	; (8108624 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810860c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108610:	d102      	bne.n	8108618 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8108612:	4b07      	ldr	r3, [pc, #28]	; (8108630 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8108614:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8108616:	e05e      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8108618:	2300      	movs	r3, #0
 810861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810861c:	e05b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810861e:	2300      	movs	r3, #0
 8108620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108622:	e058      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8108624:	58024400 	.word	0x58024400
 8108628:	03d09000 	.word	0x03d09000
 810862c:	003d0900 	.word	0x003d0900
 8108630:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8108634:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108638:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 810863c:	430b      	orrs	r3, r1
 810863e:	d148      	bne.n	81086d2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8108640:	4b27      	ldr	r3, [pc, #156]	; (81086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108644:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8108648:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810864c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108650:	d02a      	beq.n	81086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8108652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8108658:	d838      	bhi.n	81086cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810865c:	2b00      	cmp	r3, #0
 810865e:	d004      	beq.n	810866a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8108660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8108666:	d00d      	beq.n	8108684 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8108668:	e030      	b.n	81086cc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810866a:	4b1d      	ldr	r3, [pc, #116]	; (81086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810866c:	681b      	ldr	r3, [r3, #0]
 810866e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8108672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8108676:	d102      	bne.n	810867e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8108678:	4b1a      	ldr	r3, [pc, #104]	; (81086e4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810867a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810867c:	e02b      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810867e:	2300      	movs	r3, #0
 8108680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108682:	e028      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8108684:	4b16      	ldr	r3, [pc, #88]	; (81086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8108686:	681b      	ldr	r3, [r3, #0]
 8108688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810868c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8108690:	d107      	bne.n	81086a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8108692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108696:	4618      	mov	r0, r3
 8108698:	f000 fae4 	bl	8108c64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810869c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810869e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81086a0:	e019      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81086a2:	2300      	movs	r3, #0
 81086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086a6:	e016      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81086a8:	4b0d      	ldr	r3, [pc, #52]	; (81086e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81086aa:	681b      	ldr	r3, [r3, #0]
 81086ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81086b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81086b4:	d107      	bne.n	81086c6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81086b6:	f107 0318 	add.w	r3, r7, #24
 81086ba:	4618      	mov	r0, r3
 81086bc:	f000 f82a 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81086c0:	69fb      	ldr	r3, [r7, #28]
 81086c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81086c4:	e007      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81086c6:	2300      	movs	r3, #0
 81086c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086ca:	e004      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81086cc:	2300      	movs	r3, #0
 81086ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086d0:	e001      	b.n	81086d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81086d2:	2300      	movs	r3, #0
 81086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 81086d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81086d8:	4618      	mov	r0, r3
 81086da:	3740      	adds	r7, #64	; 0x40
 81086dc:	46bd      	mov	sp, r7
 81086de:	bd80      	pop	{r7, pc}
 81086e0:	58024400 	.word	0x58024400
 81086e4:	017d7840 	.word	0x017d7840

081086e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81086e8:	b580      	push	{r7, lr}
 81086ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81086ec:	f7fe f814 	bl	8106718 <HAL_RCC_GetHCLKFreq>
 81086f0:	4602      	mov	r2, r0
 81086f2:	4b06      	ldr	r3, [pc, #24]	; (810870c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81086f4:	6a1b      	ldr	r3, [r3, #32]
 81086f6:	091b      	lsrs	r3, r3, #4
 81086f8:	f003 0307 	and.w	r3, r3, #7
 81086fc:	4904      	ldr	r1, [pc, #16]	; (8108710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81086fe:	5ccb      	ldrb	r3, [r1, r3]
 8108700:	f003 031f 	and.w	r3, r3, #31
 8108704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8108708:	4618      	mov	r0, r3
 810870a:	bd80      	pop	{r7, pc}
 810870c:	58024400 	.word	0x58024400
 8108710:	0810c3cc 	.word	0x0810c3cc

08108714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8108714:	b480      	push	{r7}
 8108716:	b089      	sub	sp, #36	; 0x24
 8108718:	af00      	add	r7, sp, #0
 810871a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810871c:	4ba1      	ldr	r3, [pc, #644]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108720:	f003 0303 	and.w	r3, r3, #3
 8108724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8108726:	4b9f      	ldr	r3, [pc, #636]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810872a:	0b1b      	lsrs	r3, r3, #12
 810872c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8108732:	4b9c      	ldr	r3, [pc, #624]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108736:	091b      	lsrs	r3, r3, #4
 8108738:	f003 0301 	and.w	r3, r3, #1
 810873c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810873e:	4b99      	ldr	r3, [pc, #612]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108742:	08db      	lsrs	r3, r3, #3
 8108744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108748:	693a      	ldr	r2, [r7, #16]
 810874a:	fb02 f303 	mul.w	r3, r2, r3
 810874e:	ee07 3a90 	vmov	s15, r3
 8108752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810875a:	697b      	ldr	r3, [r7, #20]
 810875c:	2b00      	cmp	r3, #0
 810875e:	f000 8111 	beq.w	8108984 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8108762:	69bb      	ldr	r3, [r7, #24]
 8108764:	2b02      	cmp	r3, #2
 8108766:	f000 8083 	beq.w	8108870 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810876a:	69bb      	ldr	r3, [r7, #24]
 810876c:	2b02      	cmp	r3, #2
 810876e:	f200 80a1 	bhi.w	81088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8108772:	69bb      	ldr	r3, [r7, #24]
 8108774:	2b00      	cmp	r3, #0
 8108776:	d003      	beq.n	8108780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8108778:	69bb      	ldr	r3, [r7, #24]
 810877a:	2b01      	cmp	r3, #1
 810877c:	d056      	beq.n	810882c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810877e:	e099      	b.n	81088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108780:	4b88      	ldr	r3, [pc, #544]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108782:	681b      	ldr	r3, [r3, #0]
 8108784:	f003 0320 	and.w	r3, r3, #32
 8108788:	2b00      	cmp	r3, #0
 810878a:	d02d      	beq.n	81087e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810878c:	4b85      	ldr	r3, [pc, #532]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810878e:	681b      	ldr	r3, [r3, #0]
 8108790:	08db      	lsrs	r3, r3, #3
 8108792:	f003 0303 	and.w	r3, r3, #3
 8108796:	4a84      	ldr	r2, [pc, #528]	; (81089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8108798:	fa22 f303 	lsr.w	r3, r2, r3
 810879c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810879e:	68bb      	ldr	r3, [r7, #8]
 81087a0:	ee07 3a90 	vmov	s15, r3
 81087a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087a8:	697b      	ldr	r3, [r7, #20]
 81087aa:	ee07 3a90 	vmov	s15, r3
 81087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087b6:	4b7b      	ldr	r3, [pc, #492]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81087be:	ee07 3a90 	vmov	s15, r3
 81087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81087ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 81089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81087d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81087e6:	e087      	b.n	81088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81087e8:	697b      	ldr	r3, [r7, #20]
 81087ea:	ee07 3a90 	vmov	s15, r3
 81087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81087f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81087fa:	4b6a      	ldr	r3, [pc, #424]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108802:	ee07 3a90 	vmov	s15, r3
 8108806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810880a:	ed97 6a03 	vldr	s12, [r7, #12]
 810880e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810881a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810881e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810882a:	e065      	b.n	81088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810882c:	697b      	ldr	r3, [r7, #20]
 810882e:	ee07 3a90 	vmov	s15, r3
 8108832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108836:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810883e:	4b59      	ldr	r3, [pc, #356]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108846:	ee07 3a90 	vmov	s15, r3
 810884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108852:	eddf 5a56 	vldr	s11, [pc, #344]	; 81089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8108856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810885e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108866:	ee67 7a27 	vmul.f32	s15, s14, s15
 810886a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810886e:	e043      	b.n	81088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8108870:	697b      	ldr	r3, [r7, #20]
 8108872:	ee07 3a90 	vmov	s15, r3
 8108876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810887a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108882:	4b48      	ldr	r3, [pc, #288]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810888a:	ee07 3a90 	vmov	s15, r3
 810888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108892:	ed97 6a03 	vldr	s12, [r7, #12]
 8108896:	eddf 5a45 	vldr	s11, [pc, #276]	; 81089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088b2:	e021      	b.n	81088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81088b4:	697b      	ldr	r3, [r7, #20]
 81088b6:	ee07 3a90 	vmov	s15, r3
 81088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81088be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81088c6:	4b37      	ldr	r3, [pc, #220]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81088ce:	ee07 3a90 	vmov	s15, r3
 81088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81088da:	eddf 5a34 	vldr	s11, [pc, #208]	; 81089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81088e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81088f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81088f8:	4b2a      	ldr	r3, [pc, #168]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81088fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81088fc:	0a5b      	lsrs	r3, r3, #9
 81088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108902:	ee07 3a90 	vmov	s15, r3
 8108906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810890a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810890e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108912:	edd7 6a07 	vldr	s13, [r7, #28]
 8108916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810891a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810891e:	ee17 2a90 	vmov	r2, s15
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8108926:	4b1f      	ldr	r3, [pc, #124]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810892a:	0c1b      	lsrs	r3, r3, #16
 810892c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108930:	ee07 3a90 	vmov	s15, r3
 8108934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810893c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108940:	edd7 6a07 	vldr	s13, [r7, #28]
 8108944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810894c:	ee17 2a90 	vmov	r2, s15
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8108954:	4b13      	ldr	r3, [pc, #76]	; (81089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8108956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108958:	0e1b      	lsrs	r3, r3, #24
 810895a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810895e:	ee07 3a90 	vmov	s15, r3
 8108962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810896a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810896e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810897a:	ee17 2a90 	vmov	r2, s15
 810897e:	687b      	ldr	r3, [r7, #4]
 8108980:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8108982:	e008      	b.n	8108996 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8108984:	687b      	ldr	r3, [r7, #4]
 8108986:	2200      	movs	r2, #0
 8108988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810898a:	687b      	ldr	r3, [r7, #4]
 810898c:	2200      	movs	r2, #0
 810898e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8108990:	687b      	ldr	r3, [r7, #4]
 8108992:	2200      	movs	r2, #0
 8108994:	609a      	str	r2, [r3, #8]
}
 8108996:	bf00      	nop
 8108998:	3724      	adds	r7, #36	; 0x24
 810899a:	46bd      	mov	sp, r7
 810899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089a0:	4770      	bx	lr
 81089a2:	bf00      	nop
 81089a4:	58024400 	.word	0x58024400
 81089a8:	03d09000 	.word	0x03d09000
 81089ac:	46000000 	.word	0x46000000
 81089b0:	4c742400 	.word	0x4c742400
 81089b4:	4a742400 	.word	0x4a742400
 81089b8:	4bbebc20 	.word	0x4bbebc20

081089bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81089bc:	b480      	push	{r7}
 81089be:	b089      	sub	sp, #36	; 0x24
 81089c0:	af00      	add	r7, sp, #0
 81089c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81089c4:	4ba1      	ldr	r3, [pc, #644]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089c8:	f003 0303 	and.w	r3, r3, #3
 81089cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81089ce:	4b9f      	ldr	r3, [pc, #636]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81089d2:	0d1b      	lsrs	r3, r3, #20
 81089d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81089d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81089da:	4b9c      	ldr	r3, [pc, #624]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089de:	0a1b      	lsrs	r3, r3, #8
 81089e0:	f003 0301 	and.w	r3, r3, #1
 81089e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81089e6:	4b99      	ldr	r3, [pc, #612]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81089e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81089ea:	08db      	lsrs	r3, r3, #3
 81089ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81089f0:	693a      	ldr	r2, [r7, #16]
 81089f2:	fb02 f303 	mul.w	r3, r2, r3
 81089f6:	ee07 3a90 	vmov	s15, r3
 81089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81089fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8108a02:	697b      	ldr	r3, [r7, #20]
 8108a04:	2b00      	cmp	r3, #0
 8108a06:	f000 8111 	beq.w	8108c2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8108a0a:	69bb      	ldr	r3, [r7, #24]
 8108a0c:	2b02      	cmp	r3, #2
 8108a0e:	f000 8083 	beq.w	8108b18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8108a12:	69bb      	ldr	r3, [r7, #24]
 8108a14:	2b02      	cmp	r3, #2
 8108a16:	f200 80a1 	bhi.w	8108b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8108a1a:	69bb      	ldr	r3, [r7, #24]
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d003      	beq.n	8108a28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8108a20:	69bb      	ldr	r3, [r7, #24]
 8108a22:	2b01      	cmp	r3, #1
 8108a24:	d056      	beq.n	8108ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8108a26:	e099      	b.n	8108b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a28:	4b88      	ldr	r3, [pc, #544]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a2a:	681b      	ldr	r3, [r3, #0]
 8108a2c:	f003 0320 	and.w	r3, r3, #32
 8108a30:	2b00      	cmp	r3, #0
 8108a32:	d02d      	beq.n	8108a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108a34:	4b85      	ldr	r3, [pc, #532]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a36:	681b      	ldr	r3, [r3, #0]
 8108a38:	08db      	lsrs	r3, r3, #3
 8108a3a:	f003 0303 	and.w	r3, r3, #3
 8108a3e:	4a84      	ldr	r2, [pc, #528]	; (8108c50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8108a40:	fa22 f303 	lsr.w	r3, r2, r3
 8108a44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108a46:	68bb      	ldr	r3, [r7, #8]
 8108a48:	ee07 3a90 	vmov	s15, r3
 8108a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a50:	697b      	ldr	r3, [r7, #20]
 8108a52:	ee07 3a90 	vmov	s15, r3
 8108a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108a5e:	4b7b      	ldr	r3, [pc, #492]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108a66:	ee07 3a90 	vmov	s15, r3
 8108a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108a72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8108c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108a8e:	e087      	b.n	8108ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108a90:	697b      	ldr	r3, [r7, #20]
 8108a92:	ee07 3a90 	vmov	s15, r3
 8108a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8108c58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8108a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108aa2:	4b6a      	ldr	r3, [pc, #424]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108aaa:	ee07 3a90 	vmov	s15, r3
 8108aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8108ab6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8108c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108ad2:	e065      	b.n	8108ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108ad4:	697b      	ldr	r3, [r7, #20]
 8108ad6:	ee07 3a90 	vmov	s15, r3
 8108ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ade:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8108c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108ae6:	4b59      	ldr	r3, [pc, #356]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108aee:	ee07 3a90 	vmov	s15, r3
 8108af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8108afa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8108c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b16:	e043      	b.n	8108ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108b18:	697b      	ldr	r3, [r7, #20]
 8108b1a:	ee07 3a90 	vmov	s15, r3
 8108b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8108c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8108b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b2a:	4b48      	ldr	r3, [pc, #288]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b32:	ee07 3a90 	vmov	s15, r3
 8108b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8108c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b5a:	e021      	b.n	8108ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108b5c:	697b      	ldr	r3, [r7, #20]
 8108b5e:	ee07 3a90 	vmov	s15, r3
 8108b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108b66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8108c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108b6e:	4b37      	ldr	r3, [pc, #220]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108b76:	ee07 3a90 	vmov	s15, r3
 8108b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108b82:	eddf 5a34 	vldr	s11, [pc, #208]	; 8108c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108b9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108ba0:	4b2a      	ldr	r3, [pc, #168]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108ba4:	0a5b      	lsrs	r3, r3, #9
 8108ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108baa:	ee07 3a90 	vmov	s15, r3
 8108bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8108bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108bc6:	ee17 2a90 	vmov	r2, s15
 8108bca:	687b      	ldr	r3, [r7, #4]
 8108bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8108bce:	4b1f      	ldr	r3, [pc, #124]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108bd2:	0c1b      	lsrs	r3, r3, #16
 8108bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108bd8:	ee07 3a90 	vmov	s15, r3
 8108bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108be0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8108bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108bf4:	ee17 2a90 	vmov	r2, s15
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8108bfc:	4b13      	ldr	r3, [pc, #76]	; (8108c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8108c00:	0e1b      	lsrs	r3, r3, #24
 8108c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108c06:	ee07 3a90 	vmov	s15, r3
 8108c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8108c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108c22:	ee17 2a90 	vmov	r2, s15
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8108c2a:	e008      	b.n	8108c3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	2200      	movs	r2, #0
 8108c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	2200      	movs	r2, #0
 8108c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8108c38:	687b      	ldr	r3, [r7, #4]
 8108c3a:	2200      	movs	r2, #0
 8108c3c:	609a      	str	r2, [r3, #8]
}
 8108c3e:	bf00      	nop
 8108c40:	3724      	adds	r7, #36	; 0x24
 8108c42:	46bd      	mov	sp, r7
 8108c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c48:	4770      	bx	lr
 8108c4a:	bf00      	nop
 8108c4c:	58024400 	.word	0x58024400
 8108c50:	03d09000 	.word	0x03d09000
 8108c54:	46000000 	.word	0x46000000
 8108c58:	4c742400 	.word	0x4c742400
 8108c5c:	4a742400 	.word	0x4a742400
 8108c60:	4bbebc20 	.word	0x4bbebc20

08108c64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8108c64:	b480      	push	{r7}
 8108c66:	b089      	sub	sp, #36	; 0x24
 8108c68:	af00      	add	r7, sp, #0
 8108c6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8108c6c:	4ba0      	ldr	r3, [pc, #640]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c70:	f003 0303 	and.w	r3, r3, #3
 8108c74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108c76:	4b9e      	ldr	r3, [pc, #632]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c7a:	091b      	lsrs	r3, r3, #4
 8108c7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8108c80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108c82:	4b9b      	ldr	r3, [pc, #620]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c86:	f003 0301 	and.w	r3, r3, #1
 8108c8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8108c8c:	4b98      	ldr	r3, [pc, #608]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8108c90:	08db      	lsrs	r3, r3, #3
 8108c92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108c96:	693a      	ldr	r2, [r7, #16]
 8108c98:	fb02 f303 	mul.w	r3, r2, r3
 8108c9c:	ee07 3a90 	vmov	s15, r3
 8108ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108ca4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108ca8:	697b      	ldr	r3, [r7, #20]
 8108caa:	2b00      	cmp	r3, #0
 8108cac:	f000 8111 	beq.w	8108ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108cb0:	69bb      	ldr	r3, [r7, #24]
 8108cb2:	2b02      	cmp	r3, #2
 8108cb4:	f000 8083 	beq.w	8108dbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108cb8:	69bb      	ldr	r3, [r7, #24]
 8108cba:	2b02      	cmp	r3, #2
 8108cbc:	f200 80a1 	bhi.w	8108e02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108cc0:	69bb      	ldr	r3, [r7, #24]
 8108cc2:	2b00      	cmp	r3, #0
 8108cc4:	d003      	beq.n	8108cce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108cc6:	69bb      	ldr	r3, [r7, #24]
 8108cc8:	2b01      	cmp	r3, #1
 8108cca:	d056      	beq.n	8108d7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8108ccc:	e099      	b.n	8108e02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108cce:	4b88      	ldr	r3, [pc, #544]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	f003 0320 	and.w	r3, r3, #32
 8108cd6:	2b00      	cmp	r3, #0
 8108cd8:	d02d      	beq.n	8108d36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8108cda:	4b85      	ldr	r3, [pc, #532]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108cdc:	681b      	ldr	r3, [r3, #0]
 8108cde:	08db      	lsrs	r3, r3, #3
 8108ce0:	f003 0303 	and.w	r3, r3, #3
 8108ce4:	4a83      	ldr	r2, [pc, #524]	; (8108ef4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8108cea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108cec:	68bb      	ldr	r3, [r7, #8]
 8108cee:	ee07 3a90 	vmov	s15, r3
 8108cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108cf6:	697b      	ldr	r3, [r7, #20]
 8108cf8:	ee07 3a90 	vmov	s15, r3
 8108cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d04:	4b7a      	ldr	r3, [pc, #488]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d0c:	ee07 3a90 	vmov	s15, r3
 8108d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d14:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d18:	eddf 5a77 	vldr	s11, [pc, #476]	; 8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d30:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8108d34:	e087      	b.n	8108e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108d36:	697b      	ldr	r3, [r7, #20]
 8108d38:	ee07 3a90 	vmov	s15, r3
 8108d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8108efc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d48:	4b69      	ldr	r3, [pc, #420]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d50:	ee07 3a90 	vmov	s15, r3
 8108d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d58:	ed97 6a03 	vldr	s12, [r7, #12]
 8108d5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108d68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108d74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108d78:	e065      	b.n	8108e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108d7a:	697b      	ldr	r3, [r7, #20]
 8108d7c:	ee07 3a90 	vmov	s15, r3
 8108d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108d84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8108f00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108d88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108d8c:	4b58      	ldr	r3, [pc, #352]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108d94:	ee07 3a90 	vmov	s15, r3
 8108d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108d9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108da0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108da4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108da8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108dac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108db0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108db8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108dbc:	e043      	b.n	8108e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108dbe:	697b      	ldr	r3, [r7, #20]
 8108dc0:	ee07 3a90 	vmov	s15, r3
 8108dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108dc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8108f04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108dcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108dd0:	4b47      	ldr	r3, [pc, #284]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108dd8:	ee07 3a90 	vmov	s15, r3
 8108ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108de0:	ed97 6a03 	vldr	s12, [r7, #12]
 8108de4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108de8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108df4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108df8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108dfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e00:	e021      	b.n	8108e46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108e02:	697b      	ldr	r3, [r7, #20]
 8108e04:	ee07 3a90 	vmov	s15, r3
 8108e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8108efc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8108e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108e14:	4b36      	ldr	r3, [pc, #216]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108e1c:	ee07 3a90 	vmov	s15, r3
 8108e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108e24:	ed97 6a03 	vldr	s12, [r7, #12]
 8108e28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8108ef8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108e2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108e30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108e34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8108e38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108e40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108e44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8108e46:	4b2a      	ldr	r3, [pc, #168]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e4a:	0a5b      	lsrs	r3, r3, #9
 8108e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108e50:	ee07 3a90 	vmov	s15, r3
 8108e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8108e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108e6c:	ee17 2a90 	vmov	r2, s15
 8108e70:	687b      	ldr	r3, [r7, #4]
 8108e72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108e74:	4b1e      	ldr	r3, [pc, #120]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108e78:	0c1b      	lsrs	r3, r3, #16
 8108e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108e7e:	ee07 3a90 	vmov	s15, r3
 8108e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108e9a:	ee17 2a90 	vmov	r2, s15
 8108e9e:	687b      	ldr	r3, [r7, #4]
 8108ea0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108ea2:	4b13      	ldr	r3, [pc, #76]	; (8108ef0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108ea6:	0e1b      	lsrs	r3, r3, #24
 8108ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8108eac:	ee07 3a90 	vmov	s15, r3
 8108eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108eb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8108eb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108ebc:	edd7 6a07 	vldr	s13, [r7, #28]
 8108ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108ec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108ec8:	ee17 2a90 	vmov	r2, s15
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108ed0:	e008      	b.n	8108ee4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108ed2:	687b      	ldr	r3, [r7, #4]
 8108ed4:	2200      	movs	r2, #0
 8108ed6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	2200      	movs	r2, #0
 8108edc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8108ede:	687b      	ldr	r3, [r7, #4]
 8108ee0:	2200      	movs	r2, #0
 8108ee2:	609a      	str	r2, [r3, #8]
}
 8108ee4:	bf00      	nop
 8108ee6:	3724      	adds	r7, #36	; 0x24
 8108ee8:	46bd      	mov	sp, r7
 8108eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108eee:	4770      	bx	lr
 8108ef0:	58024400 	.word	0x58024400
 8108ef4:	03d09000 	.word	0x03d09000
 8108ef8:	46000000 	.word	0x46000000
 8108efc:	4c742400 	.word	0x4c742400
 8108f00:	4a742400 	.word	0x4a742400
 8108f04:	4bbebc20 	.word	0x4bbebc20

08108f08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108f08:	b580      	push	{r7, lr}
 8108f0a:	b084      	sub	sp, #16
 8108f0c:	af00      	add	r7, sp, #0
 8108f0e:	6078      	str	r0, [r7, #4]
 8108f10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108f12:	2300      	movs	r3, #0
 8108f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108f16:	4b54      	ldr	r3, [pc, #336]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f1a:	f003 0303 	and.w	r3, r3, #3
 8108f1e:	2b03      	cmp	r3, #3
 8108f20:	d101      	bne.n	8108f26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8108f22:	2301      	movs	r3, #1
 8108f24:	e09b      	b.n	810905e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108f26:	4b50      	ldr	r3, [pc, #320]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f28:	681b      	ldr	r3, [r3, #0]
 8108f2a:	4a4f      	ldr	r2, [pc, #316]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8108f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108f32:	f7f9 f98d 	bl	8102250 <HAL_GetTick>
 8108f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108f38:	e008      	b.n	8108f4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8108f3a:	f7f9 f989 	bl	8102250 <HAL_GetTick>
 8108f3e:	4602      	mov	r2, r0
 8108f40:	68bb      	ldr	r3, [r7, #8]
 8108f42:	1ad3      	subs	r3, r2, r3
 8108f44:	2b02      	cmp	r3, #2
 8108f46:	d901      	bls.n	8108f4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108f48:	2303      	movs	r3, #3
 8108f4a:	e088      	b.n	810905e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8108f4c:	4b46      	ldr	r3, [pc, #280]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f4e:	681b      	ldr	r3, [r3, #0]
 8108f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8108f54:	2b00      	cmp	r3, #0
 8108f56:	d1f0      	bne.n	8108f3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8108f58:	4b43      	ldr	r3, [pc, #268]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8108f60:	687b      	ldr	r3, [r7, #4]
 8108f62:	681b      	ldr	r3, [r3, #0]
 8108f64:	031b      	lsls	r3, r3, #12
 8108f66:	4940      	ldr	r1, [pc, #256]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f68:	4313      	orrs	r3, r2
 8108f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8108f6c:	687b      	ldr	r3, [r7, #4]
 8108f6e:	685b      	ldr	r3, [r3, #4]
 8108f70:	3b01      	subs	r3, #1
 8108f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108f76:	687b      	ldr	r3, [r7, #4]
 8108f78:	689b      	ldr	r3, [r3, #8]
 8108f7a:	3b01      	subs	r3, #1
 8108f7c:	025b      	lsls	r3, r3, #9
 8108f7e:	b29b      	uxth	r3, r3
 8108f80:	431a      	orrs	r2, r3
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	68db      	ldr	r3, [r3, #12]
 8108f86:	3b01      	subs	r3, #1
 8108f88:	041b      	lsls	r3, r3, #16
 8108f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8108f8e:	431a      	orrs	r2, r3
 8108f90:	687b      	ldr	r3, [r7, #4]
 8108f92:	691b      	ldr	r3, [r3, #16]
 8108f94:	3b01      	subs	r3, #1
 8108f96:	061b      	lsls	r3, r3, #24
 8108f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8108f9c:	4932      	ldr	r1, [pc, #200]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108f9e:	4313      	orrs	r3, r2
 8108fa0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108fa2:	4b31      	ldr	r3, [pc, #196]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	695b      	ldr	r3, [r3, #20]
 8108fae:	492e      	ldr	r1, [pc, #184]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fb0:	4313      	orrs	r3, r2
 8108fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108fb4:	4b2c      	ldr	r3, [pc, #176]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fb8:	f023 0220 	bic.w	r2, r3, #32
 8108fbc:	687b      	ldr	r3, [r7, #4]
 8108fbe:	699b      	ldr	r3, [r3, #24]
 8108fc0:	4929      	ldr	r1, [pc, #164]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fc2:	4313      	orrs	r3, r2
 8108fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108fc6:	4b28      	ldr	r3, [pc, #160]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fca:	4a27      	ldr	r2, [pc, #156]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fcc:	f023 0310 	bic.w	r3, r3, #16
 8108fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108fd2:	4b25      	ldr	r3, [pc, #148]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8108fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108fda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8108fde:	687a      	ldr	r2, [r7, #4]
 8108fe0:	69d2      	ldr	r2, [r2, #28]
 8108fe2:	00d2      	lsls	r2, r2, #3
 8108fe4:	4920      	ldr	r1, [pc, #128]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fe6:	4313      	orrs	r3, r2
 8108fe8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108fea:	4b1f      	ldr	r3, [pc, #124]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108fee:	4a1e      	ldr	r2, [pc, #120]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108ff0:	f043 0310 	orr.w	r3, r3, #16
 8108ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108ff6:	683b      	ldr	r3, [r7, #0]
 8108ff8:	2b00      	cmp	r3, #0
 8108ffa:	d106      	bne.n	810900a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108ffc:	4b1a      	ldr	r3, [pc, #104]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8108ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109000:	4a19      	ldr	r2, [pc, #100]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109002:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8109006:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109008:	e00f      	b.n	810902a <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810900a:	683b      	ldr	r3, [r7, #0]
 810900c:	2b01      	cmp	r3, #1
 810900e:	d106      	bne.n	810901e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8109010:	4b15      	ldr	r3, [pc, #84]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109014:	4a14      	ldr	r2, [pc, #80]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810901a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810901c:	e005      	b.n	810902a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810901e:	4b12      	ldr	r3, [pc, #72]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109022:	4a11      	ldr	r2, [pc, #68]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8109028:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810902a:	4b0f      	ldr	r3, [pc, #60]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 810902c:	681b      	ldr	r3, [r3, #0]
 810902e:	4a0e      	ldr	r2, [pc, #56]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109030:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8109034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109036:	f7f9 f90b 	bl	8102250 <HAL_GetTick>
 810903a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810903c:	e008      	b.n	8109050 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810903e:	f7f9 f907 	bl	8102250 <HAL_GetTick>
 8109042:	4602      	mov	r2, r0
 8109044:	68bb      	ldr	r3, [r7, #8]
 8109046:	1ad3      	subs	r3, r2, r3
 8109048:	2b02      	cmp	r3, #2
 810904a:	d901      	bls.n	8109050 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810904c:	2303      	movs	r3, #3
 810904e:	e006      	b.n	810905e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8109050:	4b05      	ldr	r3, [pc, #20]	; (8109068 <RCCEx_PLL2_Config+0x160>)
 8109052:	681b      	ldr	r3, [r3, #0]
 8109054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8109058:	2b00      	cmp	r3, #0
 810905a:	d0f0      	beq.n	810903e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810905c:	7bfb      	ldrb	r3, [r7, #15]
}
 810905e:	4618      	mov	r0, r3
 8109060:	3710      	adds	r7, #16
 8109062:	46bd      	mov	sp, r7
 8109064:	bd80      	pop	{r7, pc}
 8109066:	bf00      	nop
 8109068:	58024400 	.word	0x58024400

0810906c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810906c:	b580      	push	{r7, lr}
 810906e:	b084      	sub	sp, #16
 8109070:	af00      	add	r7, sp, #0
 8109072:	6078      	str	r0, [r7, #4]
 8109074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8109076:	2300      	movs	r3, #0
 8109078:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810907a:	4b54      	ldr	r3, [pc, #336]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810907e:	f003 0303 	and.w	r3, r3, #3
 8109082:	2b03      	cmp	r3, #3
 8109084:	d101      	bne.n	810908a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8109086:	2301      	movs	r3, #1
 8109088:	e09b      	b.n	81091c2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810908a:	4b50      	ldr	r3, [pc, #320]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810908c:	681b      	ldr	r3, [r3, #0]
 810908e:	4a4f      	ldr	r2, [pc, #316]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8109096:	f7f9 f8db 	bl	8102250 <HAL_GetTick>
 810909a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810909c:	e008      	b.n	81090b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810909e:	f7f9 f8d7 	bl	8102250 <HAL_GetTick>
 81090a2:	4602      	mov	r2, r0
 81090a4:	68bb      	ldr	r3, [r7, #8]
 81090a6:	1ad3      	subs	r3, r2, r3
 81090a8:	2b02      	cmp	r3, #2
 81090aa:	d901      	bls.n	81090b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81090ac:	2303      	movs	r3, #3
 81090ae:	e088      	b.n	81091c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81090b0:	4b46      	ldr	r3, [pc, #280]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 81090b2:	681b      	ldr	r3, [r3, #0]
 81090b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81090b8:	2b00      	cmp	r3, #0
 81090ba:	d1f0      	bne.n	810909e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81090bc:	4b43      	ldr	r3, [pc, #268]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 81090be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81090c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81090c4:	687b      	ldr	r3, [r7, #4]
 81090c6:	681b      	ldr	r3, [r3, #0]
 81090c8:	051b      	lsls	r3, r3, #20
 81090ca:	4940      	ldr	r1, [pc, #256]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 81090cc:	4313      	orrs	r3, r2
 81090ce:	628b      	str	r3, [r1, #40]	; 0x28
 81090d0:	687b      	ldr	r3, [r7, #4]
 81090d2:	685b      	ldr	r3, [r3, #4]
 81090d4:	3b01      	subs	r3, #1
 81090d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	689b      	ldr	r3, [r3, #8]
 81090de:	3b01      	subs	r3, #1
 81090e0:	025b      	lsls	r3, r3, #9
 81090e2:	b29b      	uxth	r3, r3
 81090e4:	431a      	orrs	r2, r3
 81090e6:	687b      	ldr	r3, [r7, #4]
 81090e8:	68db      	ldr	r3, [r3, #12]
 81090ea:	3b01      	subs	r3, #1
 81090ec:	041b      	lsls	r3, r3, #16
 81090ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81090f2:	431a      	orrs	r2, r3
 81090f4:	687b      	ldr	r3, [r7, #4]
 81090f6:	691b      	ldr	r3, [r3, #16]
 81090f8:	3b01      	subs	r3, #1
 81090fa:	061b      	lsls	r3, r3, #24
 81090fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8109100:	4932      	ldr	r1, [pc, #200]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109102:	4313      	orrs	r3, r2
 8109104:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8109106:	4b31      	ldr	r3, [pc, #196]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810910a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810910e:	687b      	ldr	r3, [r7, #4]
 8109110:	695b      	ldr	r3, [r3, #20]
 8109112:	492e      	ldr	r1, [pc, #184]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109114:	4313      	orrs	r3, r2
 8109116:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8109118:	4b2c      	ldr	r3, [pc, #176]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810911a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810911c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	699b      	ldr	r3, [r3, #24]
 8109124:	4929      	ldr	r1, [pc, #164]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109126:	4313      	orrs	r3, r2
 8109128:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810912a:	4b28      	ldr	r3, [pc, #160]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810912e:	4a27      	ldr	r2, [pc, #156]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8109134:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8109136:	4b25      	ldr	r3, [pc, #148]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810913a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810913e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8109142:	687a      	ldr	r2, [r7, #4]
 8109144:	69d2      	ldr	r2, [r2, #28]
 8109146:	00d2      	lsls	r2, r2, #3
 8109148:	4920      	ldr	r1, [pc, #128]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810914a:	4313      	orrs	r3, r2
 810914c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810914e:	4b1f      	ldr	r3, [pc, #124]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109152:	4a1e      	ldr	r2, [pc, #120]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8109158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810915a:	683b      	ldr	r3, [r7, #0]
 810915c:	2b00      	cmp	r3, #0
 810915e:	d106      	bne.n	810916e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8109160:	4b1a      	ldr	r3, [pc, #104]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109164:	4a19      	ldr	r2, [pc, #100]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810916a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810916c:	e00f      	b.n	810918e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810916e:	683b      	ldr	r3, [r7, #0]
 8109170:	2b01      	cmp	r3, #1
 8109172:	d106      	bne.n	8109182 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8109174:	4b15      	ldr	r3, [pc, #84]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109178:	4a14      	ldr	r2, [pc, #80]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 810917a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810917e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8109180:	e005      	b.n	810918e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8109182:	4b12      	ldr	r3, [pc, #72]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109186:	4a11      	ldr	r2, [pc, #68]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810918c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810918e:	4b0f      	ldr	r3, [pc, #60]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109190:	681b      	ldr	r3, [r3, #0]
 8109192:	4a0e      	ldr	r2, [pc, #56]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 8109194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810919a:	f7f9 f859 	bl	8102250 <HAL_GetTick>
 810919e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81091a0:	e008      	b.n	81091b4 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81091a2:	f7f9 f855 	bl	8102250 <HAL_GetTick>
 81091a6:	4602      	mov	r2, r0
 81091a8:	68bb      	ldr	r3, [r7, #8]
 81091aa:	1ad3      	subs	r3, r2, r3
 81091ac:	2b02      	cmp	r3, #2
 81091ae:	d901      	bls.n	81091b4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81091b0:	2303      	movs	r3, #3
 81091b2:	e006      	b.n	81091c2 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81091b4:	4b05      	ldr	r3, [pc, #20]	; (81091cc <RCCEx_PLL3_Config+0x160>)
 81091b6:	681b      	ldr	r3, [r3, #0]
 81091b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81091bc:	2b00      	cmp	r3, #0
 81091be:	d0f0      	beq.n	81091a2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81091c0:	7bfb      	ldrb	r3, [r7, #15]
}
 81091c2:	4618      	mov	r0, r3
 81091c4:	3710      	adds	r7, #16
 81091c6:	46bd      	mov	sp, r7
 81091c8:	bd80      	pop	{r7, pc}
 81091ca:	bf00      	nop
 81091cc:	58024400 	.word	0x58024400

081091d0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 81091d0:	b580      	push	{r7, lr}
 81091d2:	b08a      	sub	sp, #40	; 0x28
 81091d4:	af00      	add	r7, sp, #0
 81091d6:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 81091d8:	687b      	ldr	r3, [r7, #4]
 81091da:	2b00      	cmp	r3, #0
 81091dc:	d101      	bne.n	81091e2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81091de:	2301      	movs	r3, #1
 81091e0:	e290      	b.n	8109704 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81091e2:	f7f9 f865 	bl	81022b0 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81091e6:	687b      	ldr	r3, [r7, #4]
 81091e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81091ec:	2b01      	cmp	r3, #1
 81091ee:	d113      	bne.n	8109218 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81091f0:	687b      	ldr	r3, [r7, #4]
 81091f2:	681b      	ldr	r3, [r3, #0]
 81091f4:	4a96      	ldr	r2, [pc, #600]	; (8109450 <HAL_SAI_Init+0x280>)
 81091f6:	4293      	cmp	r3, r2
 81091f8:	d004      	beq.n	8109204 <HAL_SAI_Init+0x34>
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	681b      	ldr	r3, [r3, #0]
 81091fe:	4a95      	ldr	r2, [pc, #596]	; (8109454 <HAL_SAI_Init+0x284>)
 8109200:	4293      	cmp	r3, r2
 8109202:	d107      	bne.n	8109214 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8109204:	687b      	ldr	r3, [r7, #4]
 8109206:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8109208:	2b01      	cmp	r3, #1
 810920a:	d103      	bne.n	8109214 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 810920c:	687b      	ldr	r3, [r7, #4]
 810920e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8109210:	2b00      	cmp	r3, #0
 8109212:	d001      	beq.n	8109218 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8109214:	2301      	movs	r3, #1
 8109216:	e275      	b.n	8109704 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	681b      	ldr	r3, [r3, #0]
 810921c:	4a8c      	ldr	r2, [pc, #560]	; (8109450 <HAL_SAI_Init+0x280>)
 810921e:	4293      	cmp	r3, r2
 8109220:	d004      	beq.n	810922c <HAL_SAI_Init+0x5c>
 8109222:	687b      	ldr	r3, [r7, #4]
 8109224:	681b      	ldr	r3, [r3, #0]
 8109226:	4a8c      	ldr	r2, [pc, #560]	; (8109458 <HAL_SAI_Init+0x288>)
 8109228:	4293      	cmp	r3, r2
 810922a:	d102      	bne.n	8109232 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 810922c:	4b8b      	ldr	r3, [pc, #556]	; (810945c <HAL_SAI_Init+0x28c>)
 810922e:	61bb      	str	r3, [r7, #24]
 8109230:	e028      	b.n	8109284 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8109232:	687b      	ldr	r3, [r7, #4]
 8109234:	681b      	ldr	r3, [r3, #0]
 8109236:	4a8a      	ldr	r2, [pc, #552]	; (8109460 <HAL_SAI_Init+0x290>)
 8109238:	4293      	cmp	r3, r2
 810923a:	d004      	beq.n	8109246 <HAL_SAI_Init+0x76>
 810923c:	687b      	ldr	r3, [r7, #4]
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	4a88      	ldr	r2, [pc, #544]	; (8109464 <HAL_SAI_Init+0x294>)
 8109242:	4293      	cmp	r3, r2
 8109244:	d102      	bne.n	810924c <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 8109246:	4b88      	ldr	r3, [pc, #544]	; (8109468 <HAL_SAI_Init+0x298>)
 8109248:	61bb      	str	r3, [r7, #24]
 810924a:	e01b      	b.n	8109284 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 810924c:	687b      	ldr	r3, [r7, #4]
 810924e:	681b      	ldr	r3, [r3, #0]
 8109250:	4a86      	ldr	r2, [pc, #536]	; (810946c <HAL_SAI_Init+0x29c>)
 8109252:	4293      	cmp	r3, r2
 8109254:	d004      	beq.n	8109260 <HAL_SAI_Init+0x90>
 8109256:	687b      	ldr	r3, [r7, #4]
 8109258:	681b      	ldr	r3, [r3, #0]
 810925a:	4a85      	ldr	r2, [pc, #532]	; (8109470 <HAL_SAI_Init+0x2a0>)
 810925c:	4293      	cmp	r3, r2
 810925e:	d102      	bne.n	8109266 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8109260:	4b84      	ldr	r3, [pc, #528]	; (8109474 <HAL_SAI_Init+0x2a4>)
 8109262:	61bb      	str	r3, [r7, #24]
 8109264:	e00e      	b.n	8109284 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8109266:	687b      	ldr	r3, [r7, #4]
 8109268:	681b      	ldr	r3, [r3, #0]
 810926a:	4a7a      	ldr	r2, [pc, #488]	; (8109454 <HAL_SAI_Init+0x284>)
 810926c:	4293      	cmp	r3, r2
 810926e:	d004      	beq.n	810927a <HAL_SAI_Init+0xaa>
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	681b      	ldr	r3, [r3, #0]
 8109274:	4a80      	ldr	r2, [pc, #512]	; (8109478 <HAL_SAI_Init+0x2a8>)
 8109276:	4293      	cmp	r3, r2
 8109278:	d102      	bne.n	8109280 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810927a:	4b80      	ldr	r3, [pc, #512]	; (810947c <HAL_SAI_Init+0x2ac>)
 810927c:	61bb      	str	r3, [r7, #24]
 810927e:	e001      	b.n	8109284 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8109280:	2301      	movs	r3, #1
 8109282:	e23f      	b.n	8109704 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 810928a:	b2db      	uxtb	r3, r3
 810928c:	2b00      	cmp	r3, #0
 810928e:	d106      	bne.n	810929e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8109290:	687b      	ldr	r3, [r7, #4]
 8109292:	2200      	movs	r2, #0
 8109294:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8109298:	6878      	ldr	r0, [r7, #4]
 810929a:	f7f8 fb8b 	bl	81019b4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810929e:	6878      	ldr	r0, [r7, #4]
 81092a0:	f000 fb2c 	bl	81098fc <SAI_Disable>
 81092a4:	4603      	mov	r3, r0
 81092a6:	2b00      	cmp	r3, #0
 81092a8:	d001      	beq.n	81092ae <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 81092aa:	2301      	movs	r3, #1
 81092ac:	e22a      	b.n	8109704 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 81092ae:	687b      	ldr	r3, [r7, #4]
 81092b0:	2202      	movs	r2, #2
 81092b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 81092b6:	687b      	ldr	r3, [r7, #4]
 81092b8:	68db      	ldr	r3, [r3, #12]
 81092ba:	2b02      	cmp	r3, #2
 81092bc:	d00c      	beq.n	81092d8 <HAL_SAI_Init+0x108>
 81092be:	2b02      	cmp	r3, #2
 81092c0:	d80d      	bhi.n	81092de <HAL_SAI_Init+0x10e>
 81092c2:	2b00      	cmp	r3, #0
 81092c4:	d002      	beq.n	81092cc <HAL_SAI_Init+0xfc>
 81092c6:	2b01      	cmp	r3, #1
 81092c8:	d003      	beq.n	81092d2 <HAL_SAI_Init+0x102>
 81092ca:	e008      	b.n	81092de <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 81092cc:	2300      	movs	r3, #0
 81092ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81092d0:	e008      	b.n	81092e4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 81092d2:	2310      	movs	r3, #16
 81092d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81092d6:	e005      	b.n	81092e4 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 81092d8:	2320      	movs	r3, #32
 81092da:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81092dc:	e002      	b.n	81092e4 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81092de:	2300      	movs	r3, #0
 81092e0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81092e2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	689b      	ldr	r3, [r3, #8]
 81092e8:	2b05      	cmp	r3, #5
 81092ea:	d832      	bhi.n	8109352 <HAL_SAI_Init+0x182>
 81092ec:	a201      	add	r2, pc, #4	; (adr r2, 81092f4 <HAL_SAI_Init+0x124>)
 81092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81092f2:	bf00      	nop
 81092f4:	0810930d 	.word	0x0810930d
 81092f8:	08109313 	.word	0x08109313
 81092fc:	0810931b 	.word	0x0810931b
 8109300:	08109323 	.word	0x08109323
 8109304:	08109333 	.word	0x08109333
 8109308:	08109343 	.word	0x08109343
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 810930c:	2300      	movs	r3, #0
 810930e:	61fb      	str	r3, [r7, #28]
      break;
 8109310:	e022      	b.n	8109358 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8109312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8109316:	61fb      	str	r3, [r7, #28]
      break;
 8109318:	e01e      	b.n	8109358 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810931a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810931e:	61fb      	str	r3, [r7, #28]
      break;
 8109320:	e01a      	b.n	8109358 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8109322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109326:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8109328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810932a:	f043 0301 	orr.w	r3, r3, #1
 810932e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8109330:	e012      	b.n	8109358 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8109332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109336:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8109338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810933a:	f043 0302 	orr.w	r3, r3, #2
 810933e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8109340:	e00a      	b.n	8109358 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8109342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8109346:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8109348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810934a:	f043 0303 	orr.w	r3, r3, #3
 810934e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8109350:	e002      	b.n	8109358 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8109352:	2300      	movs	r3, #0
 8109354:	61fb      	str	r3, [r7, #28]
      break;
 8109356:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8109358:	69bb      	ldr	r3, [r7, #24]
 810935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810935c:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 810935e:	687b      	ldr	r3, [r7, #4]
 8109360:	6a1b      	ldr	r3, [r3, #32]
 8109362:	2b00      	cmp	r3, #0
 8109364:	f000 80c5 	beq.w	81094f2 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8109368:	2300      	movs	r3, #0
 810936a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810936c:	687b      	ldr	r3, [r7, #4]
 810936e:	681b      	ldr	r3, [r3, #0]
 8109370:	4a37      	ldr	r2, [pc, #220]	; (8109450 <HAL_SAI_Init+0x280>)
 8109372:	4293      	cmp	r3, r2
 8109374:	d004      	beq.n	8109380 <HAL_SAI_Init+0x1b0>
 8109376:	687b      	ldr	r3, [r7, #4]
 8109378:	681b      	ldr	r3, [r3, #0]
 810937a:	4a37      	ldr	r2, [pc, #220]	; (8109458 <HAL_SAI_Init+0x288>)
 810937c:	4293      	cmp	r3, r2
 810937e:	d106      	bne.n	810938e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8109380:	f44f 7080 	mov.w	r0, #256	; 0x100
 8109384:	f04f 0100 	mov.w	r1, #0
 8109388:	f7fe fc2e 	bl	8107be8 <HAL_RCCEx_GetPeriphCLKFreq>
 810938c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	4a33      	ldr	r2, [pc, #204]	; (8109460 <HAL_SAI_Init+0x290>)
 8109394:	4293      	cmp	r3, r2
 8109396:	d004      	beq.n	81093a2 <HAL_SAI_Init+0x1d2>
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	681b      	ldr	r3, [r3, #0]
 810939c:	4a31      	ldr	r2, [pc, #196]	; (8109464 <HAL_SAI_Init+0x294>)
 810939e:	4293      	cmp	r3, r2
 81093a0:	d106      	bne.n	81093b0 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81093a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 81093a6:	f04f 0100 	mov.w	r1, #0
 81093aa:	f7fe fc1d 	bl	8107be8 <HAL_RCCEx_GetPeriphCLKFreq>
 81093ae:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	681b      	ldr	r3, [r3, #0]
 81093b4:	4a2d      	ldr	r2, [pc, #180]	; (810946c <HAL_SAI_Init+0x29c>)
 81093b6:	4293      	cmp	r3, r2
 81093b8:	d004      	beq.n	81093c4 <HAL_SAI_Init+0x1f4>
 81093ba:	687b      	ldr	r3, [r7, #4]
 81093bc:	681b      	ldr	r3, [r3, #0]
 81093be:	4a2c      	ldr	r2, [pc, #176]	; (8109470 <HAL_SAI_Init+0x2a0>)
 81093c0:	4293      	cmp	r3, r2
 81093c2:	d106      	bne.n	81093d2 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 81093c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 81093c8:	f04f 0100 	mov.w	r1, #0
 81093cc:	f7fe fc0c 	bl	8107be8 <HAL_RCCEx_GetPeriphCLKFreq>
 81093d0:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 81093d2:	687b      	ldr	r3, [r7, #4]
 81093d4:	681b      	ldr	r3, [r3, #0]
 81093d6:	4a1f      	ldr	r2, [pc, #124]	; (8109454 <HAL_SAI_Init+0x284>)
 81093d8:	4293      	cmp	r3, r2
 81093da:	d106      	bne.n	81093ea <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81093dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 81093e0:	f04f 0100 	mov.w	r1, #0
 81093e4:	f7fe fc00 	bl	8107be8 <HAL_RCCEx_GetPeriphCLKFreq>
 81093e8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81093ea:	687b      	ldr	r3, [r7, #4]
 81093ec:	681b      	ldr	r3, [r3, #0]
 81093ee:	4a22      	ldr	r2, [pc, #136]	; (8109478 <HAL_SAI_Init+0x2a8>)
 81093f0:	4293      	cmp	r3, r2
 81093f2:	d106      	bne.n	8109402 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81093f4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81093f8:	f04f 0100 	mov.w	r1, #0
 81093fc:	f7fe fbf4 	bl	8107be8 <HAL_RCCEx_GetPeriphCLKFreq>
 8109400:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8109402:	687b      	ldr	r3, [r7, #4]
 8109404:	699b      	ldr	r3, [r3, #24]
 8109406:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810940a:	d139      	bne.n	8109480 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109410:	2b04      	cmp	r3, #4
 8109412:	d102      	bne.n	810941a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8109414:	2340      	movs	r3, #64	; 0x40
 8109416:	60fb      	str	r3, [r7, #12]
 8109418:	e00a      	b.n	8109430 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810941a:	687b      	ldr	r3, [r7, #4]
 810941c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810941e:	2b08      	cmp	r3, #8
 8109420:	d103      	bne.n	810942a <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8109422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8109426:	60fb      	str	r3, [r7, #12]
 8109428:	e002      	b.n	8109430 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810942a:	687b      	ldr	r3, [r7, #4]
 810942c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810942e:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8109430:	697a      	ldr	r2, [r7, #20]
 8109432:	4613      	mov	r3, r2
 8109434:	009b      	lsls	r3, r3, #2
 8109436:	4413      	add	r3, r2
 8109438:	005b      	lsls	r3, r3, #1
 810943a:	4619      	mov	r1, r3
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	6a1b      	ldr	r3, [r3, #32]
 8109440:	68fa      	ldr	r2, [r7, #12]
 8109442:	fb02 f303 	mul.w	r3, r2, r3
 8109446:	fbb1 f3f3 	udiv	r3, r1, r3
 810944a:	613b      	str	r3, [r7, #16]
 810944c:	e030      	b.n	81094b0 <HAL_SAI_Init+0x2e0>
 810944e:	bf00      	nop
 8109450:	40015804 	.word	0x40015804
 8109454:	58005404 	.word	0x58005404
 8109458:	40015824 	.word	0x40015824
 810945c:	40015800 	.word	0x40015800
 8109460:	40015c04 	.word	0x40015c04
 8109464:	40015c24 	.word	0x40015c24
 8109468:	40015c00 	.word	0x40015c00
 810946c:	40016004 	.word	0x40016004
 8109470:	40016024 	.word	0x40016024
 8109474:	40016000 	.word	0x40016000
 8109478:	58005424 	.word	0x58005424
 810947c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8109488:	d101      	bne.n	810948e <HAL_SAI_Init+0x2be>
 810948a:	2302      	movs	r3, #2
 810948c:	e000      	b.n	8109490 <HAL_SAI_Init+0x2c0>
 810948e:	2301      	movs	r3, #1
 8109490:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8109492:	697a      	ldr	r2, [r7, #20]
 8109494:	4613      	mov	r3, r2
 8109496:	009b      	lsls	r3, r3, #2
 8109498:	4413      	add	r3, r2
 810949a:	005b      	lsls	r3, r3, #1
 810949c:	4619      	mov	r1, r3
 810949e:	687b      	ldr	r3, [r7, #4]
 81094a0:	6a1b      	ldr	r3, [r3, #32]
 81094a2:	68ba      	ldr	r2, [r7, #8]
 81094a4:	fb02 f303 	mul.w	r3, r2, r3
 81094a8:	021b      	lsls	r3, r3, #8
 81094aa:	fbb1 f3f3 	udiv	r3, r1, r3
 81094ae:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 81094b0:	693b      	ldr	r3, [r7, #16]
 81094b2:	4a96      	ldr	r2, [pc, #600]	; (810970c <HAL_SAI_Init+0x53c>)
 81094b4:	fba2 2303 	umull	r2, r3, r2, r3
 81094b8:	08da      	lsrs	r2, r3, #3
 81094ba:	687b      	ldr	r3, [r7, #4]
 81094bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 81094be:	6939      	ldr	r1, [r7, #16]
 81094c0:	4b92      	ldr	r3, [pc, #584]	; (810970c <HAL_SAI_Init+0x53c>)
 81094c2:	fba3 2301 	umull	r2, r3, r3, r1
 81094c6:	08da      	lsrs	r2, r3, #3
 81094c8:	4613      	mov	r3, r2
 81094ca:	009b      	lsls	r3, r3, #2
 81094cc:	4413      	add	r3, r2
 81094ce:	005b      	lsls	r3, r3, #1
 81094d0:	1aca      	subs	r2, r1, r3
 81094d2:	2a08      	cmp	r2, #8
 81094d4:	d904      	bls.n	81094e0 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 81094d6:	687b      	ldr	r3, [r7, #4]
 81094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094da:	1c5a      	adds	r2, r3, #1
 81094dc:	687b      	ldr	r3, [r7, #4]
 81094de:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81094e0:	687b      	ldr	r3, [r7, #4]
 81094e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81094e4:	2b04      	cmp	r3, #4
 81094e6:	d104      	bne.n	81094f2 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81094e8:	687b      	ldr	r3, [r7, #4]
 81094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094ec:	085a      	lsrs	r2, r3, #1
 81094ee:	687b      	ldr	r3, [r7, #4]
 81094f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81094f2:	687b      	ldr	r3, [r7, #4]
 81094f4:	685b      	ldr	r3, [r3, #4]
 81094f6:	2b00      	cmp	r3, #0
 81094f8:	d003      	beq.n	8109502 <HAL_SAI_Init+0x332>
 81094fa:	687b      	ldr	r3, [r7, #4]
 81094fc:	685b      	ldr	r3, [r3, #4]
 81094fe:	2b02      	cmp	r3, #2
 8109500:	d109      	bne.n	8109516 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8109506:	2b01      	cmp	r3, #1
 8109508:	d101      	bne.n	810950e <HAL_SAI_Init+0x33e>
 810950a:	2300      	movs	r3, #0
 810950c:	e001      	b.n	8109512 <HAL_SAI_Init+0x342>
 810950e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8109512:	623b      	str	r3, [r7, #32]
 8109514:	e008      	b.n	8109528 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810951a:	2b01      	cmp	r3, #1
 810951c:	d102      	bne.n	8109524 <HAL_SAI_Init+0x354>
 810951e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8109522:	e000      	b.n	8109526 <HAL_SAI_Init+0x356>
 8109524:	2300      	movs	r3, #0
 8109526:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8109528:	f7f8 fec2 	bl	81022b0 <HAL_GetREVID>
 810952c:	4603      	mov	r3, r0
 810952e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8109532:	d331      	bcc.n	8109598 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8109534:	687b      	ldr	r3, [r7, #4]
 8109536:	681b      	ldr	r3, [r3, #0]
 8109538:	6819      	ldr	r1, [r3, #0]
 810953a:	687b      	ldr	r3, [r7, #4]
 810953c:	681a      	ldr	r2, [r3, #0]
 810953e:	4b74      	ldr	r3, [pc, #464]	; (8109710 <HAL_SAI_Init+0x540>)
 8109540:	400b      	ands	r3, r1
 8109542:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109544:	687b      	ldr	r3, [r7, #4]
 8109546:	681b      	ldr	r3, [r3, #0]
 8109548:	6819      	ldr	r1, [r3, #0]
 810954a:	687b      	ldr	r3, [r7, #4]
 810954c:	685a      	ldr	r2, [r3, #4]
 810954e:	687b      	ldr	r3, [r7, #4]
 8109550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109552:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8109554:	687b      	ldr	r3, [r7, #4]
 8109556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8109558:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810955e:	431a      	orrs	r2, r3
 8109560:	6a3b      	ldr	r3, [r7, #32]
 8109562:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8109564:	69fb      	ldr	r3, [r7, #28]
 8109566:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810956c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810956e:	687b      	ldr	r3, [r7, #4]
 8109570:	695b      	ldr	r3, [r3, #20]
 8109572:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109574:	687b      	ldr	r3, [r7, #4]
 8109576:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8109578:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810957a:	687b      	ldr	r3, [r7, #4]
 810957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810957e:	051b      	lsls	r3, r3, #20
 8109580:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8109586:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8109588:	687b      	ldr	r3, [r7, #4]
 810958a:	691b      	ldr	r3, [r3, #16]
 810958c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810958e:	687b      	ldr	r3, [r7, #4]
 8109590:	681b      	ldr	r3, [r3, #0]
 8109592:	430a      	orrs	r2, r1
 8109594:	601a      	str	r2, [r3, #0]
 8109596:	e02d      	b.n	81095f4 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8109598:	687b      	ldr	r3, [r7, #4]
 810959a:	681b      	ldr	r3, [r3, #0]
 810959c:	6819      	ldr	r1, [r3, #0]
 810959e:	687b      	ldr	r3, [r7, #4]
 81095a0:	681a      	ldr	r2, [r3, #0]
 81095a2:	4b5c      	ldr	r3, [pc, #368]	; (8109714 <HAL_SAI_Init+0x544>)
 81095a4:	400b      	ands	r3, r1
 81095a6:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81095a8:	687b      	ldr	r3, [r7, #4]
 81095aa:	681b      	ldr	r3, [r3, #0]
 81095ac:	6819      	ldr	r1, [r3, #0]
 81095ae:	687b      	ldr	r3, [r7, #4]
 81095b0:	685a      	ldr	r2, [r3, #4]
 81095b2:	687b      	ldr	r3, [r7, #4]
 81095b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81095b6:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81095b8:	687b      	ldr	r3, [r7, #4]
 81095ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81095bc:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81095c2:	431a      	orrs	r2, r3
 81095c4:	6a3b      	ldr	r3, [r7, #32]
 81095c6:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81095c8:	69fb      	ldr	r3, [r7, #28]
 81095ca:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81095d0:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095d2:	687b      	ldr	r3, [r7, #4]
 81095d4:	695b      	ldr	r3, [r3, #20]
 81095d6:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81095dc:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095de:	687b      	ldr	r3, [r7, #4]
 81095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095e2:	051b      	lsls	r3, r3, #20
 81095e4:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81095e6:	687b      	ldr	r3, [r7, #4]
 81095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81095ea:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81095ec:	687b      	ldr	r3, [r7, #4]
 81095ee:	681b      	ldr	r3, [r3, #0]
 81095f0:	430a      	orrs	r2, r1
 81095f2:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81095f4:	687b      	ldr	r3, [r7, #4]
 81095f6:	681b      	ldr	r3, [r3, #0]
 81095f8:	685b      	ldr	r3, [r3, #4]
 81095fa:	687a      	ldr	r2, [r7, #4]
 81095fc:	6812      	ldr	r2, [r2, #0]
 81095fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8109602:	f023 030f 	bic.w	r3, r3, #15
 8109606:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8109608:	687b      	ldr	r3, [r7, #4]
 810960a:	681b      	ldr	r3, [r3, #0]
 810960c:	6859      	ldr	r1, [r3, #4]
 810960e:	687b      	ldr	r3, [r7, #4]
 8109610:	69da      	ldr	r2, [r3, #28]
 8109612:	687b      	ldr	r3, [r7, #4]
 8109614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109616:	431a      	orrs	r2, r3
 8109618:	687b      	ldr	r3, [r7, #4]
 810961a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810961c:	431a      	orrs	r2, r3
 810961e:	687b      	ldr	r3, [r7, #4]
 8109620:	681b      	ldr	r3, [r3, #0]
 8109622:	430a      	orrs	r2, r1
 8109624:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8109626:	687b      	ldr	r3, [r7, #4]
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	6899      	ldr	r1, [r3, #8]
 810962c:	687b      	ldr	r3, [r7, #4]
 810962e:	681a      	ldr	r2, [r3, #0]
 8109630:	4b39      	ldr	r3, [pc, #228]	; (8109718 <HAL_SAI_Init+0x548>)
 8109632:	400b      	ands	r3, r1
 8109634:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8109636:	687b      	ldr	r3, [r7, #4]
 8109638:	681b      	ldr	r3, [r3, #0]
 810963a:	6899      	ldr	r1, [r3, #8]
 810963c:	687b      	ldr	r3, [r7, #4]
 810963e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109640:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8109646:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8109648:	687b      	ldr	r3, [r7, #4]
 810964a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 810964c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810964e:	687b      	ldr	r3, [r7, #4]
 8109650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8109652:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8109654:	687b      	ldr	r3, [r7, #4]
 8109656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109658:	3b01      	subs	r3, #1
 810965a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810965c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810965e:	687b      	ldr	r3, [r7, #4]
 8109660:	681b      	ldr	r3, [r3, #0]
 8109662:	430a      	orrs	r2, r1
 8109664:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8109666:	687b      	ldr	r3, [r7, #4]
 8109668:	681b      	ldr	r3, [r3, #0]
 810966a:	68d9      	ldr	r1, [r3, #12]
 810966c:	687b      	ldr	r3, [r7, #4]
 810966e:	681a      	ldr	r2, [r3, #0]
 8109670:	f24f 0320 	movw	r3, #61472	; 0xf020
 8109674:	400b      	ands	r3, r1
 8109676:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8109678:	687b      	ldr	r3, [r7, #4]
 810967a:	681b      	ldr	r3, [r3, #0]
 810967c:	68d9      	ldr	r1, [r3, #12]
 810967e:	687b      	ldr	r3, [r7, #4]
 8109680:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109686:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109688:	687b      	ldr	r3, [r7, #4]
 810968a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810968c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810968e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8109690:	687b      	ldr	r3, [r7, #4]
 8109692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109694:	3b01      	subs	r3, #1
 8109696:	021b      	lsls	r3, r3, #8
 8109698:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	681b      	ldr	r3, [r3, #0]
 810969e:	430a      	orrs	r2, r1
 81096a0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 81096a2:	687b      	ldr	r3, [r7, #4]
 81096a4:	681b      	ldr	r3, [r3, #0]
 81096a6:	4a1d      	ldr	r2, [pc, #116]	; (810971c <HAL_SAI_Init+0x54c>)
 81096a8:	4293      	cmp	r3, r2
 81096aa:	d004      	beq.n	81096b6 <HAL_SAI_Init+0x4e6>
 81096ac:	687b      	ldr	r3, [r7, #4]
 81096ae:	681b      	ldr	r3, [r3, #0]
 81096b0:	4a1b      	ldr	r2, [pc, #108]	; (8109720 <HAL_SAI_Init+0x550>)
 81096b2:	4293      	cmp	r3, r2
 81096b4:	d119      	bne.n	81096ea <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 81096b6:	69bb      	ldr	r3, [r7, #24]
 81096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81096ba:	f023 0201 	bic.w	r2, r3, #1
 81096be:	69bb      	ldr	r3, [r7, #24]
 81096c0:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 81096c2:	687b      	ldr	r3, [r7, #4]
 81096c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81096c8:	2b01      	cmp	r3, #1
 81096ca:	d10e      	bne.n	81096ea <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81096cc:	687b      	ldr	r3, [r7, #4]
 81096ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 81096d0:	687b      	ldr	r3, [r7, #4]
 81096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81096d4:	3b01      	subs	r3, #1
 81096d6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 81096d8:	431a      	orrs	r2, r3
 81096da:	69bb      	ldr	r3, [r7, #24]
 81096dc:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81096de:	69bb      	ldr	r3, [r7, #24]
 81096e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81096e2:	f043 0201 	orr.w	r2, r3, #1
 81096e6:	69bb      	ldr	r3, [r7, #24]
 81096e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81096ea:	687b      	ldr	r3, [r7, #4]
 81096ec:	2200      	movs	r2, #0
 81096ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81096f2:	687b      	ldr	r3, [r7, #4]
 81096f4:	2201      	movs	r2, #1
 81096f6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81096fa:	687b      	ldr	r3, [r7, #4]
 81096fc:	2200      	movs	r2, #0
 81096fe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8109702:	2300      	movs	r3, #0
}
 8109704:	4618      	mov	r0, r3
 8109706:	3728      	adds	r7, #40	; 0x28
 8109708:	46bd      	mov	sp, r7
 810970a:	bd80      	pop	{r7, pc}
 810970c:	cccccccd 	.word	0xcccccccd
 8109710:	f005c010 	.word	0xf005c010
 8109714:	f805c010 	.word	0xf805c010
 8109718:	fff88000 	.word	0xfff88000
 810971c:	40015804 	.word	0x40015804
 8109720:	58005404 	.word	0x58005404

08109724 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8109724:	b580      	push	{r7, lr}
 8109726:	b084      	sub	sp, #16
 8109728:	af00      	add	r7, sp, #0
 810972a:	60f8      	str	r0, [r7, #12]
 810972c:	60b9      	str	r1, [r7, #8]
 810972e:	4613      	mov	r3, r2
 8109730:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8109732:	68bb      	ldr	r3, [r7, #8]
 8109734:	2b00      	cmp	r3, #0
 8109736:	d002      	beq.n	810973e <HAL_SAI_Receive_DMA+0x1a>
 8109738:	88fb      	ldrh	r3, [r7, #6]
 810973a:	2b00      	cmp	r3, #0
 810973c:	d101      	bne.n	8109742 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 810973e:	2301      	movs	r3, #1
 8109740:	e079      	b.n	8109836 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8109742:	68fb      	ldr	r3, [r7, #12]
 8109744:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8109748:	b2db      	uxtb	r3, r3
 810974a:	2b01      	cmp	r3, #1
 810974c:	d172      	bne.n	8109834 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 810974e:	68fb      	ldr	r3, [r7, #12]
 8109750:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8109754:	2b01      	cmp	r3, #1
 8109756:	d101      	bne.n	810975c <HAL_SAI_Receive_DMA+0x38>
 8109758:	2302      	movs	r3, #2
 810975a:	e06c      	b.n	8109836 <HAL_SAI_Receive_DMA+0x112>
 810975c:	68fb      	ldr	r3, [r7, #12]
 810975e:	2201      	movs	r2, #1
 8109760:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 8109764:	68fb      	ldr	r3, [r7, #12]
 8109766:	68ba      	ldr	r2, [r7, #8]
 8109768:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 810976a:	68fb      	ldr	r3, [r7, #12]
 810976c:	88fa      	ldrh	r2, [r7, #6]
 810976e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 8109772:	68fb      	ldr	r3, [r7, #12]
 8109774:	88fa      	ldrh	r2, [r7, #6]
 8109776:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 810977a:	68fb      	ldr	r3, [r7, #12]
 810977c:	2200      	movs	r2, #0
 810977e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8109782:	68fb      	ldr	r3, [r7, #12]
 8109784:	2222      	movs	r2, #34	; 0x22
 8109786:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 810978a:	68fb      	ldr	r3, [r7, #12]
 810978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8109790:	4a2b      	ldr	r2, [pc, #172]	; (8109840 <HAL_SAI_Receive_DMA+0x11c>)
 8109792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8109794:	68fb      	ldr	r3, [r7, #12]
 8109796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810979a:	4a2a      	ldr	r2, [pc, #168]	; (8109844 <HAL_SAI_Receive_DMA+0x120>)
 810979c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 810979e:	68fb      	ldr	r3, [r7, #12]
 81097a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81097a4:	4a28      	ldr	r2, [pc, #160]	; (8109848 <HAL_SAI_Receive_DMA+0x124>)
 81097a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 81097a8:	68fb      	ldr	r3, [r7, #12]
 81097aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81097ae:	2200      	movs	r2, #0
 81097b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 81097b2:	68fb      	ldr	r3, [r7, #12]
 81097b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 81097b8:	68fb      	ldr	r3, [r7, #12]
 81097ba:	681b      	ldr	r3, [r3, #0]
 81097bc:	331c      	adds	r3, #28
 81097be:	4619      	mov	r1, r3
 81097c0:	68fb      	ldr	r3, [r7, #12]
 81097c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81097c4:	461a      	mov	r2, r3
 81097c6:	68fb      	ldr	r3, [r7, #12]
 81097c8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 81097cc:	f7f9 fa0e 	bl	8102bec <HAL_DMA_Start_IT>
 81097d0:	4603      	mov	r3, r0
 81097d2:	2b00      	cmp	r3, #0
 81097d4:	d005      	beq.n	81097e2 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 81097d6:	68fb      	ldr	r3, [r7, #12]
 81097d8:	2200      	movs	r2, #0
 81097da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 81097de:	2301      	movs	r3, #1
 81097e0:	e029      	b.n	8109836 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 81097e2:	2100      	movs	r1, #0
 81097e4:	68f8      	ldr	r0, [r7, #12]
 81097e6:	f000 f852 	bl	810988e <SAI_InterruptFlag>
 81097ea:	4601      	mov	r1, r0
 81097ec:	68fb      	ldr	r3, [r7, #12]
 81097ee:	681b      	ldr	r3, [r3, #0]
 81097f0:	691a      	ldr	r2, [r3, #16]
 81097f2:	68fb      	ldr	r3, [r7, #12]
 81097f4:	681b      	ldr	r3, [r3, #0]
 81097f6:	430a      	orrs	r2, r1
 81097f8:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 81097fa:	68fb      	ldr	r3, [r7, #12]
 81097fc:	681b      	ldr	r3, [r3, #0]
 81097fe:	681a      	ldr	r2, [r3, #0]
 8109800:	68fb      	ldr	r3, [r7, #12]
 8109802:	681b      	ldr	r3, [r3, #0]
 8109804:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8109808:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 810980a:	68fb      	ldr	r3, [r7, #12]
 810980c:	681b      	ldr	r3, [r3, #0]
 810980e:	681b      	ldr	r3, [r3, #0]
 8109810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109814:	2b00      	cmp	r3, #0
 8109816:	d107      	bne.n	8109828 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8109818:	68fb      	ldr	r3, [r7, #12]
 810981a:	681b      	ldr	r3, [r3, #0]
 810981c:	681a      	ldr	r2, [r3, #0]
 810981e:	68fb      	ldr	r3, [r7, #12]
 8109820:	681b      	ldr	r3, [r3, #0]
 8109822:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8109826:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8109828:	68fb      	ldr	r3, [r7, #12]
 810982a:	2200      	movs	r2, #0
 810982c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8109830:	2300      	movs	r3, #0
 8109832:	e000      	b.n	8109836 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8109834:	2302      	movs	r3, #2
  }
}
 8109836:	4618      	mov	r0, r3
 8109838:	3710      	adds	r7, #16
 810983a:	46bd      	mov	sp, r7
 810983c:	bd80      	pop	{r7, pc}
 810983e:	bf00      	nop
 8109840:	081099d1 	.word	0x081099d1
 8109844:	08109971 	.word	0x08109971
 8109848:	081099ed 	.word	0x081099ed

0810984c <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 810984c:	b480      	push	{r7}
 810984e:	b083      	sub	sp, #12
 8109850:	af00      	add	r7, sp, #0
 8109852:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8109854:	bf00      	nop
 8109856:	370c      	adds	r7, #12
 8109858:	46bd      	mov	sp, r7
 810985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810985e:	4770      	bx	lr

08109860 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8109860:	b480      	push	{r7}
 8109862:	b083      	sub	sp, #12
 8109864:	af00      	add	r7, sp, #0
 8109866:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8109868:	bf00      	nop
 810986a:	370c      	adds	r7, #12
 810986c:	46bd      	mov	sp, r7
 810986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109872:	4770      	bx	lr

08109874 <HAL_SAI_GetError>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for the specified SAI Block.
  * @retval SAI Error Code
  */
uint32_t HAL_SAI_GetError(const SAI_HandleTypeDef *hsai)
{
 8109874:	b480      	push	{r7}
 8109876:	b083      	sub	sp, #12
 8109878:	af00      	add	r7, sp, #0
 810987a:	6078      	str	r0, [r7, #4]
  return hsai->ErrorCode;
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
 8109882:	4618      	mov	r0, r3
 8109884:	370c      	adds	r7, #12
 8109886:	46bd      	mov	sp, r7
 8109888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810988c:	4770      	bx	lr

0810988e <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 810988e:	b480      	push	{r7}
 8109890:	b085      	sub	sp, #20
 8109892:	af00      	add	r7, sp, #0
 8109894:	6078      	str	r0, [r7, #4]
 8109896:	460b      	mov	r3, r1
 8109898:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 810989a:	2301      	movs	r3, #1
 810989c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 810989e:	78fb      	ldrb	r3, [r7, #3]
 81098a0:	2b01      	cmp	r3, #1
 81098a2:	d103      	bne.n	81098ac <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 81098a4:	68fb      	ldr	r3, [r7, #12]
 81098a6:	f043 0308 	orr.w	r3, r3, #8
 81098aa:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 81098ac:	687b      	ldr	r3, [r7, #4]
 81098ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81098b0:	2b08      	cmp	r3, #8
 81098b2:	d10b      	bne.n	81098cc <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 81098b8:	2b03      	cmp	r3, #3
 81098ba:	d003      	beq.n	81098c4 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	685b      	ldr	r3, [r3, #4]
 81098c0:	2b01      	cmp	r3, #1
 81098c2:	d103      	bne.n	81098cc <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 81098c4:	68fb      	ldr	r3, [r7, #12]
 81098c6:	f043 0310 	orr.w	r3, r3, #16
 81098ca:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81098cc:	687b      	ldr	r3, [r7, #4]
 81098ce:	685b      	ldr	r3, [r3, #4]
 81098d0:	2b03      	cmp	r3, #3
 81098d2:	d003      	beq.n	81098dc <SAI_InterruptFlag+0x4e>
 81098d4:	687b      	ldr	r3, [r7, #4]
 81098d6:	685b      	ldr	r3, [r3, #4]
 81098d8:	2b02      	cmp	r3, #2
 81098da:	d104      	bne.n	81098e6 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 81098dc:	68fb      	ldr	r3, [r7, #12]
 81098de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 81098e2:	60fb      	str	r3, [r7, #12]
 81098e4:	e003      	b.n	81098ee <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 81098e6:	68fb      	ldr	r3, [r7, #12]
 81098e8:	f043 0304 	orr.w	r3, r3, #4
 81098ec:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 81098ee:	68fb      	ldr	r3, [r7, #12]
}
 81098f0:	4618      	mov	r0, r3
 81098f2:	3714      	adds	r7, #20
 81098f4:	46bd      	mov	sp, r7
 81098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098fa:	4770      	bx	lr

081098fc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81098fc:	b480      	push	{r7}
 81098fe:	b085      	sub	sp, #20
 8109900:	af00      	add	r7, sp, #0
 8109902:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8109904:	4b18      	ldr	r3, [pc, #96]	; (8109968 <SAI_Disable+0x6c>)
 8109906:	681b      	ldr	r3, [r3, #0]
 8109908:	4a18      	ldr	r2, [pc, #96]	; (810996c <SAI_Disable+0x70>)
 810990a:	fba2 2303 	umull	r2, r3, r2, r3
 810990e:	0b1b      	lsrs	r3, r3, #12
 8109910:	009b      	lsls	r3, r3, #2
 8109912:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8109914:	2300      	movs	r3, #0
 8109916:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	681b      	ldr	r3, [r3, #0]
 810991c:	681a      	ldr	r2, [r3, #0]
 810991e:	687b      	ldr	r3, [r7, #4]
 8109920:	681b      	ldr	r3, [r3, #0]
 8109922:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8109926:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8109928:	68fb      	ldr	r3, [r7, #12]
 810992a:	2b00      	cmp	r3, #0
 810992c:	d10a      	bne.n	8109944 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810992e:	687b      	ldr	r3, [r7, #4]
 8109930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109934:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8109938:	687b      	ldr	r3, [r7, #4]
 810993a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 810993e:	2303      	movs	r3, #3
 8109940:	72fb      	strb	r3, [r7, #11]
      break;
 8109942:	e009      	b.n	8109958 <SAI_Disable+0x5c>
    }
    count--;
 8109944:	68fb      	ldr	r3, [r7, #12]
 8109946:	3b01      	subs	r3, #1
 8109948:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 810994a:	687b      	ldr	r3, [r7, #4]
 810994c:	681b      	ldr	r3, [r3, #0]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109954:	2b00      	cmp	r3, #0
 8109956:	d1e7      	bne.n	8109928 <SAI_Disable+0x2c>

  return status;
 8109958:	7afb      	ldrb	r3, [r7, #11]
}
 810995a:	4618      	mov	r0, r3
 810995c:	3714      	adds	r7, #20
 810995e:	46bd      	mov	sp, r7
 8109960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109964:	4770      	bx	lr
 8109966:	bf00      	nop
 8109968:	10000000 	.word	0x10000000
 810996c:	95cbec1b 	.word	0x95cbec1b

08109970 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8109970:	b580      	push	{r7, lr}
 8109972:	b084      	sub	sp, #16
 8109974:	af00      	add	r7, sp, #0
 8109976:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8109978:	687b      	ldr	r3, [r7, #4]
 810997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810997c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 810997e:	687b      	ldr	r3, [r7, #4]
 8109980:	69db      	ldr	r3, [r3, #28]
 8109982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109986:	d01c      	beq.n	81099c2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8109988:	68fb      	ldr	r3, [r7, #12]
 810998a:	681b      	ldr	r3, [r3, #0]
 810998c:	681a      	ldr	r2, [r3, #0]
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	681b      	ldr	r3, [r3, #0]
 8109992:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8109996:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8109998:	68fb      	ldr	r3, [r7, #12]
 810999a:	2200      	movs	r2, #0
 810999c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 81099a0:	2100      	movs	r1, #0
 81099a2:	68f8      	ldr	r0, [r7, #12]
 81099a4:	f7ff ff73 	bl	810988e <SAI_InterruptFlag>
 81099a8:	4603      	mov	r3, r0
 81099aa:	43d9      	mvns	r1, r3
 81099ac:	68fb      	ldr	r3, [r7, #12]
 81099ae:	681b      	ldr	r3, [r3, #0]
 81099b0:	691a      	ldr	r2, [r3, #16]
 81099b2:	68fb      	ldr	r3, [r7, #12]
 81099b4:	681b      	ldr	r3, [r3, #0]
 81099b6:	400a      	ands	r2, r1
 81099b8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 81099ba:	68fb      	ldr	r3, [r7, #12]
 81099bc:	2201      	movs	r2, #1
 81099be:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 81099c2:	68f8      	ldr	r0, [r7, #12]
 81099c4:	f7f7 fdca 	bl	810155c <HAL_SAI_RxCpltCallback>
#endif
}
 81099c8:	bf00      	nop
 81099ca:	3710      	adds	r7, #16
 81099cc:	46bd      	mov	sp, r7
 81099ce:	bd80      	pop	{r7, pc}

081099d0 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81099d0:	b580      	push	{r7, lr}
 81099d2:	b084      	sub	sp, #16
 81099d4:	af00      	add	r7, sp, #0
 81099d6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81099dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 81099de:	68f8      	ldr	r0, [r7, #12]
 81099e0:	f7ff ff34 	bl	810984c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 81099e4:	bf00      	nop
 81099e6:	3710      	adds	r7, #16
 81099e8:	46bd      	mov	sp, r7
 81099ea:	bd80      	pop	{r7, pc}

081099ec <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 81099ec:	b580      	push	{r7, lr}
 81099ee:	b084      	sub	sp, #16
 81099f0:	af00      	add	r7, sp, #0
 81099f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81099f4:	687b      	ldr	r3, [r7, #4]
 81099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81099f8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 81099fa:	6878      	ldr	r0, [r7, #4]
 81099fc:	f7fa fa8a 	bl	8103f14 <HAL_DMA_GetError>
 8109a00:	4603      	mov	r3, r0
 8109a02:	2b02      	cmp	r3, #2
 8109a04:	d01d      	beq.n	8109a42 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8109a06:	68fb      	ldr	r3, [r7, #12]
 8109a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8109a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8109a10:	68fb      	ldr	r3, [r7, #12]
 8109a12:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8109a16:	68fb      	ldr	r3, [r7, #12]
 8109a18:	681b      	ldr	r3, [r3, #0]
 8109a1a:	681a      	ldr	r2, [r3, #0]
 8109a1c:	68fb      	ldr	r3, [r7, #12]
 8109a1e:	681b      	ldr	r3, [r3, #0]
 8109a20:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8109a24:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8109a26:	68f8      	ldr	r0, [r7, #12]
 8109a28:	f7ff ff68 	bl	81098fc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8109a2c:	68fb      	ldr	r3, [r7, #12]
 8109a2e:	2201      	movs	r2, #1
 8109a30:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8109a34:	68fb      	ldr	r3, [r7, #12]
 8109a36:	2200      	movs	r2, #0
 8109a38:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8109a3c:	68f8      	ldr	r0, [r7, #12]
 8109a3e:	f7ff ff0f 	bl	8109860 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8109a42:	bf00      	nop
 8109a44:	3710      	adds	r7, #16
 8109a46:	46bd      	mov	sp, r7
 8109a48:	bd80      	pop	{r7, pc}
	...

08109a4c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8109a4c:	b580      	push	{r7, lr}
 8109a4e:	b082      	sub	sp, #8
 8109a50:	af00      	add	r7, sp, #0
 8109a52:	6078      	str	r0, [r7, #4]
 8109a54:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	d101      	bne.n	8109a60 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8109a5c:	2301      	movs	r3, #1
 8109a5e:	e02b      	b.n	8109ab8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8109a66:	b2db      	uxtb	r3, r3
 8109a68:	2b00      	cmp	r3, #0
 8109a6a:	d106      	bne.n	8109a7a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	2200      	movs	r2, #0
 8109a70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8109a74:	6878      	ldr	r0, [r7, #4]
 8109a76:	f7f7 fa57 	bl	8100f28 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8109a7a:	687b      	ldr	r3, [r7, #4]
 8109a7c:	2202      	movs	r2, #2
 8109a7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8109a82:	687b      	ldr	r3, [r7, #4]
 8109a84:	681a      	ldr	r2, [r3, #0]
 8109a86:	687b      	ldr	r3, [r7, #4]
 8109a88:	3304      	adds	r3, #4
 8109a8a:	4619      	mov	r1, r3
 8109a8c:	4610      	mov	r0, r2
 8109a8e:	f001 f8ed 	bl	810ac6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8109a92:	687b      	ldr	r3, [r7, #4]
 8109a94:	6818      	ldr	r0, [r3, #0]
 8109a96:	687b      	ldr	r3, [r7, #4]
 8109a98:	685b      	ldr	r3, [r3, #4]
 8109a9a:	461a      	mov	r2, r3
 8109a9c:	6839      	ldr	r1, [r7, #0]
 8109a9e:	f001 f942 	bl	810ad26 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8109aa2:	4b07      	ldr	r3, [pc, #28]	; (8109ac0 <HAL_SDRAM_Init+0x74>)
 8109aa4:	681b      	ldr	r3, [r3, #0]
 8109aa6:	4a06      	ldr	r2, [pc, #24]	; (8109ac0 <HAL_SDRAM_Init+0x74>)
 8109aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8109aac:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8109aae:	687b      	ldr	r3, [r7, #4]
 8109ab0:	2201      	movs	r2, #1
 8109ab2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8109ab6:	2300      	movs	r3, #0
}
 8109ab8:	4618      	mov	r0, r3
 8109aba:	3708      	adds	r7, #8
 8109abc:	46bd      	mov	sp, r7
 8109abe:	bd80      	pop	{r7, pc}
 8109ac0:	52004000 	.word	0x52004000

08109ac4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8109ac4:	b580      	push	{r7, lr}
 8109ac6:	b082      	sub	sp, #8
 8109ac8:	af00      	add	r7, sp, #0
 8109aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	2b00      	cmp	r3, #0
 8109ad0:	d101      	bne.n	8109ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8109ad2:	2301      	movs	r3, #1
 8109ad4:	e042      	b.n	8109b5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8109ad6:	687b      	ldr	r3, [r7, #4]
 8109ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8109adc:	2b00      	cmp	r3, #0
 8109ade:	d106      	bne.n	8109aee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	2200      	movs	r2, #0
 8109ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8109ae8:	6878      	ldr	r0, [r7, #4]
 8109aea:	f7f8 f9c7 	bl	8101e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8109aee:	687b      	ldr	r3, [r7, #4]
 8109af0:	2224      	movs	r2, #36	; 0x24
 8109af2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8109af6:	687b      	ldr	r3, [r7, #4]
 8109af8:	681b      	ldr	r3, [r3, #0]
 8109afa:	681a      	ldr	r2, [r3, #0]
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	681b      	ldr	r3, [r3, #0]
 8109b00:	f022 0201 	bic.w	r2, r2, #1
 8109b04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8109b06:	6878      	ldr	r0, [r7, #4]
 8109b08:	f000 f82c 	bl	8109b64 <UART_SetConfig>
 8109b0c:	4603      	mov	r3, r0
 8109b0e:	2b01      	cmp	r3, #1
 8109b10:	d101      	bne.n	8109b16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8109b12:	2301      	movs	r3, #1
 8109b14:	e022      	b.n	8109b5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8109b16:	687b      	ldr	r3, [r7, #4]
 8109b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109b1a:	2b00      	cmp	r3, #0
 8109b1c:	d002      	beq.n	8109b24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8109b1e:	6878      	ldr	r0, [r7, #4]
 8109b20:	f000 fd88 	bl	810a634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8109b24:	687b      	ldr	r3, [r7, #4]
 8109b26:	681b      	ldr	r3, [r3, #0]
 8109b28:	685a      	ldr	r2, [r3, #4]
 8109b2a:	687b      	ldr	r3, [r7, #4]
 8109b2c:	681b      	ldr	r3, [r3, #0]
 8109b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8109b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8109b34:	687b      	ldr	r3, [r7, #4]
 8109b36:	681b      	ldr	r3, [r3, #0]
 8109b38:	689a      	ldr	r2, [r3, #8]
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8109b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8109b44:	687b      	ldr	r3, [r7, #4]
 8109b46:	681b      	ldr	r3, [r3, #0]
 8109b48:	681a      	ldr	r2, [r3, #0]
 8109b4a:	687b      	ldr	r3, [r7, #4]
 8109b4c:	681b      	ldr	r3, [r3, #0]
 8109b4e:	f042 0201 	orr.w	r2, r2, #1
 8109b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8109b54:	6878      	ldr	r0, [r7, #4]
 8109b56:	f000 fe0f 	bl	810a778 <UART_CheckIdleState>
 8109b5a:	4603      	mov	r3, r0
}
 8109b5c:	4618      	mov	r0, r3
 8109b5e:	3708      	adds	r7, #8
 8109b60:	46bd      	mov	sp, r7
 8109b62:	bd80      	pop	{r7, pc}

08109b64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8109b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8109b68:	b092      	sub	sp, #72	; 0x48
 8109b6a:	af00      	add	r7, sp, #0
 8109b6c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8109b6e:	2300      	movs	r3, #0
 8109b70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8109b74:	697b      	ldr	r3, [r7, #20]
 8109b76:	689a      	ldr	r2, [r3, #8]
 8109b78:	697b      	ldr	r3, [r7, #20]
 8109b7a:	691b      	ldr	r3, [r3, #16]
 8109b7c:	431a      	orrs	r2, r3
 8109b7e:	697b      	ldr	r3, [r7, #20]
 8109b80:	695b      	ldr	r3, [r3, #20]
 8109b82:	431a      	orrs	r2, r3
 8109b84:	697b      	ldr	r3, [r7, #20]
 8109b86:	69db      	ldr	r3, [r3, #28]
 8109b88:	4313      	orrs	r3, r2
 8109b8a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8109b8c:	697b      	ldr	r3, [r7, #20]
 8109b8e:	681b      	ldr	r3, [r3, #0]
 8109b90:	681a      	ldr	r2, [r3, #0]
 8109b92:	4bbd      	ldr	r3, [pc, #756]	; (8109e88 <UART_SetConfig+0x324>)
 8109b94:	4013      	ands	r3, r2
 8109b96:	697a      	ldr	r2, [r7, #20]
 8109b98:	6812      	ldr	r2, [r2, #0]
 8109b9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109b9c:	430b      	orrs	r3, r1
 8109b9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8109ba0:	697b      	ldr	r3, [r7, #20]
 8109ba2:	681b      	ldr	r3, [r3, #0]
 8109ba4:	685b      	ldr	r3, [r3, #4]
 8109ba6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8109baa:	697b      	ldr	r3, [r7, #20]
 8109bac:	68da      	ldr	r2, [r3, #12]
 8109bae:	697b      	ldr	r3, [r7, #20]
 8109bb0:	681b      	ldr	r3, [r3, #0]
 8109bb2:	430a      	orrs	r2, r1
 8109bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8109bb6:	697b      	ldr	r3, [r7, #20]
 8109bb8:	699b      	ldr	r3, [r3, #24]
 8109bba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8109bbc:	697b      	ldr	r3, [r7, #20]
 8109bbe:	681b      	ldr	r3, [r3, #0]
 8109bc0:	4ab2      	ldr	r2, [pc, #712]	; (8109e8c <UART_SetConfig+0x328>)
 8109bc2:	4293      	cmp	r3, r2
 8109bc4:	d004      	beq.n	8109bd0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8109bc6:	697b      	ldr	r3, [r7, #20]
 8109bc8:	6a1b      	ldr	r3, [r3, #32]
 8109bca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109bcc:	4313      	orrs	r3, r2
 8109bce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8109bd0:	697b      	ldr	r3, [r7, #20]
 8109bd2:	681b      	ldr	r3, [r3, #0]
 8109bd4:	689b      	ldr	r3, [r3, #8]
 8109bd6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8109bda:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8109bde:	697a      	ldr	r2, [r7, #20]
 8109be0:	6812      	ldr	r2, [r2, #0]
 8109be2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8109be4:	430b      	orrs	r3, r1
 8109be6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8109be8:	697b      	ldr	r3, [r7, #20]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109bee:	f023 010f 	bic.w	r1, r3, #15
 8109bf2:	697b      	ldr	r3, [r7, #20]
 8109bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109bf6:	697b      	ldr	r3, [r7, #20]
 8109bf8:	681b      	ldr	r3, [r3, #0]
 8109bfa:	430a      	orrs	r2, r1
 8109bfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8109bfe:	697b      	ldr	r3, [r7, #20]
 8109c00:	681b      	ldr	r3, [r3, #0]
 8109c02:	4aa3      	ldr	r2, [pc, #652]	; (8109e90 <UART_SetConfig+0x32c>)
 8109c04:	4293      	cmp	r3, r2
 8109c06:	d177      	bne.n	8109cf8 <UART_SetConfig+0x194>
 8109c08:	4ba2      	ldr	r3, [pc, #648]	; (8109e94 <UART_SetConfig+0x330>)
 8109c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109c10:	2b28      	cmp	r3, #40	; 0x28
 8109c12:	d86d      	bhi.n	8109cf0 <UART_SetConfig+0x18c>
 8109c14:	a201      	add	r2, pc, #4	; (adr r2, 8109c1c <UART_SetConfig+0xb8>)
 8109c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109c1a:	bf00      	nop
 8109c1c:	08109cc1 	.word	0x08109cc1
 8109c20:	08109cf1 	.word	0x08109cf1
 8109c24:	08109cf1 	.word	0x08109cf1
 8109c28:	08109cf1 	.word	0x08109cf1
 8109c2c:	08109cf1 	.word	0x08109cf1
 8109c30:	08109cf1 	.word	0x08109cf1
 8109c34:	08109cf1 	.word	0x08109cf1
 8109c38:	08109cf1 	.word	0x08109cf1
 8109c3c:	08109cc9 	.word	0x08109cc9
 8109c40:	08109cf1 	.word	0x08109cf1
 8109c44:	08109cf1 	.word	0x08109cf1
 8109c48:	08109cf1 	.word	0x08109cf1
 8109c4c:	08109cf1 	.word	0x08109cf1
 8109c50:	08109cf1 	.word	0x08109cf1
 8109c54:	08109cf1 	.word	0x08109cf1
 8109c58:	08109cf1 	.word	0x08109cf1
 8109c5c:	08109cd1 	.word	0x08109cd1
 8109c60:	08109cf1 	.word	0x08109cf1
 8109c64:	08109cf1 	.word	0x08109cf1
 8109c68:	08109cf1 	.word	0x08109cf1
 8109c6c:	08109cf1 	.word	0x08109cf1
 8109c70:	08109cf1 	.word	0x08109cf1
 8109c74:	08109cf1 	.word	0x08109cf1
 8109c78:	08109cf1 	.word	0x08109cf1
 8109c7c:	08109cd9 	.word	0x08109cd9
 8109c80:	08109cf1 	.word	0x08109cf1
 8109c84:	08109cf1 	.word	0x08109cf1
 8109c88:	08109cf1 	.word	0x08109cf1
 8109c8c:	08109cf1 	.word	0x08109cf1
 8109c90:	08109cf1 	.word	0x08109cf1
 8109c94:	08109cf1 	.word	0x08109cf1
 8109c98:	08109cf1 	.word	0x08109cf1
 8109c9c:	08109ce1 	.word	0x08109ce1
 8109ca0:	08109cf1 	.word	0x08109cf1
 8109ca4:	08109cf1 	.word	0x08109cf1
 8109ca8:	08109cf1 	.word	0x08109cf1
 8109cac:	08109cf1 	.word	0x08109cf1
 8109cb0:	08109cf1 	.word	0x08109cf1
 8109cb4:	08109cf1 	.word	0x08109cf1
 8109cb8:	08109cf1 	.word	0x08109cf1
 8109cbc:	08109ce9 	.word	0x08109ce9
 8109cc0:	2301      	movs	r3, #1
 8109cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cc6:	e220      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109cc8:	2304      	movs	r3, #4
 8109cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cce:	e21c      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109cd0:	2308      	movs	r3, #8
 8109cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cd6:	e218      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109cd8:	2310      	movs	r3, #16
 8109cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cde:	e214      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109ce0:	2320      	movs	r3, #32
 8109ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ce6:	e210      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109ce8:	2340      	movs	r3, #64	; 0x40
 8109cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cee:	e20c      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109cf0:	2380      	movs	r3, #128	; 0x80
 8109cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109cf6:	e208      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109cf8:	697b      	ldr	r3, [r7, #20]
 8109cfa:	681b      	ldr	r3, [r3, #0]
 8109cfc:	4a66      	ldr	r2, [pc, #408]	; (8109e98 <UART_SetConfig+0x334>)
 8109cfe:	4293      	cmp	r3, r2
 8109d00:	d130      	bne.n	8109d64 <UART_SetConfig+0x200>
 8109d02:	4b64      	ldr	r3, [pc, #400]	; (8109e94 <UART_SetConfig+0x330>)
 8109d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109d06:	f003 0307 	and.w	r3, r3, #7
 8109d0a:	2b05      	cmp	r3, #5
 8109d0c:	d826      	bhi.n	8109d5c <UART_SetConfig+0x1f8>
 8109d0e:	a201      	add	r2, pc, #4	; (adr r2, 8109d14 <UART_SetConfig+0x1b0>)
 8109d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d14:	08109d2d 	.word	0x08109d2d
 8109d18:	08109d35 	.word	0x08109d35
 8109d1c:	08109d3d 	.word	0x08109d3d
 8109d20:	08109d45 	.word	0x08109d45
 8109d24:	08109d4d 	.word	0x08109d4d
 8109d28:	08109d55 	.word	0x08109d55
 8109d2c:	2300      	movs	r3, #0
 8109d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d32:	e1ea      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d34:	2304      	movs	r3, #4
 8109d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d3a:	e1e6      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d3c:	2308      	movs	r3, #8
 8109d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d42:	e1e2      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d44:	2310      	movs	r3, #16
 8109d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d4a:	e1de      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d4c:	2320      	movs	r3, #32
 8109d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d52:	e1da      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d54:	2340      	movs	r3, #64	; 0x40
 8109d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d5a:	e1d6      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d5c:	2380      	movs	r3, #128	; 0x80
 8109d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d62:	e1d2      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109d64:	697b      	ldr	r3, [r7, #20]
 8109d66:	681b      	ldr	r3, [r3, #0]
 8109d68:	4a4c      	ldr	r2, [pc, #304]	; (8109e9c <UART_SetConfig+0x338>)
 8109d6a:	4293      	cmp	r3, r2
 8109d6c:	d130      	bne.n	8109dd0 <UART_SetConfig+0x26c>
 8109d6e:	4b49      	ldr	r3, [pc, #292]	; (8109e94 <UART_SetConfig+0x330>)
 8109d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109d72:	f003 0307 	and.w	r3, r3, #7
 8109d76:	2b05      	cmp	r3, #5
 8109d78:	d826      	bhi.n	8109dc8 <UART_SetConfig+0x264>
 8109d7a:	a201      	add	r2, pc, #4	; (adr r2, 8109d80 <UART_SetConfig+0x21c>)
 8109d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109d80:	08109d99 	.word	0x08109d99
 8109d84:	08109da1 	.word	0x08109da1
 8109d88:	08109da9 	.word	0x08109da9
 8109d8c:	08109db1 	.word	0x08109db1
 8109d90:	08109db9 	.word	0x08109db9
 8109d94:	08109dc1 	.word	0x08109dc1
 8109d98:	2300      	movs	r3, #0
 8109d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109d9e:	e1b4      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109da0:	2304      	movs	r3, #4
 8109da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109da6:	e1b0      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109da8:	2308      	movs	r3, #8
 8109daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dae:	e1ac      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109db0:	2310      	movs	r3, #16
 8109db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109db6:	e1a8      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109db8:	2320      	movs	r3, #32
 8109dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dbe:	e1a4      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109dc0:	2340      	movs	r3, #64	; 0x40
 8109dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dc6:	e1a0      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109dc8:	2380      	movs	r3, #128	; 0x80
 8109dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109dce:	e19c      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109dd0:	697b      	ldr	r3, [r7, #20]
 8109dd2:	681b      	ldr	r3, [r3, #0]
 8109dd4:	4a32      	ldr	r2, [pc, #200]	; (8109ea0 <UART_SetConfig+0x33c>)
 8109dd6:	4293      	cmp	r3, r2
 8109dd8:	d130      	bne.n	8109e3c <UART_SetConfig+0x2d8>
 8109dda:	4b2e      	ldr	r3, [pc, #184]	; (8109e94 <UART_SetConfig+0x330>)
 8109ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109dde:	f003 0307 	and.w	r3, r3, #7
 8109de2:	2b05      	cmp	r3, #5
 8109de4:	d826      	bhi.n	8109e34 <UART_SetConfig+0x2d0>
 8109de6:	a201      	add	r2, pc, #4	; (adr r2, 8109dec <UART_SetConfig+0x288>)
 8109de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109dec:	08109e05 	.word	0x08109e05
 8109df0:	08109e0d 	.word	0x08109e0d
 8109df4:	08109e15 	.word	0x08109e15
 8109df8:	08109e1d 	.word	0x08109e1d
 8109dfc:	08109e25 	.word	0x08109e25
 8109e00:	08109e2d 	.word	0x08109e2d
 8109e04:	2300      	movs	r3, #0
 8109e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e0a:	e17e      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e0c:	2304      	movs	r3, #4
 8109e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e12:	e17a      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e14:	2308      	movs	r3, #8
 8109e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e1a:	e176      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e1c:	2310      	movs	r3, #16
 8109e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e22:	e172      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e24:	2320      	movs	r3, #32
 8109e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e2a:	e16e      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e2c:	2340      	movs	r3, #64	; 0x40
 8109e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e32:	e16a      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e34:	2380      	movs	r3, #128	; 0x80
 8109e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e3a:	e166      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e3c:	697b      	ldr	r3, [r7, #20]
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	4a18      	ldr	r2, [pc, #96]	; (8109ea4 <UART_SetConfig+0x340>)
 8109e42:	4293      	cmp	r3, r2
 8109e44:	d140      	bne.n	8109ec8 <UART_SetConfig+0x364>
 8109e46:	4b13      	ldr	r3, [pc, #76]	; (8109e94 <UART_SetConfig+0x330>)
 8109e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109e4a:	f003 0307 	and.w	r3, r3, #7
 8109e4e:	2b05      	cmp	r3, #5
 8109e50:	d836      	bhi.n	8109ec0 <UART_SetConfig+0x35c>
 8109e52:	a201      	add	r2, pc, #4	; (adr r2, 8109e58 <UART_SetConfig+0x2f4>)
 8109e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e58:	08109e71 	.word	0x08109e71
 8109e5c:	08109e79 	.word	0x08109e79
 8109e60:	08109e81 	.word	0x08109e81
 8109e64:	08109ea9 	.word	0x08109ea9
 8109e68:	08109eb1 	.word	0x08109eb1
 8109e6c:	08109eb9 	.word	0x08109eb9
 8109e70:	2300      	movs	r3, #0
 8109e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e76:	e148      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e78:	2304      	movs	r3, #4
 8109e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e7e:	e144      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e80:	2308      	movs	r3, #8
 8109e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109e86:	e140      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109e88:	cfff69f3 	.word	0xcfff69f3
 8109e8c:	58000c00 	.word	0x58000c00
 8109e90:	40011000 	.word	0x40011000
 8109e94:	58024400 	.word	0x58024400
 8109e98:	40004400 	.word	0x40004400
 8109e9c:	40004800 	.word	0x40004800
 8109ea0:	40004c00 	.word	0x40004c00
 8109ea4:	40005000 	.word	0x40005000
 8109ea8:	2310      	movs	r3, #16
 8109eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eae:	e12c      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109eb0:	2320      	movs	r3, #32
 8109eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109eb6:	e128      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109eb8:	2340      	movs	r3, #64	; 0x40
 8109eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ebe:	e124      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109ec0:	2380      	movs	r3, #128	; 0x80
 8109ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ec6:	e120      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109ec8:	697b      	ldr	r3, [r7, #20]
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	4acb      	ldr	r2, [pc, #812]	; (810a1fc <UART_SetConfig+0x698>)
 8109ece:	4293      	cmp	r3, r2
 8109ed0:	d176      	bne.n	8109fc0 <UART_SetConfig+0x45c>
 8109ed2:	4bcb      	ldr	r3, [pc, #812]	; (810a200 <UART_SetConfig+0x69c>)
 8109ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109eda:	2b28      	cmp	r3, #40	; 0x28
 8109edc:	d86c      	bhi.n	8109fb8 <UART_SetConfig+0x454>
 8109ede:	a201      	add	r2, pc, #4	; (adr r2, 8109ee4 <UART_SetConfig+0x380>)
 8109ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109ee4:	08109f89 	.word	0x08109f89
 8109ee8:	08109fb9 	.word	0x08109fb9
 8109eec:	08109fb9 	.word	0x08109fb9
 8109ef0:	08109fb9 	.word	0x08109fb9
 8109ef4:	08109fb9 	.word	0x08109fb9
 8109ef8:	08109fb9 	.word	0x08109fb9
 8109efc:	08109fb9 	.word	0x08109fb9
 8109f00:	08109fb9 	.word	0x08109fb9
 8109f04:	08109f91 	.word	0x08109f91
 8109f08:	08109fb9 	.word	0x08109fb9
 8109f0c:	08109fb9 	.word	0x08109fb9
 8109f10:	08109fb9 	.word	0x08109fb9
 8109f14:	08109fb9 	.word	0x08109fb9
 8109f18:	08109fb9 	.word	0x08109fb9
 8109f1c:	08109fb9 	.word	0x08109fb9
 8109f20:	08109fb9 	.word	0x08109fb9
 8109f24:	08109f99 	.word	0x08109f99
 8109f28:	08109fb9 	.word	0x08109fb9
 8109f2c:	08109fb9 	.word	0x08109fb9
 8109f30:	08109fb9 	.word	0x08109fb9
 8109f34:	08109fb9 	.word	0x08109fb9
 8109f38:	08109fb9 	.word	0x08109fb9
 8109f3c:	08109fb9 	.word	0x08109fb9
 8109f40:	08109fb9 	.word	0x08109fb9
 8109f44:	08109fa1 	.word	0x08109fa1
 8109f48:	08109fb9 	.word	0x08109fb9
 8109f4c:	08109fb9 	.word	0x08109fb9
 8109f50:	08109fb9 	.word	0x08109fb9
 8109f54:	08109fb9 	.word	0x08109fb9
 8109f58:	08109fb9 	.word	0x08109fb9
 8109f5c:	08109fb9 	.word	0x08109fb9
 8109f60:	08109fb9 	.word	0x08109fb9
 8109f64:	08109fa9 	.word	0x08109fa9
 8109f68:	08109fb9 	.word	0x08109fb9
 8109f6c:	08109fb9 	.word	0x08109fb9
 8109f70:	08109fb9 	.word	0x08109fb9
 8109f74:	08109fb9 	.word	0x08109fb9
 8109f78:	08109fb9 	.word	0x08109fb9
 8109f7c:	08109fb9 	.word	0x08109fb9
 8109f80:	08109fb9 	.word	0x08109fb9
 8109f84:	08109fb1 	.word	0x08109fb1
 8109f88:	2301      	movs	r3, #1
 8109f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f8e:	e0bc      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109f90:	2304      	movs	r3, #4
 8109f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f96:	e0b8      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109f98:	2308      	movs	r3, #8
 8109f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109f9e:	e0b4      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109fa0:	2310      	movs	r3, #16
 8109fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fa6:	e0b0      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109fa8:	2320      	movs	r3, #32
 8109faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fae:	e0ac      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109fb0:	2340      	movs	r3, #64	; 0x40
 8109fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fb6:	e0a8      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109fb8:	2380      	movs	r3, #128	; 0x80
 8109fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109fbe:	e0a4      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109fc0:	697b      	ldr	r3, [r7, #20]
 8109fc2:	681b      	ldr	r3, [r3, #0]
 8109fc4:	4a8f      	ldr	r2, [pc, #572]	; (810a204 <UART_SetConfig+0x6a0>)
 8109fc6:	4293      	cmp	r3, r2
 8109fc8:	d130      	bne.n	810a02c <UART_SetConfig+0x4c8>
 8109fca:	4b8d      	ldr	r3, [pc, #564]	; (810a200 <UART_SetConfig+0x69c>)
 8109fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109fce:	f003 0307 	and.w	r3, r3, #7
 8109fd2:	2b05      	cmp	r3, #5
 8109fd4:	d826      	bhi.n	810a024 <UART_SetConfig+0x4c0>
 8109fd6:	a201      	add	r2, pc, #4	; (adr r2, 8109fdc <UART_SetConfig+0x478>)
 8109fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109fdc:	08109ff5 	.word	0x08109ff5
 8109fe0:	08109ffd 	.word	0x08109ffd
 8109fe4:	0810a005 	.word	0x0810a005
 8109fe8:	0810a00d 	.word	0x0810a00d
 8109fec:	0810a015 	.word	0x0810a015
 8109ff0:	0810a01d 	.word	0x0810a01d
 8109ff4:	2300      	movs	r3, #0
 8109ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109ffa:	e086      	b.n	810a10a <UART_SetConfig+0x5a6>
 8109ffc:	2304      	movs	r3, #4
 8109ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a002:	e082      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a004:	2308      	movs	r3, #8
 810a006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a00a:	e07e      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a00c:	2310      	movs	r3, #16
 810a00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a012:	e07a      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a014:	2320      	movs	r3, #32
 810a016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a01a:	e076      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a01c:	2340      	movs	r3, #64	; 0x40
 810a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a022:	e072      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a024:	2380      	movs	r3, #128	; 0x80
 810a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a02a:	e06e      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a02c:	697b      	ldr	r3, [r7, #20]
 810a02e:	681b      	ldr	r3, [r3, #0]
 810a030:	4a75      	ldr	r2, [pc, #468]	; (810a208 <UART_SetConfig+0x6a4>)
 810a032:	4293      	cmp	r3, r2
 810a034:	d130      	bne.n	810a098 <UART_SetConfig+0x534>
 810a036:	4b72      	ldr	r3, [pc, #456]	; (810a200 <UART_SetConfig+0x69c>)
 810a038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810a03a:	f003 0307 	and.w	r3, r3, #7
 810a03e:	2b05      	cmp	r3, #5
 810a040:	d826      	bhi.n	810a090 <UART_SetConfig+0x52c>
 810a042:	a201      	add	r2, pc, #4	; (adr r2, 810a048 <UART_SetConfig+0x4e4>)
 810a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a048:	0810a061 	.word	0x0810a061
 810a04c:	0810a069 	.word	0x0810a069
 810a050:	0810a071 	.word	0x0810a071
 810a054:	0810a079 	.word	0x0810a079
 810a058:	0810a081 	.word	0x0810a081
 810a05c:	0810a089 	.word	0x0810a089
 810a060:	2300      	movs	r3, #0
 810a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a066:	e050      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a068:	2304      	movs	r3, #4
 810a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a06e:	e04c      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a070:	2308      	movs	r3, #8
 810a072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a076:	e048      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a078:	2310      	movs	r3, #16
 810a07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a07e:	e044      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a080:	2320      	movs	r3, #32
 810a082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a086:	e040      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a088:	2340      	movs	r3, #64	; 0x40
 810a08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a08e:	e03c      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a090:	2380      	movs	r3, #128	; 0x80
 810a092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a096:	e038      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a098:	697b      	ldr	r3, [r7, #20]
 810a09a:	681b      	ldr	r3, [r3, #0]
 810a09c:	4a5b      	ldr	r2, [pc, #364]	; (810a20c <UART_SetConfig+0x6a8>)
 810a09e:	4293      	cmp	r3, r2
 810a0a0:	d130      	bne.n	810a104 <UART_SetConfig+0x5a0>
 810a0a2:	4b57      	ldr	r3, [pc, #348]	; (810a200 <UART_SetConfig+0x69c>)
 810a0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a0a6:	f003 0307 	and.w	r3, r3, #7
 810a0aa:	2b05      	cmp	r3, #5
 810a0ac:	d826      	bhi.n	810a0fc <UART_SetConfig+0x598>
 810a0ae:	a201      	add	r2, pc, #4	; (adr r2, 810a0b4 <UART_SetConfig+0x550>)
 810a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a0b4:	0810a0cd 	.word	0x0810a0cd
 810a0b8:	0810a0d5 	.word	0x0810a0d5
 810a0bc:	0810a0dd 	.word	0x0810a0dd
 810a0c0:	0810a0e5 	.word	0x0810a0e5
 810a0c4:	0810a0ed 	.word	0x0810a0ed
 810a0c8:	0810a0f5 	.word	0x0810a0f5
 810a0cc:	2302      	movs	r3, #2
 810a0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0d2:	e01a      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0d4:	2304      	movs	r3, #4
 810a0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0da:	e016      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0dc:	2308      	movs	r3, #8
 810a0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0e2:	e012      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0e4:	2310      	movs	r3, #16
 810a0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0ea:	e00e      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0ec:	2320      	movs	r3, #32
 810a0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0f2:	e00a      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0f4:	2340      	movs	r3, #64	; 0x40
 810a0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a0fa:	e006      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a0fc:	2380      	movs	r3, #128	; 0x80
 810a0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810a102:	e002      	b.n	810a10a <UART_SetConfig+0x5a6>
 810a104:	2380      	movs	r3, #128	; 0x80
 810a106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a10a:	697b      	ldr	r3, [r7, #20]
 810a10c:	681b      	ldr	r3, [r3, #0]
 810a10e:	4a3f      	ldr	r2, [pc, #252]	; (810a20c <UART_SetConfig+0x6a8>)
 810a110:	4293      	cmp	r3, r2
 810a112:	f040 80f8 	bne.w	810a306 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a116:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a11a:	2b20      	cmp	r3, #32
 810a11c:	dc46      	bgt.n	810a1ac <UART_SetConfig+0x648>
 810a11e:	2b02      	cmp	r3, #2
 810a120:	f2c0 8082 	blt.w	810a228 <UART_SetConfig+0x6c4>
 810a124:	3b02      	subs	r3, #2
 810a126:	2b1e      	cmp	r3, #30
 810a128:	d87e      	bhi.n	810a228 <UART_SetConfig+0x6c4>
 810a12a:	a201      	add	r2, pc, #4	; (adr r2, 810a130 <UART_SetConfig+0x5cc>)
 810a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a130:	0810a1b3 	.word	0x0810a1b3
 810a134:	0810a229 	.word	0x0810a229
 810a138:	0810a1bb 	.word	0x0810a1bb
 810a13c:	0810a229 	.word	0x0810a229
 810a140:	0810a229 	.word	0x0810a229
 810a144:	0810a229 	.word	0x0810a229
 810a148:	0810a1cb 	.word	0x0810a1cb
 810a14c:	0810a229 	.word	0x0810a229
 810a150:	0810a229 	.word	0x0810a229
 810a154:	0810a229 	.word	0x0810a229
 810a158:	0810a229 	.word	0x0810a229
 810a15c:	0810a229 	.word	0x0810a229
 810a160:	0810a229 	.word	0x0810a229
 810a164:	0810a229 	.word	0x0810a229
 810a168:	0810a1db 	.word	0x0810a1db
 810a16c:	0810a229 	.word	0x0810a229
 810a170:	0810a229 	.word	0x0810a229
 810a174:	0810a229 	.word	0x0810a229
 810a178:	0810a229 	.word	0x0810a229
 810a17c:	0810a229 	.word	0x0810a229
 810a180:	0810a229 	.word	0x0810a229
 810a184:	0810a229 	.word	0x0810a229
 810a188:	0810a229 	.word	0x0810a229
 810a18c:	0810a229 	.word	0x0810a229
 810a190:	0810a229 	.word	0x0810a229
 810a194:	0810a229 	.word	0x0810a229
 810a198:	0810a229 	.word	0x0810a229
 810a19c:	0810a229 	.word	0x0810a229
 810a1a0:	0810a229 	.word	0x0810a229
 810a1a4:	0810a229 	.word	0x0810a229
 810a1a8:	0810a21b 	.word	0x0810a21b
 810a1ac:	2b40      	cmp	r3, #64	; 0x40
 810a1ae:	d037      	beq.n	810a220 <UART_SetConfig+0x6bc>
 810a1b0:	e03a      	b.n	810a228 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a1b2:	f7fe fa99 	bl	81086e8 <HAL_RCCEx_GetD3PCLK1Freq>
 810a1b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a1b8:	e03c      	b.n	810a234 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a1ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a1be:	4618      	mov	r0, r3
 810a1c0:	f7fe faa8 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a1c8:	e034      	b.n	810a234 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a1ca:	f107 0318 	add.w	r3, r7, #24
 810a1ce:	4618      	mov	r0, r3
 810a1d0:	f7fe fbf4 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a1d4:	69fb      	ldr	r3, [r7, #28]
 810a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a1d8:	e02c      	b.n	810a234 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a1da:	4b09      	ldr	r3, [pc, #36]	; (810a200 <UART_SetConfig+0x69c>)
 810a1dc:	681b      	ldr	r3, [r3, #0]
 810a1de:	f003 0320 	and.w	r3, r3, #32
 810a1e2:	2b00      	cmp	r3, #0
 810a1e4:	d016      	beq.n	810a214 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a1e6:	4b06      	ldr	r3, [pc, #24]	; (810a200 <UART_SetConfig+0x69c>)
 810a1e8:	681b      	ldr	r3, [r3, #0]
 810a1ea:	08db      	lsrs	r3, r3, #3
 810a1ec:	f003 0303 	and.w	r3, r3, #3
 810a1f0:	4a07      	ldr	r2, [pc, #28]	; (810a210 <UART_SetConfig+0x6ac>)
 810a1f2:	fa22 f303 	lsr.w	r3, r2, r3
 810a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a1f8:	e01c      	b.n	810a234 <UART_SetConfig+0x6d0>
 810a1fa:	bf00      	nop
 810a1fc:	40011400 	.word	0x40011400
 810a200:	58024400 	.word	0x58024400
 810a204:	40007800 	.word	0x40007800
 810a208:	40007c00 	.word	0x40007c00
 810a20c:	58000c00 	.word	0x58000c00
 810a210:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a214:	4b9d      	ldr	r3, [pc, #628]	; (810a48c <UART_SetConfig+0x928>)
 810a216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a218:	e00c      	b.n	810a234 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a21a:	4b9d      	ldr	r3, [pc, #628]	; (810a490 <UART_SetConfig+0x92c>)
 810a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a21e:	e009      	b.n	810a234 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a220:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a226:	e005      	b.n	810a234 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a228:	2300      	movs	r3, #0
 810a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a22c:	2301      	movs	r3, #1
 810a22e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a232:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a236:	2b00      	cmp	r3, #0
 810a238:	f000 81de 	beq.w	810a5f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a23c:	697b      	ldr	r3, [r7, #20]
 810a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a240:	4a94      	ldr	r2, [pc, #592]	; (810a494 <UART_SetConfig+0x930>)
 810a242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a246:	461a      	mov	r2, r3
 810a248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a24a:	fbb3 f3f2 	udiv	r3, r3, r2
 810a24e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a250:	697b      	ldr	r3, [r7, #20]
 810a252:	685a      	ldr	r2, [r3, #4]
 810a254:	4613      	mov	r3, r2
 810a256:	005b      	lsls	r3, r3, #1
 810a258:	4413      	add	r3, r2
 810a25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a25c:	429a      	cmp	r2, r3
 810a25e:	d305      	bcc.n	810a26c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a260:	697b      	ldr	r3, [r7, #20]
 810a262:	685b      	ldr	r3, [r3, #4]
 810a264:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a268:	429a      	cmp	r2, r3
 810a26a:	d903      	bls.n	810a274 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a26c:	2301      	movs	r3, #1
 810a26e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a272:	e1c1      	b.n	810a5f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a276:	2200      	movs	r2, #0
 810a278:	60bb      	str	r3, [r7, #8]
 810a27a:	60fa      	str	r2, [r7, #12]
 810a27c:	697b      	ldr	r3, [r7, #20]
 810a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a280:	4a84      	ldr	r2, [pc, #528]	; (810a494 <UART_SetConfig+0x930>)
 810a282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a286:	b29b      	uxth	r3, r3
 810a288:	2200      	movs	r2, #0
 810a28a:	603b      	str	r3, [r7, #0]
 810a28c:	607a      	str	r2, [r7, #4]
 810a28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a296:	f7f6 f873 	bl	8100380 <__aeabi_uldivmod>
 810a29a:	4602      	mov	r2, r0
 810a29c:	460b      	mov	r3, r1
 810a29e:	4610      	mov	r0, r2
 810a2a0:	4619      	mov	r1, r3
 810a2a2:	f04f 0200 	mov.w	r2, #0
 810a2a6:	f04f 0300 	mov.w	r3, #0
 810a2aa:	020b      	lsls	r3, r1, #8
 810a2ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a2b0:	0202      	lsls	r2, r0, #8
 810a2b2:	6979      	ldr	r1, [r7, #20]
 810a2b4:	6849      	ldr	r1, [r1, #4]
 810a2b6:	0849      	lsrs	r1, r1, #1
 810a2b8:	2000      	movs	r0, #0
 810a2ba:	460c      	mov	r4, r1
 810a2bc:	4605      	mov	r5, r0
 810a2be:	eb12 0804 	adds.w	r8, r2, r4
 810a2c2:	eb43 0905 	adc.w	r9, r3, r5
 810a2c6:	697b      	ldr	r3, [r7, #20]
 810a2c8:	685b      	ldr	r3, [r3, #4]
 810a2ca:	2200      	movs	r2, #0
 810a2cc:	469a      	mov	sl, r3
 810a2ce:	4693      	mov	fp, r2
 810a2d0:	4652      	mov	r2, sl
 810a2d2:	465b      	mov	r3, fp
 810a2d4:	4640      	mov	r0, r8
 810a2d6:	4649      	mov	r1, r9
 810a2d8:	f7f6 f852 	bl	8100380 <__aeabi_uldivmod>
 810a2dc:	4602      	mov	r2, r0
 810a2de:	460b      	mov	r3, r1
 810a2e0:	4613      	mov	r3, r2
 810a2e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a2e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810a2ea:	d308      	bcc.n	810a2fe <UART_SetConfig+0x79a>
 810a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a2ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a2f2:	d204      	bcs.n	810a2fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a2f4:	697b      	ldr	r3, [r7, #20]
 810a2f6:	681b      	ldr	r3, [r3, #0]
 810a2f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810a2fa:	60da      	str	r2, [r3, #12]
 810a2fc:	e17c      	b.n	810a5f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a2fe:	2301      	movs	r3, #1
 810a300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a304:	e178      	b.n	810a5f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a306:	697b      	ldr	r3, [r7, #20]
 810a308:	69db      	ldr	r3, [r3, #28]
 810a30a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810a30e:	f040 80c5 	bne.w	810a49c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a312:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a316:	2b20      	cmp	r3, #32
 810a318:	dc48      	bgt.n	810a3ac <UART_SetConfig+0x848>
 810a31a:	2b00      	cmp	r3, #0
 810a31c:	db7b      	blt.n	810a416 <UART_SetConfig+0x8b2>
 810a31e:	2b20      	cmp	r3, #32
 810a320:	d879      	bhi.n	810a416 <UART_SetConfig+0x8b2>
 810a322:	a201      	add	r2, pc, #4	; (adr r2, 810a328 <UART_SetConfig+0x7c4>)
 810a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a328:	0810a3b3 	.word	0x0810a3b3
 810a32c:	0810a3bb 	.word	0x0810a3bb
 810a330:	0810a417 	.word	0x0810a417
 810a334:	0810a417 	.word	0x0810a417
 810a338:	0810a3c3 	.word	0x0810a3c3
 810a33c:	0810a417 	.word	0x0810a417
 810a340:	0810a417 	.word	0x0810a417
 810a344:	0810a417 	.word	0x0810a417
 810a348:	0810a3d3 	.word	0x0810a3d3
 810a34c:	0810a417 	.word	0x0810a417
 810a350:	0810a417 	.word	0x0810a417
 810a354:	0810a417 	.word	0x0810a417
 810a358:	0810a417 	.word	0x0810a417
 810a35c:	0810a417 	.word	0x0810a417
 810a360:	0810a417 	.word	0x0810a417
 810a364:	0810a417 	.word	0x0810a417
 810a368:	0810a3e3 	.word	0x0810a3e3
 810a36c:	0810a417 	.word	0x0810a417
 810a370:	0810a417 	.word	0x0810a417
 810a374:	0810a417 	.word	0x0810a417
 810a378:	0810a417 	.word	0x0810a417
 810a37c:	0810a417 	.word	0x0810a417
 810a380:	0810a417 	.word	0x0810a417
 810a384:	0810a417 	.word	0x0810a417
 810a388:	0810a417 	.word	0x0810a417
 810a38c:	0810a417 	.word	0x0810a417
 810a390:	0810a417 	.word	0x0810a417
 810a394:	0810a417 	.word	0x0810a417
 810a398:	0810a417 	.word	0x0810a417
 810a39c:	0810a417 	.word	0x0810a417
 810a3a0:	0810a417 	.word	0x0810a417
 810a3a4:	0810a417 	.word	0x0810a417
 810a3a8:	0810a409 	.word	0x0810a409
 810a3ac:	2b40      	cmp	r3, #64	; 0x40
 810a3ae:	d02e      	beq.n	810a40e <UART_SetConfig+0x8aa>
 810a3b0:	e031      	b.n	810a416 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a3b2:	f7fc f9e3 	bl	810677c <HAL_RCC_GetPCLK1Freq>
 810a3b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a3b8:	e033      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a3ba:	f7fc f9f5 	bl	81067a8 <HAL_RCC_GetPCLK2Freq>
 810a3be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a3c0:	e02f      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a3c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a3c6:	4618      	mov	r0, r3
 810a3c8:	f7fe f9a4 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3d0:	e027      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a3d2:	f107 0318 	add.w	r3, r7, #24
 810a3d6:	4618      	mov	r0, r3
 810a3d8:	f7fe faf0 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a3dc:	69fb      	ldr	r3, [r7, #28]
 810a3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a3e0:	e01f      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a3e2:	4b2d      	ldr	r3, [pc, #180]	; (810a498 <UART_SetConfig+0x934>)
 810a3e4:	681b      	ldr	r3, [r3, #0]
 810a3e6:	f003 0320 	and.w	r3, r3, #32
 810a3ea:	2b00      	cmp	r3, #0
 810a3ec:	d009      	beq.n	810a402 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a3ee:	4b2a      	ldr	r3, [pc, #168]	; (810a498 <UART_SetConfig+0x934>)
 810a3f0:	681b      	ldr	r3, [r3, #0]
 810a3f2:	08db      	lsrs	r3, r3, #3
 810a3f4:	f003 0303 	and.w	r3, r3, #3
 810a3f8:	4a24      	ldr	r2, [pc, #144]	; (810a48c <UART_SetConfig+0x928>)
 810a3fa:	fa22 f303 	lsr.w	r3, r2, r3
 810a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a400:	e00f      	b.n	810a422 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810a402:	4b22      	ldr	r3, [pc, #136]	; (810a48c <UART_SetConfig+0x928>)
 810a404:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a406:	e00c      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a408:	4b21      	ldr	r3, [pc, #132]	; (810a490 <UART_SetConfig+0x92c>)
 810a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a40c:	e009      	b.n	810a422 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a40e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a414:	e005      	b.n	810a422 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810a416:	2300      	movs	r3, #0
 810a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a41a:	2301      	movs	r3, #1
 810a41c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810a422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a424:	2b00      	cmp	r3, #0
 810a426:	f000 80e7 	beq.w	810a5f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a42a:	697b      	ldr	r3, [r7, #20]
 810a42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a42e:	4a19      	ldr	r2, [pc, #100]	; (810a494 <UART_SetConfig+0x930>)
 810a430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a434:	461a      	mov	r2, r3
 810a436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a438:	fbb3 f3f2 	udiv	r3, r3, r2
 810a43c:	005a      	lsls	r2, r3, #1
 810a43e:	697b      	ldr	r3, [r7, #20]
 810a440:	685b      	ldr	r3, [r3, #4]
 810a442:	085b      	lsrs	r3, r3, #1
 810a444:	441a      	add	r2, r3
 810a446:	697b      	ldr	r3, [r7, #20]
 810a448:	685b      	ldr	r3, [r3, #4]
 810a44a:	fbb2 f3f3 	udiv	r3, r2, r3
 810a44e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a452:	2b0f      	cmp	r3, #15
 810a454:	d916      	bls.n	810a484 <UART_SetConfig+0x920>
 810a456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a45c:	d212      	bcs.n	810a484 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a460:	b29b      	uxth	r3, r3
 810a462:	f023 030f 	bic.w	r3, r3, #15
 810a466:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a46a:	085b      	lsrs	r3, r3, #1
 810a46c:	b29b      	uxth	r3, r3
 810a46e:	f003 0307 	and.w	r3, r3, #7
 810a472:	b29a      	uxth	r2, r3
 810a474:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810a476:	4313      	orrs	r3, r2
 810a478:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810a47a:	697b      	ldr	r3, [r7, #20]
 810a47c:	681b      	ldr	r3, [r3, #0]
 810a47e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810a480:	60da      	str	r2, [r3, #12]
 810a482:	e0b9      	b.n	810a5f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a484:	2301      	movs	r3, #1
 810a486:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810a48a:	e0b5      	b.n	810a5f8 <UART_SetConfig+0xa94>
 810a48c:	03d09000 	.word	0x03d09000
 810a490:	003d0900 	.word	0x003d0900
 810a494:	0810c3e4 	.word	0x0810c3e4
 810a498:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810a49c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810a4a0:	2b20      	cmp	r3, #32
 810a4a2:	dc49      	bgt.n	810a538 <UART_SetConfig+0x9d4>
 810a4a4:	2b00      	cmp	r3, #0
 810a4a6:	db7c      	blt.n	810a5a2 <UART_SetConfig+0xa3e>
 810a4a8:	2b20      	cmp	r3, #32
 810a4aa:	d87a      	bhi.n	810a5a2 <UART_SetConfig+0xa3e>
 810a4ac:	a201      	add	r2, pc, #4	; (adr r2, 810a4b4 <UART_SetConfig+0x950>)
 810a4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4b2:	bf00      	nop
 810a4b4:	0810a53f 	.word	0x0810a53f
 810a4b8:	0810a547 	.word	0x0810a547
 810a4bc:	0810a5a3 	.word	0x0810a5a3
 810a4c0:	0810a5a3 	.word	0x0810a5a3
 810a4c4:	0810a54f 	.word	0x0810a54f
 810a4c8:	0810a5a3 	.word	0x0810a5a3
 810a4cc:	0810a5a3 	.word	0x0810a5a3
 810a4d0:	0810a5a3 	.word	0x0810a5a3
 810a4d4:	0810a55f 	.word	0x0810a55f
 810a4d8:	0810a5a3 	.word	0x0810a5a3
 810a4dc:	0810a5a3 	.word	0x0810a5a3
 810a4e0:	0810a5a3 	.word	0x0810a5a3
 810a4e4:	0810a5a3 	.word	0x0810a5a3
 810a4e8:	0810a5a3 	.word	0x0810a5a3
 810a4ec:	0810a5a3 	.word	0x0810a5a3
 810a4f0:	0810a5a3 	.word	0x0810a5a3
 810a4f4:	0810a56f 	.word	0x0810a56f
 810a4f8:	0810a5a3 	.word	0x0810a5a3
 810a4fc:	0810a5a3 	.word	0x0810a5a3
 810a500:	0810a5a3 	.word	0x0810a5a3
 810a504:	0810a5a3 	.word	0x0810a5a3
 810a508:	0810a5a3 	.word	0x0810a5a3
 810a50c:	0810a5a3 	.word	0x0810a5a3
 810a510:	0810a5a3 	.word	0x0810a5a3
 810a514:	0810a5a3 	.word	0x0810a5a3
 810a518:	0810a5a3 	.word	0x0810a5a3
 810a51c:	0810a5a3 	.word	0x0810a5a3
 810a520:	0810a5a3 	.word	0x0810a5a3
 810a524:	0810a5a3 	.word	0x0810a5a3
 810a528:	0810a5a3 	.word	0x0810a5a3
 810a52c:	0810a5a3 	.word	0x0810a5a3
 810a530:	0810a5a3 	.word	0x0810a5a3
 810a534:	0810a595 	.word	0x0810a595
 810a538:	2b40      	cmp	r3, #64	; 0x40
 810a53a:	d02e      	beq.n	810a59a <UART_SetConfig+0xa36>
 810a53c:	e031      	b.n	810a5a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810a53e:	f7fc f91d 	bl	810677c <HAL_RCC_GetPCLK1Freq>
 810a542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a544:	e033      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810a546:	f7fc f92f 	bl	81067a8 <HAL_RCC_GetPCLK2Freq>
 810a54a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810a54c:	e02f      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810a552:	4618      	mov	r0, r3
 810a554:	f7fe f8de 	bl	8108714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a55c:	e027      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a55e:	f107 0318 	add.w	r3, r7, #24
 810a562:	4618      	mov	r0, r3
 810a564:	f7fe fa2a 	bl	81089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a568:	69fb      	ldr	r3, [r7, #28]
 810a56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a56c:	e01f      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a56e:	4b2d      	ldr	r3, [pc, #180]	; (810a624 <UART_SetConfig+0xac0>)
 810a570:	681b      	ldr	r3, [r3, #0]
 810a572:	f003 0320 	and.w	r3, r3, #32
 810a576:	2b00      	cmp	r3, #0
 810a578:	d009      	beq.n	810a58e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a57a:	4b2a      	ldr	r3, [pc, #168]	; (810a624 <UART_SetConfig+0xac0>)
 810a57c:	681b      	ldr	r3, [r3, #0]
 810a57e:	08db      	lsrs	r3, r3, #3
 810a580:	f003 0303 	and.w	r3, r3, #3
 810a584:	4a28      	ldr	r2, [pc, #160]	; (810a628 <UART_SetConfig+0xac4>)
 810a586:	fa22 f303 	lsr.w	r3, r2, r3
 810a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a58c:	e00f      	b.n	810a5ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810a58e:	4b26      	ldr	r3, [pc, #152]	; (810a628 <UART_SetConfig+0xac4>)
 810a590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a592:	e00c      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a594:	4b25      	ldr	r3, [pc, #148]	; (810a62c <UART_SetConfig+0xac8>)
 810a596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a598:	e009      	b.n	810a5ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810a5a0:	e005      	b.n	810a5ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810a5a2:	2300      	movs	r3, #0
 810a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810a5a6:	2301      	movs	r3, #1
 810a5a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810a5ac:	bf00      	nop
    }

    if (pclk != 0U)
 810a5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a5b0:	2b00      	cmp	r3, #0
 810a5b2:	d021      	beq.n	810a5f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a5b4:	697b      	ldr	r3, [r7, #20]
 810a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a5b8:	4a1d      	ldr	r2, [pc, #116]	; (810a630 <UART_SetConfig+0xacc>)
 810a5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a5be:	461a      	mov	r2, r3
 810a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a5c2:	fbb3 f2f2 	udiv	r2, r3, r2
 810a5c6:	697b      	ldr	r3, [r7, #20]
 810a5c8:	685b      	ldr	r3, [r3, #4]
 810a5ca:	085b      	lsrs	r3, r3, #1
 810a5cc:	441a      	add	r2, r3
 810a5ce:	697b      	ldr	r3, [r7, #20]
 810a5d0:	685b      	ldr	r3, [r3, #4]
 810a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 810a5d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810a5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a5da:	2b0f      	cmp	r3, #15
 810a5dc:	d909      	bls.n	810a5f2 <UART_SetConfig+0xa8e>
 810a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a5e4:	d205      	bcs.n	810a5f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810a5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a5e8:	b29a      	uxth	r2, r3
 810a5ea:	697b      	ldr	r3, [r7, #20]
 810a5ec:	681b      	ldr	r3, [r3, #0]
 810a5ee:	60da      	str	r2, [r3, #12]
 810a5f0:	e002      	b.n	810a5f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810a5f2:	2301      	movs	r3, #1
 810a5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810a5f8:	697b      	ldr	r3, [r7, #20]
 810a5fa:	2201      	movs	r2, #1
 810a5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810a600:	697b      	ldr	r3, [r7, #20]
 810a602:	2201      	movs	r2, #1
 810a604:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810a608:	697b      	ldr	r3, [r7, #20]
 810a60a:	2200      	movs	r2, #0
 810a60c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810a60e:	697b      	ldr	r3, [r7, #20]
 810a610:	2200      	movs	r2, #0
 810a612:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 810a614:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810a618:	4618      	mov	r0, r3
 810a61a:	3748      	adds	r7, #72	; 0x48
 810a61c:	46bd      	mov	sp, r7
 810a61e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810a622:	bf00      	nop
 810a624:	58024400 	.word	0x58024400
 810a628:	03d09000 	.word	0x03d09000
 810a62c:	003d0900 	.word	0x003d0900
 810a630:	0810c3e4 	.word	0x0810c3e4

0810a634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810a634:	b480      	push	{r7}
 810a636:	b083      	sub	sp, #12
 810a638:	af00      	add	r7, sp, #0
 810a63a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810a63c:	687b      	ldr	r3, [r7, #4]
 810a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a640:	f003 0301 	and.w	r3, r3, #1
 810a644:	2b00      	cmp	r3, #0
 810a646:	d00a      	beq.n	810a65e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810a648:	687b      	ldr	r3, [r7, #4]
 810a64a:	681b      	ldr	r3, [r3, #0]
 810a64c:	685b      	ldr	r3, [r3, #4]
 810a64e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810a652:	687b      	ldr	r3, [r7, #4]
 810a654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a656:	687b      	ldr	r3, [r7, #4]
 810a658:	681b      	ldr	r3, [r3, #0]
 810a65a:	430a      	orrs	r2, r1
 810a65c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810a65e:	687b      	ldr	r3, [r7, #4]
 810a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a662:	f003 0302 	and.w	r3, r3, #2
 810a666:	2b00      	cmp	r3, #0
 810a668:	d00a      	beq.n	810a680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810a66a:	687b      	ldr	r3, [r7, #4]
 810a66c:	681b      	ldr	r3, [r3, #0]
 810a66e:	685b      	ldr	r3, [r3, #4]
 810a670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810a674:	687b      	ldr	r3, [r7, #4]
 810a676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810a678:	687b      	ldr	r3, [r7, #4]
 810a67a:	681b      	ldr	r3, [r3, #0]
 810a67c:	430a      	orrs	r2, r1
 810a67e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810a680:	687b      	ldr	r3, [r7, #4]
 810a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a684:	f003 0304 	and.w	r3, r3, #4
 810a688:	2b00      	cmp	r3, #0
 810a68a:	d00a      	beq.n	810a6a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810a68c:	687b      	ldr	r3, [r7, #4]
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	685b      	ldr	r3, [r3, #4]
 810a692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810a696:	687b      	ldr	r3, [r7, #4]
 810a698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810a69a:	687b      	ldr	r3, [r7, #4]
 810a69c:	681b      	ldr	r3, [r3, #0]
 810a69e:	430a      	orrs	r2, r1
 810a6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810a6a2:	687b      	ldr	r3, [r7, #4]
 810a6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6a6:	f003 0308 	and.w	r3, r3, #8
 810a6aa:	2b00      	cmp	r3, #0
 810a6ac:	d00a      	beq.n	810a6c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810a6ae:	687b      	ldr	r3, [r7, #4]
 810a6b0:	681b      	ldr	r3, [r3, #0]
 810a6b2:	685b      	ldr	r3, [r3, #4]
 810a6b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810a6b8:	687b      	ldr	r3, [r7, #4]
 810a6ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a6bc:	687b      	ldr	r3, [r7, #4]
 810a6be:	681b      	ldr	r3, [r3, #0]
 810a6c0:	430a      	orrs	r2, r1
 810a6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6c8:	f003 0310 	and.w	r3, r3, #16
 810a6cc:	2b00      	cmp	r3, #0
 810a6ce:	d00a      	beq.n	810a6e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	681b      	ldr	r3, [r3, #0]
 810a6d4:	689b      	ldr	r3, [r3, #8]
 810a6d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810a6da:	687b      	ldr	r3, [r7, #4]
 810a6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810a6de:	687b      	ldr	r3, [r7, #4]
 810a6e0:	681b      	ldr	r3, [r3, #0]
 810a6e2:	430a      	orrs	r2, r1
 810a6e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810a6e6:	687b      	ldr	r3, [r7, #4]
 810a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a6ea:	f003 0320 	and.w	r3, r3, #32
 810a6ee:	2b00      	cmp	r3, #0
 810a6f0:	d00a      	beq.n	810a708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810a6f2:	687b      	ldr	r3, [r7, #4]
 810a6f4:	681b      	ldr	r3, [r3, #0]
 810a6f6:	689b      	ldr	r3, [r3, #8]
 810a6f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810a700:	687b      	ldr	r3, [r7, #4]
 810a702:	681b      	ldr	r3, [r3, #0]
 810a704:	430a      	orrs	r2, r1
 810a706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810a708:	687b      	ldr	r3, [r7, #4]
 810a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810a710:	2b00      	cmp	r3, #0
 810a712:	d01a      	beq.n	810a74a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	681b      	ldr	r3, [r3, #0]
 810a718:	685b      	ldr	r3, [r3, #4]
 810a71a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810a71e:	687b      	ldr	r3, [r7, #4]
 810a720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	681b      	ldr	r3, [r3, #0]
 810a726:	430a      	orrs	r2, r1
 810a728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810a72a:	687b      	ldr	r3, [r7, #4]
 810a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810a72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a732:	d10a      	bne.n	810a74a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810a734:	687b      	ldr	r3, [r7, #4]
 810a736:	681b      	ldr	r3, [r3, #0]
 810a738:	685b      	ldr	r3, [r3, #4]
 810a73a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810a73e:	687b      	ldr	r3, [r7, #4]
 810a740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810a742:	687b      	ldr	r3, [r7, #4]
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	430a      	orrs	r2, r1
 810a748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810a74a:	687b      	ldr	r3, [r7, #4]
 810a74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810a752:	2b00      	cmp	r3, #0
 810a754:	d00a      	beq.n	810a76c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	681b      	ldr	r3, [r3, #0]
 810a75a:	685b      	ldr	r3, [r3, #4]
 810a75c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810a760:	687b      	ldr	r3, [r7, #4]
 810a762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a764:	687b      	ldr	r3, [r7, #4]
 810a766:	681b      	ldr	r3, [r3, #0]
 810a768:	430a      	orrs	r2, r1
 810a76a:	605a      	str	r2, [r3, #4]
  }
}
 810a76c:	bf00      	nop
 810a76e:	370c      	adds	r7, #12
 810a770:	46bd      	mov	sp, r7
 810a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a776:	4770      	bx	lr

0810a778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810a778:	b580      	push	{r7, lr}
 810a77a:	b098      	sub	sp, #96	; 0x60
 810a77c:	af02      	add	r7, sp, #8
 810a77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810a780:	687b      	ldr	r3, [r7, #4]
 810a782:	2200      	movs	r2, #0
 810a784:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810a788:	f7f7 fd62 	bl	8102250 <HAL_GetTick>
 810a78c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	681b      	ldr	r3, [r3, #0]
 810a792:	681b      	ldr	r3, [r3, #0]
 810a794:	f003 0308 	and.w	r3, r3, #8
 810a798:	2b08      	cmp	r3, #8
 810a79a:	d12f      	bne.n	810a7fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a79c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a7a0:	9300      	str	r3, [sp, #0]
 810a7a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a7a4:	2200      	movs	r2, #0
 810a7a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810a7aa:	6878      	ldr	r0, [r7, #4]
 810a7ac:	f000 f88e 	bl	810a8cc <UART_WaitOnFlagUntilTimeout>
 810a7b0:	4603      	mov	r3, r0
 810a7b2:	2b00      	cmp	r3, #0
 810a7b4:	d022      	beq.n	810a7fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810a7b6:	687b      	ldr	r3, [r7, #4]
 810a7b8:	681b      	ldr	r3, [r3, #0]
 810a7ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a7be:	e853 3f00 	ldrex	r3, [r3]
 810a7c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 810a7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a7c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810a7ca:	653b      	str	r3, [r7, #80]	; 0x50
 810a7cc:	687b      	ldr	r3, [r7, #4]
 810a7ce:	681b      	ldr	r3, [r3, #0]
 810a7d0:	461a      	mov	r2, r3
 810a7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810a7d4:	647b      	str	r3, [r7, #68]	; 0x44
 810a7d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a7d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810a7da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810a7dc:	e841 2300 	strex	r3, r2, [r1]
 810a7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810a7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810a7e4:	2b00      	cmp	r3, #0
 810a7e6:	d1e6      	bne.n	810a7b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810a7e8:	687b      	ldr	r3, [r7, #4]
 810a7ea:	2220      	movs	r2, #32
 810a7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810a7f0:	687b      	ldr	r3, [r7, #4]
 810a7f2:	2200      	movs	r2, #0
 810a7f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a7f8:	2303      	movs	r3, #3
 810a7fa:	e063      	b.n	810a8c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	681b      	ldr	r3, [r3, #0]
 810a800:	681b      	ldr	r3, [r3, #0]
 810a802:	f003 0304 	and.w	r3, r3, #4
 810a806:	2b04      	cmp	r3, #4
 810a808:	d149      	bne.n	810a89e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810a80a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810a80e:	9300      	str	r3, [sp, #0]
 810a810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810a812:	2200      	movs	r2, #0
 810a814:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810a818:	6878      	ldr	r0, [r7, #4]
 810a81a:	f000 f857 	bl	810a8cc <UART_WaitOnFlagUntilTimeout>
 810a81e:	4603      	mov	r3, r0
 810a820:	2b00      	cmp	r3, #0
 810a822:	d03c      	beq.n	810a89e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a824:	687b      	ldr	r3, [r7, #4]
 810a826:	681b      	ldr	r3, [r3, #0]
 810a828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a82c:	e853 3f00 	ldrex	r3, [r3]
 810a830:	623b      	str	r3, [r7, #32]
   return(result);
 810a832:	6a3b      	ldr	r3, [r7, #32]
 810a834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810a838:	64fb      	str	r3, [r7, #76]	; 0x4c
 810a83a:	687b      	ldr	r3, [r7, #4]
 810a83c:	681b      	ldr	r3, [r3, #0]
 810a83e:	461a      	mov	r2, r3
 810a840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a842:	633b      	str	r3, [r7, #48]	; 0x30
 810a844:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810a848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810a84a:	e841 2300 	strex	r3, r2, [r1]
 810a84e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a852:	2b00      	cmp	r3, #0
 810a854:	d1e6      	bne.n	810a824 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810a856:	687b      	ldr	r3, [r7, #4]
 810a858:	681b      	ldr	r3, [r3, #0]
 810a85a:	3308      	adds	r3, #8
 810a85c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a85e:	693b      	ldr	r3, [r7, #16]
 810a860:	e853 3f00 	ldrex	r3, [r3]
 810a864:	60fb      	str	r3, [r7, #12]
   return(result);
 810a866:	68fb      	ldr	r3, [r7, #12]
 810a868:	f023 0301 	bic.w	r3, r3, #1
 810a86c:	64bb      	str	r3, [r7, #72]	; 0x48
 810a86e:	687b      	ldr	r3, [r7, #4]
 810a870:	681b      	ldr	r3, [r3, #0]
 810a872:	3308      	adds	r3, #8
 810a874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a876:	61fa      	str	r2, [r7, #28]
 810a878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a87a:	69b9      	ldr	r1, [r7, #24]
 810a87c:	69fa      	ldr	r2, [r7, #28]
 810a87e:	e841 2300 	strex	r3, r2, [r1]
 810a882:	617b      	str	r3, [r7, #20]
   return(result);
 810a884:	697b      	ldr	r3, [r7, #20]
 810a886:	2b00      	cmp	r3, #0
 810a888:	d1e5      	bne.n	810a856 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810a88a:	687b      	ldr	r3, [r7, #4]
 810a88c:	2220      	movs	r2, #32
 810a88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	2200      	movs	r2, #0
 810a896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810a89a:	2303      	movs	r3, #3
 810a89c:	e012      	b.n	810a8c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810a89e:	687b      	ldr	r3, [r7, #4]
 810a8a0:	2220      	movs	r2, #32
 810a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810a8a6:	687b      	ldr	r3, [r7, #4]
 810a8a8:	2220      	movs	r2, #32
 810a8aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a8ae:	687b      	ldr	r3, [r7, #4]
 810a8b0:	2200      	movs	r2, #0
 810a8b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810a8b4:	687b      	ldr	r3, [r7, #4]
 810a8b6:	2200      	movs	r2, #0
 810a8b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810a8ba:	687b      	ldr	r3, [r7, #4]
 810a8bc:	2200      	movs	r2, #0
 810a8be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810a8c2:	2300      	movs	r3, #0
}
 810a8c4:	4618      	mov	r0, r3
 810a8c6:	3758      	adds	r7, #88	; 0x58
 810a8c8:	46bd      	mov	sp, r7
 810a8ca:	bd80      	pop	{r7, pc}

0810a8cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810a8cc:	b580      	push	{r7, lr}
 810a8ce:	b084      	sub	sp, #16
 810a8d0:	af00      	add	r7, sp, #0
 810a8d2:	60f8      	str	r0, [r7, #12]
 810a8d4:	60b9      	str	r1, [r7, #8]
 810a8d6:	603b      	str	r3, [r7, #0]
 810a8d8:	4613      	mov	r3, r2
 810a8da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a8dc:	e049      	b.n	810a972 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810a8de:	69bb      	ldr	r3, [r7, #24]
 810a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a8e4:	d045      	beq.n	810a972 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810a8e6:	f7f7 fcb3 	bl	8102250 <HAL_GetTick>
 810a8ea:	4602      	mov	r2, r0
 810a8ec:	683b      	ldr	r3, [r7, #0]
 810a8ee:	1ad3      	subs	r3, r2, r3
 810a8f0:	69ba      	ldr	r2, [r7, #24]
 810a8f2:	429a      	cmp	r2, r3
 810a8f4:	d302      	bcc.n	810a8fc <UART_WaitOnFlagUntilTimeout+0x30>
 810a8f6:	69bb      	ldr	r3, [r7, #24]
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	d101      	bne.n	810a900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810a8fc:	2303      	movs	r3, #3
 810a8fe:	e048      	b.n	810a992 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810a900:	68fb      	ldr	r3, [r7, #12]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	681b      	ldr	r3, [r3, #0]
 810a906:	f003 0304 	and.w	r3, r3, #4
 810a90a:	2b00      	cmp	r3, #0
 810a90c:	d031      	beq.n	810a972 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810a90e:	68fb      	ldr	r3, [r7, #12]
 810a910:	681b      	ldr	r3, [r3, #0]
 810a912:	69db      	ldr	r3, [r3, #28]
 810a914:	f003 0308 	and.w	r3, r3, #8
 810a918:	2b08      	cmp	r3, #8
 810a91a:	d110      	bne.n	810a93e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810a91c:	68fb      	ldr	r3, [r7, #12]
 810a91e:	681b      	ldr	r3, [r3, #0]
 810a920:	2208      	movs	r2, #8
 810a922:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 810a924:	68f8      	ldr	r0, [r7, #12]
 810a926:	f000 f838 	bl	810a99a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 810a92a:	68fb      	ldr	r3, [r7, #12]
 810a92c:	2208      	movs	r2, #8
 810a92e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 810a932:	68fb      	ldr	r3, [r7, #12]
 810a934:	2200      	movs	r2, #0
 810a936:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810a93a:	2301      	movs	r3, #1
 810a93c:	e029      	b.n	810a992 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810a93e:	68fb      	ldr	r3, [r7, #12]
 810a940:	681b      	ldr	r3, [r3, #0]
 810a942:	69db      	ldr	r3, [r3, #28]
 810a944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810a948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810a94c:	d111      	bne.n	810a972 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810a94e:	68fb      	ldr	r3, [r7, #12]
 810a950:	681b      	ldr	r3, [r3, #0]
 810a952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810a956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810a958:	68f8      	ldr	r0, [r7, #12]
 810a95a:	f000 f81e 	bl	810a99a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	2220      	movs	r2, #32
 810a962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810a966:	68fb      	ldr	r3, [r7, #12]
 810a968:	2200      	movs	r2, #0
 810a96a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810a96e:	2303      	movs	r3, #3
 810a970:	e00f      	b.n	810a992 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810a972:	68fb      	ldr	r3, [r7, #12]
 810a974:	681b      	ldr	r3, [r3, #0]
 810a976:	69da      	ldr	r2, [r3, #28]
 810a978:	68bb      	ldr	r3, [r7, #8]
 810a97a:	4013      	ands	r3, r2
 810a97c:	68ba      	ldr	r2, [r7, #8]
 810a97e:	429a      	cmp	r2, r3
 810a980:	bf0c      	ite	eq
 810a982:	2301      	moveq	r3, #1
 810a984:	2300      	movne	r3, #0
 810a986:	b2db      	uxtb	r3, r3
 810a988:	461a      	mov	r2, r3
 810a98a:	79fb      	ldrb	r3, [r7, #7]
 810a98c:	429a      	cmp	r2, r3
 810a98e:	d0a6      	beq.n	810a8de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810a990:	2300      	movs	r3, #0
}
 810a992:	4618      	mov	r0, r3
 810a994:	3710      	adds	r7, #16
 810a996:	46bd      	mov	sp, r7
 810a998:	bd80      	pop	{r7, pc}

0810a99a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810a99a:	b480      	push	{r7}
 810a99c:	b095      	sub	sp, #84	; 0x54
 810a99e:	af00      	add	r7, sp, #0
 810a9a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a9a2:	687b      	ldr	r3, [r7, #4]
 810a9a4:	681b      	ldr	r3, [r3, #0]
 810a9a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a9aa:	e853 3f00 	ldrex	r3, [r3]
 810a9ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a9b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810a9b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 810a9b8:	687b      	ldr	r3, [r7, #4]
 810a9ba:	681b      	ldr	r3, [r3, #0]
 810a9bc:	461a      	mov	r2, r3
 810a9be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810a9c0:	643b      	str	r3, [r7, #64]	; 0x40
 810a9c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810a9c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810a9c8:	e841 2300 	strex	r3, r2, [r1]
 810a9cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810a9d0:	2b00      	cmp	r3, #0
 810a9d2:	d1e6      	bne.n	810a9a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	681b      	ldr	r3, [r3, #0]
 810a9d8:	3308      	adds	r3, #8
 810a9da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a9dc:	6a3b      	ldr	r3, [r7, #32]
 810a9de:	e853 3f00 	ldrex	r3, [r3]
 810a9e2:	61fb      	str	r3, [r7, #28]
   return(result);
 810a9e4:	69fb      	ldr	r3, [r7, #28]
 810a9e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810a9ea:	f023 0301 	bic.w	r3, r3, #1
 810a9ee:	64bb      	str	r3, [r7, #72]	; 0x48
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	681b      	ldr	r3, [r3, #0]
 810a9f4:	3308      	adds	r3, #8
 810a9f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810a9f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 810a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810a9fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810aa00:	e841 2300 	strex	r3, r2, [r1]
 810aa04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aa08:	2b00      	cmp	r3, #0
 810aa0a:	d1e3      	bne.n	810a9d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810aa0c:	687b      	ldr	r3, [r7, #4]
 810aa0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810aa10:	2b01      	cmp	r3, #1
 810aa12:	d118      	bne.n	810aa46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810aa14:	687b      	ldr	r3, [r7, #4]
 810aa16:	681b      	ldr	r3, [r3, #0]
 810aa18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810aa1a:	68fb      	ldr	r3, [r7, #12]
 810aa1c:	e853 3f00 	ldrex	r3, [r3]
 810aa20:	60bb      	str	r3, [r7, #8]
   return(result);
 810aa22:	68bb      	ldr	r3, [r7, #8]
 810aa24:	f023 0310 	bic.w	r3, r3, #16
 810aa28:	647b      	str	r3, [r7, #68]	; 0x44
 810aa2a:	687b      	ldr	r3, [r7, #4]
 810aa2c:	681b      	ldr	r3, [r3, #0]
 810aa2e:	461a      	mov	r2, r3
 810aa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810aa32:	61bb      	str	r3, [r7, #24]
 810aa34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aa36:	6979      	ldr	r1, [r7, #20]
 810aa38:	69ba      	ldr	r2, [r7, #24]
 810aa3a:	e841 2300 	strex	r3, r2, [r1]
 810aa3e:	613b      	str	r3, [r7, #16]
   return(result);
 810aa40:	693b      	ldr	r3, [r7, #16]
 810aa42:	2b00      	cmp	r3, #0
 810aa44:	d1e6      	bne.n	810aa14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810aa46:	687b      	ldr	r3, [r7, #4]
 810aa48:	2220      	movs	r2, #32
 810aa4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810aa4e:	687b      	ldr	r3, [r7, #4]
 810aa50:	2200      	movs	r2, #0
 810aa52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810aa54:	687b      	ldr	r3, [r7, #4]
 810aa56:	2200      	movs	r2, #0
 810aa58:	675a      	str	r2, [r3, #116]	; 0x74
}
 810aa5a:	bf00      	nop
 810aa5c:	3754      	adds	r7, #84	; 0x54
 810aa5e:	46bd      	mov	sp, r7
 810aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa64:	4770      	bx	lr

0810aa66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810aa66:	b480      	push	{r7}
 810aa68:	b085      	sub	sp, #20
 810aa6a:	af00      	add	r7, sp, #0
 810aa6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810aa6e:	687b      	ldr	r3, [r7, #4]
 810aa70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810aa74:	2b01      	cmp	r3, #1
 810aa76:	d101      	bne.n	810aa7c <HAL_UARTEx_DisableFifoMode+0x16>
 810aa78:	2302      	movs	r3, #2
 810aa7a:	e027      	b.n	810aacc <HAL_UARTEx_DisableFifoMode+0x66>
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	2201      	movs	r2, #1
 810aa80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810aa84:	687b      	ldr	r3, [r7, #4]
 810aa86:	2224      	movs	r2, #36	; 0x24
 810aa88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810aa8c:	687b      	ldr	r3, [r7, #4]
 810aa8e:	681b      	ldr	r3, [r3, #0]
 810aa90:	681b      	ldr	r3, [r3, #0]
 810aa92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810aa94:	687b      	ldr	r3, [r7, #4]
 810aa96:	681b      	ldr	r3, [r3, #0]
 810aa98:	681a      	ldr	r2, [r3, #0]
 810aa9a:	687b      	ldr	r3, [r7, #4]
 810aa9c:	681b      	ldr	r3, [r3, #0]
 810aa9e:	f022 0201 	bic.w	r2, r2, #1
 810aaa2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810aaa4:	68fb      	ldr	r3, [r7, #12]
 810aaa6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810aaaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810aaac:	687b      	ldr	r3, [r7, #4]
 810aaae:	2200      	movs	r2, #0
 810aab0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810aab2:	687b      	ldr	r3, [r7, #4]
 810aab4:	681b      	ldr	r3, [r3, #0]
 810aab6:	68fa      	ldr	r2, [r7, #12]
 810aab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	2220      	movs	r2, #32
 810aabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	2200      	movs	r2, #0
 810aac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810aaca:	2300      	movs	r3, #0
}
 810aacc:	4618      	mov	r0, r3
 810aace:	3714      	adds	r7, #20
 810aad0:	46bd      	mov	sp, r7
 810aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aad6:	4770      	bx	lr

0810aad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810aad8:	b580      	push	{r7, lr}
 810aada:	b084      	sub	sp, #16
 810aadc:	af00      	add	r7, sp, #0
 810aade:	6078      	str	r0, [r7, #4]
 810aae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810aae2:	687b      	ldr	r3, [r7, #4]
 810aae4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810aae8:	2b01      	cmp	r3, #1
 810aaea:	d101      	bne.n	810aaf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810aaec:	2302      	movs	r3, #2
 810aaee:	e02d      	b.n	810ab4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	2201      	movs	r2, #1
 810aaf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810aaf8:	687b      	ldr	r3, [r7, #4]
 810aafa:	2224      	movs	r2, #36	; 0x24
 810aafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ab00:	687b      	ldr	r3, [r7, #4]
 810ab02:	681b      	ldr	r3, [r3, #0]
 810ab04:	681b      	ldr	r3, [r3, #0]
 810ab06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ab08:	687b      	ldr	r3, [r7, #4]
 810ab0a:	681b      	ldr	r3, [r3, #0]
 810ab0c:	681a      	ldr	r2, [r3, #0]
 810ab0e:	687b      	ldr	r3, [r7, #4]
 810ab10:	681b      	ldr	r3, [r3, #0]
 810ab12:	f022 0201 	bic.w	r2, r2, #1
 810ab16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810ab18:	687b      	ldr	r3, [r7, #4]
 810ab1a:	681b      	ldr	r3, [r3, #0]
 810ab1c:	689b      	ldr	r3, [r3, #8]
 810ab1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810ab22:	687b      	ldr	r3, [r7, #4]
 810ab24:	681b      	ldr	r3, [r3, #0]
 810ab26:	683a      	ldr	r2, [r7, #0]
 810ab28:	430a      	orrs	r2, r1
 810ab2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810ab2c:	6878      	ldr	r0, [r7, #4]
 810ab2e:	f000 f84f 	bl	810abd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810ab32:	687b      	ldr	r3, [r7, #4]
 810ab34:	681b      	ldr	r3, [r3, #0]
 810ab36:	68fa      	ldr	r2, [r7, #12]
 810ab38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810ab3a:	687b      	ldr	r3, [r7, #4]
 810ab3c:	2220      	movs	r2, #32
 810ab3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810ab42:	687b      	ldr	r3, [r7, #4]
 810ab44:	2200      	movs	r2, #0
 810ab46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810ab4a:	2300      	movs	r3, #0
}
 810ab4c:	4618      	mov	r0, r3
 810ab4e:	3710      	adds	r7, #16
 810ab50:	46bd      	mov	sp, r7
 810ab52:	bd80      	pop	{r7, pc}

0810ab54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810ab54:	b580      	push	{r7, lr}
 810ab56:	b084      	sub	sp, #16
 810ab58:	af00      	add	r7, sp, #0
 810ab5a:	6078      	str	r0, [r7, #4]
 810ab5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810ab5e:	687b      	ldr	r3, [r7, #4]
 810ab60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810ab64:	2b01      	cmp	r3, #1
 810ab66:	d101      	bne.n	810ab6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810ab68:	2302      	movs	r3, #2
 810ab6a:	e02d      	b.n	810abc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810ab6c:	687b      	ldr	r3, [r7, #4]
 810ab6e:	2201      	movs	r2, #1
 810ab70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810ab74:	687b      	ldr	r3, [r7, #4]
 810ab76:	2224      	movs	r2, #36	; 0x24
 810ab78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810ab7c:	687b      	ldr	r3, [r7, #4]
 810ab7e:	681b      	ldr	r3, [r3, #0]
 810ab80:	681b      	ldr	r3, [r3, #0]
 810ab82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810ab84:	687b      	ldr	r3, [r7, #4]
 810ab86:	681b      	ldr	r3, [r3, #0]
 810ab88:	681a      	ldr	r2, [r3, #0]
 810ab8a:	687b      	ldr	r3, [r7, #4]
 810ab8c:	681b      	ldr	r3, [r3, #0]
 810ab8e:	f022 0201 	bic.w	r2, r2, #1
 810ab92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810ab94:	687b      	ldr	r3, [r7, #4]
 810ab96:	681b      	ldr	r3, [r3, #0]
 810ab98:	689b      	ldr	r3, [r3, #8]
 810ab9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810ab9e:	687b      	ldr	r3, [r7, #4]
 810aba0:	681b      	ldr	r3, [r3, #0]
 810aba2:	683a      	ldr	r2, [r7, #0]
 810aba4:	430a      	orrs	r2, r1
 810aba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810aba8:	6878      	ldr	r0, [r7, #4]
 810abaa:	f000 f811 	bl	810abd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810abae:	687b      	ldr	r3, [r7, #4]
 810abb0:	681b      	ldr	r3, [r3, #0]
 810abb2:	68fa      	ldr	r2, [r7, #12]
 810abb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810abb6:	687b      	ldr	r3, [r7, #4]
 810abb8:	2220      	movs	r2, #32
 810abba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810abbe:	687b      	ldr	r3, [r7, #4]
 810abc0:	2200      	movs	r2, #0
 810abc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810abc6:	2300      	movs	r3, #0
}
 810abc8:	4618      	mov	r0, r3
 810abca:	3710      	adds	r7, #16
 810abcc:	46bd      	mov	sp, r7
 810abce:	bd80      	pop	{r7, pc}

0810abd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810abd0:	b480      	push	{r7}
 810abd2:	b085      	sub	sp, #20
 810abd4:	af00      	add	r7, sp, #0
 810abd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810abd8:	687b      	ldr	r3, [r7, #4]
 810abda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810abdc:	2b00      	cmp	r3, #0
 810abde:	d108      	bne.n	810abf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810abe0:	687b      	ldr	r3, [r7, #4]
 810abe2:	2201      	movs	r2, #1
 810abe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810abe8:	687b      	ldr	r3, [r7, #4]
 810abea:	2201      	movs	r2, #1
 810abec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810abf0:	e031      	b.n	810ac56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810abf2:	2310      	movs	r3, #16
 810abf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810abf6:	2310      	movs	r3, #16
 810abf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810abfa:	687b      	ldr	r3, [r7, #4]
 810abfc:	681b      	ldr	r3, [r3, #0]
 810abfe:	689b      	ldr	r3, [r3, #8]
 810ac00:	0e5b      	lsrs	r3, r3, #25
 810ac02:	b2db      	uxtb	r3, r3
 810ac04:	f003 0307 	and.w	r3, r3, #7
 810ac08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ac0a:	687b      	ldr	r3, [r7, #4]
 810ac0c:	681b      	ldr	r3, [r3, #0]
 810ac0e:	689b      	ldr	r3, [r3, #8]
 810ac10:	0f5b      	lsrs	r3, r3, #29
 810ac12:	b2db      	uxtb	r3, r3
 810ac14:	f003 0307 	and.w	r3, r3, #7
 810ac18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ac1a:	7bbb      	ldrb	r3, [r7, #14]
 810ac1c:	7b3a      	ldrb	r2, [r7, #12]
 810ac1e:	4911      	ldr	r1, [pc, #68]	; (810ac64 <UARTEx_SetNbDataToProcess+0x94>)
 810ac20:	5c8a      	ldrb	r2, [r1, r2]
 810ac22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ac26:	7b3a      	ldrb	r2, [r7, #12]
 810ac28:	490f      	ldr	r1, [pc, #60]	; (810ac68 <UARTEx_SetNbDataToProcess+0x98>)
 810ac2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ac2c:	fb93 f3f2 	sdiv	r3, r3, r2
 810ac30:	b29a      	uxth	r2, r3
 810ac32:	687b      	ldr	r3, [r7, #4]
 810ac34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ac38:	7bfb      	ldrb	r3, [r7, #15]
 810ac3a:	7b7a      	ldrb	r2, [r7, #13]
 810ac3c:	4909      	ldr	r1, [pc, #36]	; (810ac64 <UARTEx_SetNbDataToProcess+0x94>)
 810ac3e:	5c8a      	ldrb	r2, [r1, r2]
 810ac40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ac44:	7b7a      	ldrb	r2, [r7, #13]
 810ac46:	4908      	ldr	r1, [pc, #32]	; (810ac68 <UARTEx_SetNbDataToProcess+0x98>)
 810ac48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ac4a:	fb93 f3f2 	sdiv	r3, r3, r2
 810ac4e:	b29a      	uxth	r2, r3
 810ac50:	687b      	ldr	r3, [r7, #4]
 810ac52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810ac56:	bf00      	nop
 810ac58:	3714      	adds	r7, #20
 810ac5a:	46bd      	mov	sp, r7
 810ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac60:	4770      	bx	lr
 810ac62:	bf00      	nop
 810ac64:	0810c3fc 	.word	0x0810c3fc
 810ac68:	0810c404 	.word	0x0810c404

0810ac6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 810ac6c:	b480      	push	{r7}
 810ac6e:	b083      	sub	sp, #12
 810ac70:	af00      	add	r7, sp, #0
 810ac72:	6078      	str	r0, [r7, #4]
 810ac74:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810ac76:	683b      	ldr	r3, [r7, #0]
 810ac78:	681b      	ldr	r3, [r3, #0]
 810ac7a:	2b00      	cmp	r3, #0
 810ac7c:	d123      	bne.n	810acc6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810ac7e:	687b      	ldr	r3, [r7, #4]
 810ac80:	681b      	ldr	r3, [r3, #0]
 810ac82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810ac86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810ac8a:	683a      	ldr	r2, [r7, #0]
 810ac8c:	6851      	ldr	r1, [r2, #4]
 810ac8e:	683a      	ldr	r2, [r7, #0]
 810ac90:	6892      	ldr	r2, [r2, #8]
 810ac92:	4311      	orrs	r1, r2
 810ac94:	683a      	ldr	r2, [r7, #0]
 810ac96:	68d2      	ldr	r2, [r2, #12]
 810ac98:	4311      	orrs	r1, r2
 810ac9a:	683a      	ldr	r2, [r7, #0]
 810ac9c:	6912      	ldr	r2, [r2, #16]
 810ac9e:	4311      	orrs	r1, r2
 810aca0:	683a      	ldr	r2, [r7, #0]
 810aca2:	6952      	ldr	r2, [r2, #20]
 810aca4:	4311      	orrs	r1, r2
 810aca6:	683a      	ldr	r2, [r7, #0]
 810aca8:	6992      	ldr	r2, [r2, #24]
 810acaa:	4311      	orrs	r1, r2
 810acac:	683a      	ldr	r2, [r7, #0]
 810acae:	69d2      	ldr	r2, [r2, #28]
 810acb0:	4311      	orrs	r1, r2
 810acb2:	683a      	ldr	r2, [r7, #0]
 810acb4:	6a12      	ldr	r2, [r2, #32]
 810acb6:	4311      	orrs	r1, r2
 810acb8:	683a      	ldr	r2, [r7, #0]
 810acba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 810acbc:	430a      	orrs	r2, r1
 810acbe:	431a      	orrs	r2, r3
 810acc0:	687b      	ldr	r3, [r7, #4]
 810acc2:	601a      	str	r2, [r3, #0]
 810acc4:	e028      	b.n	810ad18 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810acc6:	687b      	ldr	r3, [r7, #4]
 810acc8:	681b      	ldr	r3, [r3, #0]
 810acca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 810acce:	683b      	ldr	r3, [r7, #0]
 810acd0:	69d9      	ldr	r1, [r3, #28]
 810acd2:	683b      	ldr	r3, [r7, #0]
 810acd4:	6a1b      	ldr	r3, [r3, #32]
 810acd6:	4319      	orrs	r1, r3
 810acd8:	683b      	ldr	r3, [r7, #0]
 810acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810acdc:	430b      	orrs	r3, r1
 810acde:	431a      	orrs	r2, r3
 810ace0:	687b      	ldr	r3, [r7, #4]
 810ace2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810ace4:	687b      	ldr	r3, [r7, #4]
 810ace6:	685b      	ldr	r3, [r3, #4]
 810ace8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 810acec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 810acf0:	683a      	ldr	r2, [r7, #0]
 810acf2:	6851      	ldr	r1, [r2, #4]
 810acf4:	683a      	ldr	r2, [r7, #0]
 810acf6:	6892      	ldr	r2, [r2, #8]
 810acf8:	4311      	orrs	r1, r2
 810acfa:	683a      	ldr	r2, [r7, #0]
 810acfc:	68d2      	ldr	r2, [r2, #12]
 810acfe:	4311      	orrs	r1, r2
 810ad00:	683a      	ldr	r2, [r7, #0]
 810ad02:	6912      	ldr	r2, [r2, #16]
 810ad04:	4311      	orrs	r1, r2
 810ad06:	683a      	ldr	r2, [r7, #0]
 810ad08:	6952      	ldr	r2, [r2, #20]
 810ad0a:	4311      	orrs	r1, r2
 810ad0c:	683a      	ldr	r2, [r7, #0]
 810ad0e:	6992      	ldr	r2, [r2, #24]
 810ad10:	430a      	orrs	r2, r1
 810ad12:	431a      	orrs	r2, r3
 810ad14:	687b      	ldr	r3, [r7, #4]
 810ad16:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810ad18:	2300      	movs	r3, #0
}
 810ad1a:	4618      	mov	r0, r3
 810ad1c:	370c      	adds	r7, #12
 810ad1e:	46bd      	mov	sp, r7
 810ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad24:	4770      	bx	lr

0810ad26 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810ad26:	b480      	push	{r7}
 810ad28:	b085      	sub	sp, #20
 810ad2a:	af00      	add	r7, sp, #0
 810ad2c:	60f8      	str	r0, [r7, #12]
 810ad2e:	60b9      	str	r1, [r7, #8]
 810ad30:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810ad32:	687b      	ldr	r3, [r7, #4]
 810ad34:	2b00      	cmp	r3, #0
 810ad36:	d128      	bne.n	810ad8a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810ad38:	68fb      	ldr	r3, [r7, #12]
 810ad3a:	689b      	ldr	r3, [r3, #8]
 810ad3c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810ad40:	68bb      	ldr	r3, [r7, #8]
 810ad42:	681b      	ldr	r3, [r3, #0]
 810ad44:	1e59      	subs	r1, r3, #1
 810ad46:	68bb      	ldr	r3, [r7, #8]
 810ad48:	685b      	ldr	r3, [r3, #4]
 810ad4a:	3b01      	subs	r3, #1
 810ad4c:	011b      	lsls	r3, r3, #4
 810ad4e:	4319      	orrs	r1, r3
 810ad50:	68bb      	ldr	r3, [r7, #8]
 810ad52:	689b      	ldr	r3, [r3, #8]
 810ad54:	3b01      	subs	r3, #1
 810ad56:	021b      	lsls	r3, r3, #8
 810ad58:	4319      	orrs	r1, r3
 810ad5a:	68bb      	ldr	r3, [r7, #8]
 810ad5c:	68db      	ldr	r3, [r3, #12]
 810ad5e:	3b01      	subs	r3, #1
 810ad60:	031b      	lsls	r3, r3, #12
 810ad62:	4319      	orrs	r1, r3
 810ad64:	68bb      	ldr	r3, [r7, #8]
 810ad66:	691b      	ldr	r3, [r3, #16]
 810ad68:	3b01      	subs	r3, #1
 810ad6a:	041b      	lsls	r3, r3, #16
 810ad6c:	4319      	orrs	r1, r3
 810ad6e:	68bb      	ldr	r3, [r7, #8]
 810ad70:	695b      	ldr	r3, [r3, #20]
 810ad72:	3b01      	subs	r3, #1
 810ad74:	051b      	lsls	r3, r3, #20
 810ad76:	4319      	orrs	r1, r3
 810ad78:	68bb      	ldr	r3, [r7, #8]
 810ad7a:	699b      	ldr	r3, [r3, #24]
 810ad7c:	3b01      	subs	r3, #1
 810ad7e:	061b      	lsls	r3, r3, #24
 810ad80:	430b      	orrs	r3, r1
 810ad82:	431a      	orrs	r2, r3
 810ad84:	68fb      	ldr	r3, [r7, #12]
 810ad86:	609a      	str	r2, [r3, #8]
 810ad88:	e02f      	b.n	810adea <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810ad8a:	68fb      	ldr	r3, [r7, #12]
 810ad8c:	689b      	ldr	r3, [r3, #8]
 810ad8e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810ad92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810ad96:	68ba      	ldr	r2, [r7, #8]
 810ad98:	68d2      	ldr	r2, [r2, #12]
 810ad9a:	3a01      	subs	r2, #1
 810ad9c:	0311      	lsls	r1, r2, #12
 810ad9e:	68ba      	ldr	r2, [r7, #8]
 810ada0:	6952      	ldr	r2, [r2, #20]
 810ada2:	3a01      	subs	r2, #1
 810ada4:	0512      	lsls	r2, r2, #20
 810ada6:	430a      	orrs	r2, r1
 810ada8:	431a      	orrs	r2, r3
 810adaa:	68fb      	ldr	r3, [r7, #12]
 810adac:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810adae:	68fb      	ldr	r3, [r7, #12]
 810adb0:	68db      	ldr	r3, [r3, #12]
 810adb2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 810adb6:	68bb      	ldr	r3, [r7, #8]
 810adb8:	681b      	ldr	r3, [r3, #0]
 810adba:	1e59      	subs	r1, r3, #1
 810adbc:	68bb      	ldr	r3, [r7, #8]
 810adbe:	685b      	ldr	r3, [r3, #4]
 810adc0:	3b01      	subs	r3, #1
 810adc2:	011b      	lsls	r3, r3, #4
 810adc4:	4319      	orrs	r1, r3
 810adc6:	68bb      	ldr	r3, [r7, #8]
 810adc8:	689b      	ldr	r3, [r3, #8]
 810adca:	3b01      	subs	r3, #1
 810adcc:	021b      	lsls	r3, r3, #8
 810adce:	4319      	orrs	r1, r3
 810add0:	68bb      	ldr	r3, [r7, #8]
 810add2:	691b      	ldr	r3, [r3, #16]
 810add4:	3b01      	subs	r3, #1
 810add6:	041b      	lsls	r3, r3, #16
 810add8:	4319      	orrs	r1, r3
 810adda:	68bb      	ldr	r3, [r7, #8]
 810addc:	699b      	ldr	r3, [r3, #24]
 810adde:	3b01      	subs	r3, #1
 810ade0:	061b      	lsls	r3, r3, #24
 810ade2:	430b      	orrs	r3, r1
 810ade4:	431a      	orrs	r2, r3
 810ade6:	68fb      	ldr	r3, [r7, #12]
 810ade8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810adea:	2300      	movs	r3, #0
}
 810adec:	4618      	mov	r0, r3
 810adee:	3714      	adds	r7, #20
 810adf0:	46bd      	mov	sp, r7
 810adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adf6:	4770      	bx	lr

0810adf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810adf8:	b084      	sub	sp, #16
 810adfa:	b580      	push	{r7, lr}
 810adfc:	b084      	sub	sp, #16
 810adfe:	af00      	add	r7, sp, #0
 810ae00:	6078      	str	r0, [r7, #4]
 810ae02:	f107 001c 	add.w	r0, r7, #28
 810ae06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae0c:	2b01      	cmp	r3, #1
 810ae0e:	d122      	bne.n	810ae56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810ae18:	687b      	ldr	r3, [r7, #4]
 810ae1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810ae1c:	687b      	ldr	r3, [r7, #4]
 810ae1e:	68db      	ldr	r3, [r3, #12]
 810ae20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 810ae24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810ae28:	687a      	ldr	r2, [r7, #4]
 810ae2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810ae2c:	687b      	ldr	r3, [r7, #4]
 810ae2e:	68db      	ldr	r3, [r3, #12]
 810ae30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810ae34:	687b      	ldr	r3, [r7, #4]
 810ae36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810ae38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810ae3a:	2b01      	cmp	r3, #1
 810ae3c:	d105      	bne.n	810ae4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810ae3e:	687b      	ldr	r3, [r7, #4]
 810ae40:	68db      	ldr	r3, [r3, #12]
 810ae42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 810ae46:	687b      	ldr	r3, [r7, #4]
 810ae48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810ae4a:	6878      	ldr	r0, [r7, #4]
 810ae4c:	f000 faaa 	bl	810b3a4 <USB_CoreReset>
 810ae50:	4603      	mov	r3, r0
 810ae52:	73fb      	strb	r3, [r7, #15]
 810ae54:	e01a      	b.n	810ae8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810ae56:	687b      	ldr	r3, [r7, #4]
 810ae58:	68db      	ldr	r3, [r3, #12]
 810ae5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810ae5e:	687b      	ldr	r3, [r7, #4]
 810ae60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810ae62:	6878      	ldr	r0, [r7, #4]
 810ae64:	f000 fa9e 	bl	810b3a4 <USB_CoreReset>
 810ae68:	4603      	mov	r3, r0
 810ae6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810ae6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810ae6e:	2b00      	cmp	r3, #0
 810ae70:	d106      	bne.n	810ae80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810ae72:	687b      	ldr	r3, [r7, #4]
 810ae74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810ae7a:	687b      	ldr	r3, [r7, #4]
 810ae7c:	639a      	str	r2, [r3, #56]	; 0x38
 810ae7e:	e005      	b.n	810ae8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ae84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810ae88:	687b      	ldr	r3, [r7, #4]
 810ae8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810ae8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ae8e:	2b01      	cmp	r3, #1
 810ae90:	d118      	bne.n	810aec4 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810ae92:	687b      	ldr	r3, [r7, #4]
 810ae94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810ae96:	b29a      	uxth	r2, r3
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810ae9c:	687b      	ldr	r3, [r7, #4]
 810ae9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810aea0:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 810aea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810aea8:	687a      	ldr	r2, [r7, #4]
 810aeaa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810aeac:	687b      	ldr	r3, [r7, #4]
 810aeae:	689b      	ldr	r3, [r3, #8]
 810aeb0:	f043 0206 	orr.w	r2, r3, #6
 810aeb4:	687b      	ldr	r3, [r7, #4]
 810aeb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810aeb8:	687b      	ldr	r3, [r7, #4]
 810aeba:	689b      	ldr	r3, [r3, #8]
 810aebc:	f043 0220 	orr.w	r2, r3, #32
 810aec0:	687b      	ldr	r3, [r7, #4]
 810aec2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810aec4:	7bfb      	ldrb	r3, [r7, #15]
}
 810aec6:	4618      	mov	r0, r3
 810aec8:	3710      	adds	r7, #16
 810aeca:	46bd      	mov	sp, r7
 810aecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810aed0:	b004      	add	sp, #16
 810aed2:	4770      	bx	lr

0810aed4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810aed4:	b480      	push	{r7}
 810aed6:	b083      	sub	sp, #12
 810aed8:	af00      	add	r7, sp, #0
 810aeda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810aedc:	687b      	ldr	r3, [r7, #4]
 810aede:	689b      	ldr	r3, [r3, #8]
 810aee0:	f023 0201 	bic.w	r2, r3, #1
 810aee4:	687b      	ldr	r3, [r7, #4]
 810aee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810aee8:	2300      	movs	r3, #0
}
 810aeea:	4618      	mov	r0, r3
 810aeec:	370c      	adds	r7, #12
 810aeee:	46bd      	mov	sp, r7
 810aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aef4:	4770      	bx	lr

0810aef6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810aef6:	b580      	push	{r7, lr}
 810aef8:	b084      	sub	sp, #16
 810aefa:	af00      	add	r7, sp, #0
 810aefc:	6078      	str	r0, [r7, #4]
 810aefe:	460b      	mov	r3, r1
 810af00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810af02:	2300      	movs	r3, #0
 810af04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810af06:	687b      	ldr	r3, [r7, #4]
 810af08:	68db      	ldr	r3, [r3, #12]
 810af0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 810af0e:	687b      	ldr	r3, [r7, #4]
 810af10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810af12:	78fb      	ldrb	r3, [r7, #3]
 810af14:	2b01      	cmp	r3, #1
 810af16:	d115      	bne.n	810af44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810af18:	687b      	ldr	r3, [r7, #4]
 810af1a:	68db      	ldr	r3, [r3, #12]
 810af1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 810af20:	687b      	ldr	r3, [r7, #4]
 810af22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810af24:	2001      	movs	r0, #1
 810af26:	f7f7 f99f 	bl	8102268 <HAL_Delay>
      ms++;
 810af2a:	68fb      	ldr	r3, [r7, #12]
 810af2c:	3301      	adds	r3, #1
 810af2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 810af30:	6878      	ldr	r0, [r7, #4]
 810af32:	f000 fa29 	bl	810b388 <USB_GetMode>
 810af36:	4603      	mov	r3, r0
 810af38:	2b01      	cmp	r3, #1
 810af3a:	d01e      	beq.n	810af7a <USB_SetCurrentMode+0x84>
 810af3c:	68fb      	ldr	r3, [r7, #12]
 810af3e:	2b31      	cmp	r3, #49	; 0x31
 810af40:	d9f0      	bls.n	810af24 <USB_SetCurrentMode+0x2e>
 810af42:	e01a      	b.n	810af7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810af44:	78fb      	ldrb	r3, [r7, #3]
 810af46:	2b00      	cmp	r3, #0
 810af48:	d115      	bne.n	810af76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810af4a:	687b      	ldr	r3, [r7, #4]
 810af4c:	68db      	ldr	r3, [r3, #12]
 810af4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 810af52:	687b      	ldr	r3, [r7, #4]
 810af54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 810af56:	2001      	movs	r0, #1
 810af58:	f7f7 f986 	bl	8102268 <HAL_Delay>
      ms++;
 810af5c:	68fb      	ldr	r3, [r7, #12]
 810af5e:	3301      	adds	r3, #1
 810af60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 810af62:	6878      	ldr	r0, [r7, #4]
 810af64:	f000 fa10 	bl	810b388 <USB_GetMode>
 810af68:	4603      	mov	r3, r0
 810af6a:	2b00      	cmp	r3, #0
 810af6c:	d005      	beq.n	810af7a <USB_SetCurrentMode+0x84>
 810af6e:	68fb      	ldr	r3, [r7, #12]
 810af70:	2b31      	cmp	r3, #49	; 0x31
 810af72:	d9f0      	bls.n	810af56 <USB_SetCurrentMode+0x60>
 810af74:	e001      	b.n	810af7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810af76:	2301      	movs	r3, #1
 810af78:	e005      	b.n	810af86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 810af7a:	68fb      	ldr	r3, [r7, #12]
 810af7c:	2b32      	cmp	r3, #50	; 0x32
 810af7e:	d101      	bne.n	810af84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810af80:	2301      	movs	r3, #1
 810af82:	e000      	b.n	810af86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810af84:	2300      	movs	r3, #0
}
 810af86:	4618      	mov	r0, r3
 810af88:	3710      	adds	r7, #16
 810af8a:	46bd      	mov	sp, r7
 810af8c:	bd80      	pop	{r7, pc}
	...

0810af90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810af90:	b084      	sub	sp, #16
 810af92:	b580      	push	{r7, lr}
 810af94:	b086      	sub	sp, #24
 810af96:	af00      	add	r7, sp, #0
 810af98:	6078      	str	r0, [r7, #4]
 810af9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 810af9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810afa2:	2300      	movs	r3, #0
 810afa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810afa6:	687b      	ldr	r3, [r7, #4]
 810afa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810afaa:	2300      	movs	r3, #0
 810afac:	613b      	str	r3, [r7, #16]
 810afae:	e009      	b.n	810afc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810afb0:	687a      	ldr	r2, [r7, #4]
 810afb2:	693b      	ldr	r3, [r7, #16]
 810afb4:	3340      	adds	r3, #64	; 0x40
 810afb6:	009b      	lsls	r3, r3, #2
 810afb8:	4413      	add	r3, r2
 810afba:	2200      	movs	r2, #0
 810afbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810afbe:	693b      	ldr	r3, [r7, #16]
 810afc0:	3301      	adds	r3, #1
 810afc2:	613b      	str	r3, [r7, #16]
 810afc4:	693b      	ldr	r3, [r7, #16]
 810afc6:	2b0e      	cmp	r3, #14
 810afc8:	d9f2      	bls.n	810afb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810afca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810afcc:	2b00      	cmp	r3, #0
 810afce:	d11c      	bne.n	810b00a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810afd0:	68fb      	ldr	r3, [r7, #12]
 810afd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810afd6:	685b      	ldr	r3, [r3, #4]
 810afd8:	68fa      	ldr	r2, [r7, #12]
 810afda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810afde:	f043 0302 	orr.w	r3, r3, #2
 810afe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810afe4:	687b      	ldr	r3, [r7, #4]
 810afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810afe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810aff0:	687b      	ldr	r3, [r7, #4]
 810aff2:	681b      	ldr	r3, [r3, #0]
 810aff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810aff8:	687b      	ldr	r3, [r7, #4]
 810affa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	681b      	ldr	r3, [r3, #0]
 810b000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810b004:	687b      	ldr	r3, [r7, #4]
 810b006:	601a      	str	r2, [r3, #0]
 810b008:	e005      	b.n	810b016 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810b00a:	687b      	ldr	r3, [r7, #4]
 810b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b00e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 810b012:	687b      	ldr	r3, [r7, #4]
 810b014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810b016:	68fb      	ldr	r3, [r7, #12]
 810b018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810b01c:	461a      	mov	r2, r3
 810b01e:	2300      	movs	r3, #0
 810b020:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 810b022:	68fb      	ldr	r3, [r7, #12]
 810b024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b028:	4619      	mov	r1, r3
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b030:	461a      	mov	r2, r3
 810b032:	680b      	ldr	r3, [r1, #0]
 810b034:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810b038:	2b01      	cmp	r3, #1
 810b03a:	d10c      	bne.n	810b056 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810b03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b03e:	2b00      	cmp	r3, #0
 810b040:	d104      	bne.n	810b04c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810b042:	2100      	movs	r1, #0
 810b044:	6878      	ldr	r0, [r7, #4]
 810b046:	f000 f965 	bl	810b314 <USB_SetDevSpeed>
 810b04a:	e008      	b.n	810b05e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810b04c:	2101      	movs	r1, #1
 810b04e:	6878      	ldr	r0, [r7, #4]
 810b050:	f000 f960 	bl	810b314 <USB_SetDevSpeed>
 810b054:	e003      	b.n	810b05e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810b056:	2103      	movs	r1, #3
 810b058:	6878      	ldr	r0, [r7, #4]
 810b05a:	f000 f95b 	bl	810b314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810b05e:	2110      	movs	r1, #16
 810b060:	6878      	ldr	r0, [r7, #4]
 810b062:	f000 f8f3 	bl	810b24c <USB_FlushTxFifo>
 810b066:	4603      	mov	r3, r0
 810b068:	2b00      	cmp	r3, #0
 810b06a:	d001      	beq.n	810b070 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 810b06c:	2301      	movs	r3, #1
 810b06e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810b070:	6878      	ldr	r0, [r7, #4]
 810b072:	f000 f91f 	bl	810b2b4 <USB_FlushRxFifo>
 810b076:	4603      	mov	r3, r0
 810b078:	2b00      	cmp	r3, #0
 810b07a:	d001      	beq.n	810b080 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 810b07c:	2301      	movs	r3, #1
 810b07e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810b080:	68fb      	ldr	r3, [r7, #12]
 810b082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b086:	461a      	mov	r2, r3
 810b088:	2300      	movs	r3, #0
 810b08a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810b08c:	68fb      	ldr	r3, [r7, #12]
 810b08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b092:	461a      	mov	r2, r3
 810b094:	2300      	movs	r3, #0
 810b096:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810b098:	68fb      	ldr	r3, [r7, #12]
 810b09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b09e:	461a      	mov	r2, r3
 810b0a0:	2300      	movs	r3, #0
 810b0a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b0a4:	2300      	movs	r3, #0
 810b0a6:	613b      	str	r3, [r7, #16]
 810b0a8:	e043      	b.n	810b132 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b0aa:	693b      	ldr	r3, [r7, #16]
 810b0ac:	015a      	lsls	r2, r3, #5
 810b0ae:	68fb      	ldr	r3, [r7, #12]
 810b0b0:	4413      	add	r3, r2
 810b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b0b6:	681b      	ldr	r3, [r3, #0]
 810b0b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b0bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b0c0:	d118      	bne.n	810b0f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 810b0c2:	693b      	ldr	r3, [r7, #16]
 810b0c4:	2b00      	cmp	r3, #0
 810b0c6:	d10a      	bne.n	810b0de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810b0c8:	693b      	ldr	r3, [r7, #16]
 810b0ca:	015a      	lsls	r2, r3, #5
 810b0cc:	68fb      	ldr	r3, [r7, #12]
 810b0ce:	4413      	add	r3, r2
 810b0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b0d4:	461a      	mov	r2, r3
 810b0d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810b0da:	6013      	str	r3, [r2, #0]
 810b0dc:	e013      	b.n	810b106 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810b0de:	693b      	ldr	r3, [r7, #16]
 810b0e0:	015a      	lsls	r2, r3, #5
 810b0e2:	68fb      	ldr	r3, [r7, #12]
 810b0e4:	4413      	add	r3, r2
 810b0e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b0ea:	461a      	mov	r2, r3
 810b0ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810b0f0:	6013      	str	r3, [r2, #0]
 810b0f2:	e008      	b.n	810b106 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810b0f4:	693b      	ldr	r3, [r7, #16]
 810b0f6:	015a      	lsls	r2, r3, #5
 810b0f8:	68fb      	ldr	r3, [r7, #12]
 810b0fa:	4413      	add	r3, r2
 810b0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b100:	461a      	mov	r2, r3
 810b102:	2300      	movs	r3, #0
 810b104:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810b106:	693b      	ldr	r3, [r7, #16]
 810b108:	015a      	lsls	r2, r3, #5
 810b10a:	68fb      	ldr	r3, [r7, #12]
 810b10c:	4413      	add	r3, r2
 810b10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b112:	461a      	mov	r2, r3
 810b114:	2300      	movs	r3, #0
 810b116:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810b118:	693b      	ldr	r3, [r7, #16]
 810b11a:	015a      	lsls	r2, r3, #5
 810b11c:	68fb      	ldr	r3, [r7, #12]
 810b11e:	4413      	add	r3, r2
 810b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 810b124:	461a      	mov	r2, r3
 810b126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810b12a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b12c:	693b      	ldr	r3, [r7, #16]
 810b12e:	3301      	adds	r3, #1
 810b130:	613b      	str	r3, [r7, #16]
 810b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b134:	693a      	ldr	r2, [r7, #16]
 810b136:	429a      	cmp	r2, r3
 810b138:	d3b7      	bcc.n	810b0aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b13a:	2300      	movs	r3, #0
 810b13c:	613b      	str	r3, [r7, #16]
 810b13e:	e043      	b.n	810b1c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b140:	693b      	ldr	r3, [r7, #16]
 810b142:	015a      	lsls	r2, r3, #5
 810b144:	68fb      	ldr	r3, [r7, #12]
 810b146:	4413      	add	r3, r2
 810b148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b14c:	681b      	ldr	r3, [r3, #0]
 810b14e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810b152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810b156:	d118      	bne.n	810b18a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 810b158:	693b      	ldr	r3, [r7, #16]
 810b15a:	2b00      	cmp	r3, #0
 810b15c:	d10a      	bne.n	810b174 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810b15e:	693b      	ldr	r3, [r7, #16]
 810b160:	015a      	lsls	r2, r3, #5
 810b162:	68fb      	ldr	r3, [r7, #12]
 810b164:	4413      	add	r3, r2
 810b166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b16a:	461a      	mov	r2, r3
 810b16c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810b170:	6013      	str	r3, [r2, #0]
 810b172:	e013      	b.n	810b19c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810b174:	693b      	ldr	r3, [r7, #16]
 810b176:	015a      	lsls	r2, r3, #5
 810b178:	68fb      	ldr	r3, [r7, #12]
 810b17a:	4413      	add	r3, r2
 810b17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b180:	461a      	mov	r2, r3
 810b182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 810b186:	6013      	str	r3, [r2, #0]
 810b188:	e008      	b.n	810b19c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810b18a:	693b      	ldr	r3, [r7, #16]
 810b18c:	015a      	lsls	r2, r3, #5
 810b18e:	68fb      	ldr	r3, [r7, #12]
 810b190:	4413      	add	r3, r2
 810b192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b196:	461a      	mov	r2, r3
 810b198:	2300      	movs	r3, #0
 810b19a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810b19c:	693b      	ldr	r3, [r7, #16]
 810b19e:	015a      	lsls	r2, r3, #5
 810b1a0:	68fb      	ldr	r3, [r7, #12]
 810b1a2:	4413      	add	r3, r2
 810b1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b1a8:	461a      	mov	r2, r3
 810b1aa:	2300      	movs	r3, #0
 810b1ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810b1ae:	693b      	ldr	r3, [r7, #16]
 810b1b0:	015a      	lsls	r2, r3, #5
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	4413      	add	r3, r2
 810b1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 810b1ba:	461a      	mov	r2, r3
 810b1bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 810b1c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810b1c2:	693b      	ldr	r3, [r7, #16]
 810b1c4:	3301      	adds	r3, #1
 810b1c6:	613b      	str	r3, [r7, #16]
 810b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810b1ca:	693a      	ldr	r2, [r7, #16]
 810b1cc:	429a      	cmp	r2, r3
 810b1ce:	d3b7      	bcc.n	810b140 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810b1d0:	68fb      	ldr	r3, [r7, #12]
 810b1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b1d6:	691b      	ldr	r3, [r3, #16]
 810b1d8:	68fa      	ldr	r2, [r7, #12]
 810b1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810b1de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810b1e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810b1e4:	687b      	ldr	r3, [r7, #4]
 810b1e6:	2200      	movs	r2, #0
 810b1e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810b1ea:	687b      	ldr	r3, [r7, #4]
 810b1ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 810b1f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810b1f4:	2b00      	cmp	r3, #0
 810b1f6:	d105      	bne.n	810b204 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810b1f8:	687b      	ldr	r3, [r7, #4]
 810b1fa:	699b      	ldr	r3, [r3, #24]
 810b1fc:	f043 0210 	orr.w	r2, r3, #16
 810b200:	687b      	ldr	r3, [r7, #4]
 810b202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810b204:	687b      	ldr	r3, [r7, #4]
 810b206:	699a      	ldr	r2, [r3, #24]
 810b208:	4b0f      	ldr	r3, [pc, #60]	; (810b248 <USB_DevInit+0x2b8>)
 810b20a:	4313      	orrs	r3, r2
 810b20c:	687a      	ldr	r2, [r7, #4]
 810b20e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810b210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810b212:	2b00      	cmp	r3, #0
 810b214:	d005      	beq.n	810b222 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810b216:	687b      	ldr	r3, [r7, #4]
 810b218:	699b      	ldr	r3, [r3, #24]
 810b21a:	f043 0208 	orr.w	r2, r3, #8
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810b222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810b224:	2b01      	cmp	r3, #1
 810b226:	d107      	bne.n	810b238 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810b228:	687b      	ldr	r3, [r7, #4]
 810b22a:	699b      	ldr	r3, [r3, #24]
 810b22c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 810b230:	f043 0304 	orr.w	r3, r3, #4
 810b234:	687a      	ldr	r2, [r7, #4]
 810b236:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810b238:	7dfb      	ldrb	r3, [r7, #23]
}
 810b23a:	4618      	mov	r0, r3
 810b23c:	3718      	adds	r7, #24
 810b23e:	46bd      	mov	sp, r7
 810b240:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810b244:	b004      	add	sp, #16
 810b246:	4770      	bx	lr
 810b248:	803c3800 	.word	0x803c3800

0810b24c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810b24c:	b480      	push	{r7}
 810b24e:	b085      	sub	sp, #20
 810b250:	af00      	add	r7, sp, #0
 810b252:	6078      	str	r0, [r7, #4]
 810b254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810b256:	2300      	movs	r3, #0
 810b258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810b25a:	68fb      	ldr	r3, [r7, #12]
 810b25c:	3301      	adds	r3, #1
 810b25e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b260:	68fb      	ldr	r3, [r7, #12]
 810b262:	4a13      	ldr	r2, [pc, #76]	; (810b2b0 <USB_FlushTxFifo+0x64>)
 810b264:	4293      	cmp	r3, r2
 810b266:	d901      	bls.n	810b26c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810b268:	2303      	movs	r3, #3
 810b26a:	e01b      	b.n	810b2a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810b26c:	687b      	ldr	r3, [r7, #4]
 810b26e:	691b      	ldr	r3, [r3, #16]
 810b270:	2b00      	cmp	r3, #0
 810b272:	daf2      	bge.n	810b25a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810b274:	2300      	movs	r3, #0
 810b276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810b278:	683b      	ldr	r3, [r7, #0]
 810b27a:	019b      	lsls	r3, r3, #6
 810b27c:	f043 0220 	orr.w	r2, r3, #32
 810b280:	687b      	ldr	r3, [r7, #4]
 810b282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	3301      	adds	r3, #1
 810b288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b28a:	68fb      	ldr	r3, [r7, #12]
 810b28c:	4a08      	ldr	r2, [pc, #32]	; (810b2b0 <USB_FlushTxFifo+0x64>)
 810b28e:	4293      	cmp	r3, r2
 810b290:	d901      	bls.n	810b296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810b292:	2303      	movs	r3, #3
 810b294:	e006      	b.n	810b2a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810b296:	687b      	ldr	r3, [r7, #4]
 810b298:	691b      	ldr	r3, [r3, #16]
 810b29a:	f003 0320 	and.w	r3, r3, #32
 810b29e:	2b20      	cmp	r3, #32
 810b2a0:	d0f0      	beq.n	810b284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810b2a2:	2300      	movs	r3, #0
}
 810b2a4:	4618      	mov	r0, r3
 810b2a6:	3714      	adds	r7, #20
 810b2a8:	46bd      	mov	sp, r7
 810b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2ae:	4770      	bx	lr
 810b2b0:	00030d40 	.word	0x00030d40

0810b2b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810b2b4:	b480      	push	{r7}
 810b2b6:	b085      	sub	sp, #20
 810b2b8:	af00      	add	r7, sp, #0
 810b2ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810b2bc:	2300      	movs	r3, #0
 810b2be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810b2c0:	68fb      	ldr	r3, [r7, #12]
 810b2c2:	3301      	adds	r3, #1
 810b2c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b2c6:	68fb      	ldr	r3, [r7, #12]
 810b2c8:	4a11      	ldr	r2, [pc, #68]	; (810b310 <USB_FlushRxFifo+0x5c>)
 810b2ca:	4293      	cmp	r3, r2
 810b2cc:	d901      	bls.n	810b2d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810b2ce:	2303      	movs	r3, #3
 810b2d0:	e018      	b.n	810b304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810b2d2:	687b      	ldr	r3, [r7, #4]
 810b2d4:	691b      	ldr	r3, [r3, #16]
 810b2d6:	2b00      	cmp	r3, #0
 810b2d8:	daf2      	bge.n	810b2c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810b2da:	2300      	movs	r3, #0
 810b2dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810b2de:	687b      	ldr	r3, [r7, #4]
 810b2e0:	2210      	movs	r2, #16
 810b2e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810b2e4:	68fb      	ldr	r3, [r7, #12]
 810b2e6:	3301      	adds	r3, #1
 810b2e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b2ea:	68fb      	ldr	r3, [r7, #12]
 810b2ec:	4a08      	ldr	r2, [pc, #32]	; (810b310 <USB_FlushRxFifo+0x5c>)
 810b2ee:	4293      	cmp	r3, r2
 810b2f0:	d901      	bls.n	810b2f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810b2f2:	2303      	movs	r3, #3
 810b2f4:	e006      	b.n	810b304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810b2f6:	687b      	ldr	r3, [r7, #4]
 810b2f8:	691b      	ldr	r3, [r3, #16]
 810b2fa:	f003 0310 	and.w	r3, r3, #16
 810b2fe:	2b10      	cmp	r3, #16
 810b300:	d0f0      	beq.n	810b2e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810b302:	2300      	movs	r3, #0
}
 810b304:	4618      	mov	r0, r3
 810b306:	3714      	adds	r7, #20
 810b308:	46bd      	mov	sp, r7
 810b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b30e:	4770      	bx	lr
 810b310:	00030d40 	.word	0x00030d40

0810b314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810b314:	b480      	push	{r7}
 810b316:	b085      	sub	sp, #20
 810b318:	af00      	add	r7, sp, #0
 810b31a:	6078      	str	r0, [r7, #4]
 810b31c:	460b      	mov	r3, r1
 810b31e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b320:	687b      	ldr	r3, [r7, #4]
 810b322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810b324:	68fb      	ldr	r3, [r7, #12]
 810b326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b32a:	681a      	ldr	r2, [r3, #0]
 810b32c:	78fb      	ldrb	r3, [r7, #3]
 810b32e:	68f9      	ldr	r1, [r7, #12]
 810b330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 810b334:	4313      	orrs	r3, r2
 810b336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810b338:	2300      	movs	r3, #0
}
 810b33a:	4618      	mov	r0, r3
 810b33c:	3714      	adds	r7, #20
 810b33e:	46bd      	mov	sp, r7
 810b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b344:	4770      	bx	lr

0810b346 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 810b346:	b480      	push	{r7}
 810b348:	b085      	sub	sp, #20
 810b34a:	af00      	add	r7, sp, #0
 810b34c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b34e:	687b      	ldr	r3, [r7, #4]
 810b350:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810b352:	68fb      	ldr	r3, [r7, #12]
 810b354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 810b358:	681b      	ldr	r3, [r3, #0]
 810b35a:	68fa      	ldr	r2, [r7, #12]
 810b35c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 810b360:	f023 0303 	bic.w	r3, r3, #3
 810b364:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810b366:	68fb      	ldr	r3, [r7, #12]
 810b368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810b36c:	685b      	ldr	r3, [r3, #4]
 810b36e:	68fa      	ldr	r2, [r7, #12]
 810b370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 810b374:	f043 0302 	orr.w	r3, r3, #2
 810b378:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810b37a:	2300      	movs	r3, #0
}
 810b37c:	4618      	mov	r0, r3
 810b37e:	3714      	adds	r7, #20
 810b380:	46bd      	mov	sp, r7
 810b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b386:	4770      	bx	lr

0810b388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 810b388:	b480      	push	{r7}
 810b38a:	b083      	sub	sp, #12
 810b38c:	af00      	add	r7, sp, #0
 810b38e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810b390:	687b      	ldr	r3, [r7, #4]
 810b392:	695b      	ldr	r3, [r3, #20]
 810b394:	f003 0301 	and.w	r3, r3, #1
}
 810b398:	4618      	mov	r0, r3
 810b39a:	370c      	adds	r7, #12
 810b39c:	46bd      	mov	sp, r7
 810b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3a2:	4770      	bx	lr

0810b3a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810b3a4:	b480      	push	{r7}
 810b3a6:	b085      	sub	sp, #20
 810b3a8:	af00      	add	r7, sp, #0
 810b3aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810b3ac:	2300      	movs	r3, #0
 810b3ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810b3b0:	68fb      	ldr	r3, [r7, #12]
 810b3b2:	3301      	adds	r3, #1
 810b3b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b3b6:	68fb      	ldr	r3, [r7, #12]
 810b3b8:	4a13      	ldr	r2, [pc, #76]	; (810b408 <USB_CoreReset+0x64>)
 810b3ba:	4293      	cmp	r3, r2
 810b3bc:	d901      	bls.n	810b3c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810b3be:	2303      	movs	r3, #3
 810b3c0:	e01b      	b.n	810b3fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810b3c2:	687b      	ldr	r3, [r7, #4]
 810b3c4:	691b      	ldr	r3, [r3, #16]
 810b3c6:	2b00      	cmp	r3, #0
 810b3c8:	daf2      	bge.n	810b3b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810b3ca:	2300      	movs	r3, #0
 810b3cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810b3ce:	687b      	ldr	r3, [r7, #4]
 810b3d0:	691b      	ldr	r3, [r3, #16]
 810b3d2:	f043 0201 	orr.w	r2, r3, #1
 810b3d6:	687b      	ldr	r3, [r7, #4]
 810b3d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810b3da:	68fb      	ldr	r3, [r7, #12]
 810b3dc:	3301      	adds	r3, #1
 810b3de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 810b3e0:	68fb      	ldr	r3, [r7, #12]
 810b3e2:	4a09      	ldr	r2, [pc, #36]	; (810b408 <USB_CoreReset+0x64>)
 810b3e4:	4293      	cmp	r3, r2
 810b3e6:	d901      	bls.n	810b3ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810b3e8:	2303      	movs	r3, #3
 810b3ea:	e006      	b.n	810b3fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	691b      	ldr	r3, [r3, #16]
 810b3f0:	f003 0301 	and.w	r3, r3, #1
 810b3f4:	2b01      	cmp	r3, #1
 810b3f6:	d0f0      	beq.n	810b3da <USB_CoreReset+0x36>

  return HAL_OK;
 810b3f8:	2300      	movs	r3, #0
}
 810b3fa:	4618      	mov	r0, r3
 810b3fc:	3714      	adds	r7, #20
 810b3fe:	46bd      	mov	sp, r7
 810b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b404:	4770      	bx	lr
 810b406:	bf00      	nop
 810b408:	00030d40 	.word	0x00030d40

0810b40c <std>:
 810b40c:	2300      	movs	r3, #0
 810b40e:	b510      	push	{r4, lr}
 810b410:	4604      	mov	r4, r0
 810b412:	e9c0 3300 	strd	r3, r3, [r0]
 810b416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810b41a:	6083      	str	r3, [r0, #8]
 810b41c:	8181      	strh	r1, [r0, #12]
 810b41e:	6643      	str	r3, [r0, #100]	; 0x64
 810b420:	81c2      	strh	r2, [r0, #14]
 810b422:	6183      	str	r3, [r0, #24]
 810b424:	4619      	mov	r1, r3
 810b426:	2208      	movs	r2, #8
 810b428:	305c      	adds	r0, #92	; 0x5c
 810b42a:	f000 f9f7 	bl	810b81c <memset>
 810b42e:	4b0d      	ldr	r3, [pc, #52]	; (810b464 <std+0x58>)
 810b430:	6263      	str	r3, [r4, #36]	; 0x24
 810b432:	4b0d      	ldr	r3, [pc, #52]	; (810b468 <std+0x5c>)
 810b434:	62a3      	str	r3, [r4, #40]	; 0x28
 810b436:	4b0d      	ldr	r3, [pc, #52]	; (810b46c <std+0x60>)
 810b438:	62e3      	str	r3, [r4, #44]	; 0x2c
 810b43a:	4b0d      	ldr	r3, [pc, #52]	; (810b470 <std+0x64>)
 810b43c:	6323      	str	r3, [r4, #48]	; 0x30
 810b43e:	4b0d      	ldr	r3, [pc, #52]	; (810b474 <std+0x68>)
 810b440:	6224      	str	r4, [r4, #32]
 810b442:	429c      	cmp	r4, r3
 810b444:	d006      	beq.n	810b454 <std+0x48>
 810b446:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810b44a:	4294      	cmp	r4, r2
 810b44c:	d002      	beq.n	810b454 <std+0x48>
 810b44e:	33d0      	adds	r3, #208	; 0xd0
 810b450:	429c      	cmp	r4, r3
 810b452:	d105      	bne.n	810b460 <std+0x54>
 810b454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810b458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b45c:	f000 ba56 	b.w	810b90c <__retarget_lock_init_recursive>
 810b460:	bd10      	pop	{r4, pc}
 810b462:	bf00      	nop
 810b464:	0810b66d 	.word	0x0810b66d
 810b468:	0810b68f 	.word	0x0810b68f
 810b46c:	0810b6c7 	.word	0x0810b6c7
 810b470:	0810b6eb 	.word	0x0810b6eb
 810b474:	10000d64 	.word	0x10000d64

0810b478 <stdio_exit_handler>:
 810b478:	4a02      	ldr	r2, [pc, #8]	; (810b484 <stdio_exit_handler+0xc>)
 810b47a:	4903      	ldr	r1, [pc, #12]	; (810b488 <stdio_exit_handler+0x10>)
 810b47c:	4803      	ldr	r0, [pc, #12]	; (810b48c <stdio_exit_handler+0x14>)
 810b47e:	f000 b869 	b.w	810b554 <_fwalk_sglue>
 810b482:	bf00      	nop
 810b484:	10000010 	.word	0x10000010
 810b488:	0810c1d5 	.word	0x0810c1d5
 810b48c:	1000001c 	.word	0x1000001c

0810b490 <cleanup_stdio>:
 810b490:	6841      	ldr	r1, [r0, #4]
 810b492:	4b0c      	ldr	r3, [pc, #48]	; (810b4c4 <cleanup_stdio+0x34>)
 810b494:	4299      	cmp	r1, r3
 810b496:	b510      	push	{r4, lr}
 810b498:	4604      	mov	r4, r0
 810b49a:	d001      	beq.n	810b4a0 <cleanup_stdio+0x10>
 810b49c:	f000 fe9a 	bl	810c1d4 <_fflush_r>
 810b4a0:	68a1      	ldr	r1, [r4, #8]
 810b4a2:	4b09      	ldr	r3, [pc, #36]	; (810b4c8 <cleanup_stdio+0x38>)
 810b4a4:	4299      	cmp	r1, r3
 810b4a6:	d002      	beq.n	810b4ae <cleanup_stdio+0x1e>
 810b4a8:	4620      	mov	r0, r4
 810b4aa:	f000 fe93 	bl	810c1d4 <_fflush_r>
 810b4ae:	68e1      	ldr	r1, [r4, #12]
 810b4b0:	4b06      	ldr	r3, [pc, #24]	; (810b4cc <cleanup_stdio+0x3c>)
 810b4b2:	4299      	cmp	r1, r3
 810b4b4:	d004      	beq.n	810b4c0 <cleanup_stdio+0x30>
 810b4b6:	4620      	mov	r0, r4
 810b4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b4bc:	f000 be8a 	b.w	810c1d4 <_fflush_r>
 810b4c0:	bd10      	pop	{r4, pc}
 810b4c2:	bf00      	nop
 810b4c4:	10000d64 	.word	0x10000d64
 810b4c8:	10000dcc 	.word	0x10000dcc
 810b4cc:	10000e34 	.word	0x10000e34

0810b4d0 <global_stdio_init.part.0>:
 810b4d0:	b510      	push	{r4, lr}
 810b4d2:	4b0b      	ldr	r3, [pc, #44]	; (810b500 <global_stdio_init.part.0+0x30>)
 810b4d4:	4c0b      	ldr	r4, [pc, #44]	; (810b504 <global_stdio_init.part.0+0x34>)
 810b4d6:	4a0c      	ldr	r2, [pc, #48]	; (810b508 <global_stdio_init.part.0+0x38>)
 810b4d8:	601a      	str	r2, [r3, #0]
 810b4da:	4620      	mov	r0, r4
 810b4dc:	2200      	movs	r2, #0
 810b4de:	2104      	movs	r1, #4
 810b4e0:	f7ff ff94 	bl	810b40c <std>
 810b4e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810b4e8:	2201      	movs	r2, #1
 810b4ea:	2109      	movs	r1, #9
 810b4ec:	f7ff ff8e 	bl	810b40c <std>
 810b4f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810b4f4:	2202      	movs	r2, #2
 810b4f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b4fa:	2112      	movs	r1, #18
 810b4fc:	f7ff bf86 	b.w	810b40c <std>
 810b500:	10000e9c 	.word	0x10000e9c
 810b504:	10000d64 	.word	0x10000d64
 810b508:	0810b479 	.word	0x0810b479

0810b50c <__sfp_lock_acquire>:
 810b50c:	4801      	ldr	r0, [pc, #4]	; (810b514 <__sfp_lock_acquire+0x8>)
 810b50e:	f000 b9fe 	b.w	810b90e <__retarget_lock_acquire_recursive>
 810b512:	bf00      	nop
 810b514:	10000ea5 	.word	0x10000ea5

0810b518 <__sfp_lock_release>:
 810b518:	4801      	ldr	r0, [pc, #4]	; (810b520 <__sfp_lock_release+0x8>)
 810b51a:	f000 b9f9 	b.w	810b910 <__retarget_lock_release_recursive>
 810b51e:	bf00      	nop
 810b520:	10000ea5 	.word	0x10000ea5

0810b524 <__sinit>:
 810b524:	b510      	push	{r4, lr}
 810b526:	4604      	mov	r4, r0
 810b528:	f7ff fff0 	bl	810b50c <__sfp_lock_acquire>
 810b52c:	6a23      	ldr	r3, [r4, #32]
 810b52e:	b11b      	cbz	r3, 810b538 <__sinit+0x14>
 810b530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b534:	f7ff bff0 	b.w	810b518 <__sfp_lock_release>
 810b538:	4b04      	ldr	r3, [pc, #16]	; (810b54c <__sinit+0x28>)
 810b53a:	6223      	str	r3, [r4, #32]
 810b53c:	4b04      	ldr	r3, [pc, #16]	; (810b550 <__sinit+0x2c>)
 810b53e:	681b      	ldr	r3, [r3, #0]
 810b540:	2b00      	cmp	r3, #0
 810b542:	d1f5      	bne.n	810b530 <__sinit+0xc>
 810b544:	f7ff ffc4 	bl	810b4d0 <global_stdio_init.part.0>
 810b548:	e7f2      	b.n	810b530 <__sinit+0xc>
 810b54a:	bf00      	nop
 810b54c:	0810b491 	.word	0x0810b491
 810b550:	10000e9c 	.word	0x10000e9c

0810b554 <_fwalk_sglue>:
 810b554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b558:	4607      	mov	r7, r0
 810b55a:	4688      	mov	r8, r1
 810b55c:	4614      	mov	r4, r2
 810b55e:	2600      	movs	r6, #0
 810b560:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b564:	f1b9 0901 	subs.w	r9, r9, #1
 810b568:	d505      	bpl.n	810b576 <_fwalk_sglue+0x22>
 810b56a:	6824      	ldr	r4, [r4, #0]
 810b56c:	2c00      	cmp	r4, #0
 810b56e:	d1f7      	bne.n	810b560 <_fwalk_sglue+0xc>
 810b570:	4630      	mov	r0, r6
 810b572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b576:	89ab      	ldrh	r3, [r5, #12]
 810b578:	2b01      	cmp	r3, #1
 810b57a:	d907      	bls.n	810b58c <_fwalk_sglue+0x38>
 810b57c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b580:	3301      	adds	r3, #1
 810b582:	d003      	beq.n	810b58c <_fwalk_sglue+0x38>
 810b584:	4629      	mov	r1, r5
 810b586:	4638      	mov	r0, r7
 810b588:	47c0      	blx	r8
 810b58a:	4306      	orrs	r6, r0
 810b58c:	3568      	adds	r5, #104	; 0x68
 810b58e:	e7e9      	b.n	810b564 <_fwalk_sglue+0x10>

0810b590 <iprintf>:
 810b590:	b40f      	push	{r0, r1, r2, r3}
 810b592:	b507      	push	{r0, r1, r2, lr}
 810b594:	4906      	ldr	r1, [pc, #24]	; (810b5b0 <iprintf+0x20>)
 810b596:	ab04      	add	r3, sp, #16
 810b598:	6808      	ldr	r0, [r1, #0]
 810b59a:	f853 2b04 	ldr.w	r2, [r3], #4
 810b59e:	6881      	ldr	r1, [r0, #8]
 810b5a0:	9301      	str	r3, [sp, #4]
 810b5a2:	f000 fae7 	bl	810bb74 <_vfiprintf_r>
 810b5a6:	b003      	add	sp, #12
 810b5a8:	f85d eb04 	ldr.w	lr, [sp], #4
 810b5ac:	b004      	add	sp, #16
 810b5ae:	4770      	bx	lr
 810b5b0:	10000068 	.word	0x10000068

0810b5b4 <_puts_r>:
 810b5b4:	6a03      	ldr	r3, [r0, #32]
 810b5b6:	b570      	push	{r4, r5, r6, lr}
 810b5b8:	6884      	ldr	r4, [r0, #8]
 810b5ba:	4605      	mov	r5, r0
 810b5bc:	460e      	mov	r6, r1
 810b5be:	b90b      	cbnz	r3, 810b5c4 <_puts_r+0x10>
 810b5c0:	f7ff ffb0 	bl	810b524 <__sinit>
 810b5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b5c6:	07db      	lsls	r3, r3, #31
 810b5c8:	d405      	bmi.n	810b5d6 <_puts_r+0x22>
 810b5ca:	89a3      	ldrh	r3, [r4, #12]
 810b5cc:	0598      	lsls	r0, r3, #22
 810b5ce:	d402      	bmi.n	810b5d6 <_puts_r+0x22>
 810b5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b5d2:	f000 f99c 	bl	810b90e <__retarget_lock_acquire_recursive>
 810b5d6:	89a3      	ldrh	r3, [r4, #12]
 810b5d8:	0719      	lsls	r1, r3, #28
 810b5da:	d513      	bpl.n	810b604 <_puts_r+0x50>
 810b5dc:	6923      	ldr	r3, [r4, #16]
 810b5de:	b18b      	cbz	r3, 810b604 <_puts_r+0x50>
 810b5e0:	3e01      	subs	r6, #1
 810b5e2:	68a3      	ldr	r3, [r4, #8]
 810b5e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810b5e8:	3b01      	subs	r3, #1
 810b5ea:	60a3      	str	r3, [r4, #8]
 810b5ec:	b9e9      	cbnz	r1, 810b62a <_puts_r+0x76>
 810b5ee:	2b00      	cmp	r3, #0
 810b5f0:	da2e      	bge.n	810b650 <_puts_r+0x9c>
 810b5f2:	4622      	mov	r2, r4
 810b5f4:	210a      	movs	r1, #10
 810b5f6:	4628      	mov	r0, r5
 810b5f8:	f000 f87b 	bl	810b6f2 <__swbuf_r>
 810b5fc:	3001      	adds	r0, #1
 810b5fe:	d007      	beq.n	810b610 <_puts_r+0x5c>
 810b600:	250a      	movs	r5, #10
 810b602:	e007      	b.n	810b614 <_puts_r+0x60>
 810b604:	4621      	mov	r1, r4
 810b606:	4628      	mov	r0, r5
 810b608:	f000 f8b0 	bl	810b76c <__swsetup_r>
 810b60c:	2800      	cmp	r0, #0
 810b60e:	d0e7      	beq.n	810b5e0 <_puts_r+0x2c>
 810b610:	f04f 35ff 	mov.w	r5, #4294967295
 810b614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810b616:	07da      	lsls	r2, r3, #31
 810b618:	d405      	bmi.n	810b626 <_puts_r+0x72>
 810b61a:	89a3      	ldrh	r3, [r4, #12]
 810b61c:	059b      	lsls	r3, r3, #22
 810b61e:	d402      	bmi.n	810b626 <_puts_r+0x72>
 810b620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810b622:	f000 f975 	bl	810b910 <__retarget_lock_release_recursive>
 810b626:	4628      	mov	r0, r5
 810b628:	bd70      	pop	{r4, r5, r6, pc}
 810b62a:	2b00      	cmp	r3, #0
 810b62c:	da04      	bge.n	810b638 <_puts_r+0x84>
 810b62e:	69a2      	ldr	r2, [r4, #24]
 810b630:	429a      	cmp	r2, r3
 810b632:	dc06      	bgt.n	810b642 <_puts_r+0x8e>
 810b634:	290a      	cmp	r1, #10
 810b636:	d004      	beq.n	810b642 <_puts_r+0x8e>
 810b638:	6823      	ldr	r3, [r4, #0]
 810b63a:	1c5a      	adds	r2, r3, #1
 810b63c:	6022      	str	r2, [r4, #0]
 810b63e:	7019      	strb	r1, [r3, #0]
 810b640:	e7cf      	b.n	810b5e2 <_puts_r+0x2e>
 810b642:	4622      	mov	r2, r4
 810b644:	4628      	mov	r0, r5
 810b646:	f000 f854 	bl	810b6f2 <__swbuf_r>
 810b64a:	3001      	adds	r0, #1
 810b64c:	d1c9      	bne.n	810b5e2 <_puts_r+0x2e>
 810b64e:	e7df      	b.n	810b610 <_puts_r+0x5c>
 810b650:	6823      	ldr	r3, [r4, #0]
 810b652:	250a      	movs	r5, #10
 810b654:	1c5a      	adds	r2, r3, #1
 810b656:	6022      	str	r2, [r4, #0]
 810b658:	701d      	strb	r5, [r3, #0]
 810b65a:	e7db      	b.n	810b614 <_puts_r+0x60>

0810b65c <puts>:
 810b65c:	4b02      	ldr	r3, [pc, #8]	; (810b668 <puts+0xc>)
 810b65e:	4601      	mov	r1, r0
 810b660:	6818      	ldr	r0, [r3, #0]
 810b662:	f7ff bfa7 	b.w	810b5b4 <_puts_r>
 810b666:	bf00      	nop
 810b668:	10000068 	.word	0x10000068

0810b66c <__sread>:
 810b66c:	b510      	push	{r4, lr}
 810b66e:	460c      	mov	r4, r1
 810b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b674:	f000 f8fc 	bl	810b870 <_read_r>
 810b678:	2800      	cmp	r0, #0
 810b67a:	bfab      	itete	ge
 810b67c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b67e:	89a3      	ldrhlt	r3, [r4, #12]
 810b680:	181b      	addge	r3, r3, r0
 810b682:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b686:	bfac      	ite	ge
 810b688:	6563      	strge	r3, [r4, #84]	; 0x54
 810b68a:	81a3      	strhlt	r3, [r4, #12]
 810b68c:	bd10      	pop	{r4, pc}

0810b68e <__swrite>:
 810b68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b692:	461f      	mov	r7, r3
 810b694:	898b      	ldrh	r3, [r1, #12]
 810b696:	05db      	lsls	r3, r3, #23
 810b698:	4605      	mov	r5, r0
 810b69a:	460c      	mov	r4, r1
 810b69c:	4616      	mov	r6, r2
 810b69e:	d505      	bpl.n	810b6ac <__swrite+0x1e>
 810b6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b6a4:	2302      	movs	r3, #2
 810b6a6:	2200      	movs	r2, #0
 810b6a8:	f000 f8d0 	bl	810b84c <_lseek_r>
 810b6ac:	89a3      	ldrh	r3, [r4, #12]
 810b6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b6b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b6b6:	81a3      	strh	r3, [r4, #12]
 810b6b8:	4632      	mov	r2, r6
 810b6ba:	463b      	mov	r3, r7
 810b6bc:	4628      	mov	r0, r5
 810b6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b6c2:	f000 b8e7 	b.w	810b894 <_write_r>

0810b6c6 <__sseek>:
 810b6c6:	b510      	push	{r4, lr}
 810b6c8:	460c      	mov	r4, r1
 810b6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b6ce:	f000 f8bd 	bl	810b84c <_lseek_r>
 810b6d2:	1c43      	adds	r3, r0, #1
 810b6d4:	89a3      	ldrh	r3, [r4, #12]
 810b6d6:	bf15      	itete	ne
 810b6d8:	6560      	strne	r0, [r4, #84]	; 0x54
 810b6da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b6de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b6e2:	81a3      	strheq	r3, [r4, #12]
 810b6e4:	bf18      	it	ne
 810b6e6:	81a3      	strhne	r3, [r4, #12]
 810b6e8:	bd10      	pop	{r4, pc}

0810b6ea <__sclose>:
 810b6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b6ee:	f000 b89d 	b.w	810b82c <_close_r>

0810b6f2 <__swbuf_r>:
 810b6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b6f4:	460e      	mov	r6, r1
 810b6f6:	4614      	mov	r4, r2
 810b6f8:	4605      	mov	r5, r0
 810b6fa:	b118      	cbz	r0, 810b704 <__swbuf_r+0x12>
 810b6fc:	6a03      	ldr	r3, [r0, #32]
 810b6fe:	b90b      	cbnz	r3, 810b704 <__swbuf_r+0x12>
 810b700:	f7ff ff10 	bl	810b524 <__sinit>
 810b704:	69a3      	ldr	r3, [r4, #24]
 810b706:	60a3      	str	r3, [r4, #8]
 810b708:	89a3      	ldrh	r3, [r4, #12]
 810b70a:	071a      	lsls	r2, r3, #28
 810b70c:	d525      	bpl.n	810b75a <__swbuf_r+0x68>
 810b70e:	6923      	ldr	r3, [r4, #16]
 810b710:	b31b      	cbz	r3, 810b75a <__swbuf_r+0x68>
 810b712:	6823      	ldr	r3, [r4, #0]
 810b714:	6922      	ldr	r2, [r4, #16]
 810b716:	1a98      	subs	r0, r3, r2
 810b718:	6963      	ldr	r3, [r4, #20]
 810b71a:	b2f6      	uxtb	r6, r6
 810b71c:	4283      	cmp	r3, r0
 810b71e:	4637      	mov	r7, r6
 810b720:	dc04      	bgt.n	810b72c <__swbuf_r+0x3a>
 810b722:	4621      	mov	r1, r4
 810b724:	4628      	mov	r0, r5
 810b726:	f000 fd55 	bl	810c1d4 <_fflush_r>
 810b72a:	b9e0      	cbnz	r0, 810b766 <__swbuf_r+0x74>
 810b72c:	68a3      	ldr	r3, [r4, #8]
 810b72e:	3b01      	subs	r3, #1
 810b730:	60a3      	str	r3, [r4, #8]
 810b732:	6823      	ldr	r3, [r4, #0]
 810b734:	1c5a      	adds	r2, r3, #1
 810b736:	6022      	str	r2, [r4, #0]
 810b738:	701e      	strb	r6, [r3, #0]
 810b73a:	6962      	ldr	r2, [r4, #20]
 810b73c:	1c43      	adds	r3, r0, #1
 810b73e:	429a      	cmp	r2, r3
 810b740:	d004      	beq.n	810b74c <__swbuf_r+0x5a>
 810b742:	89a3      	ldrh	r3, [r4, #12]
 810b744:	07db      	lsls	r3, r3, #31
 810b746:	d506      	bpl.n	810b756 <__swbuf_r+0x64>
 810b748:	2e0a      	cmp	r6, #10
 810b74a:	d104      	bne.n	810b756 <__swbuf_r+0x64>
 810b74c:	4621      	mov	r1, r4
 810b74e:	4628      	mov	r0, r5
 810b750:	f000 fd40 	bl	810c1d4 <_fflush_r>
 810b754:	b938      	cbnz	r0, 810b766 <__swbuf_r+0x74>
 810b756:	4638      	mov	r0, r7
 810b758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b75a:	4621      	mov	r1, r4
 810b75c:	4628      	mov	r0, r5
 810b75e:	f000 f805 	bl	810b76c <__swsetup_r>
 810b762:	2800      	cmp	r0, #0
 810b764:	d0d5      	beq.n	810b712 <__swbuf_r+0x20>
 810b766:	f04f 37ff 	mov.w	r7, #4294967295
 810b76a:	e7f4      	b.n	810b756 <__swbuf_r+0x64>

0810b76c <__swsetup_r>:
 810b76c:	b538      	push	{r3, r4, r5, lr}
 810b76e:	4b2a      	ldr	r3, [pc, #168]	; (810b818 <__swsetup_r+0xac>)
 810b770:	4605      	mov	r5, r0
 810b772:	6818      	ldr	r0, [r3, #0]
 810b774:	460c      	mov	r4, r1
 810b776:	b118      	cbz	r0, 810b780 <__swsetup_r+0x14>
 810b778:	6a03      	ldr	r3, [r0, #32]
 810b77a:	b90b      	cbnz	r3, 810b780 <__swsetup_r+0x14>
 810b77c:	f7ff fed2 	bl	810b524 <__sinit>
 810b780:	89a3      	ldrh	r3, [r4, #12]
 810b782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b786:	0718      	lsls	r0, r3, #28
 810b788:	d422      	bmi.n	810b7d0 <__swsetup_r+0x64>
 810b78a:	06d9      	lsls	r1, r3, #27
 810b78c:	d407      	bmi.n	810b79e <__swsetup_r+0x32>
 810b78e:	2309      	movs	r3, #9
 810b790:	602b      	str	r3, [r5, #0]
 810b792:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810b796:	81a3      	strh	r3, [r4, #12]
 810b798:	f04f 30ff 	mov.w	r0, #4294967295
 810b79c:	e034      	b.n	810b808 <__swsetup_r+0x9c>
 810b79e:	0758      	lsls	r0, r3, #29
 810b7a0:	d512      	bpl.n	810b7c8 <__swsetup_r+0x5c>
 810b7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810b7a4:	b141      	cbz	r1, 810b7b8 <__swsetup_r+0x4c>
 810b7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810b7aa:	4299      	cmp	r1, r3
 810b7ac:	d002      	beq.n	810b7b4 <__swsetup_r+0x48>
 810b7ae:	4628      	mov	r0, r5
 810b7b0:	f000 f8be 	bl	810b930 <_free_r>
 810b7b4:	2300      	movs	r3, #0
 810b7b6:	6363      	str	r3, [r4, #52]	; 0x34
 810b7b8:	89a3      	ldrh	r3, [r4, #12]
 810b7ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810b7be:	81a3      	strh	r3, [r4, #12]
 810b7c0:	2300      	movs	r3, #0
 810b7c2:	6063      	str	r3, [r4, #4]
 810b7c4:	6923      	ldr	r3, [r4, #16]
 810b7c6:	6023      	str	r3, [r4, #0]
 810b7c8:	89a3      	ldrh	r3, [r4, #12]
 810b7ca:	f043 0308 	orr.w	r3, r3, #8
 810b7ce:	81a3      	strh	r3, [r4, #12]
 810b7d0:	6923      	ldr	r3, [r4, #16]
 810b7d2:	b94b      	cbnz	r3, 810b7e8 <__swsetup_r+0x7c>
 810b7d4:	89a3      	ldrh	r3, [r4, #12]
 810b7d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810b7da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b7de:	d003      	beq.n	810b7e8 <__swsetup_r+0x7c>
 810b7e0:	4621      	mov	r1, r4
 810b7e2:	4628      	mov	r0, r5
 810b7e4:	f000 fd44 	bl	810c270 <__smakebuf_r>
 810b7e8:	89a0      	ldrh	r0, [r4, #12]
 810b7ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810b7ee:	f010 0301 	ands.w	r3, r0, #1
 810b7f2:	d00a      	beq.n	810b80a <__swsetup_r+0x9e>
 810b7f4:	2300      	movs	r3, #0
 810b7f6:	60a3      	str	r3, [r4, #8]
 810b7f8:	6963      	ldr	r3, [r4, #20]
 810b7fa:	425b      	negs	r3, r3
 810b7fc:	61a3      	str	r3, [r4, #24]
 810b7fe:	6923      	ldr	r3, [r4, #16]
 810b800:	b943      	cbnz	r3, 810b814 <__swsetup_r+0xa8>
 810b802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810b806:	d1c4      	bne.n	810b792 <__swsetup_r+0x26>
 810b808:	bd38      	pop	{r3, r4, r5, pc}
 810b80a:	0781      	lsls	r1, r0, #30
 810b80c:	bf58      	it	pl
 810b80e:	6963      	ldrpl	r3, [r4, #20]
 810b810:	60a3      	str	r3, [r4, #8]
 810b812:	e7f4      	b.n	810b7fe <__swsetup_r+0x92>
 810b814:	2000      	movs	r0, #0
 810b816:	e7f7      	b.n	810b808 <__swsetup_r+0x9c>
 810b818:	10000068 	.word	0x10000068

0810b81c <memset>:
 810b81c:	4402      	add	r2, r0
 810b81e:	4603      	mov	r3, r0
 810b820:	4293      	cmp	r3, r2
 810b822:	d100      	bne.n	810b826 <memset+0xa>
 810b824:	4770      	bx	lr
 810b826:	f803 1b01 	strb.w	r1, [r3], #1
 810b82a:	e7f9      	b.n	810b820 <memset+0x4>

0810b82c <_close_r>:
 810b82c:	b538      	push	{r3, r4, r5, lr}
 810b82e:	4d06      	ldr	r5, [pc, #24]	; (810b848 <_close_r+0x1c>)
 810b830:	2300      	movs	r3, #0
 810b832:	4604      	mov	r4, r0
 810b834:	4608      	mov	r0, r1
 810b836:	602b      	str	r3, [r5, #0]
 810b838:	f7f6 fa69 	bl	8101d0e <_close>
 810b83c:	1c43      	adds	r3, r0, #1
 810b83e:	d102      	bne.n	810b846 <_close_r+0x1a>
 810b840:	682b      	ldr	r3, [r5, #0]
 810b842:	b103      	cbz	r3, 810b846 <_close_r+0x1a>
 810b844:	6023      	str	r3, [r4, #0]
 810b846:	bd38      	pop	{r3, r4, r5, pc}
 810b848:	10000ea0 	.word	0x10000ea0

0810b84c <_lseek_r>:
 810b84c:	b538      	push	{r3, r4, r5, lr}
 810b84e:	4d07      	ldr	r5, [pc, #28]	; (810b86c <_lseek_r+0x20>)
 810b850:	4604      	mov	r4, r0
 810b852:	4608      	mov	r0, r1
 810b854:	4611      	mov	r1, r2
 810b856:	2200      	movs	r2, #0
 810b858:	602a      	str	r2, [r5, #0]
 810b85a:	461a      	mov	r2, r3
 810b85c:	f7f6 fa7e 	bl	8101d5c <_lseek>
 810b860:	1c43      	adds	r3, r0, #1
 810b862:	d102      	bne.n	810b86a <_lseek_r+0x1e>
 810b864:	682b      	ldr	r3, [r5, #0]
 810b866:	b103      	cbz	r3, 810b86a <_lseek_r+0x1e>
 810b868:	6023      	str	r3, [r4, #0]
 810b86a:	bd38      	pop	{r3, r4, r5, pc}
 810b86c:	10000ea0 	.word	0x10000ea0

0810b870 <_read_r>:
 810b870:	b538      	push	{r3, r4, r5, lr}
 810b872:	4d07      	ldr	r5, [pc, #28]	; (810b890 <_read_r+0x20>)
 810b874:	4604      	mov	r4, r0
 810b876:	4608      	mov	r0, r1
 810b878:	4611      	mov	r1, r2
 810b87a:	2200      	movs	r2, #0
 810b87c:	602a      	str	r2, [r5, #0]
 810b87e:	461a      	mov	r2, r3
 810b880:	f7f6 fa28 	bl	8101cd4 <_read>
 810b884:	1c43      	adds	r3, r0, #1
 810b886:	d102      	bne.n	810b88e <_read_r+0x1e>
 810b888:	682b      	ldr	r3, [r5, #0]
 810b88a:	b103      	cbz	r3, 810b88e <_read_r+0x1e>
 810b88c:	6023      	str	r3, [r4, #0]
 810b88e:	bd38      	pop	{r3, r4, r5, pc}
 810b890:	10000ea0 	.word	0x10000ea0

0810b894 <_write_r>:
 810b894:	b538      	push	{r3, r4, r5, lr}
 810b896:	4d07      	ldr	r5, [pc, #28]	; (810b8b4 <_write_r+0x20>)
 810b898:	4604      	mov	r4, r0
 810b89a:	4608      	mov	r0, r1
 810b89c:	4611      	mov	r1, r2
 810b89e:	2200      	movs	r2, #0
 810b8a0:	602a      	str	r2, [r5, #0]
 810b8a2:	461a      	mov	r2, r3
 810b8a4:	f7f5 fe3e 	bl	8101524 <_write>
 810b8a8:	1c43      	adds	r3, r0, #1
 810b8aa:	d102      	bne.n	810b8b2 <_write_r+0x1e>
 810b8ac:	682b      	ldr	r3, [r5, #0]
 810b8ae:	b103      	cbz	r3, 810b8b2 <_write_r+0x1e>
 810b8b0:	6023      	str	r3, [r4, #0]
 810b8b2:	bd38      	pop	{r3, r4, r5, pc}
 810b8b4:	10000ea0 	.word	0x10000ea0

0810b8b8 <__errno>:
 810b8b8:	4b01      	ldr	r3, [pc, #4]	; (810b8c0 <__errno+0x8>)
 810b8ba:	6818      	ldr	r0, [r3, #0]
 810b8bc:	4770      	bx	lr
 810b8be:	bf00      	nop
 810b8c0:	10000068 	.word	0x10000068

0810b8c4 <__libc_init_array>:
 810b8c4:	b570      	push	{r4, r5, r6, lr}
 810b8c6:	4d0d      	ldr	r5, [pc, #52]	; (810b8fc <__libc_init_array+0x38>)
 810b8c8:	4c0d      	ldr	r4, [pc, #52]	; (810b900 <__libc_init_array+0x3c>)
 810b8ca:	1b64      	subs	r4, r4, r5
 810b8cc:	10a4      	asrs	r4, r4, #2
 810b8ce:	2600      	movs	r6, #0
 810b8d0:	42a6      	cmp	r6, r4
 810b8d2:	d109      	bne.n	810b8e8 <__libc_init_array+0x24>
 810b8d4:	4d0b      	ldr	r5, [pc, #44]	; (810b904 <__libc_init_array+0x40>)
 810b8d6:	4c0c      	ldr	r4, [pc, #48]	; (810b908 <__libc_init_array+0x44>)
 810b8d8:	f000 fd38 	bl	810c34c <_init>
 810b8dc:	1b64      	subs	r4, r4, r5
 810b8de:	10a4      	asrs	r4, r4, #2
 810b8e0:	2600      	movs	r6, #0
 810b8e2:	42a6      	cmp	r6, r4
 810b8e4:	d105      	bne.n	810b8f2 <__libc_init_array+0x2e>
 810b8e6:	bd70      	pop	{r4, r5, r6, pc}
 810b8e8:	f855 3b04 	ldr.w	r3, [r5], #4
 810b8ec:	4798      	blx	r3
 810b8ee:	3601      	adds	r6, #1
 810b8f0:	e7ee      	b.n	810b8d0 <__libc_init_array+0xc>
 810b8f2:	f855 3b04 	ldr.w	r3, [r5], #4
 810b8f6:	4798      	blx	r3
 810b8f8:	3601      	adds	r6, #1
 810b8fa:	e7f2      	b.n	810b8e2 <__libc_init_array+0x1e>
 810b8fc:	0810c448 	.word	0x0810c448
 810b900:	0810c448 	.word	0x0810c448
 810b904:	0810c448 	.word	0x0810c448
 810b908:	0810c44c 	.word	0x0810c44c

0810b90c <__retarget_lock_init_recursive>:
 810b90c:	4770      	bx	lr

0810b90e <__retarget_lock_acquire_recursive>:
 810b90e:	4770      	bx	lr

0810b910 <__retarget_lock_release_recursive>:
 810b910:	4770      	bx	lr

0810b912 <memcpy>:
 810b912:	440a      	add	r2, r1
 810b914:	4291      	cmp	r1, r2
 810b916:	f100 33ff 	add.w	r3, r0, #4294967295
 810b91a:	d100      	bne.n	810b91e <memcpy+0xc>
 810b91c:	4770      	bx	lr
 810b91e:	b510      	push	{r4, lr}
 810b920:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b924:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b928:	4291      	cmp	r1, r2
 810b92a:	d1f9      	bne.n	810b920 <memcpy+0xe>
 810b92c:	bd10      	pop	{r4, pc}
	...

0810b930 <_free_r>:
 810b930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b932:	2900      	cmp	r1, #0
 810b934:	d044      	beq.n	810b9c0 <_free_r+0x90>
 810b936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b93a:	9001      	str	r0, [sp, #4]
 810b93c:	2b00      	cmp	r3, #0
 810b93e:	f1a1 0404 	sub.w	r4, r1, #4
 810b942:	bfb8      	it	lt
 810b944:	18e4      	addlt	r4, r4, r3
 810b946:	f000 f8df 	bl	810bb08 <__malloc_lock>
 810b94a:	4a1e      	ldr	r2, [pc, #120]	; (810b9c4 <_free_r+0x94>)
 810b94c:	9801      	ldr	r0, [sp, #4]
 810b94e:	6813      	ldr	r3, [r2, #0]
 810b950:	b933      	cbnz	r3, 810b960 <_free_r+0x30>
 810b952:	6063      	str	r3, [r4, #4]
 810b954:	6014      	str	r4, [r2, #0]
 810b956:	b003      	add	sp, #12
 810b958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810b95c:	f000 b8da 	b.w	810bb14 <__malloc_unlock>
 810b960:	42a3      	cmp	r3, r4
 810b962:	d908      	bls.n	810b976 <_free_r+0x46>
 810b964:	6825      	ldr	r5, [r4, #0]
 810b966:	1961      	adds	r1, r4, r5
 810b968:	428b      	cmp	r3, r1
 810b96a:	bf01      	itttt	eq
 810b96c:	6819      	ldreq	r1, [r3, #0]
 810b96e:	685b      	ldreq	r3, [r3, #4]
 810b970:	1949      	addeq	r1, r1, r5
 810b972:	6021      	streq	r1, [r4, #0]
 810b974:	e7ed      	b.n	810b952 <_free_r+0x22>
 810b976:	461a      	mov	r2, r3
 810b978:	685b      	ldr	r3, [r3, #4]
 810b97a:	b10b      	cbz	r3, 810b980 <_free_r+0x50>
 810b97c:	42a3      	cmp	r3, r4
 810b97e:	d9fa      	bls.n	810b976 <_free_r+0x46>
 810b980:	6811      	ldr	r1, [r2, #0]
 810b982:	1855      	adds	r5, r2, r1
 810b984:	42a5      	cmp	r5, r4
 810b986:	d10b      	bne.n	810b9a0 <_free_r+0x70>
 810b988:	6824      	ldr	r4, [r4, #0]
 810b98a:	4421      	add	r1, r4
 810b98c:	1854      	adds	r4, r2, r1
 810b98e:	42a3      	cmp	r3, r4
 810b990:	6011      	str	r1, [r2, #0]
 810b992:	d1e0      	bne.n	810b956 <_free_r+0x26>
 810b994:	681c      	ldr	r4, [r3, #0]
 810b996:	685b      	ldr	r3, [r3, #4]
 810b998:	6053      	str	r3, [r2, #4]
 810b99a:	440c      	add	r4, r1
 810b99c:	6014      	str	r4, [r2, #0]
 810b99e:	e7da      	b.n	810b956 <_free_r+0x26>
 810b9a0:	d902      	bls.n	810b9a8 <_free_r+0x78>
 810b9a2:	230c      	movs	r3, #12
 810b9a4:	6003      	str	r3, [r0, #0]
 810b9a6:	e7d6      	b.n	810b956 <_free_r+0x26>
 810b9a8:	6825      	ldr	r5, [r4, #0]
 810b9aa:	1961      	adds	r1, r4, r5
 810b9ac:	428b      	cmp	r3, r1
 810b9ae:	bf04      	itt	eq
 810b9b0:	6819      	ldreq	r1, [r3, #0]
 810b9b2:	685b      	ldreq	r3, [r3, #4]
 810b9b4:	6063      	str	r3, [r4, #4]
 810b9b6:	bf04      	itt	eq
 810b9b8:	1949      	addeq	r1, r1, r5
 810b9ba:	6021      	streq	r1, [r4, #0]
 810b9bc:	6054      	str	r4, [r2, #4]
 810b9be:	e7ca      	b.n	810b956 <_free_r+0x26>
 810b9c0:	b003      	add	sp, #12
 810b9c2:	bd30      	pop	{r4, r5, pc}
 810b9c4:	10000ea8 	.word	0x10000ea8

0810b9c8 <sbrk_aligned>:
 810b9c8:	b570      	push	{r4, r5, r6, lr}
 810b9ca:	4e0e      	ldr	r6, [pc, #56]	; (810ba04 <sbrk_aligned+0x3c>)
 810b9cc:	460c      	mov	r4, r1
 810b9ce:	6831      	ldr	r1, [r6, #0]
 810b9d0:	4605      	mov	r5, r0
 810b9d2:	b911      	cbnz	r1, 810b9da <sbrk_aligned+0x12>
 810b9d4:	f000 fcaa 	bl	810c32c <_sbrk_r>
 810b9d8:	6030      	str	r0, [r6, #0]
 810b9da:	4621      	mov	r1, r4
 810b9dc:	4628      	mov	r0, r5
 810b9de:	f000 fca5 	bl	810c32c <_sbrk_r>
 810b9e2:	1c43      	adds	r3, r0, #1
 810b9e4:	d00a      	beq.n	810b9fc <sbrk_aligned+0x34>
 810b9e6:	1cc4      	adds	r4, r0, #3
 810b9e8:	f024 0403 	bic.w	r4, r4, #3
 810b9ec:	42a0      	cmp	r0, r4
 810b9ee:	d007      	beq.n	810ba00 <sbrk_aligned+0x38>
 810b9f0:	1a21      	subs	r1, r4, r0
 810b9f2:	4628      	mov	r0, r5
 810b9f4:	f000 fc9a 	bl	810c32c <_sbrk_r>
 810b9f8:	3001      	adds	r0, #1
 810b9fa:	d101      	bne.n	810ba00 <sbrk_aligned+0x38>
 810b9fc:	f04f 34ff 	mov.w	r4, #4294967295
 810ba00:	4620      	mov	r0, r4
 810ba02:	bd70      	pop	{r4, r5, r6, pc}
 810ba04:	10000eac 	.word	0x10000eac

0810ba08 <_malloc_r>:
 810ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ba0c:	1ccd      	adds	r5, r1, #3
 810ba0e:	f025 0503 	bic.w	r5, r5, #3
 810ba12:	3508      	adds	r5, #8
 810ba14:	2d0c      	cmp	r5, #12
 810ba16:	bf38      	it	cc
 810ba18:	250c      	movcc	r5, #12
 810ba1a:	2d00      	cmp	r5, #0
 810ba1c:	4607      	mov	r7, r0
 810ba1e:	db01      	blt.n	810ba24 <_malloc_r+0x1c>
 810ba20:	42a9      	cmp	r1, r5
 810ba22:	d905      	bls.n	810ba30 <_malloc_r+0x28>
 810ba24:	230c      	movs	r3, #12
 810ba26:	603b      	str	r3, [r7, #0]
 810ba28:	2600      	movs	r6, #0
 810ba2a:	4630      	mov	r0, r6
 810ba2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ba30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810bb04 <_malloc_r+0xfc>
 810ba34:	f000 f868 	bl	810bb08 <__malloc_lock>
 810ba38:	f8d8 3000 	ldr.w	r3, [r8]
 810ba3c:	461c      	mov	r4, r3
 810ba3e:	bb5c      	cbnz	r4, 810ba98 <_malloc_r+0x90>
 810ba40:	4629      	mov	r1, r5
 810ba42:	4638      	mov	r0, r7
 810ba44:	f7ff ffc0 	bl	810b9c8 <sbrk_aligned>
 810ba48:	1c43      	adds	r3, r0, #1
 810ba4a:	4604      	mov	r4, r0
 810ba4c:	d155      	bne.n	810bafa <_malloc_r+0xf2>
 810ba4e:	f8d8 4000 	ldr.w	r4, [r8]
 810ba52:	4626      	mov	r6, r4
 810ba54:	2e00      	cmp	r6, #0
 810ba56:	d145      	bne.n	810bae4 <_malloc_r+0xdc>
 810ba58:	2c00      	cmp	r4, #0
 810ba5a:	d048      	beq.n	810baee <_malloc_r+0xe6>
 810ba5c:	6823      	ldr	r3, [r4, #0]
 810ba5e:	4631      	mov	r1, r6
 810ba60:	4638      	mov	r0, r7
 810ba62:	eb04 0903 	add.w	r9, r4, r3
 810ba66:	f000 fc61 	bl	810c32c <_sbrk_r>
 810ba6a:	4581      	cmp	r9, r0
 810ba6c:	d13f      	bne.n	810baee <_malloc_r+0xe6>
 810ba6e:	6821      	ldr	r1, [r4, #0]
 810ba70:	1a6d      	subs	r5, r5, r1
 810ba72:	4629      	mov	r1, r5
 810ba74:	4638      	mov	r0, r7
 810ba76:	f7ff ffa7 	bl	810b9c8 <sbrk_aligned>
 810ba7a:	3001      	adds	r0, #1
 810ba7c:	d037      	beq.n	810baee <_malloc_r+0xe6>
 810ba7e:	6823      	ldr	r3, [r4, #0]
 810ba80:	442b      	add	r3, r5
 810ba82:	6023      	str	r3, [r4, #0]
 810ba84:	f8d8 3000 	ldr.w	r3, [r8]
 810ba88:	2b00      	cmp	r3, #0
 810ba8a:	d038      	beq.n	810bafe <_malloc_r+0xf6>
 810ba8c:	685a      	ldr	r2, [r3, #4]
 810ba8e:	42a2      	cmp	r2, r4
 810ba90:	d12b      	bne.n	810baea <_malloc_r+0xe2>
 810ba92:	2200      	movs	r2, #0
 810ba94:	605a      	str	r2, [r3, #4]
 810ba96:	e00f      	b.n	810bab8 <_malloc_r+0xb0>
 810ba98:	6822      	ldr	r2, [r4, #0]
 810ba9a:	1b52      	subs	r2, r2, r5
 810ba9c:	d41f      	bmi.n	810bade <_malloc_r+0xd6>
 810ba9e:	2a0b      	cmp	r2, #11
 810baa0:	d917      	bls.n	810bad2 <_malloc_r+0xca>
 810baa2:	1961      	adds	r1, r4, r5
 810baa4:	42a3      	cmp	r3, r4
 810baa6:	6025      	str	r5, [r4, #0]
 810baa8:	bf18      	it	ne
 810baaa:	6059      	strne	r1, [r3, #4]
 810baac:	6863      	ldr	r3, [r4, #4]
 810baae:	bf08      	it	eq
 810bab0:	f8c8 1000 	streq.w	r1, [r8]
 810bab4:	5162      	str	r2, [r4, r5]
 810bab6:	604b      	str	r3, [r1, #4]
 810bab8:	4638      	mov	r0, r7
 810baba:	f104 060b 	add.w	r6, r4, #11
 810babe:	f000 f829 	bl	810bb14 <__malloc_unlock>
 810bac2:	f026 0607 	bic.w	r6, r6, #7
 810bac6:	1d23      	adds	r3, r4, #4
 810bac8:	1af2      	subs	r2, r6, r3
 810baca:	d0ae      	beq.n	810ba2a <_malloc_r+0x22>
 810bacc:	1b9b      	subs	r3, r3, r6
 810bace:	50a3      	str	r3, [r4, r2]
 810bad0:	e7ab      	b.n	810ba2a <_malloc_r+0x22>
 810bad2:	42a3      	cmp	r3, r4
 810bad4:	6862      	ldr	r2, [r4, #4]
 810bad6:	d1dd      	bne.n	810ba94 <_malloc_r+0x8c>
 810bad8:	f8c8 2000 	str.w	r2, [r8]
 810badc:	e7ec      	b.n	810bab8 <_malloc_r+0xb0>
 810bade:	4623      	mov	r3, r4
 810bae0:	6864      	ldr	r4, [r4, #4]
 810bae2:	e7ac      	b.n	810ba3e <_malloc_r+0x36>
 810bae4:	4634      	mov	r4, r6
 810bae6:	6876      	ldr	r6, [r6, #4]
 810bae8:	e7b4      	b.n	810ba54 <_malloc_r+0x4c>
 810baea:	4613      	mov	r3, r2
 810baec:	e7cc      	b.n	810ba88 <_malloc_r+0x80>
 810baee:	230c      	movs	r3, #12
 810baf0:	603b      	str	r3, [r7, #0]
 810baf2:	4638      	mov	r0, r7
 810baf4:	f000 f80e 	bl	810bb14 <__malloc_unlock>
 810baf8:	e797      	b.n	810ba2a <_malloc_r+0x22>
 810bafa:	6025      	str	r5, [r4, #0]
 810bafc:	e7dc      	b.n	810bab8 <_malloc_r+0xb0>
 810bafe:	605b      	str	r3, [r3, #4]
 810bb00:	deff      	udf	#255	; 0xff
 810bb02:	bf00      	nop
 810bb04:	10000ea8 	.word	0x10000ea8

0810bb08 <__malloc_lock>:
 810bb08:	4801      	ldr	r0, [pc, #4]	; (810bb10 <__malloc_lock+0x8>)
 810bb0a:	f7ff bf00 	b.w	810b90e <__retarget_lock_acquire_recursive>
 810bb0e:	bf00      	nop
 810bb10:	10000ea4 	.word	0x10000ea4

0810bb14 <__malloc_unlock>:
 810bb14:	4801      	ldr	r0, [pc, #4]	; (810bb1c <__malloc_unlock+0x8>)
 810bb16:	f7ff befb 	b.w	810b910 <__retarget_lock_release_recursive>
 810bb1a:	bf00      	nop
 810bb1c:	10000ea4 	.word	0x10000ea4

0810bb20 <__sfputc_r>:
 810bb20:	6893      	ldr	r3, [r2, #8]
 810bb22:	3b01      	subs	r3, #1
 810bb24:	2b00      	cmp	r3, #0
 810bb26:	b410      	push	{r4}
 810bb28:	6093      	str	r3, [r2, #8]
 810bb2a:	da08      	bge.n	810bb3e <__sfputc_r+0x1e>
 810bb2c:	6994      	ldr	r4, [r2, #24]
 810bb2e:	42a3      	cmp	r3, r4
 810bb30:	db01      	blt.n	810bb36 <__sfputc_r+0x16>
 810bb32:	290a      	cmp	r1, #10
 810bb34:	d103      	bne.n	810bb3e <__sfputc_r+0x1e>
 810bb36:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bb3a:	f7ff bdda 	b.w	810b6f2 <__swbuf_r>
 810bb3e:	6813      	ldr	r3, [r2, #0]
 810bb40:	1c58      	adds	r0, r3, #1
 810bb42:	6010      	str	r0, [r2, #0]
 810bb44:	7019      	strb	r1, [r3, #0]
 810bb46:	4608      	mov	r0, r1
 810bb48:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bb4c:	4770      	bx	lr

0810bb4e <__sfputs_r>:
 810bb4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb50:	4606      	mov	r6, r0
 810bb52:	460f      	mov	r7, r1
 810bb54:	4614      	mov	r4, r2
 810bb56:	18d5      	adds	r5, r2, r3
 810bb58:	42ac      	cmp	r4, r5
 810bb5a:	d101      	bne.n	810bb60 <__sfputs_r+0x12>
 810bb5c:	2000      	movs	r0, #0
 810bb5e:	e007      	b.n	810bb70 <__sfputs_r+0x22>
 810bb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bb64:	463a      	mov	r2, r7
 810bb66:	4630      	mov	r0, r6
 810bb68:	f7ff ffda 	bl	810bb20 <__sfputc_r>
 810bb6c:	1c43      	adds	r3, r0, #1
 810bb6e:	d1f3      	bne.n	810bb58 <__sfputs_r+0xa>
 810bb70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810bb74 <_vfiprintf_r>:
 810bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bb78:	460d      	mov	r5, r1
 810bb7a:	b09d      	sub	sp, #116	; 0x74
 810bb7c:	4614      	mov	r4, r2
 810bb7e:	4698      	mov	r8, r3
 810bb80:	4606      	mov	r6, r0
 810bb82:	b118      	cbz	r0, 810bb8c <_vfiprintf_r+0x18>
 810bb84:	6a03      	ldr	r3, [r0, #32]
 810bb86:	b90b      	cbnz	r3, 810bb8c <_vfiprintf_r+0x18>
 810bb88:	f7ff fccc 	bl	810b524 <__sinit>
 810bb8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bb8e:	07d9      	lsls	r1, r3, #31
 810bb90:	d405      	bmi.n	810bb9e <_vfiprintf_r+0x2a>
 810bb92:	89ab      	ldrh	r3, [r5, #12]
 810bb94:	059a      	lsls	r2, r3, #22
 810bb96:	d402      	bmi.n	810bb9e <_vfiprintf_r+0x2a>
 810bb98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bb9a:	f7ff feb8 	bl	810b90e <__retarget_lock_acquire_recursive>
 810bb9e:	89ab      	ldrh	r3, [r5, #12]
 810bba0:	071b      	lsls	r3, r3, #28
 810bba2:	d501      	bpl.n	810bba8 <_vfiprintf_r+0x34>
 810bba4:	692b      	ldr	r3, [r5, #16]
 810bba6:	b99b      	cbnz	r3, 810bbd0 <_vfiprintf_r+0x5c>
 810bba8:	4629      	mov	r1, r5
 810bbaa:	4630      	mov	r0, r6
 810bbac:	f7ff fdde 	bl	810b76c <__swsetup_r>
 810bbb0:	b170      	cbz	r0, 810bbd0 <_vfiprintf_r+0x5c>
 810bbb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bbb4:	07dc      	lsls	r4, r3, #31
 810bbb6:	d504      	bpl.n	810bbc2 <_vfiprintf_r+0x4e>
 810bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 810bbbc:	b01d      	add	sp, #116	; 0x74
 810bbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bbc2:	89ab      	ldrh	r3, [r5, #12]
 810bbc4:	0598      	lsls	r0, r3, #22
 810bbc6:	d4f7      	bmi.n	810bbb8 <_vfiprintf_r+0x44>
 810bbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bbca:	f7ff fea1 	bl	810b910 <__retarget_lock_release_recursive>
 810bbce:	e7f3      	b.n	810bbb8 <_vfiprintf_r+0x44>
 810bbd0:	2300      	movs	r3, #0
 810bbd2:	9309      	str	r3, [sp, #36]	; 0x24
 810bbd4:	2320      	movs	r3, #32
 810bbd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bbda:	f8cd 800c 	str.w	r8, [sp, #12]
 810bbde:	2330      	movs	r3, #48	; 0x30
 810bbe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810bd94 <_vfiprintf_r+0x220>
 810bbe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bbe8:	f04f 0901 	mov.w	r9, #1
 810bbec:	4623      	mov	r3, r4
 810bbee:	469a      	mov	sl, r3
 810bbf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bbf4:	b10a      	cbz	r2, 810bbfa <_vfiprintf_r+0x86>
 810bbf6:	2a25      	cmp	r2, #37	; 0x25
 810bbf8:	d1f9      	bne.n	810bbee <_vfiprintf_r+0x7a>
 810bbfa:	ebba 0b04 	subs.w	fp, sl, r4
 810bbfe:	d00b      	beq.n	810bc18 <_vfiprintf_r+0xa4>
 810bc00:	465b      	mov	r3, fp
 810bc02:	4622      	mov	r2, r4
 810bc04:	4629      	mov	r1, r5
 810bc06:	4630      	mov	r0, r6
 810bc08:	f7ff ffa1 	bl	810bb4e <__sfputs_r>
 810bc0c:	3001      	adds	r0, #1
 810bc0e:	f000 80a9 	beq.w	810bd64 <_vfiprintf_r+0x1f0>
 810bc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bc14:	445a      	add	r2, fp
 810bc16:	9209      	str	r2, [sp, #36]	; 0x24
 810bc18:	f89a 3000 	ldrb.w	r3, [sl]
 810bc1c:	2b00      	cmp	r3, #0
 810bc1e:	f000 80a1 	beq.w	810bd64 <_vfiprintf_r+0x1f0>
 810bc22:	2300      	movs	r3, #0
 810bc24:	f04f 32ff 	mov.w	r2, #4294967295
 810bc28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810bc2c:	f10a 0a01 	add.w	sl, sl, #1
 810bc30:	9304      	str	r3, [sp, #16]
 810bc32:	9307      	str	r3, [sp, #28]
 810bc34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810bc38:	931a      	str	r3, [sp, #104]	; 0x68
 810bc3a:	4654      	mov	r4, sl
 810bc3c:	2205      	movs	r2, #5
 810bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bc42:	4854      	ldr	r0, [pc, #336]	; (810bd94 <_vfiprintf_r+0x220>)
 810bc44:	f7f4 fb4c 	bl	81002e0 <memchr>
 810bc48:	9a04      	ldr	r2, [sp, #16]
 810bc4a:	b9d8      	cbnz	r0, 810bc84 <_vfiprintf_r+0x110>
 810bc4c:	06d1      	lsls	r1, r2, #27
 810bc4e:	bf44      	itt	mi
 810bc50:	2320      	movmi	r3, #32
 810bc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bc56:	0713      	lsls	r3, r2, #28
 810bc58:	bf44      	itt	mi
 810bc5a:	232b      	movmi	r3, #43	; 0x2b
 810bc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bc60:	f89a 3000 	ldrb.w	r3, [sl]
 810bc64:	2b2a      	cmp	r3, #42	; 0x2a
 810bc66:	d015      	beq.n	810bc94 <_vfiprintf_r+0x120>
 810bc68:	9a07      	ldr	r2, [sp, #28]
 810bc6a:	4654      	mov	r4, sl
 810bc6c:	2000      	movs	r0, #0
 810bc6e:	f04f 0c0a 	mov.w	ip, #10
 810bc72:	4621      	mov	r1, r4
 810bc74:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bc78:	3b30      	subs	r3, #48	; 0x30
 810bc7a:	2b09      	cmp	r3, #9
 810bc7c:	d94d      	bls.n	810bd1a <_vfiprintf_r+0x1a6>
 810bc7e:	b1b0      	cbz	r0, 810bcae <_vfiprintf_r+0x13a>
 810bc80:	9207      	str	r2, [sp, #28]
 810bc82:	e014      	b.n	810bcae <_vfiprintf_r+0x13a>
 810bc84:	eba0 0308 	sub.w	r3, r0, r8
 810bc88:	fa09 f303 	lsl.w	r3, r9, r3
 810bc8c:	4313      	orrs	r3, r2
 810bc8e:	9304      	str	r3, [sp, #16]
 810bc90:	46a2      	mov	sl, r4
 810bc92:	e7d2      	b.n	810bc3a <_vfiprintf_r+0xc6>
 810bc94:	9b03      	ldr	r3, [sp, #12]
 810bc96:	1d19      	adds	r1, r3, #4
 810bc98:	681b      	ldr	r3, [r3, #0]
 810bc9a:	9103      	str	r1, [sp, #12]
 810bc9c:	2b00      	cmp	r3, #0
 810bc9e:	bfbb      	ittet	lt
 810bca0:	425b      	neglt	r3, r3
 810bca2:	f042 0202 	orrlt.w	r2, r2, #2
 810bca6:	9307      	strge	r3, [sp, #28]
 810bca8:	9307      	strlt	r3, [sp, #28]
 810bcaa:	bfb8      	it	lt
 810bcac:	9204      	strlt	r2, [sp, #16]
 810bcae:	7823      	ldrb	r3, [r4, #0]
 810bcb0:	2b2e      	cmp	r3, #46	; 0x2e
 810bcb2:	d10c      	bne.n	810bcce <_vfiprintf_r+0x15a>
 810bcb4:	7863      	ldrb	r3, [r4, #1]
 810bcb6:	2b2a      	cmp	r3, #42	; 0x2a
 810bcb8:	d134      	bne.n	810bd24 <_vfiprintf_r+0x1b0>
 810bcba:	9b03      	ldr	r3, [sp, #12]
 810bcbc:	1d1a      	adds	r2, r3, #4
 810bcbe:	681b      	ldr	r3, [r3, #0]
 810bcc0:	9203      	str	r2, [sp, #12]
 810bcc2:	2b00      	cmp	r3, #0
 810bcc4:	bfb8      	it	lt
 810bcc6:	f04f 33ff 	movlt.w	r3, #4294967295
 810bcca:	3402      	adds	r4, #2
 810bccc:	9305      	str	r3, [sp, #20]
 810bcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810bda4 <_vfiprintf_r+0x230>
 810bcd2:	7821      	ldrb	r1, [r4, #0]
 810bcd4:	2203      	movs	r2, #3
 810bcd6:	4650      	mov	r0, sl
 810bcd8:	f7f4 fb02 	bl	81002e0 <memchr>
 810bcdc:	b138      	cbz	r0, 810bcee <_vfiprintf_r+0x17a>
 810bcde:	9b04      	ldr	r3, [sp, #16]
 810bce0:	eba0 000a 	sub.w	r0, r0, sl
 810bce4:	2240      	movs	r2, #64	; 0x40
 810bce6:	4082      	lsls	r2, r0
 810bce8:	4313      	orrs	r3, r2
 810bcea:	3401      	adds	r4, #1
 810bcec:	9304      	str	r3, [sp, #16]
 810bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bcf2:	4829      	ldr	r0, [pc, #164]	; (810bd98 <_vfiprintf_r+0x224>)
 810bcf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bcf8:	2206      	movs	r2, #6
 810bcfa:	f7f4 faf1 	bl	81002e0 <memchr>
 810bcfe:	2800      	cmp	r0, #0
 810bd00:	d03f      	beq.n	810bd82 <_vfiprintf_r+0x20e>
 810bd02:	4b26      	ldr	r3, [pc, #152]	; (810bd9c <_vfiprintf_r+0x228>)
 810bd04:	bb1b      	cbnz	r3, 810bd4e <_vfiprintf_r+0x1da>
 810bd06:	9b03      	ldr	r3, [sp, #12]
 810bd08:	3307      	adds	r3, #7
 810bd0a:	f023 0307 	bic.w	r3, r3, #7
 810bd0e:	3308      	adds	r3, #8
 810bd10:	9303      	str	r3, [sp, #12]
 810bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bd14:	443b      	add	r3, r7
 810bd16:	9309      	str	r3, [sp, #36]	; 0x24
 810bd18:	e768      	b.n	810bbec <_vfiprintf_r+0x78>
 810bd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 810bd1e:	460c      	mov	r4, r1
 810bd20:	2001      	movs	r0, #1
 810bd22:	e7a6      	b.n	810bc72 <_vfiprintf_r+0xfe>
 810bd24:	2300      	movs	r3, #0
 810bd26:	3401      	adds	r4, #1
 810bd28:	9305      	str	r3, [sp, #20]
 810bd2a:	4619      	mov	r1, r3
 810bd2c:	f04f 0c0a 	mov.w	ip, #10
 810bd30:	4620      	mov	r0, r4
 810bd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bd36:	3a30      	subs	r2, #48	; 0x30
 810bd38:	2a09      	cmp	r2, #9
 810bd3a:	d903      	bls.n	810bd44 <_vfiprintf_r+0x1d0>
 810bd3c:	2b00      	cmp	r3, #0
 810bd3e:	d0c6      	beq.n	810bcce <_vfiprintf_r+0x15a>
 810bd40:	9105      	str	r1, [sp, #20]
 810bd42:	e7c4      	b.n	810bcce <_vfiprintf_r+0x15a>
 810bd44:	fb0c 2101 	mla	r1, ip, r1, r2
 810bd48:	4604      	mov	r4, r0
 810bd4a:	2301      	movs	r3, #1
 810bd4c:	e7f0      	b.n	810bd30 <_vfiprintf_r+0x1bc>
 810bd4e:	ab03      	add	r3, sp, #12
 810bd50:	9300      	str	r3, [sp, #0]
 810bd52:	462a      	mov	r2, r5
 810bd54:	4b12      	ldr	r3, [pc, #72]	; (810bda0 <_vfiprintf_r+0x22c>)
 810bd56:	a904      	add	r1, sp, #16
 810bd58:	4630      	mov	r0, r6
 810bd5a:	f3af 8000 	nop.w
 810bd5e:	4607      	mov	r7, r0
 810bd60:	1c78      	adds	r0, r7, #1
 810bd62:	d1d6      	bne.n	810bd12 <_vfiprintf_r+0x19e>
 810bd64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bd66:	07d9      	lsls	r1, r3, #31
 810bd68:	d405      	bmi.n	810bd76 <_vfiprintf_r+0x202>
 810bd6a:	89ab      	ldrh	r3, [r5, #12]
 810bd6c:	059a      	lsls	r2, r3, #22
 810bd6e:	d402      	bmi.n	810bd76 <_vfiprintf_r+0x202>
 810bd70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bd72:	f7ff fdcd 	bl	810b910 <__retarget_lock_release_recursive>
 810bd76:	89ab      	ldrh	r3, [r5, #12]
 810bd78:	065b      	lsls	r3, r3, #25
 810bd7a:	f53f af1d 	bmi.w	810bbb8 <_vfiprintf_r+0x44>
 810bd7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bd80:	e71c      	b.n	810bbbc <_vfiprintf_r+0x48>
 810bd82:	ab03      	add	r3, sp, #12
 810bd84:	9300      	str	r3, [sp, #0]
 810bd86:	462a      	mov	r2, r5
 810bd88:	4b05      	ldr	r3, [pc, #20]	; (810bda0 <_vfiprintf_r+0x22c>)
 810bd8a:	a904      	add	r1, sp, #16
 810bd8c:	4630      	mov	r0, r6
 810bd8e:	f000 f879 	bl	810be84 <_printf_i>
 810bd92:	e7e4      	b.n	810bd5e <_vfiprintf_r+0x1ea>
 810bd94:	0810c40c 	.word	0x0810c40c
 810bd98:	0810c416 	.word	0x0810c416
 810bd9c:	00000000 	.word	0x00000000
 810bda0:	0810bb4f 	.word	0x0810bb4f
 810bda4:	0810c412 	.word	0x0810c412

0810bda8 <_printf_common>:
 810bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810bdac:	4616      	mov	r6, r2
 810bdae:	4699      	mov	r9, r3
 810bdb0:	688a      	ldr	r2, [r1, #8]
 810bdb2:	690b      	ldr	r3, [r1, #16]
 810bdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810bdb8:	4293      	cmp	r3, r2
 810bdba:	bfb8      	it	lt
 810bdbc:	4613      	movlt	r3, r2
 810bdbe:	6033      	str	r3, [r6, #0]
 810bdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810bdc4:	4607      	mov	r7, r0
 810bdc6:	460c      	mov	r4, r1
 810bdc8:	b10a      	cbz	r2, 810bdce <_printf_common+0x26>
 810bdca:	3301      	adds	r3, #1
 810bdcc:	6033      	str	r3, [r6, #0]
 810bdce:	6823      	ldr	r3, [r4, #0]
 810bdd0:	0699      	lsls	r1, r3, #26
 810bdd2:	bf42      	ittt	mi
 810bdd4:	6833      	ldrmi	r3, [r6, #0]
 810bdd6:	3302      	addmi	r3, #2
 810bdd8:	6033      	strmi	r3, [r6, #0]
 810bdda:	6825      	ldr	r5, [r4, #0]
 810bddc:	f015 0506 	ands.w	r5, r5, #6
 810bde0:	d106      	bne.n	810bdf0 <_printf_common+0x48>
 810bde2:	f104 0a19 	add.w	sl, r4, #25
 810bde6:	68e3      	ldr	r3, [r4, #12]
 810bde8:	6832      	ldr	r2, [r6, #0]
 810bdea:	1a9b      	subs	r3, r3, r2
 810bdec:	42ab      	cmp	r3, r5
 810bdee:	dc26      	bgt.n	810be3e <_printf_common+0x96>
 810bdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810bdf4:	1e13      	subs	r3, r2, #0
 810bdf6:	6822      	ldr	r2, [r4, #0]
 810bdf8:	bf18      	it	ne
 810bdfa:	2301      	movne	r3, #1
 810bdfc:	0692      	lsls	r2, r2, #26
 810bdfe:	d42b      	bmi.n	810be58 <_printf_common+0xb0>
 810be00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810be04:	4649      	mov	r1, r9
 810be06:	4638      	mov	r0, r7
 810be08:	47c0      	blx	r8
 810be0a:	3001      	adds	r0, #1
 810be0c:	d01e      	beq.n	810be4c <_printf_common+0xa4>
 810be0e:	6823      	ldr	r3, [r4, #0]
 810be10:	6922      	ldr	r2, [r4, #16]
 810be12:	f003 0306 	and.w	r3, r3, #6
 810be16:	2b04      	cmp	r3, #4
 810be18:	bf02      	ittt	eq
 810be1a:	68e5      	ldreq	r5, [r4, #12]
 810be1c:	6833      	ldreq	r3, [r6, #0]
 810be1e:	1aed      	subeq	r5, r5, r3
 810be20:	68a3      	ldr	r3, [r4, #8]
 810be22:	bf0c      	ite	eq
 810be24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810be28:	2500      	movne	r5, #0
 810be2a:	4293      	cmp	r3, r2
 810be2c:	bfc4      	itt	gt
 810be2e:	1a9b      	subgt	r3, r3, r2
 810be30:	18ed      	addgt	r5, r5, r3
 810be32:	2600      	movs	r6, #0
 810be34:	341a      	adds	r4, #26
 810be36:	42b5      	cmp	r5, r6
 810be38:	d11a      	bne.n	810be70 <_printf_common+0xc8>
 810be3a:	2000      	movs	r0, #0
 810be3c:	e008      	b.n	810be50 <_printf_common+0xa8>
 810be3e:	2301      	movs	r3, #1
 810be40:	4652      	mov	r2, sl
 810be42:	4649      	mov	r1, r9
 810be44:	4638      	mov	r0, r7
 810be46:	47c0      	blx	r8
 810be48:	3001      	adds	r0, #1
 810be4a:	d103      	bne.n	810be54 <_printf_common+0xac>
 810be4c:	f04f 30ff 	mov.w	r0, #4294967295
 810be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810be54:	3501      	adds	r5, #1
 810be56:	e7c6      	b.n	810bde6 <_printf_common+0x3e>
 810be58:	18e1      	adds	r1, r4, r3
 810be5a:	1c5a      	adds	r2, r3, #1
 810be5c:	2030      	movs	r0, #48	; 0x30
 810be5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810be62:	4422      	add	r2, r4
 810be64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810be68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810be6c:	3302      	adds	r3, #2
 810be6e:	e7c7      	b.n	810be00 <_printf_common+0x58>
 810be70:	2301      	movs	r3, #1
 810be72:	4622      	mov	r2, r4
 810be74:	4649      	mov	r1, r9
 810be76:	4638      	mov	r0, r7
 810be78:	47c0      	blx	r8
 810be7a:	3001      	adds	r0, #1
 810be7c:	d0e6      	beq.n	810be4c <_printf_common+0xa4>
 810be7e:	3601      	adds	r6, #1
 810be80:	e7d9      	b.n	810be36 <_printf_common+0x8e>
	...

0810be84 <_printf_i>:
 810be84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810be88:	7e0f      	ldrb	r7, [r1, #24]
 810be8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810be8c:	2f78      	cmp	r7, #120	; 0x78
 810be8e:	4691      	mov	r9, r2
 810be90:	4680      	mov	r8, r0
 810be92:	460c      	mov	r4, r1
 810be94:	469a      	mov	sl, r3
 810be96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810be9a:	d807      	bhi.n	810beac <_printf_i+0x28>
 810be9c:	2f62      	cmp	r7, #98	; 0x62
 810be9e:	d80a      	bhi.n	810beb6 <_printf_i+0x32>
 810bea0:	2f00      	cmp	r7, #0
 810bea2:	f000 80d4 	beq.w	810c04e <_printf_i+0x1ca>
 810bea6:	2f58      	cmp	r7, #88	; 0x58
 810bea8:	f000 80c0 	beq.w	810c02c <_printf_i+0x1a8>
 810beac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810beb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810beb4:	e03a      	b.n	810bf2c <_printf_i+0xa8>
 810beb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810beba:	2b15      	cmp	r3, #21
 810bebc:	d8f6      	bhi.n	810beac <_printf_i+0x28>
 810bebe:	a101      	add	r1, pc, #4	; (adr r1, 810bec4 <_printf_i+0x40>)
 810bec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810bec4:	0810bf1d 	.word	0x0810bf1d
 810bec8:	0810bf31 	.word	0x0810bf31
 810becc:	0810bead 	.word	0x0810bead
 810bed0:	0810bead 	.word	0x0810bead
 810bed4:	0810bead 	.word	0x0810bead
 810bed8:	0810bead 	.word	0x0810bead
 810bedc:	0810bf31 	.word	0x0810bf31
 810bee0:	0810bead 	.word	0x0810bead
 810bee4:	0810bead 	.word	0x0810bead
 810bee8:	0810bead 	.word	0x0810bead
 810beec:	0810bead 	.word	0x0810bead
 810bef0:	0810c035 	.word	0x0810c035
 810bef4:	0810bf5d 	.word	0x0810bf5d
 810bef8:	0810bfef 	.word	0x0810bfef
 810befc:	0810bead 	.word	0x0810bead
 810bf00:	0810bead 	.word	0x0810bead
 810bf04:	0810c057 	.word	0x0810c057
 810bf08:	0810bead 	.word	0x0810bead
 810bf0c:	0810bf5d 	.word	0x0810bf5d
 810bf10:	0810bead 	.word	0x0810bead
 810bf14:	0810bead 	.word	0x0810bead
 810bf18:	0810bff7 	.word	0x0810bff7
 810bf1c:	682b      	ldr	r3, [r5, #0]
 810bf1e:	1d1a      	adds	r2, r3, #4
 810bf20:	681b      	ldr	r3, [r3, #0]
 810bf22:	602a      	str	r2, [r5, #0]
 810bf24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810bf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810bf2c:	2301      	movs	r3, #1
 810bf2e:	e09f      	b.n	810c070 <_printf_i+0x1ec>
 810bf30:	6820      	ldr	r0, [r4, #0]
 810bf32:	682b      	ldr	r3, [r5, #0]
 810bf34:	0607      	lsls	r7, r0, #24
 810bf36:	f103 0104 	add.w	r1, r3, #4
 810bf3a:	6029      	str	r1, [r5, #0]
 810bf3c:	d501      	bpl.n	810bf42 <_printf_i+0xbe>
 810bf3e:	681e      	ldr	r6, [r3, #0]
 810bf40:	e003      	b.n	810bf4a <_printf_i+0xc6>
 810bf42:	0646      	lsls	r6, r0, #25
 810bf44:	d5fb      	bpl.n	810bf3e <_printf_i+0xba>
 810bf46:	f9b3 6000 	ldrsh.w	r6, [r3]
 810bf4a:	2e00      	cmp	r6, #0
 810bf4c:	da03      	bge.n	810bf56 <_printf_i+0xd2>
 810bf4e:	232d      	movs	r3, #45	; 0x2d
 810bf50:	4276      	negs	r6, r6
 810bf52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810bf56:	485a      	ldr	r0, [pc, #360]	; (810c0c0 <_printf_i+0x23c>)
 810bf58:	230a      	movs	r3, #10
 810bf5a:	e012      	b.n	810bf82 <_printf_i+0xfe>
 810bf5c:	682b      	ldr	r3, [r5, #0]
 810bf5e:	6820      	ldr	r0, [r4, #0]
 810bf60:	1d19      	adds	r1, r3, #4
 810bf62:	6029      	str	r1, [r5, #0]
 810bf64:	0605      	lsls	r5, r0, #24
 810bf66:	d501      	bpl.n	810bf6c <_printf_i+0xe8>
 810bf68:	681e      	ldr	r6, [r3, #0]
 810bf6a:	e002      	b.n	810bf72 <_printf_i+0xee>
 810bf6c:	0641      	lsls	r1, r0, #25
 810bf6e:	d5fb      	bpl.n	810bf68 <_printf_i+0xe4>
 810bf70:	881e      	ldrh	r6, [r3, #0]
 810bf72:	4853      	ldr	r0, [pc, #332]	; (810c0c0 <_printf_i+0x23c>)
 810bf74:	2f6f      	cmp	r7, #111	; 0x6f
 810bf76:	bf0c      	ite	eq
 810bf78:	2308      	moveq	r3, #8
 810bf7a:	230a      	movne	r3, #10
 810bf7c:	2100      	movs	r1, #0
 810bf7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810bf82:	6865      	ldr	r5, [r4, #4]
 810bf84:	60a5      	str	r5, [r4, #8]
 810bf86:	2d00      	cmp	r5, #0
 810bf88:	bfa2      	ittt	ge
 810bf8a:	6821      	ldrge	r1, [r4, #0]
 810bf8c:	f021 0104 	bicge.w	r1, r1, #4
 810bf90:	6021      	strge	r1, [r4, #0]
 810bf92:	b90e      	cbnz	r6, 810bf98 <_printf_i+0x114>
 810bf94:	2d00      	cmp	r5, #0
 810bf96:	d04b      	beq.n	810c030 <_printf_i+0x1ac>
 810bf98:	4615      	mov	r5, r2
 810bf9a:	fbb6 f1f3 	udiv	r1, r6, r3
 810bf9e:	fb03 6711 	mls	r7, r3, r1, r6
 810bfa2:	5dc7      	ldrb	r7, [r0, r7]
 810bfa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810bfa8:	4637      	mov	r7, r6
 810bfaa:	42bb      	cmp	r3, r7
 810bfac:	460e      	mov	r6, r1
 810bfae:	d9f4      	bls.n	810bf9a <_printf_i+0x116>
 810bfb0:	2b08      	cmp	r3, #8
 810bfb2:	d10b      	bne.n	810bfcc <_printf_i+0x148>
 810bfb4:	6823      	ldr	r3, [r4, #0]
 810bfb6:	07de      	lsls	r6, r3, #31
 810bfb8:	d508      	bpl.n	810bfcc <_printf_i+0x148>
 810bfba:	6923      	ldr	r3, [r4, #16]
 810bfbc:	6861      	ldr	r1, [r4, #4]
 810bfbe:	4299      	cmp	r1, r3
 810bfc0:	bfde      	ittt	le
 810bfc2:	2330      	movle	r3, #48	; 0x30
 810bfc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 810bfc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 810bfcc:	1b52      	subs	r2, r2, r5
 810bfce:	6122      	str	r2, [r4, #16]
 810bfd0:	f8cd a000 	str.w	sl, [sp]
 810bfd4:	464b      	mov	r3, r9
 810bfd6:	aa03      	add	r2, sp, #12
 810bfd8:	4621      	mov	r1, r4
 810bfda:	4640      	mov	r0, r8
 810bfdc:	f7ff fee4 	bl	810bda8 <_printf_common>
 810bfe0:	3001      	adds	r0, #1
 810bfe2:	d14a      	bne.n	810c07a <_printf_i+0x1f6>
 810bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 810bfe8:	b004      	add	sp, #16
 810bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810bfee:	6823      	ldr	r3, [r4, #0]
 810bff0:	f043 0320 	orr.w	r3, r3, #32
 810bff4:	6023      	str	r3, [r4, #0]
 810bff6:	4833      	ldr	r0, [pc, #204]	; (810c0c4 <_printf_i+0x240>)
 810bff8:	2778      	movs	r7, #120	; 0x78
 810bffa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810bffe:	6823      	ldr	r3, [r4, #0]
 810c000:	6829      	ldr	r1, [r5, #0]
 810c002:	061f      	lsls	r7, r3, #24
 810c004:	f851 6b04 	ldr.w	r6, [r1], #4
 810c008:	d402      	bmi.n	810c010 <_printf_i+0x18c>
 810c00a:	065f      	lsls	r7, r3, #25
 810c00c:	bf48      	it	mi
 810c00e:	b2b6      	uxthmi	r6, r6
 810c010:	07df      	lsls	r7, r3, #31
 810c012:	bf48      	it	mi
 810c014:	f043 0320 	orrmi.w	r3, r3, #32
 810c018:	6029      	str	r1, [r5, #0]
 810c01a:	bf48      	it	mi
 810c01c:	6023      	strmi	r3, [r4, #0]
 810c01e:	b91e      	cbnz	r6, 810c028 <_printf_i+0x1a4>
 810c020:	6823      	ldr	r3, [r4, #0]
 810c022:	f023 0320 	bic.w	r3, r3, #32
 810c026:	6023      	str	r3, [r4, #0]
 810c028:	2310      	movs	r3, #16
 810c02a:	e7a7      	b.n	810bf7c <_printf_i+0xf8>
 810c02c:	4824      	ldr	r0, [pc, #144]	; (810c0c0 <_printf_i+0x23c>)
 810c02e:	e7e4      	b.n	810bffa <_printf_i+0x176>
 810c030:	4615      	mov	r5, r2
 810c032:	e7bd      	b.n	810bfb0 <_printf_i+0x12c>
 810c034:	682b      	ldr	r3, [r5, #0]
 810c036:	6826      	ldr	r6, [r4, #0]
 810c038:	6961      	ldr	r1, [r4, #20]
 810c03a:	1d18      	adds	r0, r3, #4
 810c03c:	6028      	str	r0, [r5, #0]
 810c03e:	0635      	lsls	r5, r6, #24
 810c040:	681b      	ldr	r3, [r3, #0]
 810c042:	d501      	bpl.n	810c048 <_printf_i+0x1c4>
 810c044:	6019      	str	r1, [r3, #0]
 810c046:	e002      	b.n	810c04e <_printf_i+0x1ca>
 810c048:	0670      	lsls	r0, r6, #25
 810c04a:	d5fb      	bpl.n	810c044 <_printf_i+0x1c0>
 810c04c:	8019      	strh	r1, [r3, #0]
 810c04e:	2300      	movs	r3, #0
 810c050:	6123      	str	r3, [r4, #16]
 810c052:	4615      	mov	r5, r2
 810c054:	e7bc      	b.n	810bfd0 <_printf_i+0x14c>
 810c056:	682b      	ldr	r3, [r5, #0]
 810c058:	1d1a      	adds	r2, r3, #4
 810c05a:	602a      	str	r2, [r5, #0]
 810c05c:	681d      	ldr	r5, [r3, #0]
 810c05e:	6862      	ldr	r2, [r4, #4]
 810c060:	2100      	movs	r1, #0
 810c062:	4628      	mov	r0, r5
 810c064:	f7f4 f93c 	bl	81002e0 <memchr>
 810c068:	b108      	cbz	r0, 810c06e <_printf_i+0x1ea>
 810c06a:	1b40      	subs	r0, r0, r5
 810c06c:	6060      	str	r0, [r4, #4]
 810c06e:	6863      	ldr	r3, [r4, #4]
 810c070:	6123      	str	r3, [r4, #16]
 810c072:	2300      	movs	r3, #0
 810c074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810c078:	e7aa      	b.n	810bfd0 <_printf_i+0x14c>
 810c07a:	6923      	ldr	r3, [r4, #16]
 810c07c:	462a      	mov	r2, r5
 810c07e:	4649      	mov	r1, r9
 810c080:	4640      	mov	r0, r8
 810c082:	47d0      	blx	sl
 810c084:	3001      	adds	r0, #1
 810c086:	d0ad      	beq.n	810bfe4 <_printf_i+0x160>
 810c088:	6823      	ldr	r3, [r4, #0]
 810c08a:	079b      	lsls	r3, r3, #30
 810c08c:	d413      	bmi.n	810c0b6 <_printf_i+0x232>
 810c08e:	68e0      	ldr	r0, [r4, #12]
 810c090:	9b03      	ldr	r3, [sp, #12]
 810c092:	4298      	cmp	r0, r3
 810c094:	bfb8      	it	lt
 810c096:	4618      	movlt	r0, r3
 810c098:	e7a6      	b.n	810bfe8 <_printf_i+0x164>
 810c09a:	2301      	movs	r3, #1
 810c09c:	4632      	mov	r2, r6
 810c09e:	4649      	mov	r1, r9
 810c0a0:	4640      	mov	r0, r8
 810c0a2:	47d0      	blx	sl
 810c0a4:	3001      	adds	r0, #1
 810c0a6:	d09d      	beq.n	810bfe4 <_printf_i+0x160>
 810c0a8:	3501      	adds	r5, #1
 810c0aa:	68e3      	ldr	r3, [r4, #12]
 810c0ac:	9903      	ldr	r1, [sp, #12]
 810c0ae:	1a5b      	subs	r3, r3, r1
 810c0b0:	42ab      	cmp	r3, r5
 810c0b2:	dcf2      	bgt.n	810c09a <_printf_i+0x216>
 810c0b4:	e7eb      	b.n	810c08e <_printf_i+0x20a>
 810c0b6:	2500      	movs	r5, #0
 810c0b8:	f104 0619 	add.w	r6, r4, #25
 810c0bc:	e7f5      	b.n	810c0aa <_printf_i+0x226>
 810c0be:	bf00      	nop
 810c0c0:	0810c41d 	.word	0x0810c41d
 810c0c4:	0810c42e 	.word	0x0810c42e

0810c0c8 <__sflush_r>:
 810c0c8:	898a      	ldrh	r2, [r1, #12]
 810c0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c0ce:	4605      	mov	r5, r0
 810c0d0:	0710      	lsls	r0, r2, #28
 810c0d2:	460c      	mov	r4, r1
 810c0d4:	d458      	bmi.n	810c188 <__sflush_r+0xc0>
 810c0d6:	684b      	ldr	r3, [r1, #4]
 810c0d8:	2b00      	cmp	r3, #0
 810c0da:	dc05      	bgt.n	810c0e8 <__sflush_r+0x20>
 810c0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810c0de:	2b00      	cmp	r3, #0
 810c0e0:	dc02      	bgt.n	810c0e8 <__sflush_r+0x20>
 810c0e2:	2000      	movs	r0, #0
 810c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c0ea:	2e00      	cmp	r6, #0
 810c0ec:	d0f9      	beq.n	810c0e2 <__sflush_r+0x1a>
 810c0ee:	2300      	movs	r3, #0
 810c0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810c0f4:	682f      	ldr	r7, [r5, #0]
 810c0f6:	6a21      	ldr	r1, [r4, #32]
 810c0f8:	602b      	str	r3, [r5, #0]
 810c0fa:	d032      	beq.n	810c162 <__sflush_r+0x9a>
 810c0fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810c0fe:	89a3      	ldrh	r3, [r4, #12]
 810c100:	075a      	lsls	r2, r3, #29
 810c102:	d505      	bpl.n	810c110 <__sflush_r+0x48>
 810c104:	6863      	ldr	r3, [r4, #4]
 810c106:	1ac0      	subs	r0, r0, r3
 810c108:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c10a:	b10b      	cbz	r3, 810c110 <__sflush_r+0x48>
 810c10c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c10e:	1ac0      	subs	r0, r0, r3
 810c110:	2300      	movs	r3, #0
 810c112:	4602      	mov	r2, r0
 810c114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810c116:	6a21      	ldr	r1, [r4, #32]
 810c118:	4628      	mov	r0, r5
 810c11a:	47b0      	blx	r6
 810c11c:	1c43      	adds	r3, r0, #1
 810c11e:	89a3      	ldrh	r3, [r4, #12]
 810c120:	d106      	bne.n	810c130 <__sflush_r+0x68>
 810c122:	6829      	ldr	r1, [r5, #0]
 810c124:	291d      	cmp	r1, #29
 810c126:	d82b      	bhi.n	810c180 <__sflush_r+0xb8>
 810c128:	4a29      	ldr	r2, [pc, #164]	; (810c1d0 <__sflush_r+0x108>)
 810c12a:	410a      	asrs	r2, r1
 810c12c:	07d6      	lsls	r6, r2, #31
 810c12e:	d427      	bmi.n	810c180 <__sflush_r+0xb8>
 810c130:	2200      	movs	r2, #0
 810c132:	6062      	str	r2, [r4, #4]
 810c134:	04d9      	lsls	r1, r3, #19
 810c136:	6922      	ldr	r2, [r4, #16]
 810c138:	6022      	str	r2, [r4, #0]
 810c13a:	d504      	bpl.n	810c146 <__sflush_r+0x7e>
 810c13c:	1c42      	adds	r2, r0, #1
 810c13e:	d101      	bne.n	810c144 <__sflush_r+0x7c>
 810c140:	682b      	ldr	r3, [r5, #0]
 810c142:	b903      	cbnz	r3, 810c146 <__sflush_r+0x7e>
 810c144:	6560      	str	r0, [r4, #84]	; 0x54
 810c146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c148:	602f      	str	r7, [r5, #0]
 810c14a:	2900      	cmp	r1, #0
 810c14c:	d0c9      	beq.n	810c0e2 <__sflush_r+0x1a>
 810c14e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c152:	4299      	cmp	r1, r3
 810c154:	d002      	beq.n	810c15c <__sflush_r+0x94>
 810c156:	4628      	mov	r0, r5
 810c158:	f7ff fbea 	bl	810b930 <_free_r>
 810c15c:	2000      	movs	r0, #0
 810c15e:	6360      	str	r0, [r4, #52]	; 0x34
 810c160:	e7c0      	b.n	810c0e4 <__sflush_r+0x1c>
 810c162:	2301      	movs	r3, #1
 810c164:	4628      	mov	r0, r5
 810c166:	47b0      	blx	r6
 810c168:	1c41      	adds	r1, r0, #1
 810c16a:	d1c8      	bne.n	810c0fe <__sflush_r+0x36>
 810c16c:	682b      	ldr	r3, [r5, #0]
 810c16e:	2b00      	cmp	r3, #0
 810c170:	d0c5      	beq.n	810c0fe <__sflush_r+0x36>
 810c172:	2b1d      	cmp	r3, #29
 810c174:	d001      	beq.n	810c17a <__sflush_r+0xb2>
 810c176:	2b16      	cmp	r3, #22
 810c178:	d101      	bne.n	810c17e <__sflush_r+0xb6>
 810c17a:	602f      	str	r7, [r5, #0]
 810c17c:	e7b1      	b.n	810c0e2 <__sflush_r+0x1a>
 810c17e:	89a3      	ldrh	r3, [r4, #12]
 810c180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c184:	81a3      	strh	r3, [r4, #12]
 810c186:	e7ad      	b.n	810c0e4 <__sflush_r+0x1c>
 810c188:	690f      	ldr	r7, [r1, #16]
 810c18a:	2f00      	cmp	r7, #0
 810c18c:	d0a9      	beq.n	810c0e2 <__sflush_r+0x1a>
 810c18e:	0793      	lsls	r3, r2, #30
 810c190:	680e      	ldr	r6, [r1, #0]
 810c192:	bf08      	it	eq
 810c194:	694b      	ldreq	r3, [r1, #20]
 810c196:	600f      	str	r7, [r1, #0]
 810c198:	bf18      	it	ne
 810c19a:	2300      	movne	r3, #0
 810c19c:	eba6 0807 	sub.w	r8, r6, r7
 810c1a0:	608b      	str	r3, [r1, #8]
 810c1a2:	f1b8 0f00 	cmp.w	r8, #0
 810c1a6:	dd9c      	ble.n	810c0e2 <__sflush_r+0x1a>
 810c1a8:	6a21      	ldr	r1, [r4, #32]
 810c1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810c1ac:	4643      	mov	r3, r8
 810c1ae:	463a      	mov	r2, r7
 810c1b0:	4628      	mov	r0, r5
 810c1b2:	47b0      	blx	r6
 810c1b4:	2800      	cmp	r0, #0
 810c1b6:	dc06      	bgt.n	810c1c6 <__sflush_r+0xfe>
 810c1b8:	89a3      	ldrh	r3, [r4, #12]
 810c1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c1be:	81a3      	strh	r3, [r4, #12]
 810c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 810c1c4:	e78e      	b.n	810c0e4 <__sflush_r+0x1c>
 810c1c6:	4407      	add	r7, r0
 810c1c8:	eba8 0800 	sub.w	r8, r8, r0
 810c1cc:	e7e9      	b.n	810c1a2 <__sflush_r+0xda>
 810c1ce:	bf00      	nop
 810c1d0:	dfbffffe 	.word	0xdfbffffe

0810c1d4 <_fflush_r>:
 810c1d4:	b538      	push	{r3, r4, r5, lr}
 810c1d6:	690b      	ldr	r3, [r1, #16]
 810c1d8:	4605      	mov	r5, r0
 810c1da:	460c      	mov	r4, r1
 810c1dc:	b913      	cbnz	r3, 810c1e4 <_fflush_r+0x10>
 810c1de:	2500      	movs	r5, #0
 810c1e0:	4628      	mov	r0, r5
 810c1e2:	bd38      	pop	{r3, r4, r5, pc}
 810c1e4:	b118      	cbz	r0, 810c1ee <_fflush_r+0x1a>
 810c1e6:	6a03      	ldr	r3, [r0, #32]
 810c1e8:	b90b      	cbnz	r3, 810c1ee <_fflush_r+0x1a>
 810c1ea:	f7ff f99b 	bl	810b524 <__sinit>
 810c1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c1f2:	2b00      	cmp	r3, #0
 810c1f4:	d0f3      	beq.n	810c1de <_fflush_r+0xa>
 810c1f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810c1f8:	07d0      	lsls	r0, r2, #31
 810c1fa:	d404      	bmi.n	810c206 <_fflush_r+0x32>
 810c1fc:	0599      	lsls	r1, r3, #22
 810c1fe:	d402      	bmi.n	810c206 <_fflush_r+0x32>
 810c200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c202:	f7ff fb84 	bl	810b90e <__retarget_lock_acquire_recursive>
 810c206:	4628      	mov	r0, r5
 810c208:	4621      	mov	r1, r4
 810c20a:	f7ff ff5d 	bl	810c0c8 <__sflush_r>
 810c20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c210:	07da      	lsls	r2, r3, #31
 810c212:	4605      	mov	r5, r0
 810c214:	d4e4      	bmi.n	810c1e0 <_fflush_r+0xc>
 810c216:	89a3      	ldrh	r3, [r4, #12]
 810c218:	059b      	lsls	r3, r3, #22
 810c21a:	d4e1      	bmi.n	810c1e0 <_fflush_r+0xc>
 810c21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c21e:	f7ff fb77 	bl	810b910 <__retarget_lock_release_recursive>
 810c222:	e7dd      	b.n	810c1e0 <_fflush_r+0xc>

0810c224 <__swhatbuf_r>:
 810c224:	b570      	push	{r4, r5, r6, lr}
 810c226:	460c      	mov	r4, r1
 810c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810c22c:	2900      	cmp	r1, #0
 810c22e:	b096      	sub	sp, #88	; 0x58
 810c230:	4615      	mov	r5, r2
 810c232:	461e      	mov	r6, r3
 810c234:	da0d      	bge.n	810c252 <__swhatbuf_r+0x2e>
 810c236:	89a3      	ldrh	r3, [r4, #12]
 810c238:	f013 0f80 	tst.w	r3, #128	; 0x80
 810c23c:	f04f 0100 	mov.w	r1, #0
 810c240:	bf0c      	ite	eq
 810c242:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810c246:	2340      	movne	r3, #64	; 0x40
 810c248:	2000      	movs	r0, #0
 810c24a:	6031      	str	r1, [r6, #0]
 810c24c:	602b      	str	r3, [r5, #0]
 810c24e:	b016      	add	sp, #88	; 0x58
 810c250:	bd70      	pop	{r4, r5, r6, pc}
 810c252:	466a      	mov	r2, sp
 810c254:	f000 f848 	bl	810c2e8 <_fstat_r>
 810c258:	2800      	cmp	r0, #0
 810c25a:	dbec      	blt.n	810c236 <__swhatbuf_r+0x12>
 810c25c:	9901      	ldr	r1, [sp, #4]
 810c25e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810c262:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810c266:	4259      	negs	r1, r3
 810c268:	4159      	adcs	r1, r3
 810c26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c26e:	e7eb      	b.n	810c248 <__swhatbuf_r+0x24>

0810c270 <__smakebuf_r>:
 810c270:	898b      	ldrh	r3, [r1, #12]
 810c272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810c274:	079d      	lsls	r5, r3, #30
 810c276:	4606      	mov	r6, r0
 810c278:	460c      	mov	r4, r1
 810c27a:	d507      	bpl.n	810c28c <__smakebuf_r+0x1c>
 810c27c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810c280:	6023      	str	r3, [r4, #0]
 810c282:	6123      	str	r3, [r4, #16]
 810c284:	2301      	movs	r3, #1
 810c286:	6163      	str	r3, [r4, #20]
 810c288:	b002      	add	sp, #8
 810c28a:	bd70      	pop	{r4, r5, r6, pc}
 810c28c:	ab01      	add	r3, sp, #4
 810c28e:	466a      	mov	r2, sp
 810c290:	f7ff ffc8 	bl	810c224 <__swhatbuf_r>
 810c294:	9900      	ldr	r1, [sp, #0]
 810c296:	4605      	mov	r5, r0
 810c298:	4630      	mov	r0, r6
 810c29a:	f7ff fbb5 	bl	810ba08 <_malloc_r>
 810c29e:	b948      	cbnz	r0, 810c2b4 <__smakebuf_r+0x44>
 810c2a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c2a4:	059a      	lsls	r2, r3, #22
 810c2a6:	d4ef      	bmi.n	810c288 <__smakebuf_r+0x18>
 810c2a8:	f023 0303 	bic.w	r3, r3, #3
 810c2ac:	f043 0302 	orr.w	r3, r3, #2
 810c2b0:	81a3      	strh	r3, [r4, #12]
 810c2b2:	e7e3      	b.n	810c27c <__smakebuf_r+0xc>
 810c2b4:	89a3      	ldrh	r3, [r4, #12]
 810c2b6:	6020      	str	r0, [r4, #0]
 810c2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810c2bc:	81a3      	strh	r3, [r4, #12]
 810c2be:	9b00      	ldr	r3, [sp, #0]
 810c2c0:	6163      	str	r3, [r4, #20]
 810c2c2:	9b01      	ldr	r3, [sp, #4]
 810c2c4:	6120      	str	r0, [r4, #16]
 810c2c6:	b15b      	cbz	r3, 810c2e0 <__smakebuf_r+0x70>
 810c2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810c2cc:	4630      	mov	r0, r6
 810c2ce:	f000 f81d 	bl	810c30c <_isatty_r>
 810c2d2:	b128      	cbz	r0, 810c2e0 <__smakebuf_r+0x70>
 810c2d4:	89a3      	ldrh	r3, [r4, #12]
 810c2d6:	f023 0303 	bic.w	r3, r3, #3
 810c2da:	f043 0301 	orr.w	r3, r3, #1
 810c2de:	81a3      	strh	r3, [r4, #12]
 810c2e0:	89a3      	ldrh	r3, [r4, #12]
 810c2e2:	431d      	orrs	r5, r3
 810c2e4:	81a5      	strh	r5, [r4, #12]
 810c2e6:	e7cf      	b.n	810c288 <__smakebuf_r+0x18>

0810c2e8 <_fstat_r>:
 810c2e8:	b538      	push	{r3, r4, r5, lr}
 810c2ea:	4d07      	ldr	r5, [pc, #28]	; (810c308 <_fstat_r+0x20>)
 810c2ec:	2300      	movs	r3, #0
 810c2ee:	4604      	mov	r4, r0
 810c2f0:	4608      	mov	r0, r1
 810c2f2:	4611      	mov	r1, r2
 810c2f4:	602b      	str	r3, [r5, #0]
 810c2f6:	f7f5 fd16 	bl	8101d26 <_fstat>
 810c2fa:	1c43      	adds	r3, r0, #1
 810c2fc:	d102      	bne.n	810c304 <_fstat_r+0x1c>
 810c2fe:	682b      	ldr	r3, [r5, #0]
 810c300:	b103      	cbz	r3, 810c304 <_fstat_r+0x1c>
 810c302:	6023      	str	r3, [r4, #0]
 810c304:	bd38      	pop	{r3, r4, r5, pc}
 810c306:	bf00      	nop
 810c308:	10000ea0 	.word	0x10000ea0

0810c30c <_isatty_r>:
 810c30c:	b538      	push	{r3, r4, r5, lr}
 810c30e:	4d06      	ldr	r5, [pc, #24]	; (810c328 <_isatty_r+0x1c>)
 810c310:	2300      	movs	r3, #0
 810c312:	4604      	mov	r4, r0
 810c314:	4608      	mov	r0, r1
 810c316:	602b      	str	r3, [r5, #0]
 810c318:	f7f5 fd15 	bl	8101d46 <_isatty>
 810c31c:	1c43      	adds	r3, r0, #1
 810c31e:	d102      	bne.n	810c326 <_isatty_r+0x1a>
 810c320:	682b      	ldr	r3, [r5, #0]
 810c322:	b103      	cbz	r3, 810c326 <_isatty_r+0x1a>
 810c324:	6023      	str	r3, [r4, #0]
 810c326:	bd38      	pop	{r3, r4, r5, pc}
 810c328:	10000ea0 	.word	0x10000ea0

0810c32c <_sbrk_r>:
 810c32c:	b538      	push	{r3, r4, r5, lr}
 810c32e:	4d06      	ldr	r5, [pc, #24]	; (810c348 <_sbrk_r+0x1c>)
 810c330:	2300      	movs	r3, #0
 810c332:	4604      	mov	r4, r0
 810c334:	4608      	mov	r0, r1
 810c336:	602b      	str	r3, [r5, #0]
 810c338:	f7f5 fd1e 	bl	8101d78 <_sbrk>
 810c33c:	1c43      	adds	r3, r0, #1
 810c33e:	d102      	bne.n	810c346 <_sbrk_r+0x1a>
 810c340:	682b      	ldr	r3, [r5, #0]
 810c342:	b103      	cbz	r3, 810c346 <_sbrk_r+0x1a>
 810c344:	6023      	str	r3, [r4, #0]
 810c346:	bd38      	pop	{r3, r4, r5, pc}
 810c348:	10000ea0 	.word	0x10000ea0

0810c34c <_init>:
 810c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c34e:	bf00      	nop
 810c350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c352:	bc08      	pop	{r3}
 810c354:	469e      	mov	lr, r3
 810c356:	4770      	bx	lr

0810c358 <_fini>:
 810c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c35a:	bf00      	nop
 810c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c35e:	bc08      	pop	{r3}
 810c360:	469e      	mov	lr, r3
 810c362:	4770      	bx	lr
